Date: Mon,  9 Jan 89 02:52:22 EST
From: "Leigh L. Klotz" <KLOTZ@ai.ai.mit.edu>
To: bug-boxer%DEWEY.SOE.Berkeley.EDU@jade.berkeley.edu
Message-Id: <515789.890109.KLOTZ@AI.AI.MIT.EDU>

YOUR and MY is essentially how ! and no-! works now in TELL.
IF I made @ work the same way insid eTELL, then it would indeed
work the same way.  

I believe that @ and ! can be made to work properly with the
TELL/build-flavored-input model, but I'm not certain.  YOUR and
MY are, as I pointed out, essentially implemented, modulo some
details of their use outside of the TELL line.  (however, given
the copy-and-execute model, I don't know if we can make a distinction
between the tell line and not the tell line, right?)  If you wanted
them, Ed could give them to you in essentially no time.

My reluctance would be complicating the model, since we don't
have any way to explain them.


Date: Sun, 8 Jan 89 12:48:22 PST
From: disessa%cogsci.Berkeley.EDU@jade.berkeley.edu (Andy diSessa)
Message-Id: <8901082048.AA22863@cogsci.berkeley.edu>
To: klotz@orion.ai.mit.edu
Cc: bug-boxer%dewey.SOE.Berkeley.EDU@jade.berkeley.edu
In-Reply-To: Leigh L. Klotz's message of Sun, 8 Jan 89 01:25:26 est <8901080625.AA09891@orion>
Subject: tel joe @stuff

One comment on this tell stuff.  This tell with inputs that need to be
evaluated in the local context is important enough that I would be
willing to consider a specific structure for it, so people don't need
to hack @ and ! in the first instance.  (Maybe later, for fancier
things they may use @, ! ant run, but I'm thinking of like
undergraduates and new grad students mostly as an example, who seem
regularly to get to this point and then have to learn about @ and !.
That's not such a terrible deal, but maybe a little syntactic sugar,
e.g., a MY and a YOUR command would get them over the hump quicker,
and make the code more readable.  E.g.

TELL JOE FORWARD MY X

meaning using the local X rather than JOE's.  So

TELL JOE FORWARD YOUR X (or HIS X)

means the same as just TELL JOE FORWARD X.

I have no strong feelings, just an idea.

--Andy

Date: Sat, 7 Jan 89 23:23:20 PST
From: ehl%SOE.Berkeley.EDU@jade.berkeley.edu (Edward Lay)
Message-Id: <8901080723.AA03748@dewey.soe.berkeley.edu>
To: klotz@orion.ai.mit.edu
Subject: Re:  profiling

I dont really remember the details.  Judging from what I said, I would
gues that the 22 % figure is inside of new-eval since that is the kind
of data that the symbolics metering stuff returns.  I imagine that boxer 
runs on the 3600 (over the net onto a sun screen via X if nothing else)
but the slime machine is currently turned of because the fan is SO
obnoxious ($ 20,000 machine sits idle because of a $50 fan -sort of like
"for want of a nail...")  
If you would like some numbers for your thesis, I could probably
crank it up for a day or to to generate some benchmarks for you.

ed

Date: Sun, 8 Jan 89 01:20:46 PST
From: ehl%SOE.Berkeley.EDU@jade.berkeley.edu (Edward Lay)
Message-Id: <8901080920.AA03959@dewey.soe.berkeley.edu>
To: klotz@orion.ai.mit.edu
Subject: Re:  optics

An Interactive Optics Workbook

June 1983

it was my thesis

Date: Sun, 8 Jan 89 12:48:22 PST
From: disessa@cogsci.berkeley.edu (Andy diSessa)
Message-Id: <8901082048.AA22863@cogsci.berkeley.edu>
To: klotz@orion.ai.mit.edu
Cc: bug-boxer@dewey.soe.berkeley.edu
In-Reply-To: Leigh L. Klotz's message of Sun, 8 Jan 89 01:25:26 est <8901080625.AA09891@orion>
Subject: tel joe @stuff

One comment on this tell stuff.  This tell with inputs that need to be
evaluated in the local context is important enough that I would be
willing to consider a specific structure for it, so people don't need
to hack @ and ! in the first instance.  (Maybe later, for fancier
things they may use @, ! ant run, but I'm thinking of like
undergraduates and new grad students mostly as an example, who seem
regularly to get to this point and then have to learn about @ and !.
That's not such a terrible deal, but maybe a little syntactic sugar,
e.g., a MY and a YOUR command would get them over the hump quicker,
and make the code more readable.  E.g.

TELL JOE FORWARD MY X

meaning using the local X rather than JOE's.  So

TELL JOE FORWARD YOUR X (or HIS X)

means the same as just TELL JOE FORWARD X.

I have no strong feelings, just an idea.

--Andy

Date: Sun, 8 Jan 89 17:29 EST
From: Alan Bawden <Alan@AI.AI.MIT.EDU>
Subject: SQUID
To: klotz@ORION.AI.MIT.EDU
In-Reply-To: <8901051127.AA08208@orion>
Message-Id: <19890108222958.1.ALAN@PIGPEN.AI.MIT.EDU>

    Date: Thu, 5 Jan 89 06:27:03 est
    From: klotz@ORION.AI.MIT.EDU (Leigh L. Klotz)
    do you know if there is a citation for maclisp SQUID objects?
    i use the name in my evaluator and would like to give credit.

You might look at the conference proceedings for the 1st Lisp conference
(1980 I think).  There might be something there, but I doubt it.

Date: Sun, 8 Jan 89 05:49:36 est
From: klotz@ORION.AI.MIT.EDU (Leigh L. Klotz)
Message-Id: <8901081049.AA10093@orion>
To: gifford@xx, alan@ai, jar@ai
Cc: klotz@ai.ai.mit.edu
Reply-To: klotz@ai.ai.mit.edu
Subject: Boxer

In writing my thesis, I'm becoming more convinced that Boxer users
call by denotation.  Do you suppose this is a first?

I think this because when we evaluate an expression, we substitue
copies of function bodies for the function names that occur in the
expressoin.  For the formal parameters, we add new lexical variables
the copied function bodies.

Here's the scoop:

To evaluate an expression, examine the first element:

. If it is a name,
  . Look up the value of the name beginning with the environment of the enclosing box and searching outward.
  . Copy the procedure or data value to the current box, replacing the name.
  . Move back before the new box and continue evaluating the expression.

. If it is a data box, leave it and continue evaluating the rest of the expression.

. If it is a doit (procedure) box, 
  . Evaluate the rest of the line until there
    are N data boxes present, where N is the number of arguments the procedure
    requires.
  . Move the N data boxes inside the procedure box and give them the names
    of the formal parameters.
  . Evaluate the lines of the procedure.
  . Replace the doit box by the last data box on the last line of the
    evaluated procedure.


