% -*- Mode: TeX -*-
% This is 6.821 fall 1987 handout No. 0
% Table of contents

\documentstyle[11pt,6821]{article}

\handout{0}{10 December 1987}
\handouttitle{Table of Contents}

\begin{body}

\begin{tabular*}{\textwidth}{rl}
    0 & Table of contents
\\  1 & Tentative lecture schedule
\\  2 & Administrative information
\\  3 & Alternatives to the 6.001 lab
\\  4 & Problem set 1: type equivalence
\\  5 & The lambda calculus
\\  6 & (superseded by handout $6'$)
\\ $6'$ & Lambda calculus: Church numerals and recursion
\\  7 & Summary of Scheme
\\  8 & Iteration and recursion in Scheme
\\  9 & Clarification of term equivalence and proof of corollary to
\\    & ~~~~~Church-Rosser I
\\ 10 & Rosser, ``Highlights of the history of the lambda-calculus''
\\ 11 & Notes on {\tt letrec}
\\ 12 & Meta-circular interpreters
\\ 13 & Operational semantics
\\ 14 & Problem set 2: lambda-calculus and interpreters
\\ 15 & Full closures
\\ 16 & Problem set 1 solution
\\ 17 & An operational semantics for a Scheme-like language
\\ 18 & Denotational semantics
\\ 19 & Problem set 3: operational and denotational semantics
\\ 20 & Problem set 2 solution
\\ 21 & Tennent, ``The denotational semantics of programming languages''
\\ 22 & Parameter passing mechanisms
\\ 23 & Continuations
\\ 24 & Standard semantics for Scheme
\\ 25 & Problem set 3 solution
\\ 26 & Problem set 4: programming an interpreter
\\ 27 & A denotational semantics for the $\lambda$-calculus
\\ 28 & Continuation examples
\\ 29 & Problem set 5: denotational semantics
\\ 30 & Problem sets 4 and 5: clarifications
\\ 31 & Naur, ``Revised report on the algorithmic language ALGOL 60''
\\ 32 & Knuth, ``The remaining trouble spots in ALGOL 60''
\\ 33 & Axiomatic semantics
\\ 34 & Hoare, ``An axiomatic basis for computer programming''
\end{tabular*}
\newpage
\begin{tabular*}{\textwidth}{rl}
   35 & Dijkstra, ``Guarded commands, nondeterminacy and formal
\\    & ~~~~~derivation of programs''
\\ 36 & Popek {\em et al.,} ``Notes on the design of Euclid''
\\ 37 & Problem set 4 solution
\\ 38 & London {\em et al.,} ``Proof rules for the programming language
	Euclid''
\\ 39 & (superceded by handout 44)
\\ 40 & Wirth, ``The programming language Pascal''
\\ 41 & Habermann, ``Critical comments on the programming language Pascal''
\\ 42 & Wirth, ``On the design of progamming languages''
\\ 43 & Problem set 6: Algol 60 semantics; guarded commands (see also h.~47)
\\ 44 & Types I$'$
\\ 45 & Types II:  Type checking
\\ 46 & Milner, ``A theory of type polymorphism in programming languages''
\\ 47 & Correction to problem set 6
\\ 48 & Types III:  Kinds, bounded quantification, and abstract types
\\ 49 & Gifford {\em et al.,} {\em FX-87 Reference Manual}
\\ 50 & Problem set 5 solution
\\ 51 & Problem set 6 solution
\\ 52 & Cardelli and Wegner, ``On understanding types, data abstraction,
\\    & ~~~~~and polymorphism''
\\ 53 & Midterm examination
\\ 54 & Dependent types and {\tt Type:Type}
\\ 55 & Cardelli, ``A Polymorphic $\lambda$-calculus with {\tt Type:Type}''
\\ 56 & Problem set 7: scoping; types
\\ 57 & Midterm examination solutions
\\ 58 & Type inference
\\ 59 & Milner, ``A proposal for Standard ML''
\\ 60 & Burstall and Lampson, ``A kernel language for modules and
\\    & ~~~~~abstract data types'' (Pebble)
\\ 61 & Liskov {\em et al.,} ``Abstraction mechanisms in CLU''
\\ 62 & Problem set 8: type inference program
\\ 63 & Barnes, ``An overview of Ada''
\\ 64 & Xerox, ``The Smalltalk-80 system''
\\ 65 & Object-oriented programming
\\ 66 & (does not exist)
\\ 67 & Tanenbaum, ``A tutorial on Algol 68''
\\ 68 & Problem set 7 solution
\\ 69 & Exception handling
\\ 70 & Problem set 8 solution
\\ 71 & Logic programming
\\ 72 & Kowalski, ``Algorithm = logic + control''
\\ 73 & Thinking Machines Inc., ``The essential *Lisp manual, rel.1 rev.3''
\\ 74 & Last term's final exam
\\ 75 & Last term's final exam solutions (a.k.a. handout~$\omega + 1$)
\\ 76 & Lampson and Redell, ``Experience with processes and monitors in Mesa''
\\ $\aleph_0$ & Ultimate examination
\\ $\aleph_0+1$ & Ultimate examination solutions
\end{tabular*}

\end{body}
