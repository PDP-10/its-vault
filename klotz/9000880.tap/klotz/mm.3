(defun m* (A B)
  (m (e+ (e* (x A) (x B))
	 (e* (y A) (z B)))
     (e+ (e* (x A) (y B))
	 (e* (y A) (t B)))
     (e+ (e* (z A) (x B))
	 (e* (t A) (z B)))
     (e+ (e* (z A) (y B))
	 (e* (t A) (t B)))))

(defun m (&rest x) (append x nil))
(defun e+ (a b) (logxor a b))
(defun e* (a b) (logand a b))
(defun x (M) (car M))
(defun y (M) (cadr M))
(defun z (M) (caddr M))
(defun t (M) (cadddr M))


(setq i '(1 0 0 1))
(setq a '(0 1 1 0))
(setq b '(1 0 1 1))
(setq c '(1 1 1 0))
(setq d '(0 1 1 1))
(setq e '(1 1 0 1))

(defun pr (M)
  (cond ((equal M i) 'i)
	((equal M a) 'a)
	((equal M b) 'b)
	((equal M c) 'c)
	((equal M d) 'd)
	((equal M e) 'e)))

