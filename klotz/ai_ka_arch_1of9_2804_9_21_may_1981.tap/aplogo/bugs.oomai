Date:  7 AUG 1980 0357-EDT
From: slh at MIT-AI (Stephen L. Hain)
Sent-by: PGS at MIT-AI
To: APLOGO at MIT-AI

I just made three (3) copies of the NEW LOGO disk (HELLO,LOADER,LOAD BIN,LOGO)
and two (2) boot disks (LOGO only). We should bring an extra copy of the BASICS
disk, and the DOS 3.2 MASTER in case we want to make more boot disks. Perhaps
we should also bring along all the Pascal disks, or maybe just *all* the disks.

Later on, I'll put in a command to store a graphics image on disk (and one to
read one).

Actually, there's only about 300 bytes of room left, so maybe we won't be able
to do much more until we shorten what's there already.

Date:  7 AUG 1980 0320-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

MFS is winning in every respect except error handling. Luckily, it is
not dying completely on error handling, only printing out the wrong
message. This is not as good as it sounds, however. It is somehow
getting to the wrong error routine, or somesuch, as it never reaches
the one I created for it.
Apparently there is still one more fashion in which DOS varies from
what Arkley told me, and I shall call call him tomorrow to find out
what the problem is. He expressed his partial unsureness of the
accuracy of what he had told me last time we talked. Excuse the
strange sentence construction, please.

Date:  6 AUG 1980 1052-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

Steve: Hal suggests that we just us e the Apple floating point routines.
More precision, and they work.

Date:  6 AUG 1980 1051-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

Try 0-4. or 0-8., or 0 - any power of two. There's the graphics bug- it's
not a graphics bug at all. Floating point.

Date:  6 AUG 1980 0845-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
Subject: MFS
To: APLOGO at MIT-AI

MFS (the Minimal File System) (pronounced "miffs") is up. Steve - the
end-of-buffer bug was because, in some narcoleptic haze, I typed LDA
EDBUF instead of LDA ENDBUF. The M was caused by the initial carriage
returns, so I removed them. I don't like "TRANSFER COMPLETE", so I
removed that -- the Apple user is used to waiting for a prompt to
appear after a file command.

I am adding CATALOG and DELETE now.

Date:  6 AUG 1980 0633-EDT
From: slh@ai
Sent-by: PGS at MIT-AI
To: APLOGO at MIT-AI

10 hours later, and 1 bug flushed. Random angles were causing crashes,
and it was practically impossible to figure out why. Only integral angles
did it, but if you added .00001, everything was fine, and most of
the angles were like 64 or 128 away from 360 or 180 or something. It turns
out that the routine we called to complement flt. pt. nums did more than
that, so I rewrote it. Now most bugs are gone, but there are still a very
few instances where a line will be drawn incorrectly. Like doing a SETH :X
where X is one of these (God knows why) values that makes it crash, draws
the turtle minus a side, or just gives an OOb error. But doing SETH to :X
plus or minus .00001 is fine. I'll get back on this later, although it really
stumps me.

Also, some floating pt numbers are printing out wrong (just about all the headings
that don't work right, about 4 so far, print ou wrong - like as -6D. or 2.H).
But PR HEADING/2 gives -8., and PR HEADING+1 gives -15., and PR HEADING*1 gives
-16., so it might just be a problem with the Print-floatin-pt-number routine.
(Again, all the disastrous headings are some power of two. This clue isn't nearly
as helpful as it might seem, indeed it is very baffling).

I'll get back to it this afternoon (I'm not going anyplace - just sleepland)
but not to worry too much - MOST everything works, ie 90% of the values you
give POLYSPI or INSPI or SQUIRAL are OK, just once in awhile it crashes.
Bye till 1400.

Date:  5 AUG 1980 2107-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

Found big bug in filing - String for ",A$2000,L$2000<cr>" was wrong, it was
",A$2000,L2000<cr>" which was a little different. Also - are you sure their
<cr> is $0D ? I really think it's $8D, so I put that in.

HAL@MIT-MC 08/05/80 17:36:15
To: aplogo at MIT-AI

We are two days late in our schedule.  It has got to be working
tomorrow.  Steve, I would like you to STAY AT MIT until the thing
works.

Besides all the obvious bugs in the graphics, there is something
funny in the way setxy handles numbers. Setx or sety with
an input minus a power of two only goes half as far as it should.

Also, setturtle doesn't work.

CS should reset the turtle to 0,0,0.  Also, you are presumably not
initializing the internal line position, since the first line drawn comes
from some funny place.

There are some GC bugs, but its not worth exteminating them now.



HAL@MIT-MC 08/05/80 17:35:50
To: aplogo at MIT-AI

We are two days late in our schedule.  It has got to be working
tomorrow.  Steve, I would like you to STAY AT MIT until the thing
works.

Besides all the obvious bugs in the graphics, there is something
funny in the way setxy handles numbers. Setx or sety with
an input minus a power of two only goes half as far as it should.

Also, setturtle doesn't work.

CS should reset the turtle to 0,0,0.  Also, you are presumably not
initializing the internal line position, since the first line drawn comes
from some funny place.

There are some GC bugs, but its not worth exteminating them now.



Date:  5 AUG 1980 1315-EDT
From: MJS at MIT-AI (Michael Sannella)
Sent-by: KEN at MIT-AI
To: APLOGO at MIT-AI

If you're looking for bugs with the grafix system, do:
	CS
	PD
	FD 100
	BK 100
	RT 90
	FD 100
it looks like it should be easy to fix (someone must
not be updating turtle state info, or not looking at the
current state info, or something)

Date:  5 AUG 1980 0835-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

OK, all positioning is correct (in FD, BK, SETX, SETY, SETXY, etc.) and all
angle-ing is correct (RT, LT, SETH, etc.) and the turtle is drawn correctly
and XOR works. Only problem (just fixed, I'm pretty sure) is getting everything
done in right order (erase old turtle, move to new position, draw new turtle).
I think I wrapped this up with the last set of fixes.

At first, graphics will be kind of slow, especially with the turtle shown. Once
everything works, and there is time, I can improve (a lot) the speed, but
I don't want to risk it now, as it might take awhile.

Hal - why don't you think up a set of demos, and we'll give top priority to
getting them working (not that I anticipate any more bugs, but just in case
there are more than expected). I'll finish up graphics this afternoon most
likely, and if everything seems to work, I'll hack the filing system for
awhile, if Pat isn't around.


Date:  5 AUG 1980 0703-EDT
From: pgs at MIT-AI (Patrick G. Sobalvarro)
Sent-by: ___013 at MIT-AI
To: APLOGO at MIT-AI

We are winning a little bigger on file system. I got it to save a
file. Unfortunately, the file's name was about twenty characters
longer than the one I specified, and half the characters were flashing,
but, as we say in my country, "Uno no se los puede ganar todos," or
don't expect too much the first time around.

Date:  5 AUG 1980 0613-EDT
From: klotz at MIT-AI (Leigh L. Klotz Jr.)
Subject:  Funny Pnames
To: APLOGO at MIT-AI

I found some horrendous bugs with funny pnames in Apple Logo:
     PRINT "'FUNNY PNAME' and
     PRINT "' '
seem to work fine, but
     PRINT "''
prints "PRINT" (sans quotes) Pat tried
     PR "''
and it sure enough printed "PR" -- hmmm.
So I suggested that we try to find out where exactly the result was coming from
by printing some function on this funny pname.
     PRINT F "'77' returned "7" but
     PRINT F "'' bombed in a big way: it crashed and entered the monitor (debugger?)
somewhere in page BB.

For comparison, TILOGO had this to say:

PRINT "' '            <SPACE>
PRINT "''             <NOTHING>
PRINT F "'77'         7
PRINT F "''           F DOESN'T LIKE  AS INPUT

(I don't know where the extra space in that last error message came from, but that's
another story.)


Date:  5 AUG 1980 0327-EDT
From: pgs at MIT-AI (Patrick G. Sobalvarro)
Sent-by: SLH at MIT-AI
Subject: file system
To: APLOGO at MIT-AI

We are losing on the file system. There is no particular reason for
this, as far as I can tell; we are simply losing. We have done all the
magic things that John Arkley told us we should do, and we generate no
errors, but the disk never spins. If we knew what was inside DOS, we
might win, or if Arkley tells us something more appropriate.

I shall call him today and ask what the story is.

Date:  5 AUG 1980 0257-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

I just put SREAD in, it'll get working when SSAVE does, supposedly.
Turtle-graphics hacking continues.... desparately.... 

Date:  4 AUG 1980 1043-EDT
From: slh@ai
Sent-by: ANNE at MIT-AI
To: APLOGO at MIT-AI

When I said "parser", I meant the actual strinf-to-fix/flonum routine, as
a mathematical algorithm (value of Ascii digit N minus ascii("0") times
ten to the power of place_holder etc. type type cruft). I'm just wondering
if I'm introducing an error someplace, or magnifying a bit-dropping operation.

Date:  4 AUG 1980 0904-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

When one does

MAKE "FOO 'BAR BAZ'

or tries to use funny pnames at all, one gets back

YOU HAVEN'T TOLD ME HOW TO @@'&$@K!+*@@
7@@'@

or something equally random after the undef func error. Regular pnames
work, though.

Date:  4 AUG 1980 0313-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

Perhaps the round-up error is caused by the parser - to compute the decimal
portion of a number, it successively multiplies the number by 10 and adds
digits, and then finally divides by 10 a certain number of times. So 123.4567
is computed from 1234567/10/10/10/10. Would it decrease the error to divide
decimal digits by 10^n and then add them to the total, so that 123.4567 would
be computed from 123 + 4/10 + 5/10/10 + 6/10/10/10 + 7/10/10/10/10? I'm fairly
positive that the rounding error is not due to lack of precision, but is instead
the result of an inefficient parsing/deparsing algorithm.

Does anyone know if there is any difference between multiplying a number by
0.1 instead of dividing by 10 (using standard floating-point routines)? It
would seem that since any integer can be represented exactly in binary, but
fractions are often inexact, that dividing is better, but is it really?

Thanks for any comments.

HAL@MIT-MC 08/02/80 18:00:03
To: aplogo at MIT-AI
steve--
i went out and bought a copy of the apple programmer's aid manual.  it
has listings of the high-res routines.  i left it with patrick.

it looks like replacing two instructions will do xor drawing.  i
marked the change in the listing in the manual.  note that if you draw
the turtle in xor mode, you can use the exact same routine both to
draw and to erase the turtle.



Date:  1 AUG 1980 1724-EDT
From: hal at MIT-AI (Hal Abelson)
Sent-by: DANNY at MIT-AI
To: APLOGO at MIT-AI

more on the fix-to-float convert bug---

-1 + 0.0 --> 0.0
-100 + 0.0 --> 0.0
-1000 + 0.0 --> 9.7E29

Date:  1 AUG 1980 1712-EDT
From: hal at MIT-AI (Hal Abelson)
Sent-by: DANNY at MIT-AI
To: APLOGO at MIT-AI

another graphics bug.  when you try to move out of bounds, the system gives
an error message, but i think it updates the coordinate anyway.  for example:

setx 1000
error--out of bounds

followed by
sety 0
still gets out of bounds error

Date:  1 AUG 1980 1710-EDT
From: hal at MIT-AI (Hal Abelson)
Sent-by: DANNY at MIT-AI
To: APLOGO at MIT-AI

that message from danny is really from me.

Date:  1 AUG 1980 1709-EDT
From: DANNY at MIT-AI (W. D. Hillis)
To: APLOGO at MIT-AI

steve---there are bugs in the current version of floating point.  here are
some things which i expect are related:

1) integer (-30.0) --> 152
2) integer 30.0 --> 0
-30*1.5 --> 0

setxy -50. (-50.)   sets the turtle at 0 0


Also, the distortion in the apple is pretty bad.   I'd suggest that, as part of your map from
internal turtle coordinates to apple screen coordinates, you multiply all y-coordinates
by a fudge factor of about 0.8.

Date:  1 AUG 1980 1353-EDT
From: slh@ai
Sent-by: EFH at MIT-AI
To: APLOGO at MIT-AI

I just put in a 91-entry full-precision flonum table for
the sine and cosine lookup, and the FD and BK routines
are installed. Well, here goes....

Date:  1 AUG 1980 1351-EDT
From: EFH at MIT-AI (Edward F. Hardebeck)
To: APLOGO at MIT-AI

I just put in a 91-entry full-precision flonum tabel for
the FD and BK routines. Here goes.....

HAL@MIT-MC 08/01/80 12:15:30 Re:  pedantry of the day
To: aplogo at MIT-AI, tilogo at MIT-AI

Logo is the name of a computer language, not an acronym for the name
of a computer language.  Therefore one spells it ``Logo'' and not
``LOGO''.  (Similarly, one writes ``BASIC'', since that is an acronym,
and ``Pascal'', since that is not.)

Please use ``Logo'' in the documentation that we produce.



HAL@MIT-MC 08/01/80 09:18:44
To: aplogo at MIT-AI

patrick--

yes, i think the editor should have a line table (have you considered
a doubbly-linked list of lines, as is done, i think in zwei?)

in any case, the crucial thing now is to get some filing capability in
before we leave for berkeley.  (i'd really like to see it on monday,
so we can check the system out for a few days, generate demo disks,
etc..  please let me know if you don;t think you can have it by then.)



Date:  1 AUG 1980 0907-EDT
From: ADIS at MIT-AI (Andy diSessa)
Subject: edit commands
To: APLOGO at MIT-AI

Can we do something a bit more mnemoic and consistant for edit command
keys?  Like cntrl-(forward arrow) for forward a word or line etc. or
cntrl-rubout for delete-forward a character.

Date: 31 JUL 1980 1509-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI, TILOGO at MIT-AI

I fixed the TO bug, and I also put in F (for FIRST) and L (for LAST), even
though you asked for them to be removed earlier. I'm not sure how easy it
would be to have " or [] printed in errors, since the evaluator strips
of the QATOM bits to make it an ATOM when it pushes a word as an argument.
What I'm wondering about is whether Q,D,LATOMS which are really SATOMS
are gcolled correctly; the garbage collector dispatches off of the type,
but there aren't sepatarate typecodes for atoms which are SATOMs but have
Q,D or L attributes.

If we don't let the evaluator strip the Q bits off, then it would also be easier
to not have to intern them. Actually, a system routine can never get anything
other than ATOM or SATOM or LIST types from the evaluator, since everything else
is either executed or signalled as error, so system routines assume Q but sometimes
dispatch off of the ATOM/SATOM case. The problem is in LTYPE, which never gets
Q,L,D designations except when printing tokens from an FLIST (procedure) or the
ILINE (which never happens directly). Perhaps there should be (what appears to be)
another LTYPE for ERROR, which automatically prints a " before SATOM/ATOM types,
(by the way, it should now print [] for empty lists) - except for those errors
which are explicitly for un-quoted atoms (YOU HAVEN'T TOLD ME HOW TO..., ...IS
ALREADY DEFINED, etc.) which will have an alternate entry point. Dos this sound
like a hack, or should I just implement QATOMS as they are and add SQATOMS (SATOMS
which are quoted) and modify the dispatches and the evaluator?

HAL@MIT-MC 07/31/80 09:45:35
To: aplogo at MIT-AI


two bad bugs in latest (7/30) version

if you have a procedure and use EDIT FOO to change it, Logo then barfs
back with FOO IS ALREADY DEFINED, rather than accepting the change.

labels seem not to work.  Logo says LABEL IN MIDDLE OF LINE, even when
the label was at the beginning.



Date: 31 JUL 1980 0316-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

Also also, the graphics screen is not displayed until it is cleared initially.
Maybe we should show it being cleared (it looks impressive, but which is really
better?).

Date: 31 JUL 1980 0251-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

Graphics is very very close to complete.... just a few minor bugs, which I think I
just fixed (?). There are now two new commands - MIX, which is used in graphics
mode, gives the default graphics/text (4 lines) screen, and FULL, which hides
the text to give a full page of graphics (although things can be typed and will
be "printed", they will not be seen). There are also two new interrupt characters,
Control-F which does a "FULL" (zaps text), and Control-L which does a "MIX" (show
text). They only work in graphics mode. The default mode, done by the first CS, is
MIX.

In addition to FD and BK, I'm not sure how hard it will be to do an Exor mode for
drawing the turtle. Also, it is trivial to implement background color changing,
but I'm not sure how this would affect the exor-turtle stuff.

Date: 30 JUL 1980 1927-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

SETX, SETY, etc. seem to work; all we need now are FD and BK, since the
heading computations seem to work, as does the miscellaneous like TS, SETT,
XCOR, CS, ND, etc.

HAL@MIT-MC 07/30/80 13:37:07
To: aplogo at MIT-AI


apple logo was a big hit in Texas.  good job!  yes, steve, they are
suitably impressed an embarrassed that Apple Logo is so much faster
than TI.  I am trying to use that as an incentive for them to fix
their crockish hardware, but it may be hopeless.


Anyway, I agree you should eventually fix things so that not
everything gets interned.  But the main priority now is to GET
GRAPHICS UP!!!  There is almost no point taking the Apple to Berkeley
without it.

Filing is also critical if we are going to show off any interesting
programs.  Although I'd like to see things like ctl-N and ctl-P
working in the editor, its more important to get filing in first.

Let's aim for both graphics and filing to work by next Monday, so we
have a day or two to play with the system.  If its looking like you
can;t do it by then, please let me know.


Date: 30 JUL 1980 0417-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

Problem with TO: Firstly, it defines empty procedure and calls the screen editor.
When screen editor gets evaluated, TO gets called again. This time it has to
delete old (empty) version of procedure, and install new one, and know not to
call the screen editor again. All sorts of cases to be considered, though - changing
the title in the screen editor, or writing a new one (or more) in screen editor,
etc., etc. So we have to use the flags (EDSW, INDEV) to keep track of what we
really want TO to do, and meanwhile all the important supposedly-global variables
like EDBOD, EDTATM, etc. are being changed by random stages of evaluation.
No real problems here, just hassles, but having TO invoke screen editor wasn't
as easy as I thought.
Also, don't get upset if random things don't work - I just changed a lot
of (supposedly) harmless things to optimize for speed, and I've made a
few typing errors, etc. (although I did find some real live errors that
weren't seen before!). I'm going to go ahead with changing the way things
get stuck on the Oblist, but it's gonna take awhile - perhaps I should
wait until after Berkely, unless the space problem is really a problem.
Anyway, if you find a new bug in LOGO, reboot (if necessary) and try to
narrow it down to an internal thing, if possible, because I can fix the
bugs a hell of a lot faster than the assembling/downloading takes, and
it would be nice to be able to fix a lot at once. Thanks.

Date: 29 JUL 1980 1336-EDT
From: EFH at MIT-AI (Edward F. Hardebeck)
To: APLOGO at MIT-AI

It would be a good idea to not intern atoms unless they have some
value or function binding.  11LOGO does this.  In fact these
"uninterned pnames" as they are called can just be of type string
and not even have a value and function cell.

Date: 28 JUL 1980 2039-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

Something's funny here... if every new word created is interned (by
WORD, FIRST, LAST, etc.) then it is stuck on the Oblist. So a procedure
like

TO ZOOP A Z
PR :A
ZOOP WORD :A :Z :Z
END

which prints out the following

?ZOOP "X "Y
X
XY
XYY
XYYY
XYYYY
XYYYYY
...

keeps sticking all these words onto the Oblist, so of course they'll never be
zapped, unless the oblist is garbage collected. Either we can do this, or
we can just not Intern them when they're created - we have the choice of just
"using" them as they are or seeing if any are already on the Ob/Soblist, and
if so just reset the pointer (like Intern does now). This second alternative
might save some nodespace when an in-line garcol is done. But is there any
disadvantage to not having them stuck on the Oblist if they don't exist there
already?

Taking this further, perhaps nothing should be stuck on the Oblist via Intern
(including the line parser tokens), only names for MAKE and TO and for local
bindings. To avoid having duplicate strings if there are many variables with
the same value, Intern might want to search all the atoms and also all of the
atoms' values, and change the pointer for a duplicate word to that of the value
of an atom with that same value.

One more comment ...  I don't seem to remember having this problem with
garbage collecting before. Did I just not test it with node-eating procedures,
or am I making some gross mistake in this discussion?

Date: 28 JUL 1980 1417-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

I made a mistake before - you don't have to g.c.-protect the node-pointer
on a cons call, because if a g.c. is done, the cons isn't done until after.

When things do get protected, they are pushed on the VPDL and then popped after
the gc. They are not left on the VPDL, that's not the problem - and there are
only five protected arbitrary pointers - not enough to protect a lot of stuff.
Most likely, the problem is in what the garbage collector protects from the
various stack frames - I'll check this out, perhaps the PDL isn't getting
reset properly, and stack frames are staying forever.

Hal - I wonder if it wouldn't be too insulting to mention to TI that the
Apple (with a 1 Mhz 8 bit processor) runs 3 times faster than the TI 99/4
(with a 3 Mhz 16 bit processor)? You might also want to mention (if they
don't already know it) that the Apple/6502 is also slower than most other
commercial micros - the TRS-80, the 8080/6800 hobby kits, to mention a few.

HAL@MIT-MC 07/26/80 22:51:28
To: aplogo at MIT-AI

just a random thought on the large word gc bug--- when you gc-protect
things when doing a cons, are you sure you are only temporarily
protecting them, as opposed to permanently protecting them?


Date: 26 JUL 1980 2207-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

The version that's going to Texas still has a bug or two which I can't
figure out quite yet, although they're not very disastrous. One is that
if you try to cons up huge words, LOGO might crash, or give you garbage
appended onto your word, after it does a garbage collect in the middle
of your program. The other bug is that too much stuff is left uncollected,
even when an ER PROCEDURES and then an ER ALL is done. All that should
be left, ideally, is the SOBLIST and the OBLIST full of words that you've
typed in. But you can't get up to the original 2000 or so, it never goes
above about 100 nodes for some reason. I think the bugs are related, as
if you cons up big sentences (lists), as opposed to words, you can get
it to reclaim 1000 nodes. So all the intermediate words which are being
created are not being collected, although I can't seem to figure out why
they're being saved. Anyway, the language works if you try not to make
routines which are intended to overload.

Date: 26 JUL 1980 1949-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

Just found the garbage collector bug. The line editor totally works.
Will re-test garbage collector and copy a bunch of disks. Anything
else you want on the disks? I'll put HELLO, LOGO, LOADER, and LOAD BIN
on. Hal - do you want a listing or anything like that to take to Texas?
I probably won't be in tonight after 9, but most likely I'll be here
tomorrow around noon.

Date: 26 JUL 1980 1913-EDT
From: slh at MIT-AI (Stephen L. Hain)
Sent-by: PGS at MIT-AI
To: APLOGO at MIT-AI

I fixed the input-line editor; everything works, and it's actually pretty
compact. I deleted LINES and all NUMBER_SWITCH decisions; now the only
time you'll see numbers is when you use CHANGE (not the screen editor)
and do a PO inside of it. The garbage collector still crashes once in awhile
(with WORD anyway) - I've fixed that problem a thousand times, I'll have to
see where the new problem is.

Date: 26 JUL 1980 1247-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

As of now, if you call Alec in graphics mode, you enter text mode
rather than getting an error message, as per Hal's suggestion.

Date: 26 JUL 1980 1025-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
Subject: more on editor
To: APLOGO at MIT-AI

    HAL@MIT-MC 07/26/80 10:09:50 Re: more on editor

    So the only effect of typing in a bunch of lines to the editor and
    executing them at once is that the user doesn't get any feedback
    between evaluations.

Well, actually, he sort of does get feedback between the evaluations
in the current versions, in that, on readback, all those messages are
typed on the screen, like "FOO DEFINED" and all that. It doesn't do
him much good, because he can't really react until the entire buffer's
contents are evaluated. Still, it seems to me that it would take a bit
of hair to make it impossible to do anything but define functions in
the editor.

HAL@MIT-MC 07/26/80 10:09:50 Re:  more on editor
To: aplogo at MIT-AI

with respect to steve's comments on typing in a series of top-level
commands to the editor...

remember that all the within-line editor commands should be usable
from the read-eval-print loop directly.  so the only effect of typing
in a bunch of lines to the editor and executing them at once is that
the user doesn't get any feedback between evaluations.  i suppose we
could come up with an example where this might be useful, but it
certainly doesn't sound like the kind of thing that one wants to do
generally.



Date: 26 JUL 1980 0712-EDT
From: pgs at MIT-AI (Patrick G. Sobalvarro)
Sent-by: SLH at MIT-AI
To: APLOGO at MIT-AI

OK, everything works in the editor now. I am currently installing ^P
and ^N. They take up so much space that when we get around to
improving things I am going to modify Alec to include a line table.
This will require some space at the end of the buffer but will really
economize on code, which is a pretty big win.
But the version we now have wins pretty big, anyway.

Date: 26 JUL 1980 0405-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

OK, I've simplified the I/O structure: S_READ1 evaluates lines from
the edit buffer by stuffing them into the Line-array, but everything
else is normal (so REQUEST, PRINT, etc. will be effective).

Date: 25 JUL 1980 2300-EDT
From: slh@ai
Sent-by: PGS at MIT-AI
To: APLOGO at MIT-AI

I don't really see anything wrong with being able to
use the editor for making a series of immediate commands,
as long as nothing disastrous or conflicting can happen.
Also, to make the editor check that only one procedure was
being defined is extremely difficult, and it would make
it very difficult also to allow the editor to serve as
an evaluator-disk interface. Right now, it would be trivial
to implement a text-handling system (it would be impossible
to do using lists or strings).

We will then be putting in a "RETRIEVE" or somesuch command to get
back the previous buffer, in case there was en error early in evaluating
a long list of things. This would be trivial to do.


HAL@MIT-MC 07/25/80 22:36:03 Re:  evaluating other than procedure definitions from the editor
To: aplogo at MIT-AI, tilogo at MIT-AI

i think patrick's comments are something we should worry about in the
next round of system cleaning up which i imagine happening in late
august or early fall.

for the purposes of apple logo, probably we should arrange things so
that it is not easy to generate other han a procedure
definition from the editor.

Here's a rough suggestion:

1) you don't normally say ``edit foo'' or some such.  rather, when the
user types EDIT, the system responds with a request for the procedure
name.  if the user replies with the name of a procedure which is not
yet defined, say GAZONK, the editor starts up with TO GAZONK already
in the buffer.

2) the END at the end of a procedure is put in by the editor, if it is
not there already.  I think we also want to restrict things so that
only one procedure is defined per call to the editor.

3) the current LINES command will should go away.

4) we may need to put together some system commands which provide
non-standard entry to and return from the editor.

5) its not clear how this interacts with kids being able to use the
editor simply for text editing.  maybe the thing to do is to have a
non-standard entry which , upon return, takes the editor buffer and
makes it accessible as a string or list (this may take more space than
we can allow) or perhaps reads/writes directly to disk.

anyway, let's chew on this over the next month.  also, this is
something that we should make compatible with TI Logo.

p.s.: while we're thinking about editors, patrick, you should find out
for us about the text editor that is being distributed by apple to see
how ours compares.  i think that the MIT apple users' group is using
them.

Date: 25 JUL 1980 2123-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

I think there should be some way to have the screen editor make sure that what
is being edited is only a procedure, and not just any list of lines to be
evaluated. Because otherwise, evaluating a direct command like PRINT "FOO
might do funny things, because the "printing" is disabled (so that GETLN
doesn't echo everything it reads back out onto the screen), or doing
REQUEST or READCHARACTER won't work beacuse "inputting" is done from the
edit buffer instead of the keyboard (so a crash or error would result).
The only other thing I can think of to remedy the situation would be to have
a loop in SREAD1 which just reads from the buffer into the line-array, then
calls PREADLINE at a point directly after the GETLN call. We can then dispense
witht the "I/O Structure" which is pretty complex anyway, and a source of trouble.

Right now, I'll change TO to check to see if you're in a buffer-eval loop, and
if so vector to EDIT - otherwise you'd get a "XX ALREADY DEFINED" error.

HAL@MIT-MC 07/25/80 21:00:37
To: aplogo at MIT-AI

pat or steve-- could you check and tell me how much space we have for
pdl and vpdl in aplogo?


HAL@MIT-MC 07/25/80 20:59:36
To: aplogo at MIT-AI

i'll be in around noon tomorrow, to see if we can't get a disk put
together.  it would be nice if steve could be around then, too.



HAL@MIT-MC 07/25/80 20:03:43
To: aplogo at MIT-AI

hi... are we going to get together tomorrow so I can get a disk to
take to Texas?  when?

please get the editor working.



Date: 25 JUL 1980 1903-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

I hacked the I/O structure a little bit more, so that things should
work properly. I don't know if the evaluate-from-edit-buffer process
will work, although it now seems like it should (the old bug was caused
by an inadvertant exit from the read-loop, with the wrong return-address
on the stack, because S_END had reset INDEV, which it really shouldn't
have. Or something like that). Also, I modified S_READ and S_WRITE to
use the edit buffer, now all we need to do is put in the DOS patch.

Date: 25 JUL 1980 1048-EDT
From: ADIS at MIT-AI (Andy diSessa)
Subject: outputs (last gasp)
To: APLOGO at MIT-AI

(to indignant Patrick) Good point: "forces" is too strong a word. Yet
many is the crock perpetuated by having those outputs around (as I am
sure you will admit).  And why does FD 100 return t (or 100)?  And why
raise the question?  Once you have everything return a value, mustn't
you also throw a bunch of rules into the language to say which
subexpression of a compound expression gets to supply the super's
output.  (I.e. is that feature of Lisp separable from other not so
featuristic aspects of the language.)  I stand by my intent in (1)
[(2) and (3) as well] that a trick which uniformizes language syntax
which does not have any natural semantics is, at the least,
suspicious.  As far as your personal experience in teaching Lisp to
kids, I think it is hard to sort out which aspects of a language are
the problematical ones.  (Are you really convinced this aspect of Lisp
was really settled in that minute--might they just not have known what
to say then and might they have been later troubled by the idea or
fact of such behavior?) My position has been for a long time that
until I understand why it is that many an MIT freshman has complained
to me how hard Lisp is, I will maintain the face value of those
statements: that there are easier languages to learn than Lisp (Logo
being one).

Date: 25 JUL 1980 0728-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

Also ^O - create blank line.

Date: 25 JUL 1980 0704-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

The editor wins now in a few ways, but not quite yet in all.

The defined commands are ^B (back screen), ^F (forward screen),
forward arrow (forward character), back arrow (back character), ^L
(redisplay screen around point), ^D (delete character under cursor),
and ESC (rubout). All of these are more or less guaranteed to work.
One calls the editor with CHG <function name> or CHANGE <function
name>. It reads functions in properly, but ^C (exit and read out
buffer contents) screws up in a horrendous fashion. Fix coming soon.
Also coming soon are ^P (up line) and ^N (down line).

Date: 24 JUL 1980 1818-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
Subject: outputs
To: APLOGO at MIT-AI

    Date: 23 JUL 1980 1205-EDT
    From: ADIS at MIT-AI (Andy diSessa)

    Concerning Patrick's suggestion on outputs:
    (1) Do not be lured into grabbing "features" indiscrimenantly from
    other languages, even Lisp.  Making everything output forces kids into
    crocks like deciding what to output a procedure which legitemately has
    no need whatsoever to do anything of the sort.  It also forces you to
    figure out something to do with that unneeded output.

Boy, is this wrong, if you will pardon me for putting it that way.
Making everything output does not force kids to decide what to have a
procedure output when it is simply being used for side effects. When
the output of a procedure is not needed, it is simply ignored. When I
do this:

(defun box (left top right bottom alu)
  (tv-erase 1 (- bottom top) left top alu)
  (tv-erase 1 (- bottom top) (1- right) top alu)
  (tv-erase (- right left) 1 left top alu)
  (tv-erase (- right left) 1 left (1- bottom) alu))

in Lisp, I don't care what tv-erase outputs, even though it will be
the value of the function, because I am calling this function for the
side effects. Furthermore, I certainly don't have to figure out what
to do with the unneeded output. I simply ignore it, and the
interpreter passes it as arguments to oblivion (I thought that was
pretty good).

Nor would a kid have to worry about such things in Logo. I have taught
Lisp to a good number of people, from MIT freshman to kids, and none
of them except the most inquiring have concerned themselves with this
issue, and the most inquiring are quite satisfied with one minute's
explanation.

I think that NEEDING output at all is a bug. It should just happen,
dammit.

HAL@MIT-MC 07/24/80 17:18:18
To: aplogo at MIT-AI

Steve and Pat--

Well, we missed our goal of getting a Logo disk today.

Andy will be leaving for Texas on sunday afternoon and should take a
disk with him.  Please let's not miss this one!

That means you should not only put the system together tomorrow but
also CHECK IT OUT to see that the editor really works and can talk to
Logo, and that some moderately complex Logo programs actually run.

I won't be around tomorrow, so can we get together Saturday afternoon?
Pick a time when you will both be here and send me mail.

p.s.--steve, finding that Apple orchard sounds like a real coup.

pat-- you should be the ``official representative'' from
the Logo group to the MIT Apple Users' group.  I passed some info
along to you.


Date: 24 JUL 1980 0023-EDT
From: slh@ai
Sent-by: PGS at MIT-AI
To: APLOGO at MIT-AI

WORD now works, as does READCHARACTER and CLEARINPUT, and the polling routines
are all set up for character buffering (currently, the character buffer is
fully operational, and a whopping one character long!). All the graphics routines
except for the real canned routines and FD and BK are entered, but not debugged.
I'll put in FD and BK, along with the Sine/Cosie table and lookup routine,
and the canned graphics routines little by little, but don't expect anything
to work just yet.

Date: 23 JUL 1980 2304-EDT
From: slh@ai
Sent-by: PGS at MIT-AI
To: APLOGO at MIT-AI

I FOUND AN APPLE ORCHARD!!!!

Yes, folks, now we can convert floating point to strings, vice versa,
do exponentiation, etc., with no fear of bugs. It'll take awhile to
deassemble/type-in the Applesoft routines documented in the magazine,
but when there's time, I'll do it. There are also floating pt. routines,
fully documented, although they're probably not much different then the
ones I'm going to put in now.

Looks interesting; wish we had it before (actually I remember seeing it
before...).

HAL@MIT-MC 07/23/80 18:09:05
To: aplogo at MIT-AI, tilogo at MIT-AI

re: andy's comments on tail recursion:

the fact that output screws tail recursion is just a bug.  it is
easily fixed.  the comment about tail recursion fundamentally not
understandable to kids is true.  at least with the little man model
there is no good way of explaining why some recursive procedures run
out of storage and others don't.

Maybe we can modify the little man model to explain that, if the last
thing that actor A does is call some other actor B, then rather than A
going to sleep and hanging around, he just goes away, tells B to start
up and, if A was supposed to return a value to C, tells B to return
his output directly to C.

That's sort of complicated, although it does reflect what happens.


Date: 23 JUL 1980 1205-EDT
From: ADIS at MIT-AI (Andy diSessa)
Subject: outputs
To: APLOGO at MIT-AI

Concerning Patrick's suggestion on outputs:
(1) Do not be lured into grabbing "features" indiscrimenantly from
other languages, even Lisp.  Making everything output forces kids into
crocks like deciding what to output a procedure which legitemately has
no need whatsoever to do anything of the sort.  It also forces you to
figure out something to do with that unneeded output.
(2) I do not see any problem with making an output at top level be a
PRINT.  That satisfies the main objection to the present state (2+3
ought to tell you 5, too) and is semantically "the right thing" --
output means give to the guy who called you a result, and if that guy
is the kid (top level) then PRINTing is the right way to give him
something.
(3) I don't see why output and tail recursion are, in principle,
incompatible.  OUTPUT means STOP too which means local variable
(except those explicitly in  the output command) are not needed and no
further computation in this frame is going to take place.  So the fact
that this might be hard to implement (saving the values and operations
explicitly in the OUTPUT for use when the recursive call is done is
not your everyday stack maitainance) is your problem as a implementer.
Tail recursion, until I see it set in some consistant,
kid-understandable computation semantic (it is foreign to any little
man interpretation of Logo) is a hack which is good to pull off so
long as it is totally invisible to the user.

Andy

HAL@MIT-MC 07/23/80 11:16:07
To: aplogo at MIT-AI

i repeat---PLEASE KEEP THE DATE CURRENT ON NEW VERSIONS OF LOGO

the current version of Logo dies when you say
MAKE "X WORD "A "A

please let's get a WORKING version (with editor) for tomorrow.

i'm still holding back making a decision on whether we take this to
berkeley.


Date: 22 JUL 1980 1815-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

I talked with John Arkley. See APLOGO;SECRET DATA for what I got from him.
We should go to the Aplle Store to get some manuals, and maybe the Apple
Orchard issue. I'll put a message on the system for getting the issue (it's
the only one there is).

Date: 22 JUL 1980 1608-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

On the "NEW LOGO" disk, LOGO is always the latest version. When I
make drastic changes, I rename it to O1LOGO, and perhaps there
may be an O2LOGO, O3LOGO, etc. (the higher numbers being more recent).
However, if you're waiting for changes, they'll always be done on the
latest version (for instance, the editor fixes are curently being done
on LOGO only, even though my modifications have renedered it non-functional).

We'll be sure and have a good, working version by Thursady, but I can't guarantee
the editor part.

HAL@MIT-MC 07/22/80 15:01:04
To: aplogo at MIT-AI

steve--from now on, please try to make sure that the version of LOGO
that is on the Apple disk works.  (For example, the current one has
some gross bug in it that doesn't allow you to define procedures.)

I'd suggest that when you read down a new version of Logo, you write
it as XLOGO.  Then do some testing, if you have time, and if it seems
to work, rename it to LOGO.

I told pat today that i'd like to take a disk with me to texas.  i'm
currently not planning to be here after thursday, so let's aim for a
reasonable version of Logo (with editor, but not with graphics) by
then.



Date: 22 JUL 1980 0409-EDT
From: SLH@AI
Sent-by: PGS at MIT-AI
To: APLOGO at MIT-AI

The system tables, error and text messages will now reside in the 4K
ghost-memory. They are originally loaded into the High-res buffer, and
then LOGO moves them into the ghost memory. The memory section otherwise
covers the lower part of nodespace. So to save LOGO on disk, do a:

BSAVE LOGO,A$3000,L$6600

You can't do a BRUN LOGO anymore; you have to do a BLOAD and then CALL 16384 or
4000G from the monitor.

The PDL and VPDL now approach each other (the VDPL grows down in memory). The
approach limit is 40. words.

Date: 22 JUL 1980 0124-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

^F (forward screen) doesn't actually allow you to go off the end of
the buffer, so to speak. If you are already at the end of the buffer
it just gives you a blank page, which, when one comes to think of it,
is fairly useless. Just a minute and I'll fix it to give you a bell
instead.

Date: 21 JUL 1980 1941-EDT
From: EFH at MIT-AI (Edward F. Hardebeck)
To: APLOGO at MIT-AI


    ^C should ask for confirmation before bouncing you out of the editor.
    E.g., typing ^C should say

    FINISHED EDITING (Y OR N) ?


    and wait for a reply.  (The lack of such a feature is extrememly
    annoying in TI Logo.)


The existence of this "feature" could (maybe) be rather annoying in
that it would slow down making a very quick change to a procedure
and zapping back to logo quick to run it.

HAL@MIT-MC 07/21/80 18:11:04
To: aplogo at MIT-AI

pat--

I heard you were hacking all night, I didn't want to wake you up.  I'd
like to see the editor to the point where people can play with it.
Also a list of commands.  Two things I noticed today:

^F seems to get you the ``next page'' even when there is none.

^C should ask for confirmation before bouncing you out of the editor.
E.g., typing ^C should say

FINISHED EDITING (Y OR N) ?


and wait for a reply.  (The lack of such a feature is extrememly
annoying in TI Logo.)


Date: 21 JUL 1980 1100-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI, TILOGO at MIT-AI

Here's an interesting bug, which is present in PLOGO if it really is a bug:
   Befor CONS does a Gcoll, it Vpushes the car and cdr, to gc protect them.
But if either is not a pointer, ie a pair of characters or part of a number,
the gar.coll. will not be able to get a typecode for them.

Perhaps there should be a CONS for numbers only (ie, dont gcprotect car or cdr),
one for strings (dont gcprot car), and one for lists (gcprot both).

Date: 21 JUL 1980 0321-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

George Carrette (friend of mine) reminded me tonight of something I've
thought about doing before -- something that has probably been thought
of before, in fact -- making all functions return values, and making
the toploop be a read-eval-print-loop. Then a child would not have to
deal with cruft like "you don't say what to do with foo", and we could
have tail-recursive functions like

to tailfact n p
if :n = 0 :p
tailfact :n - 1 :n * :p
end

which we can't really do now this simply, because we have to output
like this

to fact n p
if :n = 0 output :p
output fact :n - 1 :n * :p
end

and output defeats the tail-recursiveness. Why force this complex
stuff on the user? In the suggested scheme, the user would not have to
deal with the returning of values if s/he did not want to anyway, just
as one does not have to take advantage of it in Lisp.

The problem is, of course, that output and tail-recursion don't mix.
Ideas?

Date: 21 JUL 1980 0246-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

ALEC (internal name: Apple Logo Editor Crock) is very near completion,
there are only a couple of fencepost errors left. With a few more
commands we will have won.

Steve - hacking the file system could be even easier than that. I want
to eventually interface the editor to the file system; this should not
require much code at all.

I expect that by morning the editor will be working enough so that
I'll print up a command list and put it over the Apple.


Date: 20 JUL 1980 2235-EDT
From: slh@ai
Sent-by: ___010 at MIT-AI
To: APLOGO at MIT-AI

label me a liar, WORD doesn't work (the problem's in MAKPNM). Should
take a second to fix.

Date: 20 JUL 1980 2222-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

The floating point number package is nearing completion;floating point
numbers are parsed correctly, and all operations seem to work, including
real to integer and integer to real conversion. The typeout routine
partially works, and should be fully functional in a few days, so the
whole thing should be ready.

Once the floating point package works, graphics should be trivial, provided
we can use the canned Apple routines. I've got the PLOT and POSN (plot a point,
compute position of a point, respectively) routines. All we need now is the
LINE (draw a line from last POSN'd point to specified one). The mathematics
should be trivial to do, at least in a non-fully-optimized state. It would
take a while, though, to write a good line-drawing routine given what I know
about the graphics mapping; I'd much rather use theirs.

I haven't found anything else wrong with LOGO, now that REPEAT works.
I changed READCHARACTER to output the actual character, instead of the
Ascii code, and I put in INTEGER and INT. CLEAR clears the text screen,
NODISPLAY or ND zaps the graphics.

We should be able to get a minimal disk-stoage routine working without
too much trouble; all you have to do is send DOS a string like
"BSAVE WORKSPACE,A$2000,L$1700" and it does the rest. You can also
send it things like BLOAD, RENAME, DELETE, CATALOG, etc. If the
S_READ and S_WRITE routines in PLOGO work as Gary said they do
(according to Patrick), then the whole thing should be trivial.

All in all, give us a week or 12 days and we'll have the whole thing wrapped
up, barring any strange bugs.

HAL@MIT-MC 07/20/80 21:54:15
To: aplogo at MIT-AI

reminder, 2:00 tomorrow (monday) we'll meet to decide if the system is
likeyl to be in good enough shape to taketo california.  i also want
to give out some preliminary copies this week.



Date: 20 JUL 1980 0356-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

We are now on APLOGO 666. I have a bad feeling about this...

Date: 18 JUL 1980 1409-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

You can't store the screen image someplace, because it's very large (8K bytes).
Eventually we'll have a Save Picture (on disk) command, or else we'll put the
editor buffer someplace else. But perhaps we can use an implied Nodisplay, if you
don't want that error message.

HAL@MIT-MC 07/18/80 09:44:46
To: aplogo at MIT-AI

steve & pat -- i would like to meet with both of you on monday
afternoon.  (2:00 ok?, i have to leave by 3:30)

we have to make plans forwhat to do next. most of all, we have to
decide whether to show apple logo at berkeley.



HAL@MIT-MC 07/18/80 08:07:03
To: aplogo at MIT-AI

re--

The encryption method for figuring out where points go in memory needs
a CRAY-6, it's no simple bitmap.


There's some guy who's been around hacking the apple who calims to
have figured this out.


HAL@MIT-MC 07/18/80 08:04:59
To: aplogo at MIT-AI

RE--

    Date: 18 JUL 1980 0210-EDT
    From: SLH at MIT-AI (Stephen L. Hain)

    Patrick, have CHANGE check the GRPHCS flag; if it's nonzero, give a
    nasty error message to the effect that you can't use the editor
    when you've got a toitle. 


that doesn't sound right.  can't you just stash the screen image
somewhere and restore it when the editor returns?  if not, then have
the editor imply (nodisplay, edit, clearscreen)


Date: 18 JUL 1980 0210-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

Patrick, have CHANGE check the GRPHCS flag; if it's nonzero, give a
nasty error message to the effect that you can't use the editor
when you've got a toitle. Also, now the text window is fully dynamic,
so you've got to set/watch-out-for WNDTOP, WNDBTM, WNDWTH, WNDLFT.
I don't think you'll have much trouble, though, you'll probably just want
to reset them to full page except bottom line (call RESETT and then
re-do WNDBOT).

CLEAR now clears the text window, CS only does the graphics. NODISPLAY
zaps graphics, gives you a full window. SETH or SETHEADING sets the
turtle's heading.

If we can get the listings of the Apple High Res. Package as outlined
in the Red Manual, we'll be all set. The encryption method for figuring
out where points go in memory needs a CRAY-6, it's no simple bitmap.
If I can get the listings, I should have the graphics stuff written in
a few days, then it only needs debugging.

HAL@MIT-MC 07/17/80 22:00:19
To: aplogo at MIT-AI

steve--

when implementing the line-drawing routine, beware of the following
classic bug:

Buggy implementation:  turtle locations are kept in double precision
(or floating point) as (x,y).  when moving to a new position, you
first compute (newx, newy) in floating point, then do a floating
substract to get (dx,dy) then apply the line drawing algorithm to draw
a line whose x-displacement is the nearest integer to dx and whose
y-displacement is the nearest integer to dy.

This causes a slowly accumulating roundoff error.  Everything looks
fine until you try, e.g., to draw a POLY circle and you find it
doesn't quite close.

The correct implementation: Write youself a routine, SCREENPOS, which
outputs the closest screen posiiton (acutal dot position) to a given
(x,y) floating point position.  After finding (newx, newy) DO NOT do a
floating point subtract to get dx, dy.  Rather compute INTEGERS dx
and dy as

dx = SCREENPOS(nexw) - SCREENPOS(x) ;;SCREENPOS(x) is actually not
                                    ;;recomputed, but saved from last time
then save  SCREENPOS(newx) for next time

ditto for y

then do the ``divide, add, and overflow'' algorithm using the INTEGER
dx and dy


Date: 17 JUL 1980 2037-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

OK, I've put in the routine to print out flonums. I'va also streamlined
the routines to printout/make-string to a set of routines that convert
either a flonum or fixnum to a bunch of characters pushed on the PDL, and
routines to pop characters from the PDL and either print them or make a
string out of them. This makes things so much easier! While I debug all
the floating pt. stuff (parsing, operations, printing) I'll write up the
graphics routines (at least, it will be really fun/painful to see what they
do!).

As far as I can tell, you can't crash LOGO by filling up nodespace, the
"PLEASE DELETE SOMETHING:" message seems to work, when it's supposed to,
and I haven't seen a storage-related crash in awhile.

LOGO is getting very close to the bottom of DOS, so in awhile I'll have to move
4K of something into the ghost memory bank, and perhaps try to trim things
(which can be done easily with little penalty, except it might take hours
to physically do it).

Date: 17 JUL 1980 1751-EDT
From: pgs at MIT-AI (Patrick G. Sobalvarro)
Sent-by: JOHNB at MIT-AI
To: APLOGO at MIT-AI

I've found the infamous editor "alphabet bug", which caused a "Times Square"
display of the ASCII characters, in order no less, to march across the
screen at seemingly random intervals. Don't laugh - this was a rough bug
to find. Also, the bug which made characters be inserted at every other
location in the buffer, rather than at every location, has been purged.

HAL@MIT-MC 07/17/80 15:04:24
To: aplogo at MIT-AI

the line drawing algorithm that i told patrick and that he described
in the mail is the standard method.  its probably written up in Newman
and Sproull's book on computer graphics (there's a copy in the LCS
reading room, and i think there's a copy in the shelf in henry's office.

steve---make sure to get in touch with me.  call me at home.


Date: 17 JUL 1980 1400-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
Subject: MOVETO
To: APLOGO at MIT-AI


Actually, I do understand Steve's message about MOVETO now, and it
seems like a reasonable algorithm, but Hal has a better one (which is
actually damned close to equivalent, I think), which is better because
it is easier to divide floating point numbers and add them than it is
to compute the angle from the horizontal with a line from one point to
another.

Take the greater of the sine or cosine and use the corresponding axis
as your reference axis. Divide the lesser of sine or cosine by the
greater, and store that number (it will be <= 1 if you didn't blow
it). Now plot a point in the direction of your reference axis. Add
your number to itself. If the result is greater than one, plot a point
in the direction of the other axis and restore your original fraction.
Repeat until you're there.

Date: 17 JUL 1980 1204-EDT
From: pgs at MIT-AI (Patrick G. Sobalvarro)
Sent-by: JOHNB at MIT-AI
Subject: pgs's message of July 17, and Hal's answer
To: APLOGO at MIT-AI

I don't understand my question about MOVETO either. Steve sent it and
forgot to do an alt-f in MAIL.

HAL@MIT-MC 07/17/80 07:35:15 Re:  pgs's message of july 17
To: aplogo at MIT-AI

i don't understand your question about moveto. we'd better talk about
this.

steve said there were routines for printing floating point numbers in
the apple manual.  if not, you can find them in the old pdp11 logo
code. (look for cfn2ls ---``convert fnum to long string'')


HAL@MIT-MC 07/17/80 07:28:28
To: Aplogo at MIT-AI

cs in graphics mode should clear only the graphics area 


Date: 17 JUL 1980 0226-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI, TILOGO at MIT-AI

Is there a standard method for the MOVETO procedure? I figured I'd just
figure where the X (Y) coordinate goes on each pass of a loop which
cycles between the Y's (X's) of the endpoints; it would choose whether
to figure out X or Y by whether the angle is mor horizontal or vertical.
Perhaps it should do both, the reult being a logical or of each line
(That would be twice as slow, and you'd get thick lines).

I guess drawing the turtle would be just a series of turtle commands.
Does anyone know how to easily print out a floating-point number
in binary representation?

I saw in one of the NLOGO files a "super-hack" that allowed CONTINUE
to usually work after a PAUSE. I mentioned a while back that the polling
for control-Z should be changed, and its affect altered, has anyone
considered this? (See BUGS MAIL for my earlier suggestion).

I can't really debug the floating-pt. stuff until I can print out
the buggers, and it doesn't look like such an easy task. But I'll
write the turtle stuff anyway, and see what happens.

Date: 17 JUL 1980 0115-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI

I will soon be flushing the INQUIR entry for APPLE+, as we have one for
APPLE2. The main reason for the change is that one can login in as
APPLE2 with an alt-u, but this doesn't work for APPLE+, cuz the + is
a funny character. No other change will be apparent to the user.

Date: 16 JUL 1980 2228-EDT
From: SLH at MIT-AI (Stephen L. Hain)
To: APLOGO at MIT-AI

Currently, CS clears the text page and homes the cursor. With graphics,
should it only clear the graphics area?

HAL@MIT-MC 07/15/80 21:28:00
To: aplogo at MIT-AI

steve, pat---

i have to decide by next week if we should ask apple to lend us
machine to demo at berkeley.  i don;t want to do that unless the
system is in reaonable shape by then,e.g.,

1) a workiong editor
2) a rudimentary file system
3) basic turtle graphics
4) no drastic bugs, like to current one which crashes the world when
storage runs out

please let me know if you think this is feasible

PGS@MIT-AI 07/14/80 04:56:27 Re: progress report on the editor
To: APLOGO at MIT-AI
Well, it's better than it's been, but it's worse than it should be.

Insertion of characters now works. The bug was a somewhat subtle one,
with the result that I rewrote the main body of the code (except for
the function with the bug in it) in a sort of crazed attempt to
exorcise (sic) it. The bug was in EDOUT, the function that outputs
characters to the edit buffer. It did a PHA to save the character, and
never did a PLA. You might be more impressed to hear that EDOUT is a
subroutine, and that subroutine return addresses are saved on the
stack. I went stark mad trying to find that bug.

I can't tell if functions are being read in properly yet because one
can't define functions in the current version of Logo (END doesn't
work). I think that they are read in properly, though -- that part of
the code seems to work.

The redisplay code seems to be screwed up somehow; it does do a
redisplay, but it is a pretty strange one.

Anyway, now I am at a point where I can at least see something
happening. The remainder seems to be mainly tuning.

HAL@MIT-MC 07/12/80 17:20:36
To: aplogo at MIT-AI

APLOGO;TURTLE OUTL  contains a very brief outline of what the graphics
routines should do for tis first round of implementation.




Date: 11 JUL 1980 1515-EDT
From: HAL at MIT-MC (Hal Abelson)
To: aplogo at MIT-AI, tilogo at MIT-AI, BH at SU-AI


after today's meeting, i'm starting to think that for this version of
logo we should deal with dots and quotes pretty much as we do now.



PGS@MIT-AI (Sent by LAWLER@MIT-AI) 07/11/80 14:22:12
To: APLOGO at MIT-AI
Latest Logo has some assembly errors, seemingly (I ain't sure) in
ATMTFX, or something like that. I downloaded it and tried using it;
it prints out
YOU DON'T SAY WHAT TO DO WITH
after any command line. Oh well. Happier news is that I found what
I think is THE bug in the editor, and a very insidious bug it was.
In several of my routines I was setting the point to (ha ha) EBFEND
(the end of the edit buffer) when I thought I'd been stting it to
EDBUF (the beginning of the edit buffer). This would not have had
nearly the spectacular results it did if Logo didn't start at the
end of the edit buffer.

PGS@MIT-AI 07/10/80 12:40:53
To: APLOGO at MIT-AI, SW at MIT-AI, JOSE at MIT-AI
The story (or the scam, as we used to say in my loading dock days)
on Sylvia's Apple is this:

1. Sylvia's Apple boots sometimes with Sylvia's Apple's disks.

2. Sylvia's Apple boots always with the development Apple's disks.

3. The development Apple boots always with Sylvia's Apple's disks.

4. The development Apple boots always with the development Apple's
   disks.

For purposes of simplification we introduce the binary relation
B(a,d), where B is the means "boots with", a is a variable
representing the machine that boots (or doesn't), and d is a variable
representing the machine whose disks the boot was attempted with.
Then, given the constants D, representing the development Apple, and
S, representing Sylvia's Apple, we can construct the following truth
table for B in our universe:

                  D   S
                _________
             D  | t | t |
                |___|___|
             S  | t | f |
                |___|___|

It would seem possible that Sylvia's Apple's disk drive has more
exacting tastes than the development Apple's disk drive. Sylvia's
Apple will boot only with these 3M disks we have, not with the Apple
disks (which may also be 3M, for all I know).

HAL@MIT-MC 07/08/80 09:29:53
To: aplogo at MIT-AI

steve---

i don't think it should make much difference whether you do the
graphics computations in fixnum or flonum.  xcor & ycor as user
functions should return flonums, so it might be cleaner to do the whole
thing in flonums, but its up to you.  (make sure, though, that if you
use fixnums, you keep all corrdinates in double precision)

re: member, and other possible new primitives.  hold off for now.  
at some point we'll want to standardize with TIlogo.


slh@ai (Sent by PGS) 07/08/80 00:23:01
To: APLOGO at MIT-AI
Most arithmetic (Fixnum) works. REPEAT almost works. Everything else
seems to work, although I've got it to crash afew times with programs
that loop indefinitely and do nasty things (build up storage, etc.).
I'm looking into these, though.

Have yet to implement string->flonum and flonum->string conversions,
although all flonum arithmetic and coersion is installed. Would it be
faster to do the turtle-graphics computations with fixnums, do you
think?

Also, should we have a MEMBER? primitive (MEMBER? :OBJECT :SEARCH.LIST) ?


HAL@MIT-MC 07/07/80 22:36:44
To: aplogo at MIT-AI

steve & pat--

please keep sending notes on how progress is going.

pat--i want to distribute a copy of Logo with the editor this week.


Date:  6 JUL 1980 2103-EDT
From: HAL at MIT-MC (Hal Abelson)
To: aplogo at MIT-AI, tilogo at MIT-AI, BH at SU-AI


assuming that we are going to flush either dots or quotes and so not
normally distinguish between function and variable bindings, what do
you think of the following:

1) all free variables within a procedure are by default local to the
procedure.

2) when a word is evaluated, the evaluator chooses the variable
binding if one exists, otherwise the function binding.

3) the local free variable default can be overridden, e.g, by a
INHERIT command (using current Logo syntax):

TO FOO :X
INHERIT "A
MAKE "A :X
END

this would say to use the dynamic binding for A, (in effect to declare
A special).  Also, one should be able to say

INHERIT ALL

in those cases where one doesn't know the name of the appropriate free
variable beforehand, e.g., 

TO REPEAT :TIMES :LINE
INHERIT ALL
IF :TIMES = 0 STOP
RUN :LINE  ;LINE may reference free variables
REPEAT :TIMES-1 :LINE


The intention of this is not to get screwed by having procedures
suddenly stop working if they get called in an environment where one
of the functions they use also has a variable binding.  



Date:  5 JUL 1980 1530-EDT
From: HAL at MIT-MC (Hal Abelson)
Subject:  muddled thoughts
To: aplogo at MIT-AI, tilogo at MIT-AI, BH at SU-AI


I'm really vacillating over this whole dots, quotes, etc. issue.

After consistently advocating that we flush the distinction between
finction and vaiable bindings, I beginning to change my mind.  As
Henry says, it's a screw if we can't guarantee that giving a kid a
procedure like

to reverse :x
if :empty :x output []
output :list :reverse :bf :x :f :x
end

will always work, simply because some procedure that calls reverse may
have a local variable named list.

one way to fix this would be to use DIFFERENT characters for the
outputs of procedures vs. the values of variables, e.g.

to reverse :x
if ;empty :x output []
output ;list ;reverse ;bf :x ;f :x
end

i'm vacillating between linking this because it is clear and disliking
it because it is cumbersome.  an alternative way to retain parsing
clarity in current logo is to not allow more than one command on a
line, or to use an (optional) statement separator.


HAL@MIT-MC 07/05/80 14:42:13 Re:  lisp and logo on apples
To: MARE at MIT-MC
CC: HENRY at MIT-MC, aplogo at MIT-AI

we are currently developing a logo for the apple, which we will begin
distributing during the fall.  since it is under development, buggy,
and it is not clear how we will be distributing it, i would prefer
that people not copy it.

there is at least one terrible lisp for the apple, written in basic(!)
which is distributed thorugh the apple software bank.  i have heard
rumors of more decent lisps, but i don't anything about them.


Date:  3 JUL 1980 0328-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
To: APLOGO at MIT-AI, TILOGO at MIT-AI, bh at SU-AI

What do you think of having command delimiter characters? It seems to
me that Logo has needed something similar for quite some time. For, if
we had in-procedure command line delimiters (aside from
carriage-return), we could do something like this:

to display-buffer from-buffer-point from-screen-point;
   display-char :from-buffer-point :from-screen-point;
   if :from-screen-point = :bufferend or
      second :from-screen-point = :window-bottom and
      first :from-screen-point = :window-right
      then stop;
   if first :from-screen-point = :window-right
      then make "from-screen-point
                list 0 (second :from-screen-point)+1
      else make "from-screen-point
                list (first :from-screen-point)+1 
		     second :from-screen-point;
   display-buffer :from-buffer-point+1
                  :from-screen-point;
end

I guess this is a somewhat hairy example, but once I got going I
found I couldn't stop. Sorry.

Anyway, it seems to me that this would win bigly and would solve some
of the problems of the current line-orientedness of the language, such
as its lack of readability and the screen editor line overflow problem
we had discussed earlier (for this way the code need not have a
carriage-return in it anywhere). Indentation is almost a must with
these 40-character screens on the Apple and the TI machine, anyway.

Something to go along with this (and support my previous suggestion)
would be to use squiggly brackets (or something, even parens) to
denote a block of statements that should be executed as one; thus
local procedure declaration would work on my previously given model
and one could have several commands executed as the result of an
if-then statement.

Note that the user would not have to ever use squiggly blocks or local
procedures; but s/he would have to be sure to use semicolons at the
end of a command line in a procedure.

I think that the implementation these suggestions would help convince
some people that Logo is a real language, not just a kid's toy, and a
lot of them are just the people we are trying to reach, like the
sophisticated hobbyist. Note also that these conventions would not be
at all expensive to implement, in terms of increasing the size of the
reader.


Date:  3 JUL 1980 0047-EDT
From: PGS at MIT-AI (Patrick G. Sobalvarro)
Subject: goto considered harmful considered after reconsideration
To: TILOGO at MIT-AI, APLOGO at MIT-AI, bh at SU-AI

I think that it doesn't seem like a great idea because it wouldn't
change the way people think in Logo; i.e., it would seem like a goto
without the goto as opposed to a local procedure definition, because
flow of control on completion of execution of the local procedure is
not diverted back to the point after which the procedure was called.

However, it does seem to me that local procedures are a good idea;
often one wants a function around that one doesn't need in the outer
environment. I think that the way to make them more procedure-like
would be to execute them only on calling, not on definition. To do
this we would need some way to delimit them. How about ... squiggly
brackets? So one could do this:

to addvectors a b
{to second lst
 output first butfirst :lst
 end}
output list (plus first :a first :b) (plus second :a second :b)
end

I think that some optimal internal format could be found for local
procedures so that one need not actually redefine them every time the
function is called. The intention is not to save space so much as to
improve the language's encouragement of modualarity and clean
programming. I don't think that implementing this would be very
expensive.

Date:  2 JUL 1980 1907-EDT
From: HAL at MIT-MC (Hal Abelson)
Subject:  goto considered harmful re considered
To: aplogo at MIT-AI, tilogo at MIT-AI, BH at SU-AI


on second thought, it seems like a poor idea.

anyway, i'm coming down on the side of flushing dots (rather than
keeping dots and flushing quotes).  reasons are (1) compatibility with
basic and pascal for simple programs (2) less syntax in most procedure
definitions.  E.g., I like

to member item set
if empty? set then output "false
output member item bf set
end

better than

to member :item :set
if :empty? :set then output false
output :member :item :bf :set
end

also, if we do flush dots can we arrange things so that defining a
label as foo: means that the place to go to is the VALUE of foo ?
Then one would say ``go foo'' instead of ``go "foo''

Date:  2 JUL 1980 1839-EDT
From: HAL at MIT-MC (Hal Abelson)
Subject:  goto still considered harmful.....
To: tilogo at MIT-AI, aplogo at MIT-AI, BH at SU-AI


What do you think of the idea of flushing ``go'' from Logo, via the
viewpoint that go is essentially a procedure call? (This is
essentially the mechanism we currently use for tail recursion.)

A ``label'' would be tantamount to a local procedure definition (which
takes no inputs).

Example:

to poly side angle
make "initial.heading heading
poly.step: forward :side
right :angle
if heading=initial.heading then stop else poly.step
<more code could go here>
end


or, if we flush dots for variables (but that's a separate issue)

to poly side angle
make "initial.heading heading
poly.step: forward side
right angle
if heading=initial.heading then stop else poly.step
<more code could go here>
end


HAL@MIT-MC 06/30/80 23:50:04
To: MAZE at MIT-MC
CC: aplogo at MIT-AI


    MAZE@MIT-AI 06/30/80 20:57:02
    Can I be put on the APLOGO mailing list? or is it reserved?
    Also, I am concidering buying an apple and wish to know if this
    logo will be avalible to the public, or if it will be poss-
    ible to get a copy. Thanks

    James -- MAZE at MIT-MC

I'd rather keep the aplogo mailing list more or less private to the
people who are doing the implementation, at least until the system
stablizes.

It will be possible to get a copy of a preliminary release of Apple
Logo sometime during the fall.  Beyond that, Apple Logo will be
available "to the public" in some form or other, but we haven't yet
decided upon a distribution mechanism.

One thing that we will do starting very soon is to give pre-release
versions to people who will use the system and help us track down bugs and
mis-features.  Maybe you'd like to be one of those people.  If so, let
us know when you get your apple.

Keep in mind that running Logo requires an Apple with the
Pascal/Language option. (48K plus extra card).

HAL@MIT-MC 06/30/80 23:33:49 Re: reset button screw
To: APLOGO at MIT-AI

steve implied that the problem with the interrupt routine for reset
was that you can't tell where the interrupt came from.  if so, we
can't use it for ctl-G, which is what it should be used for.

if steve is wrong, then it should be used for ctl-G

if steve is right, the we should just turn it off.



MAZE@MIT-AI 06/30/80 20:57:02
To: APLOGO at MIT-AI
Can I be put on the APLOGO mailing list? or is it reserved?
Also, I am concidering buying an apple and wish to know if this
logo will be avalible to the public, or if it will be poss-
ible to get a copy. Thanks

James -- MAZE at MIT-MC

PGS@MIT-AI 06/30/80 13:13:42 Re: reset button screw
To: APLOGO at MIT-AI
The reset button vectors to an interrupt routine, which we can set as
we like. Also, there is a switch under the Apple's keyboard which can
be turned on to cause reset to have no effect, but ctl-reset to do
what reset would do. 

PGS@MIT-AI 06/30/80 12:52:40 Re: processor speeds
To: APLOGO at MIT-AI, TILOGO at MIT-AI
The 6502 on the Apple is clocked at 1 meg, strangely enough. Strangely
because people have clocked 6502s at about 8 meg and more. The Apple
III is clocked at 2 meg.

HAL@MIT-MC 06/28/80 23:32:00
To: tilogo at MIT-AI, aplogo at MIT-AI

i'm still pretty mystified about the fact that tilog is so much slower
than apple logo?  is it time to access the memory, or are they
clocking the processor very slowly. could someone run some timing
tests to see how fast the 99/4 processor is running? do we know how
fast the 6502 is clocked on the apple ?


HAL@MIT-MC 06/28/80 18:35:10
To: aplogo at MIT-AI

next time you speak to Arkley, you might ask him if there is any way
around the reset button screw.


HAL@MIT-MC 06/28/80 15:12:25
To: aplogo at MIT-AI

around the end of next week, i would like to begin distributing Logo
disks to 1 or 2 places outside the lab, so people can use
it and give us bug reports.

from now on, the message that is typed out when the system starts
should read:

WELCOME TO APPLE LOGO!
PRELIMINARY VERSION
ASSEMBLED <date of assembly>



PGS@MIT-AI 06/28/80 02:49:48
To: APLOGO at MIT-AI
WNDBTM is now location 35 (decimal), as it is in the monitor. RESETT
and code dependent on WNDBTM have been appropriately updated.

PGS@MIT-AI (Sent by GREG@MIT-AI) 06/27/80 08:26:14 Re: screen editor
To: APLOGO at MIT-AI
I've finally got the screen editor code in the latest version of Logo;
however, as Steve was in the middle of a catastrophic change to Logo
when he left for the weekend, there is no way to run it, as he left the
code in such a state that it will not assemble.

I still have to add some fancy commands anyway.

PGS@MIT-AI 06/27/80 02:30:01
To: APLOGO at MIT-AI
RANDOM always returns 0.

PGS@MIT-AI 06/26/80 23:15:39
To: APLOGO at MIT-AI
Henry Baker, BAKER@AI, has been added to the APLOGO mailing list, as
he is now our user community, and will be running versions of Logo as
they come out and reporting bugs.

PGS@MIT-AI 06/26/80 23:13:29
To: APLOGO at MIT-AI
I found a strange bug today: I defined the function REV, which looked
like this:

TO REV LST
10 IF EMPTYP :LST OP []
20 OP SE LAST :LST REV BUTLAST :LST
END

It worked on one ten-member list, but ran out of space on the next
ten-member list I gave it. Fine. But when I attempted to enter a
command line (.GCOLL) after the error message, I got a "you haven't
told me how to .GCOLLPROPOUIOKLU" (I think that that's verbatim, but
I'm not sure). This happened repeatedly, on any input line.  Now, I'll
bet you're thinking that the line buffer was somehow screwed up, and
so did I, but I checked, and it wasn't.  Somehow the tokenizing was
screwed up; I suspect that the end of the token was somehow being
linked to trash. This is a somewhat amazing error; there are several
characters there, and apparently a cons cell was created for each pair
and hung on the end of the .GCOLL cell, although it's possible that
there was only garbage that pointed to places in memory and somehow
the left halves of those "cells" all turned out to be printing
characters. But I don't think so.

I'll check this out once the editor is working.

PGS@MIT-AI 06/26/80 17:02:39
To: APLOGO at MIT-AI

I spoke last night over the phone to John Arkley at Apple about DOS.
No, they won't give us a listing -- they want money. However, Arkley
was apologetic about this and quite friendly. He told me a fair deal
about the guts of DOS, and it looks like (as Hal and Steve already
know) it will be more or less impossible to shave much off DOS.
Knowing what we do, we could sort of piece together some code that
does what we want it to, but he feels (and I believe him; he seems to
know his stuff) that it would require serious bumming to shave even 2k
off DOS (which ocupies about nine blocks). He feels that it would be
much easier to use it as is, modifying it slightly (vector tables,
that kind of stuff), and lying to it to make it think it's running
under an Applesoft program. This should win, and will save us lots of
time. 

He also told me how to make a boot disk for Logo; however, it won't
boot from a Pascal system, which expects 16-sector, not 13-sector
tracks. But Apple wil begin, in a month, to market a DOS version, 3.3,
that will be 16-sector, which means it will boot on any Apple, even a
Pascal system. From our point of view there will be no difference
except the option for a turnkey system and more disk space.

Our files are going to be implemented as binary files, not text files,
because binary files get transferred by DOS more quickly. From the
user standpoint there will be no difference.

PGS@MIT-AI 06/26/80 09:24:18
To: APLOGO at MIT-AI
Steve, can you hack it so that WNDBTM is not a constant, but the
contents of a location? This would be something of a help to me in
writing the editor.

SLH@MIT-AI 06/25/80 21:55:38
To: APLOGO at MIT-AI
What rules should MAKE_PNAME follow to convert floating-point
numbers to atoms? Should it be the same protocol used for
printing flonums (i.e., if X > 1E6 or X < 1E-3 or whatever)
or should it be a fixed-point thing (like n.nnnnnnnEE+xx)?

HAL@MIT-MC 06/25/80 19:56:57 Re:  more primitives
To: aplogo at MIT-AI

another primitive to add is 

REPEAT <times> <rest of line>

FUNNYP should be flushed

don't bother putting in all of the trig and math routines now. (that's
for next pass, maybe) just do what is needed for graphics.

(note that is not very much, since turtle coords sin and cos should be
done via lookup for speed)--as in 11logo, a table of the sines of the
even angles from 0 to 90 should be enuf, and interpolate other angles.

HAL@MIT-MC 06/25/80 19:02:26 Re:  contacts with apple
To: aplogo at MIT-AI

for the record---

the guy i originally spoke to at Apple is Roger Cutler.  the vice
president over him is John Couch.

the guy who is helping us is
John Arkey
in charge of techincal support for people developing Apple software
outside the company
408-996-1010 x2291



HAL@MIT-MC 06/25/80 19:00:17 Re:  Update on primitives
To: aplogo at MIT-AI

steve--- we won't have snaps, so use display/nodisplay for
getting/flushing the display.

``thingp'' tests if something is a name, not a thing, so should be
renamed.

yes...TI should be flushed when the editor is on place.



SLH@MIT-AI 06/25/80 17:08:39
To: APLOGO at MIT-AI
Hal, re PRIM HAL:
DEFINE <atom> <procedure def.>   where definition is a list
of lists, being an argument list and lines. It is used to
create procedures in programs (I guess). Example:

DEFINE "POLYSPI [[SIDE ANGLE INCR] [FD :SIDE] [RT :ANGLE] [POLYSPI :SIDE + :INCR
	:ANGLE :INCR]]

is equivalent to typin in the procedure, or using the editor.

DISPLAY is for showing snaps, or redrawing from a vector-list. Perhaps
there should be a Graphics/nographics primitive (like PAD/NOPAD).

I thought that having funny-pnames might create some problems for
certain word-manipulation tasks, or word-matching algorithms, if
spaces could be inside words without delimiting them. If you
can't think of any instances where you'd want to make sure a word
doesn't have spaces in it, I'll flush it.

I don't see why you'd want to rename THINGP to NAME?. Maybe THING?
or VALUE? ?

TI is an abbreviation for TITLE, which is necessary (or at least quite useful)
until we get the editor working, when it will be flushed.


HAL@MIT-MC 06/25/80 00:02:37
To: aplogo at MIT-AI, tilogo at MIT-AI

ai:aplogo;prim hal

contains comments on the aplogo primitives, what should be added and
flushed. 

also, we should get together and arrange for some compatibility with
TIlogo.

also, last time i looked, random was always returning 0


HAL@MIT-MC 06/24/80 22:05:33
To: aplogo at MIT-AI

on second thought, time is getting so tight that it might be better to
forget the floating point for now and go on to do the graphics using
double precision integer arithmetic.  it can always be redone in
floating point later (and is not in fact so big a change).

p.s.: when you do get around to floating point you can find the 11logo
routines for converting from strings to and from floating point
numbers in ai:nlogo;eval  at .clsfn and pages following.



HAL@MIT-MC 06/24/80 21:16:45
To: aplogo at MIT-AI

yea ! bravo ! wonderful !

i played with the system today and it's really great! i wrote a
pattern matcher and a doctor program and didn't find any system bugs.
fantastic!

before the end of the week, i'll go through the list of primitives and
make comments about what should be added (and deleted).

some preliminary timing tests reveal that, in a tight loop, logo on
the apple runs 5.9 times as fast as on the TI-99.  the best guess is
that TI is really screwing up on the timing of the memory extension.

steve--i think that the next order of business should be to add
floating point.  (and increase integer arithmetic to 16 bits if you
haven't done that already).  it should work like 11logo, with integers
that get too big being automatically converted to floating, and the
system not using exponential notation unless the numbers get really
large (or small).  presumably, you should be able to hunt through the
code for 11logo to find out what the conventions were.  (i think the
directory is ai:nlogo;).   after floating point is in, you should
start on graphics.

pat--keep hacking the editor.  i'd like to see it complete very soon.
(in fact, i would have liked to see it two weeks ago).  i'll try
calling apple tomorrow and hassle them about DOS info.

SLH@MIT-AI 06/23/80 21:08:23
To: APLOGO at MIT-AI
FUNNYP returns TRUE if atom given is a funny-pname. This is fine,
except a funny-pname defined as "'A after a regular pname was defined
as "A gives the atom "A a funny-pname attribute, even though it's not
really funny. I would think that any use of FUNNYP would be to spot
pnames with spaces, so match routines etc. would know to look for them,
so then a true FUNNYP of a not-really-funny atom would not hurt anything.
(That's why I put FUNNYP in, so that just-in-case-it's-funny checks
could be made possible).

PGS@MIT-AI 06/22/80 14:58:13
To: APLOGO at MIT-AI

I fixed the PREVLN bug that printed out a CR at the beginning of the
pulled-back line when one had backspaced the last input line away. The
problem was that GTLN2A was storing carriage-returns in the line-array
at the end of a line (even though it wasn't letting anyone know they
were there; i.e., the counter wasn't incremented). Also, for cosmetic
purposes, I put PREVLN back on control-P.

HAL@MIT-MC 06/18/80 14:50:58
To: aplogo at MIT-AI

steve---please make a list of the primitives in apple logo

steve and pat---

i will be away for the weekend (till tuesday). when i come back I want
to see a working version of aplogo with everything except floating
point, graphics and filing.  (this means that the editor should be
implmented and working.)

PLEASE! time is running short!

SLH@MIT-AI 06/18/80 03:59:18
To: APLOGO at MIT-AI
	I just installed WORD and BUTLAST in Apple LOGO. That's all of
the primitives, except for the graphics stuff. I haven't tested them out
yet, nor some of the other new ones like RANDOM, RANDOMIZE, CALL, CURSOR,
etcetera. The reader and evaluator seem to work fine except for delimiters,
and it shouldn't take too long (a day at most) to find out why.
	I really think it's time we made a standard list of primitives, their
exact functions, and a comprehensive parsing algorithm. There are a lot of
differences right now between the Apple's LOGO and TI's; there are also a lot
of things on both which should be changed anyway.

HAL@MIT-MC 06/16/80 19:01:25
To: aplogo at MIT-AI

how's progress.  i'd sure like to see a working logo (with editor)
when i come in tomorrow.


SLH@MIT-AI 06/16/80 00:38:44
To: APLOGO at MIT-AI
Fixed a lot of reader bugs... still needs a little ironing, but
it's very close to working. Monitor works fully, too.

SLH@MIT-AI 06/15/80 21:53:32
To: APLOGO at MIT-AI
Big bug: The assembler gave a wrong answer for a constant-division, so
typecodes were being stored in fatal places. I've corrected this. Also, the
monitor now works, so we can debug faster now.

SLH@MIT-AI 06/14/80 19:33:56
To: APLOGO at MIT-AI
Ok, the "S" monitor command switches the 4K bank select, and types the number
of the bank currently selected (1 or 2).

SLH@MIT-AI 06/14/80 19:19:31
To: APLOGO at MIT-AI
The only reason you should want to zap into the old monitor (in ROM) would be
to use the disassembler, which is okay since all theat monitor can access is the
low memory, where LOGO is. To get back into the LOGO monitor, just do a control-Y.
So we now have the equivalent of a full monitor which can access everyplace (it can
even switch back and forth between the 4K banks in high memory, with location
accesses, even though there is no "switch" command. Actually, I think I'll put one in).

SLH@MIT-AI 06/14/80 18:59:36
To: APLOGO at MIT-AI
I've hacked the I/O structure so that it would be very
easy to use LOGO on the Apple from another device, whether
it be through one of the I/O slots or a pseudo-device
(software). Even the monitor would work - the only thing
which wouldn't (but could easily be implemented when
you know what device you're using) is flagging the device
for a character.
So, if an interface is written on ITS, we can use Apple LOGO
from it. Also, two Apples could communicate with each other
in Apple-LOGO (although no primitives for that have been
written yet, it would be simple).
I can't find out why atoms are being rejected until I get the
monitor to work (which I can't really debug without itself),
although I haven't got too caught yet.
I took out the BASIC command from the monitor, because in order
to use BASIC you have to re-boot, which means switching disks
anyway, so it's easier to just turn the thing off and load
up BASIC. The control-B command now gets you the original monitor,
disabling the high RAM (which means you can't look at nodespace
or anything, just page-zero variables).
Also, we have a free page (no. 3) of 256 bytes. The first thing that
comes to mind is to use it as an I/O buffer, but we could use it for
something else.

SLH@MIT-AI 06/14/80 14:37:39
To: APLOGO at MIT-AI
Pat: COUT doesn't affect the cursor; the cursor is only shown for
the purpose of inputting characters. The routine RDCRSR (I think that's
what I called it) replaces the character under the cursor-position with
a blinking one, then reads a character from the keyboard. You have the
option of echoing the character or not. I'm pretty sure that all of the
cursor variables are updated by COUT, though (such as CH, CV, etc.) and the
X and Y regs are not altered.


SLH@MIT-AI 06/12/80 23:29:24
To: APLOGO at MIT-AI
Put in the new random-number scheme, with the new primitive RANDOMIZE.
Also put in a CALL primitive (call assembly language routine). Put in
some more of the monitor commands and fixed the I/O routines to support
any of the plug-in cards (like the serial comm. card). To use, do a
.BPT in Apple-LOGO to get the monitor, and use the monitor commands
to set the input or ouput port. Then re-enter LOGO with a "G". Gary
made some good comments on the "out-of-nodes" problem, so I'll think about
how to fix it correctly.

SLH@MIT-AI 06/11/80 23:29:34
To: APLOGO at MIT-AI
Would there be any detrimental effects if the objects on the Oblist weren't
garbage-collect protected simply by virtue of their being on the Oblist?
The only reason I can see is that after a garbage-collect, they wouldn't be
linked together anymore. This can be avoided by cleaning up the unmarked
nodes on the Oblist right after the mark phase, before the collect phase.
This would eliminate any atoms created temporarily, misspellings, inter-
mediate values, etc.

HAL@MIT-MC 06/11/80 20:02:56
To: aplogo at MIT-AI

it's nice to see that we have some extra space.  let's hang on to it
until we see how the system performs.  we might decide that we can use
more nodes, or maybe want to implement array space.  or maybe a long
music buffer.  i haven't seen the pascal high-res character stuff, but
i think it would be wonderful to have, say, a text editor that could
handle lower case.


HAL@MIT-MC 06/11/80 20:00:10
To: aplogo at MIT-AI

i'd recommend not using the ``middle square'' method.  (see knuth,
vol. 2, p. 3-4).

we already have a good deal of info on atari's monitor.  i haven't
really gone through it yet.  after the apple project settles down, we
should take a look.


GLD@MIT-AI 06/11/80 19:40:00 Re: No More Nodes
To: APLOGO at MIT-AI, TILOGO at MIT-AI
An error message advising the user to erase something when there are no more nodes left could
be misleading: if for example a lot of nodes are gobbled as part of the local value of some
variable, then merely popping out of the procedure as a result of the error could free those
nodes and make erasure unnecessary.
As for the possibility of the user gobbling the reserve nodes by doing something that snags
them permanently, that could be prohibited since there are only a small number of routines
(S$MAKE and DEFUN are all that come to mind offhand) which can have that effect; they could
be modified to give a no-more-nodes message if ever invoked when you're down to the
reserve nodes (which of course can be indicated by a flag somewhere).

ps If you want to be really fancy, you can have ERROR do a gc after popping to toplevel
due to no-nodes-left; *then*, if there are still few nodes, it can advise the user to
erase something.

pps Actually the node-gobbling issue isn't quite as straightforward as I thought; merely
typing in a previously unencountered atom would add it permanently to the oblist.  But
if S$MAKE and DEFUN get disabled in reserve-node mode, then it should be ok to simply
save a pointer to the old oblist before calling readline in reserve-node mode, then pop
the oblist back to there after executing the line.  A cleaner solution, though, would fall
out of something that should be done anyway for other reasons:  the reader should *not*
intern atoms; rather, it should just return an uninterned pname for the atom.  Only when
something tries to set or access the value or function-def of the pname should it then be
interned.  This way, 1-shot atoms with no value or definition can be automatically garbage-
collected.  (Presumably, tho, this doesn't apply when reading a line of a function
definition; then, you want to intern things so that the same atom appearing many times
only takes up 1 node each time, instead of having a separate copy of the pname each time)

This would all be stated more clearly if the mailer had emacs functions.

HAL@MIT-MC 06/11/80 17:39:44 Re:  random number generator
To: aplogo at MIT-AI

use the transformation

X <-- (aX + c) mod m

where m is the computer word size (2^15, or whatever), a is congruent
to 5 mod 8 and between sqrt(m) and m - sqrt(m), c is odd and not a
multiple of 5

use the most significant bits of X to generate the random number.

see Knuth, vol. 2, p. 155-56

(p.s., you need only initialize the seed, e..g, via keyboard input, on
direct command.  it's handy to have a repeatable sequence of random
numbers for debugging purposes.)



PGS@MIT-AI 06/11/80 17:03:32 Re: random numbers
To: APLOGO at MIT-AI
One possible algorithm (sort of cheap, but sufficient) is squaring our
16-bit seed and throwing away the upper and lower 8 bits. I'll do
something about getting it together.

Creative Computing recently had an article by Ted Nelson on the Atari
800's graphics. He says that it is the most impressive graphics
machine around for the price, it's incredible, etc., but can't give
any details, because CC, as a software producer had entered into an
agreement with Atari not to divulge secrets. Atari is giving away info
on the machine's guts, though. I imagine we could do the same (get the
info from Atari).

SLH@MIT-AI 06/11/80 15:52:22
To: APLOGO at MIT-AI

Okay, here's the current setup:

   2456. nodes (12K bytes)
   1.75K words PDL
   0.5K words VPDL
   1.5K bytes S_ARRAY

   21.5K bytes for LOGO interpreter (17K bytes presently
    being used, 4.5K bytes left for expansion) including
    modified system monitor.

   Includes full DOS, one high-resolution graphics page,
    and one text or low-resolution graphics page.

   There is a 4K byte ghost-RAM area, presently unused.
    Putting all system tables and error messages, etc. in
    this area will reduce the interpreter by 2K bytes, but
    still leave 2K bytes of the ghost-RAM unused. Perhaps
    we should leave the 4K area open for contiguous storage
    space, such as for vector lists, arrays, music storage, etc.

Presumably, DOS will be cut from 10.5K bytes to 4K bytes, freeing
 up another 6.5K bytes for storage or expansion.
Another possibility for the 4K ghost-RAM is to swap the PDL or VPDL,
 or both, as necessary. (I think soon I will alter the stacks so that
 they grow towards each other, which will at present give a combined
 stack space of 2.25K words.)

Swapping from the 4K ghost-memory to the normal 4K section (there is no
 real distinction, actually) is instantaneous, so speed shouldn't be much
 of a factor in deciding it's use.

Should we write a package which will put text on the screen in high-resolution
 mode? The Pascal demonstration is impressive; you can have lower case and
 any special characters you care to draw, and you can position characters
 anywhere at all (upside-down, etcetera, if you really want to). We will
 need storage for character generation for this.

Comments, please?

SLH@MIT-AI 06/11/80 15:01:05
To: APLOGO at MIT-AI, TILOGO at MIT-AI
	The random number in Apple-LOGO is randomized every time
the monitor awaits keyboard input, but does not change between
input characters. This scheme provides an excellent seed between
keyboard input lines, but we need a routine to transform a random
seed into a fresh random value. Any suggestions?

SLH@MIT-AI 06/11/80 00:44:10
To: APLOGO at MIT-AI
(Necessary monitor routines will take up $217 (535.) bytes, a negligible
amount. I will therefore put it in. It won't have the disassembly feature,
though, but we just use that because we're too lazy to get up-to-date
source listings.)

SLH@MIT-AI 06/11/80 00:01:50
To: APLOGO at MIT-AI
In the current LOGO, the monitor is loaded in to the high RAM, cause we
need it there to use it to look at the storage there. If, on the final
version, it is just in ROM, then a .BPT will have to disable the RAM
to get to it, thereby rendering the storage inaccessible. So I think
that what we can do is relocate those routines in the monitor into
the LOGO program; they shouldn't take up more than 3/4 K bytes and
it will free up 2K bytes immediately.

HAL@MIT-MC 06/10/80 22:18:43 Re:  not enough nodes
To: aplogo at MIT-AI

the idea you've implemented is something like what 11logo used to do.
TIlogo doesn't worry about this, and hence will lose if you actually
use up all the nodes.

BUT....what's going on with Apple Logo is not that problem (i don't
think). try setting x to [1] and running

to foo
pr .nodes
make "x se :x :x
foo

On apple, this causes the no storage left wedge.  On TIlogo, the world
is not wedged after storage runs out.  (On second thought, another
possible causes for this difference is that apple may start out with
free nodes a power of 2, while TI does not.)  Try it and see.


SLH@MIT-AI 06/10/80 19:08:53
To: APLOGO at MIT-AI, TILOGO at MIT-AI
	Whenever an attempt to allocate a node is made and
the allocation limit is reached, an error is given: "No
storage left, please ERASE something immediately:". If
nodespace is fully used up while the next command is executed
(or whenever), the same error is given, then the input line
is un-protected, and the garbage collector is run again,
freeing up (at least) all of the reserved nodes.

	LOGO now moves the Monitor into RAM, reducing storage
right now to under 1000 nodes. This is necessary to debug the
program, as the storage and the monitor would otherwise be in
conflicting memory areas.

EFH@MIT-AI 06/10/80 19:02:16
To: APLOGO at MIT-AI
 How does TILOGO make sure that there are always enough nodes
    left to input a command?

 It doesn't!!

APPLE+@MIT-AI 06/10/80 18:06:06
To: APLOGO at MIT-AI
OH GREAT YOU CAN'T USE THE MONITOR TO DEBUG LOGO BECAUsE ALL
OF THE STORAGE IS ON THE RAM CARD.... WHAT
I'LL PROBABLY DO IS COPY THE MONITOR INTO THE TOP
2K OF RAM AND NEVER HAVE TO SWITCH BACK TO ROM
AGAIN. I'LL PUT IN A HACK ROUTINE AT THE FRONT OF
LOGO TO TRANSFER THE MONITOR FROM ROM TO THE RAM.
IIT'LL BE REMOVED WHEN WE GET THE BUGS OUT OF IT,
OR WE COULD LEAVE IT IN FOR THE BENEFIT OF THE
USERS.
- STEVEN

SLH@MIT-AI 06/10/80 15:50:10
To: APLOGO at MIT-AI, TILOGO at MIT-AI
	I've implemented a nodes-allocated-so-far counter, and CONS
checks for a certain allocation limit (and so will Get_words). The
problem is that the reader uses the "reserved" nodes, and there is no
reason that it couldn't use them up (they are intended to be used
to tokenize a command to free up more nodes, such as ER xxx, but the
luser could just type something else if he wanted). What I'll do now
is change the error message to "No nodes left, please ERASE something
immediately". Should I put in a check to ensure that some nodes are
in fact cleared before proceeding (otherwise, you could get permanently
stuck, not being able to tokenize lines at all), and how should I go
about this? How does TILOGO make sure that there are always enough nodes
left to input a command?

johnb@MIT-AI (Sent by LAWLER@MIT-AI) 06/10/80 09:37:50
To: TILOGO at MIT-AI, APLOGO at MIT-AI
i think idea of eliminating infix operators is very wrong idea.  perhaps indo-european
languages are "losing" in this regard.  that, however, does not change fact that kids
speak those languages before doing any programming.  seems to me that the more con-
tinuity the better.  i also wonder how unique use of infix operators is to indo-
european languages:  perhaps some connection between infix operators and sensori-
motor "logic"?

SLH@MIT-AI 06/10/80 01:29:10
To: APLOGO at MIT-AI
Right now, LOGO is gotten by using (on a PASCAL system) the BASICS disk,
which when booted asks for a standard Basic (DOS Master or whatever) disk.
This makes it very easy for a greeting program (syetem executive) to
load in LOGO and run it. This is just as easy as using regular Basic
on a Pascal system. If we really want a one-disk automatic bootstrap,
we'll have to rewrite part of DOS and part of the booters on the disk.
This would make it hard to transfer LOGO from disk to disk, or use certain
file utilities, or perhaps put non-LOGO programs on the disk (or get
LOGO programs off of it with another language). Besides that, Apple
isn't too happy about exposing DOS and the Pascal filer (especially) to
us, and it would take a lot of time to figure everything out. It's okay
to pursue, but right now I don't think it's of major concern. I'll think
about how to do it (since I've already started), and perhaps we'll find
an easy way to do it. But the point is, if anyone uses any other part of
their Pascal system, getting LOGO running should seem quite easy.

EFH@MIT-AI 06/10/80 00:39:33
To: TILOGO at MIT-AI, APLOGO at MIT-AI
    MARG@MIT-AI 06/09/80 23:26:29
    TILOGO won't have semi-standard names for tty output. Those names have been 
    extrememly troublesome to kids for a long time. (by won't I mean I think it shouldn't)


However I don't like printline.  Any other suggestions?

MARG@MIT-AI 06/09/80 23:26:29
To: APLOGO at MIT-AI, TILOGO at MIT-AI
TILOGO won't have semi-standard names for tty output. Those names have been 
extrememly troublesome to kids for a long time. (by won't I mean I think it shouldn't)

SLH@MIT-AI 06/09/80 23:22:16
To: APLOGO at MIT-AI
CC: TILOGO at MIT-AI
	I really think that brackets should be delimiters
unconditionally. Also, parenthesis should also be automatic
delimiters. Is TILOGO going to have the semi-standard names
for PRINT and TYPE (instead of PR, PL) and separate keywords
for NAMES and ALL (instead of PONS, POALL)?

PGS@MIT-AI 06/09/80 21:34:57 Re:  Infix notation
To: APLOGO at MIT-AI, TILOGO at MIT-AI
I must say I agree with Ed about this. I do not think that kids have a
hard time understanding prefix notation. Prefix seems, to me, the
"natural" way to do things. I think that the only reason most people
do it another way is because of the losingness of Indo-European
languages for talking about procedures.

Having both infix and prefix notation available simultaneously is
certainly more confusing. It seems possible that the reason we
have both is that the language was originally developped at BBN, by
people who may have been used to languages in which this was the case.

EFH@MIT-AI 06/09/80 20:32:24
To: TILOGO at MIT-AI, APLOGO at MIT-AI
Comments on doing away with : ("dots")?  So that a word could be either
a variable name or procedure but not both (not a usefull feature from
"good programming practice" point of view).  

EFH@MIT-AI 06/09/80 20:29:16
To: TILOGO at MIT-AI, APLOGO at MIT-AI
The correct thing to do about unary minus is to do away with infix
operators.  This also leads to greater consistancy, easier evaluation.
Of couse the problem is that it is inconsistant with "standard" math
notation as taught to most kids.

EFH@MIT-AI 06/09/80 20:25:13
To: TILOGO at MIT-AI, APLOGO at MIT-AI
Is there any reason that quoted atoms should not be delimited by ]
(close bracket) as well as space?  It is annoying to have to type:

	RUN [PRINT "FOO ]

where this space       ^       is needed.
Also it's screwing me in the editor.

SLH@MIT-AI 06/09/80 19:48:55
To: APLOGO at MIT-AI
Ok, the serial line is working now.

SLH@MIT-AI 06/09/80 19:40:14
To: APLOGO at MIT-AI
I can't seem to get the serial line to work.. do you know if
it's been changed (line #, connector, etc.) by the TI hackers?
It might be the new hardware, maybe the Comcard routine is
masked over or something.

PGS@MIT-MC 06/09/80 16:49:56
To: aplogo at MIT-AI
I went out to Computercity this afternoon to get us a new BASICS
diskette. As everyone there seemed to be ITT Tech types, I had to
put together a language system for them (pull the chips, push the
boards) to get the damned thing copied. We are now proud owners (or
something like that) of a BASF Flexydisk with BASICS on it. I also
brought back the old one for backup (just in case, etc.).


SLH@MIT-AI 06/08/80 22:51:44
To: APLOGO at MIT-AI
Pat - If it's possible to use the extra memory in the non-contiguous
video text area, a "marker" could be used to see show which lines were
terminated by a CR and which were just overflowed. Or, we could instruct
el user to indent continued lines, or start them with a certain character
(or the character could be inserted automatically at an overflow). I'll
be in all this week, I'll try to get everything working, no-frills-wise
at least. Has anyone figured out what the bug is that crashes recursive
procedures every once in awhile? It might be a storage overflow, or even
a temporary-conflict (I think I found a few while optimizing, BTW said
task should be finishable in a matter of hours). Also, it is okay to take
priority on the AI terminal in 347? I've had to wait for it quite often
now. See you tomorrow. - Steve

PGS@MIT-AI 06/07/80 11:49:11
To: APLOGO at MIT-AI
We have a conceptual problem in the implementation of this editor, I
think. If we are not using line numbers, we have to find some way to
differentiate one line from another in some non-kludge fashion. I am
not sure how TILOGO does it (Ed?), but it does kludge it -- I noticed
this while giving a demo last week. What I mean is this sort of thing:

TO FOO
MAKE "A (A + 1) * (3 + 2) - (259 -
3)
END

This causes (last I tried) an unexpected eol error, and then a you
don't say what to do with 3 error, then a you have unbalanced parens.
The problem is, of course, that when the line overflows, we have no
way of knowing what the user intended -- one line or two.

Suggestions? (we could put each command line in a set of parens, ha
ha, or require an extra CR between command lines, I guess, or even use
line numbers (but line numbers wouldn't really solve the problem)). We
could implement a slightly more clever editor (a screen editor that
somehow did something like what the current line editor did, in
requiring that one line be entered or edited at a time.

HAL@MIT-MC 06/07/80 10:16:21 Re:  nag, nag
To: aplogo at MIT-AI

steve and pat---

our current plan call for using the apple system with kids in
california starting 50 days (!!) from today.  Given that teachers have to get
used to the system, some documentation has to be made, and there will
be the usual rash of bugs to fix, I think that we may be in bad shape
if the system is not completed within 4 weeks.

we are trying to get DOS listings, so let's wait a week and see how
cooperative Apple will be.  If necessary, we may have to kludge
something.  (in the meantime, why not put a message on the arpa net to
see if there are any apple wizards out there who can answer your
questions.  or call the apple hot line.)

could you get together and agree on a timetable for
getting the system done, say, by July 7.

I suggest that first steps are
        1) get a new BASICS board on Monday

        2) both of you agree on how the system will be configured within
                the new memory (steve claims we have a full 64K available)

        3) steve get the new version of Logo running, including the
                remaining non-graphics and i/o primitives, by the end
                of the week (friday the 13th).  Then we can have other
                people start
                using it and looking for bugs.

        4) pat get the full editor implemented by the end of the week

you've both been working at a herioc pace and i'm sorry to have to
drive you so hard.

SLH@MIT-AI 06/05/80 18:33:05
To: APLOGO at MIT-AI
Concerning a turnkey LOGO disk:
	Upon power-up, the monitor scans all the slots for a card with
the DOS Bootstrap ROM in it (by checking a few bytes against a little
table - a rather dangerous thing, overall). When it finds it, it jumps
to the code in the ROM. The code apparently loads in a second stage
bootstrap off of disk into pages 8 and 9, and eventually DOS gets loaded
and relocated tot he highest RAM memory.
	What we'll have to do is look at the non-ROM bootstrap stages,
and change them so that DOS is booted into a specified part of memory.
This DOS need not be relocatable, and perhaps will be shortened considerably
to suit our purposes. We don't have to worry about HIMEM pointers and such,
since every LOGO system will be expected to be the same in certain aspects
(to be discussed...?). The information given about file storage seems
relatively complete, and it doesn't seem like too much difficulty to implement
a good file system in LOGO.
	It's not too clear how much power DOS has in running the whole system,
or what happens right after DOS is booted. What we'll want is for DOS (or the
monitor, if that's its job) to load in LOGO from the disk.
	Concerning RESET: About the only thing we can do is to anticipate
a worst-case interruption; the system will be restarted (like GOODBYE).
This is basically what happens in PASCAL, and BASIC doesn't worry too much
about RESETs because there's little (none?) chance of interrupting a
program-alteration.
	We immediately need a listing of DOS and any bootstraps (the on-card
ROM and the secondary booters on the disk, if any).

PAPERT@MIT-AI 06/01/80 07:47:25
To: APLOGO at MIT-AI
I see the pseudo-sprite situation looks pretty grim. But motion
primitives have proven so dramatically effective in TI-LOGO as an
introductory route for kids that I'd like to be sure we have clutched
at every straw before giving up.

The following is a set of free associations rather than thought-thru ideas.

Number of sprites is not of the essence....even one would be good ,
four would be great.

It does matter if the speeds are not real, so having them slow down as
their number increases WOULD be distastrous...but it would be
acceptable for LOGO to slow down as the number of sprites goes
up...the idea of limited machine ressource is intelligible.

Limiting the size of the sprites is quite acceptable...even if they have
to be smaller than the TI sprites. 

As a last ditch last ressort what about having a velocity primitive for
characters?...then we could have a command set like the TILOGO sprite
commands for individual characters and for objects made up of sets
of characters on the pattern of TILOGO's Call <list> "X, TELL :X ....

Does the processor have NO way to know about real time? Does it know
when the screen refresh happens? How do they coordinate music and graphics?


PGS@MIT-AI 05/31/80 19:21:15
To: APLOGO at MIT-AI
What I need exactly is a listing of their DOS. If they have any other
information on the guts of their disk system, I'd be delighted to have
it, but I need a DOS listing. I know that a commented assembly listing
of DOS would have exactly and all the information I need. If we were
to ask for anything else, we would probably find that some jerk over
there had sent us another one of their DOS manuals for Joe Random
Hobbyist (we have two of those already).

PGS@MIT-AI 05/31/80 18:58:57
To: APLOGO at MIT-AI
The window stuff for the Apple is written into their monitor. They
have no special hardware for redrawing shapes and that kind of cruft.

It seems unlikely to me that we could win in any way by attempting to
implement sprite-like stuff on the Apple. Actually, this is a gross
understatement -- the machine is highly unsuited to this, and attempting
to implement it in software would require a number of extensive changes.

For one thing, the more sprites we had, the slower they would go,
until, with four or five, I would estimate, things would be
ridiculously slow. This is because we would have no choice but to hack
the bitmapping. Furthermore, we couldn't possibly keep them moving
while the machine was doing anything else and hope for even
near-reasonable runtime. What's more, as the machine has no
software-accessible clock, we couldn't hope to keep them moving at a
constant velocity by "cheating", and increasing the increment by which
we moved them at high-load times (when the machine was trying to do
something else).

The Apple keyboard isn't even interrupt-driven, so we would have to
check for keyboard input in the loop that moves them around... on the
whole, this seems not very feasible to me.

Other opinions?

HAL@MIT-MC 05/30/80 21:27:41
To: aplogo at MIT-AI

the pascal scheme for handling color looks reasonable except for the
silliness of having two different whites and blacks.  steve, i suggest
you implement floating point and then go on to do a first pass at
graphics.  seymour would like us to try to implement some kind of
sprite facility similar to the one on TI.  Is there any way to do this
other than by the (painful) method of writing and erasing the bit map
every iteration ?  (E.g., how do "shapes" work in Apple basic ?  What
do "windows" do in Apple Pascal ?)

Pat:  Seymour spoke to a VP at apple and they may eventually come
through with some cooperation.  Try an figure out exactly what you
need to know so we'll be in a position to ask.  Meantime, can you go
ahead on the procedure editor ?

We likely won't be using pascal all that much, so i don't see lots of
reason to get another disk drive.


PGS@MIT-AI 05/30/80 18:28:45
To: APLOGO at MIT-AI
Fixed the bad blocks on APPLE0:. I think the constant pulling out and
putting in of these disks is eventually going to munch them. We should
consider getting another drive (right?)

SLH@MIT-AI 05/29/80 20:05:14
To: APLOGO at MIT-AI
The reason we coudln't get APPLE Pascal to work was that you need
the file you're using on the same disk with the utilities, if you've
only got one disk drive (this isn't documented anyplace, though). I
copied the Linker and the Graphics demos onto APPLE0: and was able
to run them both. You can also copy text files onto APPLE0: and use
the editor. There isn't too much space on one disk, though, and also
there are two (at least) bad blocks on APPLE0:. Anyway, all we have to
worry about is the specs of the language card - since it has some ROM
on it, we may not have gotten all the extra RAM we bargained for, but it
should do.

SLH@MIT-AI 05/29/80 19:51:39
To: APLOGO at MIT-AI
Pat, where is the code for your pullback?
Fixed Randomizer error; RDKEY is only called by GETLIN,
so you shouldn't have to worry about random locations
suddenly flashing when something wants to access the keyboard.
Forward arrow in GETLIN is fixed.
LINLTH can have location 31., it's right after ARG2 or something
and right before the monitor vairiables (let's keep them clear,
except for what we're duplicating, for now). Also, make the character
codes for pulling back lines, deleteing, etc. constants so we can
change them easily.

PGS@MIT-AI 05/29/80 13:07:44
To: APLOGO at MIT-AI
Got the language board; the story is: it has 16K RAM, which we will
see as an actual 16K extra (i.e., we're not exchanging RAM for RAM
when we switch in the board). It also has some ROM (haven't poked at
it yet; don't know how much) on it; the ROM contains a piece of their
Pascal which they wanted resident (forever). It basically replaces
Basic. The board seems to be software switchable.

Interesting guy, this Mike Harrington who runs Computercity. He seems
at least as interested as we are in establishing a working
relationship for us with them, which seems not a bad idea as he has
the best prices around, apparently. He stated over the phone that he
was interested in Logo, so Greg dug up some papers on it for him,
which he seemed very happy with. He has six stores in the area, and
seems to be the big Apple type around here. He can handle any hardware
problems we have in house (you know, if we fry our motherboard or
what-have-you). Doubtless he is interested in seeing our money for it,
too.

Anyway, he would be very interested in running Logo on his demo
systems in his stores when we get it running. This would be good for
him, but I'm sure it would be good for us, too.

PGS@MIT-AI 05/29/80 12:56:38
To: APLOGO at MIT-AI
Got the language board; the story is: it has 16K RAM, which we will
see as an actual 16K extra (i.e., we're not exchanging RAM for RAM
when we switch in the board). It also has some ROM (haven't poked at
it yet; don't know how much) on it; the ROM contains a piece of their
Pascal which they wanted resident (forever). It basically replaces
Basic. The board seems to be software switchable.

Interesting guy, this Mike Harrington who runs Computercity. It was
easy to establish a working relationship for us with them; he stated
over the phone that he was interested in Logo, so Greg dug up some
papers on it for him, which he seemed very happy with. He has six
stores in the area, and seems to be the big Apple type around here. He
can handle any hardware problems we have in house (you know, if we

PGS@MIT-AI 05/29/80 11:15:09
To: APLOGO at MIT-AI
Steve, I also put a comment starting with ";Steve," everywhere else
I thought I'd spotted a bug.

PGS@MIT-AI 05/29/80 11:12:37
To: APLOGO at MIT-AI

I have inserted the code for pulling back the previous line in the
latest Logo's monitor routines, and hopefully it will work. Haven't
checked it yet, because of the current upheaval in our system, but it
should work when we get things back together. Hung MM Pull Back Last
Line on ^L, rubout on ESC, delete char under cursor on ^D.

Steve -- I need a permanent place (1 byte only) to save line length
between invocations of GETLIN. In the code I wrote I used LINLTH, but
this, of course, doesn't work. Is it OK by you if I decrease MAXCHS by
one and use the last location in LINARY for the linelength?

Also, in RDKEY I think I have espied a bug, but, as you comment your
code so well (actually, I think you've improved), I am not sure it is
one. But I'm pretty darned sure. Voila:

RDKEY1:	INC RANDOM
	BNE RDKEY1
	INC RANDOM+1

I.e., increment the high byte of RANDOM until it's zero on each
invocation of RDKEY. Hmmm.

SLH@MIT-AI 05/28/80 21:46:59
To: APLOGO at MIT-AI
The new reader is installed... there might now be room to download
because a lot of code was cut - it needs to be tested. The documentation
file is being updated, and with it the code is being optimized (with
respect to temporary variable usage), so it will not be in working order
until I'm done. It appears that there are still a few execution bugs;
we'll have to try and isolate them (it?) on the older version still on
the diskette (no new execution changes have been made since then).
I'm still not sure about the nodespace/garbage-collection/storage-error
problem, I'll have to talk to Gary about it.

PAPERT@MIT-AI 05/28/80 06:59:16
To: APLOGO at MIT-AI
About unary minus. 
The problem arises because traditional math uses the same symbol for two
purposes. The right way out is to corrrect by using a separate symbol eg
a super-pre-script form of - for negative numbers. The only
argument I see against doing this is the shortage of keys on the TI machine...
but  I propose doing it all the same.

SLH@MIT-AI 05/26/80 23:26:35
To: APLOGO at MIT-AI
I've written the new reader/parser/tokenizer, but haven't implemented
it yet (nor proofread nor tested yet). If I put it in instead of the
old one, we won't have to shorten storage any to fit APLOGO in (cutting
storage is a major pain).

SLH@MIT-AI 05/26/80 15:53:09
To: APLOGO at MIT-AI
I'm really tempted to rewrite the reader/parser... right now it's much too large
and uses a whole page unnecessarily (Token_array)... it wouldn't be too difficult
rewriting it, since I've written one before that worked. If I do rewrite it, it'll
still give the same reults, though.

HAL@MIT-MC 05/26/80 09:25:16 Re: line numbers, unary minus
To: SLH at MIT-AI, Aplogo at MIT-AI

i think we should try very hard to give apple logo a screen editor, so
that line numbers should go away altogether.

i think the unary minus thing is a good idea, but why don't you talk
it over with gary and ed first.  If the change is made, it should be
made in TI-logo, too.



SLH@MIT-AI 05/26/80 00:32:32
To: APLOGO at MIT-AI
Possibly we could have CONS do a .NODES sort of thing, and give an error
when there are less than a certain number left (or rather, every CONS
increments a nodes counter and checks it. If the garbage collector knows
and uses the counter when it sweeps, we wouldn't have to do
a node-sweep for the .NODES command, just return tha value
of the counter.) What do you think?

SLH@MIT-AI 05/26/80 00:26:52
To: APLOGO at MIT-AI
OK, CURSOR and BUTFIRST are implemented (but not tested); APLOGO is
too big right now, I'll cut nodespace in the morning.

If you get a No Storage Left error because nodespace is full, you can't
erase anything becuase you can't cons up a command line. If we leave
"protected" nodes for this occurrence, we'll need about twenty nominal,
which is a lot of nodes. What does TI LOGO do about this?

SLH@MIT-AI 05/26/80 00:09:00
To: APLOGO at MIT-AI
I don't think we have to worry about cassette tape yet; if need be,
it could be done directly from BASIC or the monitor by the user.
Cursor positioning is a good idea - I'll put it in right now
(ummm, CURSOR :X :Y for now, we'll change it later if we have to).
Hal's concerned with TI compatibility, but I say, "Let them be compatible
with us!!" (Just joking).

PGS@MIT-AI 05/25/80 23:49:26
To: APLOGO at MIT-AI
Do we want to support saving the environment on a cassette tape?

Do we want to support cursor-positioning (I think that kids would like
this)? 

SLH@MIT-AI 05/25/80 23:15:15
To: APLOGO at MIT-AI
OK, ditch the "-" suggestion. Wouldn't it be alright to omit line numbers
from PO when not in edit mode, instead indenting unlabelled lines (this
would make things a lot easier to understand at a glance). Eventually,
then, we could eliminate them altogether when we get a screen editor,
depending on whether we want the editor to be able to access lines or
blocks of lines by numbers.

PGS@MIT-AI 05/25/80 23:01:32 Re: Line numbers and labels; subtraction and negative numbers.
To: APLOGO at MIT-AI
I see nothing wrong with having both line numbers and labels in code;
I think the presence of labels encourages better programming style and
makes it easier to insert lines in code (moving everything else down,
like the TILOGO insert) without having to alter things.

As far as I am concerned, line numbers should be seen by the user as
as a conceptual structuring aid and an editing aid. While they should
be seen, in a simple sense, as a control structure (i.e., execution
goes sequentially through the separate lines, etc.), they shouldn't be
used for flow of control. We have neither the nested structure of
Lisp, nor the block structure of Algol-like languages, so we're stuck
with goddamned line numbers to clearly illustrate our sequential
structure.

As to negative numbers, I think that the best policy would be to have
the user do something like this:

MAKE "X (-1)

This is the way things currently go, and it seems, while not perfectly
reasonable, perhaps, at least almost consistent. More so than making
"-" be the only infix operator that is not a delimiter character, and
forcing one to use spaces every time one subtracts one number from
another using infix. Surely one uses infix "-" more often than unary
"-".

SLH@MIT-AI 05/25/80 22:51:30
To: APLOGO at MIT-AI
Pat,
	For an idea of what the file writer should do, look at all
the comments that start with a question mark (except for the last two).
Basically, when OUTDEV is nonzero, any characters written will be
pu in a buffer (most likely, the input line buffer will be used,
or even the token-array buffer in addition). When the buffer is filled
(or the writing is finished), it will be written onto the disk.
This entails (1) knowing where to put it physically, and how, of course,
and (2) updating the file spec or whatever, in the catalog (or whatever -
you figure it out). Basically, you should try and write routines which
sort of "fit" right where those comments are (for instance, "Open
Workspace file for writing", "open for reading", "close", "Read/write
a buffer", etc.) - see SREAD and SWRITE and their associated evaluator
routines. You might think about including some file system utilities,
like delete, rename, POF (print out file), etcetera, although these
are all available in BASIC.
	I've put the monitor in, and I'll probably have to cut nodespace
again too make everything fit under DOS. I'll send the proper new
addresses when I figure them out.

I think we should put in RANDOM. We've got a 16-bit random number from
the monitor, but in only gets changed (although really randomly changed,
a real win) when the monitor waits for a character. To make it really
random, we should have it be rehacked according to a standard algorithm,
after RANDOM is called. Right now you can get the random number with
PEEK 78 and PEEK 79 for the low and high bytes. You can do .CTYI with
a PEEK -16384, and clear the strobe with a PEEK -16368.

SLH@MIT-AI 05/25/80 21:44:51
To: APLOGO at MIT-AI
I agree that line numbers should not be a part of LOGO. I'm suggesting,
then, that they not be printed out when you're not in edit mode. As to
compatibility with TI LOGO, I would like to see a full specification for
it. I'm assuming that if we come up with better syntax or something,
it can be changed on the TI machine without too much trouble. What do you
(Hal) think of the unary minus suggestion, anyway?

HAL@MIT-MC 05/25/80 16:23:06 Re:  infix -
To: aplogo at MIT-AI


don't start hacking the parser without remaining compatible with TI
Logo.


SLH@MIT-AI 05/25/80 12:46:19
To: APLOGO at MIT-AI
Also also: It looks kind of silly seeing line numbers and labels in the same
listing; it also seems dumb to outlaw GOing to line numbers if they're going
to always be there. Another thing which seems funny, but I don't think we can
do anything about is that MAKE "X -3 evaluates as MAKE ("X - 3); we can't
make the precedence of "-" conditional on what precedes it (fixnums should
always be considered prefix args). Actually, we should have the tokenizer
recognize negative numbers if the minus directly (no spaces) precedes the
fixnum; currently, minuses are delimiters and are mmade separate tokens.
Would this be okay? It would cause an error if you wrote 323-424 instaed
of 323 - 424 (the first gives two args, 323 and -424, while the second gives
one, -101). But I think this how it should be (I am sick of writing "0-1"
when I just mean negative one). Comments?

SLH@MIT-AI 05/25/80 12:33:59
To: APLOGO at MIT-AI
Pat:
	The file system should be compatible with the other Apple utilities,
i.e. just be text files. This way, CATALOG will work, and the user can use his own
utilities (editor, downloader, etc.). We don't want any hierarchy or anything,
just the READ and WRITE workspace commands (filename is argument). Hal thinks we
should put in an editor in RAM, once we get the extra storage (we'll see how it fits;
I don't think we really need one if it won't fit easily). As to the monitor, we'll
just use the routines I wrote. If the user does a .BPT, the old monitor and BASIC
will be enabled, and the high RAM disabled. If he reenters with G, the high RAM
will be re-enabled, so he can continue if he didn't munch anything. This week, we
should be going to a store to get the new Apple stuff, so we'll see if we can find
a DOS listing (the store manager might be able to get one, else we'll call).

The only remaining bugs I can find in LOGO is in TEXT, but I haven't yet tested
DEFINE out, so it may not work either. I think PAUSE needs to be rehacked (from
PLOGO) - if you do a control-Z, the evaluator decides to ignore the rest of the
line currently executing (this isn't so bad except that the keyboard is polled
at the beginning of each line, so you inevitably lose a whole line). I think
we should have the poller be called explicitly (right now it's in PUSHTEST, which
gets called by lots of things, and before GO's and RUN's, which I don't think
is too good) at strategic locations, so that nothing gets (too) munched when
you try and continue. It should be called at the end of lines, and at
the end of procedures, and at the end of RUN-lists being evaluated
(so that recursive RUN-lists are interruptible). I'm just wondering
if it is possible to execute a recursive thing where the KBD is never
polled; if it can be shown to be impossible, then that placement of
polling calls should be OK.

Also, it wouldn't be hard to have the poller (or perhaps another polling
routine which would get called more often) get characters from the KBD and
put them into the input line buffer.

Also, I could implement .CTYI, .CTYO, .PRIMS, and CALL (machine language procedure)
without any trouble or much space. Whadda you think?

PGS@MIT-AI 05/25/80 12:05:09
To: APLOGO at MIT-AI
I am beginning to figure out what I would like the file system to look
like. I have a couple of questions, however, that I'd like opinions
on. First, do we want to be somewhat compatible with the Apple DOS
file system?  If we were, then we could win in at least one way: we
could make Logo files be implemented as text files (the heck with the
obvious wasting of space and the like -- I don't see that this is much
of a concern, for the sort of user we are aiming this at), so that the
user could, if he wished, use his own utilities for modifying them.
What sort of utilities do we want to support? We could have the
elementary file utilities that 3500 Logo does, for example (without
the hierarchical file system).

I think that implementing a screen editor at this time might require
that we implement paging (arrgghh) or somesuch, because of the space
squeeze. The other alternative is to allow the user to use his own
editing utilities (this is horrid - it would mean a pretty bad
environment), or just trying to squeeze it in.

Finally, should I implement some sort of monitor (to provide some very
simple debugging help, less than does the current one), or should we
do the remaining Logo debugging separately from the file system
debugging, putting them together at some later date?

Re the Pascal-running Apple: I believe this language card frob
replaces your lower 10 or 12K with other firmware. The rumor I heard
was that they couldn't fit their Pascal in 48K and have enough storage
left, so they booted Basic off into the wilderness. They also, I
believe, sell the language card without a language (i.e., ROM) on it.
We do have a ROM card for the lower 12k, incidentally, already.

I need a DOS listing sort of badly, or at least some I/O specs for
their drive and controller. The DOS manual provides a vague idea of
what goes on when you give what DOS commands, plus such goodies as
file format specs and so on, but nothing on how exactly it works. Not
even a port address. Apple doesn't sell DOS listings, I don't think
(proprietary information, what's more), so we shall need to use Hal's
influence to get one (right, boss?)

SLH@MIT-AI 05/24/80 18:41:41
To: APLOGO at MIT-AI
Just found the bugs that caused the following to not work:
MAKE F REQUEST REQUEST
PR 2 + F "2A
etc.

The bug was that INTERN Vpushes the string it looks for on the OBLIST;
if it found it, it just returned, forgetting to pop it off. So anything
expecting an argument on the VPDL got this pushed string (type is same as
FIX, even though it's alphanumeric). This should be a bug-of-the-month,
it only took about 15 hours to find.

LPUT as it is in PLOGO doesn't work, but I wrote up a version that does.

HAL@MIT-MC 05/24/80 09:00:24
To: aplogo at MIT-AI


I'd like to get the other apple and extra memory board early next
week, so that we can start on ``phase 2.''   Maybe Greg and Steve
and/or Pat can go out and get it on Tuesday or Wednesday. The second
Apple is coming with the Pascal package.  One thing I'm confused
about:  does the board that come with the pascal package have any
special rom in it, or is it just the ``language board'' ?


SLH@MIT-AI 05/23/80 21:10:13
To: APLOGO at MIT-AI
Ok, I've fixed the bugs; put in full error checking for arithmetic
operations, updated a few error messages, etcetera. Now if this stuff
works, I'll put in WORD, BF and BL (but I might have to shorten nodespace
to do it).

SLH@MIT-AI 05/23/80 03:07:42
To: APLOGO at MIT-AI
In the last version, averything seemed to work except
for a few commands; I'm assembling a new version now,
where I think I've fixed all of the bugs. I won't have
time to test it or download it, though. Since most
of the bugs I just fixed were pretty easy to spot and
fix, the language should work fully by the end of the
week. Whew!!!!

There are some funny things (not bugs, just the way the
language is set up) I'd like to talk over with Gary
(such as some error messages, parenthesis protocol,
line numbers/GO, and other things which "seem" funny).

SLH@MIT-AI 05/22/80 18:23:11
To: APLOGO at MIT-AI
PO can now print out full text and everything; Errors are
handled correctly now too (even in Ufuns). There is still
a problem with Ufuns stopping or finishing execution, and
argument passing doesn't work. Will set breakpoints in UF1,
UF2, XUFNCL, etc. to find the trouble.

SLH@MIT-AI 05/22/80 15:00:25
To: APLOGO at MIT-AI
Ok, I fixed the stack frame problem: APLOGO's stacks grow upward,
PLOGO's grow downward, so our stack frames are reversed. This is
good because all the SF_... things are positive (equal to two minus
the PLOGO value) and indirect Y indexing can be used without doing
subtractions first. FRAME points to the SF_PREV_FRAME entry, and
XFRAME points to just above the last binding pair (in APLOGO, stack
ptr's point to next free stack location; in PLOGO, they point to last
thing pushed). I'm pretty sure I straightened out all affected code,
I'm assembling it now.

PGS@MIT-AI 05/22/80 11:13:19
To: APLOGO at MIT-AI
Yes, the nargs bug has been eradicated. Even in multiple arg
functions, the nargs cell has the right stuff in it. This is small
solace, though, as multiple arg ufuns are crashing in PTVTST. I don't
know why yet. I will soon.

0-arg ufuns are crashing unpleasantly in the bigarray, when they
attempt to return. This is unpleasant mostly because one would prefer
that nodespace were not executed as 6502 code, and secondarily because
hell only knows how the flow of control got to there. Furthermore, it
is a destructive crash; nothing works after it. Display memory gets
munched, too. For the answers to these and other questions, catch our
next installment.

SLH@MIT-AI 05/21/80 22:19:38
To: APLOGO at MIT-AI
Correction: GO does indeed work; it doesn't like line numbers but
then it's not supposed to.

SLH@MIT-AI 05/21/80 21:18:12
To: APLOGO at MIT-AI
Well, ufuns work (haven't tried arguments or anything), at least until
they're finished (whence the system crashes). GO is bugged, will look at it.
I suspect the ufun bugs to be related to the stack references, because
APLOGO and PLOGO use different push/pop protocol, and I might have munched
the interpretation concerning stack frames.

SLH@MIT-AI 05/21/80 20:58:08
To: APLOGO at MIT-AI
I just fixed a lot of bugs in the Ufun evaluation routines
(including XTAIL) and all the associated subroutines. I also
fixed the bug which causes END to loop infinitely when a null
procedure is defined (this actually isn't a bug, it's just the
way GET_WORDS works). I had trouble loading LOGO down before,
but I'll try again. (I think the problem arises when you don't
kill CROSS right away when it's done; you have to kill it or
else it doesn't unlock the PTP and LST files.) I assume Pat you
fixed the argument-getting bug so that we can try and actually
run a Ufun (it seems to work, anyway)?

SLH@MIT-AI 05/21/80 17:43:47
To: APLOGO at MIT-AI
Found some bugs in LAST..have modified them (possibly even eliminated them..).

SLH@MIT-AI 05/21/80 17:23:38
To: APLOGO at MIT-AI
OK, I just fixed PTFTXT (I think...). Also re-did the arithmetic routines
so that now everything with minuses should work; unary plus and minus now have
the highest arithmentic precedence. Fixnum format has been changed to the
standard way of doing it: previously, numbers were 15 bits, and MSB was sign bit.
Now, numbers are 16 bit two's complement, so EOR'ing the MSB won't just change
the sign like before (now there's a routine, COMPL, which negates the number
pointed to by the Y register). CS and the new CLEARSCREEN now clear the text
screen. WORD, BUTFIRST, BUTLAST haven't been written; LAST is buggy.

hal@MIT-AI (Sent by PEARL@MIT-AI) 05/21/80 12:36:28
To: APLOGO at MIT-AI

noticed while hacking on apple that BUTFIRST :X returns :X (for :X
either a word or a list).  also LAST :X seems to infinite loop (same bug as above, i guess).
also WORD :X :X seems to not work.

also, how about fixing the arithmetic to handle overflow correctly ?


SLH@MIT-AI 05/21/80 00:23:00
To: APLOGO at MIT-AI
Well, END crashes now (most of the time). The only things I changed were some
temporaries... I'll be able to see what causes those changes to make it crash
tomorrow, it shouldn't be any problem.

SLH@MIT-AI 05/20/80 23:11:44
To: APLOGO at MIT-AI
Found the UFUN definition bug... had to do with conflicting temporary-variable
usage (as usual). Fixed it without having to create any new temporaries (not an
easy feat...), will test new version. By the way, the temporary usage table in
the DOC file is not up to date.

PGS@MIT-AI (Sent by GREG@MIT-AI) 05/20/80 10:20:43
To: APLOGO at MIT-AI
DEFINE places extra closes at the end of its input line and then complains
that it doesn't like it (the input line). How's that for cussedness?

PGS@MIT-AI 05/20/80 07:47:44
To: APLOGO at MIT-AI
    SLH@MIT-AI 05/19/80 13:47:18
    Pat - I mentioned the circular reference for Ufuns to Gary, and he seemed
    to think that that was how it is supposed to be done; but of course, if it
    seems pretty obvious from the PLOGO routines which use ufuns that something
    else is expected, it should be changed. Ask Gary about it anyway, and we'll
    talk about what you've come up with so far.

Nope. The ufun obect looks like this:

ufun => ********
        * frame*
        ********
        * body *
        ********
        * nargs*
        ********
        * atom *
        ********

it has a last word (or two words, for us) that is a backpointer to the
atom cell of the entire function object. The way we have it currently,
however, is nothing like correct. Our ufun object is simply a cons
whose cdr points back to the cons; that is, a short (ha-ha) circular
list.

SLH@MIT-AI 05/20/80 01:01:06
To: APLOGO at MIT-AI
Since I couldn't get LOGO to download properly, and there was no paper
for the Dover so I couldn't get a listing to look for bugs, I took this
time to write up the monitor replacement routines. They are in a separate
file (MON >), and appear to assemble without error. Will put them in APLOGO
later. ...Just got LOGO downloaded OK, also have a listing, but time to go.
Tomorrow,

SLH@MIT-AI 05/19/80 13:53:33
To: APLOGO at MIT-AI
Oh yeah... GETTYP and PUTTYP do funny things with Q,L,Datoms: they store them as
ATOMs in the TYPEBASE, but they modify the 2 LSBs of the pointer used to reference
nodespace (this is explained in the PLOGO listing). I've had a lot of trouble getting
it right in APLOGO, but the last time I changed it I was pretty sure it was done
properly. If a funny type-code is returned by GETTYP, then either a funny one was
put in the typebase by PUTTYP or GETTYP was referencing beyond the typebase, which
means the reference it was given pointed out of nodespace (which is most often the
case).

SLH@MIT-AI 05/19/80 13:47:18
To: APLOGO at MIT-AI
Pat - I mentioned the circular reference for Ufuns to Gary, and he seemed
to think that that was how it is supposed to be done; but of course, if it
seems pretty obvious from the PLOGO routines which use ufuns that something
else is expected, it should be changed. Ask Gary about it anyway, and we'll
talk about what you've come up with so far.

By the way, the Apple III looks pretty impressive, compared to the Apple II,
but I haven't got the whole story on their "extended opcodes implemented in
external LSI" or their new graphics hacks. So when do we get some (one?) to
fool around with??

PGS@MIT-AI 05/19/80 04:39:13
To: APLOGO at MIT-AI
The reason functions won't print out, as it took me painfully long to
realize, is that POTEXT is taking the cdr of the ufun cell and finding
the type of that cell, expecting the body to be there; the cdr of the
ufun cell is the ufun cell itself due to our circular list bug; and it
has type UFUN. It must be either FPACK or LIST to be printed out. I
think I am getting sleepy.
Incidentally, this bug is also why functions refuse to run and make a
"wrong number of args" complaint - the number of args being found is
also the ufun cell.
I'll work on it tomorrow.

PGS@MIT-AI 05/19/80 03:42:39
To: APLOGO at MIT-AI
We are currently having PUTTYP convert QATOMs, DATOMs, and LATOMs into
ATOMs, STRING/FIXs and FLOs, respectively. On recovery, SATOMs get
turned into $Es (no such animal), and everything else is unscathed.
Is there a reason for this? It seems clearly screwy.


PGS@MIT-AI 05/17/80 19:19:24
To: APLOGO at MIT-AI
After the definition of a ufun, the ufun cell is screwed. I will check
to see if type placement is also screwed. The ufun cell is screwed
like this:

This is the atom cell:
********
*  ========> noval (this is fine and good)
********				     =============|
*  ========> (ufun.pname cell)	********     |  ********  |
********			*  ========> => * LNIL *  |
				********	********  |
			    <========  *	*  ========
				********	********

i.e., the cdr of the ufun cell is a backpointer to the ufun cell
itself. No frame, body, nargs or backpointer to the atom cell.

PGS@MIT-AI 05/14/80 21:34:28
To: APLOGO at MIT-AI
An attempt to define a procedure with no body causes a crash when one
types END. The crash is of the catatonic variety.
PO works well (it seems) inside procedures, but loses strangely at top
level, apparently while trying to get the body of the procedure back.
It does not get arglists or any lines.

SLH@MIT-AI 05/14/80 18:56:29
To: APLOGO at MIT-AI
Fixed bugs in EDLINE, FINDLINE, PUTLINE. Stack overflow doesn't
lock system anymore; illegal line numbers (=,< 0) are checked.
...
Well, TO doesn't crash anymore, but does funny things to the line
numbers; PO can't hack an Fpacked user routine. Will look over code
again.

GREG@MIT-AI 05/12/80 18:38:20
To: APLOGO at MIT-AI
Ok, the garbage collector works. EDLINE still crashes sometimes; otherwise
TO seems to work but you can't PO anything. A NO STORAGE LEFT error from
a stack overflow isn't fixed; ie, you can't do anything without getting it
again. This seems to be because before EVALUATE can reset the stack, INTERN
calls GETPNAME which checks for stack overflow. So either ZAPMESSAGE, ERROR,
or ERROR1 (most likely) should reset the stack (PDL and VPDL). Sound OK? I'll
implement it in ERROR1, then.

PGS@MIT-AI 05/12/80 13:21:46
To: APLOGO at MIT-AI
Apparently (sez the Med department) I have strep throat compounded
with tonsillitis. They aren't sure yet, but will know on Wednesday. In
the meantime I can expect continued high fevers and the like, so I
won't be in till Thursday or Friday at the earliest. Steve, sounds
like you're winning bigly. Congrats.

						Pat

SLH@MIT-AI 05/10/80 16:30:37
To: APLOGO at MIT-AI
Ok. I just fixed a load of bugs in: ELSE package, END package, GARCOL package,
EQUAL package (meaning all routines called by the stuff). Also fixed a bug
which could have had universal consequnces (I know it screwed the garbage collector,
for one): the STRING typecode was 0 (LIST) instead of 2 (FIX). Things should start
working, now. Also gave REQUEST its own prompt ("<"), and eliminated the
CRLF after READ_LINE (it only occurred in input lines without unterminated
lists in them). There should be a switch to tell REQUEST not to type a
prompt if the cursor is in the middle of a line (LTYPE would set it, TPCHR
would reset it, since it's now the only way to move the cursor). I also put
in the LINES command.
I don't have time to download and test it, but it's assembled (LOGO PTP and
SOURCE LST), so Patrick you try the above things out if you get here before
I do. - Steven

SLH@MIT-AI 05/09/80 20:03:52
To: APLOGO at MIT-AI
Fixed some GC bugs, and it now works most of the time. Still crashes if you
do a lot of node-eating, will investigate further.

SLH@MIT-AI 05/06/80 20:42:36
To: APLOGO at MIT-AI
YES! YES! YES!

TO now works to a large extent!! Even prints out "XX DEFINED" after END;
prgrams will almost print-out for PO, but don't run yet. Still crash after
a few lines of input, too - but POTS etc. is recognized in edit mode.
Now we need to put in the LINES command, or whatever it's named. So fix
up EDLINE, PUTLINE, S_END, etc., Pat. Hain over.

SLH@MIT-AI 05/06/80 20:10:19
To: APLOGO at MIT-AI
LONG LIVE THE BUG, THE BUG IS DEAD!!

I found the bug: Patrick, in GW1 you mixed up the if-then-else
clauses where the Freelist is changed - this gave a screwed value
of the Freelist and allowed Read-line to cons up the POTS pname
where the Oblist was pointing to (this is the most likely explanation,
probably the only one). Will assemble and retry program now........

efh@MIT-AI (Sent by PGS@MIT-AI) 05/05/80 18:39:59
To: APLOGO at MIT-AI
I wrote a recursive loop in APLOGO.  It worked.

PGS@MIT-AI 05/05/80 15:04:22
To: APLOGO at MIT-AI
pread_line is what seems to be screwing up when edsw is set.

PGS@MIT-AI 05/05/80 13:42:05
To: APLOGO at MIT-AI

When TO is done, the ">" prompt comes up. If one types one CR, it
comes up again; but the third CR I type causes the following:

>
LINE NUMBER TOO BIG
OUT OF STORAGE
>

Furthermore, continuing to type CR's causes that message to be typed
out twice more, and then there's a crash in the garbage collector
(standard place).

Any input on a line except for line numbers results in a crash inside
get_pname.

PGS@MIT-AI (Sent by LUCIA@MIT-AI) 05/05/80 09:51:59
To: APLOGO at MIT-AI
Well, it sort of works. After two lines, it claims that the 
line number is too big and that it's out of storage. Looking
for it.

PGS@MIT-AI 05/05/80 08:49:51
To: APLOGO at MIT-AI
I've fixed (?) PTFTXT; the problem was in GETWDS, which was pretty
totally stranged out. Hopefully this should help all sorts of things
(like END) to work. I'll be testing that in a little while. It should
also help TO to work, or at least crash in a more interesting way.


SLH@MIT-AI 05/05/80 01:58:04
To: APLOGO at MIT-AI
PO NAMES now prints out the values correctly; ATOM_TO_FIXNUM now works
like a dream; I think I'm getting good at this. Later, Hain.

SLH@MIT-AI 05/04/80 21:58:57
To: APLOGO at MIT-AI
PO now works, including PO NAMES (except perhaps for the actual values of the
names, PO knows what it's doing (?)). ERASE ALL now works.

SLH@MIT-AI 05/04/80 21:49:58
To: APLOGO at MIT-AI
It works!!!Prefix, infix, unary, we got 'em all. Stopkey now works too.
POKE and PEEK work, now they store/retrieve one byte instead of two.
Yippee!

SLH@MIT-AI 05/04/80 20:56:01
To: APLOGO at MIT-AI
Changed a few things about APLOGO: First, infix entries in the
primitive table have separate system indexes (INSUM, INDIF, INLESS, etc.)
but they still index to the same system routines. INFIXP now looks for
them only, and picks out INSUM and INDIF as unaries at the right place.
Actually I've saved space, removing the SUM, DIF, PROD primitive pointers
and changing any "IS" constants/variables to the proper "EQUAL" ones.
It should work now.

SLH@MIT-AI 05/04/80 19:12:16
To: APLOGO at MIT-AI
The reason that SUM, DIFFERENCE, GREATER, LESS, etc. are considered
infix is that the PLOGO code is wrong; instead of checking the S_index
we should check the function-pointer or some such. I'll see what this
entails, it should mean a few more page-zero slots but nothing really
devastating. Haven't found ot why unary plus and minus don't work, but
I'm working on it.

SLH@MIT-AI 05/02/80 20:26:28
To: APLOGO at MIT-AI
Well, it's working now. Funny bug: PO NAMES prints out all the primitives along
with any names it's got. If you do ER NAMES, it never prints out the primitives
again (although everything still works). Shouldn't be too hard to find. PEEK and
POKE work perfetcly; arbitrary arithmetic strings also work but unary sum and
difference don't. Oh, well, it's coming along now!

SLH@MIT-AI 05/02/80 19:55:58
To: APLOGO at MIT-AI
Me again - found the bug - hop it works now - over.

SLH@MIT-AI 05/02/80 19:32:27
To: APLOGO at MIT-AI
I just added PEEK and POKE to APLOGO. After fixing quite a few apparent bugs
in the evaluator and several utility routines (all of which were actually bugs,
double-checked) the system now loses horribly. I really think that some bugs
were not apparent because of the prescence of others, which are now removed
(really!). So I'll have to get the basic system working again before I can see
if my improvements have worked (I think I fixed PO, PO NAMES,TITLES, etc.) and
whether PEEK and POKE work. Oh well.

SLH@MIT-AI 05/01/80 23:06:46
To: APLOGO at MIT-AI
A very insidious bug!!!When ATOMIZE calls INTERN, INTERN bashes the temporary
which was FUNNY_PNAME. Because of this, PUT_STRANGE_PNAME gets called, and it
sets the "funny pname bit", which causes the entry which says that "<" stands
for "Less than" to become "<" stands for "Comment"!! This bug took two hours
and about twenty five breakpoints to find. Anyway, now a great many totally
inexplicable things won't happen (hopefully). I would now say that temporary
declaration blocks are completely warranted, as I could have found this bug
rather quickly if they were. Next time I really analyze a routine, I'll make
such a change (to that routine, anyway - the declarations can be done incrementally).
Whew!

SLH@MIT-AI 05/01/80 22:07:36
To: APLOGO at MIT-AI
I fixed a few more bugs, and now rudimentary arithmetic such as "2+2"
or even "2+(2+(2+2)))" works. For some weird reason, > works but < doesn't.
I think it might be the character input routine or something. NOT works now.
For some reason, "2+2+2" etc. doesn't work, I'll delve into that bug now.

SLH@MIT-AI 05/01/80 20:32:28
To: APLOGO at MIT-AI
Just fixed numerous bugs in Evaluator, Error, random utility routines. Took out
LESCPE because it's never called by anything, so there's a little more space
now. A few routines which returned with A=0 or 1 as a flag now either set or
clear the carry bit instead. Also fixed a lot of Branches which still weren't
testing the right condition. Don't guarantee that anyhting new will work though.
Hain over.

pgs@MIT-AI (Sent by ___003@MIT-AI) 05/01/80 05:18:02
To: APLOGO at MIT-AI
I've localized the bug in TO: it's in PTFTXT (put_ftext). Going for it.

SLH@MIT-AI 05/01/80 00:04:20
To: APLOGO at MIT-AI
I just did a cross-ref on APLOGO, and it's absolutely useless!
All the referneces refer to source line numbers, and there are
zillions of them for each symbol. It's much easier (although not
easy in general) to catalogue temporary usage by scanning the
code visually and plucking them out. It would be much much easier
to do if the temps were declared in blocks before each routine
or routine group (eventually, all the routines will be in a nice
order, with miscellaneous-type subroutines in alphabetical order,
etc. I've moved a few around already so that on-line execution flow
tracing is made a lot easier, since most major subroutines are
right after the routines that call them).

SLH@MIT-AI 04/30/80 23:16:07
To: APLOGO at MIT-AI
A cross-ref will aid in spotting any conflicts, even though I have a table of
temporary usage which is pretty much up-to-date. The problem is the trouble
needed to fix the conflicts, and to actually spot "conflicts" as opposed to
routines which use the same temporaries but don't destructively do so. The use
of actual local names makes the code infinitley easier to understand, also;
a very large number of bugs are mistaken identities or switching TEMPNn with
TEMPNm or ANSNx with ANSNy, but if we use local names like BODY, ATOMM, etc.,
these errors will be much less of a problem, and easier to spot. Of course,
mainly we're still working on finding execution bugs and fixing them.

SLH@MIT-AI 04/30/80 23:01:47
To: APLOGO at MIT-AI
I changed the STOP and PAUSE user interrupts to the polled method as in PLOGO,
and now the RESET key just breaks to the monitor. I also fixed a bunch of bugs
in Atom_to_fixnum, and some of the PO routines (PO NAMES, PO FUNCTIONS).

Hal: The branches I wanted to change to ".+n" are only the ones where a sixteen-bit
add is being done, and they're all the same: Add low bytes, skip if no carry, else
increment high byte. Similarly for subtracts. So only "Branch .+2"'s would be inserted,
with little risk of future modifications introducing bugs. The other idea, of
renaming all the local variables, would justifiably make things a hell of a lot
easier to debug, since a major problem now is finding conflicts; when one is found,
it is oftne necessary to change hundreds of lines of source code to new temporary
names. Anyway, if Patrick or myself works on a specific routine or set of routines,
it would be a small task to just change all the temporary names to local names,
and put a little declaration block before the routine(s) equating them to temporaries.

HAL@MIT-MC 04/28/80 19:20:47 Re:  mods to aplogo source
To: aplogo at MIT-AI


i agree you should keep those things in mind, but don't do any of
them until the code is debugged.  i haven't looked at the listing,
but eliminating labels in favor of br .+/-  is probably a BAD idea
since the most common mistake in the world is to add or delete an
instruction and then forget to change the branch.


SLH@MIT-AI 04/28/80 15:49:57
To: APLOGO at MIT-AI
I have a suggestion for improving the code for APLOGO; it should make it
look nicer and be easier to understand and debug, but I wonder if it's
worth it:
1. Replace all the TEMP,TEMPN,TEMPX variables with their corresponding names
from PLOGO. To avoid the obvious conflicts due to the globalness of all
the variables, each routine and subroutine would be preceded by a block
which redefines the addresses of all the variables (which appear as local or
formal parameters in PLOGO) to non-conflicting temporaries. This would require
some time to do (but no real effort, since I have already made a table of
temporary usage and conflict-resolves in APLDOC), but it can be done when
the program is fully documented.
2. Move all the subroutines around so that they are in some reasonable order.
Right now it is a pain to have to look up the address of a routine in the
symbol table, or flip back-and-forth through a listing.
3. A lot of labels are very local, that is, they could be eliminated and a
"Branch .+/-n" put in for accessing them. This would reduce the size of the
syumbol table (a lot), and would make the code a bit more understandable in
many places.

Also:

It appears that if we change all the CARs, CDRSs, GET/PUTBARs, GETTOKs, etc.
from macros to subroutines, we would save a hell of a lot of space and only
increase execution time a little. We should be able to leave certain macros
as they are, if they are in bottlenecks or crucial-speed locations. I will
calculate the time increase per conversion, the estimated overall time increase
for certain routines, and the overall space savings.
There are also a lot of chunks in different places which are remarkably alike
(when I wrote them I remembered writing code very similar beforehand). I'll try
and locate some and indicate them in the source code, so that they can be changed
into subroutines later. There are also quite a few subroutines which are only called
once by one chunk of code, so they could be incorporated directly in-line. This
has already been done in a few places, and I've usually indicated it.

We don't have to do any of these things right now, but we should keep them in
mind for when the program really starts working.

SLH@MIT-AI 04/28/80 15:09:44
To: APLOGO at MIT-AI
I think the PR command isn't using the nodes up. TYPE gives the same results, but
  ?PR .NODES PR :A PR .NODES
gives
  20
  "B
  12
(more or less).
This would seem to indicate that the Parser is eating up nodes, since the first
.NODES gives sucha small number. Supposedly, the only way to eat up nodes is to do
a CONS, so we should look for a CONS which might be getting called a lot (in a loop,
say) or any other code which touches FRLIST. I don't remember seeing any ultr-long
chains in nodespace after running the parser, so it probably is an instance of
incorrectly changing FRLIST to near the end of the freelist.

pgs@MIT-AI (Sent by JACOBS@MIT-AI) 04/27/80 23:11:13
To: APLOGO at MIT-AI
Strange bug does this:

	WELCOME TO LOGO!
	?PR .NODES
	
	2629
	?MAKE "A "B
	
	?PR .NODES
	
	2609
	?PR :A
	
	B
	?PR .NODES
	
	21
	?

This is sort of sad. It is only the first PR that causes it,
furthermore. And nothing else seems to. The  branching errors have
been fixed.

PGS@MIT-AI 04/27/80 23:10:11
To: APLOGO at MIT-AI
Corrections to previous message (bugs list):
BF,BUTFIRST and BL,BUTLAST don't crash anymore (they're not implemented)
MO,MOVE is a display command, not implemented, null effect
CS,CLEARSCREEN ditto
PO crashes, and all options crash

PGS@MIT-AI 04/27/80 23:01:16
To: APLOGO at MIT-AI
An exhaustive primitive test revealed the following bugs:

BF,BUTFIRST crashes
BL,BUTLAST crashes
The error "... was returned instead of TRUE or FALSE" signals an error on the
  second argument first, reading from left to right.
DE,DEBUG crashes
(Possibly, some primitives noted here to crash might actually just be signalling
  an error, and ERROR is crashing, as sometimes an error message is visible just
  before the screen is cleared by SYSBUG.)
DIFFERENCE, SUM crash
ED,EDIT crashes with any legal name
ERROR prints "Doesn't like [] as argument", even when the argument isn't []
ELSE crashes
EQUAL doesn't work (always returns FALSE)
ER,ERASE gives error code "Don't say what to do with []"
FPUT crashes
GO crashes (doesn't check to see if it's at toplevel?)
GREATER,LESS,PRODUCT,QUOTIENT think they're infix, crash when used as such
IS crashes
L,LAST doesn't work
MO ...? (Should do a VPOP?)
NOT doesn't work
OP,OUTPUT doesn't work (doesn't check for toplevel?)
POTS doesn't work
REQUEST doesn't work
RUN crashes with quoted input
STOP doesn't check for toplevel (?), gives strange error message
TEXT doesn't work, crashes
Multiple THING's (3 or more) crashes
THINGP doesn't work with FIXNUMs (?)
WRITE crashes
() gives "Unexpected )" error
= crashes (doesn't know it's infix?)


PGS@MIT-AI 04/23/80 23:18:41
To: APLOGO at MIT-AI

BUGS:
Garbage Collector crashes
Procedure definitions
Infix operators
Random concatenation errors
	Very large SENTENCE lists
BUTFIRST (SBTFST) primitive
BUTLAST (SBTLST) primitive
LAST (SLAST) primitive

PGS@MIT-AI 04/23/80 23:16:44
To: APLOGO at MIT-AI
Seems to think product and quotient are infix.

PGS@MIT-AI 04/23/80 23:10:54
To: APLOGO at MIT-AI
I found and corrected the bugs in EDLINE, so that TO seems to almost
work -- it accepts multiple input lines and such. However, it's
difficult to tell, as END does not work.

PGS@MIT-AI 04/22/80 16:26:56
To: APLOGO at MIT-AI
I have created a mailing list on AI, APLOGO, through which
we should communicate in the future about Apple Logo. It
archives the mail on AI: MJS; APLOGO BUGS.


