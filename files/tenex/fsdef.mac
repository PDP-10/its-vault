	TITLE FILE SYSTEM
	SUBTTL	R.S.TOMLINSON 22 SPET 71  2320:

; Define a relocatable zero

..ZERO__.

DEFINE	BEGINP(SYM)<
	BEGIN	SYM
GLOBAL BUGN
BBUGN__BUGN
PRINTX /SYM
/
>

DEFINE	BENDP(SYM)<
..ORAD__10
RADIX =10
FOR @' I_BBUGN+1,BUGN
<
IFAVL BUG'I,<^BUG'I__BUG'I>
>
RADIX ..ORAD
BEND	SYM
>

DEFINE %<PRINTX FOOBAR>

SET	SWAPPC,SWPMP0*1000

OPDEF	XCTUU	[XCT 7,0]
OPDEF	XCTMU	[XCT 1,0]
OPDEF	XCTUM	[XCT 6,0]
DEFINE	OKINT	<XCT INTDFF>
DEFINE	NOINT	<AOS INTDF>
DEFINE	RSTINT	<SETZM INTDF
	OKINT>
DEFINE	LOCK(LCK,FAIL)<
	AOSE LCK
	IFIDN <FAIL>,<>,<JSYS BLOCK1>
	IFDIF <FAIL>,<>,<FAIL>>
DEFINE	UNLOCK(LCK)<SETOM LCK>
DEFINE	SKIPRT<AOS (P)>

NJFN__15
NFDIB__20

; The following macro is used to define flag bits
; In conjunction with the test macro, it provides for automatic
; Insertion of the ac holding the flag, and trxx or tlxx to reference
; The proper halfword

DEFINE	FLG'(FL,LR,REG,BIT)<FL'%__<T'LR'N REG,BIT>
IFL BIT-20,<FL__BIT>
IFGE BIT-20,<FL_BIT>>

DEFINE	TEST'(COND,FL1,FL2)<IFIDN <FL2>,<>,<<TR'COND>!FL1'%>
IFDIF <FL2>,<>,<<TR'COND>!FL1'%!FL2'%
IFN <FL1'%>&777777000000-<FL2'%>&777777000000,<
PRINTX	<ASCIZ /FL1 & FL2 ARE IN DIFFERENT HALF WORDS/>>>>

DEFINE	JS(VAR,SIZE)<
	IFIDN <SIZE>,<>,<ASSIGN VAR,JSBLOC>
	IFDIF <SIZE>,<>,<ASSIGN VAR,JSBLOC,SIZE>>

DEFINE	LS(VAR,SIZE)<
	IFIDN <SIZE>,<>,<ASSIGN VAR,RESVLC>
	IFDIF <SIZE>,<>,<ASSIGN VAR,RESVLC,SIZE>>

DEFINE	PS(VAR,SIZE)<
	IFIDN <SIZE>,<>,<ASSIGN VAR,TSBLOC>
	IFDIF <SIZE>,<>,<ASSIGN VAR,TSBLOC,SIZE>>

DEFINE	NR(VAR,SIZE)<
	IFIDN <SIZE>,<>,<ASSIGN VAR,NRESLC>
	IFDIF <SIZE>,<>,<ASSIGN VAR,NRESLC,SIZE>>

DEFINE	NRP(VAR,SIZE)<
	IFIDN <SIZE>,<>,<ASSIGN VAR,NRPLOC>
	IFDIF <SIZE>,<>,<ASSIGN VAR,NRPLOC,SIZE>>

DEFINE	BUG(TYP,STR)
<BUGN__BUGN+1
..ORAD__10
RADIX =10
BUGGER(TYP,<STR>,\BUGN)
RADIX ..ORAD
>

DEFINE	BUGGER'(TYP,STR,N)
<^BUG'N:	JSR BUG'TYP
BUGREM(<XWD BUG'N,[ASCIZ \STR\]
>)
>
DEFINE	BUGREM(C)<BUGCON(<GDEFINE BUGCON"(..A..,..B..)><..A..",<C>"..B..>)>
GDEFINE	BUGCON"(..A..,..B..)<..A.."..B..>

BUGN__0

; Accumulators

?STS_0		; Lh - file status, rh miscellaneous flags
?A_1		; General temporary
?B_2		; General temporary
?C_3		; General temporary
?D_4		; Genearl temporary
?E_7		; Pointer to user parameter block
?F_10		; Flags
?JFN_11		; Job file number
?NUM_12		; Used around gtjfn loop to accumulate numbers
?DEV_13		; Lh device bits, rh device dispatch table
?F1_14		; More flags for gtjfn and lookup routines
NSAC__F1+1	; Number of acs to save when calling other routines
?P_17

; Variables in jsb associated with files

JS(FILBYT,NJFN)		; Byte pointers to current window
JS(FILBYN,NJFN)		; Byte number of current byte
JS(FILLEN,NJFN)		; Total length of file in bytes
JS(FILCNT,NJFN)		; Bytes remaining in current buffer
JS(FILLCK,NJFN)		; File lock word
JS(FILWND,NJFN)		; Lh ==> current page number
			; Rh ==> location of current window
JS(FILSTS,NJFN)		; Lh ==> file status bits
			; Rh ==> device dependent dispatch address
JS(FILDEV,NJFN)		; Device dependent  information
JS(FILOFN,NJFN)		; Lh ==> ofn for this file
			; Rh ==> ofn of long file pt table
JS(FILLFW,NJFN)		; Lh ==> current page table number
			; Rh ==> location of page table table
JS(FILDDN,NJFN)		; Lh ==> pointer to device string block
			; Rh ==> directory number
JS(FILNEN,NJFN)		; Lh ==> pointer to file name string block
			; Rh ==> pointer to extension string block
JS(FILVER,NJFN)		; Lh ==> fork number of originator of this jfn
			; Rh ==> version number

; The following variables overlay the space in the above definitions
; This is possible since they are used only during gtjfn

ASSIGN	FILTMP,FILBYT,0	; Lh ==>0 ptr to temp string block for default
			; Rh ==>0 point to temp string block
ASSIGN	FILPRT,FILBYN,0	; Pointer to protection string or protection #
ASSIGN	FILACT,FILLEN,0	; Pointer to account string or account number
ASSIGN	FILOPT,FILWND,0	; Byte pointer to store string in gtjfn

JS(JFNLCK)		; Lock to prevent tampering with jfn's
JS(JOBDNO)		; Cell to hold current directory number
JS(JBCOR,4)		; Page allocation bit table
JS(JSBFRE,7)		; Job area free storage header
JS(JSFREE,200)		; Free storage area in job block

; Variables in psb associated with files

PS(CAPMSK)
PS(CAPENB)
PS(PSBFRE,6)
PS(PSFREE,10)
PS(ITMHD,4)
PS(PRIMRY)		; Primary io indirection pointers
PS(LSTERR)		; Last error number
PS(ERRSAV,10)		; Block of error parameters

; Resident storage for file system

LS(DIOFN)		; Ofn for directory index file
LS(FDOFN,NFDIB)		; Table of ofns for fd
LS(FDLOFN)		; Long file ofn for fd

; Externals

EXTERN	MSTKOV		; Where to go when stack overflows
EXTERN	ASOFN		; Assign ofn for disc address
EXTERN	BLOCK1		; Block until previous inst skips
EXTERN	BUGCHK		; Bug check
EXTERN	FPC		; Return pc for fast jsys's
EXTERN	BUGHLT		; Bug halt routine
EXTERN	DSKASN		; Assign a disk page
EXTERN	DISGE		; Call schedular to dismiss until a word is +
EXTERN	DISL		; Call schedular to dismiss until a word is -
EXTERN	ERRSAV		; Block of words for saving error parameters
EXTERN	FORKN		; Rh has this fork number
EXTERN	INTDF		; Cell to aos to disable psi
EXTERN	INTDFF		; Cell to execute to reenable psi
EXTERN	ITRAP		; Cause instruction trap
EXTERN	JOBNO		; Job number of currrent job
EXTERN	JOBPT		; Lh has controlling tty (indexed by job)
EXTERN	MENTR		; Routine to set up slow jsys
EXTERN	MRETN		; Routine to return from slow jsys
EXTERN	MRPACS		; Routine to read page access
EXTERN	MRMAP		; Read monitor map
EXTERN	PJMA		; Origin of job mapped area
EXTERN	PPMA		; Origin of process mapped area
EXTERN	PSIRQ0		; Initiates a psi in this process
EXTERN	PSIBIP		; Word is non-zero if any breaks are in progress
EXTERN	RELOFN		; Release ofn routine
EXTERN	SETMPG		; Map page subroutine
EXTERN	TTFORK		; Lh has job of tty assignment
EXTERN	TCI		; Tty type character in routine
EXTERN	TCO		; Tty type character out routine

; Bit definitions in sts (also filsts)

FLG(OPENF,L,STS,400000)	; File is open
FLG(READF,L,STS,200000)	; File is ok to read
FLG(WRTF,L,STS,100000)	; File is ok to write
FLG(XCTF,L,STS,040000)	; File is ok to execute
FLG(RNDF,L,STS,020000)	; File is ok to reset pointer (i.e. not append)
FLG(ASPF,L,STS,010000)	; File is ok to access as specified in p.t.
FLG(CALLF,L,STS,004000)	; File is ok to call as a procedure
FLG(LONGF,L,STS,002000)	; File is a long file
FLG(EOFF,L,STS,001000)	; End of file if read attempted
FLG(ERRF,L,STS,000400)	; Bytes read may be erroneous
FLG(NAMEF,L,STS,000200)	; Name is associated with this jfn
FLG(ASTF,L,STS,000100)	; A * was typed in
FLG(ASGF,L,STS,000040)	; Jfn is being assigned
FLG(HLTF,L,STS,000020)	; Halt if i-o error
FLG(WNDF,L,STS,000010)	; A window page has been set up
FLG(ENDF,L,STS,000004)	; File is past end of maximum length
FLG(SIZF,L,STS,000002)	; Illegal to change size of byte
FLG(FRKF,L,STS,000001)	; File is restricted to fork in lh(filver)

; Device dispatch indices

SET TPC,0
USE TPC

?DLUKD_:BLOCK 1		; Directory setup routine
?NLUKD_:BLOCK 1		; Name lookup
?ELUKD_:BLOCK 1		; Extension lookup
?VLUKD_:BLOCK 1		; Version lookup
?PLUKD_:BLOCK 1		; Protection insertion
?ALUKD_:BLOCK 1		; Account insertion
?SLUKD_:BLOCK 1		; Status insertion (temporary permanent etc)
?OPEND_:BLOCK 1		; Open file
?BIND_:	BLOCK 1		; Byte input
?BOUTD_:BLOCK 1		; Byte output
?CLOSD_:BLOCK 1		; Close file
?REND_:	BLOCK 1		; Rename
?DELD_:	BLOCK 1		; Delete file
?DMPID_:BLOCK 1		; Dump mode input
?DMPOD_:BLOCK 1		; Dump mode output
?MNTD_:	BLOCK 1		; Mount device
?DSMD_:	BLOCK 1		; Dismount device
?INDD_:	BLOCK 1		; Initialize directory of device
?MTPD_:	BLOCK 1		; Do mtape operation
?GDSTD_:BLOCK 1		; Get device status
?SDSTD_:BLOCK 1		; Set device status

USE

; Byte pointers to various fields of interest

PBYTPO:	POINT 6,FILBYT(JFN),5	; Points to "p" of file byte pointer
PBYTSZ:	POINT 6,FILBYT(JFN),11	; Points to "s" of file byte pointer

; Save ac's before monitor call

SAVAC:	ADD P,[XWD NSAC-1,NSAC-1]	; Make room for nsac ac's
	JUMPGE P,MSTKOV
	PUSH P,-<NSAC-1>(P)		; Move return to end
	MOVEM NSAC-1,-1(P)		; Save last ac
	MOVEI NSAC-1,-NSAC(P)		; Make blt pointer
	BLT NSAC-1,-2(P)		; Blt onto stack
	POPJ P,

RESAC:	MOVSI NSAC-1,-NSAC(P)		; Blt from stack to 0
	BLT NSAC-1,NSAC-1
	POP P,-NSAC(P)			; Move return to new top
	SUB P,[XWD NSAC-1,NSAC-1]	; Flush the room on the stack
	POPJ P,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 