IFDEF NDP,<
	BEGINP	DISPLAY		R.S.TOMLINSON	23 SEPTEMBER 1971	1621:

; Entries to this part

INTERN	DSPSV,DSPSKV,DSPINI,DSPRST,DSPKFK
INTERN	.ASNDP,.RELDP,.ASNDC,.RELDC,.STRDP,.STPDP,.STSDP,.RDSDP,.WATDP
FOR @' Q_0,7
<INTERN	.LDS'Q
>

USE

; New definition of instructions for the escc display system
; For 101129-101 type channel controls including all devices.  
; 23 september 1970  cls & gwh

DEFINE	DPRGS<
; The display processor registers :

RAR_0
WAR_1
PC_2
SP_3
P1_4
P2_5
DSP_6
UR_7
RCR_10
WCR_11
DIR_12
RSR_13
SR_14
NEXT_17
>

DEFINE	XDPRGS<
SUPPRESS RAR,WAR,PC,SP,P1,P2,DSP,UR,RCR,WCR,DIR,RSR,SR,NEXT
>

DEFINE	DPMDS<
; The next-mode's :

XQTM_10
RPTM_4
PEELM_2
PROGM_1
>

DEFINE	DPCND<
; Conditions which may be checked :

PF0_0		; Program flag #0
PF1_1		; Program flag #1
PF2_2		; Program flag #2
PF3_3		; Program flag #3
RCRN_10		; Rcr less than -1
WCRN_11		; Wcr less than -1
HITF_12		; Hit flag
AICF_13		; Area in common flag
STOPF_17	; Stop flag
>

DEFINE	XDPCND<
SUPPRESS PF0,PF1,PF2,PF3,RCRN,WCRN,HITF,AICF,STOPF
>

DEFINE	CDRGS<
; The clipper-divider registers :

SAVELB_0	; Two components
SAVERT_1	; Two components
VIEWLB_2	; Two components
VIEWRT_3	; Two components
WINDLB_4	; Two components
WINDRT_5	; Two components
INSTLB_6	; Two components
INSTRT_7	; Two components
NAME_10		; Two components
CDIR_11		; Two components
HITANG_12	; Two components
SELINT_13	; Two components

SAVE_14		; Four components
VIEW_15		; Four components
WIND_16		; Four components
INST_17		; Four components
>

DEFINE	XCDRGS<
SUPPRESS SAVELB,SAVERT,VIEWLB,VIEWRT,WINDLB,WINDRT,INSTLB,INSTRT
SUPPRESS NAME,CDIR,HITANG,SELINT,SAVE,VIEW,WIND,INST
>

DEFINE	CBRGS<
; Character bubble registers

FONT_17
CHAR_0
>

DEFINE	XCBRGS<
SUPPRESS FONT,CHAR
>

DEFINE	SBRGS<
; Sbkl registers

LITS_16
SWCH_14
>

DEFINE	XSBRGS<
SUPPRESS LITS,SWCH
>

DEFINE	DPOPS0<
; Group 0 - load immediate instructions

OPDEF	LI	[000000000000]	; Load immediate
OPDEF	LIPSH	[040000000000]	; Load imm. psh-old-value
OPDEF	LIPSHM	[060000000000]	; Load imm. psh-old-value marked
OPDEF	PSH	[LIPSH @0]	; Psh-old-value, without load
OPDEF	PSHM	[LIPSHM @0]	; Psh-old-value marked, without loading
OPDEF	NOP	[LI @0]
OPDEF	JMP	[LI PC,0]	; Note: jmp for display, jump for 10
OPDEF	JMPPSH	[LIPSHM PC,0]	; A marked [jmp 0] is saved in stack
OPDEF	NWSTK	[LIPSH SP,0]	; Unmarked [li sp,0] is saved in stack
OPDEF	NWSTKM	[LIPSHM SP,0]	; A marked [li sp,0] is saved in stack
OPDEF	XQTA	[LI RAR,(XQTM)]	; Xqt the instruction in e
OPDEF	XQT	[NOP (XQTM)]	; Entqr sqt mode
OPDEF	RPT	[NOP (RPTM)]	; Enter rpt mode
OPDEF	PEEL	[NOP (PEELM)]	; Enter peel mode
OPDEF	PROG	[NOP (PROGM)]	; Enter prog mode
>

DEFINE	DPOPS2<
; Group 2 - conditional load immediate

OPDEF	LIF	[200000000000]	; Li if condition holds
OPDEF	LIFCL	[210000000000]	; Lif and clear
OPDEF	LIFST	[220000000000]	; Lif and set
OPDEF	LIFCM	[230000000000]	; Lif and complement

OPDEF	LAL	[240000000000]	; Li always, lal is slower than li
OPDEF	LALCL	[250000000000]	; Lal and clear
OPDEF	LALST	[260000000000]	; Lal and set
OPDEF	LALCM	[270000000000]	; Lal and complement

OPDEF	JIF	[LIF PC,]	; Jmp if condition holds
OPDEF	JIFCL	[LIFCL PC,]	; Jif and clear
OPDEF	JIFST	[LIFST PC,]	; Jif and set
OPDEF	JIFCM	[LIFCM PC,]	; Jif and complement

OPDEF	JAL	[LAL PC,]	; Jmp always, jal is slower than jmp
OPDEF	JALCL	[LALCL PC,]	; Jal and clear
OPDEF	JALST	[LALST PC,]	; Jal and set
OPDEF	JALCM	[LALCM PC,]	; Jal and complement

OPDEF	JIFDED	[JIF (STOPF)]	; Jmp if stopped
OPDEF	IJNRCR	[JIFST (RCRN)]	; Increment rcr, jmp if negative
OPDEF	IJNWCR	[JIFST (WCRN)]	; Increment wcr, jmp if negative
OPDEF	IJPRCR	[IJNRCR @0]	; Increment rcr, jmp if positive
OPDEF	IJPWCR	[IJNWCR @0]	; Increment wcr, jmp if positive
OPDEF	CL	[LALCL @0]	; Clear condition
OPDEF	ST	[LALST @0]	; Set condition
OPDEF	CM	[LALCM @0]	; Complement condition
OPDEF	STOP	[ST (STOPF)]
>

; Group 3 - external register transmission

DEFINE	CDOPS<
; Clipper--dev 00xx--

OPDEF	LOCLA	[300000000000]	; Load clipper absolute
OPDEF	LOCLR	[301000000000]	; Load clipper relative
OPDEF	LOCLSA	[302000000000]	; Load clipper size absolute
OPDEF	LOCLSR	[303000000000]	; Load clipper size relative
OPDEF	STCL	[320000000000]	; Store clipper absolute
OPDEF	RTCLA	[340020000000]	; Retreive clipper absolute
OPDEF	RTCLR	[341020000000]	; Retreive clipper relative
OPDEF	RTCLSA	[342020000000]	; Retreive clipper size absolute
OPDEF	RTCLSR	[343020000000]	; Retreive clipper size relative
OPDEF	SKCL	[360020000000]	; Sink clipper absolute
>

DEFINE	MMOPS<
; Matrix multiplier -- device 01xx --

OPDEF	LOMM	[304000000000]
OPDEF	LOMMR	[305000000000]
OPDEF	LOMMP	[306000000000]
OPDEF	LOMDIR	[307000000000]
OPDEF	STMM	[324000000000]
OPDEF	NOMM	[325020000000]
OPDEF	POPMM	[326020000000]
OPDEF	STMDIR	[327000000000]
OPDEF	RTMM	[344020000000]
OPDEF	RTMMS	[345020000000]
OPDEF	RTMDIR	[347020000000]
OPDEF	SKMM	[364020000000]
OPDEF	SKMMS	[365020000000]
OPDEF	PUSHMM	[366020000000]
OPDEF	SKMDIR	[367020000000]
>

DEFINE	CBOPS<
; Character bubble -- device 1101 --

OPDEF	LOCB	[315000000000]
OPDEF	STCB	[335000000000]
OPDEF	RTCB	[355020000000]
OPDEF	SKCB	[375020000000]
>

DEFINE	SBOPS<
; Sbkl -- device 1111 --

OPDEF	LOSBKL	[317000000000]
OPDEF	STSBKL	[337000000000]
OPDEF	RTSBKL	[357020000000]
OPDEF	SKSBKL	[377020000000]
OPDEF	LOLITS	[LOSBKL LITS,0(1)]
OPDEF	STSWCH	[STSBKL SWCH,0(1)]
>

DEFINE	DIOPS<
; Group 4-7 - display instructions

DD_400000000000	; Do direct
DI_500000000000	; Do indirect
DN_600000000000	; Do internal

; The what-to-do machine :

LNS_060000000000	; Lines_(set-drawto)**
LT_070000000000		; ?????_(drawto-set)**
PO_030000000000		; Polyg_set-(drawto)**
TO_020000000000		; To_(drawto)**
SS_040000000000		; Star_set-(drawfrom)**
FR_050000000000		; From_(drawfrom)**
DT_010000000000		; Dots_(dot)**
BX_000000000000		; Boxes_(box)**

; The abs/rel-modes machine :

RX_007000000000		; (rel-abs)**
AX_006000000000		; (abs-rel)**
RA_003000000000		; Rel-(abs)**
AB_002000000000		; (abs)**
AR_004000000000		; Abs-(rel)**
RE_005000000000		; (rel)**
SL_001000000000		; (size rel)**
SA_000000000000		; (size abs)**

OPDEF	SETPTA	[DD+LNS+AB]	; Set-point-absolute
OPDEF	SETPTR	[DD+LNS+RE]	; Set-point-relative
OPDEF	DRAWTA	[DD+TO+AB]	; Draw-to-absolute
OPDEF	DRAWTR	[DD+TO+RE]	; Draw-to-relative
OPDEF	DRAWFA	[DD+FR+AB]	; Draw-from-absolute
OPDEF	DRAWFR	[DD+FR+RE]	; Draw-from-relative
OPDEF	LINAA	[DD+LNS+AB]	; Line-(absolute-absolute)
OPDEF	LINAR	[DD+LNS+AX]	; Line-(absolute-relative)
OPDEF	LINRA	[DD+LNS+RX]	; Line-(relative-absolute)
OPDEF	LINRR	[DD+LNS+RE]	; Line-(relative-relative)
OPDEF	LINIAA	[DI+LNS+AB]	; Line-indirect-(absolute-absolute)
OPDEF	LINIAR	[DI+LNS+AX]	; Line-indirect-(absolute-relative)
OPDEF	LINIRA	[DI+LNS+RX]	; Line-indirect-(relative-absolute)
OPDEF	LINIRR	[DI+LNS+RE]	; Line-indirect-(relative-relative)
OPDEF	POLAA	[DD+PO+AB]	; Polygon-absolute's
OPDEF	POLAR	[DD+PO+AR]	; Polygon-absolute-relative's
OPDEF	POLRR	[DD+PO+RE]	; Polygon-relative's
OPDEF	POLRA	[DD+PO+RA]	; Polygon-relative-absolute's (???)
OPDEF	POLIAA	[DI+PO+AB]	; Polygon-indirect-(absolute's)
OPDEF	POLIAR	[DI+PO+AR]	; Polygon-indirect-(absolute-relative's)
OPDEF	POLIRR	[DI+PO+RE]	; Polygon-indirect-(relative's)
OPDEF	POLIRA	[DI+PO+RA]	; Polygon-indirect-(relative-absolute's)
OPDEF	STARAA	[DD+SS+AB]	; Star-absolute's
OPDEF	STARAR	[DD+SS+AR]	; Star-absolute-relative's
OPDEF	STARRR	[DD+SS+RE]	; Star-relative's
OPDEF	STARRA	[DD+SS+RA]	; Star-relative-absolute's(???)
OPDEF	DOTSAA	[DD+DT+AB]	; Dots-absolute's
OPDEF	DOTSAR	[DD+DT+AR]	; Dots-absolute-relative's
OPDEF	DOTSRR	[DD+DT+RE]	; Dots-relative's
OPDEF	DOTSRA	[DD+DT+RA]	; Dots-relative-absolute's(???)
OPDEF	BOXA	[DD+BX+AB]	; Box-absolute
OPDEF	BOXR	[DD+BX+RE]	; Box-relative
OPDEF	BOXSA	[DD+BX+SA]	; Box-size-absolute
OPDEF	BOXSR	[DD+BX+SL]	; Box-size-relative

OPDEF	DOCHAR	[700000000000]

SUPPRESS LNS,LT,PO,TO,SS,FR,DT,BX
SUPPRESS RX,AX,RA,AB,AR,RE,SL,SA
>

DPRGS
DPMDS
DPCND
CDRGS
DPOPS0
DPOPS2
CDOPS
DIOPS

; Externally defined things

EXTERN	MRETNE
EXTERN	DSPBIT		; Interrupt channel bit
EXTERN	MAXLOK,LOKPGS
EXTERN	DSPCHN		; Interrupt channel
EXTERN	DSPCHR		; Return from int
EXTERN	CORWB		; Modified bittin cst
EXTERN	CST0		; Coreestatus table
EXTERN	FKHPTN		; Converts fork handle to ptn
EXTERN	FPTA		; Convert monitor address to ptn.pn
EXTERN	FORKX		; System fork index
EXTERN	MLKPG		; Lock page
EXTERN	MULKCR		; Unlock real core page
EXTERN	EDISMS		; Dismiss
EXTERN	PSIRQ		; Routine to call to cause interrupt

; Display processor variables and parameters

DP_130			; Display device code
PI__4			; Pi device
DSPSTL__20		; Stack length
IOS_6
NINT__3			; Number of words for dispatching to psi chan
STPINT__0
HITINT__1
ITRINT__2
ERRINT__3
MEMINT__4
CNTINT__5		; Interrupt and continue
NTCKPF__=20		; Number of ticks per frame
STOP__400000
RUN__200000
FSTOP__100000
QSTOP__040000

; Table of dp info locations

DPLOC:	FOR @' Q_0,NDP-1
<	DPLCK'Q
>

; Define the format of a dp info block
; * indicates those data which can be set with stsdp

DEFINE	DPBLK'(Q)<
XXX(DPLCK'Q,1)		; Process lock word
XXX(DPJOB'Q,1)		; Lh: jobno of assigner, rh: forkn of starter
XXX(CTL'Q,1)		; Lh control bits, rh last interrupt number
XXX(MAPW'Q,1)		; * lh: - # of pages in map, rh: first page
XXX(ITR'Q,1)		; * iteration counter
XXX(DCMSK'Q,1)		; * mask of consoles for this dp
XXX(DPCNI'Q,1)		; * coni of last stop
XXX(INT'Q,3)		; * psi dispatch
XXX(DPR'Q,0)		;   beginning of display processor registers
XXX(DPWCR'Q,1)		; * write count register
XXX(DPRCR'Q,1)		; * read count register
XXX(DPUR'Q,1)		; * unused register
XXX(DPRAR'Q,1)		; * read address register
XXX(DPWAR'Q,1)		; * write address register
XXX(DPDSP'Q,1)		; * real data sink pointer
XXX(DPP1'Q,1)		; * p1 (used for flagging stops)
XXX(DPDIR'Q,1)		; * directive register
XXX(DPPC'Q,1)		; * program counter
XXX(DPRSR'Q,1)		; * repeat status register
XXX(DPSR'Q,1)		; * status register
XXX(DPSP'Q,1)		; * stack pointer
XXX(CDREG'Q,14)		; * clipper divider
XXX(MAP'Q,20)		; Page map for dp
>

; Define xxx to define indices into the info block

DEFINE	XXX(NAME,COUNT)<
NAME__QQ
QQ__QQ+COUNT
>

QQ__0
DPBLK()

NDPR__MAP-DPR

; Redefine xxx to allocate resident storage for each dp

DEFINE	XXX(NAME,COUNT)<
LS(NAME,COUNT)
>

FOR Q_0,NDP-1
<DPBLK(Q)
>

; Storage for lds-1 itself

LS(DSPACT)		; Dp currently being run (0 if none)
LS(DSPINF)		; Initialization and stopping flag
			;  0 if neither, +1 for stopping, -1 for start
LS(DSPINS)		; Holds a display instruction to be xqta'ed
LS(DSPIN2)		; Holds another instruction to be xqta'ed
LS(DSPSVR)		; Saved return for interrupt
LS(DSPRSK)		; Switch for calling display scheduler
LS(DCLCK)		; Lock on assigning consoles
LS(NRUNG)		; Number of durrently running dp's
LS(DSPCNT)		; Count of ticks left in this quantum
LS(DSPNTL)		; Number of ticks left in this frame
LS(DSPNPL)		; Number of process left for this frame
LS(AVDC)		; Mask of available consoles
LS(DSPSTK,DSPSTL)	; Stack for dsp interrupt
LS(DCJOB,NDC)		; Assigner of a dc
PS(LDSFRK)		; Has fork handle of elt's stuff
JS(JOBDC)		; Mask of consoles assigned to this job

; Initialize display processor routines
; Called during system initialization from filini
; Call:	PUSHJ P,DSPINI

USE

^DSPINI:MOVSI A,-NDP
DPINIL:	MOVE IOS,DPLOC(A)	; Set ios to storage for this dp
	SETOM DPJOB(IOS)	; No job assigned
	SETZM CTL(IOS)		; Clear all flags
	SETOM DPLCK(IOS)	; Unlock the dp
	AOBJN A,DPINIL		; Loop through all dp's
	MOVE A,[-1(=36-NDC)]	; Get mask of non-existant consoles
	SETCAM A,AVDC		; Store as available
	MOVSI A,-NDC		; For all dc's
	SETOM DCJOB(A)		; Clear assigned job
	AOBJN A,.-1
	SETZM DSPRSK
	SETZM DSPCNT
	SETZM DSPNTL
	SETZM DSPNPL
	SETOM DCLCK
	SETZM NRUNG
	SETZM DSPACT		; It is not active
	SETZM DSPINF		; Clear initialization flag
	POPJ P,

DSPRST:	MOVEI A,1
	MOVEM DSPCNT
	POPJ P,

; KILL FORK -- RELDP

DSPKFK:	MOVSI B,-NDP
DSPKF0:	MOVE A,DPLOC(B)
	HRRZ C,DPJOB(A)
	CAME C,FORKX
	 JRST DSPKF1
	HRRZ A,B
	RELDP
DSPKF1:	AOBJN B,DSPKF0
	POPJ P,

USE SWAPPC

; Assign display process jsys
; Call:	ASNDP
; Return
;	+1	; None a,available
;	+2	; Success, in 1, the process number assigned

^.ASNDP:JSYS MENTR		; Set up for slow code
	MOVSI B,-NDP		; Index through all dp's
ASNDLP:	MOVE IOS,DPLOC(B)	; Loop back for each dp til find one
	NOINT			; No interrupts until we set the lock
	AOSE DPLCK(IOS)
	 JRST [	OKINT		; Busy, must wait. ints on first
		HRLZI A,DPLCK(IOS)
		HRRI A,DISLT
		JSYS EDISMS
		JRST .-2]
	SKIPL DPJOB(IOS)	; Is this one assigned?
	 JRST ASNDP1		; Yes.
	HRLZ A,JOBNO		; No, get jobno
	HRR A,FORKN		; And forkn
	MOVEM A,DPJOB(IOS)	; Assign the dp
	UNLOCK DPLCK(IOS)	; Unlock
	XCTUU [HRRZM B,1]	; Return the dp number to the user
	JRST SKMRTN		; And skip

ASNDP1:	UNLOCK DPLCK(IOS)	; Unlock this dp
	OKINT
	AOBJN B,ASNDLP		; And try the next one
	JRST MRETN		; None left, fail return

; Release display process jsys
; Call:	1	; Display process number to be released (-1 for all)
;	RELDP
; Return
;	+1	; Always

^.RELDP:JSYS MENTR		; Become slow
	CAMN 1,[-1]		; Releasing all?
	 JRST RELADP		; Yes
	PUSHJ P,CHKDP		; Check validity
	 JRST MRETN		; Invalid, return
	PUSHJ P,STPDPX		; Stop dp if running
	SETOM DPJOB(IOS)	; Deassign the dp
	UNLOCK(DPLCK(IOS))
	JRST MRETN

RELADP:	MOVSI 1,-NDP		; Loop through all dp's
	RELDP			; And do reldp for each one
	AOBJN 1,.-1
	JRST MRETN

; Assign display consoles jsys
; Call:	1	; Mask of consoles jsys to assign
;	ASNDC
; Return
;	+1	; Not all available
;	+2	; Success

^.ASNDC:JSYS MENTR		; Become slow
	NOINT			; No ints while trying to lock
	AOSE DCLCK
	 JRST [	OKINT		; Turn ints back on while waiting
		MOVE 1,[XWD DCLCK,DISLT]
		JSYS EDISMS	; Dismiss until lock is -
		JRST .-2]
	UMOVE A,1
	ANDCM A,JOBDC		; Mask out consoles already assigned
	TDNE A,AVDC		; Are all consoles available?
	 JRST DCNAV		; No.
;	IORM A,AVDC		; Mark as assigned (temp don't to share one console)
	IORM A,JOBDC		; And to this job
	MOVE C,JOBNO
	AOS (P)			; Skip return
MRKDC:	JFFO A,MRKDC1		; Enter here from reldc also
	UNLOCK DCLCK		; All marked
	JRST MRETN

MRKDC1:	MOVEM C,DCJOB(B)	; Save jobno of assigner or -1
	ROT A,(B)
	TLZ A,(1B0)		; Clear this bit
	MOVNS B
	ROT A,(B)
	JRST MRKDC		; Mark the rest

DCNAV:	UNLOCK DCLCK
	JRST MRETN

; Release display consoles
; Call:	1	; Mask of consoles to release, -1 for all
;	RELDC
; Return
;	+1	; Always

^.RELDC:JSYS MENTR		; Begin slow code
	NOINT			; No ints while lock is set
	AOSE DCLCK
	 JRST [	OKINT
		MOVE 1,[XWD DCLCK,DISLT]
		JSYS EDISMS	; Wait
		JRST .-2]
	UMOVE A,1		; Get mask
	AND A,JOBDC		; Consider only assigned consoles
	ANDCAM A,JOBDC		; Deassign from job
	ANDCAM A,AVDC		; Return to available pool
	SETO C,
	JRST MRKDC		; And clear all jobno's

; Start display process jsys
; Call:	LH(1)	; If non-zero, set status (same as stsdp)
;	RH(1)	; Process number
;	2	; Location of table to set status from if lh(1) neq 0
;	STRDP
; Return
;	+1	; Error
;	+2	; Ok

^.STRDP:JSYS MENTR		; Become slow
	PUSHJ P,CHKDP		; Check validity of dp number
	 JRST MRETNE		; Invalid
STRDP0:	PUSHJ P,STPDPX		; Stop dp first if running
	UMOVE A,1		; Get args
	UMOVE B,2
	TLNE A,-1		; Set status?
	 PUSHJ P,STSDPX		; Yes. set status first
	MOVSI B,STOP
	ANDCAM B,CTL(IOS)	; Clear stopping bit
	MOVE C,MAPW(IOS)	; Get the map word
	HLRE B,C		; Get count
	MOVNS B			; Make positive
	ADDI B,(C)		; Yields end of mapped area
	TLC C,777700
	CAIG B,1000		; If end beyond mem end or
	TLCE C,777700		; Count bad
	 JRST [	SETOM DPLCK(IOS)
		MOVEI A,STRDX1
		JRST MRETNE]	; Invalid mapw
	MOVE B,[POINT 9,MAP(IOS)]
STRDPL:	HRRZ A,C		; Get page number
	PUSH P,C		; Save vulnerable ac's
	PUSH P,B
	JSP B,.+1
	TLNE B,2000		; Test for call from monitor
	 JRST [	LSH A,9
		PUSHJ P,FPTA	; Convert monitor address to ptn.pn
		JRST STRDP1]
	HRLI A,400000
	PUSHJ P,FKHPTN		; Convert user address to ptn.pn
	 JRST [	SETZ A,
		JRST STRDP2]
STRDP1:	PUSH P,A
	PUSHJ P,MRPACS		; See if the page exists
	MOVE B,A
	POP P,A
	TLNN B,(1B5)
	 JRST [	SETZ A,
		JRST STRDP2]	; Non-existent page
	TLNE B,400
	 JRST [	TLNN B,100000
		 JRST .+1
		PUSH P,A
		HRRZS A
		LSH A,9
		UMOVES 777(A)
		POP P,A
		JRST STRDP1]
	TLC B,160000
	TLNE B,160000
	 JRST [PUSHJ P,RELMAP	; Can't have non-readable-writable-
		MOVEI A,STRDX3	; Executable pages
		UNLOCK DPLCK(IOS)
		JRST MRETN]
	PUSH P,IOS
	PUSHJ P,MLKPG		; Lock the page
	MOVSI B,CORWB
	IORM B,CST0(A)		; Mark page as modified
	POP P,IOS

STRDP2:	POP P,B			; Get byte pointer back
	IDPB A,B		; Deposit rca or 0 in map
	POP P,C			; Restore aobjn word
	AOBJN C,STRDPL		; Loop through all pages of map
	SETZ A,
	CAME B,[POINT 9,MAP+17(IOS),35]
	 JRST [	IDPB A,B	; Deposit 0's in unused slots
		JRST .-1]
	MOVE A,LOKPGS
	CAML A,MAXLOK
	 JRST [	PUSHJ P,RELMAP	; Too many pages locked. unlock
		UNLOCK DPLCK(IOS)
		MOVEI A,STRDX2
		JRST MRETNE]	; And fail
	MOVSI A,14-NDPR		; Set to index through dp regs
	MOVEI B,DPR(IOS)
	HRLI B,A
SANIT:	MOVE C,SAVTAB(A)	; Get proper left half
	HRLO D,C
	ANDM D,@B
	HLLZS C
	IORM C,@B
	AOBJN A,SANIT		; Loop through all settable dp regs
	MOVE A,DPSP(IOS)
	TLNN A,17
	TLO A,PROGM
	MOVEM A,DPSP(IOS)	; Force program mode if user fails to
	MOVE A,FORKX
	HRRM A,DPJOB(IOS)	; Save forkx of starter
	MOVSI B,RUN
	IORM B,CTL(IOS)		; Set the run bit
	CONO 4,400		; Disallow scheduling and dsp ints
	AOS A,NRUNG		; Increment count of running dp's
	CAIG A,1		; If this is the first one
	MOVEM A,DSPCNT		; Init count so it will go thru 0
	CONO PI,200		; Turn pi back on
	UNLOCK DPLCK(IOS)
	JRST SKMRTN

SAVTAB:	LI WCR,0
	LI RCR,0
	LI UR,0
	LI RAR,0
	LI WAR,0
	LI DSP,0
	LI P1,
	LI DIR,(PROGM)
	LI PC,
	LI RSR,0
	LI SR,
	LI SP,17


; Stop display process jsys
; Call:	1	; Process number
;	STPDP
; Return
;	+1	; Always

^.STPDP:JSYS MENTR
	PUSHJ P,CHKDP
	 JRST MRETN
	PUSHJ P,STPDPX
	UNLOCK DPLCK(IOS)
	JRST MRETN

; Set display process status jsys
; Call:	RH(1)	; Process number
;	B0(1)	; If one, set the memory map
;	B1(1)	; If one, change frame iteration count
;	B2(1)	; If one, set console mask
;	B3(1)	; If one, set coni word
;	B4(1)	; If one, set dp psints
;	B5(1)	; If one, set initial dp reg's
;	2	; Location of table from which to set status
;	STSDP
; Returns
;	+1	; Error
;	+2	; Ok

^.STSDP:JSYS MENTR
	PUSHJ P,CHKDP
	 JRST MRETNE
	MOVE A,CTL(IOS)
	TLNE A,RUN
	JRST STRDP0		; If running, stsdp=strdp
	PUSHJ P,STPDPX
	UMOVE A,1
	UMOVE B,2
	PUSHJ P,STSDPX
	UNLOCK DPLCK(IOS)
	JRST SKMRTN

; Read display status jsys
; Call:	1	; Display process number
;	2	; Location where to store status
;	RDSDP
; Return
;	+1	; Error
;	+2	; Ok

^.RDSDP:JSYS MENTR
	PUSHJ P,CHKDP
	 JRST MRETNE
	UMOVE A,2		; Get location where to store
	MOVE B,MAPW(IOS)
	UMOVEM B,0(A)		; Store mapw
	MOVE B,ITR(IOS)
	UMOVEM B,1(A)		; And itr
	MOVE B,DCMSK(IOS)
	ROT B,9
	AND B,[776000000000]
	HRR B,CTL(IOS)
	UMOVEM B,2(A)
	MOVE B,DPCNI(IOS)
	UMOVEM B,3(A)
	MOVEI B,4(A)
	HRLI B,INT(IOS)
	XCTMU [BLT B,4+NINT-1(A)]
	MOVEI B,4+NINT(A)
	HRLI B,DPR(IOS)
	XCTMU [BLT B,4+NINT+NDPR-1(A)]
	UNLOCK DPLCK(IOS)
	JRST SKMRTN

; Wait for dp to stop
; Call:	1	; Dp number
;	WATDP
; Returns +1 when the dp is stopped, returns immediately if bad number

^.WATDP:JSYS MENTR
	HRRZS A
	CAIL A,NDP
	JRST MRETN
	MOVSI B,RUN
	MOVE A,DPLOC(A)
	TDNN B,CTL(A)
	JRST MRETN
	MOVSI A,CTL(A)
	HRRI A,STPTST
	JSYS EDISMS
	JRST MRETN

; The following n jsys's do nothing except dispatch to a user fork
; Presumed to contain elt's routines via its entry
; Vector.  if the fork does not yet exist, it is created.

FOR @' Q_0,7
<.LDS'Q:JSYS MENTR
	MOVEI A,Q
	JRST LDSDO
>

LDSDO:	PUSH P,A
	SKIPN LDSFRK
	PUSHJ P,GETLDS		; Do the get first
	POP P,B
	PUSHJ P,LDSXCT
	SFRKV			; Executed by ldsxct
	MOVEI B,(P)
	ADD P,[XWD 2,2]
	PUSHJ P,LDSXCT
	RFACS
	MOVE B,1(B)
	SUB P,[XWD 2,2]
	SKIPN B
	AOS (P)
	JRST MRETN

LDSXCT:	PUSH P,[0]
	SKPIR
	SETOM (P)
	DIR
	WFORK
	XCT @-1(P)
	SKIPN (P)
	EIR
	SUB P,[XWD 1,1]
	AOS (P)
	POPJ P,

GETLDS:	MOVEI A,0
	CFORK
	 JRST [	MOVEI A,0
		MOVEM A,LSTERR
		JRST ITRAP]
	MOVEM A,LDSFRK
	MOVSI A,100001
	HRROI B,[ASCIZ /<SUBSYS>ELTDSP.SAV/]
	GTJFN
	 JRST [	MOVE A,LDSFRK
		KFORK
		SETZM LDSFRK
		MOVEI A,0
		MOVEM A,LSTERR
		JRST ITRAP]
	HRL A,LDSFRK
	GET
	POPJ P,

; Check and lock display process
; Call:	RH(A)	; Process number
;	PUSHJ P,CHKDP
; Return
;	+1	; Invalid, not assigned etc.
;	+2	; Ok, the process is locked

CHKDP:	HRRZ IOS,A		; Get rh(a)
	CAIL IOS,0		; Check range if dp number
	CAIL IOS,NDP
	 JRST [	MOVEI A,DPX2
		POPJ P,]	; Illegal dp number
	MOVE IOS,DPLOC(IOS)	; Get location of storage block
	PUSH P,A
	NOINT			; No interrupts while setting lock
	AOSE DPLCK(IOS)
	 JRST [	OKINT
		HRLZI 1,DPLCK(IOS)
		HRRI 1,DISLT
		JSYS EDISMS
		JRST .-2]
	HLRZ A,DPJOB(IOS)	; Get job no of assigner
	CAME A,JOBNO		; Are we they?
	 JRST CHKDP1		; No, error
	POP P,A
	JRST SKPRET		; Yes, return ok

CHKDP1:	POP P,A
	MOVEI A,DPX1
	UNLOCK DPLCK(IOS)
	POPJ P,

; Stop display process subroutine
; Call:	IOS	; Process info location
;	PUSHJ P,STPDPX
; Return
;	+1	; Always

STPDPX:	PUSH P,A
	MOVE A,CTL(IOS)		; Get control word
	TLNN A,RUN		; Running?
	 JRST STPDPZ		; No, just return
	MOVSI A,STOP		; Yes.
	IORM A,CTL(IOS)		; Request a stop
	HRLZI A,CTL(IOS)
	HRRI A,STPTST
	JSYS EDISMS		; Wait for it
STPDPZ:	POP P,A
	POPJ P,

USE

STPTST:	MOVSI 2,RUN
	TDNE 2,(1)
	JRST (4)
	JRST 1(4)

USE SWAPPC

; Set display status subroutine
; Call:	2	; Same as stsdp
;	PUSHJ P,STSDPX
; Returns
;	+1	; Always

STSDPX:	HLL B,A
	UMOVE A,0(B)		; Get mapw
	TLNE B,(1B0)		; Are we to set it?
	MOVEM A,MAPW(IOS)	; Yes
	UMOVE A,1(B)		; Same for itr
	TLNE B,(1B1)
	MOVEM A,ITR(IOS)
	UMOVE A,2(B)		; Get console mask
	AND A,JOBDC		; Allow only assigned consoles
	ROT A,-9		; Make into permit bits
	TLO A,1000		; And set select to 0
	TLNE B,(1B2)
	MOVEM A,DCMSK(IOS)
	UMOVE A,3(B)		; Get coni word
	TLNE B,(1B3)
	MOVEM A,DPCNI(IOS)	; And if he wants to, let him set it
	HRLZI A,4(B)		; Start of int words in user space
	HRRI A,INT(IOS)
	TLNE B,(1B4)
	XCTUM [BLT A,INT+NINT-1(IOS)]
	HRLZI A,4+NINT(B)	; Start of dp regs in user space
	HRRI A,DPR(IOS)
	TLNE B,(1B5)
	XCTUM [BLT A,DPR+NDPR-1(IOS)]
	POPJ P,

; Display processor schedular
; Call:	PUSHJ P,DSPSKV
; Sets dsp cnt to count ticks for next dp to run
; If all dp's have run once, then the first dp found to have
; Not frame stopped is given the remainder of the frame time

USE

DSPSKV:	SETZ A,
	EXCH A,DSPCNT		; Get remainder, prevent more dp sched
	ADDM A,DSPNTL		; Credit remainder to ticks left
	SKIPLE DSPNTL		; Any ticks left in this frame?
	JRST DSPSK2		; Yes
DSPSK0:	MOVEI A,NTCKPF		; No, get ticks per frame
	ADDB A,DSPNTL		; Augment ticks left
	JUMPLE A,.-2
	MOVE A,NRUNG
	ADDM A,DSPNPL		; Augment number of dp's left to do
	SETZM DSPACT		; So we will start at beginning
DSPSK2:	SKIPN DSPNPL		; Any dp's left to schedule?
	JRST DSPSK4		; No, go run any body
	MOVE A,DSPNTL		; Get ticks left
	IDIV A,DSPNPL		; Get this guy's share
	SKIPE B
	AOS A			; Round up to give first dp's the split
	MOVN B,A
	ADDM B,DSPNTL		; Debit ticks left
	ADDB A,DSPCNT		; Set quantum
	JUMPLE A,DSPSKV		; We're getting behind
	SOS DSPNPL		; One less guy left
	SETZ D,			; Find anybody
	JRST DSPSCH

DSPSK4:	MOVE A,DSPNTL
	ADDB A,DSPCNT
	JUMPE A,DSPSK0		; Will jump if frame has ended
	SETZM DSPNTL
	SETZM DSPACT
	MOVSI D,FSTOP		; Find nobody who is frame stopped

DSPSCH:	SKIPN A,DSPACT
	HRLOI A,-NDP-2
	SETZM DSPACT
	AOBJP A,CPOPJ
	MOVSI C,RUN
DSPNX1:	MOVE IOS,DPLOC(A)	; Get location of dp data
	TDNE C,CTL(IOS)
	TDNE D,CTL(IOS)
	 JRST [	AOBJN A,DSPNX1	; Not running, or frame stopped
		POPJ P,]
	MOVSI D,FSTOP
	ANDCAM D,CTL(IOS)
	MOVEM A,DSPACT		; This is the active dp
DSPRGO:	SETOM DSPINF		; Set initialization flag
	CONO DP,615310
	CONO DP,20
	CONSO DP,4000		; Wait for io stop
	JRST .-1
	DATAO DP,[LI SR,0(PROGM)]	; Start with sr of 0
	CONSO DP,4000
	JRST .-1
	DATAO DP,[LI DIR,52505]
	CONSO DP,4000
	JRST .-1
	DATAO DP,[LI RSR,0]
	MOVE A,[LOCLA SELINT,(1)]
	HRRI A,DCMSK(IOS)
	CONSO DP,4000
	JRST .-1
	DATAO DP,A		; Set select register
	MOVE A,[LI SP,(PEELM)]
	ADDI A,DPR(IOS)
	MOVEM A,DSPINS		; This is executed to start restore
	MOVE A,[LOCLA (14)]
	ADDI A,CDREG(IOS)
	MOVEM A,DSPIN2		; Executed to start loading clipper
	CONSO DP,4000
	JRST .-1
	DATAO DP,[JMP RESTR1]	; Point pc to restore code
	CONO DP,2610+DSPCHN	; Clear io stop and prg stop
	POPJ P,			; And leave

; The following code actually appears in the msec closk routine
; In pisrv, it is reproduced here for reference
;; Display clock
;; Enter here periodically at apr interrupt level
;
;DSPCLK:	SKIPE NRUNG
;	SOSLE DSPCNT
;	JRST @DSPCLK+2
;	SKIPN DSPCNT
;	SETOM DSPRSK
;	CONO PI,4000+DSPBIT
;	JRST @DSPCLK+2

; Display processor code for restoring state

RESTR1:	XQTA DSPIN2		; Contains locla 0,location(14)
OPDEF	LOTP	[310B8]
	LOTP @			; Map is right after cd regs
	XQTA DSPINS		; Li sp,stack(peelm)
	STOP			; Rest is spoon fed

; Save dp registers

SAVDP:	PSH P1,
	PSH DSP,
	PSH WAR,
	PSH RAR,
	PSH UR,
	PSH RCR,
	PSH WCR,
	XQTA DSPINS
	STOP

; Display processor interrupt routine

DSPSV:	XWD DSPSVR,.+1
	SKIPN DSPRSK		; Was int due to clock or
	CONSZ DP,1B32		; Was interrupt due to lds-1
	JRST DSPSV1		; Yes
	JRST @DSPSVR		; No.

DSPSV1:	MOVEM P,DSPSTK		; Put p on stack
	MOVE P,[XWD -DSPSTL+1,DSPSTK]
	PUSH P,IOS
	SKIPE DSPRSK
	JRST DSPSV2
DSPSV3:	MOVEI A,DSPCHR
	MOVEM A,DSPSVR		; Change return address
	MOVE IOS,DSPACT		; Point to current dp
	MOVE IOS,DPLOC(IOS)
	CONI DP,B		; Get dp status
	SKIPN DSPINF		; Starting or stopping
	JRST DSPNRM		; No, normal interrupt
	TRNE B,40
	JRST SELERR		; Select error
	TRNE B,640000		; Any of these while starting or stpng
	JRST BADER1		; Indicates monitor malfunction
	SKIPL DSPINF		; Starting?
	JRST STPING		; No, stopping
	CONO DP,4200		; Yes, set iostop
	CONSO DP,4000		; Wait for io stop
	JRST .-1
	DATAO DP,DPPC(IOS)	; Spoon feed the pc
	CONSO DP,4000
	JRST .-1
	DATAO DP,DPRSR(IOS)	; And the rsr
	CONSO DP,4000
	JRST .-1
	DATAO DP,DPSR(IOS)	; And the sr
	CONSO DP,4000
	JRST .-1
	DATAO DP,DPSP(IOS)	; And the sp
	CONSO DP,4000
	JRST .-1
	SETZM DSPINF		; No longer initializing
	MOVE A,CTL(IOS)
	TLNE A,1		; Single step mode?
	 JRST [	CONO DP,40200
		CONO DP,40
		CONI DP,B
		JRST DSPNRM]
	CONO DP,60610+DSPCHN	; Let it go, mapped
DSPXIT:	POP P,IOS
	POP P,P
	JRST @DSPSVR

DSPSV2:	SETZM DSPRSK
	SKIPN DSPACT		; Any dp running now?
	 JRST [	PUSHJ P,DSPSKV	; No, call scheduler directly
		JRST DSPXIT]
	SKIPLE A,DSPINF		; Dp stopping?
	JRST DSPXIT		; Yes, wait for it
	CONO DP,6010+DSPCHN	; Set io-stop
	JRST DSPXIT		; And wait for it

DSPNRM:	MOVEM B,DPCNI(IOS)	; Save for later
	TRNE B,600000		; Parity and nxm are impossible
	JRST BADERR		; Bad news if it happens
	TRNE B,40000		; If page fault
	CONO DP,400000		; Do system clear
	CONO DP,4000		; In any case set io stop
	MOVSI A,(<NWSTKM>)
	TRNE B,40000		; If page fault
	MOVSI A,(<LI SP,>)	; Prepare to save mar instead of sp
	ADDI A,DPSP+1(IOS)
	CONSO DP,4000
	JRST .-1
	DATAO DP,[LAL @]		; Group 2 nop to empty pipeline
	CONSO DP,4000
	JRST .-1
	CONO DP,20		; Now turn off map
	DATAO DP,A		; Do a nwstkm
	CONSO DP,4000
	JRST .-1
	TRZE B,40000
	 JRST [	DATAO DP,[PSHM 15,]
		JRST .-3]
	DATAO DP,[LIPSH SR,0(PROGM)]	; Save sr and reset it
	CONSO DP,4000
	JRST .-1
	DATAO DP,[LIPSH RSR,0]	; Save rsr and set to 0
	MOVE A,[STCL (14)]
	ADDI A,CDREG(IOS)
	MOVEM A,DSPINS		; Executed to save cd regs
	CONSO DP,4000
	JRST .-1
	DATAO DP,[LIPSH PC,SAVDP]
	CONSO DP,4000
	JRST .-1
	DATAO DP,[LIPSHM DIR,52505]
	MOVEI A,1
	MOVEM A,DSPINF		; Set flag for stopping
	CONO DP,2610+DSPCHN	; And start lds to save itself
	JRST DSPXIT		; Exit and come back when done saving

STPING:	CONO DP,511110
	CONO DP,20
	MOVE B,DPCNI(IOS)	; Get coni word as of first interrupt
	TRNE B,040040		; Protection violation and select
	JRST USRERR		; Are programming errors of user
	TRNE B,100
	JRST DHIT		; Hit stop
	TRNE B,1000
	JRST DMMINT		; Memory to memory stop
	TRNE B,200
	JRST DSPHLT		; Halted itself
	TRNE B,400		; Iostop is quantum ovrflo
	JRST DSPSKQ		; Run dsp schedular
	JRST BADER2		; Cannot find cause of interrupt

SELERR:	SKIPGE DSPINF		; Selection error before started
	MOVEM B,DPCNI(IOS)
USRERR:	PUSHJ P,DSPSTP		; Some kind of error
	MOVEI A,ERRINT
	PUSHJ P,DDPINT		; Generate interrupt
	JRST DSPXIT

BADERR:				; Parity and nxm while running
BADER1:				; Parity nxm or map while start/stopping
BADER2:				; Unknown lds-1 interrupt
	CONO DP,511110
	CONO DP,20
	BUG(CHK,<DISPLAY: PARITY ERROR OR NXM FROM LDS-1.>)
	JRST USRERR

DHIT:	PUSHJ P,DSPSTP		; Hit stop
	MOVEI A,1B28
	ANDCAM A,DPSR(IOS)
	MOVEI A,HITINT
	PUSHJ P,DDPINT
	JRST DSPXIT

DMMINT:	PUSHJ P,DSPSTP		; Memory-memory stop
	MOVEI A,MEMINT
	PUSHJ P,DDPINT
	JRST DSPXIT

DSPSKQ:	MOVSI A,QSTOP
	IORM A,CTL(IOS)		; Remember we stopped for quantum
DSPSKD:	MOVSI A,STOP		; Io-stop (means run next dp)
	TDNE A,CTL(IOS)
	JRST DSTOP
	PUSHJ P,DSPSKV
	JRST DSPXIT

DSPHLT:	MOVEI B,4
	ANDCAM B,DPSR(IOS)	; Clear stop bit
	HRRZ A,DPP1(IOS)	; Get p1 register
	CAIL A,NSYSH
	JRST DSPUSH
	JRST @HLTDTB(A)

DSPUSH:	MOVEI B,4		; Program stops not handled by monitor
	ANDCAM B,DPSR(IOS)	; Clear stop flag
	PUSHJ P,DSPSTP
	MOVEI A,STPINT
	PUSHJ P,DDPINT
	JRST DSPXIT

HLTDTB:	FRAME
	INTCON
NSYSH__.-HLTDTB

FRAME:	MOVSI B,FSTOP
	MOVSI A,QSTOP
	TDNE A,CTL(IOS)
	MOVSI B,0		; Don't frame stop if previous q stop
	ANDCAM A,CTL(IOS)
		IORM B,CTL(IOS)
	SKIPE ITR(IOS)		; End of frame stop
	SOSLE ITR(IOS)
	JRST DSPSKD
	PUSHJ P,DSPSTP
	MOVEI A,ITRINT
	PUSHJ P,DDPINT
	JRST DSPXIT

INTCON:	MOVEI A,CNTINT
	PUSHJ P,DDPINT
	PUSHJ P,DSPRGO
	JRST DSPXIT

DSTOP:	HLLOS CTL(IOS)		; All ones for this kind of stop		; User program issued stpdp jsys
	PUSHJ P,DSPSTP
	JRST DSPXIT

DSPSTP:	MOVSI A,RUN!STOP	; Common routine to stop a dp
	ANDCAM A,CTL(IOS)
	PUSHJ P,RELMAP
	SOS NRUNG
	PUSH P,IOS
	PUSHJ P,DSPSKV
	POP P,IOS
	POPJ P,

; Do dp interrupt

DDPINT:	HRRM A,CTL(IOS)		; Save interrupt code
	IDIVI A,6
	IMULI B,6
	MOVNS B
	ADDI B,=30
	ROT B,-6
	ADD B,[POINT 6,INT(IOS),35]
	ADD A,B
	LDB A,A			; Psi channel in b
	HRRZ B,DPJOB(IOS)	; Forkn in a
	CAIL A,0
	CAIL A,=36
	POPJ P,			; Not legal psi channel
	PUSHJ P,PSIRQ		; Cause interrupt
	POPJ P,

; Release locked pages for a dp

RELMAP:	PUSH P,[POINT 9,MAP(IOS)]
	PUSH P,[100]
RELMAL:	ILDB A,-1(P)
	JUMPE A,RELMA1
	SETZ 2,
	DPB 2,-1(P)
	PUSHJ P,MULKCR
RELMA1:	SOSLE (P)
	JRST RELMAL
	SUB P,[XWD 2,2]
	POPJ P,

USE SWAPPC
	BENDP	DISPLAY>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          