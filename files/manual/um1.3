User motives and needs prior to selection of data type.
Introduction to  MACSYMA data types.
Internal vs. External
   The idiosyncrasies.
       -1, operator,operator
   The several internal representations
   Noun,Verb and Object 
   and now a few words from our DISPLA
       ordering

Variety of Expressions

The Objects:
   numbers
   characters,MACSYMA names, variables, subscripted variables, functions
   lists, arrays, matrices, equations,
   contexts

The Actions:
    arithmetic
    concatenation,construction,  algebraic constructions and compositions
    cons,append, declare, entermatrix, =
    activate,de-activate


MACSYMA permits a variety of expressions to be constructed from the basic objects:

   atoms(numbers,funny characters declared alphabetic, ...)
   subscripted variables
   lists, matrices, arrays
   operators

Among the most common expressions  are  rational functions in one or several
variables:

.eg


These are constructed by simply typing them in or by generating them with the 
help of a program/function.  For example, if 






DECOMPOSITION of MACSYMA expressions.


One of the basic syntactic operations that a user needs is the
decomposition of expressions into parts.  For example consider
the expression

.eg


The Part functions make it possible to reference or replace any part of any
MACSYMA expression.  A part of a displayed expression is referred to by a set of indices which are non-negative integers.  For example, in exponentiation the base is considered part 1 and the exponent part 2.  In a quotient the numerator is part 1 and the denominator part 2.  In a sum or product the i2th1 term or factor is part i. In any expression the main operator is part 0.  For -X they 0th part is -, for A^B it is ^, for DIFF(F(X),X) it is DIFF, etc.  Note that unary minus is considered an operator.

In MACSYMA the user has some control of the way in which expressions are displayed.  The ordering of factors in a product or terms in a sum may be changed by the user (see  $ref<ordering!functions>, $ref<rational!functions>).  The ordering of parts in the displayed form of an expression may differ from the ordering in the internal representation of the expression.

.function(PART,|exp, n1, ..., nk|)
deals with the displayed form of 2exp*. It 
obtains the part of 2exp1 as specified by the indices 2n11,...,2nk1.  First part 2n11 of 2exp1 is obtained, then part 2n21 of that, etc.  The result is part 2nk1 of ... part 2n21 of part 2n11 of 2exp1.  Thus PART(Z+2*Y,2,1) yields 2.  PART can be used to obtain an element of a list, a row of a matrix, etc.

.example
(C1)  X+Y/Z**2;
.begin group
                        Y
(D1)                   -- + X
                        2
                       Z
.end
(C2) PART(D1,1,2,2);

(D2)                    2

(C3) 'INTEGRATE(F(X),X,A,B)+X;

.begin group
                      B
                     /
                     [
(D3)                 I F(X)dX + X
                     ]
                     /
                     A
.end

(C4) PART(%,1,1);
(D4)                  F(X)

.end
.endfunction


One of the convenient features of the PART command is the capability of
picking out a sequence of elements from an expression.  For example,


.eg


picks out selected elements of a sum.


.function(INPART,|exp,n1,...,nk|)
is similar to PART but works on the internal representation of the
expression $see<simp> rather than the displayed form and thus may be faster since no
formatting is done.  Care should be taken with respect to the order of subexpressions
in sums and products (since the order of variables in the internal form is often
different from that in the displayed form) and in dealing with unary minus, subtraction,
and division (since these operators are removed from the expression). PART(X+Y,0) or
INPART(X+Y,0) yield +, though in order to refer to the operator it must be enclosed
in "s.  For example ...IF INPART(D9,0)="+" THEN ...

.example
(C1)  X+Y+W*Z;

(D1)                  W Z + Y + X

(C2)  INPART(D1,3,2);

(D2)                  Z
(C3)  PART(D1,1,2);

(D3)                  Z

(C4) 'LIMIT(F(X)**G(X+1),X,0,MINUS);
.begin group
                                      G(X + 1)
(D4)                      LIMIT   F(X)
                          X ->0-
.end

(C5) INPART(%,1,2);
(D5)                            G(X + 1)

.end
.endfunction

.function(DISPFORM,exp) 
returns the external representation of 2exp* (wrt its main operator).   This should be useful in conjunction with PART which also deals with the external representation.  Suppose EXP is -A .  Then the internal representation of EXP is "*"(-1,A), while the external representation is "-"(A). LENGTH(EXP) gives 2, while LENGTH(DISPFORM(EXP)) gives 1.  MAP(F,EXP) gives F(-1)*F(A), while MAP(F,DISPFORM(EXP)) gives -F(A).

  DISPFORM(2exp*,ALL) converts the entire expression (not just the top-level) to external format.  For example, if  EXP:SIN(SQRT(X)), then FREEOF(SQRT,EXP) and FREEOF(SQRT,DISPFORM(EXP)) give TRUE, while FREEOF(SQRT,DISPFORM(EXP,ALL)) gives FALSE.

.endfunction  
