MACRAK@MIT-MC 02/17/78 18:24:40
To: APD at MIT-MC
CC: RZ at MIT-MC
The manual should probably mention that Powerseries asks about the
sign and zero-or-nonzero'ness of I1 etc and that you should answer
Pos or Nonzero at least until this gets fixed by local Assume's.
One problem might be an index varying from 0 to inf.  I think that
has come up.
BMT@MIT-MC 02/13/78 20:51:06
To: INFO-MACSYM at MIT-MC
 For the next macsyma (268), the lisp variable genvar used in the
rational function package has been changed and no longer has its
length in its car.  I believe I have appropriately modified all
of the Macsyma source files, but beware of recompiling out of
core files for the current Macsyma.
  Genvar is now just a list of gensyms, initially nil.
    OCKEN@MIT-MC 01/26/78 17:33:43
    HOW ARE THINGS?
    IT TURNS OUT I HAD BEEN MAKING THE SAME ERROR MANY TIMES OVER,
    NAMELY I ALWAYS WROTE STATEMENTS SUCH AS

    DO[A:0.LOOP.A:A+1,....GO(LOOP)]  OR THEN[......]  ETC.

    THIS DOES NOT WORK BECAUSE A STATEMENT LIST IS NOTT
    COMPILED AS A BLOCK.  OF COURSE, AS MRG??  POINTED OUT
    THE CORRECT METHOD IS DO BLOCK( .......) OR THEN(BLOCK(....)

    I BELIEVE THIS ERROR IS WORTH MENTIONING IN THE MANUAL,
    SINCE THE EXAMPLES GIVEN INTHE MANUAL WHICH I HAVE
    ARE ALL OF THE FORM DO[    ,    ,.....], FROM WHICH
    ONE MIGHT INDEED RECEIVE THE IMPRESSION  THAT THIS
    IS THE WAY TO PROGRAM A BLOCK ALSO.   SEE WHAT I MEAN?

    AGAIN, THANKS FOR ALL YOUR HELP
APD@MIT-MC 01/25/78 18:31:45
collapse,ic1,etc

MACRAK@MIT-MC 01/22/78 18:54:38
To: MATHLAB at MIT-MC
Full documentation for Funprint is in Funpr > Libmax; .

JPG@MIT-MC 01/20/78 15:30:09
To: MRG at MIT-MC, APD at MIT-MC, ELLEN at MIT-MC, JM at MIT-MC
CC: JPG at MIT-MC, STOUTE at MIT-MC
As STOUTE pointed out to me, some of these user aids, e.g. 
the PRIMER() command should be mentioned in both the manual 
and the hardcopy primer.

BMT@MIT-MC 01/19/78 21:44:55
To: INFO-MACSYM at MIT-MC

  Pade's first argument can be a Laurent series, and the degree bounds
can be inf which causes all rational functions whose total degree
is less than or equal to the length of the power series to be returned.
Total degree is num-degree + denom-degree.  Length of a power series
is "truncation level" + 1 - minimum(0, "order of series").

BMT@MIT-MC 01/17/78 00:49:44
To: RJF at MIT-MC, WEC at MIT-MC, INFO-MACSYM at MIT-MC

  There is a new function in the current Macsyma, 
Pade(taylor-series, num. deg bound, denom deg bound) Its
first argument must be a univariate taylor-series, the
second and third are positive integers specifying degree
bounds of the numerator and denominator.  PADE returns a
list of all rational functions which have the given
taylor-series expansion where the sum of the degrees of the
numerator and the denom.  is less than or equal to the
truncation level of the power series, i.e. are "best"
approximants, and which additionally satisfy the specified
degree bounds. 

JPG@MIT-MC 01/11/78 02:54:58
To: ELIZC at MIT-MC
CC: ELLEN at MIT-MC, APD at MIT-MC, RAB at MIT-MC
ELIZC@MIT-MC 01/10/78 17:47:10
The example given for ILT in the manual no longer seems to work.

The EXAMPLE command had a bug in it which has been fixed.  However, 
ILT now gives a different answer.  I have no way of knowing whether 
it was correct before or whether the current answer is correct.
JPG@MIT-MC 01/11/78 01:41:39
To: INFO-MACSYM at MIT-MC
CC: RWG at MIT-MC, RJF at MIT-MC, REM at MIT-MC
For all you BFLOAT fans:  That new flag has been renamed 
FPPRINTPREC.
   JPG@MIT-MC 01/10/78 20:59:15 Re: manual
To: APD at MIT-MC
CC: JPG at MIT-MC
[1] XTHRU: mention "cross multiplication".
[2] Much of the ILT example is now different.  Please check out.
APD@MIT-MC 01/10/78 19:04:05
ADD IC1,BC1 TO ODE2 DESCRIPTON

CFFK@MIT-MC 01/10/78 09:50:58 Re: ALLROOTS knows about PROGRAMMODE
To: INFO-MACSYM at MIT-MC
PROGRAMMODE:TRUE$ ALLROOTS(X^2-1); ==> [X=1.0,X=-1.0] (With PROGRAMMODE:FALSE
you get the solutions put in E-Labels.)

JPG@MIT-MC 01/10/78 06:13:41
To: MRG at MIT-MC, SATAN at MIT-MC, APD at MIT-MC, ELLEN at MIT-MC
I finally generated a SHARE;ODER USAGE file, which is an updated extract 
of my MUC paper.

JPG@MIT-MC 01/10/78 05:45:34
To: INFO-MACSYM at MIT-MC
CC: RWG at MIT-MC, REM at MIT-MC, RJF at MIT-MC
It is now possible to compute bigfloats with a precision of FPPREC
digits, but to have them printed with a smaller number of digits, 
namely, the value of the new option FPPRECPRINT.  If FPPRECPRINT 
is 0 (the default), or >= FPPREC, then the value of FPPREC controls
the number of digits used for printing, as before.  However, if 
FPPRECPRINT has a value between 2 and FPPREC-1, then it controls the 
number of digits used.  (The minimal number of digits used is 2, 
one to the left of the point and one to the right.  The value 1 for
FPPRECPRINT is illegal.)

JPG@MIT-MC 01/05/78 13:14:38
To: INFO-MACSYM at MIT-MC
For DAS:
[1] There is a new command SUBLIST(L,F) which takes two args, 
a list L and a function F, and which returns the list of elements 
of L for which the function F returns TRUE. 
E.g., SUBLIST([1,2,3,4],EVENP); returns [2,4].

[2] There is now a set manipulation package on the SHARE directory, 
which contains commands such as UNION, INTERSECTION, COMPLEMENT, etc.
For a description, do :PRINT SHARE;SET USAGE at top-level, or 
equivalently in MACSYMA, do PRINTFILE(SET,USAGE,DSK,SHARE); .

JPG@MIT-MC 12/31/77 20:27:07
To: INFO-MACSYM at MIT-MC
Further clarification to ADDROW note: 
E.g. to add a row to the top of a matrix M, 
ADDROW(MATRIX(list),M); works.

JPG@MIT-MC 12/31/77 19:47:07
To: INFO-MACSYM at MIT-MC
A new command ADDCOL exists which is similar to ADDROW (see the manual).
To clarify just what args are acceptable to these commands, the first 
arg must be a matrix, but the second arg may be either a list or a 
matrix, so these commands can be used to add one or more rows/columns
to a matrix.

JPG@MIT-MC 12/22/77 10:15:52
To: INFO-MACSYM at MIT-MC, AMENT at MIT-MC
PARTITION which used to work only on sums and products, now also 
works on lists.  E.g. PARTITION([A,B,F(A),C],A); gives 
[[B,C],[A,F(A)]].

JPG@MIT-MC 12/22/77 04:20:02 Re: (for DAS)
To: INFO-MACSYM at MIT-MC
There is a new function called MAKELIST which, naturally, returns 
a list as value.  MAKELIST may be called as MAKELIST(exp,var,lo,hi) 
["lo" and "hi" must be integers], or as MAKELIST(exp,var,list).
In the first case MAKELIST is analogous to SUM, whereas in the second 
case MAKELIST is similar to MAP.
Examples:
   MAKELIST(CONCAT(X,I),I,1,6) yields [X1,X2,X3,X4,X5,X6]
   MAKELIST(X=Y,Y,[A,B,C]) yields [X=A,X=B,X=C]

JLK@MIT-MC 12/21/77 10:38:18
To: CFFK at MIT-MC, BEE at MIT-MC
CC: APD at MIT-MC
The new HARDCOPY scheme has never been announced as far as I can see.  It
would be a good idea to do this and also make sure APD knows about it so it
can get into the next manual.

BMT@MIT-MC 12/20/77 18:18:48
To: JPG at MIT-MC, APD at MIT-MC
CC: RZ at MIT-MC, BMT at MIT-MC
In the next macsyma, or until someone puts it into the fix
file there is a new function primep, which does the obvious thing.
primep is true only for positive integers.
This fix will also end the ran out of primes bug, in modresult.

JPG@MIT-MC 12/20/77 04:10:55
To: INFO-MACSYM at MIT-MC
The syntax BLOCK([...,var:value,...],body) is now allowed.  This 
is handled like BLOCK([...,var,...],var:value,body), except that 
in the former binding to "external" values is done.  E.g.
X:A$ BLOCK([X:B,Y:X+1],X*Y); gives (A+1)*B .
MACRAK@MIT-MC 12/16/77 18:19:04
New function Filelength documented in Fileop Usage Share; .
Takes arguments like Printfile, and returns length in characters.

JPG@MIT-MC 12/10/77 03:34:49
To: AMENT at MIT-MC
CC: APD at MIT-MC
AMENT@MIT-MC 12/09/77 12:35:11
(c1) a:b$ (c2) f(x):=1$ (c3) values;==>[a] (c4) functions;==>
(d4) [f(x)]     then   (c5) c:d$  (c6) g(y):=2$  and now
(c7) d3; ==> [a,c]  and (c8) d4; ==> [f(x),g(y)] 
and (c9) length(d3); {which was the piece of information
i was actually looking for, evidently mistakenly} ==> 2 {which in
my view is the wrong answer}.

Users add and delete info like VALUES and FUNCTIONS all the time. 
It is just too expensive to copy these lists each time a change is 
made.  Sorry.  You will have to use  
(C3) COPYLIST(VALUES); 
(C4) COPYLIST(FUNCTIONS); 
to get what you want if you need LENGTH to work.

APD: Please note the above for the manual.

JPG@MIT-MC 11/14/77 13:09:37
To: APD at MIT-MC
CC: RWK at MIT-MC
RWK@MIT-MC 11/14/77 04:26:02
To: APD at MIT-MC, JPG at MIT-MC
The manual (under KILL) should not say that KILL won't help the
NO CORE -- FASLOAD problem, it should explain that it won't help once
it has happened, but liberal use as you go along will help prevent it.

Yes, a slight rephrasing might help.  But I wouldn't put too much 
emphasis on the liberal use which "might help" (not "will help") 
prevent it, our address space problem is too critical for too much 
optimism on many problems.

RWK@MIT-MC 11/14/77 04:26:02
To: APD at MIT-MC, JPG at MIT-MC
The manual (under KILL) should not say that KILL won't help the
NO CORE -- FASLOAD problem, it should explain that it won't help once
it has happened, but liberal use as you go along will help prevent it.
JPG@MIT-MC 10/30/77 09:09:12
To: APD at MIT-MC
CC: MRG at MIT-MC
AK1G@MIT-MC 10/30/77 02:07:28
The result of a computation contained an expression of the form 
'EXPT(expr,2)'.  As the manual does not mention this as an intrinsic, 
what does it stand for?

I think EXPT should be in the index of the manual.

APD@MIT-MC 10/28/77 14:57:06
pp. 128-131: cutoff exponents,derivabbrev?,i2 nonzero?, p.130 (a+c var)..

CMA@MIT-MC 10/13/77 13:14:29
IT WOULD BE NICE TO DISPLAY BOTH SUPERSCRIPT INDICES
AND SUBSCRIPT INDICES WITHOUT HAVING TO LOAD THE ENTIRE ITENSR PACKAGE
AND WITHOUT EXPLICITLY CALLING THE SHOW() COMMAND.  THERE SHOULD SIMPLY 
BE A SWITCH TO THIS EFFECT.
JPG@MIT-MC 10/13/77 16:37:40
To: APD at MIT-MC
CC: CMA at MIT-MC, MRG at MIT-MC

CMA@MIT-MC 10/13/77 13:14:29
IT WOULD BE NICE TO DISPLAY BOTH SUPERSCRIPT INDICES
AND SUBSCRIPT INDICES WITHOUT HAVING TO LOAD THE ENTIRE ITENSR PACKAGE
AND WITHOUT EXPLICITLY CALLING THE SHOW() COMMAND.  THERE SHOULD SIMPLY 
BE A SWITCH TO THIS EFFECT.

Can you take care of this for him?

CMA@MIT-MC 10/11/77 14:18:02
I SUGGEST THAT THE MANUAL SHOULD DISCUSS THE INDEX 
CONVENTION BEING USED ON P. 186 (YELLOW).  WHICH INDEX CORRESPONDSTO
THE UPPER INDEX?  P. 196 IMPLIES THAT IT IS THE THIRD INDEX WHICH IS
THE RAISED INDEX.  A STANDARD TEXT SUCH AS LOVELOCK AND RUND USES THE
SECOND INDEX AS THE RAISED INDEX.

BMT@MIT-MC 09/29/77 21:32:25
To: INFO-MACSYM at MIT-MC
CC: CMA at MIT-MC, JPG at MIT-MC
The file share;invert > finds the inverse of a matrix using the
adjoint method.  This allows a user to compute the inverse of a
matrix with bfloat entries or polynomials with floating pt. 
coefficients without converting to cre-form.  The determinant
command is used to compute cofactors, so if ratmx is false (the default)
the inverse is computed without changing the representation of the
elements.  The functions adjoint and invert are provided.  The
current (temporary?) implementation  is inefficient for matrices of
high order.

MACRAK@MIT-MC 08/29/77 18:38:05
To: MACSYM at MIT-MC, INFO-MACSYM at MIT-MC, APD at MIT-MC
I have written some functions to make the printing of files and the
listing of directories easier for Macsyma users.  It autoloads, so
you can read its documentation by saying Printfile(Fileop,Usage,Dsk,Share).

GLS@MIT-AI 08/19/77 14:00:28
To: rjf at MIT-MC, macrak at MIT-MC
CC: gls at MIT-MC, apd at MIT-MC, jonl at MIT-MC, jm at MIT-MC
CC: jpg at MIT-MC, macsym at MIT-MC
I will admit that some of LISP's error messages are cryptic.
Some, such as "gleep" messages, were purposely made obscure
because I originally thought that they would occur only
under rare and highly unfortunate circumstances.  When LISP
says "gleep" or "you have lost badly", your LISP is so wedged
you have almost no chance of recovering.  Most of these screws
are incresing in frequency due to the address space crunch.
I am willing to fix these messages up better if people want it
badly enough.


MACRAK@MIT-MC 08/19/77 12:56:23
To: RJF at MIT-MC, APD at MIT-MC, GLS at MIT-MC, JONL at MIT-MC
To: JM at MIT-MC, JPG at MIT-MC
CC: MACRAK-CC at MIT-MC
I agree entirely with Fateman about documenting error messages in
the manual, but further suggest that it's worth at least doubling
the length of most error messages to make them somewhat more 
intelligible.  There are two main items of information that should
be contained in error messages: what caused the error, and how
to recover (if it's possible).  Even those few Macsyma/Lisp error
messages that specify the first clearly generally omit the second,
and there is no way to tell that "overflow" is not fatal while
"Gleep!" is a bad sign.  Error messages are not the place to indulge
in poetic expression as "Gleep!", "Nihil ex nihil", and so on.
We may laugh at some other systems' error messages of the form
"345 -- PDQ" (even though we had such in Teco until recently), but
forget that generally there is a reference to a fuller description
of the problem.

It also would be helpful if overflow and underflow could be handled
reasonably by Lisp--that is, it should be possible in each case to
decide whether you want to 1) ignore the happening 2) stop execution
entirely or 3) notify the program somehow.  Macsyma should also allow
reasonable handling of these events, which are now treated invariably
as errors, which they may not be.

MACRAK@MIT-MC 08/19/77 12:56:23
To: RJF at MIT-MC, APD at MIT-MC, GLS at MIT-MC, JONL at MIT-MC
To: JM at MIT-MC, JPG at MIT-MC
CC: MACRAK-CC at MIT-MC
I agree entirely with Fateman about documenting error messages in
the manual, but further suggest that it's worth at least doubling
the length of most error messages to make them somewhat more 
intelligible.  There are two main items of information that should
be contained in error messages: what caused the error, and how
to recover (if it's possible).  Even those few Macsyma/Lisp error
messages that specify the first clearly generally omit the second,
and there is no way to tell that "overflow" is not fatal while
"Gleep!" is a bad sign.  Error messages are not the place to indulge
in poetic expression as "Gleep!", "Nihil ex nihil", and so on.
We may laugh at some other systems' error messages of the form
"345 -- PDQ" (even though we had such in Teco until recently), but
forget that generally there is a reference to a fuller description
of the problem.

It also would be helpful if overflow and underflow could be handled
reasonably by Lisp--that is, it should be possible in each case to
decide whether you want to 1) ignore the happening 2) stop execution
entirely or 3) notify the program somehow.  Macsyma should also allow
reasonable handling of these events, which are now treated invariably
as errors, which they may not be.

MACRAK@MIT-MC 08/19/77 12:56:23
To: RJF at MIT-MC, APD at MIT-MC, GLS at MIT-MC, JONL at MIT-MC
To: JM at MIT-MC, JPG at MIT-MC
CC: MACRAK-CC at MIT-MC
I agree entirely with Fateman about documenting error messages in
the manual, but further suggest that it's worth at least doubling
the length of most error messages to make them somewhat more 
intelligible.  There are two main items of information that should
be contained in error messages: what caused the error, and how
to recover (if it's possible).  Even those few Macsyma/Lisp error
messages that specify the first clearly generally omit the second,
and there is no way to tell that "overflow" is not fatal while
"Gleep!" is a bad sign.  Error messages are not the place to indulge
in poetic expression as "Gleep!", "Nihil ex nihil", and so on.
We may laugh at some other systems' error messages of the form
"345 -- PDQ" (even though we had such in Teco until recently), but
forget that generally there is a reference to a fuller description
of the problem.

It also would be helpful if overflow and underflow could be handled
reasonably by Lisp--that is, it should be possible in each case to
decide whether you want to 1) ignore the happening 2) stop execution
entirely or 3) notify the program somehow.  Macsyma should also allow
reasonable handling of these events, which are now treated invariably
as errors, which they may not be.

rjf and several LLL users@MIT-MC (Sent by RJF@MIT-MC) 08/19/77 11:08:33
To: APD at MIT-MC, GLS at MIT-MC, JONL at MIT-MC
CC: JM at MIT-MC, JPG at MIT-MC, MACSYM at MIT-MC
I offer this suggestion once more:  the MACSYMA manual should have a list
of error messages,, including those which may originate from lisp, and an
explanation of each.  Also messages should start uniformly with something
alphabetizable; e.g.  instead of ;foo unbound variable, 
;unbound variable - foo.  especially bad this way is the message from apply
for wrong no. of args.
  It displays thhe most cavalier attitude towards users to suppose they can
make sense of "out of bit blocks gleep!" etc etc.  If the error messages are so clever,
let us read them all together.
   thanks.

MACRAK@MIT-MC 08/18/77 22:34:42
To: INFO-MACSYM at MIT-MC
Sorry, that's the Cgamma file, not the Gamma file.

MACRAK@MIT-MC 08/18/77 22:27:54 Re: Share file for complex Gamma function.
To: INFO-MACSYM at MIT-MC
Share;Gamma Usage describes a fast and accurate routine to
calculate the Gamma function in the complex plane.

RJF@MIT-MC 07/26/77 02:11:45
NEW MANUAL, P 226, REALZERO HAS BEEN REDONE ENTIRELY.  IT IS
USED FOR MY PAPER IN CONFERENCE.  THE NAME IS PRRID1(POLY)
(ALSO PRRID2, PRRID3) AND THE FILE IS RJF;FLISP > (OR FASL) I THINK.  
REMIND ME AND I'LL GIVE MORE INFO.  IT IS FASTER THAN REALROOTS FOR
POLYS WHICH HAVE FEW REAL ROOTS, AT LEAST SOMETIMES.  IT IS OCCASIONALLY
MUCH FASTER.
ALSO P 260 LINE -7  TWO DINGS?
JPG@MIT-MC 07/06/77 03:44:34
To: INFO-MACSYM at MIT-MC
CC: ELL at MIT-MC, MRG at MIT-MC
A new command TRUNC(expr) exists such that if expr is a sum e.g. 
Y+X , expr will be displayed as Y+X+... .
APD@MIT-MC 06/19/77 02:32:20
User Aids: PRIMER,OPTIONS,HELP  (describe,example)
cffk@MIT-MC (Sent by JLK@MIT-MC) 04/21/77 13:04:51
To: APD at MIT-MC, JPG at MIT-MC, ELLEN at MIT-MC
Have you ever thought about having a section in the manual with
examples that "don't" work.  (Maybe it should be a primer section.)
(I'm not refering to things like INTEGRATE bugs but things like why
EV(SOLVE(x,x)); doesn't return [X=0] as it "should".)
It seems to be that an explanation of why they don't work would be
helpful for users, who often seem to trip over the same problems.  An
assembly of such examples could quickly be gotten from the Macsyma
mail.

MESSAGE FROM MRG HACTRN
MRG@MC 20:29:56  
How about adding chapter 5 to the describe file so that we can get
things like GAMMA and GENFACT and FACTORIAL ...
STAN@MIT-MC 11/15/76 23:56:46
To: APD at MIT-MC, PAULW at MIT-MC
AS I REPORTED BEFORE, I HAVE A MATRIX WHICH ECHELON DOES NOT HANDEL
CORRECTLY. I HAVE SAVED THIS MATRIX IN THE FILE

    STAN,MATRIX,DSK,USERS

WITH THE LABLE MM.  IN ADDITION IN THIS FILE THERE IS A FUNCTION CALLED
ROWREDUCE(M).  THIS FUNCTION HAS AS ITS VALUE A LIST WHOS FIRST
MEMBER IS THE RANK OF M AND WHOS SECOND MEMBER IS THE ROWREDUCED FORM
OF M. IN THE CASE OF MM  THESE TWO FORMS SHOULD BE THE SAME.
HOPE THIS IS OF SOME HELP.

RZ@MIT-MC 11/13/76 15:41:06
To: JCIUCB at MIT-MC
CC: APD at MIT-MC, JPG at MIT-MC, RZ at MIT-MC
IN THE NEXT MACSYMA THERE SHOULD BE A FAIRLY COMPLETE PRODUCT SIMPLIFYER.
IT SHOULD BE ABLE TO HANDLE PRODUCTS OF RATIONAL FUNCTIONS.
I'LL SEND YOU MORE DETAILS WHEN I GET ITWORKING.

RZ@MIT-MC 09/27/76 20:11:03
To: MRG at MIT-MC, JPG at MIT-MC
CC: APD at MIT-MC, RZ at MIT-MC
I changed the output of $ratdisrep so that
'(mplus exact) is returned if the sum is actually exact.
This eliminates the +...
Unfortunately monomials now display with a +...

Also trying to expand an expression to infinite order which
has a an infinite number of terms gives an error.

JPG@MIT-MC 09/01/76 20:28:32
To: APD at MIT-MC
For manual, as you know, MACSYMA uses --Pause--, not --More-- .

APD@MIT-MC 08/19/76 16:47:18
To: APD at MIT-MC
ELLEN SUGGESTS THAT REMOVING OPTIONS BE EXPLAINED IN A SEPARATE SECTION.
ADP,CU,SHALOF,PETERS,CB,CAR,ARTEVANS
BURS
