.chap(The SHARE Directory,share)

     The SHARE, SHARE1, and SHARE2 directories contain programs, 
information files, etc. which are considered to be of interest to the 
MACSYMA community.  (The SHARE1; and SHARE2; directories are overflow 
directories for the SHARE; directory which in general hold less frequently 
used files.  From now on, references to the SHARE; directory should be 
taken to mean all of the SHARE;, SHARE1;, and SHARE2; directories.)
Some files on SHARE; are not part of the MACSYMA system per se and must 
be loaded individually by the user, e.g. LOADFILE(CGAMMA,FASL,SHARE);.
However, using the $fun<LOAD> command makes it unnecessary to worry about
either which of the SHARE directories a file is on, or which kind of
file it is, e.g. LOAD(CGAMMA); will find and load up the file CGAMMA FASL.

     Many files on SHARE; were contributed by MACSYMA users, and all MACSYMA 
users are encouraged to contribute.

     Names for files on SHARE; should be chosen as appropriate.  
However, the contributor will probably want to follow the conventions 
discussed here.  A contributor will probably create some but not all 
of the following files.  Examples may be seen on the SHARE directory.
  
   1)  NAME > is the file name of the MACSYMA BATCHable programs.  
The > sign indicates a numeric second filename which is increased 
whenever a new version is created.  

   2) NAME LISP is the file name of the LISP code for the programs
contained in the file NAME >.  This file is loaded into MACSYMA using
LOADFILE.  It was obtained by using the TRANSLATE command, the SAVE
command, or was written directly in LISP by the contributor.

   3) NAME FASL is the file name of the FASL (fast-loadable) version
of NAME LISP, and was produced from NAME LISP by using the LISP
compiler, or produced using the FASSAVE command.  It is loaded into
MACSYMA using the LOADFILE command.

   4)  NAME USAGE is the name of the documentation file for the 
programs in NAME >.  It describes how the programs are used, inputs, 
outputs, options, warnings, error messages, etc.  It may mention the 
algorithms behind the programs, references, and whatever else the 
user should know.  It should certainly indicate who programmed the 
routines, especially his login name.  If the NAME USAGE file does 
not exist, this information should be given in NAME > or elsewhere.

   5)  NAME DEMO is the name of the demonstration file which may be 
used in DEMOing NAME > or NAME LISP.

   6)  NAME OUTPUT may be used to store sample output obtained from 
running NAME > on some examples or from DEMOing the NAME DEMO file.

   7)  Other file names may be used for information files providing 
some information on some aspect of the MACSYMA system or for 
describing some MACSYMA utility or for notes on some MACSYMA issues, 
etc.

     The SHARE > file is an index to the SHARE directory and is 
intended to contain a short note on each of the programs on the SHARE 
directory.  It should be updated by the SHARE; contributor as 
appropriate.

     Any comments or questions about the use of the SHARE directory 
should be sent to JPG.

.sec(|Contents of the Directory|,cotd)

This is the contents of the file SHARE;SHARE 58, which represents the
SHARE directories as of June 1982.  This is a complete listing, and
thus contains some packages which are actually part of MACSYMA.  Those
will have a reference to the appropriate section of the manual.  The
packages which are on the SHARE directories will be treated, each in a separate
section, in the rest of this chapter.

.begin indent 0,10;turn on ""
ABSIMP(11)(SHARE1;) supplements the built-in simplification rules for
ABS and SIGNUM.

ANTID(11)(SHARE2;) Integrates (antidifferentiates) expressions involving 
an unspecified function and its derivatives.

APLOT2(12)belongs to PLOT2

AIRY(11)(SHARE1;) Contains the AIRY functions and their derivatives, both
numerically and a bit symbolically; has the GRADEFS that TAYLOR uses.

ARRAY(11)various functions for handling arrays (e.g. changing array   
dimensions, filling arrays from a list).

ASYMP(11)(SHARE1;) a package for determining the asymptotic behavior of
Feynman integrals.

ASYMPA(15)(SHARE1;) does asymptotic analysis, including big-Oh and little-oh
simplification.

BESSEL(11)obtains Bessel functions J and I for real arg and integer 
order.  Bessel function J for complex arg and nonneg real order.
Airy function Ai of real arg.  Plasma Dispersion function (Complex
Error function), and a generator of random numbers with a normal 
distribution.

BFFAC(11)(SHARE2;) cheap and dirty BFLOAT versions of the
Factorial (shifted Gamma) and Riemann Zeta functions.

BINIO(11)(SHARE2;) belongs to PLOT2

BRMBRG(15)(SHARE2;) BIGFLOAT version of ROMBRG numerical integration

CGAMMA(15)Gamma function for complex arguments.

CTENSR(12)for a user-specified metric, enables explicit computation
of Christoffel symbols, Ricci tensor, Riemann tensor, and other tensor
quantities of interest in differential geometry and gravitation
theory.  $see<tensors>.

DBLINT(11)(SHARE1) Function for double intergrals, using Simpson's Rule.

DECLIN(11)(SHARE1;) Functions for declaring linear operators with several 
arguments.

DELTA(11)(SHARE2;) integrals with Dirac deltas

DESOLN(12)solves differential equations or systems of them using 
Laplace transforms.  Part of MACSYMA, see $see<difintfun>.

DETERM(15)(SHARE1;) the Bareiss two-step determinant algorithm.

DIFSOL(11)(SHARE2;) solves differential equations or systems of them using
Laplace transforms.

DIMEN(11)(SHARE1;) dimensional analysis.

DISOL(11)(SHARE2;) does ISOLATE's job for multiple variables.

DSKUSE(11)(SHARE2;) Functions for finding out about disk usage on the MC machine.

DUMP(11)saves and loads number arrays efficiently

EIGEN(11)computes right eigenvectors, right unit eigenvectors, 
eigenvalues, and similarity transforms.

ELIM(11)(SHARE1;) eliminates variables from equations by taking resultants.

ELLIPT(11)Some complete elliptic integrals and Jacobian elliptic functions.

FACEXP(15)(SHARE1;) Several functions for controlled expansion of rational
expressions.

FACT(11)Taylor series of the gamma function.

FFT(11)routines form Fast Fourier Transform and inverse FFTs

FIDO(11)(SHARE2;) a program named FIDO that acts like DDT's fido program 
without wasting a whole job slot in a crowded system.

FOPTIM(12)(SHARE2;) a program which accepts function-names as arguments, 
and calls OPTIMIZE on their definitions. Subject to same restrictions 
as OPTIMIZE but saves some of the clumsiness of accessing and 
restoring definition.

FORMAT(15)for pretty printing floating point numbers according to a specified
precision, total width, or fractional width.

FORMA1(15)same as above, but still nicer to the eye.

FORTRA(15)produces FORTRAN-compatible code from MACSYMA using TECO.

FOURIE(12)(SHARE1;) calculate Fourier series and Fourier integral
coefficients.  Also, there are various utility functions to do such
things as replace all occurrences of F(arg) by arg in an expression.

FUNCTS(15)assorted useful functions.  Their names are CONJUGATE,
REMPART, WRONSKIAN, ADJOINT, TRACEMATRIX, RATIONAL, ODD, UPROBE, 
KRONECKER, NONZEROANDFREEOF, LINEAR, and QUADRATIC.

GAMALG(15)Part of a package for Feynman diagram calculations in high-energy
physics. Takes traces (in n dimensions), squares amplitudes,
manipulates untraced strings of gamma matrices, and much more.
(Manual is in GAM USAGE)

GAMMA(15)(SHARE2;) computes a truncated asymptotic expansion for the gamma 
function.

GRIND(11)a TECO program which "grinds" (formats) BATCH files.

IFFUN(11)belongs to PLOT2

INTPOL(11)roots of transcendental equations by interpolation.

INTSCE(11)(SHARE1;) smartly integrates expressions of the form 
EXP(a*X+b)*COS(c*X)^n*SIN(c*X)^m .

INVERT(11)(SHARE1;) finds the inverse of a matrix using the adjoint method.
In MACSYMA, see $see<matrix!functions>.

ITENSR(11)MACSYMA's indicial tensor manipulation package. Unlike
ETENSR, which carries out tensor operations explicitly,
this package works on the tensor indices and is truly
symbolic.  $see<tensors>.

KACH(11)(SHARE1;) implementation of Hacijan's linear programming
algorithm.

LINDE1(11)(SHARE2;) solves first order linear ordinary differential
equations.

LRATS (11)two functions related to RATSUBST: one is a recursive form of
RATSUBST, and the other is an enhancement of RATSUBST which
allows multiple serial substitution in the manner of SUBST.

MMACRO(15)an implementation of user definable macsyma macros, which is
something equivalent to making the evaluator user extendable. ($see<macr>).

NDIFFQ(12)(SHARE2;) Numerical solutions to differential equations.

NTRIG(11)(SHARE1;) Computes trig functions with arguments of the form
N*%PI/10 for integer N.

NUMRCL(15)(NUMER;) Various numerical hacks including Gaussian quadratures,
simpson's rule, bessel functions, mappings over declared arrays,
smoothings and quadratures of functions defined by arrays.
coded by GJC. See the NUMER directory for other stuff.

ODE(11)solves ordinary differential equations of 1st, 2nd and a few higher
orders by a very large number of methods (including ODE2).

ODE2(11)solves ordinary differential equations of 1st and 2nd order.
$see<difintfun>.

OPTIMU(12)(NUMER;) Functions for generating programming constructs from
macsyma mathematical expressions. Automatic optimizing, MODE
declaration, and function defining. -GJC.

OPTMIZ(12)(SHARE2;) does analytic optimization.  Finds the stationary
points of a multivariate objective function.

OPTVAR(12)(SHARE2;) does variational optimization: the calculus of
variations, the maximum principle, and optimal control.

PFAFF(11)(SHARE2;) contains a function which evaluates Pfaffians.

PINVRS(11)(SHARE2;) computes matrix inverse by partitioning.

PLOT2(11)plotting for Tektronix 4013, Imlacs the XGP and the Gould 
lineprinter capabilities include 