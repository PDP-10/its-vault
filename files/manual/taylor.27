@Comment<(c) Copyright 1983 Massachusetts Institute of Technology>
@Section[Taylor Series]
@Label[taylor]

@begin(function)
@fcn[Name="TAYLOR", Args="exp, var, pt, pow"]
expands the expression @i[exp] in a truncated Taylor series (or
Laurent series, if required) in the variable @i[var] around the point
@i[pt].  The terms through (@i[var]-@i[pt])^@i[pow] are generated. If
@i[exp] is of the form f(@i[var])/g(@i[var]) and g(@i[var]) has no
terms up to degree @i[pow] then TAYLOR will try to expand g(@i[var])
up to degree 2*@i[pow].  If there are still no non-zero terms TAYLOR
will keep doubling the degree of the expansion of g(@i[var]) until
reaching @i[pow]*2^n where n is the value of the variable
TAYLORDEPTH[3] @Index[TAYLORDEPTH].
@end(function)

The switch @var<TAYLOR_LOGEXPAND (default: TRUE)> controls
expansions of logarithms in TAYLOR series.  When TRUE all log's are
expanded fully so that zero-recognition problems involving logarithmic
identities do not disturb the expansion process.  However, this scheme
is not always mathematically correct since it ignores branch
information.  If TAYLOR_LOGEXPAND is set to FALSE, then the only
expansion of log's that will occur is that necessary to obtain a
formal power series.

When @var<TAYLOR_TRUNCATE_POLYNOMIALS (default: TRUE)> is FALSE,
polynomials input to TAYLOR are considered to have infinite precison;
otherwise they are truncated based upon the input truncation levels.

@var<TAYLOR_ORDER_COEFFICIENTS (default: TRUE)> controls the ordering of
coefficients in the expression.  The default (TRUE) is that coefficients of
taylor series will be ordered canonically.

If @var<MAXTAYORDER (default: TRUE)> is TRUE, then during algebraic
manipulation of (truncated) Taylor series, TAYLOR will try to retain
as many terms as are certain to be correct.

@Begin[Example]
(C1) TAYLOR(SQRT(1+A*X+SIN(X)),X,0,3);
                           2             2
             (A + 1) X   (A  + 2 A + 1) X
(D1)/R/  1 + --------- - -----------------
                 2               8

                      3      2             3
                  (3 A  + 9 A  + 9 A - 1) X
                + -------------------------- +  . . .
                              48
@hinge
(C2) %^2;
                              3
                             X
(D2)/R/      1 + (A + 1) X - -- +  . . .
                             6
@hinge
(C3) PRODUCT((X^I+1)^2.5,I,1,INF)/(X^2+1);

                          INF
                         /===\
                          ! !    I     2.5
                          ! !  (X  + 1)
                          ! !
                          ! !
                         I = 1
(D3)                     -----------------
                               2
                              X  + 1
@hinge
(C4) TAYLOR(%,X,0,3),KEEPFLOAT:TRUE;
                                  2           3
(D4)/R/      1.0 + 2.5 X + 3.375 X  + 6.5625 X  +  . . .
@hinge
(C5) TAYLOR(1/LOG(1+X),X,0,3);
                                  2       3
                    1   1   X    X    19 X
(D5)/R/             - + - - -- + -- - ----- +  . . .
                    X   2   12   24    720
@End[Example]

@i[Multivariate Taylor Series Expansions]

For multivariate functions, there are several ways of obtaining Taylor
series expansions.  If the variables are truly independent and all
singularities involve only one variable at a time then the expansion
may be done as follows:

@b[TAYLOR](exp, var1, pt1, ord1, var2, pt2, ord2,...)

or

@fcn[Name="TAYLOR", Args="exp,[var1,pt1,ord1],[var2,pt2,ord2],..."]

Naturally the two techniques may be intermixed.

However, if the variables are interdependent or singularities
involving some of the variables together can occur then the following
scheme is to be used:

@begin(function)
@fcn[Name="TAYLOR", Args="exp, [var1, var2, . . .], pt, ord"]
where each of @i[pt] and @i[ord] may be replaced by a list which will
correspond to the list of variables.  that is, the nth items on each
of the lists will be associated together.
@end(function)

@i[The user should be warned that this scheme uses the RATWTLVL scheme
implicitly whenever the variables are expanded to different orders.
In this case the user must not be trying to use RATWTLVL
simultaneously.]

Internally this is done in the following manner; for each X[i] substitute
@begin(example)
                                                  n
                                                   i
                                       X  -----> T   W .
                                        i             i

@end(example)

Then a term like X@+[2] Y@+[3] Z would become
@Begin[Example]
                                  2 n  + 3 n  + n
                                     1      2    3   2   3
                                 T                 W   W   W
                                                    1   2   3


                                  2 n  + 3 n  + n
                                     1      2    3   2   3
                                 T                 W   W   W
                                                    1   2   3

@end(example)
and truncation is done on T.  The W variables as well as T are not
seen by the user.  The following are examples of the various modes of
Taylor expansions.

@Begin[Example]
(C1) TAYLOR(SIN(X+Y),X,0,3,Y,0,3);

	     3		       2
	    Y		      Y
(D1)/T/ Y - -- + . . . + (1 - -- + . . .) X
	    6		      2

		   3			   2
	      Y	  Y	       2      1	  Y	       3
	 + (- - + -- + . . .) X  + (- - + -- + . . .) X  + . . .
	      2	  12		      6	  12

@hinge
(C2) TAYLOR(SIN(X+Y),[X,Y],0,3);
		    3	     2	    2	   3
		   X  + 3 Y X  + 3 Y  X + Y
(D2)/T/    X + Y - ------------------------- + . . .
			       6
@hinge
(C3) TAYLOR(1/SIN(X+Y),[X,Y],0,3);
                              3         2       2        3
             1     X + Y   7 X  + 21 Y X  + 21 Y  X + 7 Y
(D3)/T/    ----- + ----- + ------------------------------- + . . .
           X + Y     6                   360
@end(example)

If one wants to handle asymptotic expansions a facility exists
to some extent. It may be invoked as follows.

@begin(function)
@fcn[Name="TAYLOR", Args="exp, [x,pt,ord,ASYMP]"]
will give an expansion of ]exp@r[ in negative powers of (]x-pt@r[).  The highest order term will be 

@center[@i<(x - pt)^(-ord)>]
@end(function)

The @i[ASYMP] is a syntactic device and not to be assigned to; for
example, one types TAYLOR(F(X),[X,0,4,ASYMP]).

If the user is expanding polynomials he may specify a truncation level
of INF in which case the expansion will never truncate.

@begin(function)
@fcn[Name="DEFTAYLOR", Args="function, exp"]
allows the user to define the Taylor series (about 0) of an arbitrary
@i[function] of one variable as @i[exp] which may be a polynomial in
that variable or which may be given implicitly as a power series using
the SUM function.

In order to display the information given to DEFTAYLOR one can use
POWERSERIES(F(X),X,0). (see below).
@Begin[Example]
(C1) DEFTAYLOR(F(X),X**2+SUM(X**I/(2**I*I!**2),
        I,4,INF));
(D1)                          [F]
@hinge
(C2) TAYLOR(%E**SQRT(F(X)),X,0,4);
                     2         3          4
                    X    3073 X    12817 X
(D2)/R/     1 + X + -- + ------- + -------- +  . . .
                    2     18432     307200
@End[Example]

@fcn[Name="TAYLORINFO", Args="exp"]
returns FALSE if @i[exp] is not a Taylor series.  (See also the function
TAYLORP @Index[TAYLORP].) Otherwise, a list of lists is returned describing the
particulars of the Taylor expansion. If any switches are given in the
expansion (e.g. ASYMP), the value of the switch is given in the
result.  For example,
@Begin[Example]
(C3) TAYLOR((1-Y^2)/(1-X),X,0,3,[Y,A,INF]);
	   2			        2
(D3)/T/ - A  + 1 - 2 A (Y - A) - (Y - A)

       2			    2
 + (- A  + 1 - 2 A (Y - A) - (Y - A) ) X

       2			    2   2
 + (- A  + 1 - 2 A (Y - A) - (Y - A) ) X

       2			    2   3
 + (- A  + 1 - 2 A (Y - A) - (Y - A) ) X  + . . .

@hinge
(C4) TAYLORINFO(D3);
(D4)                       [[Y, A, INF], [X, 0, 3]]
@End[Example]

@fcn[Name="POWERSERIES", Args="exp, var, pt"]
generates the general form of the power series expansion for @i[exp]
in the variable @i[var] about the point @i[pt] (which may be INF for
infinity).  If POWERSERIES is unable to expand @i[exp],
the TAYLOR function may give the first several terms of the series.

@var<VERBOSE (default: FALSE)> - if TRUE will cause comments about the
progress of POWERSERIES to be printed as the execution of it proceeds.

@Begin[Example]
(C1) VERBOSE:TRUE$
@hinge
(C2) POWERSERIES(LOG(SIN(X)/X),X,0);
Can't expand 
                                 LOG(SIN(X))

So we'll try again after applying the rule:
                                        d
                                      / -- (SIN(X))
                                      [ dX
                        LOG(SIN(X)) = I ----------- dX
                                      ]   SIN(X)
                                      /

In the first simplification we have returned:
                             /
                             [
                             I COT(X) dX - LOG(X)
                             ]
                             /


                    INF
                    ====        I1  2 I1             2 I1
                    \       (- 1) 2     BERN(2 I1) X
                     >      ------------------------------
                    /                I1 (2 I1)!
                    ====
                    I1 = 1
(D2)                -------------------------------------
                                      2
@End[Example]

@fcn[Name="PADE", Args="taylor-series,num-deg-bound,denom-deg-bound"]
returns a list of
all rational functions which have the given taylor-series expansion
where the sum of the degrees of the numerator and the denominator is
less than or equal to the truncation level of the power series, i.e.
are "best" approximants, and which additionally satisfy the specified
degree bounds.  Its first argument must be a univariate taylor-series;
the second and third are positive integers specifying degree bounds on
the numerator and denominator.

PADE's first argument can also be a Laurent series, and the degree
bounds can be INF which causes all rational functions whose total
degree is less than or equal to the length of the power series to be
returned.  Total degree is num-degree + denom-degree.  Length of a
power series is "truncation level" + 1 - minimum(0,"order of series").
