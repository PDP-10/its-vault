.chap (Predefined Constants and Functions,predefined)

.sec(Constants,predefined!constants)


A number of common mathematical constants have special names in MACSYMA;

.begin indent 4,0

5$var<%E/>1 - the base of the natural logarithms.

5$var<%PI/>1 - the transcendental number  .

5$var<%I/>1 -  the square root of -1.

5$var<%GAMMA/>1 - the Euler-Mascheroni constant 6G1.

5$var<INF/>1 -  real positive infinity.

5$var<MINF/>1 -  real minus infinity.

5$var<INFINITY/>1 -  complex infinity, an infinite magnitude of arbitrary phase angle.$$The infinity symbols have meaning only for certain functions, for example, LIMIT, INTEGRATE, SUM.*

5$var<TRUE/>1 -  the Boolean constant, true. (T in LISP)

5$var<FALSE/>1 -  the Boolean constant, false. (NIL in LISP)

5$var<%PHI/>1 -  (SQRT(5)+1)/2 = 1.618033989 .
If you want the Rational Function Package to know 
about %PHI do TELLRAT(%PHI^2-%PHI-1)$  ALGEBRAIC:TRUE$ .
.end

.sec(Functions,predefined!functions)

All of the functions mentioned below take one argument (shown as X) unless
stated otherwise.  The default values of MACSYMA variables which affect certain
functions are given in brackets with the function.

.next page
.subsec(Simple Functions,simple!functions)

.function(ABS,X)
 - absolute value of X


$var<ABSBOXCHAR/!> is the character used to draw absolute value
signs around expressions  which are more than a single line high.

.endfunction

.function(FLOAT,exp)
 - converts integers, rational numbers and bigfloats in 2exp1 to floating point numbers.  
.endfunction

.function(BFLOAT,X)
 - converts all numbers and functions of numbers to bigfloat numbers.
Setting $var<FPPREC/16> to N, sets the bigfloat precision to N digits.
If $var<FLOAT2BF/FALSE> is FALSE a warning message is printed when a floating point number is converted into a bigfloat number (since this may lead to loss of precision).

.endfunction


.function(ENTIER,X)
 - largest integer 7<* X, where X is numeric.
.endfunction

.function(SIGNUM,X)
 - if X<0 then -1 else if X>0 then 1 else 0.  If X is not numeric then a
simplified but equivalent form is returned. For example, SIGNUM(-X) gives -SIGNUM(X). 
.endfunction

.function(POLYSIGN,X)
 - same as SIGNUM but always returns a numerical result by looking at
the numerical factor of the highest degree term in X.
.endfunction

.function(MIN,|X1, X2, ...|)
yields the minimum of its arguments  (or returns a simplified form if some of
its arguments are non-numeric).
.endfunction

.function(MAX,|X1, X2, ...|)
yields the maximum of its arguments  (or returns a simplified form if some of
its arguments are non-numeric).

.endfunction

.subsec(Miscellaneous Functions,miscellaneous!functions)

.function(SQRT,X)
- the square root of X. It is represented internally by X^(1/2).
Also see $fun<ROOTSCONTRACT> in  section $ref<evsimpfun>.
.endfunction

.begin narrow 4
$var<RADEXPAND/TRUE> - if set to ALL will cause nth roots of
factors of a product which are powers of n to be pulled outside of the
radical.  E.g. if RADEXPAND is ALL, SQRT(16*X^2) will become 4*X .
More particularly, consider SQRT(X^2).
(a) If RADEXPAND is ALL or ASSUME(X>0) has been done, SQRT(X^2) will 
become X.
(b) If RADEXPAND is TRUE and DOMAIN is REAL (its default), SQRT(X^2) 
will become ABS(X).
(c) If RADEXPAND is FALSE, or RADEXPAND is TRUE and DOMAIN is COMPLEX, 
SQRT(X^2) will be returned.
(The notion of DOMAIN with settings of REAL or COMPLEX is still in 
its infancy.  Note that its setting here only matters when RADEXPAND is 
TRUE.)
.end

.function(ISQRT,X)
- takes one integer arg and returns the "integer SQRT" of its absolute value.
.endfunction

.function(EXP,X)
- the exponential function.  It is represented internally as %E^X.

.endfunction

.begin narrow 4
$var<DEMOIVRE/FALSE> - if TRUE will cause %E^[A+B*%I] to become
%E^A*(COS(B)+%I*SIN(B)) if B is free of %I.  A and B are not expanded.

.function(DEMOIVRE,exp)
will cause the conversion without setting the switch or
having to re-evaluate the expression with EV.
.endfunction

$var<%EMODE/TRUE> - when TRUE %E^[%PI*%I*X] will be simplified as follows:
it will become COS(%PI*X)+%I*SIN(%PI*X) if X is an integer or a multiple of
1/2, 1/3, 1/4, or 1/6 and thus will simplify further.  For other numerical X it will become %E^[%PI*%I*Y] where Y is X-2*k for some integer k such that ABS(Y)<1. If %EMODE is FALSE no simplification of %E^[%PI*%I*X] will take place.

$var<%ENUMER/FALSE> - when TRUE will cause %E to be converted into 2.718...
whenever NUMER is TRUE.   The default is that this conversion will take place only if the exponent in %E^X evaluates to a number.
.end

.function(LOG,X)
- the natural logarithm.
.endfunction
.begin narrow 4
$var<LOGEXPAND/TRUE> - causes LOG(A^B) to become B*LOG(A).  If it is set to
ALL, LOG(A*B) will also simplify to LOG(A)+LOG(B).  If it is set to SUPER,
then LOG(A/B) will also simplify to LOG(A)-LOG(B) for rational numbers
a/b, a#1.  (LOG(1/B), for B integer, always simplifies.)  If it is set
to FALSE, all of these simplifications will be turned off.

$var<LOGSIMP/TRUE> - if FALSE then no simplification of %E to a power containing LOG's
is done.

$var<LOGNUMER/FALSE> - if TRUE then negative floating point arguments to LOG will always be converted to their absolute  value before the log is taken.  If NUMER is also  TRUE, then  negative integer arguments to LOG will also be converted to their absolute value.

$var<%E_TO_NUMLOG/FALSE> - when TRUE, for "r" some rational number,
and "x" some expression, %E^(r*LOG(x)) will be simplified into x^r .
(If "r" is an integer, this simplification happens by default.) It
should be noted that the RADCAN command also does this transformation,
and more complicated transformations of this ilk as well.

$var<LOGNEGINT/FALSE> - if TRUE implements the rule 
LOG(-n) -> LOG(n)+%i*%pi   for n a positive integer.
.end
.scon
The $fun<LOGCONTRACT> command  $see<evsimpfun> "contracts" expressions containing LOG.

.function(PLOG,X)
- the principal branch of the complex-valued natural logarithm with
-%PI < arg(X) 7<* +%PI .
.endfunction

.function(BINOMIAL,|X, Y|)
- the binomial coefficient X*(X-1)*...*(X-Y+1)/Y!. If X and Y are integers, the binomial coefficient is
actually computed. If Y or X-Y is an integer, the binomial coefficient is
simplified to a polynomial.

.endfunction

.function(RANDOM,X)
 - returns a random integer between 0 and X-1.  If no argument is
given then a random integer between -2^[35] and 2^[35]-1 is returned.  If X is FALSE
then the random sequence is restarted from the beginning.
.endfunction

.function(FIB,X)
 - the Xth Fibonacci number with FIB(0)=0, FIB(1)=1, and FIB(-N)=(-1)^[(N+1)]*FIB(N).  PREVFIB is FIB(X-1), the Fibonacci number preceding the last one computed.
.endfunction

.function(FIBTOPHI,exp)
converts FIB(N) to its closed form definition.
This involves the constant %PHI (= (SQRT(5)+1)/2 = 1.618033989).
.endfunction

.function(GENFACT,|X, Y, Z|)
is the generalized factorial of X which is: X*(X-Z)*(X-2*Z)*...*(X-(Y-1)*Z). 
Thus, for integral X, GENFACT(X,X,1)=X! and GENFACT(X,X/2,2)=X!!

.endfunction

.function(FACTORIAL,X)
- The factorial function.  FACTORIAL(X) = X! .  For other routines
related to factorials, see $ref<combfun>.
.endfunction

.function(GAMMA,X)
- the gamma function. GAMMA(I)=(I-1)!  for I a positive integer.

.endfunction

.begin narrow 4
$var<GAMMALIM/1000000> controls simplification of the gamma function for
integral and rational number arguments.  If the absolute value of the argument
is not greater than GAMMALIM, then simplification will occur.  Note that the
FACTLIM switch $see<mathematical!operators> controls simplification of the
result of GAMMA of an integer argument as well.  Also see $ref<combfun>. 
.end

.function(BETA,|X, Y|)
- same as GAMMA(X)*GAMMA(Y)/GAMMA(X+Y)

.endfunction

.function(ERF,X)
 - the error function, whose derivative is:  2*EXP(-X^2)/SQRT(%PI).
.endfunction

.function(EULER,X)
 - gives the Xth Euler number for integer X.
.endfunction

.function(BERN,X)
- gives the Xth Bernoulli number for integer X.

.endfunction

.begin narrow 4
$var<ZEROBERN/TRUE> if set to FALSE excludes the zero BERNOULLI numbers.
.end

.function(ZETA,X)
 - gives the Riemann zeta function for certain integer values of X.
.endfunction

.begin narrow 4
$var<ZETA%PI/TRUE> if FALSE, suppresses ZETA(n) giving
coeff*%PI^n for n even.
.end

.function(PSI,X)
 - derivative of LOG(GAMMA(X)).  At this time, MACSYMA does not have numerical
evaluation capabilities for PSI.

.endfunction

.function(DELTA,X)
This is the Dirac Delta function.  Currently only LAPLACE
knows about the DELTA function:
.example
(C1) LAPLACE(DELTA(T-A)*SIN(B*T),T,S);

Is A positive, negative or zero?

POS;
					  - A S
(D1) 			       SIN(A B) %E
.end
.endfunction

.subsec(Trigonometric Functions,trigonometric!functions)


This section outlines the way in which trigonometric functions are called in MACSYMA.  The user should also read Section 2 of the MACSYMA Primer [Mo5]

.begin turn on "_"
_2Circular Functions*

_$fun<SIN>, $fun<COS>, $fun<TAN>, $fun<COT>, $fun<SEC>, $fun<CSC>

_2Inverse Circular Functions*

_$fun<ASIN>, $fun<ACOS> , $fun<ATAN> , $fun<ACOT> , $fun<ASEC> , $fun<ACSC>


.function(ATAN2,|Y,X|)
- yields the value of ATAN(Y/X) in the interval -%PI to %PI.

.endfunction

_2Hyperbolic Functions*

_$fun<SINH> , $fun<COSH>  , $fun<TANH>  , $fun<COTH>, $fun<SECH>   , $fun<CSCH>


_2Inverse Hyperbolic Functions*

_$fun<ASINH> , $fun<ACOSH> ,$fun<ATANH> , $fun<ACOTH> , $fun<ASECH>, $fun<ACSCH>
.end


$var<TRIGSIGN/TRUE> - if TRUE permits simplification of negative arguments to
trigonometric functions. E.g., SIN(-X) will become -SIN(X) only if TRIGSIGN is
TRUE.

$var<EXPONENTIALIZE/FALSE> - if TRUE will cause all circular and hyperbolic
functions to be converted to exponential form.

.function(EXPONENTIALIZE,exp)
will cause the conversion to exponential form of an
expression without setting the switch or having to re-evaluate the
expression with EV.
.endfunction

$var<LOGARC/FALSE> - if TRUE will cause the inverse circular and hyperbolic functions to be converted into logarithmic form

.function(LOGARC,exp)
will cause this conversion for a particular expression without
setting the switch or having to re-evaluate the expression with EV.
.endfunction
.if lines < 7 then next page

.example once center
2Examples *
.begin group

(C1) SIN(%PI/12)+TAN(%PI/6);


                                  %PI       1
(D1)                          SIN(---) + -------
                                   12    SQRT(3)
.end
(C2) EV(%,NUMER);
(D2)          0.83616931

(C3) BETA(1/2,2/5);

.begin group
                             2
             SQRT(%PI) GAMMA(-)
                             5
(D3)         ------------------
                       9
                 GAMMA(--)
                       10
.end

(C4) EV(%,NUMER);
(D4)             3.67909235

(C5) DIFF(ATANH(SQRT(X)),X);

.begin group
                      1
(D5)          -----------------
              2 SQRT(X) (1 - X)
.end

(C6) SOLVE(X^2+10^5*X+1);
Solution

(E6)                 X =  - SQRT(2499999999) - 50000

(E7)                  X = SQRT(2499999999) - 50000

(D7)                            [E6, E7]

(C8) E7,NUMER;
(D8)                        X = -4.8828125E-4

(C9) BFLOAT(E7);
(D9)                   X = - 9.999999747378752B-6

(C10) FPPREC:25$

(C11) SIN(.5B0);
(D11)                4.794255386042030002732879B-1

.end

The trigonometric simplification routines  use declared information in some simple cases.  Declarations about variables are used as follows, e.g.

.example

(C5) DECLARE(J, INTEGER, E, EVEN, O, ODD)$

(C6) SIN(X + (J*E + 1/2)*%PI)$

(D6) 			  COS(X)

(C7) SIN(X + (O + 1/2)*%PI);


(D7) 			 - COS(X)

.end



.if lines < 10 then next page

.subsec(Transcendental Functions,trans!cend)

Basic simplification routines for the polylogs and
polygamma functions have been introduced in Macsyma. We have decided
to use subscripted notation in order to be consistent with standard
reference texts for these functions.  (Note that the the Macsyma
notation doesn't imply Macsyma can produce the definitions)

POLYGAMMAS:

 Notation: PSI[N](X) = DIFF(PSI[0](X),X,N) where PSI[0](X) =
DIFF(LOG(GAMMA(X)),X)

 Simplification: Closed forms for: (in SIN, COS, or ZETA functions)
rational X, N = 0; N integral, > -1 and X integral or half-integral;

 Notes: Currently there are no numerical routines for the polygammas.
The following flags permit some control over simplification, they MUST
be set to fixnum (integer) values:

$var<MAXPSIPOSINT/20> - the largest value of the integral part of X for which
a closed form will be computed.

$var<MAXPSINEGINT/-10> - for negative X > this no closed forms will be
computed.

 The following control simplification of PSI[0](P/Q) for P and Q
integral and 0 < P/Q < 1 (i.e. the fractional part of arguments)

$var<MAXPSIFRACNUM/4> - the largest P for which simplification occurs.

$var<MAXPSIFRACDENOM/4> - the largest Q for which simplification occurs.

POLYLOGS:

 Notation: LI[N](X) = INTEGRATE(LI[N-1](T)/T,T,0,X) where LI[1](X) = -
LOG(1-X)

 Simplification: Closed forms for argument 1, -1 when N is +integral
(involving ZETA functions); closed form for LI[2](1/2); numerical
routine for LI[2](X).

 Notes: The extension for large real values of X is adopted following
Lewin, i.e. when X is greater than unity LI[2](X) has - %I %PI LOG(X)
as its imaginary part. Currently this only concerns the numerical
routine.

 The Euler-Mascheroni constant, 6G1 is used along with the Polygamma
simplification routines to permit their reduction to closed forms.
The notation $var<%GAMMA/> is used; it can be defined as follows:
.example
				     M
				    ====
				    \	   1
           %GAMMA   =  	 limit	  (  >     - - LOG(M))
			 M -> INF   /	   N
				    ====
				    N = 1
.end
Currently %GAMMA has a NUMER property of .577215665 and a CONSTANT
property.

.if lines < 10 then next page
.sec(Complex Expressions,complex!expressions)

A complex expression is specified in MACSYMA by adding the real part of the
expression to %I times the imaginary part.  Thus the roots of the equation
.bcon
X^2-4*X+13=0 are 2+3*%I and 2-3*%I.

.example once center
2Examples*

(C1) (SQRT(-4)+SQRT(2.25))^2;

.begin group
                        2
(D1)        (2 %I + 1.5)
.end

(C2) EXPAND(%);

           6.0 %I - 1.75

(C3) EXPAND(SQRT(2*%I));

(D3)           %I + 1

.end

Note that simplification of products of complex expressions can be effected by
expanding the product.  Simplification of quotients, roots, and other functions of
complex expressions can usually be accomplished by using the $fun<REALPART>, $fun<IMAGPART>, $fun<RECTFORM>, $fun<POLARFORM>, $fun<ABS>, $fun<CARG> functions $see<extracting!expressions>.

