.function(SEND,|message|)
which will send your 2message* to some MACSYMA system programmer who is logged in at that time.  If the 2message* consists of more than one word, then 2message* must begin and end with double quotes.

.endfunction



.function(ARRAY,|name, dim1, dim2, ..., dimk|)
.scon
This sets up a k-dimensional array.  A maximum of five dimensions may
be used.  The subscripts for the i2th* dimension are the integers running from
0 to 2dimi*.  If the user assigns to a subscripted variable before declaring
the corresponding array, an undeclared array is set up.

Undeclared arrays, otherwise known as hashed arrays (because hash coding is done
on the subscripts), are more general than declared arrays.  The user does not
declare their maximum size, and they grow dynamically by hashing as more
elements are assigned values. The subscripts of undeclared arrays need not even
be numbers.  However, unless an array is rather sparse, it is probably more
efficient to declare it when possible than to leave it undeclared.  The ARRAY
function can be used to transform an undeclared array into a declared array.

.function(BLOCK,|[v1,...,vk], statement1,...,statementj|)
Blocks in MACSYMA are somewhat analogous to subroutines in FORTRAN or procedures in
ALGOL or PL/I.  Blocks are like compound statements but also enable the user to label statements within the block and
to assign "dummy" variables to values which are local to the block.
The 2vi* are variables which are local to the BLOCK and the 2stmti*
are any MACSYMA expressions.  If no variables are to be made local then the list
may be omitted.

A block uses these local variables to avoid conflict with variables having the
same names used outside of the block (i.e. global to the block).  In this case, upon entry to the block,
the global values are saved onto a stack and are inaccessible while the block is
being executed.  The local variables then are unbound so that they evaluate to
themselves.  They may be bound to arbitrary values within the block but when the
block is exited the saved values are restored to these variables.  The values
created in the block for these local variables are lost.  Where a variable is
used within a block and is not in the list of local variables for that block it
will be the same as the variable used outside of the block.

If it is desired to save and restore other local properties besides VALUE,
namely ARRAY (except for complete arrays - $see<compilation>), FUNCTION,
DEPENDENCIES, ATVALUE, MATCHDECLARE, ATOMGRAD, CONSTANT, AND NONSCALAR
$see<property!specification> then the function $fun<LOCAL> should be used
inside of the block with arguments being the names of the variables
$see<miscellaneous!functions>.

The value of the block is the value of the last statement or the value of the
argument to the function $fun<RETURN> which may be used to exit explicitly from the
block. The function $fun<GO> may be used to transfer control to the statement of the
block that is labeled with the argument to GO.  To label a statement, precede it
by an atomic argument as another statement in the BLOCK.  For example:
BLOCK([X],X:1,LOOP,X:X+1,...,GO(LOOP),...).  The argument to GO may be any
expression which evaluates to a label.  For example GO(IF X>Y THEN PLACE1 ELSE
COMPUTEPLACE(X)).  One cannot use GO to transfer to a label in a BLOCK other
than the one containing the GO.

Blocks typically appear on the right side of a function definition but can be used in
other places as well.

.endfunction