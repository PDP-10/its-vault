
RJF 09/10/76 19:22:29 
the flag float2bf (default, false)  if true inhibits "warning, float to big float conversion" message.
missing from manual.
   
RZ@MIT-MC 11/13/76 15:41:06
To: JCIUCB at MIT-MC
CC: APD at MIT-MC, JPG at MIT-MC, RZ at MIT-MC
IN THE NEXT MACSYMA THERE SHOULD BE A FAIRLY COMPLETE PRODUCT SIMPLIFYER.
IT SHOULD BE ABLE TO HANDLE PRODUCTS OF RATIONAL FUNCTIONS.
I'LL SEND YOU MORE DETAILS WHEN I GET ITWORKING.
   
AMENT@MIT-MC 12/13/76 18:05:13
To: APD at MIT-MC, JPG at MIT-MC
complaint about manual*
'quit' should be indexed as at p 111,blue manual.
also things like 'piece' and 'next' might be indexed under some
heading or other--hard to find when you think you might use
them.
   
JPG@MIT-MC 04/14/77 04:52:42
To: RWG at MIT-MC
CC: APD at MIT-MC
RWG@MIT-MC 04/13/77 08:11:31
linsolve([x^2+6*x+9],[x])
neither gets the right answer nor complains of nonlinearity.

One of the design features of LINSOLVE is that it would not check 
for linearity so as to be fast.  A note to this effect has been 
noted for the manual.
    
cffk@MIT-MC (Sent by JLK@MIT-MC) 04/21/77 13:04:51
To: APD at MIT-MC, JPG at MIT-MC, ELLEN at MIT-MC
Have you ever thought about having a section in the manual with
examples that "don't" work.  (Maybe it should be a primer section.)
(I'm not refering to things like INTEGRATE bugs but things like why
EV(SOLVE(x,x)); doesn't return [X=0] as it "should".)
It seems to be that an explanation of why they don't work would be
helpful for users, who often seem to trip over the same problems.  An
assembly of such examples could quickly be gotten from the Macsyma
mail.
   
JPG@MIT-MC 08/14/77 06:52:40
To: INFO-MACSYM at MIT-MC
[1] DECLARE(F,ANTISYMMETRIC); now works.  F may be a function of any 
number of args.  The sign is determined by the parity of interchanges 
needed in sorting the args.  E.g. F(A,B) gives F(A,B), 
F(B,A) gives -F(A,B), and F(A,A) gives 0.
[2] DECLARE(F,SYMMETRIC); may be used as a synonym for 
DECLARE(F,COMMUTATIVE);.
 
JPG@MIT-MC 08/20/77 03:50:34
To: INFO-MACSYM at MIT-MC
(Thanks to DAS,) there is a new command SORT(list,{optional-function}) 
of one or two args.  If given just one arg, a list, it sorts it using 
MACSYMA's built-in sorter, e.g. SORT([1/2,2,1]); gives [1/2,1,2]. 
If given two args, the second may be any user-supplied predicate-function 
of two args with which to sort by.  E.g., "<", ">" may be used which have 
access to ASSUME information.
Also, two predicates ORDERLESSP, ORDERGREATP of two args are now available 
to give the user access to MACSYMA's built-in sorter (known to LISPers as 
"GREAT").  Hence, SORT([1/2,2,1]); is equivalent to 
SORT([1/2,2,1],ORDERLESSP);.
   
JLK@MIT-MC 09/26/77 17:32:12
DESCRIBE(BATCH); RETURNS SOME PRETTY USELESS INFORMATION
 
BMT@MIT-MC 09/29/77 21:32:25
To: INFO-MACSYM at MIT-MC
CC: CMA at MIT-MC, JPG at MIT-MC
The file share;invert > finds the inverse of a matrix using the
adjoint method.  This allows a user to compute the inverse of a
matrix with bfloat entries or polynomials with floating pt. 
coefficients without converting to cre-form.  The determinant
command is used to compute cofactors, so if ratmx is false (the default)
the inverse is computed without changing the representation of the
elements.  The functions adjoint and invert are provided.  The
current (temporary?) implementation  is inefficient for matrices of
high order.
  
MACRAK@MIT-MC 10/31/77 13:29:44 Re: Writefile().
To: AMENT at MIT-MC
CC: APD at MIT-MC, JPG at MIT-MC
You're quite right about the syntax Writefile() not being mentioned
in the manual (the latest edition I have is the eighth (blue)).  It
should be.  It simply opens the default device and directory for
writing.  The default is generally the last device/directory you used.
    
JPG@MIT-MC 11/06/77 13:10:13
To: INFO-MACSYM at MIT-MC
CC: AMENT at MIT-MC
Of course, set ERREXP to e.g. FALSE, to unclutter MACSYMA.
 
JPG@MIT-MC 11/19/77 01:53:33
To: INFO-MACSYM at MIT-MC
CC: MQUIT at MIT-MC
Mail so far seems to be heavily in favor of interchanging ^G and ^^, 
so this will probably be done for next MACSYMA with a cautionary note 
on ^^ as suggested by CFFK.  As far as changes to other control characters 
are concerned: There is certainly no need to have ^H do a LISP break. 
(For any who do not know, ^B now does this as well.)  The thought was to 
have ^H do a rubout (as does the RUBOUT key, natch).  But MACRAK may be 
right, that this may be bad as no one else on ITS apparently treats 
BACKSPACE as RUBOUT, so this may lead to confusion when using other 
programs.  As far as having ^H do overstriking, I'm not sure.  Anyway, 
MRG would be the implementor here.  Votes?  I also wish to add here for 
the record that when I get around to it, ^X will be smarter and quit 
back to the nearest enclosing controlling program, i.e. MACSYMA top-level, 
the MACSYMA break handler, or behave like LISP ^X, depending on what the 
controlling environment was when typed.
   
JPG@MIT-MC 12/10/77 03:34:49
To: AMENT at MIT-MC
CC: APD at MIT-MC
AMENT@MIT-MC 12/09/77 12:35:11
(c1) a:b$ (c2) f(x):=1$ (c3) values;==>[a] (c4) functions;==>
(d4) [f(x)]     then   (c5) c:d$  (c6) g(y):=2$  and now
(c7) d3; ==> [a,c]  and (c8) d4; ==> [f(x),g(y)] 
and (c9) length(d3); {which was the piece of information
i was actually looking for, evidently mistakenly} ==> 2 {which in
my view is the wrong answer}.

Users add and delete info like VALUES and FUNCTIONS all the time. 
It is just too expensive to copy these lists each time a change is 
made.  Sorry.  You will have to use  
(C3) COPYLIST(VALUES); 
(C4) COPYLIST(FUNCTIONS); 
to get what you want if you need LENGTH to work.

APD: Please note the above for the manual.

AMENT@MIT-MC 12/16/77 17:36:53
Suggest 'level' and 'initialize' be defined in Glossary.
   
MACRAK@MIT-MC 12/16/77 18:19:04
New function Filelength documented in Fileop Usage Share; .
Takes arguments like Printfile, and returns length in characters.
    
JPG@MIT-MC 12/20/77 04:10:55
To: INFO-MACSYM at MIT-MC
The syntax BLOCK([...,var:value,...],body) is now allowed.  This 
is handled like BLOCK([...,var,...],var:value,body), except that 
in the former binding to "external" values is done.  E.g.
X:A$ BLOCK([X:B,Y:X+1],X*Y); gives (A+1)*B .
    
BMT@MIT-MC 12/20/77 18:18:48
To: JPG at MIT-MC, APD at MIT-MC
CC: RZ at MIT-MC, BMT at MIT-MC
In the next macsyma, or until someone puts it into the fix
file there is a new function primep, which does the obvious thing.
primep is true only for positive integers.
This fix will also end the ran out of primes bug, in modresult.
  
JPG@MIT-MC 12/22/77 04:20:02 Re: (for DAS)
To: INFO-MACSYM at MIT-MC
There is a new function called MAKELIST which, naturally, returns 
a list as value.  MAKELIST may be called as MAKELIST(exp,var,lo,hi) 
["lo" and "hi" must be integers], or as MAKELIST(exp,var,list).
In the first case MAKELIST is analogous to SUM, whereas in the second 
case MAKELIST is similar to MAP.
Examples:
   MAKELIST(CONCAT(X,I),I,1,6) yields [X1,X2,X3,X4,X5,X6]
   MAKELIST(X=Y,Y,[A,B,C]) yields [X=A,X=B,X=C]
  
JPG@MIT-MC 12/22/77 10:15:52
To: INFO-MACSYM at MIT-MC, AMENT at MIT-MC
PARTITION which used to work only on sums and products, now also 
works on lists.  E.g. PARTITION([A,B,F(A),C],A); gives 
[[B,C],[A,F(A)]].

JPG@MIT-MC 12/31/77 19:47:07
To: INFO-MACSYM at MIT-MC
A new command ADDCOL exists which is similar to ADDROW (see the manual).
To clarify just what args are acceptable to these commands, the first 
arg must be a matrix, but the second arg may be either a list or a 
matrix, so these commands can be used to add one or more rows/columns
to a matrix.

JPG@MIT-MC 12/31/77 20:27:07
To: INFO-MACSYM at MIT-MC
Further clarification to ADDROW note: 
E.g. to add a row to the top of a matrix M, 
ADDROW(MATRIX(list),M); works.
   
JPG@MIT-MC 01/05/78 13:14:38
To: INFO-MACSYM at MIT-MC
For DAS:
[1] There is a new command SUBLIST(L,F) which takes two args, 
a list L and a function F, and which returns the list of elements 
of L for which the function F returns TRUE. 
E.g., SUBLIST([1,2,3,4],EVENP); returns [2,4].

[2] There is now a set manipulation package on the SHARE directory, 
which contains commands such as UNION, INTERSECTION, COMPLEMENT, etc.
For a description, do :PRINT SHARE;SET USAGE at top-level, or 
equivalently in MACSYMA, do PRINTFILE(SET,USAGE,DSK,SHARE); .
 
JPG@MIT-MC 01/10/78 05:45:34
To: INFO-MACSYM at MIT-MC
CC: RWG at MIT-MC, REM at MIT-MC, RJF at MIT-MC
It is now possible to compute bigfloats with a precision of FPPREC
digits, but to have them printed with a smaller number of digits, 
namely, the value of the new option FPPRECPRINT.  If FPPRECPRINT 
is 0 (the default), or >= FPPREC, then the value of FPPREC controls
the number of digits used for printing, as before.  However, if 
FPPRECPRINT has a value between 2 and FPPREC-1, then it controls the 
number of digits used.  (The minimal number of digits used is 2, 
one to the left of the point and one to the right.  The value 1 for
FPPRECPRINT is illegal.)

CFFK@MIT-MC 01/10/78 09:50:58 Re: ALLROOTS knows about PROGRAMMODE
To: INFO-MACSYM at MIT-MC
PROGRAMMODE:TRUE$ ALLROOTS(X^2-1); ==> [X=1.0,X=-1.0] (With PROGRAMMODE:FALSE
you get the solutions put in E-Labels.)
   
APD@MIT-MC 01/10/78 19:04:05
ADD IC1,BC1 TO ODE2 DESCRIPTON

JPG@MIT-MC 01/10/78 20:59:15 Re: manual
To: APD at MIT-MC
CC: JPG at MIT-MC
[1] XTHRU: mention "cross multiplication".
[2] Much of the ILT example is now different.  Please check out.
  
JPG@MIT-MC 01/11/78 01:41:39
To: INFO-MACSYM at MIT-MC
CC: RWG at MIT-MC, RJF at MIT-MC, REM at MIT-MC
For all you BFLOAT fans:  That new flag has been renamed 
FPPRINTPREC.
  
JPG@MIT-MC 01/11/78 02:54:58
To: ELIZC at MIT-MC
CC: ELLEN at MIT-MC, APD at MIT-MC, RAB at MIT-MC
ELIZC@MIT-MC 01/10/78 17:47:10
The example given for ILT in the manual no longer seems to work.

The EXAMPLE command had a bug in it which has been fixed.  However, 
ILT now gives a different answer.  I have no way of knowing whether 
it was correct before or whether the current answer is correct.

BMT@MIT-MC 01/17/78 00:49:44
To: RJF at MIT-MC, WEC at MIT-MC, INFO-MACSYM at MIT-MC

  There is a new function in the current Macsyma, 
Pade(taylor-series, num. deg bound, denom deg bound) Its
first argument must be a univariate taylor-series, the
second and third are positive integers specifying degree
bounds of the numerator and denominator.  PADE returns a
list of all rational functions which have the given
taylor-series expansion where the sum of the degrees of the
numerator and the denom.  is less than or equal to the
truncation level of the power series, i.e. are "best"
approximants, and which additionally satisfy the specified
degree bounds. 
 
BMT@MIT-MC 01/19/78 21:44:55
To: INFO-MACSYM at MIT-MC

  Pade's first argument can be a Laurent series, and the degree bounds
can be inf which causes all rational functions whose total degree
is less than or equal to the length of the power series to be returned.
Total degree is num-degree + denom-degree.  Length of a power series
is "truncation level" + 1 - minimum(0, "order of series").
    
MACRAK@MIT-MC 01/22/78 18:54:38
To: MATHLAB at MIT-MC
Full documentation for Funprint is in Funpr > Libmax; .
 
APD@MIT-MC 01/25/78 18:31:45
collapse,ic1,etc
 
APD@MIT-MC 01/25/78 18:31:45
collapse,ic1,etc
 
ELLEN@MIT-MC 01/27/78 10:03:58
To: APD at MIT-MC
CC: JPG at MIT-MC

    OCKEN@MIT-MC 01/26/78 17:33:43
    HOW ARE THINGS?
    IT TURNS OUT I HAD BEEN MAKING THE SAME ERROR MANY TIMES OVER,
    NAMELY I ALWAYS WROTE STATEMENTS SUCH AS

    DO[A:0.LOOP.A:A+1,....GO(LOOP)]  OR THEN[......]  ETC.

    THIS DOES NOT WORK BECAUSE A STATEMENT LIST IS NOTT
    COMPILED AS A BLOCK.  OF COURSE, AS MRG??  POINTED OUT
    THE CORRECT METHOD IS DO BLOCK( .......) OR THEN(BLOCK(....)

    I BELIEVE THIS ERROR IS WORTH MENTIONING IN THE MANUAL,
    SINCE THE EXAMPLES GIVEN INTHE MANUAL WHICH I HAVE
    ARE ALL OF THE FORM DO[    ,    ,.....], FROM WHICH
    ONE MIGHT INDEED RECEIVE THE IMPRESSION  THAT THIS
    IS THE WAY TO PROGRAM A BLOCK ALSO.   SEE WHAT I MEAN?

    AGAIN, THANKS FOR ALL YOUR HELP
    
ELLEN@MIT-MC 01/27/78 10:03:58
To: APD at MIT-MC
CC: JPG at MIT-MC

    OCKEN@MIT-MC 01/26/78 17:33:43
    HOW ARE THINGS?
    IT TURNS OUT I HAD BEEN MAKING THE SAME ERROR MANY TIMES OVER,
    NAMELY I ALWAYS WROTE STATEMENTS SUCH AS

    DO[A:0.LOOP.A:A+1,....GO(LOOP)]  OR THEN[......]  ETC.

    THIS DOES NOT WORK BECAUSE A STATEMENT LIST IS NOTT
    COMPILED AS A BLOCK.  OF COURSE, AS MRG??  POINTED OUT
    THE CORRECT METHOD IS DO BLOCK( .......) OR THEN(BLOCK(....)

    I BELIEVE THIS ERROR IS WORTH MENTIONING IN THE MANUAL,
    SINCE THE EXAMPLES GIVEN INTHE MANUAL WHICH I HAVE
    ARE ALL OF THE FORM DO[    ,    ,.....], FROM WHICH
    ONE MIGHT INDEED RECEIVE THE IMPRESSION  THAT THIS
    IS THE WAY TO PROGRAM A BLOCK ALSO.   SEE WHAT I MEAN?

    AGAIN, THANKS FOR ALL YOUR HELP
    
BMT@MIT-MC 02/13/78 20:51:06
To: INFO-MACSYM at MIT-MC
 For the next macsyma (268), the lisp variable genvar used in the
rational function package has been changed and no longer has its
length in its car.  I believe I have appropriately modified all
of the Macsyma source files, but beware of recompiling out of
core files for the current Macsyma.
  Genvar is now just a list of gensyms, initially nil.
    
MACRAK@MIT-MC 02/17/78 18:24:40
To: APD at MIT-MC
CC: RZ at MIT-MC
The manual should probably mention that Powerseries asks about the
sign and zero-or-nonzero'ness of I1 etc and that you should answer
Pos or Nonzero at least until this gets fixed by local Assume's.
One problem might be an index varying from 0 to inf.  I think that
has come up.
  
JPG@MIT-MC 02/23/78 12:06:43
To: INFO-MACSYM at MIT-MC
The use of the word "INTEGER" in using the MODEDECLARE and ARRAY 
commands is misleading as fixnums (one-machine-word integers) are 
meant.  Hence, the word "FIXNUM" should be used instead. 
Eventually the word "INTEGER" as an alternative may be flushed.
    
JPG@MIT-MC 02/23/78 13:08:44
To: ELLEN at MIT-MC, APD at MIT-MC, MRG at MIT-MC
CC: RJF at MIT-MC
DESCRIBE of things like MATRIX and SIN should work.
 
JPG@MIT-MC 02/26/78 11:16:56
To: INFO-MACSYM at MIT-MC
MACSYMA #268 has just been created.  
New features:

[1] The LISP function SUPERVISOR mentioned in the manual no longer exists.

[2] \ (backslash) now preserves the case (upper or lower) of the next 
character input.  Some day "-strings will do the same wrt the characters
enclosed.

[3] "FIXNUM" should be used instead of "INTEGER" in calls to the 
MACSYMA commands ARRAY and MODEDECLARE to avoid misunderstandings, 
as only single-word integers, i.e. FIXNUMs are meant.  For the time 
"INTEGER" will also be accepted.

[4] The JCL line may now be used to load in someone else's 
MACSYM (INIT) file.  E.g. to get the one on JLK%; one can load up a 
MACSYMA with  :A JLK%;<return> .  To get e.g. (INIT);BERN MACSYM one can 
type :A BERN<return> .  (Notice the importance of the semi-colon.)
This feature may also be used to cause no MACSYM (INIT) file to be used, 
even if you have one, by using a random name as in  :A FOO;<return> .

JPG@MIT-MC 02/28/78 03:22:13
To: INFO-MACSYM at MIT-MC
The LOGEXPAND scheme has been reorganized.  LOGEXPAND now has default 
value TRUE.
If TRUE, LOG(X^2) simplifies into 2*LOG(X).
If set to ALL, LOG(X*Y) will also simplify into LOG(X)+LOG(Y).
(If set to SUPER, LOG(m/n) will also simplify into LOG(m)-LOG(n), 
for rational number m/n, m#1.  (LOG(1/n), n integer, always simplifies.))
If set to FALSE, all of these simplifications will be turned off. 
Hence, the only real change is in the ability to turn off simplification 
of LOG(X^2).
    
JPG@MIT-MC 03/04/78 05:18:49
To: MACRAK at MIT-MC
CC: APD at MIT-MC, MRG at MIT-MC, JLK at MIT-MC
MACRAK@MIT-MC 03/03/78 16:36:07
I suggest a Macsyma user function Scalarp, similar to Constantp and
Nonscalarp.  I also suggest that these functions should know about
constant non-scalars, of which there would be none initially.
After all, the concept of "constant" is not really related to the
concept of "scalar".

Fine with me.  You seem to know what you want to do here. 
Please take care of it.
   
DRB@MIT-MC 03/08/78 04:51:42
To: INFO-MACSYM at MIT-MC
The default value of REALONLY is now FALSE.

JONL@MIT-MC 03/09/78 20:32:54
To: (BUG MACSYM) at MIT-MC
CC: JPG at MIT-MC, APD at MIT-MC
Following interchange suggests the need either to turn off
the control characters in newio LISP, or else to document the
recuperations possible (true, nothing can be done for accidental
typeing of control-G).
TTY message from REM:
REM@MIT-MC 03/09/78 20:21:41
Thanks a lot, that worked, ^R undone by ^T so SAVE now works ok.  Will write it in my macsyma manual (version 7) for future reference!!
^_
MESSAGE FROM JONL HACTRN
JONL@MC 20:19:25  TYPE CONTROL-T
^_
MESSAGE FROM REM HACTRN
REM@MC 20:18:12 EVERYBODY: Does anyone know how to unwedge oneself from accidental ^R in macsyma?^_
   
JPG@MIT-MC 03/10/78 02:28:15
To: APD at MIT-MC
CC: JONL at MIT-MC, REM at MIT-MC, JLK at MIT-MC, JPG at MIT-MC
Please have the MACSYMA manual document all control characters, e.g. 
^R, ^T.  Thanks.
 
DRB@MIT-MC 03/12/78 15:56:53
To: INFO-MACSYM at MIT-MC
There is a new share file, NCHRPL FASL, which contains a routine NCHARPOLY
as an alternative to MACSYMA's CHARPOLY function.  For details see
SHARE;NCHRPL >.
 
MACRAK@MIT-MC 03/13/78 15:49:36
To: JPG at MIT-MC, JLK at MIT-MC, APD at MIT-MC
The simplification (a.b)^^-1 -> b^^-1 . a^^-1, which is valid
if a and b have inverses and dot is associative, is very useful.
But where should it be put?  Should it be a flag for the dot-simplifier
or ^^-simplifier, or for Expand or something, or should it be
automatic in Expand or some specialized simplifier?
   
JLK@MIT-MC 03/19/78 17:22:32
To: INFO-MACSYMA at MIT-MC
OPTIMIZE now treats its argument specially if it is a list, namely, the
list is spliced into the resulting output block, rather than being a
single item at the end.

A problem in the translator:
F(X) := BLOCK([y], DECLARE([X,Y],SPECIAL),...)  generates uncompilable
code due to the location of the SPECIAL declaration.  For now, you must
do F(X) := (DECLARE(X,SPECIAL), BLOCK(...)) until a more complex scheme
for declarations is implemented.
   
JPG@MIT-MC 03/21/78 04:35:31
To: INFO-MACSYM at MIT-MC
The command which converts from TAYLOR series representation directly into 
CRE representation has been renamed from SRRAT(?) to TAYTORAT.
 
JLK@MIT-MC 03/21/78 08:22:51
To: MACRAK at MIT-MC
CC: INFO-MACSYMA at MIT-MC
I agree with your observation about OPTIMIZE.  What I was trying to do was have
a convenient scheme for optimizing a DO-LIST and have it spliced into the resulting
optimize block.  I have changed it to treat a BLOCK with no local variables as
a special case instead.
    
JLK@MIT-MC 03/21/78 21:36:42
To: INFO-MACSYMA at MIT-MC
Translation of MACSYMA functions into LISP code now uses a different scheme
for function calls, namely, a regular LISP function call is generated
(except of course for special forms like array functions or MFEXPR*'s).  At
runtime, an undefined function handler is provided which will try to
call an MEXPR version of the function (MACSYMA code) if no translated
LISP version exists.  This has the effect of the function calls being
efficient when the externally referenced functions are translated or
compiled, but the function is still runable if only MACSYMA code
versions of the other functions exist.

Also, the scheme for compiler declarations of special variables has been
significantly improved, so the frequency of encountering compiler
problems due to special declarations which are "too late", should be
reduced.
