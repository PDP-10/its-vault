.chap(List Handling and LISP-like functions,lisp!functions)

.function (APPLY,|function, list|)
gives the result of applying the 2function1 to the 2list1 of its
arguments.  This is useful when it is desired to compute the arguments
to a function before applying that function.  For example, if L is the
list [1, 5, -10.2, 4, 3], then APPLY(MIN,L) gives -10.2.  APPLY is
also useful when calling functions which do not have their arguments
evaluated if it is desired to cause evaluation of them.  For example,
if FILESPEC is a variable bound to the list [TEST, CASE] then
APPLY(CLOSEFILE,FILESPEC) is equivalent to CLOSEFILE(TEST,CASE).  In
general the first argument to APPLY should be preceded by a ' to to
make it evaluate to itself.  Since some atomic variables have the same
name as certain functions the values of the variable would be used
rather than the function because APPLY has its first argument
evaluated as well as its second.

.endfunction

.function(FUNMAKE,|name,[arg1,...,argn]|)
returns 2name*(arg1,...,argn) without calling the function 2name*.
.endfunction

.function(ARRAYMAKE,|name,[i1,i2,...]|)
returns  2name1[2i1,i2,...1].
.endfunction

.function (MAP,|fn, exp1, exp2, ...|)
 returns an expression whose leading operator is the same as that of
the 2expi1 but whose subparts are the results of applying 2fn1 to
the corresponding subparts of the 2expi1.  2Fn1 is either the name
of a function of n arguments (where n is the number of 2expi1) or is
a LAMBDA form of n arguments.


$var<MAPERROR/TRUE> - if FALSE will cause all of the mapping functions to (1)
stop when they finish going down the shortest 2expi1 if not all of the
2expi1 are of the same length and (2) apply 2fn1 to [2exp1, exp2,...1] if
the 2expi1 are not all the same type of object. If MAPERROR is TRUE then an
error message will be given in the above two instances.


One of the uses of this function is to MAP a function (e.g. PARTFRAC) onto each
term of a very large expression where it ordinarily wouldn't be possible to use the
function on the entire expression due to an exhaustion of list storage space in the
course of the computation.

.example
.begin group
(C1) MAP(F,X+A*Y+B*Z);
(D1) 			  F(B Z) + F(A Y) + F(X)
.end
(C2) MAP(LAMBDA([U],PARTFRAC(U,X)),X/(X^3+4*X^2+5*X+2));
.begin group
				1	 X
(D2) 			   X (----- - --------)
			      X + 2	     2
				      (X + 1)
.end

(C3) MAP(RATSIMP, X/(X**2+X)+(Y**2+Y)/Y);

.begin group
                      1
(D3)            Y + ----- + 1
                    X + 1
.end

(C4) MAP("=",[A,B],[-.5, 3,2.5]);
MAP IS TRUNCATING
(D4)                [A = -.5, B = 3]

.end
.endfunction

.function(MAPATOM,expr)
is TRUE if and only if 2expr1 is treated  by the MAPping routines a
as an "atom", a unit.   "Mapatoms" are atoms, numbers (including rational numbers), and subscripted variables.
.endfunction

.function (MAPLIST,|fn, exp1, exp2, ...|)
yields a list of the applications of 2fn1 to the parts of the 2expi1.  This
differs from MAP(2fn,exp1,exp2,...1) which returns an expression with the same
main operator as expi has (except for simplifications and the case where MAP
does an APPLY).  2Fn1 is of the same form as in MAP.

.endfunction

.function (FULLMAP,|fn, exp1, ...|)
is similar to MAP but it will keep mapping down all subexpressions
until the main operators of the exp2i1 (if there are more than one)
are no longer the same or until "mapatoms" (see above) are met.

The user should be aware that FULLMAP is used by the MACSYMA  simplifier for certain matrix manipulations; thus,   the user might see an error message concerning FULLMAP even though FULLMAP was not explicitly called by the user.

.example
(C1) A+B*C$

(C2) FULLMAP(G,%);

(D2)              G(B) G(C) + G(A)

(C3)  MAP(G,D1);

(D3)                G(B C) + G(A)

.end
.endfunction

.function (FULLMAPL,|fn, list1, ...|)
is similar to FULLMAP but it only maps onto lists and matrices

.example group
(C1) FULLMAPL("+",[3,[4,5]],[[A,1],[0,-1.5]]);

(D1)                      [[A + 3, 4], [4, 3.5]]

.end
.endfunction

.function(SCANMAP,|function,exp|)
recursively applies 2function1 to 2exp*.  This is most useful when "complete" factorization is desired, for example:

.example

(C1) EXP:(A^2+2*A+1)*Y + X^2$

(C2) SCANMAP(FACTOR,EXP);
				    2	   2
(D2) 			     (A + 1)  Y + X

.end

Note the way in which SCANMAP applies the given function FACTOR to the constituent subexpressions of 2exp1;  if another form of 2exp1 is presented to SCANMAP then the result may be different.  Thus, D2 is not recovered when SCANMAP is applied to the expanded form of 2exp1:

.example

(C3) SCANMAP(FACTOR,EXPAND(EXP));
.begin group
			   2		      2
(D3) 			  A  Y + 2 A Y + Y + X
.end
.end

Here is another example of the way in which SCANMAP recursively applies a given function to all subexpressions, including exponents:

.example
.begin group
				 
(C4) EXPR : U*V^(A*X+B) + C$
.end

(C5) SCANMAP('F, EXPR);
.skip 1
.begin group
		    F(F(F(A) F(X)) + F(B))
(D5) F(F(F(U) F(F(V)			  )) + F(C))
.end
.end
.endfunction

.function (APPEND,|list1, list2, ...|)
returns a single list of the elements of 2list11 followed by the
elements of 2list21,...

.example group
(C1) APPEND([Y+X,0,-3.2],[2.5E20,X]);

(D1)             [Y+X, 0, -3.2, 2.5E20, X]

.end
.endfunction

.function (CONS,|exp, list|)
returns a new list constructed of the element 2exp1 as its first element, followed by
the elements of 2list1.

.endfunction

.function (ENDCONS,|exp, list|)
returns a new list consisting of the elements of 2list1 followed by 2exp1.

.endfunction

.function (MEMBER,|exp, list|)
returns TRUE if 2exp1 occurs as a member of 2list1 (not within a member).  Otherwise
FALSE is returned.

.endfunction

.function (REVERSE,list)
reverses the order of the members of 2list1 (not the members themselves).

.scon
The functions $fun<FIRST>, $fun<REST>, $fun<LAST>, $fun<DELETE>, $fun<LENGTH>  ($ref<extracting!expressions>) also work on lists.

.skip 2
.example group once center
2Examples*

(C1) UNION(X,Y):=IF X = [] THEN Y ELSE
           IF MEMBER(T:FIRST(X),Y) THEN UNION(REST(X),Y)
           ELSE CONS(T,UNION(REST(X),Y)$

(C2) UNION([A,B,1,1/2,X**2],[-X**2,A,Y,1/2]);

                         2            2        1
(D2)                   [X , 1, B,  - X , A, Y, -]
                                               2
.end continue

In this example T is assigned the value of FIRST(X) in the call to MEMBER and is
referenced later in CONS(T,UNION(...)).

.example
(C3) BERNPOLY(X,5);
.begin group
                               4      3
                        5   5 X    5 X    X
(D3)                   X  - ---- + ---- - -
                             2      3     6
.end

(C4) MAPLIST(NUMFACTOR,%);
.begin group
                             5  5    1
(D4)                   [1, - -, -, - -]
                             2  3    6
.end

(C5) APPLY(MIN,%);
.begin group
                                  5
(D5)                            - -
                                  2
.end

.end
.endfunction

.function(MAKELIST,|exp,var,lo,hi|)
returns 
a list as value.  3lo1 and 3hi1 must be integers.
In this case MAKELIST is analogous to SUM.
.endfunction
.function(MAKELIST,|exp,var,list|)
returns 
a list as value.  In this
second case MAKELIST is similar to MAP.
.example
(C1)MAKELIST(CONCAT(X,I),I,1,6);
(D1)                      [X1,X2,X3,X4,X5,X6]

(C2)MAKELIST(X=Y,Y,[A,B,C])
(D2)                         [X=A,X=B,X=C]
.end
Note that in the example in C2, the equasion is mapped over the list
[A,B,C].
.endfunction
.sec (Property Specification Functions,property!specification,1)

The functions in this section are used to specify properties for
atomic variables.  A property is a piece of information which may be
utilized during the user's session with MACSYMA.  MODEDECLARE (sec.
$ref<compilation>) is one example of a property specification
function.  Also, the subsequent section deals with functions for
pattern matching and includes the function MATCHDECLARE.  As these are
somewhat complicated they are described in other sections.  However,
along with DECLARE (see below) and other functions, they all perform
the task of setting up information which is used later.

For most types of properties there exists a name which is an indicator of that
property.  For example the command GRADEF(F(X),SIN(X**2)); causes F to receive a
"gradef" property of LAMBDA([X],SIN(X**2)).  (The indicator is GRADEF and the property
is the lambda expression).

The presence of some properties is signified merely by the presence of
the indicator and requires no additional information.  These
indicators are known as flags.  For example %I has associated with it
the flag CONSTANT.  We can also speak of "constant" as being a
property of %I.

There are three principal operations which are needed by the user in
dealing with properties.  He must be able to set up the property, to
display it, and to remove it.  Also he may sometimes want to know what
properties he set up in his MACSYMA.  There are several lists (known
as information lists) which contain all of the atoms that possess a
particular property. Moreover, the value of the variable
$var<INFOLISTS/> is a list of the names of all of the information
lists in MACSYMA. These are:

$var<LABELS/> - all bound C,D, and E labels.

$var<VALUES/> - all bound atoms (set up by : , :: , or functional binding).

$var<FUNCTIONS/> -  all user defined functions (set up by f(x):=...).

$var<ARRAYS/> - declared and undeclared arrays (set up by : , :: , or a[x]:=...)

$var<MYOPTIONS/> - all options ever reset by the user (whether or not they get reset to their default value). 

$var<RULES/> - user defined pattern matching and simplification rules (set up by
$fun<TELLSIMP>, $fun<TELLSIMPAFTER>, $fun<DEFMATCH>, or, $fun<DEFRULE>.)

$var<ALIASES/> - atoms which have a user defined alias (set up by the $fun<ALIAS>,
$fun<ORDERGREAT>, $fun<ORDERLESS> functions or by DECLAREing the atom a NOUN).

$var<DEPENDENCIES/> - atoms which have functional dependencies (set up by the
$fun<DEPENDS> or $fun<GRADEF> functions).

$var<GRADEFS/> - functions which have user defined derivatives (set up by the
$fun<GRADEF> function).

$var<PROPS/> - atoms which have any property other than those mentioned above,
such as atvalues, matchdeclares, etc. as well as properties specified in the
DECLARE function.

In addition to these information lists similar lists may be generated by
the function
.inline function(PROPVARS,prop)
which yields a list of those atoms on the PROPS
list which have the property indicated by 2prop1.  Thus PROPVARS(ATVALUE) will
yield a list of atoms which have atvalues.

.subsec (Functions for Handling MACSYMA Properties,MACSYMA!properties)


.function (DECLARE,|a1, f1, a2, f2, ...|)
gives the atom 2ai1 the flag 2fi1.  The 2ai1's and 2fi1's may also be
lists of atoms and flags respectively in which case each of the atoms gets all of the properties.  The possible flags and their meanings are:


$flag<CONSTANT> - makes 2ai1 a constant as is %PI.

$flag<NONSCALAR> - makes 2ai1 behave as does a list or matrix with respect to the dot operator. $see<dotop>

$flag<NOUN> - makes the function 2ai1 a noun so that it won't be evaluated
automatically. $see<evaluation>

$flag<ALPHABETIC> - adds 2ai1 to MACSYMA's alphabet (initially A-Z,%).
Thus, DECLARE("_",ALPHABETIC) enables  NEW_VALUE to be used as a name.

$flag<EVFUN> - makes 2ai* known to the EV function so that it will get applied if
its name is mentioned.  Initial evfuns are $fun<FACTOR>, $fun<TRIGEXPAND>,
$fun<TRIGREDUCE>, $fun<BFLOAT>, $fun<RATSIMP>, $fun<RATEXPAND>, $fun<RADCAN>,
$fun<LOGCONTRACT>, $fun<RECTFORM>, and $fun<POLARFORM>.

$flag<EVFLAG> - makes 2ai1 known to the $fun<EV> function so that it will be bound
to TRUE during the execution of EV if it is mentioned.  Initial evflags are 
$var<FLOAT/>, $var<PRED/>, $var<SIMP/>, $var<NUMER/>, $var<DETOUT/>,
$var<EXPONENTIALIZE/>, $var<DEMOIVRE/>, $var<KEEPFLOAT/>, $var<LISTARITH/>, $var<TRIGEXPAND/>, $var<SIMPSUM/>, $var<ALGEBRAIC/>, $var<RATALGDENOM/>, $var<FACTORFLAG/>, and $var<LOGEXPAND/>. 

$flag<BINDTEST> -  causes 2ai* to signal an error if it ever is used in a computation
unbound (see Chapter $ref<debugmac>).

.endfunction

.function (ARRAYINFO,a)
returns a list of information about the array 2a1.  For hashed arrays
it returns a list of "HASHED", the number of subscripts, and the subscripts of every
element which has a value.  For declared arrays it returns a list of "DECLARED", the
number of subscripts, and the bounds that were given the the ARRAY function when it
was called on 2a1.

.example
(C1) B[1,X]:1$
(C2) ARRAY(F,2,3)$
(C3) ARRAYINFO(B);

(D3)            [HASHED, 2, [1, X]]
(C4) ARRAYINFO(F);

(D4)            [DECLARED, 2, [2, 3]]
.end

.endfunction

.function (PROPERTIES,a)
will yield a list showing the names of all the properties associated with
the atom 2a1.

.endfunction

.function (PRINTPROPS,|a, i|)
will display the property with the indicator 2i1 associated with the atom
2a1. 2a1 may also be a list of atoms or the atom ALL in which case all of the atoms with the given property will be used.  For example,
PRINTPROPS([F,G],ATVALUE).     PRINTPROPS is for properties that cannot otherwise be displayed, i.e. for ATVALUE,ATOMGRAD,GRADEF, and MATCHDECLARE.

.endfunction

.function (REMOVE,|a1, p1, a2, p2, ...|)
removes the property 2pi1 from the atom 2ai1.  2Ai1 and 2pi1 may also be
lists as with DECLARE.  2Pi1 may be any property e.g. FUNCTION, MODEDECLARE, etc.  It
may also be TRANSFUN implying that the translated LISP version of the function is to
be removed.  This is useful if one wishes to have the MACSYMA version of the function
executed rather than the translated version. 2Pi* may also be OP or OPERATOR to remove a syntax extension given to 2ai* (see Appendix II).
 If 2ai1 is "ALL" then the property
indicated by 2pi1 is removed from all atoms which have it.  Unlike the more specific
remove functions (REMVALUE, REMARRAY, REMFUNCTION, and REMRULE) REMOVE does not
indicate when a given property is non-existent; it always returns "DONE".

.endfunction

.subsec (Functions for Handling Users' Properties,uspropfun)

.function (PUT,|a, p, i|)
associates with the atom 2a1 the property 2p1 with the indicator 2i1.  This
enables the user to give an atom any arbitrary property.

.endfunction

.function (QPUT,|a, p, i|)
is similar to PUT but it doesn't have its arguments evaluated.

.endfunction

.function (GET,|a, i|)
retrieves the user property indicated by 2i1 associated with atom 2a1 or
returns FALSE if 2a1 doesn't have property 2i1.

.example
.begin group
(C1) PUT(%E,TRANSCENDENTAL,TYPE);
(D1)                          TRANSCENDENTAL
.end
(C2) PUT(%PI,TRANSCENDENTAL,TYPE)$

(C3) PUT(%I,ALGEBRAIC,TYPE)$

.begin group
(C4) TYPEOF(X) := BLOCK([Q], IF NUMBERP(X) THEN RETURN(ALGEBRAIC),
                   IF NOT ATOM(X) THEN RETURN(MAPLIST(TYPEOF, X)),
                   Q : GET(X, TYPE),
                   IF Q=FALSE THEN ERROR("NOT NUMERIC") ELSE Q)$
.end

(C5) TYPEOF(2*%E+X*%PI);

.begin group
NOT NUMERIC
QUIT
(C6) TYPEOF(2*%E+%PI);
(D6)          [[ALGEBRAIC, TRANSCENDENTAL], TRANSCENDENTAL]
.end

.end
.endfunction

.function (REM,|a, i|)
removes the property indicated by 2i1 from the atom 2a1.

.endfunction

.function (NUMERVAL,|var1, exp1, var2, exp2, ...|)
declares 2vari1 to have a numerical value of 2exp11 which is evaluated and
substituted for the variable in any expressions in which the variable occurs if
the $var<NUMER/> flag is TRUE. (see the EV function, sec. $ref<evsimpfun>).

.endfunction

