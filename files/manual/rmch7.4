.chap(|Declaring and Using Mathematical Information|,declar)
.<<check that "fdusm" isn't referred to anywhere... change to "declar">>

The commands in this chapter deal with the communication, use, and
manipulation of mathematical information about objects and functions
in MACSYMA.  Taken as a whole, this information comprises MACSYMA's
relational data base.  Facts take the form of either "predicates" or
"features".  A predicate is a well-formed formula consisting of a
relation and its arguments, e.g. A>B, or is a composition of
predicates using the logical operators NOT, AND, and OR.
Alternatively, certain facts about mathematical objects and functions
can be expressed more naturally as "features", i.e.  unary predicates.
For example, one can say that a certain constant is an INTEGER or that
a function is INCREASING.  Any feature, e.g. the linearity of F, can
also be expressed as a predicate via the relation KIND, as in
KIND(F,LINEAR).

.sec(Declaring and Assuming,decass)

The predicates and features communicated to MACSYMA with the ASSUME
and DECLARE commands may be tested with IS and FEATUREP and removed
with FORGET and REMOVE.  The facts in the relational data base are
used by the simplifier and several commands, like SIGN, the IF
statement, and INTEGRATE (certain integrations require sign
information).  MACSYMA has a rudimentary inference capability enabling
limited deductions from the data base.  It excels at taxonomic
deductions, e.g. KIND(N,EVEN) implies KIND(N,INTEGER), and simple
expression comparisons, e.g. X<0 and KIND(N,EVEN) imply Y^2+X^N>0.
The only sort of inequality information used by the inference
mechanism at the moment are relations between variables and other
variables and numbers.

The operator "=" is a total relation that holds between two
expressions if and only if the expressions are syntactically
identical.  It is not a mathematical comparison.  Thus,
IS((X+1)^2=X^2+2*X+1) would return FALSE.  The relation EQUAL, on
the other hand, is a mathematical comparison of its two arguments.  A
predicate involving EQUAL is true if and only if its arguments are
mathematically equivalent in light of the current data base.  Thus,
IS(EQUAL((X+1)^2,X^2+2*X+1)) would return TRUE.  The operators ">",
">=", "<", and "<=" are also mathematical comparisons.

MACSYMA currently recognizes and uses the following features of
objects and functions: INTEGER, NONINTEGER, EVEN, ODD, RATIONAL,
IRRATIONAL, REAL, IMAGINARY, COMPLEX, ANALYTIC, INCREASING,
DECREASING, ODDFUN (odd function), EVENFUN (even function), POSFUN
(positive function), COMMUTATIVE, ASSOCIATIVE, SYMMETRIC,
ANTISYMMETRIC.  The variable $var<FEATURES/> contains a list of these
and any others the user may add with the DECLARE command.

.function(ASSUME,|pred1, pred2, ...|)
first checks the specified predicates for redundancy
and consistency with the current data base.  If the predicates are
consistent and non-redundant, they are added to the data base; if
inconsistent or redundant, no action is taken.  ASSUME returns a list
whose entries are the predicates added to the data base and the atoms
REDUNDANT or INCONSISTENT where applicable.  ASSUME also accepts lists
of predicates as arguments.
.endfunction

.function(FORGET,|pred1, pred2, ...|)
removes the specified predicates from the data base.  Note that it
does not guarantee that equivalent facts are removed.  FORGET also
accepts lists of predicates as arguments.
.endfunction

.function(DECLARE,|a1, f1, a2, f2,...|)
declares each 2ai1 to have the corresponding feature 2f1i.  DECLARE(F,
INCREASING) is in all respects equivalent to
ASSUME(KIND(F,INCREASING)).  The 2ai1 and 2fi1 may also be lists of
objects or features.
.endfunction

.function(REMOVE,|a1, f1, a2, f2, ...|)
removes each feature 2fi1 from the corresponding object 2a1i.  The 2ai1 and
2fi1 may also be lists of objects or features.
.endfunction

.function(IS,pred)
attempts to determine whether the specified predicate is provable from
the facts in the current data base.  IS returns TRUE if the predicate
is true for all values of its variables consistent with the data base
and returns FALSE if it is false for all such values.  Otherwise, its
action depends on the setting of the switch $var<PREDERROR/TRUE>. IS errs
out if the value of PREDERROR is TRUE and returns UNKNOWN if PREDERROR
is FALSE.
.endfunction

.function(FEATUREP,|a,f|)
attempts to determine whether the object 2a1 has the feature 2f1 on the
basis of the facts in the current data base.  If so, it returns TRUE,
else FALSE.
.begin nofill group
(C1) DECLARE(J,EVEN)$

(C2) FEATUREP(J,INTEGER);
(D2)                                TRUE
.end
.endfunction

.function(SIGN,exp)
attempts to determine the sign of its specified expression on the
basis of the facts in the current data base.  It returns one of the
following answers: POS (positive), NEG (negative), ZERO, PZ (positive
or zero), NZ (negative or zero), PN (positive or negative), or PNZ
(positive, negative, or zero, i.e. nothing known).
.example
(C3) ASSUME(A>=B,B>=C,C>=D,D>=A);
(D3)                   [A >= B, B >= C, C >= D, D >= A]

(C4) SIGN(B-C);
(D4)                                 ZERO

(C5) DECLARE(K,INTEGER,L,ODD,F,INCREASING)$

(C6) ASSUME(X>0);
(D6)                               [X > 0]

(C7) F(X+3*Y^(L+24*K+1))-F(0);
                             L + 24 K + 1
(D7)                    F(3 Y             + X) - F(0)

(C8) SIGN(%);
(D8)                                 POS
.end
.endfunction

.function(ASKSIGN,exp)
first attempts to  determine whether the specified  expression is
positive, negative, or zero.  If it cannot, it asks the user the
necessary questions to complete its deduction.$$If the user wishes to
look at the expression more closely before replying, the variable
$var<ASKEXP/> is set to it.  Typing control-A results in a MACSYMA break 
$see<hints>; the user may now analyze the expression in order to give an
appropriate answer.*
The user's answer is recorded in the
data base for the duration of the current computation (one  "C-line"). The
value of ASKSIGN is one of POS, NEG, or ZERO.
.endfunction

.function(ASKINTEGER,|exp,optional-arg|)
attempts to determine from the data-base if 2exp1 is EVEN, ODD, or
INTEGER.  2exp1 is any valid macsyma expression and 2optional-arg1
is EVEN, ODD, or INTEGER and defaults to INTEGER if omitted.  It will
ask the user if it cannot tell otherwise and attempt to install the
information in the data-base if possible.
.endfunction

$var<DOMAIN/REAL> - if set to COMPLEX, SQRT(X^2) will remain
SQRT(X^2) instead of returning ABS(X).  The notion of a "domain" of
simplification is still in its infancy, and controls little more than
this at the moment.

    The following function, when applicable, gives the user relational
information.  However, it does NOT use the data base.

.function(ZEROEQUIV,|exp,var|)
tests whether the expression 2exp1 in the single variable 2var1 is
equivalent to zero.  It returns either TRUE, FALSE, or DONTKNOW.  For
example ZEROEQUIV(SIN(2*X) - 2*SIN(X)*COS(X),X) returns TRUE and
ZEROEQUIV(%E^X+X,X) returns FALSE.  On the other hand
ZEROEQUIV(LOG(A*B) - LOG(A) - LOG(B),A) will return DONTKNOW because
of the presence of an extra variable.  The restrictions are:
.begin indent 5,10;turn on ""
(1)(11)Do not use functions that MACSYMA does not know how to
differentiate and evaluate.

(2)(11)If the expression has poles on the real line, there may be
errors in the result (but this is unlikely to occur).

(3)(11)If the expression contains functions which are not solutions
to first order differential equations there may be incorrect results.

(4)(11)The algorithm uses floating-point evaluation at randomly
chosen points using a corresponding "epsilon" for carefully selected
subexpressions.  This is always somewhat hazardous, although the
algorithm tries to minimize the potential for error.
.end
.endfunction

.sec(Contexts,contexts)


    The context mechanism makes it possible for a user to bind
together and name a selected portion of his data base, called a
2context1.  Once this is done, the user can have MACSYMA assume or
forget large numbers of facts merely by activating or deactivating
their context.  Any atom can be a context, and the facts contained in
that context will be retained in storage until the user destroys them
individually by using FORGET or destroys them as a whole by using KILL
to destroy the context to which they belong.

    Contexts exist in a formal hierarchy, with the root always being
the context GLOBAL, which contains information about MACSYMA that some
functions need.  When in a given context, all the facts in that
context are "active" (meaning that they are used in deductions and
retrievals) as are all the facts in any context which is an inferior
of that context.  When a fresh MACSYMA is started up, the user is in a
context called INITIAL, which has GLOBAL as a subcontext.

.function(FACTS,context)
returns a list of the facts in the specified 2context.1  If no argument
is given, the default is to list the current context.  Facts which are
active, but in a different context are not listed.
.endfunction

.function(NEWCONTEXT,name)
creates a new (empty) context, called 2name1, which has
GLOBAL as its only subcontext.  The new context created will become the
currently active context. 
.endfunction

.function(SUPCONTEXT,|name,context|)
will create a new context (called 2name1) whose subcontext is 2context1.
If context is not specified, the current context will be assumed.  If
it is specified, context must exist.
.endfunction

$var<CONTEXT/INITIAL>. Whenever a user assumes a new fact, it is placed in the
context named as the current value of the variable CONTEXT.
Similarly, FORGET references the current value of CONTEXT.  To change
contexts, simply bind CONTEXT to the desired context.  If the
specified context does not exist it will be created by an invisible
call to NEWCONTEXT.  The context specified by the value of CONTEXT is
automatically activated.

$var<CONTEXTS/[INITIAL,GLOBAL]> is a list of the contexts which
currently exist, including the currently active context.

.function(KILLCONTEXT,|context1,context2,...,contextn|)
kills the specified contexts.  If one of them is the current context,
the new current context will become the first available subcontext of
the current context which has not been killed.  If the first available
unkilled context is GLOBAL then INITIAL is used instead.  If the
INITIAL context is killed, a new INITIAL is created, which is empty of
facts.  KILLCONTEXT doesn't allow the user to kill a context which is
currently active, either because it is a subcontext of the current
context, or by use of the function ACTIVATE.
.endfunction

.function(ACTIVATE,|cont1, cont2, ...|)
causes the specified contexts 2conti1 to be activated.  The facts in
these contexts are used in making deductions and retrieving
information.  The facts in these contexts are not listed when FACTS();
is done.
.endfunction

.function(DEACTIVATE,|cont1, cont2, ...|)
causes the specified contexts 2conti1 to be deactivated.
.endfunction

$var<ACTIVECONTEXTS/[]> is a list of the contexts which are active by
way of the ACTIVATE function, as opposed to being active because they
are subcontexts of the current context.

.example
(C9) CONTEXT:CON1$

(C10) DECLARE(M,INTEGER)$

(C11) FEATUREP(M,INTEGER);
(D11)                                TRUE

(C12) CONTEXT:CON2$

(C13) FEATUREP(M,INTEGER);
(D13)                               FALSE

(C14) DECLARE(N,INTEGER);
(D14)                                DONE

(C15) CONTEXT:CON1$

(C16) FEATUREP(M,INTEGER);
(D16)                                TRUE

(C17) FEATUREP(N,INTEGER);
(D17)                               FALSE

(C18) ACTIVATE(CON2)$

(C19) FEATUREP(N,INTEGER);
(D19)                                TRUE

(C13) CONTEXTS;
(D13)                    [CON2, CON1, INITIAL, GLOBAL]
.end

.function(LOCAL,|a1, a2, ...|)
causes the external facts about the objects 2a11, 2a12, ...  to be
forgotten for the duration of the enclosing BLOCK, independent of
context.  Any facts assumed about 2a11, 2a21, ... within the BLOCK
containing the LOCAL will be forgotten upon exit, again independent of
context.
.endfunction

.example

(C14) DECLARE(P,INTEGER)$

(C15) BLOCK(LOCAL(P),PRINT(FEATUREP(P,INTEGER)),DECLARE(P,IRRATIONAL))$
FALSE

(C16) FEATUREP(P,INTEGER);
(D16)                                TRUE

(C17) FEATUREP(P,IRRATIONAL);
(D17)                               FALSE
.end


