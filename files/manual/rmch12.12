.chap (Batch Functions,batchap)

.sec (Introduction,int)

    The Batch set of functions in MACSYMA, namely BATCH, DEMO, BATCHLOAD,
and BATCON (mnemonic for BATch CONtinue), provide a facility for executing
command lines stored on a disk file rather than in the usual on-line
mode. This facility has several uses, namely to provide a reservoir
for working command lines, for giving error-free demonstrations, or
helping in organizing one's thinking in complex problem-solving
situations where modifications may be done via the PDP-10 TECO file
editor.

    A batch file consists of a set of MACSYMA command lines, each with
its terminating ; or $, which may be further separated by spaces,
carriage- returns, form-feeds, and the like.  The BATCH and DEMO
functions have both a simple and more complicated format, which are
described below.

.sec ("The Simple Format",tsf)

.function (BATCH,|filename1, filename2, DSK, directory|)
.endfunction

    (The same function format holds for DEMO as well.) The arguments
to BATCH (or DEMO or BATCHLOAD) in this format specify the file which is to be
batched.  Here, each file is specified by two filenames of at most six
characters each, the device the file is on ( which is normally DSK),
and the user file directory.  E.g.  DEMO(TAYLOR,DEMO,DSK,DEMO) calls
for "demonstrating" (see below) the file TAYLOR DEMO on the DEMO disk
directory. Latter arguments to the BATCH or DEMO functions may always
be omitted if they are known from previous file- manipulating
functions.

    The BATCH function calls for reading in the command lines from the
file one at a time, echoing them on the user console, and executing
them in turn.  Control is returned to the user console only when
serious errors occur or when the end of the file is met.  Of course,
the user may quit out of the file- processing by typing control-G at
any point (see ) .

    $fun<DEMO> differs from BATCH only in that it pauses after the execution
of each command line, waiting for the user to type a space which tells
it to go on.  If the user types any other character, file-processing
will then terminate, giving control over to the user console.  (The
user may actually continue processing from the file at any time - see
the BATCON function below.)

.function(BATCHLOAD,|filespecification|)
Batches in the file silently without
terminal output or labels.  This is useful for batching in files which
set up functions, where you don't want to have to watch the batch file
print out.  It is also useful for a MACSYMA init file since it allows
you to write a batch file of MACSYMA commands you wish to have loaded,
e.g. MY SETUP, and then in your MACSYMA init file put the line
($BATCHLOAD $MY $SETUP).

$var<BATCHKILL/FALSE> if TRUE then the effect of all previous
BATCH files is nullified because a KILL(ALL) and a RESET() will be
done automatically when the next one is read in.  If BATCHKILL is
bound to any other atom then a KILL(BATCHKILL) will be done.


.sec ("The More Complicated Format",tmcf)

.function(BATCH,|[fn1, fn2, DSK, directory],<delay-switch>,<index-specification>|)
.endfunction
    The arguments to BATCH or DEMO in this mode are as follows:

    The first argument is the file specification (as above), enclosed
in brackets.

    The second argument, the delay-switch, may be answered by ON or
OFF (the default if it is omitted).  This switch has to do with the
temporary inability of LISP, the system underlying MACSYMA, to have
more than one input file open at a time. If in the course of batching
in a file of command lines, execution of a function forces a second
file to be input, this would ordinarily cause an error.  However,
setting the delay-switch to ON causes the entire batch file to be read
in before execution of it begins, thus preventing the error.  The
default for the delay-switch is OFF, as the circumstance described
above is not frequent, it takes some time to read in a batch file, and
one may always continue batching via the BATCON function.  As soon as
the inability of LISP is removed, this switch will no longer be
needed.

    The index-specification is given by one or two arguments, the
possibilities being: (In the following, m and n are positive
integers.)

    (i) m.  This indicates that processing is to begin with the mth
command line in the file.  Thus, the default for the
index-specification is 1.

    (ii) m, n.  This indicates that only the mth command line through
the nth command line are to be processed.

    (iii) a variable (say FOO).  FOO must be non-numeric and neither
TRUE nor FALSE.  This causes file-processing to begin at FOO&& (see )
and continue until the end of the file.  This makes it
unnecessary to count command lines as required by (i) above.

    (iv) variable (say FOO), continue-flag.  The continue-flag is
either ON (the default, and unnecessary) or OFF.  If OFF, this enables
one to separate a batch file into subfiles by prefixing a command line
in the file with FOO&&.  By using FOO as the index-specification, one
may execute only that subfile which begins with FOO and ends with some
other variable&&, or the end of file.  If the continue-flag is ON,
this causes mode (iv) to operate as (iii) above.

    One can see that BATCH(TAYLOR,DEMO,DSK,DEMO) and
BATCH([TAYLOR,DEMO,DSK,DEMO], OFF, 1) are equivalent.

.sec ("The BATCON Function",batconfun)

    The BATCON function is used to continue or change the last BATCH
or DEMO function, without it being necessary to mention again BATCH or
DEMO, the file specification, or the setting of the delay-switch.  Of
course, if one wishes to change any of these, a new call to BATCH or
DEMO is required.

    The possible arguments to BATCON are as follows:

    (i) a number

    (ii) number1, number2

    (iii) a variable

    (iv) variable, continue-flag

    The numeric arguments may involve the
variable BATCOUNT[0] which is set to the number of the last expression
BATCHed in from the file.  Thus BATCON(BATCOUNT-1) will resume
BATCHing from the expression before the last BATCHed in from before.
One other mode is possible:

    (v) skip-flag.  The skip-flag is useful if an error has occurred
while batching, or if the user wishes to interject command lines from
the console while in DEMO-mode and then to continue processing from
the file.  The skip- flag may be either TRUE or FALSE.  If FALSE, this
indicates that processing is to continue with the last command line
attempted (supposedly edited, in case of error); if TRUE, this
indicates that processing is to continue with the next (untried)
command line in the file.

.sec ("Miscellany",misc)

    (1) Comments may be added to batch files at any point, and will,
of course, be treated as such when batching in the file.  A comment is
any string beginning with /* and ending with */ as in PL/I.

    (2) Any command line in a batch file may begin with variable&&.
This labels that command line so that the file can be partitioned into
subfiles.  If not in a subfile mode, this prefix will be treated as a
comment.

    (3) When using the batch functions, it is inconvenient to keep
track of which Di label MACSYMA will assign to a computation; yet
later command lines often need to refer to an earlier computation.
One way to get around this, of course, is for the user to explicitly
label some of his command lines.  A function $fun<%TH/> is also provided,
such that %TH(i), where i is positive, refers to the result of the ith
previous command line.  E.g., %TH(1) and the variable % both refer to
the same computation.

    (4) When BATCHing in several files it is possible for one file to
unintentionally cause an error to occur in a subsequent one by
duplication of names or settings of options.  If the variable
BATCHKILL[FALSE] is TRUE however, then the effect of all previous
BATCH files is nullified because a KILL(ALL) and a RESET() will be
done automatically when the next one is read in.  If BATCHKILL is
bound to any other atom then a KILL(BATCHKILL) will be done.  (The
default value of BATCHKILL is FALSE meaning to do nothing.)

    (5) While BATCHing in a file which takes a lot of time to process
the user may leave his terminal unattended.  If an error occurs he may
want some special action to be taken automatically.  By setting the
option ERRORFUN to the name of a function of no arguments one can have
that function executed when any error occurs.  Useful functions are
QUIT and LOGOUT. However in the case of LOGOUT the user should also
set the switch TTYOFF to TRUE to prevent his job from hanging up in
the case it tries to output to the terminal (see ). In addition if a
file has been opened for writing, then a command to close it should be
executed before the LOGOUT.  Also, the user may wish to set
DYNAMALLOC[FALSE] to TRUE (see ) so that his job will not hang if
additional storage space is needed

    If the user is executing a function of his own and would like to
signal an error he can use the functions ERROR and ERRCATCH (see ).

    (6) If the user does not have a directory of his own then he can
use one of the USERSi directories to store his files.  He should identify them
as his in some fashion such as using his login name for the first file
names.

    (7) The DEMO file directory contains many demonstration files
which may be helpful to the user in learning to use MACSYMA.
