@Comment<(c) copyright 1983 massachusetts institute of technology>
@comment<Enhancements (c) Copyright 1983 Symbolics, Inc.>
@Chapter[Pattern Matching and Related Functions]
@Label[patternfun]

@Section[Type Testing Functions]
@Label[typtestfun]

@begin(function)
@fcn[Name="ATOM", Args="exp"]
is true if @i[exp] is atomic (i.e. a number or name) else FALSE.
Thus ATOM(5) is TRUE while ATOM(A[1]) and ATOM(SIN(X)) are FALSE.
(Assuming A[1] and X are unbound.)

@fcn[Name="SUBVARP", Args="exp"] 
is TRUE if @i[exp] is a subscripted variable, for example A[I].

@fcn[Name="CONSTANTP", Args="exp"]
is TRUE if @i[exp] is a constant (i.e. composed of numbers and %PI, %E,
%I or any variables declared constant (see @Ref[macsyma!properties]). else
FALSE.  Arithmetic functions whose arguments are constant as well as functions
and arrays which are DECLAREd constant are also considered to be
constants.

@fcn[Name="SCALARP", Args="exp"]
is TRUE if @i[exp] is a number, constant, or variable DECLAREd SCALAR
(see @Ref[property!specification]), or composed entirely of numbers,
constants, and such variables, but not containing matrices or lists.

@fcn[Name="NONSCALARP", Args="exp"]
is TRUE if @i[exp] is a non-scalar, i.e. it contains atoms declared as
non-scalars (see @Ref[property!specification]), lists, or matrices.

@fcn[Name="INTEGERP", Args="exp"]
is TRUE if @i[exp] is an integer else FALSE.

@fcn[Name="EVENP", Args="exp"]
is TRUE if @i[exp] is an even integer.  FALSE is returned in all other cases.

@fcn[Name="ODDP", Args="exp"]
is TRUE if @i[exp] is an odd integer.  FALSE is returned in all other cases.

@fcn[Name="FLOATNUMP", Args="exp"]
is TRUE if @i[exp] is a floating point number else FALSE.

@fcn[Name="BFLOATP", Args="exp"]
is TRUE if @i[exp] is a bigfloat number else FALSE.

@fcn[Name="NUMBERP", Args="exp"]
is TRUE if @i[exp] is an integer, a
rational number, a floating point number or a bigfloat else FALSE.

@fcn[Name="RATNUMP", Args="exp"]
is TRUE if @i[exp] is a rational number (includes integers) else FALSE.

@fcn[Name="PRIMEP", Args="exp"]
is TRUE if @i[exp] is a prime, FALSE if not.

@fcn[Name="SYMBOLP", Args="exp"]
returns TRUE if @i[exp] is a symbol or name, else
FALSE.  i.e., in effect, SYMBOLP(X):=ATOM(X) AND NOT NUMBERP(X) .

@fcn[Name="LISTP", Args="exp"]
is TRUE if @i[exp] is a list else FALSE.

@fcn[Name="MATRIXP", Args="exp"]
is TRUE if @i[exp] is a matrix else FALSE.

@fcn[Name="RATP", Args="exp"]
is TRUE if @i[exp] is in CRE or extended CRE form else FALSE.

@fcn[Name="TAYLORP", Args="exp"]
is TRUE if and only if
the @i[exp] is in Taylor series representation.

@fcn[Name="FREEOF", Args="x1, x2, ..., exp"]
yields TRUE if the @i[xi] do not occur in @i[exp] and FALSE otherwise.
The x@i[i] are atoms or they may be subscripted names, functions (e.g.
SIN(X) ), or operators enclosed in "s.  If @i[var] is a "dummy
variable" of @i[exp], then FREEOF(@i[var,exp]); will return TRUE.
"dummy variables" are things like the index of a sum or product, the
limit variable, and the definite integration variable.
example: FREEOF(I,'SUM(F(I),I,0,N)); returns true.
@Begin[Example]
(C1) FREEOF(Y,SIN(X+2*Y));
(D1)                    FALSE
@hinge
(C2) FREEOF(COS(Y),"*",SIN(Y)+COS(X));
(D2)                          TRUE
@End[Example]

@fcn[Name="EQUAL", Args="expr1,expr2"]
returns TRUE (or FALSE) if and only if @i[expr1] and
@i[expr2] are equal (or not equal) for all possible values of their
variables (as determined by RATSIMP).  Thus
IS(EQUAL((X+1)**2,X**2+2*X+1)) returns TRUE whereas if X is unbound
IS((X+1)**2=X**2+2*X+1) returns FALSE.
If a determination
can't be made with EQUAL then a simplified but equivalent form is
returned whereas = always causes either TRUE or FALSE to be returned.
All variables occurring in exp are presumed to be real valued.
EV(exp,PRED) is equivalent to IS(exp).
@Begin[Example]
(C1) IS(X**2 >= 2*X-1);
(D1)                               TRUE
@hinge
(C2) ASSUME(A>1);
(D2)                               DONE
@hinge
(C3) IS(LOG(LOG(A+1)+1)>0 AND A^2+1>2*A);
(D3)                               TRUE
@End[Example]
@end(function)

@Section[General Pattern Matching Functions]
@Label[patmatfun]

The pattern matching functions permit the user to test expressions for
combinations of syntactic and semantic patterns and to automatically
have variables set to parts of expressions which fit the patterns.
This enables one to transform an expression as well as to see if it
fits a pattern.

It is also possible to add simplification rules which apply to user or
system defined functions or operators.  In order to choose the
particular rule which applies, a pattern match must usually be
performed on the operands of the expression which is to be simplified.

@begin(function)
@fcn[Name="MATCHDECLARE", Args="patternvar, predicate, ..."]
associates a @i[predicate] with a @i[pattern] @i[variable] so that
the @i[variable] will only match expressions for which the
@i[predicate] is not FALSE.  (The matching is accomplished by one of
the functions described below).  For example after
MATCHDECLARE(Q,FREEOF(X,%E)) is executed, Q will match any expression
not containing X or %E.  If the match succeeds then the variable is
set to the matched expression.  The predicate (in this case FREEOF) is
written without the last argument which should be the one against
which the pattern variable is to be tested.  Note that the
@i[patternvar] and the arguments to the @i[predicate] are evaluated at
the time the match is performed.

The odd numbered argument may also be a list of pattern variables all
of which are to have the associated predicate.  Any even number of
arguments may be given.

For pattern matching, predicates refer to functions which are either
FALSE or not FALSE (any non FALSE value acts like TRUE).

MATCHDECLARE(var,TRUE) will permit var to match any expression.

PRINTPROPS([@i[v1,v2,]...],MATCHDECLARE)
(see @Ref[MACSYMA!properties]) will display the matchdeclare properties of the variables @i[v1,v2,]...

@fcn[Name="TELLSIMPAFTER", Args="pattern, replacement"]
defines a @i[replacement] for @i[pattern] which the MACSYMA
simplifier uses after it applies the built-in simplification rules.
The @i[pattern] may be anything but a single variable or a number.

@fcn[Name="TELLSIMP", Args="pattern, replacement"]
is similar to TELLSIMPAFTER but places new information
before old so that it is applied before the built-in simplification rules.  
TELLSIMP is used when it is important to modify
the expression before the simplifier works on it, for instance if the
simplifier "knows" something about the expression, but what it returns
is not to your liking.  If the simplifier "knows" something about the
main operator of the expression, but is simply not doing enough for
you, you probably want to use TELLSIMPAFTER.
The @i[pattern] may not be a sum, product, single variable, or number.

RULES @Index[RULES] is a list of names having simplification rules
added to them by DEFRULE, DEFMATCH, TELLSIMP, or TELLSIMPAFTER.
@Begin[Example]
(C1) MATCHDECLARE([XX,A,B],TRUE);
(D1)                                 DONE
@hinge
(C2) TELLSIMP(D[XX](A,B),B(XX)*DIFF(A(XX),X)-A(XX)*DIFF(B(XX),XX));
(D2)                      [SUBVARRULE1, SIMPMQAPPLY]
@end[example]
SUBVARRULE1 is the name assigned to the TELLSIMP rule from (C2).
@begin[example]
(C3) D[Z](X,Y);
                           d                  d
(D3)                 Y(Z) (-- (X(Z))) - X(Z) (-- (Y(Z)))
                           dX                 dZ
@End[Example]
Another example of the use of TELLSIMP is shown in the following:
@Begin[Example]
(C4) 0^0;
 0
0  has been generated
@End[Example]
To override such default simplification, the user can use the
following paradigm:
@Begin[Example]
(C5) BLOCK([SIMP],SIMP:FALSE,TELLSIMP(0^0,1));
(D5)                       [^RULE1, SIMPEXPT]
@hinge
(C6) 0^0;
(D6)                                1
@hinge
(C7) REMRULE("^","^RULE1");
(D7)                                ^
@End[Example]

@fcn[Name="DEFMATCH", Args="progname, pattern, parm1, ..., parmn"]
creates a function of n+1 arguments with the name @i[progname] which
tests an expression to see if it can match a particular @i[pattern].
The @i[pattern] is some expression containing pattern variables and
@i[parameters].  The @i[parms] are given explicitly as arguments to
DEFMATCH while the pattern variables (if supplied) were given
implicitly in a previous MATCHDECLARE function.  The first argument to
the created function @i[progname], is an expression to be matched
against the "@i[pattern]" and the other n arguments are the actual
variables occurring in the expression which are to take the place of
dummy variables occurring in the "@i[pattern]".  Thus the parms in the
DEFMATCH are like the dummy arguments to the SUBROUTINE statement in
FORTRAN.  When the function is "called" the actual arguments are
substituted.  For example:
@Begin[Example]
(C1)  NONZEROANDFREEOF(X,E):=  IF E#0 AND FREEOF(X,E)
            THEN TRUE ELSE FALSE$
@end[example]
(IS(E#0 AND FREEOF(X,E))] is an equivalent function definition - (see
@PageRef[MACSYMA!properties]).
@begin[example]
(C2)  MATCHDECLARE(A,NONZEROANDFREEOF(X),B,FREEOF(X))$
@hinge
(C3)  DEFMATCH(LINEAR,A*X+B,X)$
@end[example]
This has caused the function LINEAR(@i[exp,var1]) to be defined.  It
tests @i[exp] to see if it is of the form A*@i[var1]+B where A and B
do not contain @i[var1] and A is not zero.  DEFMATCHed functions
return (if the match is successful) a list of equations whose left
sides are the pattern variables and parms and whose right sides are
the expressions which the pattern variables and parameters matched.
The pattern variables, but not the parameters, are set to the matched
expressions.  If the match fails, the function returns FALSE.  Thus
LINEAR(3*Z+(Y+1)*Z+Y**2,Z) would return [B=Y**2, A=Y+4, X=Z].  Any
variables not declared as pattern variables in MATCHDECLARE or as
parameters in DEFMATCH which occur in @i[pattern] will match only
themselves so that if the third argument to the DEFMATCH in (C3) had
been omitted, then LINEAR would only match expressions linear in X,
not in any other variable.

A pattern which contains no parameters or pattern variables returns
TRUE if the match succeeds.
@Begin[Example]
(C1) MATCHDECLARE([A,F],TRUE)$
@hinge
(C2) CONSTINTERVAL(L,H):=CONSTANTP(H-L)$
@hinge
(C3) MATCHDECLARE(B,CONSTINTERVAL(A))$
@hinge
(C4) MATCHDECLARE(X,ATOM)$
@hinge
(C5) BLOCK(REMOVE(INTEGRATE,OUTATIVE),
           DEFMATCH(CHECKLIMITS,'INTEGRATE(F,X,A,B)),
           DECLARE(INTEGRATE,OUTATIVE))$
@hinge
(C6) 'INTEGRATE(SIN(T),T,X+%PI,X+2*%PI)$
@hinge
(C7) CHECKLIMITS(%);
(D7)  [B = X + 2 %PI, A = X + %PI, X = T, F = SIN(T)]
@hinge
(C8) 'INTEGRATE(SIN(T),T,0,X)$
@hinge
(C9) CHECKLIMITS(%);
(D9)                    FALSE
@End[Example]

@fcn[Name="DEFRULE", Args="rulename, pattern, replacement"]
defines and names a @i[replacement] rule for the given @i[pattern].
If the rule named @i[rulename] is applied to an expression (by one of
the APPLY functions below), every subexpression matching the
@i[pattern] will be replaced by the @i[replacement].  All variables in
the @i[replacement] which have been assigned values by the pattern
match are assigned those values in the @i[replacement] which is then
simplified. The rules themselves can be treated as functions which
will transform an expression by one operation of the pattern match and
replacement.  If the pattern fails, the original expression is
returned.

@fcn[Name="APPLY1", Args="exp, rule1, ..., rulen"]
repeatedly applies the first rule to @i[exp] until it fails, then
repeatedly applies the same rule to all subexpressions of @i[exp],
left-to-right, until the first rule has failed on all subexpressions.
Call the result of transforming @i[exp] in this manner @i[exp]'.  Then
the second rule is applied in the same fashion starting at the top of
@i[exp]'.  When the final rule fails on the final subexpression, the
application is finished.

@fcn[Name="APPLY2", Args="exp, rule1, ..., rulen"]
differs from APPLY1 in that if the first rule fails on a given
subexpression, then the second rule is repeatedly applied, etc.  Only
if they all fail on a given subexpression is the whole set of rules
repeatedly applied to the next subexpression.  If one of the rules
succeeds, then the same subexpression is reprocessed, starting with
the first rule.

@var<MAXAPPLYDEPTH (default: 10000)> is the maximum depth to which
APPLY1 and APPLY2 will delve.

@fcn[Name="APPLYB1", Args="exp, rule1, ..., rulen"]
is similar to APPLY1 but works from the "bottom up" instead of from
the "top down".  That is, it processes the smallest subexpression of
@i[exp], then the next smallest, etc.

@var<MAXAPPLYHEIGHT (default: 10000)> - is the maximum height to which
APPLYB1 will reach before giving up.
@end(function)

@Section[Pattern Matching for Rational Expressions]
@Label[patmatrat]

@begin(function)
@fcn[Name="LETSIMP", Args="exp"]
will continually apply the substitution rules previously defined by
the function LET (See below) until no further change is made to
@i[exp].  LETSIMP(@i[expr,rule_pkg_name]); is made, the rule package
@i[rule_pkg_name] is used for that LETSIMP command only, i.e.  the value
of CURRENT_LET_RULE_PACKAGE is not changed.

@fcn[Name="LET", Args="prod, repl, predname, arg1, arg2, ..., argn"]
defines a substitution rule for LETSIMP such that @i[prod] gets
replaced by @i[repl].  @i[prod] is a product of positive or negative
powers of the following types of terms:
@begin(enumerate)
@i[Atoms] which LETSIMP will search for literally unless previous
to calling LETSIMP the MATCHDECLARE function is used to associate a
predicate with the atom.  In this case LETSIMP will match the atom to
any term of a product satisfying the predicate.

@i[Kernels] such as SIN(X), N!, F(X,Y), etc.  As with atoms above
LETSIMP will look for a literal match unless MATCHDECLARE is used to
associate a predicate with the argument of the kernel.
@end(enumerate)
A term to a positive power will only match a term having at least that
power in the expression being LETSIMPed.  A term to a negative power
on the other hand will only match a term with a power at least as
negative.  In the case of negative powers in "product" the switch
LETRAT must be set to TRUE (see below).

If a predicate is included in the LET function followed by a list of
arguments, a tentative match (i.e. one that would be accepted if the
predicate were omitted) will be accepted only if
@i[predname](@i[arg1]',...,@i[argn]') evaluates to TRUE where
@i[argi]' is the value matched to @i[argi].  The @i[argi] may be the
name of any atom or the argument of any kernel appearing in @i[prod].
@i[repl] may be any rational expression.  If any of the atoms or
arguments from @i[prod] appear in @i[repl] the appropriate
substitutions will be made.

@var<LETRAT (default: FALSE)> when FALSE, LETSIMP will simplify the
numerator and denominator of @i[expr] independently and return the
result.  Substitutions such as N!/N goes to (N-1)! will fail.  To
handle such situations LETRAT should be set to TRUE, then the
numerator, denominator, and their quotient will be simplified in that
order.

These substitution functions allow you to work with several rule
packages at once. Each rule package can contain any number of LETed
rules and is referred to by a user supplied name.  To insert a rule
into the rule package @i[name], do
LET([@i<prod,repl,pred,arg1,...>],@i[name]).  To apply the rules in
rule package @i[name], do LETSIMP(@i[expr], @i[name]).  The function
LETSIMP(@i[expr,name1,name2],...) is equivalent to doing
LETSIMP(@i[expr,name1]) followed by LETSIMP(%,@i[name2]) etc.

The rule package presently in use is called the
@var<CURRENT_LET_RULE_PACKAGE (default: DEFAULT_LET_RULE_PACKAGE)>.
The user may
reset this variable to the name of any rule package previously defined
via the LET command.  Whenever any of the functions comprising the let
package are called with no package name the value of
CURRENT_LET_RULE_PACKAGE is used.  If a call such as
LETSIMP(expr,rule_pkg_name); is made, the rule package rule_pkg_name
is used for that LETSIMP command only, i.e.  the value of
CURRENT_LET_RULE_PACKAGE is not changed.

There is a default rule package, DEFAULT_LET_RULE_PACKAGE
@Index[DEFAULT_LET_RULE_PACKAGE] which is assumed when no other name
is supplied to any of the functions.  Whenever a LET includes a
rulepackage name that rulepackage is used as the
CURRENT_LET_RULE_PACKAGE.

@fcn[Name="REMLET", Args="prod, name"]
deletes the substitution rule, @i[prod] --> @i[repl], most recently
defined by the LET function.  If @i[name] is supplied
the rule is deleted from the rule package @i[name]. REMLET() and
REMLET(ALL) delete all substitution rules from the current rule
package. If @i[name] is supplied, e.g. REMLET(ALL,@i[name]), the rule
package, @i[name], is also deleted.

If a substitution is to be changed using the same product, REMLET need
not be called, just redefine the substitution using the same product
(literally) with the LET function and the new replacement and/or
predicate name.  Should REMLET(product) now be called the original
substitution rule will be revived.

@fcn[Name="LETRULES", Args="name"]
displays the rule package ]name@?[.  LETRULES(); displays the rules in the
current rule package (which is initially DEFAULT_LET_RULE_PACKAGE).

@var<LET_RULE_PACKAGES (default: [DEFAULT_LET_RULE_PACKAGE])> - The
value of LET_RULE_PACKAGES is a list of all the user-defined let rule
packages plus the special package DEFAULT_LET_RULE_PACKAGE.
DEFAULT_LET_RULE_PACKAGE is the name of the rule package used when one
is not explicitly set by the user.
@end(function)

@Begin[Example]
(C1) MATCHDECLARE([A1,A2],TRUE)$
@hinge
(C2) ONELESS(X,Y):=IS(X,Y-1)$
@hinge
(C3) LET(A1*A2!,A1!,ONELESS,A2,A1);
(D3)         A1 A2! --> A1! WHERE ONELESS(A2, A1)
@hinge
(C4) LETRAT:TRUE$
@higne
(C5) LET(A1!/A1,(A1-1)!);
                        A1!
(D5)                    --- --> (A1 - 1)!
                        A1
@hinge
(C6) LETSIMP(N*M!*(N-1)!/M);
(D6) 			  (M - 1)! N!
@End[Example]

The user should be aware that simplification rules for differential
operators can be specified using MACSYMA's pattern-matching commands.
