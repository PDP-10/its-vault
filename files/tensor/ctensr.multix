
(lisp-need-at-compile-time syntax)

(eval-when (compile)
  (cond ((or (not (boundp 'by-hand))
	     (not by-hand))
	 (load ">udd>Mathlab>Carrette>declarations.lisp"))))

(eval-when (eval)
  (cond ((or (not (boundp 'by-hand))
	     by-hand)
	 (load ">udd>Mathlab>Carrette>eval_time.lisp"))))

(eval-when (eval load)
  (cond ((or (not (boundp 'by-hand))
	     by-hand)
	 (load ">udd>Mathlab>Carrette>run_time.lisp"))))

(COMMENT ** THIS IS THE STUFF MAN **) 
(QUOTE INCLUDEF) 
(QUOTE EVAL-WHEN) 
(QUOTE EVAL-WHEN) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $LOADPRINT)) (AND (OR (NOT (BOUNDP (QUOTE $LOADPRINT))) (> 1 (OR (GET (QUOTE $LOADPRINT) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $LOADPRINT NIL) (PUTPROP (QUOTE $LOADPRINT) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (SPECIAL $DIM)) 
(DECLARE (SPECIAL $DIAGMETRIC)) 
(DECLARE (*LEXPR $READVALUE)) 
(DECLARE (*LEXPR $YESP)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $FUNCTIONS)) (AND (OR (NOT (BOUNDP (QUOTE $FUNCTIONS))) (> 1 (OR (GET (QUOTE $FUNCTIONS) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $FUNCTIONS (QUOTE $FUNCTIONS)) (PUTPROP (QUOTE $FUNCTIONS) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*LEXPR $SWAPOUT)) 
(DECLARE (*EXPR $RESIMP)) 
(DECLARE (*EXPR $KDELT)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DIM)) (AND (OR (NOT (BOUNDP (QUOTE $DIM))) (> 1 (OR (GET (QUOTE $DIM) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DIM 0) (PUTPROP (QUOTE $DIM) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $TTEMP)) (AND (OR (NOT (BOUNDP (QUOTE $TTEMP))) (> 1 (OR (GET (QUOTE $TTEMP) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $TTEMP (QUOTE $TTEMP)) (PUTPROP (QUOTE $TTEMP) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $OMTEMP)) (AND (OR (NOT (BOUNDP (QUOTE $OMTEMP))) (> 1 (OR (GET (QUOTE $OMTEMP) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $OMTEMP (QUOTE $OMTEMP)) (PUTPROP (QUOTE $OMTEMP) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $OMEGA)) (AND (OR (NOT (BOUNDP (QUOTE $OMEGA))) (> 1 (OR (GET (QUOTE $OMEGA) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $OMEGA (QUOTE $OMEGA)) (PUTPROP (QUOTE $OMEGA) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $VARTEMP)) (AND (OR (NOT (BOUNDP (QUOTE $VARTEMP))) (> 1 (OR (GET (QUOTE $VARTEMP) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $VARTEMP (QUOTE $VARTEMP)) (PUTPROP (QUOTE $VARTEMP) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $NEWTEMP)) (AND (OR (NOT (BOUNDP (QUOTE $NEWTEMP))) (> 1 (OR (GET (QUOTE $NEWTEMP) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $NEWTEMP (QUOTE $NEWTEMP)) (PUTPROP (QUOTE $NEWTEMP) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $TRANSFORM)) 
(DECLARE (*EXPR $TXYZSUM)) 
(DECLARE (SPECIAL $DERIVABBREV)) 
(DECLARE (SPECIAL $TETRADCALEQ)) 
(DECLARE (SPECIAL $TAYSWITCH)) 
(DECLARE (SPECIAL $RATCHRISTOF)) 
(DECLARE (SPECIAL $RATEINSTEIN)) 
(DECLARE (SPECIAL $RATRIEMAN)) 
(DECLARE (SPECIAL $RATWEYL)) 
(DECLARE (*EXPR $SETFLAGS)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $TENSORLOADED)) (AND (OR (NOT (BOUNDP (QUOTE $TENSORLOADED))) (> 1 (OR (GET (QUOTE $TENSORLOADED) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $TENSORLOADED (QUOTE $TENSORLOADED)) (PUTPROP (QUOTE $TENSORLOADED) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $X)) (AND (OR (NOT (BOUNDP (QUOTE $X))) (> 1 (OR (GET (QUOTE $X) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $X (QUOTE $X)) (PUTPROP (QUOTE $X) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $Y)) (AND (OR (NOT (BOUNDP (QUOTE $Y))) (> 1 (OR (GET (QUOTE $Y) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $Y (QUOTE $Y)) (PUTPROP (QUOTE $Y) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $Z)) (AND (OR (NOT (BOUNDP (QUOTE $Z))) (> 1 (OR (GET (QUOTE $Z) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $Z (QUOTE $Z)) (PUTPROP (QUOTE $Z) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $T)) (AND (OR (NOT (BOUNDP (QUOTE $T))) (> 1 (OR (GET (QUOTE $T) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $T (QUOTE $T)) (PUTPROP (QUOTE $T) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $TSETUP)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $LG)) (AND (OR (NOT (BOUNDP (QUOTE $LG))) (> 1 (OR (GET (QUOTE $LG) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $LG (QUOTE $LG)) (PUTPROP (QUOTE $LG) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $NEWMET)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $BATCH)) (AND (OR (NOT (BOUNDP (QUOTE $BATCH))) (> 1 (OR (GET (QUOTE $BATCH) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $BATCH (QUOTE $BATCH)) (PUTPROP (QUOTE $BATCH) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $OFF)) (AND (OR (NOT (BOUNDP (QUOTE $OFF))) (> 1 (OR (GET (QUOTE $OFF) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $OFF (QUOTE $OFF)) (PUTPROP (QUOTE $OFF) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $FILEMET)) 
(DECLARE (*EXPR $SERMET)) 
(DECLARE (*EXPR $DIAGMATRIXP)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $PARAM)) (AND (OR (NOT (BOUNDP (QUOTE $PARAM))) (> 1 (OR (GET (QUOTE $PARAM) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $PARAM (QUOTE $PARAM)) (PUTPROP (QUOTE $PARAM) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $TAYPT)) (AND (OR (NOT (BOUNDP (QUOTE $TAYPT))) (> 1 (OR (GET (QUOTE $TAYPT) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $TAYPT (QUOTE $TAYPT)) (PUTPROP (QUOTE $TAYPT) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $MINP)) (AND (OR (NOT (BOUNDP (QUOTE $MINP))) (> 1 (OR (GET (QUOTE $MINP) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $MINP (QUOTE $MINP)) (PUTPROP (QUOTE $MINP) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $TAYSWITCH)) (AND (OR (NOT (BOUNDP (QUOTE $TAYSWITCH))) (> 1 (OR (GET (QUOTE $TAYSWITCH) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $TAYSWITCH NIL) (PUTPROP (QUOTE $TAYSWITCH) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $DLGTAYLOR)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $UG)) (AND (OR (NOT (BOUNDP (QUOTE $UG))) (> 1 (OR (GET (QUOTE $UG) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $UG (QUOTE $UG)) (PUTPROP (QUOTE $UG) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DIAGMETRIC)) (AND (OR (NOT (BOUNDP (QUOTE $DIAGMETRIC))) (> 1 (OR (GET (QUOTE $DIAGMETRIC) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DIAGMETRIC NIL) (PUTPROP (QUOTE $DIAGMETRIC) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $METRIC)) 
(DECLARE (*EXPR $SYMMETRICP)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $EM)) (AND (OR (NOT (BOUNDP (QUOTE $EM))) (> 1 (OR (GET (QUOTE $EM) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $EM (QUOTE $EM)) (PUTPROP (QUOTE $EM) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $MOTION)) 
(DECLARE (*EXPR $COGRAD)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $M)) (AND (OR (NOT (BOUNDP (QUOTE $M))) (> 1 (OR (GET (QUOTE $M) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $M (QUOTE $M)) (PUTPROP (QUOTE $M) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $N)) (AND (OR (NOT (BOUNDP (QUOTE $N))) (> 1 (OR (GET (QUOTE $N) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $N (QUOTE $N)) (PUTPROP (QUOTE $N) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $CONTRAGRAD)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $LCS)) (AND (OR (NOT (BOUNDP (QUOTE $LCS))) (> 1 (OR (GET (QUOTE $LCS) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $LCS (QUOTE $LCS)) (PUTPROP (QUOTE $LCS) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $MCS)) (AND (OR (NOT (BOUNDP (QUOTE $MCS))) (> 1 (OR (GET (QUOTE $MCS) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $MCS (QUOTE $MCS)) (PUTPROP (QUOTE $MCS) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $RATCHRISTOF)) (AND (OR (NOT (BOUNDP (QUOTE $RATCHRISTOF))) (> 1 (OR (GET (QUOTE $RATCHRISTOF) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $RATCHRISTOF NIL) (PUTPROP (QUOTE $RATCHRISTOF) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $ALL)) (AND (OR (NOT (BOUNDP (QUOTE $ALL))) (> 1 (OR (GET (QUOTE $ALL) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $ALL (QUOTE $ALL)) (PUTPROP (QUOTE $ALL) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $CHRISTOF)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $ARRAYS)) (AND (OR (NOT (BOUNDP (QUOTE $ARRAYS))) (> 1 (OR (GET (QUOTE $ARRAYS) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $ARRAYS (QUOTE $ARRAYS)) (PUTPROP (QUOTE $ARRAYS) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $LR)) (AND (OR (NOT (BOUNDP (QUOTE $LR))) (> 1 (OR (GET (QUOTE $LR) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $LR (QUOTE $LR)) (PUTPROP (QUOTE $LR) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $RATFAC)) (AND (OR (NOT (BOUNDP (QUOTE $RATFAC))) (> 1 (OR (GET (QUOTE $RATFAC) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $RATFAC NIL) (PUTPROP (QUOTE $RATFAC) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $LRICCICOM)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $RICCI)) (AND (OR (NOT (BOUNDP (QUOTE $RICCI))) (> 1 (OR (GET (QUOTE $RICCI) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $RICCI (QUOTE $RICCI)) (PUTPROP (QUOTE $RICCI) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $RICCICOM)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $TRACER)) (AND (OR (NOT (BOUNDP (QUOTE $TRACER))) (> 1 (OR (GET (QUOTE $TRACER) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $TRACER (QUOTE $TRACER)) (PUTPROP (QUOTE $TRACER) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $SCURVATURE)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $G)) (AND (OR (NOT (BOUNDP (QUOTE $G))) (> 1 (OR (GET (QUOTE $G) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $G (QUOTE $G)) (PUTPROP (QUOTE $G) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $RATEINSTEIN)) (AND (OR (NOT (BOUNDP (QUOTE $RATEINSTEIN))) (> 1 (OR (GET (QUOTE $RATEINSTEIN) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $RATEINSTEIN NIL) (PUTPROP (QUOTE $RATEINSTEIN) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $EINSTEIN)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $R)) (AND (OR (NOT (BOUNDP (QUOTE $R))) (> 1 (OR (GET (QUOTE $R) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $R (QUOTE $R)) (PUTPROP (QUOTE $R) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $RATRIEMAN)) (AND (OR (NOT (BOUNDP (QUOTE $RATRIEMAN))) (> 1 (OR (GET (QUOTE $RATRIEMAN) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $RATRIEMAN NIL) (PUTPROP (QUOTE $RATRIEMAN) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $RIEMANN)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $UR)) (AND (OR (NOT (BOUNDP (QUOTE $UR))) (> 1 (OR (GET (QUOTE $UR) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $UR (QUOTE $UR)) (PUTPROP (QUOTE $UR) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $RAISERIEMANN)) 
(DECLARE (*EXPR $RINVARIANT)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $W)) (AND (OR (NOT (BOUNDP (QUOTE $W))) (> 1 (OR (GET (QUOTE $W) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $W (QUOTE $W)) (PUTPROP (QUOTE $W) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $RATWEYL)) (AND (OR (NOT (BOUNDP (QUOTE $RATWEYL))) (> 1 (OR (GET (QUOTE $RATWEYL) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $RATWEYL NIL) (PUTPROP (QUOTE $RATWEYL) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $WEYL)) 
(DECLARE (*EXPR $NTERMST)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $GDET)) (AND (OR (NOT (BOUNDP (QUOTE $GDET))) (> 1 (OR (GET (QUOTE $GDET) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $GDET (QUOTE $GDET)) (PUTPROP (QUOTE $GDET) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $DSCALAR)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DIV)) (AND (OR (NOT (BOUNDP (QUOTE $DIV))) (> 1 (OR (GET (QUOTE $DIV) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DIV (QUOTE $DIV)) (PUTPROP (QUOTE $DIV) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $CHECKDIV)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DEINDEX)) (AND (OR (NOT (BOUNDP (QUOTE $DEINDEX))) (> 1 (OR (GET (QUOTE $DEINDEX) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DEINDEX (QUOTE $DEINDEX)) (PUTPROP (QUOTE $DEINDEX) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $FINDDE1)) 
(DECLARE (*EXPR $FINDDE2)) 
(DECLARE (*EXPR $FINDDE3)) 
(DECLARE (*EXPR $CLEANUP)) 
(DECLARE (*EXPR $FINDDE)) 
(DECLARE (*EXPR $DELETEN)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $TETRADCALEQ)) (AND (OR (NOT (BOUNDP (QUOTE $TETRADCALEQ))) (> 1 (OR (GET (QUOTE $TETRADCALEQ) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $TETRADCALEQ NIL) (PUTPROP (QUOTE $TETRADCALEQ) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $NICEPRINT)) (AND (OR (NOT (BOUNDP (QUOTE $NICEPRINT))) (> 1 (OR (GET (QUOTE $NICEPRINT) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $NICEPRINT (QUOTE $NICEPRINT)) (PUTPROP (QUOTE $NICEPRINT) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $KDELT)) (AND (OR (NOT (BOUNDP (QUOTE $KDELT))) (> 1 (OR (GET (QUOTE $KDELT) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $KDELT (QUOTE $KDELT)) (PUTPROP (QUOTE $KDELT) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $SETFLAGS)) (AND (OR (NOT (BOUNDP (QUOTE $SETFLAGS))) (> 1 (OR (GET (QUOTE $SETFLAGS) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $SETFLAGS (QUOTE $SETFLAGS)) (PUTPROP (QUOTE $SETFLAGS) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $BDVAC)) (AND (OR (NOT (BOUNDP (QUOTE $BDVAC))) (> 1 (OR (GET (QUOTE $BDVAC) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $BDVAC (QUOTE $BDVAC)) (PUTPROP (QUOTE $BDVAC) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $INVARIANT1)) (AND (OR (NOT (BOUNDP (QUOTE $INVARIANT1))) (> 1 (OR (GET (QUOTE $INVARIANT1) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $INVARIANT1 (QUOTE $INVARIANT1)) (PUTPROP (QUOTE $INVARIANT1) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $INVARIANT2)) (AND (OR (NOT (BOUNDP (QUOTE $INVARIANT2))) (> 1 (OR (GET (QUOTE $INVARIANT2) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $INVARIANT2 (QUOTE $INVARIANT2)) (PUTPROP (QUOTE $INVARIANT2) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $TSETUP)) (AND (OR (NOT (BOUNDP (QUOTE $TSETUP))) (> 1 (OR (GET (QUOTE $TSETUP) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $TSETUP (QUOTE $TSETUP)) (PUTPROP (QUOTE $TSETUP) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $NEWMET)) (AND (OR (NOT (BOUNDP (QUOTE $NEWMET))) (> 1 (OR (GET (QUOTE $NEWMET) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $NEWMET (QUOTE $NEWMET)) (PUTPROP (QUOTE $NEWMET) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $FILEMET)) (AND (OR (NOT (BOUNDP (QUOTE $FILEMET))) (> 1 (OR (GET (QUOTE $FILEMET) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $FILEMET (QUOTE $FILEMET)) (PUTPROP (QUOTE $FILEMET) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $SERMET)) (AND (OR (NOT (BOUNDP (QUOTE $SERMET))) (> 1 (OR (GET (QUOTE $SERMET) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $SERMET (QUOTE $SERMET)) (PUTPROP (QUOTE $SERMET) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $SYMMETRICP)) (AND (OR (NOT (BOUNDP (QUOTE $SYMMETRICP))) (> 1 (OR (GET (QUOTE $SYMMETRICP) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $SYMMETRICP (QUOTE $SYMMETRICP)) (PUTPROP (QUOTE $SYMMETRICP) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DL)) (AND (OR (NOT (BOUNDP (QUOTE $DL))) (> 1 (OR (GET (QUOTE $DL) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DL (QUOTE $DL)) (PUTPROP (QUOTE $DL) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DU)) (AND (OR (NOT (BOUNDP (QUOTE $DU))) (> 1 (OR (GET (QUOTE $DU) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DU (QUOTE $DU)) (PUTPROP (QUOTE $DU) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DALEM)) (AND (OR (NOT (BOUNDP (QUOTE $DALEM))) (> 1 (OR (GET (QUOTE $DALEM) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DALEM (QUOTE $DALEM)) (PUTPROP (QUOTE $DALEM) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $SCURVATURE)) (AND (OR (NOT (BOUNDP (QUOTE $SCURVATURE))) (> 1 (OR (GET (QUOTE $SCURVATURE) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $SCURVATURE (QUOTE $SCURVATURE)) (PUTPROP (QUOTE $SCURVATURE) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $RINVARIANT)) (AND (OR (NOT (BOUNDP (QUOTE $RINVARIANT))) (> 1 (OR (GET (QUOTE $RINVARIANT) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $RINVARIANT (QUOTE $RINVARIANT)) (PUTPROP (QUOTE $RINVARIANT) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $NTERMST)) (AND (OR (NOT (BOUNDP (QUOTE $NTERMST))) (> 1 (OR (GET (QUOTE $NTERMST) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $NTERMST (QUOTE $NTERMST)) (PUTPROP (QUOTE $NTERMST) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DSCALAR)) (AND (OR (NOT (BOUNDP (QUOTE $DSCALAR))) (> 1 (OR (GET (QUOTE $DSCALAR) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DSCALAR (QUOTE $DSCALAR)) (PUTPROP (QUOTE $DSCALAR) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $CHECKDIV)) (AND (OR (NOT (BOUNDP (QUOTE $CHECKDIV))) (> 1 (OR (GET (QUOTE $CHECKDIV) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $CHECKDIV (QUOTE $CHECKDIV)) (PUTPROP (QUOTE $CHECKDIV) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $SETUPTETRAD)) (AND (OR (NOT (BOUNDP (QUOTE $SETUPTETRAD))) (> 1 (OR (GET (QUOTE $SETUPTETRAD) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $SETUPTETRAD (QUOTE $SETUPTETRAD)) (PUTPROP (QUOTE $SETUPTETRAD) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $CONTRACT4)) (AND (OR (NOT (BOUNDP (QUOTE $CONTRACT4))) (> 1 (OR (GET (QUOTE $CONTRACT4) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $CONTRACT4 (QUOTE $CONTRACT4)) (PUTPROP (QUOTE $CONTRACT4) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $PSI)) (AND (OR (NOT (BOUNDP (QUOTE $PSI))) (> 1 (OR (GET (QUOTE $PSI) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $PSI (QUOTE $PSI)) (PUTPROP (QUOTE $PSI) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $PETROV)) (AND (OR (NOT (BOUNDP (QUOTE $PETROV))) (> 1 (OR (GET (QUOTE $PETROV) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $PETROV (QUOTE $PETROV)) (PUTPROP (QUOTE $PETROV) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $FINDDE1)) (AND (OR (NOT (BOUNDP (QUOTE $FINDDE1))) (> 1 (OR (GET (QUOTE $FINDDE1) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $FINDDE1 (QUOTE $FINDDE1)) (PUTPROP (QUOTE $FINDDE1) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $FINDDE2)) (AND (OR (NOT (BOUNDP (QUOTE $FINDDE2))) (> 1 (OR (GET (QUOTE $FINDDE2) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $FINDDE2 (QUOTE $FINDDE2)) (PUTPROP (QUOTE $FINDDE2) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $FINDDE3)) (AND (OR (NOT (BOUNDP (QUOTE $FINDDE3))) (> 1 (OR (GET (QUOTE $FINDDE3) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $FINDDE3 (QUOTE $FINDDE3)) (PUTPROP (QUOTE $FINDDE3) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $CLEANUP)) (AND (OR (NOT (BOUNDP (QUOTE $CLEANUP))) (> 1 (OR (GET (QUOTE $CLEANUP) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $CLEANUP (QUOTE $CLEANUP)) (PUTPROP (QUOTE $CLEANUP) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $FINDDE)) (AND (OR (NOT (BOUNDP (QUOTE $FINDDE))) (> 1 (OR (GET (QUOTE $FINDDE) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $FINDDE (QUOTE $FINDDE)) (PUTPROP (QUOTE $FINDDE) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DELETEN)) (AND (OR (NOT (BOUNDP (QUOTE $DELETEN))) (> 1 (OR (GET (QUOTE $DELETEN) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DELETEN (QUOTE $DELETEN)) (PUTPROP (QUOTE $DELETEN) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $GETRID)) (AND (OR (NOT (BOUNDP (QUOTE $GETRID))) (> 1 (OR (GET (QUOTE $GETRID) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $GETRID (QUOTE $GETRID)) (PUTPROP (QUOTE $GETRID) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $GETRID)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $ZZ)) (AND (OR (NOT (BOUNDP (QUOTE $ZZ))) (> 1 (OR (GET (QUOTE $ZZ) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $ZZ (QUOTE $ZZ)) (PUTPROP (QUOTE $ZZ) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $BOXQ)) (AND (OR (NOT (BOUNDP (QUOTE $BOXQ))) (> 1 (OR (GET (QUOTE $BOXQ) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $BOXQ (QUOTE $BOXQ)) (PUTPROP (QUOTE $BOXQ) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $ADDD)) (AND (OR (NOT (BOUNDP (QUOTE $ADDD))) (> 1 (OR (GET (QUOTE $ADDD) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $ADDD (QUOTE $ADDD)) (PUTPROP (QUOTE $ADDD) 1 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $BD)) (AND (OR (NOT (BOUNDP (QUOTE $BD))) (> 1 (OR (GET (QUOTE $BD) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $BD (QUOTE $BD)) (PUTPROP (QUOTE $BD) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $BDVAC)) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $INV1)) (AND (OR (NOT (BOUNDP (QUOTE $INV1))) (> 1 (OR (GET (QUOTE $INV1) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $INV1 (QUOTE $INV1)) (PUTPROP (QUOTE $INV1) 1 (QUOTE SET-PRIORITY))))) 
(DECLARE (*EXPR $INVARIANT1)) 
(DECLARE (*EXPR $INVARIANT2)) 
(DECLARE (*EXPR $BIMETRIC)) 
(COND ($LOADPRINT ($PRINT (QUOTE $CTENSR) (QUOTE |&source|) (QUOTE |DSK:TENSOR;CTENSR FUNCS|)))) 
(SIMPLIFY ($PUT (QUOTE $CTENSR) (QUOTE |DSK:TENSOR;CTENSR FUNCS|) (QUOTE $VERSION))) 
(MEVAL* (QUOTE (($MODEDECLARE) $DIM $FIXNUM))) 
(MEVAL* (QUOTE (($DECLARE) $DIM $SPECIAL))) 
(DEFPROP $DIM ASSIGN-MODE-CHECK ASSIGN) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DIM)) (AND (OR (NOT (BOUNDP (QUOTE $DIM))) (> 2 (OR (GET (QUOTE $DIM) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DIM 4) (PUTPROP (QUOTE $DIM) 2 (QUOTE SET-PRIORITY))))) 
(MEVAL* (QUOTE (($MODEDECLARE) $DIAGMETRIC $BOOLEAN))) 
(MEVAL* (QUOTE (($DECLARE) $DIAGMETRIC $SPECIAL))) 
(DEFPROP $DIAGMETRIC ASSIGN-MODE-CHECK ASSIGN) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DIAGMETRIC)) (AND (OR (NOT (BOUNDP (QUOTE $DIAGMETRIC))) (> 2 (OR (GET (QUOTE $DIAGMETRIC) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DIAGMETRIC NIL) (PUTPROP (QUOTE $DIAGMETRIC) 2 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $READVALUE) (QUOTE TRANSLATE)) (DEFPROP $READVALUE $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $READVALUE) T (QUOTE $VARIABLE_NUM_ARGS_FUNCTION)))) NIL (DEFUN $READVALUE |mlexpr NARGS| (COND ((< |mlexpr NARGS| 2) ($ERROR (QUOTE ERROR) (QUOTE $READVALUE) (QUOTE | takes no less than |) 2 (QUOTE | arguments.|))) (T ((LAMBDA ($MESSAGE $PRED $BADBOY) NIL ((LAMBDA ($VALUE) NIL (PROG NIL $LOOP (SETQ $VALUE (SIMPLIFY ($READ $MESSAGE))) (COND ((LIKE (SIMPLIFY (MFUNCALL $PRED $VALUE)) T) (RETURN $VALUE))) (COND ((NOT (LIKE $BADBOY (QUOTE ((MLIST))))) (SIMPLIFY (MAPPLY-TR (QUOTE $PRINT) $BADBOY)))) (RETURN (GO $LOOP)))) (QUOTE $VALUE))) (ARG 1) (ARG 2) (CONS (QUOTE (MLIST)) (LISTIFY (- 2 |mlexpr NARGS|)))))))) 
(MEVAL* (QUOTE (($MODEDECLARE) (($FUNCTION) $YESP) $BOOLEAN))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $YESP) (QUOTE TRANSLATE)) (DEFPROP $YESP $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $YESP) T (QUOTE $VARIABLE_NUM_ARGS_FUNCTION)))) NIL (DEFUN $YESP |mlexpr NARGS| (COND ((< |mlexpr NARGS| 0) ($ERROR (QUOTE ERROR) (QUOTE $YESP) (QUOTE | takes no less than |) 0 (QUOTE | arguments.|))) (T ((LAMBDA ($MESSAGES) NIL ((LAMBDA ($REPLY) NIL (PROG NIL $LOOP (SETQ $REPLY (SIMPLIFY (MAPPLY-TR (QUOTE $READ) $MESSAGES))) (COND (($MEMBER $REPLY (LIST (QUOTE (MLIST)) (QUOTE $YES) (QUOTE $YE) (QUOTE $Y))) (RETURN T))) (COND (($MEMBER $REPLY (LIST (QUOTE (MLIST)) (QUOTE $NO) (QUOTE $N))) (RETURN NIL))) ($PRINT (QUOTE |&Please reply YES or NO.|)) (RETURN (GO $LOOP)))) (QUOTE $REPLY))) (CONS (QUOTE (MLIST)) (LISTIFY (- 0 |mlexpr NARGS|)))))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $SWAPOUT) (QUOTE TRANSLATE)) (DEFPROP $SWAPOUT $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $SWAPOUT) T (QUOTE $VARIABLE_NUM_ARGS_FUNCTION)))) NIL (DEFUN $SWAPOUT |mlexpr NARGS| (COND ((< |mlexpr NARGS| 1) ($ERROR (QUOTE ERROR) (QUOTE $SWAPOUT) (QUOTE | takes no less than |) 1 (QUOTE | argument.|))) (T ((LAMBDA (|tr-gensym~0| |tr-gensym~1|) (UNWIND-PROTECT (PROGN (MSETCHK (QUOTE $FUNCTIONS) |tr-gensym~1|) ((LAMBDA ($FILE $FUNCTIONS) NIL (SIMPLIFY (MAPPLY-TR (QUOTE $KILL) $FUNCTIONS))) |tr-gensym~0| |tr-gensym~1|)) (MSETCHK (QUOTE $FUNCTIONS) $FUNCTIONS))) (ARG 1) (CONS (QUOTE (MLIST)) (LISTIFY (- 1 |mlexpr NARGS|)))))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $RESIMP) (QUOTE TRANSLATE)) (DEFPROP $RESIMP $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $RESIMP) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $RESIMP) (QUOTE (NIL . 1))) (DEFUN $RESIMP ($EXP) NIL (SIMPLIFY (MFUNCALL (QUOTE $EV) $EXP (QUOTE $NOEVAL) (QUOTE $SIMP))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $KDELT) (QUOTE TRANSLATE)) (DEFPROP $KDELT $FIXNUM FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $KDELT) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $KDELT) (QUOTE (NIL . 2))) (DEFUN $KDELT ($I $J) NIL (PROGN NIL (COND ((= $I $J) 1) (T 0))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $TRANSFORM) (QUOTE TRANSLATE)) (DEFPROP $TRANSFORM $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $TRANSFORM) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $TRANSFORM) (QUOTE (NIL . 1))) (DEFUN $TRANSFORM ($QXYZ) NIL ((LAMBDA NIL NIL (MLOCAL $TTEMP $OMTEMP $VARTEMP $NEWTEMP) ((LAMBDA ($I) (PROG NIL G0003 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0004 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET (SIMPLIFY (MARRAYREF $QXYZ $I $J)) $TTEMP $I $J) ((LAMBDA ($K) (PROG NIL G0005 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET (SIMPLIFY ($SUBSTITUTE (SIMPLIFY (MARRAYREF $OMTEMP $K)) (SIMPLIFY (MARRAYREF $OMEGA $K)) (SIMPLIFY (MARRAYREF $TTEMP $I $J)))) $TTEMP $I $J) (SETQ $K (+ 1 $K)) (GO G0005))) 1) (SETQ $J (+ 1 $J)) (GO G0004))) 1) (SETQ $I (+ 1 $I)) (GO G0003))) 1) ((LAMBDA ($I) (PROG NIL G0006 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET (SIMPLIFY ($READ (QUOTE |&Transform #|) $I)) $VARTEMP $I) (SETQ $I (+ 1 $I)) (GO G0006))) 1) ((LAMBDA ($I) (PROG NIL G0007 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0008 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($K) (PROG NIL G0009 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET (SIMPLIFY ($SUBSTITUTE (SIMPLIFY (MARRAYREF $VARTEMP $K)) (SIMPLIFY (MARRAYREF $OMTEMP $K)) (SIMPLIFY (MARRAYREF $TTEMP $I $J)))) $TTEMP $I $J) (SETQ $K (+ 1 $K)) (GO G0009))) 1) (SETQ $J (+ 1 $J)) (GO G0008))) 1) (SETQ $I (+ 1 $I)) (GO G0007))) 1) ((LAMBDA ($A) (PROG NIL G0010 (COND ((> $A $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($B) (PROG NIL G0011 (COND ((> $B $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET (SIMPLIFY ($TXYZSUM $VARTEMP $OMEGA $A $B $TTEMP)) $NEWTEMP $A $B) (SETQ $B (+ 1 $B)) (GO G0011))) 1) (SETQ $A (+ 1 $A)) (GO G0010))) 1) (SIMPLIFY ($GENMATRIX $NEWTEMP $DIM $DIM)))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $TXYZSUM) (QUOTE TRANSLATE)) (DEFPROP $TXYZSUM $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $TXYZSUM) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $TXYZSUM) (QUOTE (NIL . 5))) (DEFUN $TXYZSUM ($VARTEMP $OMEGA $A $B $TTEMP) NIL ((LAMBDA ($TEMP) NIL ((LAMBDA ($I) (PROG NIL G0012 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0013 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) (SETQ $TEMP (ADD2* $TEMP (MULN (LIST (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $VARTEMP $I)) (SIMPLIFY (MARRAYREF $OMEGA $A)))) (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $VARTEMP $J)) (SIMPLIFY (MARRAYREF $OMEGA $B)))) (SIMPLIFY (MARRAYREF $TTEMP $I $J))) NIL))) (SETQ $J (+ 1 $J)) (GO G0013))) 1) (SETQ $I (+ 1 $I)) (GO G0012))) 1) $TEMP) 0))) 
(MEVAL* (QUOTE (($MODEDECLARE) $DERIVABBREV $BOOLEAN))) 
(MEVAL* (QUOTE (($DECLARE) $DERIVABBREV $SPECIAL))) 
(DEFPROP $DERIVABBREV ASSIGN-MODE-CHECK ASSIGN) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $DERIVABBREV)) (AND (OR (NOT (BOUNDP (QUOTE $DERIVABBREV))) (> 2 (OR (GET (QUOTE $DERIVABBREV) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $DERIVABBREV T) (PUTPROP (QUOTE $DERIVABBREV) 2 (QUOTE SET-PRIORITY))))) 
(MEVAL* (QUOTE (($MODEDECLARE) $TETRADCALEQ $BOOLEAN))) 
(MEVAL* (QUOTE (($DECLARE) $TETRADCALEQ $SPECIAL))) 
(DEFPROP $TETRADCALEQ ASSIGN-MODE-CHECK ASSIGN) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $TETRADCALEQ)) (AND (OR (NOT (BOUNDP (QUOTE $TETRADCALEQ))) (> 2 (OR (GET (QUOTE $TETRADCALEQ) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $TETRADCALEQ NIL) (PUTPROP (QUOTE $TETRADCALEQ) 2 (QUOTE SET-PRIORITY))))) 
(MEVAL* (QUOTE (($MODEDECLARE) $TAYSWITCH $BOOLEAN))) 
(MEVAL* (QUOTE (($DECLARE) $TAYSWITCH $SPECIAL))) 
(DEFPROP $TAYSWITCH ASSIGN-MODE-CHECK ASSIGN) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $TAYSWITCH)) (AND (OR (NOT (BOUNDP (QUOTE $TAYSWITCH))) (> 2 (OR (GET (QUOTE $TAYSWITCH) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $TAYSWITCH NIL) (PUTPROP (QUOTE $TAYSWITCH) 2 (QUOTE SET-PRIORITY))))) 
(MEVAL* (QUOTE (($MODEDECLARE) $RATCHRISTOF $BOOLEAN))) 
(MEVAL* (QUOTE (($DECLARE) $RATCHRISTOF $SPECIAL))) 
(DEFPROP $RATCHRISTOF ASSIGN-MODE-CHECK ASSIGN) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $RATCHRISTOF)) (AND (OR (NOT (BOUNDP (QUOTE $RATCHRISTOF))) (> 2 (OR (GET (QUOTE $RATCHRISTOF) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $RATCHRISTOF T) (PUTPROP (QUOTE $RATCHRISTOF) 2 (QUOTE SET-PRIORITY))))) 
(MEVAL* (QUOTE (($MODEDECLARE) $RATEINSTEIN $BOOLEAN))) 
(MEVAL* (QUOTE (($DECLARE) $RATEINSTEIN $SPECIAL))) 
(DEFPROP $RATEINSTEIN ASSIGN-MODE-CHECK ASSIGN) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $RATEINSTEIN)) (AND (OR (NOT (BOUNDP (QUOTE $RATEINSTEIN))) (> 2 (OR (GET (QUOTE $RATEINSTEIN) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $RATEINSTEIN T) (PUTPROP (QUOTE $RATEINSTEIN) 2 (QUOTE SET-PRIORITY))))) 
(MEVAL* (QUOTE (($MODEDECLARE) $RATRIEMAN $BOOLEAN))) 
(MEVAL* (QUOTE (($DECLARE) $RATRIEMAN $SPECIAL))) 
(DEFPROP $RATRIEMAN ASSIGN-MODE-CHECK ASSIGN) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $RATRIEMAN)) (AND (OR (NOT (BOUNDP (QUOTE $RATRIEMAN))) (> 2 (OR (GET (QUOTE $RATRIEMAN) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $RATRIEMAN T) (PUTPROP (QUOTE $RATRIEMAN) 2 (QUOTE SET-PRIORITY))))) 
(MEVAL* (QUOTE (($MODEDECLARE) $RATWEYL $BOOLEAN))) 
(MEVAL* (QUOTE (($DECLARE) $RATWEYL $SPECIAL))) 
(DEFPROP $RATWEYL ASSIGN-MODE-CHECK ASSIGN) 
(PROGN (QUOTE COMPILE) (DECLARE (SPECIAL $RATWEYL)) (AND (OR (NOT (BOUNDP (QUOTE $RATWEYL))) (> 2 (OR (GET (QUOTE $RATWEYL) (QUOTE SET-PRIORITY)) 12))) (PROG1 (SETQ $RATWEYL T) (PUTPROP (QUOTE $RATWEYL) 2 (QUOTE SET-PRIORITY))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $SETFLAGS) (QUOTE TRANSLATE)) (DEFPROP $SETFLAGS $BOOLEAN FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $SETFLAGS) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $SETFLAGS) (QUOTE (NIL . 0))) (DEFUN $SETFLAGS NIL NIL (PROGN (PROGN (ASSIGN-MODE-CHECK (QUOTE $DERIVABBREV) T) (SETQ $DERIVABBREV T)) (PROGN (ASSIGN-MODE-CHECK (QUOTE $TETRADCALEQ) NIL) (SETQ $TETRADCALEQ NIL)) (PROGN (ASSIGN-MODE-CHECK (QUOTE $TAYSWITCH) NIL) (SETQ $TAYSWITCH NIL)) (PROGN (ASSIGN-MODE-CHECK (QUOTE $RATCHRISTOF) T) (SETQ $RATCHRISTOF T)) (PROGN (ASSIGN-MODE-CHECK (QUOTE $RATEINSTEIN) T) (SETQ $RATEINSTEIN T)) (PROGN (ASSIGN-MODE-CHECK (QUOTE $RATRIEMAN) T) (SETQ $RATRIEMAN T)) (PROGN (ASSIGN-MODE-CHECK (QUOTE $RATWEYL) T) (SETQ $RATWEYL T))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $TSETUP) (QUOTE TRANSLATE)) (DEFPROP $TSETUP $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $TSETUP) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $TSETUP) (QUOTE (NIL . 0))) (DEFUN $TSETUP NIL NIL ((LAMBDA NIL NIL (COND ((LIKE $TENSORLOADED T) (SIMPLIFY ($ERROR (QUOTE |&A KILL(ALL) MUST BE DONE BEFORE YOU ENTER A NEW METRIC|))))) (SETQ $TENSORLOADED T) ($SETFLAGS) ((LAMBDA (|tr-gensym~9|) (PROGN (ASSIGN-MODE-CHECK (QUOTE $DIM) |tr-gensym~9|) (SETQ $DIM |tr-gensym~9|))) (SIMPLIFY ($READVALUE (QUOTE |&Enter the dimension of the coordinate system:|) (FUNCTION |DSK:TENSOR;CTENSR TRLISP-tr-gen-1|) (QUOTE |&Must be a positive integer!|)))) (SETQ $OMEGA (COND ((= $DIM 2) (LIST (QUOTE (MLIST)) $X $Y)) ((= $DIM 3) (LIST (QUOTE (MLIST)) $X $Y $Z)) ((= $DIM 4) (LIST (QUOTE (MLIST)) $X $Y $Z $T)) (T (SIMPLIFY ($READ (QUOTE |&Enter a list containing the names of the coordinates in order|)))))) (COND (($YESP (QUOTE |&Do you wish to change the coordinate names?|)) (SETQ $OMEGA (SIMPLIFY ($READ (QUOTE |&Enter a list containing the names of the coordinates in order|)))))) (COND ((NOT (= ($LENGTH $OMEGA) $DIM)) (SIMPLIFY ($ERROR (QUOTE |&Length of the coordinate list is not equal to the dimension|))))) (SIMPLIFY ($READVALUE (QUOTE |&Do you want to/
1. Enter a new metric?/
2. Enter a metric from a file?/
3. Approximate a metric with a Taylor series?|) (FUNCTION |DSK:TENSOR;CTENSR TRLISP-tr-gen-2|) (QUOTE |&Invalid option, please enter 1, 2, or 3.|))) (QUOTE $DONE))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $NEWMET) (QUOTE TRANSLATE)) (DEFPROP $NEWMET $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $NEWMET) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $NEWMET) (QUOTE (NIL . 0))) (DEFUN $NEWMET NIL NIL ((LAMBDA NIL NIL (SETQ $LG (SIMPLIFY ($ENTERMATRIX $DIM $DIM))) (SIMPLIFY ($READ (QUOTE |&Enter functional dependencies with the DEPENDS function or 'N' if none|))) (COND (($YESP (QUOTE |&Do you wish to see the metric?|)) (DISPLAY-FOR-TR NIL NIL $LG))) (SIMPLIFY ($METRIC)))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $FILEMET) (QUOTE TRANSLATE)) (DEFPROP $FILEMET $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $FILEMET) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $FILEMET) (QUOTE (NIL . 0))) (DEFUN $FILEMET NIL NIL ((LAMBDA ($FILE $FPOS) NIL (SETQ $FILE (SIMPLIFY ($READ (QUOTE |&Specify the file as [filename1,filename2,directory]?|)))) (SETQ $FPOS (PROGN ($PRINT (QUOTE |&What is the ordinal position of the metric in this file?|)) (SIMPLIFY ($READ (QUOTE |&(Note, the name LG must be assigned to your metric in the file)|))))) (SIMPLIFY (MFUNCALL $BATCH $FILE $OFF $FPOS $FPOS)) (SIMPLIFY ($METRIC))) (QUOTE $FILE) (QUOTE $FPOS)))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $SERMET) (QUOTE TRANSLATE)) (DEFPROP $SERMET $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $SERMET) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $SERMET) (QUOTE (NIL . 0))) (DEFUN $SERMET NIL NIL ((LAMBDA NIL NIL (PROGN (ASSIGN-MODE-CHECK (QUOTE $TAYSWITCH) T) (SETQ $TAYSWITCH T)) (SETQ $PARAM (SIMPLIFY ($READ (QUOTE |&Enter expansion parameter|)))) (SETQ $MINP (SIMPLIFY ($READ (QUOTE |&Enter minimum power to drop|)))) (SETQ $TAYPT (SIMPLIFY ($READ (QUOTE |&Enter the point to expand the series around|)))) (COND (($YESP (QUOTE |&Is the metric in a file?|)) (SIMPLIFY ($FILEMET))) (T (SIMPLIFY ($NEWMET)))))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $DIAGMATRIXP) (QUOTE TRANSLATE)) (DEFPROP $DIAGMATRIXP $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $DIAGMATRIXP) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $DIAGMATRIXP) (QUOTE (NIL . 2))) (DEFUN $DIAGMATRIXP ($MAT $NLIM) NIL (PROGN NIL ((LAMBDA ($DIAGFLAG) NIL ((LAMBDA ($I) (PROG NIL G0014 (COND ((> $I $NLIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0015 (COND ((> $J $NLIM) (RETURN (QUOTE $DONE)))) (COND ((AND (NOT (= $I $J)) (NOT (LIKE (SIMPLIFY (MARRAYREF $MAT $I $J)) 0))) (RETURN ($DIAGFLAG NIL)))) (SETQ $J (+ 1 $J)) (GO G0015))) 1) (SETQ $I (+ 1 $I)) (GO G0014))) 1) $DIAGFLAG) T)))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $DLGTAYLOR) (QUOTE TRANSLATE)) (DEFPROP $DLGTAYLOR $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $DLGTAYLOR) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $DLGTAYLOR) (QUOTE (NIL . 1))) (DEFUN $DLGTAYLOR ($X) NIL (COND ($TAYSWITCH (SIMPLIFY ($RATDISREP (SIMPLIFY ($TAYLOR $X $PARAM $TAYPT (ADD2* $MINP -1)))))) (T $X)))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $METRIC) (QUOTE TRANSLATE)) (DEFPROP $METRIC $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $METRIC) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $METRIC) (QUOTE (NIL . 0))) (DEFUN $METRIC NIL NIL ((LAMBDA NIL NIL (COND ((OR (NOT (= ($LENGTH $LG) $DIM)) (NOT (= ($LENGTH (SIMPLIFY ($TRANSPOSE $LG))) $DIM))) (SIMPLIFY ($ERROR (QUOTE |&The rank of the metric is not equal to the dimension of the space|)))) ((NOT ($SYMMETRICP $LG $DIM)) (SIMPLIFY ($ERROR (QUOTE |&You must be working in a new gravity theory not supported by this program|))))) ((LAMBDA (|tr-gensym~11|) (PROGN (ASSIGN-MODE-CHECK (QUOTE $DIAGMETRIC) |tr-gensym~11|) (SETQ $DIAGMETRIC |tr-gensym~11|))) ($DIAGMATRIXP $LG $DIM)) (SETQ $GDET (SIMPLIFY ($FACTOR (SIMPLIFY ($DETERMINANT $LG))))) (SETQ $UG (SIMPLIFY ($IDENT ($LENGTH (SIMPLIFY ($FIRST $LG)))))) (COND ($DIAGMETRIC ((LAMBDA ($II) (PROG NIL G0016 (COND ((> $II ($LENGTH (SIMPLIFY ($FIRST $LG)))) (RETURN (QUOTE $DONE)))) (MARRAYSET (DIV 1 (SIMPLIFY (MARRAYREF $LG $II $II))) $UG $II $II) (SETQ $II (+ 1 $II)) (GO G0016))) 1)) (T (SETQ $UG ((LAMBDA ($DETOUT) NIL (NCPOWER $LG -1)) T)))) (COND (($YESP (QUOTE |&Do you wish to see the metric inverse?|)) (DISPLAY-FOR-TR T NIL $UG))) (SETQ $UG (SIMPLIFY ($RESIMP $UG))) (QUOTE $DONE))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $SYMMETRICP) (QUOTE TRANSLATE)) (DEFPROP $SYMMETRICP $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $SYMMETRICP) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $SYMMETRICP) (QUOTE (NIL . 2))) (DEFUN $SYMMETRICP ($M $N) NIL (PROGN NIL ((LAMBDA ($SYMFLAG) NIL (COND ((NOT (= $N 1)) ((LAMBDA ($I) (PROG NIL G0017 (COND ((> $I (+ $N -1)) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0018 (COND ((> $J $N) (RETURN (QUOTE $DONE)))) (COND ((NOT (LIKE (SIMPLIFY (MARRAYREF $M $J $I)) (SIMPLIFY (MARRAYREF $M $I $J)))) (SETQ $SYMFLAG NIL))) (SETQ $J (+ 1 $J)) (GO G0018))) (+ $I 1)) (SETQ $I (+ 1 $I)) (GO G0017))) 1))) $SYMFLAG) T)))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $MOTION) (QUOTE TRANSLATE)) (DEFPROP $MOTION $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $MOTION) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $MOTION) (QUOTE (NIL . 1))) (DEFUN $MOTION ($DIS) NIL ((LAMBDA ($S) NIL (SIMPLIFY ($DEPENDS $OMEGA $S)) ((LAMBDA ($I) (PROG NIL G0019 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET (COND ($DIAGMETRIC (SIMPLIFY ($RATSIMP (MUL2* (RREMAINDER 1 2) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($A G0017) (PROG NIL G0020 (COND ((< N $A) (RETURN G0017))) (SETQ $A (PROG2 NIL (1+ $A) (SETQ G0017 (ADD2* G0017 (MUL2* (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $LG $A $A)) (SIMPLIFY (MARRAYREF $OMEGA $I)))) (POWER (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $OMEGA $A)) $S)) 2)))))) (GO G0020))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (T (MUL2* (RREMAINDER 1 2) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($B G0018) (PROG NIL G0021 (COND ((< N $B) (RETURN G0018))) (SETQ $B (PROG2 NIL (1+ $B) (SETQ G0018 (ADD2* G0018 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($A G0019) (PROG NIL G0022 (COND ((< N $A) (RETURN G0019))) (SETQ $A (PROG2 NIL (1+ $A) (SETQ G0019 (ADD2* G0019 (MULN (LIST (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $LG $A $B)) (SIMPLIFY (MARRAYREF $OMEGA $I)))) (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $OMEGA $A)) $S)) (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $OMEGA $B)) $S))) NIL))))) (GO G0022))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (GO G0021))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM)))) $EM $I) (SETQ $I (+ 1 $I)) (GO G0019))) 1) (COND ((NOT (LIKE $DIS NIL)) ((LAMBDA ($I) (PROG NIL G0023 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) (DISPLAY-FOR-TR T T (LIST (QUOTE (MEQUAL)) (LIST (LIST* $EM (QUOTE (ARRAY))) $I) (SIMPLIFY (MARRAYREF $EM $I)))) (SETQ $I (+ 1 $I)) (GO G0023))) 1))) (QUOTE $DONE)) (QUOTE $S)))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $COGRAD) (QUOTE TRANSLATE)) (DEFPROP $COGRAD $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $COGRAD) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $COGRAD) (QUOTE (NIL . 2))) (DEFUN $COGRAD ($F $XYZ) NIL ((LAMBDA NIL NIL ((LAMBDA ($MM) (PROG NIL G0024 (COND ((> $MM $DIM) (RETURN (QUOTE $DONE)))) (SIMPLIFY ($ARRAYSETAPPLY $XYZ (LIST (QUOTE (MLIST)) $MM) (SIMPLIFY ($RATSIMP (SIMPLIFY ($DIFF $F (SIMPLIFY (MARRAYREF $OMEGA $MM)))))))) (SETQ $MM (+ 1 $MM)) (GO G0024))) 1))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $CONTRAGRAD) (QUOTE TRANSLATE)) (DEFPROP $CONTRAGRAD $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $CONTRAGRAD) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $CONTRAGRAD) (QUOTE (NIL . 2))) (DEFUN $CONTRAGRAD ($F $XYZ) NIL ((LAMBDA NIL NIL (COND ($DIAGMETRIC ((LAMBDA ($MM) (PROG NIL G0025 (COND ((> $MM $DIM) (RETURN (QUOTE $DONE)))) (SIMPLIFY ($ARRAYSETAPPLY $XYZ (LIST (QUOTE (MLIST)) $MM) (SIMPLIFY ($RATSIMP (SIMPLIFY ($RATSIMP (MUL2* (SIMPLIFY (MARRAYREF $UG $MM $MM)) (SIMPLIFY ($DIFF $F (SIMPLIFY (MARRAYREF $OMEGA $MM))))))))))) (SETQ $MM (+ 1 $MM)) (GO G0025))) 1)) (T ((LAMBDA ($MM) (PROG NIL G0026 (COND ((> $MM $DIM) (RETURN (QUOTE $DONE)))) (SIMPLIFY ($ARRAYSETAPPLY $XYZ (LIST (QUOTE (MLIST)) $MM) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($NN G0020) (PROG NIL G0027 (COND ((< N $NN) (RETURN G0020))) (SETQ $NN (PROG2 NIL (1+ $NN) (SETQ G0020 (ADD2* G0020 (MUL2* (SIMPLIFY (MARRAYREF $UG $M $N)) (SIMPLIFY ($DIFF $F (SIMPLIFY (MARRAYREF $OMEGA $NN))))))))) (GO G0027))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))) (SETQ $MM (+ 1 $MM)) (GO G0026))) 1))))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $CHRISTOF) (QUOTE TRANSLATE)) (DEFPROP $CHRISTOF $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $CHRISTOF) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $CHRISTOF) (QUOTE (NIL . 1))) (DEFUN $CHRISTOF ($DIS) NIL ((LAMBDA NIL NIL ((LAMBDA ($I) (PROG NIL G0028 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0029 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($K) (PROG NIL G0030 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET (MARRAYSET (DIV (ADDN (LIST (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $LG $J $K)) (SIMPLIFY (MARRAYREF $OMEGA $I)))) (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $LG $I $K)) (SIMPLIFY (MARRAYREF $OMEGA $J)))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $LG $I $J)) (SIMPLIFY (MARRAYREF $OMEGA $K))))))) NIL) 2) $LCS $I $J $K) $LCS $J $I $K) (SETQ $K (+ 1 $K)) (GO G0030))) 1) ((LAMBDA ($K) (PROG NIL G0031 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET (MARRAYSET (SIMPLIFY ($DLGTAYLOR (COND ($DIAGMETRIC (SIMPLIFY ($RATSIMP (MUL2* (SIMPLIFY (MARRAYREF $UG $K $K)) (SIMPLIFY (MARRAYREF $LCS $I $J $K)))))) (T ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($L G0021) (PROG NIL G0032 (COND ((< N $L) (RETURN G0021))) (SETQ $L (PROG2 NIL (1+ $L) (SETQ G0021 (ADD2* G0021 (MUL2* (SIMPLIFY (MARRAYREF $UG $K $L)) (SIMPLIFY (MARRAYREF $LCS $I $J $L))))))) (GO G0032))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) $MCS $I $J $K) $MCS $J $I $K) (COND ($RATCHRISTOF (MARRAYSET (MARRAYSET (SIMPLIFY ($RATSIMP (SIMPLIFY (MARRAYREF $MCS $I $J $K)))) $MCS $I $J $K) $MCS $J $I $K))) (SETQ $K (+ 1 $K)) (GO G0031))) 1) (SETQ $J (+ 1 $J)) (GO G0029))) $I) (SETQ $I (+ 1 $I)) (GO G0028))) 1) (COND ((OR (LIKE $DIS $ALL) (LIKE $DIS $LCS)) ((LAMBDA ($I) (PROG NIL G0033 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0034 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($K) (PROG NIL G0035 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) (COND ((NOT (LIKE (SIMPLIFY (MARRAYREF $LCS $I $J $K)) 0)) (DISPLAY-FOR-TR T T (LIST (QUOTE (MEQUAL)) (LIST (LIST* $LCS (QUOTE (ARRAY))) $I $J $K) (SIMPLIFY (MARRAYREF $LCS $I $J $K)))))) (SETQ $K (+ 1 $K)) (GO G0035))) 1) (SETQ $J (+ 1 $J)) (GO G0034))) $I) (SETQ $I (+ 1 $I)) (GO G0033))) 1))) ($REMARRAY $LCS) (COND ((OR (LIKE $DIS $MCS) (LIKE $DIS $ALL)) ((LAMBDA ($I) (PROG NIL G0036 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0037 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($K) (PROG NIL G0038 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) (COND ((NOT (LIKE (SIMPLIFY (MARRAYREF $MCS $I $J $K)) 0)) (DISPLAY-FOR-TR T T (LIST (QUOTE (MEQUAL)) (LIST (LIST* $MCS (QUOTE (ARRAY))) $I $J $K) (SIMPLIFY (MARRAYREF $MCS $I $J $K)))))) (SETQ $K (+ 1 $K)) (GO G0038))) 1) (SETQ $J (+ 1 $J)) (GO G0037))) $I) (SETQ $I (+ 1 $I)) (GO G0036))) 1))) (QUOTE $DONE))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $LRICCICOM) (QUOTE TRANSLATE)) (DEFPROP $LRICCICOM $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $LRICCICOM) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $LRICCICOM) (QUOTE (NIL . 1))) (DEFUN $LRICCICOM ($DIS) NIL ((LAMBDA ($SUMA $SUMB $FLAT) NIL NIL (COND (($MEMBER (QUOTE $MCS) $ARRAYS) T) (T (SIMPLIFY ($CHRISTOF NIL)))) ((LAMBDA ($I) (PROG NIL G0039 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0040 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) (SETQ $SUMA 0) (SETQ $SUMB 0) ((LAMBDA ($K) (PROG NIL G0041 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) (COND ((NOT (= $K $I)) (SETQ $SUMA (ADD2* $SUMA (ADD2* (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $MCS $I $J $K)) (SIMPLIFY (MARRAYREF $OMEGA $K)))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $MCS $J $K $K)) (SIMPLIFY (MARRAYREF $OMEGA $I))))))))))) (SETQ $SUMB (ADD2* $SUMB ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($L G0022) (PROG NIL G0042 (COND ((< N $L) (RETURN G0022))) (SETQ $L (PROG2 NIL (1+ $L) (SETQ G0022 (ADD2* G0022 (ADD2* (MUL2* (SIMPLIFY (MARRAYREF $MCS $K $L $K)) (SIMPLIFY (MARRAYREF $MCS $I $J $L))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MUL2* (SIMPLIFY (MARRAYREF $MCS $I $K $L)) (SIMPLIFY (MARRAYREF $MCS $J $L $K)))))))))) (GO G0042))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))) (SETQ $K (+ 1 $K)) (GO G0041))) 1) (MARRAYSET (SIMPLIFY ($DLGTAYLOR (ADD2* $SUMA $SUMB))) $LR $I $J) (COND ($RATFAC (MARRAYSET (SIMPLIFY ($FACTOR (SIMPLIFY ($DLGTAYLOR (SIMPLIFY ($RATSIMP (SIMPLIFY (MARRAYREF $LR $I $J)))))))) $LR $I $J))) (MARRAYSET (SIMPLIFY (MARRAYREF $LR $I $J)) $LR $J $I) (SETQ $J (+ 1 $J)) (GO G0040))) $I) (SETQ $I (+ 1 $I)) (GO G0039))) 1) (COND ((NOT (LIKE $DIS NIL)) ((LAMBDA ($I) (PROG NIL G0043 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0044 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) (COND ((NOT (LIKE (SIMPLIFY (MARRAYREF $LR $I $J)) 0)) (SETQ $FLAT NIL) (DISPLAY-FOR-TR T T (LIST (QUOTE (MEQUAL)) (LIST (LIST* $LR (QUOTE (ARRAY))) $I $J) (SIMPLIFY (MARRAYREF $LR $I $J)))))) (SETQ $J (+ 1 $J)) (GO G0044))) $I) (SETQ $I (+ 1 $I)) (GO G0043))) 1) (COND ($FLAT ($PRINT (QUOTE |&This spacetime is empty and//or flat|)))))) (SETQ $TRACER (COND ($DIAGMETRIC (SIMPLIFY ($DLGTAYLOR (SIMPLIFY ($RATSIMP ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($I G0023) (PROG NIL G0045 (COND ((< N $I) (RETURN G0023))) (SETQ $I (PROG2 NIL (1+ $I) (SETQ G0023 (ADD2* G0023 (MUL2* (SIMPLIFY (MARRAYREF $LR $I $I)) (SIMPLIFY (MARRAYREF $UG $I $I))))))) (GO G0045))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM)))))) (T (SIMPLIFY ($DLGTAYLOR ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($J G0024) (PROG NIL G0046 (COND ((< N $J) (RETURN G0024))) (SETQ $J (PROG2 NIL (1+ $J) (SETQ G0024 (ADD2* G0024 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($I G0025) (PROG NIL G0047 (COND ((< N $I) (RETURN G0025))) (SETQ $I (PROG2 NIL (1+ $I) (SETQ G0025 (ADD2* G0025 (MUL2* (SIMPLIFY (MARRAYREF $LR $I $J)) (SIMPLIFY (MARRAYREF $UG $I $J))))))) (GO G0047))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (GO G0046))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM)))))) (QUOTE $DONE)) (QUOTE $SUMA) (QUOTE $SUMB) T))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $RICCICOM) (QUOTE TRANSLATE)) (DEFPROP $RICCICOM $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $RICCICOM) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $RICCICOM) (QUOTE (NIL . 1))) (DEFUN $RICCICOM ($DIS) NIL ((LAMBDA ($FLAT) NIL NIL (COND (($MEMBER (QUOTE $LR) $ARRAYS) T) (T (SIMPLIFY ($LRICCICOM NIL)))) ((LAMBDA ($I) (PROG NIL G0048 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0049 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET 0 $RICCI $I $J) (SETQ $J (+ 1 $J)) (GO G0049))) 1) (SETQ $I (+ 1 $I)) (GO G0048))) 1) ((LAMBDA ($I) (PROG NIL G0050 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0051 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET (COND ($DIAGMETRIC (SIMPLIFY ($RATSIMP (SIMPLIFY ($DLGTAYLOR (MUL2* (SIMPLIFY (MARRAYREF $LR $I $J)) (SIMPLIFY (MARRAYREF $UG $J $J)))))))) (T (SIMPLIFY ($DLGTAYLOR ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($K G0026) (PROG NIL G0052 (COND ((< N $K) (RETURN G0026))) (SETQ $K (PROG2 NIL (1+ $K) (SETQ G0026 (ADD2* G0026 (MUL2* (SIMPLIFY (MARRAYREF $LR $I $K)) (SIMPLIFY (MARRAYREF $UG $K $J))))))) (GO G0052))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) $RICCI $I $J) (COND ($RATFAC (MARRAYSET (SIMPLIFY ($FACTOR (SIMPLIFY ($DLGTAYLOR (SIMPLIFY ($RATSIMP (SIMPLIFY (MARRAYREF $RICCI $I $J)))))))) $RICCI $I $J))) (SETQ $J (+ 1 $J)) (GO G0051))) 1) (SETQ $I (+ 1 $I)) (GO G0050))) 1) (COND ((NOT (LIKE $DIS NIL)) ((LAMBDA ($I) (PROG NIL G0053 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0054 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) (COND ((NOT (LIKE (SIMPLIFY (MARRAYREF $RICCI $I $J)) 0)) (SETQ $FLAT NIL) (DISPLAY-FOR-TR T T (LIST (QUOTE (MEQUAL)) (LIST (LIST* $RICCI (QUOTE (ARRAY))) $I $J) (SIMPLIFY (MARRAYREF $RICCI $I $J)))))) (SETQ $J (+ 1 $J)) (GO G0054))) 1) (SETQ $I (+ 1 $I)) (GO G0053))) 1) (COND ($FLAT ($PRINT (QUOTE |&This spacetime is empty and//or flat|)))))) (QUOTE $DONE)) T))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $SCURVATURE) (QUOTE TRANSLATE)) (DEFPROP $SCURVATURE $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $SCURVATURE) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $SCURVATURE) (QUOTE (NIL . 0))) (DEFUN $SCURVATURE NIL NIL (COND ($RATFAC (SIMPLIFY ($FACTOR $TRACER))) (T $TRACER)))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $EINSTEIN) (QUOTE TRANSLATE)) (DEFPROP $EINSTEIN $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $EINSTEIN) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $EINSTEIN) (QUOTE (NIL . 1))) (DEFUN $EINSTEIN ($DIS) NIL ((LAMBDA ($FLAT) NIL NIL (COND (($MEMBER (QUOTE $RICCI) $ARRAYS) T) (T (SIMPLIFY ($RICCICOM NIL)))) ((LAMBDA ($I) (PROG NIL G0055 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0056 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) (COND ((= $I $J) (MARRAYSET (SIMPLIFY ($DLGTAYLOR (ADD2* (SIMPLIFY (MARRAYREF $RICCI $I $J)) (SIMPLIFY (LIST (QUOTE (MMINUS)) (DIV $TRACER 2)))))) $G $I $J)) (T (MARRAYSET (SIMPLIFY ($DLGTAYLOR (SIMPLIFY (MARRAYREF $RICCI $I $J)))) $G $I $J))) (COND ($RATFAC (MARRAYSET (SIMPLIFY ($FACTOR (SIMPLIFY ($RATSIMP (SIMPLIFY (MARRAYREF $G $I $J)))))) $G $I $J)) ($RATEINSTEIN (MARRAYSET (SIMPLIFY ($RATSIMP (SIMPLIFY (MARRAYREF $G $I $J)))) $G $I $J))) (COND ((AND (NOT (LIKE $DIS NIL)) (NOT (LIKE (SIMPLIFY (MARRAYREF $G $I $J)) 0))) (SETQ $FLAT NIL) (DISPLAY-FOR-TR T T (LIST (QUOTE (MEQUAL)) (LIST (LIST* $G (QUOTE (ARRAY))) $I $J) (SIMPLIFY (MARRAYREF $G $I $J)))))) (SETQ $J (+ 1 $J)) (GO G0056))) 1) (SETQ $I (+ 1 $I)) (GO G0055))) 1) (COND ((AND (NOT (LIKE $DIS NIL)) $FLAT) ($PRINT (QUOTE |&This spacetime is empty and//or flat|)))) (QUOTE $DONE)) T))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $RIEMANN) (QUOTE TRANSLATE)) (DEFPROP $RIEMANN $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $RIEMANN) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $RIEMANN) (QUOTE (NIL . 1))) (DEFUN $RIEMANN ($DIS) NIL ((LAMBDA ($FLAT) NIL NIL (COND (($MEMBER (QUOTE $MCS) $ARRAYS) T) (T (SIMPLIFY ($CHRISTOF NIL)))) ((LAMBDA ($I) (PROG NIL G0057 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0058 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($K) (PROG NIL G0059 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($L) (PROG NIL G0060 (COND ((> $L $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET 0 $R $I $J $K $L) (SETQ $L (+ 1 $L)) (GO G0060))) 1) (SETQ $K (+ 1 $K)) (GO G0059))) 1) (SETQ $J (+ 1 $J)) (GO G0058))) 1) (SETQ $I (+ 1 $I)) (GO G0057))) 1) ((LAMBDA ($I) (PROG NIL G0061 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0062 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($K) (PROG NIL G0063 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($L) (PROG NIL G0064 (COND ((> $L (COND ((= $K $I) $J) (T $DIM))) (RETURN (QUOTE $DONE)))) (MARRAYSET (SIMPLIFY ($DLGTAYLOR (ADD2* (MUL2* (RREMAINDER 1 2) (ADDN (LIST (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $LG $I $L)) (SIMPLIFY (MARRAYREF $OMEGA $J)) 1 (SIMPLIFY (MARRAYREF $OMEGA $K)) 1)) (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $LG $J $K)) (SIMPLIFY (MARRAYREF $OMEGA $I)) 1 (SIMPLIFY (MARRAYREF $OMEGA $L)) 1)) (SIMPLIFY (LIST (QUOTE (MMINUS)) (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $LG $I $K)) (SIMPLIFY (MARRAYREF $OMEGA $J)) 1 (SIMPLIFY (MARRAYREF $OMEGA $L)) 1)))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (SIMPLIFY ($DIFF (SIMPLIFY (MARRAYREF $LG $J $L)) (SIMPLIFY (MARRAYREF $OMEGA $I)) 1 (SIMPLIFY (MARRAYREF $OMEGA $K)) 1))))) NIL)) (COND ($DIAGMETRIC (SIMPLIFY ($RATSIMP ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($U G0027) (PROG NIL G0065 (COND ((< N $U) (RETURN G0027))) (SETQ $U (PROG2 NIL (1+ $U) (SETQ G0027 (ADD2* G0027 (MUL2* (SIMPLIFY (MARRAYREF $LG $U $U)) (ADD2* (MUL2* (SIMPLIFY (MARRAYREF $MCS $J $K $U)) (SIMPLIFY (MARRAYREF $MCS $I $L $U))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MUL2* (SIMPLIFY (MARRAYREF $MCS $J $L $U)) (SIMPLIFY (MARRAYREF $MCS $I $K $U))))))))))) (GO G0065))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM)))) (T ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($U G0028) (PROG NIL G0066 (COND ((< N $U) (RETURN G0028))) (SETQ $U (PROG2 NIL (1+ $U) (SETQ G0028 (ADD2* G0028 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($V G0029) (PROG NIL G0067 (COND ((< N $V) (RETURN G0029))) (SETQ $V (PROG2 NIL (1+ $V) (SETQ G0029 (ADD2* G0029 (MUL2* (SIMPLIFY (MARRAYREF $LG $U $V)) (ADD2* (MUL2* (SIMPLIFY (MARRAYREF $MCS $J $K $U)) (SIMPLIFY (MARRAYREF $MCS $I $L $V))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MUL2* (SIMPLIFY (MARRAYREF $MCS $J $L $U)) (SIMPLIFY (MARRAYREF $MCS $I $K $V))))))))))) (GO G0067))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (GO G0066))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM)))))) $R $I $J $K $L) (COND ($RATFAC (MARRAYSET (SIMPLIFY ($FACTOR (SIMPLIFY ($RATSIMP (SIMPLIFY (MARRAYREF $R $I $J $K $L)))))) $R $I $J $K $L)) ($RATRIEMAN (MARRAYSET (SIMPLIFY ($RATSIMP (SIMPLIFY (MARRAYREF $R $I $J $K $L)))) $R $I $J $K $L))) (MARRAYSET (SIMPLIFY (MARRAYREF $R $I $J $K $L)) $R $J $I $L $K) (MARRAYSET (MARRAYSET (SIMPLIFY (LIST (QUOTE (MMINUS)) (SIMPLIFY (MARRAYREF $R $I $J $K $L)))) $R $J $I $K $L) $R $I $J $L $K) (COND ((OR (NOT (= $I $K)) (> $J $L)) (MARRAYSET (MARRAYSET (SIMPLIFY (MARRAYREF $R $I $J $K $L)) $R $L $K $J $I) $R $K $L $I $J) (MARRAYSET (MARRAYSET (SIMPLIFY (LIST (QUOTE (MMINUS)) (SIMPLIFY (MARRAYREF $R $I $J $K $L)))) $R $K $L $J $I) $R $L $K $I $J))) (COND ((AND (NOT (LIKE $DIS NIL)) (NOT (LIKE (SIMPLIFY (MARRAYREF $R $I $J $K $L)) 0))) (SETQ $FLAT NIL) (DISPLAY-FOR-TR T T (LIST (QUOTE (MEQUAL)) (LIST (LIST* $R (QUOTE (ARRAY))) $I $J $K $L) (SIMPLIFY (MARRAYREF $R $I $J $K $L)))))) (SETQ $L (+ 1 $L)) (GO G0064))) (+ $K 1)) (SETQ $K (+ 1 $K)) (GO G0063))) $I) (SETQ $J (+ 1 $J)) (GO G0062))) (+ $I 1)) (SETQ $I (+ 1 $I)) (GO G0061))) 1) (COND ((AND (NOT (LIKE $DIS NIL)) $FLAT) ($PRINT (QUOTE |&This spacetime is flat|)))) (QUOTE $DONE)) T))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $RAISERIEMANN) (QUOTE TRANSLATE)) (DEFPROP $RAISERIEMANN $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $RAISERIEMANN) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $RAISERIEMANN) (QUOTE (NIL . 1))) (DEFUN $RAISERIEMANN ($DIS) NIL ((LAMBDA NIL NIL (COND (($MEMBER (QUOTE $R) $ARRAYS) T) (T (SIMPLIFY ($RIEMANN NIL)))) ((LAMBDA ($I) (PROG NIL G0068 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0069 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($K) (PROG NIL G0070 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($L) (PROG NIL G0071 (COND ((> $L $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET 0 $UR $I $J $K $L) (SETQ $L (+ 1 $L)) (GO G0071))) 1) (SETQ $K (+ 1 $K)) (GO G0070))) 1) (SETQ $J (+ 1 $J)) (GO G0069))) 1) (SETQ $I (+ 1 $I)) (GO G0068))) 1) ((LAMBDA ($I) (PROG NIL G0072 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0073 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($K) (PROG NIL G0074 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($L) (PROG NIL G0075 (COND ((> $L (COND ((= $K $I) $J) (T $DIM))) (RETURN (QUOTE $DONE)))) (MARRAYSET (COND ($DIAGMETRIC (SIMPLIFY ($RATSIMP (MULN (LIST (SIMPLIFY (MARRAYREF $R $I $J $K $L)) (SIMPLIFY (MARRAYREF $UG $I $I)) (SIMPLIFY (MARRAYREF $UG $J $J)) (SIMPLIFY (MARRAYREF $UG $K $K)) (SIMPLIFY (MARRAYREF $UG $L $L))) NIL)))) (T ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($D G0030) (PROG NIL G0076 (COND ((< N $D) (RETURN G0030))) (SETQ $D (PROG2 NIL (1+ $D) (SETQ G0030 (ADD2* G0030 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($C G0031) (PROG NIL G0077 (COND ((< N $C) (RETURN G0031))) (SETQ $C (PROG2 NIL (1+ $C) (SETQ G0031 (ADD2* G0031 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($B G0032) (PROG NIL G0078 (COND ((< N $B) (RETURN G0032))) (SETQ $B (PROG2 NIL (1+ $B) (SETQ G0032 (ADD2* G0032 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($A G0033) (PROG NIL G0079 (COND ((< N $A) (RETURN G0033))) (SETQ $A (PROG2 NIL (1+ $A) (SETQ G0033 (ADD2* G0033 (MULN (LIST (SIMPLIFY (MARRAYREF $R $A $B $C $D)) (SIMPLIFY (MARRAYREF $UG $I $A)) (SIMPLIFY (MARRAYREF $UG $J $B)) (SIMPLIFY (MARRAYREF $UG $K $C)) (SIMPLIFY (MARRAYREF $UG $L $D))) NIL))))) (GO G0079))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (GO G0078))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (GO G0077))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (GO G0076))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))) $UR $I $J $K $L) (COND ($RATRIEMAN (MARRAYSET (SIMPLIFY ($RATSIMP (SIMPLIFY (MARRAYREF $UR $I $J $K $L)))) $UR $I $J $K $L))) (MARRAYSET (SIMPLIFY (MARRAYREF $UR $I $J $K $L)) $UR $J $I $L $K) (MARRAYSET (MARRAYSET (SIMPLIFY (LIST (QUOTE (MMINUS)) (SIMPLIFY (MARRAYREF $UR $I $J $K $L)))) $UR $J $I $K $L) $UR $I $J $L $K) (COND ((OR (NOT (= $I $K)) (> $J $L)) (MARRAYSET (MARRAYSET (SIMPLIFY (MARRAYREF $UR $I $J $K $L)) $UR $L $K $J $I) $UR $K $L $I $J) (MARRAYSET (MARRAYSET (SIMPLIFY (LIST (QUOTE (MMINUS)) (SIMPLIFY (MARRAYREF $UR $I $J $K $L)))) $UR $K $L $J $I) $UR $L $K $I $J))) (COND ((AND (NOT (LIKE $DIS NIL)) (NOT (LIKE (SIMPLIFY (MARRAYREF $UR $I $J $K $L)) 0))) (DISPLAY-FOR-TR T T (LIST (QUOTE (MEQUAL)) (LIST (LIST* $UR (QUOTE (ARRAY))) $I $J $K $L) (SIMPLIFY (MARRAYREF $UR $I $J $K $L)))))) (SETQ $L (+ 1 $L)) (GO G0075))) (+ $K 1)) (SETQ $K (+ 1 $K)) (GO G0074))) $I) (SETQ $J (+ 1 $J)) (GO G0073))) (+ $I 1)) (SETQ $I (+ 1 $I)) (GO G0072))) 1))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $RINVARIANT) (QUOTE TRANSLATE)) (DEFPROP $RINVARIANT $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $RINVARIANT) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $RINVARIANT) (QUOTE (NIL . 0))) (DEFUN $RINVARIANT NIL NIL ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($L G0034) (PROG NIL G0080 (COND ((< N $L) (RETURN G0034))) (SETQ $L (PROG2 NIL (1+ $L) (SETQ G0034 (ADD2* G0034 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($K G0035) (PROG NIL G0081 (COND ((< N $K) (RETURN G0035))) (SETQ $K (PROG2 NIL (1+ $K) (SETQ G0035 (ADD2* G0035 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($J G0036) (PROG NIL G0082 (COND ((< N $J) (RETURN G0036))) (SETQ $J (PROG2 NIL (1+ $J) (SETQ G0036 (ADD2* G0036 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($I G0037) (PROG NIL G0083 (COND ((< N $I) (RETURN G0037))) (SETQ $I (PROG2 NIL (1+ $I) (SETQ G0037 (ADD2* G0037 (MUL2* (SIMPLIFY (MARRAYREF $R $I $J $K $L)) (SIMPLIFY (MARRAYREF $UR $I $J $K $L))))))) (GO G0083))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (GO G0082))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (GO G0081))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (GO G0080))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $WEYL) (QUOTE TRANSLATE)) (DEFPROP $WEYL $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $WEYL) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $WEYL) (QUOTE (NIL . 1))) (DEFUN $WEYL ($DIS) NIL ((LAMBDA ($FLAT) NIL (PROG NIL (COND ((= $DIM 2) ($PRINT (QUOTE |&All 2 dimensional spacetimes are conformally flat|)) (RETURN (QUOTE $DONE)))) (COND ((PROGN ($MEMBER (QUOTE $LR) $ARRAYS) ($MEMBER (QUOTE $R) $ARRAYS)) T) (T (SIMPLIFY ($LRICCICOM NIL)) (SIMPLIFY ($RIEMANN NIL)))) ((LAMBDA ($I) (PROG NIL G0084 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0085 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($K) (PROG NIL G0086 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($L) (PROG NIL G0087 (COND ((> $L $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET 0 $W $I $J $K $L) (SETQ $L (+ 1 $L)) (GO G0087))) 1) (SETQ $K (+ 1 $K)) (GO G0086))) 1) (SETQ $J (+ 1 $J)) (GO G0085))) 1) (SETQ $I (+ 1 $I)) (GO G0084))) 1) ((LAMBDA ($I) (PROG NIL G0088 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0089 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($K) (PROG NIL G0090 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($L) (PROG NIL G0091 (COND ((> $L (COND ((= $K $I) $J) (T $DIM))) (RETURN (QUOTE $DONE)))) (MARRAYSET (SIMPLIFY ($DLGTAYLOR (ADDN (LIST (SIMPLIFY (MARRAYREF $R $I $J $K $L)) (MUL2* (RREMAINDER 1 (+ $DIM -2)) (ADDN (LIST (MUL2* (SIMPLIFY (MARRAYREF $LG $I $L)) (SIMPLIFY (MARRAYREF $LR $J $K))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MUL2* (SIMPLIFY (MARRAYREF $LG $I $K)) (SIMPLIFY (MARRAYREF $LR $L $J))))) (MUL2* (SIMPLIFY (MARRAYREF $LG $J $K)) (SIMPLIFY (MARRAYREF $LR $L $I))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MUL2* (SIMPLIFY (MARRAYREF $LG $J $L)) (SIMPLIFY (MARRAYREF $LR $K $I)))))) NIL)) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MUL2* (DIV $TRACER (* (+ $DIM -1) (+ $DIM -2))) (ADD2* (MUL2* (SIMPLIFY (MARRAYREF $LG $I $L)) (SIMPLIFY (MARRAYREF $LG $K $J))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MUL2* (SIMPLIFY (MARRAYREF $LG $I $K)) (SIMPLIFY (MARRAYREF $LG $L $J)))))))))) NIL))) $W $I $J $K $L) (COND ($RATFAC (MARRAYSET (SIMPLIFY ($FACTOR (SIMPLIFY ($RATSIMP (SIMPLIFY (MARRAYREF $W $I $J $K $L)))))) $W $I $J $K $L)) ($RATWEYL (MARRAYSET (SIMPLIFY ($RATSIMP (SIMPLIFY (MARRAYREF $W $I $J $K $L)))) $W $I $J $K $L))) (MARRAYSET (SIMPLIFY (MARRAYREF $W $I $J $K $L)) $W $J $I $L $K) (MARRAYSET (MARRAYSET (SIMPLIFY (LIST (QUOTE (MMINUS)) (SIMPLIFY (MARRAYREF $W $I $J $K $L)))) $W $J $I $K $L) $W $I $J $L $K) (COND ((OR (NOT (= $I $K)) (> $J $L)) (MARRAYSET (MARRAYSET (SIMPLIFY (MARRAYREF $W $I $J $K $L)) $W $L $K $J $I) $W $K $L $I $J) (MARRAYSET (MARRAYSET (SIMPLIFY (LIST (QUOTE (MMINUS)) (SIMPLIFY (MARRAYREF $W $I $J $K $L)))) $W $K $L $J $I) $W $L $K $I $J))) (COND ((AND (NOT (LIKE $DIS NIL)) (NOT (LIKE (SIMPLIFY (MARRAYREF $W $I $J $K $L)) 0))) (SETQ $FLAT NIL) (DISPLAY-FOR-TR T T (LIST (QUOTE (MEQUAL)) (LIST (LIST* $W (QUOTE (ARRAY))) $I $J $K $L) (SIMPLIFY (MARRAYREF $W $I $J $K $L)))))) (SETQ $L (+ 1 $L)) (GO G0091))) (+ $K 1)) (SETQ $K (+ 1 $K)) (GO G0090))) $I) (SETQ $J (+ 1 $J)) (GO G0089))) (+ $I 1)) (SETQ $I (+ 1 $I)) (GO G0088))) 1) (COND ((AND (NOT (LIKE $DIS NIL)) $FLAT) ($PRINT (QUOTE |&This spacetime is conformally flat|)))) (RETURN (QUOTE $DONE)))) T))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $NTERMST) (QUOTE TRANSLATE)) (DEFPROP $NTERMST $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $NTERMST) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $NTERMST) (QUOTE (NIL . 1))) (DEFUN $NTERMST ($F) NIL ((LAMBDA ($I) (PROG NIL G0092 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0093 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ($PRINT (LIST (QUOTE (MLIST)) (LIST (QUOTE (MLIST)) $I $J) ($NTERMS (SIMPLIFY (MARRAYREF $F $I $J))))) (SETQ $J (+ 1 $J)) (GO G0093))) 1) (SETQ $I (+ 1 $I)) (GO G0092))) 1))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $DSCALAR) (QUOTE TRANSLATE)) (DEFPROP $DSCALAR $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $DSCALAR) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $DSCALAR) (QUOTE (NIL . 1))) (DEFUN $DSCALAR ($PHI) NIL (COND ($DIAGMETRIC (SIMPLIFY ($RATSIMP (MUL2* (DIV 1 (SIMPLIFY (LIST (QUOTE (%SQRT)) (SIMPLIFY (LIST (QUOTE (MMINUS)) $GDET))))) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($I G0038) (PROG NIL G0094 (COND ((< N $I) (RETURN G0038))) (SETQ $I (PROG2 NIL (1+ $I) (SETQ G0038 (ADD2* G0038 (SIMPLIFY ($DIFF (MULN (LIST (SIMPLIFY (MARRAYREF $UG $I $I)) (SIMPLIFY (LIST (QUOTE (%SQRT)) (SIMPLIFY (LIST (QUOTE (MMINUS)) $GDET)))) (SIMPLIFY ($DIFF $PHI (SIMPLIFY (MARRAYREF $OMEGA $I))))) NIL) (SIMPLIFY (MARRAYREF $OMEGA $I)))))))) (GO G0094))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (T (SIMPLIFY ($RATSIMP (MUL2* (DIV 1 (SIMPLIFY (LIST (QUOTE (%SQRT)) (SIMPLIFY (LIST (QUOTE (MMINUS)) $GDET))))) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($J G0039) (PROG NIL G0095 (COND ((< N $J) (RETURN G0039))) (SETQ $J (PROG2 NIL (1+ $J) (SETQ G0039 (ADD2* G0039 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($I G0040) (PROG NIL G0096 (COND ((< N $I) (RETURN G0040))) (SETQ $I (PROG2 NIL (1+ $I) (SETQ G0040 (ADD2* G0040 (SIMPLIFY ($DIFF (MULN (LIST (SIMPLIFY (MARRAYREF $UG $I $J)) (SIMPLIFY (LIST (QUOTE (%SQRT)) (SIMPLIFY (LIST (QUOTE (MMINUS)) $GDET)))) (SIMPLIFY ($DIFF $PHI (SIMPLIFY (MARRAYREF $OMEGA $J))))) NIL) (SIMPLIFY (MARRAYREF $OMEGA $I)))))))) (GO G0096))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (GO G0095))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM)))))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $CHECKDIV) (QUOTE TRANSLATE)) (DEFPROP $CHECKDIV $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $CHECKDIV) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $CHECKDIV) (QUOTE (NIL . 1))) (DEFUN $CHECKDIV ($GXYZ) NIL ((LAMBDA ($I $J) NIL NIL (COND (($DIAGMATRIXP $GXYZ $DIM) ((LAMBDA ($I) (PROG NIL G0097 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ($PRINT (MARRAYSET (SIMPLIFY ($RATSIMP (SIMPLIFY ($DLGTAYLOR (ADD2* (MUL2* (DIV 1 (SIMPLIFY (LIST (QUOTE (%SQRT)) (SIMPLIFY (LIST (QUOTE (MMINUS)) $GDET))))) (SIMPLIFY ($DIFF (MUL2* (SIMPLIFY (LIST (QUOTE (%SQRT)) (SIMPLIFY (LIST (QUOTE (MMINUS)) $GDET)))) (SIMPLIFY (MARRAYREF $GXYZ $I $I))) (SIMPLIFY (MARRAYREF $OMEGA $I))))) (SIMPLIFY (LIST (QUOTE (MMINUS)) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($J G0041) (PROG NIL G0098 (COND ((< N $J) (RETURN G0041))) (SETQ $J (PROG2 NIL (1+ $J) (SETQ G0041 (ADD2* G0041 (MUL2* (SIMPLIFY (MARRAYREF $MCS $I $J $J)) (SIMPLIFY (MARRAYREF $GXYZ $J $J))))))) (GO G0098))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM)))))))) $DIV $I)) (SETQ $I (+ 1 $I)) (GO G0097))) 1)) (T ((LAMBDA ($I) (PROG NIL G0099 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ($PRINT (MARRAYSET (SIMPLIFY ($RATSIMP (SIMPLIFY ($DLGTAYLOR (ADD2* (MUL2* (DIV 1 (SIMPLIFY (LIST (QUOTE (%SQRT)) (SIMPLIFY (LIST (QUOTE (MMINUS)) $GDET))))) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($J G0042) (PROG NIL G0100 (COND ((< N $J) (RETURN G0042))) (SETQ $J (PROG2 NIL (1+ $J) (SETQ G0042 (ADD2* G0042 (SIMPLIFY ($DIFF (MUL2* (SIMPLIFY (LIST (QUOTE (%SQRT)) (SIMPLIFY (LIST (QUOTE (MMINUS)) $GDET)))) (SIMPLIFY (MARRAYREF $GXYZ $I $J))) (SIMPLIFY (MARRAYREF $OMEGA $J)))))))) (GO G0100))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM)) (SIMPLIFY (LIST (QUOTE (MMINUS)) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($J G0043) (PROG NIL G0101 (COND ((< N $J) (RETURN G0043))) (SETQ $J (PROG2 NIL (1+ $J) (SETQ G0043 (ADD2* G0043 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($A G0044) (PROG NIL G0102 (COND ((< N $A) (RETURN G0044))) (SETQ $A (PROG2 NIL (1+ $A) (SETQ G0044 (ADD2* G0044 (MUL2* (SIMPLIFY (MARRAYREF $MCS $I $J $A)) (SIMPLIFY (MARRAYREF $GXYZ $A $J))))))) (GO G0102))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) (GO G0101))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM)))))))) $DIV $I)) (SETQ $I (+ 1 $I)) (GO G0099))) 1)))) 0 0))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $FINDDE1) (QUOTE TRANSLATE)) (DEFPROP $FINDDE1 $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $FINDDE1) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $FINDDE1) (QUOTE (NIL . 1))) (DEFUN $FINDDE1 ($LIST) NIL ((LAMBDA ($INFLAG $DERIV $L $L1 $Q) NIL (SETQ $DEINDEX (QUOTE ((MLIST)))) ((LAMBDA ($I) (PROG NIL G0103 (COND ((LIKE $LIST (QUOTE ((MLIST)))) (RETURN (QUOTE $DONE)))) (SETQ $L1 (SIMPLIFY ($FACTOR ($NUM (SIMPLIFY ($FIRST $LIST)))))) (SETQ $LIST (SIMPLIFY ($REST $LIST))) (COND ((NOT ($FREEOF $DERIV $L1)) (SETQ $DEINDEX ($CONS $I $DEINDEX)) (COND ((NOT (LIKE (SIMPLIFY ($INPART $L1 0)) (QUOTE &*))) (SETQ $L ($CONS $L1 $L))) (T (SETQ $Q 1) ((LAMBDA ($J) (PROG NIL G0104 (COND ((> $J ($LENGTH $L1)) (RETURN (QUOTE $DONE)))) (COND ((NOT ($FREEOF $DERIV (SIMPLIFY ($INPART $L1 $J)))) (SETQ $Q (MUL2* $Q (SIMPLIFY ($INPART $L1 $J)))))) (SETQ $J (+ 1 $J)) (GO G0104))) 1) (SETQ $L ($CONS $Q $L)))))) (SETQ $I (+ 1 $I)) (GO G0103))) 1) (SIMPLIFY ($CLEANUP $L))) T (SIMPLIFY ($NOUNIFY (QUOTE $DIFF))) (QUOTE ((MLIST))) (QUOTE $L1) (QUOTE $Q)))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $FINDDE2) (QUOTE TRANSLATE)) (DEFPROP $FINDDE2 $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $FINDDE2) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $FINDDE2) (QUOTE (NIL . 1))) (DEFUN $FINDDE2 ($A) NIL ((LAMBDA ($INFLAG $DERIV $L $T $Q) NIL (SETQ $DEINDEX (QUOTE ((MLIST)))) ((LAMBDA ($I) (PROG NIL G0105 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0106 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) (SETQ $T (SIMPLIFY ($FACTOR ($NUM (SIMPLIFY (MARRAYREF $A $I $J)))))) (COND ((NOT ($FREEOF $DERIV $T)) (SETQ $DEINDEX ($CONS (LIST (QUOTE (MLIST)) $I $J) $DEINDEX)) (COND ((NOT (LIKE (SIMPLIFY ($INPART $T 0)) (QUOTE &*))) (SETQ $L ($CONS $T $L))) (T (SETQ $Q 1) ((LAMBDA ($N) (PROG NIL G0107 (COND ((> $N ($LENGTH $T)) (RETURN (QUOTE $DONE)))) (COND ((NOT ($FREEOF $DERIV (SIMPLIFY ($INPART $T $N)))) (SETQ $Q (MUL2* $Q (SIMPLIFY ($INPART $T $N)))))) (SETQ $N (+ 1 $N)) (GO G0107))) 1) (SETQ $L ($CONS $Q $L)))))) (SETQ $J (+ 1 $J)) (GO G0106))) 1) (SETQ $I (+ 1 $I)) (GO G0105))) 1) (SIMPLIFY ($CLEANUP $L))) T (SIMPLIFY ($NOUNIFY (QUOTE $DIFF))) (QUOTE ((MLIST))) (QUOTE $T) (QUOTE $Q)))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $FINDDE3) (QUOTE TRANSLATE)) (DEFPROP $FINDDE3 $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $FINDDE3) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $FINDDE3) (QUOTE (NIL . 1))) (DEFUN $FINDDE3 ($A) NIL ((LAMBDA ($INFLAG $DERIV $L $T $Q) NIL (SETQ $DEINDEX (QUOTE ((MLIST)))) ((LAMBDA ($I) (PROG NIL G0108 (COND ((> $I $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0109 (COND ((> $J $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($K) (PROG NIL G0110 (COND ((> $K $DIM) (RETURN (QUOTE $DONE)))) (SETQ $T (SIMPLIFY ($FACTOR ($NUM (SIMPLIFY (MARRAYREF $A $I $J $K)))))) (COND ((NOT ($FREEOF $DERIV $T)) (SETQ $DEINDEX ($CONS (LIST (QUOTE (MLIST)) $I $J $K) $DEINDEX)) (COND ((NOT (LIKE (SIMPLIFY ($INPART $T 0)) (QUOTE &*))) (SETQ $L ($CONS $T $L))) (T (SETQ $Q 1) ((LAMBDA ($N) (PROG NIL G0111 (COND ((> $N ($LENGTH $T)) (RETURN (QUOTE $DONE)))) (COND ((NOT ($FREEOF $DERIV (SIMPLIFY ($INPART $T $N)))) (SETQ $Q (MUL2* $Q (SIMPLIFY ($INPART $T $N)))))) (SETQ $N (+ 1 $N)) (GO G0111))) 1) (SETQ $L ($CONS $Q $L)))))) (SETQ $K (+ 1 $K)) (GO G0110))) 1) (SETQ $J (+ 1 $J)) (GO G0109))) 1) (SETQ $I (+ 1 $I)) (GO G0108))) 1) (SIMPLIFY ($CLEANUP $L))) T (SIMPLIFY ($NOUNIFY (QUOTE $DIFF))) (QUOTE ((MLIST))) (QUOTE $T) (QUOTE $Q)))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $CLEANUP) (QUOTE TRANSLATE)) (DEFPROP $CLEANUP $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $CLEANUP) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $CLEANUP) (QUOTE (NIL . 1))) (DEFUN $CLEANUP ($LL) NIL ((LAMBDA ($A $L $INDEX) NIL ((LAMBDA (MDO) (PROG NIL G0112 (COND ((LIKE $LL (QUOTE ((MLIST)))) (RETURN (QUOTE $DONE)))) (SETQ $A (SIMPLIFY ($FIRST $LL))) (SETQ $LL (SIMPLIFY ($REST $LL))) (COND ((NOT ($MEMBER $A $LL)) (SETQ $L ($CONS $A $L)) (SETQ $INDEX ($CONS (SIMPLIFY ($FIRST $DEINDEX)) $INDEX)))) (SETQ $DEINDEX (SIMPLIFY ($REST $DEINDEX))) (SETQ MDO (+ 1 MDO)) (GO G0112))) 1) (SETQ $DEINDEX $INDEX) $L) (QUOTE $A) (QUOTE ((MLIST))) (QUOTE ((MLIST)))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $FINDDE) (QUOTE TRANSLATE)) (DEFPROP $FINDDE $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $FINDDE) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $FINDDE) (QUOTE (NIL . 2))) (DEFUN $FINDDE ($A $N) NIL (PROGN NIL (COND ((= $N 1) (SIMPLIFY ($FINDDE1 $A))) ((= $N 2) (SIMPLIFY ($FINDDE2 $A))) ((= $N 3) (SIMPLIFY ($FINDDE3 $A))) (T (SIMPLIFY ($ERROR (QUOTE |&Invalid dimension:|) $N))))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $DELETEN) (QUOTE TRANSLATE)) (DEFPROP $DELETEN $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $DELETEN) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $DELETEN) (QUOTE (NIL . 2))) (DEFUN $DELETEN ($L $N) NIL (PROGN NIL ((LAMBDA ($LEN) NIL NIL (COND ((LIKE $L (QUOTE ((MLIST)))) $L) (T (SETQ $LEN ($LENGTH $L)) (COND ((OR (> $N $LEN) (< $N 1)) (SIMPLIFY ($ERROR (QUOTE |&Second argument out of range|)))) ((= $N 1) (SIMPLIFY ($REST $L))) ((= $N $LEN) (SIMPLIFY ($REST $L -1))) (T ($APPEND (SIMPLIFY ($REST $L (+ $N (- $LEN) -1))) (SIMPLIFY ($REST $L $N)))))))) 0)))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $GETRID) (QUOTE TRANSLATE)) (DEFPROP $GETRID $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $GETRID) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $GETRID) (QUOTE (NIL . 0))) (DEFUN $GETRID NIL NIL (PROGN (SIMPLIFY ((LAMBDA (MAPLP RES) (SETQ RES (MAP1 (GETOPR (FUNCTION |DSK:TENSOR;CTENSR TRLISP-tr-gen-3|)) (QUOTE ((MLIST) $TAYSWITCH $RATCHRISTOF $EXPANDCHRISTOF $RATEINSTEIN $RATRIEMAN $HALFC $CHRSUB $MOTION $DLGTAYLOR $TSETUP $CHRISTOF $RICCICOM $TESTINDEX $EINSTEIN $TRANSFORM $RIEMANN $DIAGMATRIXP $RAISERIEMANN $RSCALAR $LRICCICOM $WEYL $METRIC)))) (COND ((ATOM RES) (LIST (QUOTE (MLIST)) RES)) ((EQ (CAAR RES) (QUOTE MLIST)) RES) (T (CONS (QUOTE (MLIST)) (CDR RES))))) T NIL)) (SIMPLIFY ($SWAPOUT (QUOTE ((MLIST))) $TETRADCALEQ $RATWEYL $NICEPRINT $KDELT $SETFLAGS $BDVAC $INVARIANT1 $INVARIANT2 $TSETUP $NEWMET $FILEMET $SERMET $SYMMETRICP $DL $DU $DALEM $SCURVATURE $RINVARIANT $NTERMST $DSCALAR $CHECKDIV $SETUPTETRAD $CONTRACT4 $PSI $PETROV $FINDDE1 $FINDDE2 $FINDDE3 $CLEANUP $FINDDE $DELETEN $GETRID))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $BDVAC) (QUOTE TRANSLATE)) (DEFPROP $BDVAC $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $BDVAC) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $BDVAC) (QUOTE (NIL . 0))) (DEFUN $BDVAC NIL NIL ((LAMBDA NIL NIL (COND ((NOT (= $DIM 4)) (SIMPLIFY ($ERROR (QUOTE |& THIS PROGRAM IS RESTRICTED TO 4 DIMENSIONS|))))) (SETQ $ZZ (SIMPLIFY ($READ (QUOTE |&give a name to the scalar field and/
	     declare its functional dependencies|)))) (SETQ $BOXQ 0) ((LAMBDA ($I) (PROG NIL G0113 (COND ((> $I 4) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0114 (COND ((> $J 4) (RETURN (QUOTE $DONE)))) (MARRAYSET (ADD2* (MUL2* (DIV $W (POWER $ZZ 2)) (ADD2* (MUL2* (SIMPLIFY ($DIFF $ZZ (SIMPLIFY (MARRAYREF $OMEGA $I)))) (SIMPLIFY ($DIFF $ZZ (SIMPLIFY (MARRAYREF $OMEGA $J))))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (DIV (MUL2* (SIMPLIFY (MARRAYREF $LG $I $J)) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($KK G0045) (PROG NIL G0115 (COND ((< N $KK) (RETURN G0045))) (SETQ $KK (PROG2 NIL (1+ $KK) (SETQ G0045 (ADD2* G0045 (MULN (LIST (SIMPLIFY ($DIFF $ZZ (SIMPLIFY (MARRAYREF $OMEGA $KK)))) (SIMPLIFY ($DIFF $ZZ (SIMPLIFY (MARRAYREF $OMEGA $KK)))) (SIMPLIFY (MARRAYREF $UG $KK $KK))) NIL))))) (GO G0115))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 4)) 2))))) (DIV (ADDN (LIST (SIMPLIFY ($DIFF (SIMPLIFY ($DIFF $ZZ (SIMPLIFY (MARRAYREF $OMEGA $I)))) (SIMPLIFY (MARRAYREF $OMEGA $J)))) (SIMPLIFY (LIST (QUOTE (MMINUS)) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($KK G0046) (PROG NIL G0116 (COND ((< N $KK) (RETURN G0046))) (SETQ $KK (PROG2 NIL (1+ $KK) (SETQ G0046 (ADD2* G0046 (MUL2* (SIMPLIFY (MARRAYREF $MCS $I $J $KK)) (SIMPLIFY ($DIFF $ZZ (SIMPLIFY (MARRAYREF $OMEGA $KK))))))))) (GO G0116))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 4))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MUL2* (SIMPLIFY (MARRAYREF $LG $I $J)) $BOXQ)))) NIL) $ZZ)) $ADDD $I $J) (SETQ $J (+ 1 $J)) (GO G0114))) 1) (SETQ $I (+ 1 $I)) (GO G0113))) 1) ((LAMBDA ($I) (PROG NIL G0117 (COND ((> $I 4) (RETURN (QUOTE $DONE)))) ((LAMBDA ($J) (PROG NIL G0118 (COND ((> $J 4) (RETURN (QUOTE $DONE)))) (MARRAYSET (SIMPLIFY ($RATSIMP (ADDN (LIST (SIMPLIFY (MARRAYREF $LR $I $J)) (SIMPLIFY (LIST (QUOTE (MMINUS)) (DIV (MUL2* $R (SIMPLIFY (MARRAYREF $LG $I $J))) 2))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MUL2* 0 (SIMPLIFY (MARRAYREF $T $I $J))))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (SIMPLIFY (MARRAYREF $ADDD $I $J))))) NIL))) $BD $I $J) (SETQ $J (+ 1 $J)) (GO G0118))) 1) (SETQ $I (+ 1 $I)) (GO G0117))) 1) ($REMARRAY $ADDD))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $INVARIANT1) (QUOTE TRANSLATE)) (DEFPROP $INVARIANT1 $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $INVARIANT1) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $INVARIANT1) (QUOTE (NIL . 0))) (DEFUN $INVARIANT1 NIL NIL ((LAMBDA NIL NIL ((LAMBDA ($AA) (PROG NIL G0119 (COND ((> $AA $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($BB) (PROG NIL G0120 (COND ((> $BB $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET 0 $INV1 $AA $BB) (SETQ $BB (+ 1 $BB)) (GO G0120))) 1) (SETQ $AA (+ 1 $AA)) (GO G0119))) 1) (COND ($DIAGMETRIC ((LAMBDA ($AA) (PROG NIL G0121 (COND ((> $AA $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($BB) (PROG NIL G0122 (COND ((> $BB $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET (SIMPLIFY ($RATSIMP (ADDN (LIST (DIV (MUL2* ($KDELT $AA $BB) (POWER $TRACER 2)) 2) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MULN (LIST 2 $TRACER (SIMPLIFY (MARRAYREF $RICCI $AA $BB))) NIL))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MULN (LIST 2 ($KDELT $AA $BB) (SIMPLIFY ($DSCALAR $TRACER))) NIL))) (MULN (LIST 2 (SIMPLIFY (MARRAYREF $UG $AA $AA)) (ADD2* (SIMPLIFY ($DIFF (SIMPLIFY ($DIFF $TRACER (SIMPLIFY (MARRAYREF $OMEGA $BB)))) (SIMPLIFY (MARRAYREF $OMEGA $AA)))) (SIMPLIFY (LIST (QUOTE (MMINUS)) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($KK G0047) (PROG NIL G0123 (COND ((< N $KK) (RETURN G0047))) (SETQ $KK (PROG2 NIL (1+ $KK) (SETQ G0047 (ADD2* G0047 (MUL2* (SIMPLIFY (MARRAYREF $MCS $BB $AA $KK)) (SIMPLIFY ($DIFF $TRACER (SIMPLIFY (MARRAYREF $OMEGA $KK))))))))) (GO G0123))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))) NIL)) NIL))) $INV1 $AA $BB) (SETQ $BB (+ 1 $BB)) (GO G0122))) 1) (SETQ $AA (+ 1 $AA)) (GO G0121))) 1)) (T ((LAMBDA ($AA) (PROG NIL G0124 (COND ((> $AA $DIM) (RETURN (QUOTE $DONE)))) ((LAMBDA ($BB) (PROG NIL G0125 (COND ((> $BB $DIM) (RETURN (QUOTE $DONE)))) (MARRAYSET (SIMPLIFY ($RATSIMP (ADDN (LIST (DIV (MUL2* ($KDELT $AA $BB) (POWER $TRACER 2)) 2) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MULN (LIST 2 $TRACER (SIMPLIFY (MARRAYREF $RICCI $AA $BB))) NIL))) (SIMPLIFY (LIST (QUOTE (MMINUS)) (MULN (LIST 2 ($KDELT $AA $BB) (SIMPLIFY ($DSCALAR $TRACER))) NIL))) (MUL2* 2 ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($CC G0048) (PROG NIL G0126 (COND ((< N $CC) (RETURN G0048))) (SETQ $CC (PROG2 NIL (1+ $CC) (SETQ G0048 (ADD2* G0048 (MUL2* (SIMPLIFY (MARRAYREF $UG $BB $CC)) (ADD2* (SIMPLIFY ($DIFF (SIMPLIFY ($DIFF $TRACER (SIMPLIFY (MARRAYREF $OMEGA $AA)))) (SIMPLIFY (MARRAYREF $OMEGA $CC)))) (SIMPLIFY (LIST (QUOTE (MMINUS)) ((LAMBDA (/0 N) (COND ((NOT (< N /0)) ((LAMBDA ($KK G0049) (PROG NIL G0127 (COND ((< N $KK) (RETURN G0049))) (SETQ $KK (PROG2 NIL (1+ $KK) (SETQ G0049 (ADD2* G0049 (MUL2* (SIMPLIFY (MARRAYREF $MCS $AA $CC $KK)) (SIMPLIFY ($DIFF $TRACER (SIMPLIFY (MARRAYREF $OMEGA $KK))))))))) (GO G0127))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))))))))) (GO G0126))) /0 0)) ((= N (1- /0)) 0) (T (INTERVAL-ERROR (QUOTE $SUM) /0 N)))) 1 $DIM))) NIL))) $INV1 $AA $BB) (SETQ $BB (+ 1 $BB)) (GO G0125))) 1) (SETQ $AA (+ 1 $AA)) (GO G0124))) 1))))))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $INVARIANT2) (QUOTE TRANSLATE)) (DEFPROP $INVARIANT2 $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $INVARIANT2) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $INVARIANT2) (QUOTE (NIL . 0))) (DEFUN $INVARIANT2 NIL NIL (QUOTE |&NOT YET IMPLEMENTED|))) 
(PROGN (QUOTE COMPILE) (REMPROP (QUOTE $BIMETRIC) (QUOTE TRANSLATE)) (DEFPROP $BIMETRIC $ANY FUNCTION-MODE) (COND ((STATUS FEATURE MACSYMA) (MPUTPROP (QUOTE $BIMETRIC) T (QUOTE $FIXED_NUM_ARGS_FUNCTION)))) (ARGS (QUOTE $BIMETRIC) (QUOTE (NIL . 0))) (DEFUN $BIMETRIC NIL NIL (QUOTE |&NOT YET IMPLEMENTED|))) 
(DEFUN |DSK:TENSOR;CTENSR TRLISP-tr-gen-1| ($V) NIL (COND (($INTEGERP $V) ((LAMBDA ($U) NIL NIL (COND ((> $U 0) T))) $V)))) 
(PUTPROP (QUOTE |DSK:TENSOR;CTENSR TRLISP-tr-gen-1|) (QUOTE (LAMBDA (FORM *IGNORE* *IGNORE*) (APPLY (QUOTE |DSK:TENSOR;CTENSR TRLISP-tr-gen-1|) (CDR FORM)))) (QUOTE OPERATORS)) 
(DEFUN |DSK:TENSOR;CTENSR TRLISP-tr-gen-2| ($OPT) NIL (COND ((LIKE $OPT 1) (SIMPLIFY ($NEWMET)) T) ((LIKE $OPT 2) (SIMPLIFY ($FILEMET)) T) ((LIKE $OPT 3) (SIMPLIFY ($SERMET)) T))) 
(PUTPROP (QUOTE |DSK:TENSOR;CTENSR TRLISP-tr-gen-2|) (QUOTE (LAMBDA (FORM *IGNORE* *IGNORE*) (APPLY (QUOTE |DSK:TENSOR;CTENSR TRLISP-tr-gen-2|) (CDR FORM)))) (QUOTE OPERATORS)) 
(DEFUN |DSK:TENSOR;CTENSR TRLISP-tr-gen-3| ($U) NIL (SIMPLIFY (MSET $U NIL))) 
(PUTPROP (QUOTE |DSK:TENSOR;CTENSR TRLISP-tr-gen-3|) (QUOTE (LAMBDA (FORM *IGNORE* *IGNORE*) (APPLY (QUOTE |DSK:TENSOR;CTENSR TRLISP-tr-gen-3|) (CDR FORM)))) (QUOTE OPERATORS)) 