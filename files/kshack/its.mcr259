; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 1
; TABLE OF CONTENTS

; 3	MICROCODE CONDITIONAL ASSEMBLY PARAMETERS FOR ITS
; 30	MIT REVISION HISTORY
; 100	DEC REVISION HISTORY
; 206	HOW TO READ THE MICROCODE
; 415	CONDITIONAL ASSEMBLY DEFINITIONS
; 461	2901 REGISTER USAGE
; 498	MICROCODE FIELDS -- LISTING FORMAT
; 547	MICROCODE FIELDS -- DATAPATH CHIP
; 702	MICROCODE FIELDS -- RAM FILE ADDRESS AND D-BUS
; 737	MICROCODE FIELDS -- PARITY GENERATION & HALF WORD CONTROL
; 761	MICROCODE FIELDS -- SPEC
; 866	MICROCODE FIELDS -- DISPATCH
; 911	MICROCODE FIELDS -- SKIP
; 963	MICROCODE FIELDS -- TIME CONTROL
; 984	MICROCODE FIELDS -- RANDOM CONTROL BITS
; 1007	MICROCODE FIELDS -- NUMBER FIELD
; 1353	SUBFIELD DEFINITIONS FOR .RAMFILE
; 1368	DISPATCH ROM DEFINITIONS
; 1415	HOW TO READ MACROS
; 1577	MACROS -- DATA PATH CHIP -- GENERAL
; 1730	MACROS -- DATA PATH CHIP -- Q
; 1766	MACROS -- DATA PATH CHIP -- MISC.
; 1788	MACROS -- STORE IN AC
; 1821	MACROS -- MICROCODE WORK SPACE
; 1849	MACROS -- MEMORY CONTROL
; 1900	MACROS -- VMA
; 1918	MACROS -- TIME CONTROL
; 1932	MACROS -- SCAD, SC, FE LOGIC
; 2017	MACROS -- DATA PATH FIELD CONTROL
; 2034	MACROS -- SHIFT PATH CONTROL
; 2048	MACROS -- SPECIAL FUNCTIONS
; 2080	MACROS -- PC FLAGS
; 2110	MACROS -- PAGE FAIL FLAGS
; 2119	MACROS -- SINGLE SKIPS
; 2144	MACROS -- SPECIAL DISPATCH MACROS
; 2179	DISPATCH ROM MACROS
; 2224	POWER UP SEQUENCE
; 2308	THE INSTRUCTION LOOP -- START NEXT INSTRUCTION
; 2434	THE INSTRUCTION LOOP -- FETCH ARGUMENTS
; 2548	THE INSTRUCTION LOOP -- STORE ANSWERS
; 2634	MOVE GROUP
; 2672	EXCH
; 2688	HALFWORD GROUP
; 2858	DMOVE, DMOVN, DMOVEM, DMOVNM
; 2890	BOOLEAN GROUP
; 3048	ROTATES AND LOGICAL SHIFTS -- ROT, LSH, JFFO
; 3149	ROTATES AND LOGICAL SHIFTS -- LSHC
; 3185	ROTATES AND LOGICAL SHIFTS -- ASHC
; 3225	ROTATES AND LOGICAL SHIFTS -- ROTC
; 3258	CIRC
; 3289	TEST GROUP
; 3444	COMPARE -- CAI, CAM
; 3514	ARITHMETIC SKIPS -- AOS, SOS, SKIP
; 3565	CONDITIONAL JUMPS -- JUMP, AOJ, SOJ, AOBJ
; 3658	AC DECODE JUMPS -- JRST, JFCL
; 3750	EXTENDED ADDRESSING INSTRUCTIONS
; 3792	XCT, XCTR, XCTRI
; 3837	STACK INSTRUCTIONS -- PUSHJ, PUSH, POP, POPJ
; 3936	STACK INSTRUCTIONS -- ADJSP
; 3970	SUBROUTINE CALL/RETURN -- JSR, JSP, JSA, JRA
; 4023	ILLEGAL INSTRUCTIONS AND UUO'S
; 4231	ARITHMETIC -- ADD, SUB
; 4261	ARITHMETIC -- DADD, DSUB
; 4295	ARITHMETIC -- MUL, IMUL
; 4347	ARITHMETIC -- DMUL
; 4491	ARITHMETIC -- DIV, IDIV
; 4570	ARITHMETIC -- DDIV
; 4693	ARITHMETIC -- DIVIDE SUBROUTINE
; 4759	ARITHMETIC -- DOUBLE DIVIDE SUBROUTINE
; 4800	ARITHMETIC -- SUBROUTINES FOR ARITHMETIC
; 4847	BYTE GROUP -- IBP, ILDB, LDB, IDPB, DPB
; 4926	BYTE GROUP -- INCREMENT BYTE POINTER SUBROUTINE
; 4940	BYTE GROUP -- BYTE EFFECTIVE ADDRESS EVALUATOR
; 4975	BYTE GROUP -- LOAD BYTE SUBROUTINE
; 5029	BYTE GROUP -- DEPOSIT BYTE IN MEMORY
; 5119	BYTE GROUP -- ADJUST BYTE POINTER
; 5282	BLT
; 5386	FLOATING POINT -- FAD, FSB
; 5432	FLAOTING POINT -- FMP
; 5462	FLOATING POINT -- FDV
; 5513	FLOATING POINT -- FLTR, FSC
; 5549	FLOATING POINT -- FIX AND FIXR
; 5587	FLOATING POINT -- SINGLE PRECISION NORMALIZE
; 5654	FLOATING POINT -- ROUND ANSWER
; 5666	FLOATING POINT -- DFAD, DFSB
; 5756	FLOATING POINT -- DFMP
; 5818	FLOATING POINT -- DFDV
; 5873	FLOATING POINT -- DOUBLE PRECISION NORMALIZE
; 5984	EXTEND -- DISPATCH ROM ENTRIES
; 6038	EXTEND -- INSTRUCTION SET DECODING
; 6081	EXTEND -- MOVE STRING -- SETUP
; 6127	EXTEND -- MOVE STRING -- OFFSET/TRANSLATE
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 2
; TABLE OF CONTENTS

; 6159	EXTEND -- MOVE STRING -- MOVSRJ
; 6195	EXTEND -- MOVE STRING -- SIMPLE MOVE LOOP
; 6220	EXTEND -- COMPARE STRING
; 6282	EXTEND -- DECIMAL TO BINARY CONVERSION
; 6415	EXTEND -- BINARY TO DECIMAL CONVERSION
; 6574	EXTEND -- EDIT -- MAIN LOOP
; 6629	EXTEND -- EDIT -- DECODE OPERATE GROUP
; 6649	EXTEND -- EDIT -- STOP EDIT
; 6665	EXTEND -- EDIT -- START SIGNIFICANCE
; 6673	EXTEND -- EDIT -- EXCHANGE MARK AND DESTINATION
; 6685	EXTEND -- EDIT -- PROCESS SOURCE BYTE
; 6749	EXTEND -- EDIT -- MESSAGE BYTE
; 6773	EXTEND -- EDIT -- SKIP
; 6788	EXTEND -- EDIT -- ADVANCE PATTERN POINTER
; 6822	EXTEND SUBROUTINES -- FILL OUT DESTINATION
; 6847	EXTEND SUBROUTINES -- GET MODIFIED SOURCE BYTE
; 6885	EXTEND SUBROUTINES -- TRANSLATE
; 6972	EXTEND SUBROUTINES -- GET UNMODIFIED SOURCE BYTE
; 7002	EXTEND SUBROUTINES -- STORE BYTE IN DESTINATION STRING
; 7024	EXTEND SUBROUTINES -- UPDATE DEST STRING POINTERS
; 7069	EXTEND -- PAGE FAIL CLEANUP
; 7111	TRAPS
; 7143	IO -- INTERNAL DEVICES
; 7248	IO -- INTERNAL DEVICES -- EBR & UBR
; 7379	IO -- INTERNAL DEVICES -- KL PAGING REGISTERS
; 7499	IO -- INTERNAL DEVICES -- TIMER CONTROL
; 7548	IO -- INTERNAL DEVICES -- WRTIME & RDTIME
; 7588	IO -- INTERNAL DEVICES -- WRINT & RDINT
; 7603	IO -- INTERNAL DEVICES -- RDPI & WRPI
; 7644	IO -- INTERNAL DEVICES -- SUBROUTINES
; 7801	PRIORITY INTERRUPTS -- DISMISS SUBROUTINE
; 7817	EXTERNAL IO INSTRUCTIONS
; 8006	SMALL SUBROUTINES
; 8033	UNDEFINED IO INSTRUCTIONS
; 8110	UMOVE AND UMOVEM
; 8166	WRITE HALT STATUS BLOCK
; 8261	ITS PAGE REFILL CODE
; 8648	PAGE FAIL REFIL LOGIC
;	CROSS REFERENCE INDEX
;	DCODE LOCATION / LINE # INDEX
;	UCODE LOCATION / LINE # INDEX
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 3
; DSK: KSHACK; ITS 10	15:40:43 17-OCT-84	MICROCODE CONDITIONAL ASSEMBLY PARAMETERS FOR ITS

								; 1	;;;-*-Fundamental-*-
								; 2	
								; 3	.TOC	"MICROCODE CONDITIONAL ASSEMBLY PARAMETERS FOR ITS"
								; 4	
								; 5	.SET/CIRC=1		;Enable CIRC instruction.
								; 6	
								; 7	.SET/ITS=1		;ITS style microcode.
								; 8	
								; 9	.SET/JPC=0		;No JPC initially.
								; 10	
								; 11	.SET/1PROC=0		;No one-proceed initially.
								; 12	
								; 13	.SET/TEST=0		;1 => Testing some new feature.
								; 14	
								; 15	MICROCODE VERSION/=<99:107>
								; 16		UCV=259.
								; 17	
								; 18	HARDWARE OPTIONS/=<90:92>
								; 19		HWOPT=0
								; 20	
								; 21	HARDWARE SERIAL NUMBER/=<93:107>
								; 22		HWSER=1729.
								; 23	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 4
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE CONDITIONAL ASSEMBLY PARAMETERS FOR ITS

								; 24	;;;-*-Fundamental-*-
								; 25	
; 26		.NOBIN
; 27	.TITLE	"KS10 MICROCODE FOR ITS"
; 28		;FROM KS10 MICROCODE V117, 12 JANUARY 1979 -- DON LEWINE
; 29	
; 30	.TOC	"MIT REVISION HISTORY"
; 31	
; 32	;;; 11/24/84	Flushed PCLSRing hack.  More trouble than it was worth.
; 33	;;;		Also moved main program level page fail words back to the
; 34	;;;		EPT.
; 35	;;; 11/21/84	Fixed last bug in PCLSRing hack:  The PC stored in the MUUO
; 36	;;;		old PC location needed to be incremented.
; 37	;;; 11/20/84	OK, I gave in and made the PCLSRing hack obtain the new PC
; 38	;;;		from a new location as well.
; 39	;;; 11/19/84	Fixed PCLSRing hack to also store context word.  Fixed
; 40	;;;		RDUBR and WRUBR to deal in addresses rather than in page
; 41	;;;		numbers. 
; 42	;;; 11/16/84	Added special PCLSRing hack to page fail trapping.  When
; 43	;;;		page fault occurs in user mode, a duplicate copy of the old
; 44	;;;		PC is stashed in the MUUO old PC location.
; 45	;;; 11/2/84	Fixed quantum counter to count in same units as other
; 46	;;;		timers.  Time spent at PI level is only approximately
; 47	;;;		accounted for.
; 48	;;; 10/25/84	Added quantum counter.  Moved main program level page
; 49	;;;		fail words back to UPT.  Moved all page fail words down
; 50	;;;		to 440 to compact UPT and EPT.
; 51	;;; 10/18/84	Fixed interval timer to keep more accurate time on the
; 52	;;;		average. 
; 53	;;; 10/17/84	Finishing touches on ITS paging.
; 54	;;; 9/29/84	CIRC instruction.  Version 259.
; 55	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 5
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MIT REVISION HISTORY

; 56	
; 57	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 58	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 59	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 60	;;;                                                           ;;;
; 61	;;;                                                           ;;;
; 62	;;;     COPYRIGHT (C) 1976, 1977,  1978, 1979, DIGITAL        ;;;
; 63	;;;      EQUIPMENT CORP., MAYNARD, MASS.                      ;;;
; 64	;;;                                                           ;;;
; 65	;;;     THIS SOFTWARE IS FURNISHED UNDER A LICENSE  FOR  USE  ;;;
; 66	;;;     ONLY  ON  A SINGLE COMPUTER SYSTEM AND MAY BE COPIED  ;;;
; 67	;;;     ONLY WITH  THE  INCLUSION  OF  THE  ABOVE  COPYRIGHT  ;;;
; 68	;;;     NOTICE.  THIS SOFTWARE, OR ANY OTHER COPIES THEREOF,  ;;;
; 69	;;;     MAY NOT BE PROVIDED OR OTHERWISE MADE  AVAILABLE  TO  ;;;
; 70	;;;     ANY  OTHER  PERSON EXCEPT FOR USE ON SUCH SYSTEM AND  ;;;
; 71	;;;     TO ONE WHO AGREES TO THESE LICENSE TERMS.  TITLE  TO  ;;;
; 72	;;;     AND  OWNERSHIP  OF  THE  SOFTWARE SHALL AT ALL TIMES  ;;;
; 73	;;;     REMAIN IN DEC.                                        ;;;
; 74	;;;                                                           ;;;
; 75	;;;     THE INFORMATION  IN  THIS  DOCUMENT  IS  SUBJECT  TO  ;;;
; 76	;;;     CHANGE WITHOUT NOTICE AND SHOULD NOT BE CONSTRUED AS  ;;;
; 77	;;;     A COMMITMENT BY DIGITAL EQUIPMENT CORPORATION.        ;;;
; 78	;;;                                                           ;;;
; 79	;;;     DEC  ASSUMES  NO  RESPONSIBILITY  FOR  THE  USE   OR  ;;;
; 80	;;;     RELIABILITY  OF  ITS  SOFTWARE IN EQUIPMENT WHICH IS  ;;;
; 81	;;;     NOT SUPPLIED BY DEC.                                  ;;;
; 82	;;;                                                           ;;;
; 83	;;;     DESIGNED AND WRITTEN BY:                              ;;;
; 84	;;;             DONALD A. LEWINE                              ;;;
; 85	;;;             DIGITAL EQUIPMENT CORP.                       ;;;
; 86	;;;             MARLBORO, MASS.                               ;;;
; 87	;;;             MR1-2/E47  X6430                              ;;;
; 88	;;;                                                           ;;;
; 89	;;;     MAINTAINED BY:                                        ;;;
; 90	;;;             DONALD A. LEWINE                              ;;;
; 91	;;;             DIGITAL EQUIPMENT CORP.                       ;;;
; 92	;;;             MARLBORO, MASS.                               ;;;
; 93	;;;             MR1-2/E47  X6430                              ;;;
; 94	;;;                                                           ;;;
; 95	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 96	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 97	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 98	
; 99	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 6
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	DEC REVISION HISTORY

; 100	.TOC	"DEC REVISION HISTORY"
; 101	
; 102	;REV	WHY
; 103	;1	START KS10 MICROCODE BASED ON SM10 MICROCODE VERSION 510
; 104	;2	UPDATE TO KS10 VERSION 512
; 105	;3	FIX SOME DEFAULTS
; 106	;4	CHANGE HARDWARE TO MATCH ECO #215
; 107	;5	START TO UPDATE IO MICROCODE
; 108	;6	MORE WORK ON IO
; 109	;7	MAKE INTERRUPT THE 8080 BE A PULSE.
; 110	;10	ADD NEW RDIO AND WRIO
; 111	;11	FIX PROBLEMS IN MUUO CODE & CORRECT T-FIELDS
; 112	;12	FIX PROBLEMS IN DDIV
; 113	;13	FIX UP PROBLEMS IN PI
; 114	;14	TURN ON WRITE FOR FL-EXIT
; 115	;15	FIX UP MAP INSTRUCTION
; 116	;16	MORE WORK ON KI-STYLE MAP
; 117	;17	INVERT HOLD RIGHT AND HOLD LEFT BITS
; 118	;20	FIXUP WRIO & RDIO EFFECTIVE ADDRESS CALC.
; 119	;21	FIX EDIT 15
; 120	;22	HAVE LSH USE FAST SHIFT HARDWARE
; 121	;23	FIX T-FIELD VALUES FOR PRODUCTION HARDWARE
; 122	;24	REMOVE WRITE TEST FROM IO READS & WRITES
; 123	;25	REWRITE MUL & MULI TO BE FASTER AND SMALLER. ALSO MAKE ADJBP
; 124	;	USE NEW MULSUB
; 125	;26	MAKE BYTES USE FAST SHIFT ECO.
; 126	;27	MAKE SURE VMA FETCH IS CORRECT
; 127	;30	MORE OF 25 (FORGOT FMP)
; 128	;31	FIX SOME PROBLEMS WITH TRAPS
; 129	;32	SPEED UP EFFECTIVE ADDRESS CALCULATION
; 130	;33	MORE OF 32
; 131	;34	SPEED UP ASH & ROT
; 132	;35	FIX UP RDTIM SO THAT TIME DOES NOT GO BACKWARDS
; 133	;36	MORE OF 35
; 134	;37	FIX UP PROBLEMS WITH INTERRUPTS AND DOUBLE F.P.
; 135	;40	IMPROVE LISTING FORMAT
; 136	;41	SPEEDUP KL-MODE PAGE REFILL
; 137	;42	FIX UP DDIV
; 138	;43	STILL MORE DDIV STUFF
; 139	;44	CORRECT PROBLEMS IN D.P. PARITY STUFF
; 140	;45	CORRECT THE BLT CLEAR-CORE CASE TO INTERRUPT CORRECTLY
; 141	;46	MORE OF 45
; 142	;47	DO NOT ALLOW SOFTWARE INTERRUPTS IF THE PI LEVEL IS NOT
; 143	;	ACTIVE.
; 144	;50	MAKE FDV WORK THE SAME AS THE KL10
; 145	;51	FIX INTERRUPT IN CVTBDX. MAKE ABORT WORK LIKE SPEC.
; 146	;52	FIX BUG IN HALT LOOP
; 147	;53	FIX IOEA TO WORK IF NO @ OR INDEXING
; 148	;54	EDIT 47 BROKE JEN
; 149	;55	FIX FLAGS IN MULTIPLY. ALSO CODE BUMS
; 150	;56	MORE CODE BUMS
; 151	;57	CORRECT OVERFLOW TRAPS WHICH DO MUUOS TO NOT STORE
; 152	;	THE TRAP FLAGS.
; 153	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 7
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	DEC REVISION HISTORY

; 154	
; 155	;60	CORRECT TRAPS SO THAT DSKEA RUNS RIGHT
; 156	;61	MORE OF 60. NOTE: MICROCODE REQUIRES ECO #299!!
; 157	;62	ONE MORE TRY AT EDIT 60.
; 158	;63	CORRECT TOPS-10 STYLE PAGING SO THAT A WRITE VIOLATION SETS
; 159	;	BIT 2 IN THE PAGE FAIL WORD (ACCESS ALLOWED).
; 160	;64	EDIT 63 BROKE HARD PAGE FAILS. (NXM, BAD DATA, AND IO NXM)
; 161	;65	INTERRUPTS OUT OF MOVSRJ INSTRUCTIONS DO STRANGE THINGS.
; 162	;66	IO NXM PAGE FAIL FOR MISSING UBA GIVES PC+1 IN PAGE FAIL BLOCK.
; 163	;67	ON A BAD DATA ERROR, STORE THE BAD WORD IN AC BLOCK 7 WORD 0 AND
; 164	;	1
; 165	;70	FIX A BUG WHICH CAUSED INTERRUPTS OUT OF CVTBDT TO GENERATE A BAD
; 166	;	ANSWER.
; 167	;71	CLEANUP SOME THINGS TO MAKE LIFE EASIER FOR FIELD SERVICE
; 168	;72	LOOK FOR 1-MS TRAP ON @ PAGE POINTERS AND ABORT REFILL IF
; 169	;	SET.
; 170	;73	CORRECT EDIT 72.
; 171	;74	EDIT 67 GENERATES A DATA PATH PARITY ERROR BECAUSE OF THE BAD
; 172	;	DATA. CORRECT TO NOT CHECK PARITY.
; 173	;	ALSO CHANGE POP TO TIE UP BUS LESS.
; 174	;75	EDIT 60 BROKE TRAPS. MISSING =0 AT TRAP:. 
; 175	;76	CORRECT BUG IN DFAD AND DFSB
; 176	;77	FIX PROBLEM SEEN IN SOME (ALL BUT ENGINEERING?) MACHINES CAUSED
; 177	;	BY EDIT 76
; 178	;100	CHANGE DFAD/DFSB TO HAVE 2 MORE GUARD BITS. THIS SHOULD PRODUCE
; 179	;	KL10 ANSWERS FOR ALL NORMALIZED INPUTS
; 180	;	ALSO FIX A BUG IN CVTBDX PAGE FAIL LOGIC.
; 181	;101	DFDV OF 0.0 / -0.5 HANGS THE MACHINE
; 182	;102	FIX CHOPPED FLOATING POINT INSTRUCTIONS
; 183	;103	CORRECT DFDV ROUNDING BUG.
; 184	;104	CORRECT PROBLEMS IN DFMP
; 185	;105	RDTIME SOMETIMES GIVES WRONG ANSWER. CARRY BETWEEN
; 186	;	WORDS GETS LOST SOMETIME.
; 187	;106	MOVEM (ALSO, SETZM, SETOM, ETC.) SOMETIMES DOES NOT GENERATE
; 188	;	A WRITE-TRAP IN 100% OF THE CASES THAT IT SHOULD.
; 189	;107	PXCT 14, DOES NOT GET THE INDEX REGISTER IN THE PREVIOUS
; 190	;	CONTEXT ALL THE TIME.
; 191	;110	FIX TYPO IN EDIT 103
; 192	;111	63. BIT BYTES DO NOT WORK CORRECTLY. DSKDA FAILS BECAUSE OF THIS
; 193	;	PROBLEM.
; 194	;******* VERSION 111 WENT OUT WITH SYSTEM REV 2 *******
; 195	
; 196	;112	FIX COMMENT IN TEST INSTRUCTIONS
; 197	;113	CORRECT IOEA TO COMPUTE CORRECT ADDRESS IF JUST LOCAL INDEXING
; 198	;	IS USED.
; 199	;114	CORRECT INTERRUPT BUG IN DMUL
; 200	;115	CORRECT COMMENTS HALT STATUS BLOCK
; 201	;116	CORRECT PROBLEM WHERE CST MODIFIED BIT GETS SET BY MISTAKE.
; 202	;117	RDINT INSTRUCTION DOES NOT WORK AT ALL. IT STORES RANDOM TRASH
; 203	;	IN THE WRONG PLACE. NEED TO LOAD BR NOT AR.
; 204	
; 205	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 8
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	HOW TO READ THE MICROCODE

; 206	.TOC	"HOW TO READ THE MICROCODE"
; 207	
; 208	;		
; 209	;		
; 210	;		1.0 FIELD DEFINITIONS
; 211	;		
; 212	;		THESE OCCUR AT THE BEGINNING  OF  THE  LISTING,  IN  THE  SOURCE  FILE  KS10.MIC
; 213	;		(CONTROL AND DISPATCH RAM DEFINITIONS).  THEY HAVE THE FORM:
; 214	;		
; 215	;		        SYMBOL/=<L:R>M,J
; 216	;		
; 217	;		THE PARAMETER (J) IS MEANINGFUL WHEN "D" IS SPECIFIED AS THE DEFAULT  MECHANISM,
; 218	;		AND  IN  THAT  CASE, GIVES THE DEFAULT VALUE OF THE FIELD IN OCTAL.  WHEN "F" IS
; 219	;		SPECIFIED AS THE DEFAULT MECHANISM, (J) IS THE NAME OF A  FIELD  WHICH  CONTAINS
; 220	;		THE DEFAULT VALUE FOR THIS FIELD.
; 221	;		
; 222	;		THE PARAMETER (L) GIVES THE BIT POSITION OF THE LEFTMOST BIT IN THE FIELD.   THE
; 223	;		SAME METHOD IS USED AS FOR (R) BELOW.
; 224	;		
; 225	;		THE PARAMETER (R) GIVES THE FIELD POSITION IN DECIMAL AS THE BIT NUMBER  OF  THE
; 226	;		RIGHTMOST  BIT  OF  THE FIELD.  BITS ARE NUMBERED FROM 0 ON THE LEFT.  NOTE THAT
; 227	;		THE POSITION OF BITS IN THE MICROWORD SHOWN IN THE LISTING BEARS NO RELATION  TO
; 228	;		THE ORDERING OF BITS IN THE HARDWARE MICROWORD, WHERE FIELDS ARE OFTEN BROKEN UP
; 229	;		AND SCATTERED.
; 230	;		
; 231	;		THE PARAMETER (M) IS OPTIONAL, AND SELECTS A DEFAULT MECHANISM  FOR  THE  FIELD.
; 232	;		THE  LEGAL  VALUES  OF  THIS PARAMETER ARE THE CHARACTERS "D", "F", "T", "P", OR
; 233	;		"+".
; 234	;		
; 235	;		        "D" MEANS (J) IS THE DEFAULT VALUE OF THE FIELD IF NO EXPLICIT VALUE  IS
; 236	;		        SPECIFIED.
; 237	;		
; 238	;		        "F" IS USED TO CAUSE THIS FIELD TO DEFAULT TO SOME OTHER FIELD.
; 239	;		
; 240	;		        "T" IS USED ON THE TIME FIELD TO SPECIFY THAT THE  VALUE  OF  THE  FIELD
; 241	;		        DEPENDS  ON  THE  TIME PARAMETERS SELECTED FOR OTHER FIELDS.  "T" IS NOT
; 242	;		        USED IN THE KS10.
; 243	;		
; 244	;		        "P" IS USED ON THE PARITY FIELD TO SPECIFY THAT THE VALUE OF  THE  FIELD
; 245	;		        SHOULD  DEFAULT  SUCH THAT PARITY OF THE ENTIRE WORD IS ODD.  "P" IS NOT
; 246	;		        USED ON THE KS10.
; 247	;		
; 248	;		        "+" IS USED ON THE JUMP ADDRESS FIELD TO SPECIFY THAT THE  DEFAULT  JUMP
; 249	;		        ADDRESS  IS  THE  ADDRESS  OF  THE  NEXT  INSTRUCTION ASSEMBLED (NOT, IN
; 250	;		        GENERAL, THE CURRENT LOCATION +1).
; 251	;		
; 252	;		IN GENERAL, A FIELD CORRESPONDS TO THE SET OF BITS WHICH PROVIDE  SELECT  INPUTS
; 253	;		FOR MIXERS OR DECODERS, OR CONTROLS FOR ALU'S.
; 254	;		
; 255	;		
; 256	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 9
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	HOW TO READ THE MICROCODE

; 257	
; 258	;		2.0 VALUE DEFINITIONS
; 259	;		
; 260	;		FOLLOWING A FIELD DEFINITION, SYMBOLS MAY BE CREATED IN THAT FIELD TO CORRESPOND
; 261	;		TO VALUES OF THE FIELD.  THE FORM IS:
; 262	;		
; 263	;		        SYMBOL=N
; 264	;		
; 265	;		"N" IS, IN OCTAL, THE VALUE OF SYMBOL WHEN USED IN THE FIELD.
; 266	;		
; 267	;		
; 268	;		
; 269	;		3.0 LABEL DEFINITIONS
; 270	;		
; 271	;		A MICRO INSTRUCTION MAY BE LABELLED BY A SYMBOL FOLLOWED BY COLON PRECEDING  THE
; 272	;		MICROINSTRUCTION  DEFINITION.   THE  ADDRESS OF THE MICROINSTRUCTION BECOMES THE
; 273	;		VALUE OF THE SYMBOL IN THE FIELD NAMED "J".  EXAMPLE:
; 274	;		
; 275	;		        FOO:  J/FOO
; 276	;		
; 277	;		THIS IS A MICROINSTRUCTION WHOSE "J" FIELD (JUMP  ADDRESS)  CONTAINS  THE  VALUE
; 278	;		"FOO".   IT  ALSO  DEFINES  THE  SYMBOL  "FOO"  TO  BE  THE  ADDRESS  OF ITSELF.
; 279	;		THEREFORE, IF EXECUTED BY THE MICROPROCESSOR, IT WOULD LOOP ON ITSELF.
; 280	;		
; 281	;		
; 282	;		
; 283	;		4.0 COMMENTS
; 284	;		
; 285	;		A SEMICOLON ANYWHERE ON A LINE CAUSES THE REST OF THE LINE TO BE IGNORED BY  THE
; 286	;		ASSEMBLER.  THIS TEXT IS AN EXAMPLE OF COMMENTS.
; 287	;		
; 288	;		
; 289	;		
; 290	;		5.0 MICROINSTRUCTION DEFINITION
; 291	;		
; 292	;		A WORD OF MICROCODE IS DEFINED BY SPECIFYING A FIELD  NAME,  FOLLOWED  BY  SLASH
; 293	;		(/),  FOLLOWED BY A VALUE.  THE VALUE MAY BE A SYMBOL DEFINED FOR THAT FIELD, AN
; 294	;		OCTAL DIGIT STRING, OR A DECIMAL DIGIT STRING (DISTINGUISHED BY THE FACT THAT IT
; 295	;		CONTAINS  "8"  AND/OR "9" AND/OR IS TERMINATED BY A PERIOD).  SEVERAL FIELDS MAY
; 296	;		BE SPECIFIED IN ONE MICROINSTRUCTION BY  SEPARATING  FIELD/VALUE  SPECIFICATIONS
; 297	;		WITH COMMAS.  EXAMPLE:
; 298	;		
; 299	;		        AD/ZERO,RAMADR/AC*#,ACALU/AC+N,ACN/1,DBUS/DP
; 300	;		
; 301	;		
; 302	;		6.0 CONTINUATION
; 303	;		
; 304	;		THE DEFINITION OF A MICROINSTRUCTION MAY CONTINUED ONTO TWO  OR  MORE  LINES  BY
; 305	;		BREAKING IT AFTER ANY COMMA.  IN OTHER WORDS, IF THE LAST NON-BLANK, NON-COMMENT
; 306	;		CHARACTER ON A LINE IS A COMMA, THE INSTRUCTION SPECIFICATION  IS  CONTINUED  ON
; 307	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 10
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	HOW TO READ THE MICROCODE

; 308	
; 309	;		THE FOLLOWING LINE.  EXAMPLE:
; 310	;		        READ [AR],              ;LOOK AT EFFECTIVE ADDRESS
; 311	;		        SKIP DP18,              ;SEE IF RIGHT OR LEFT SHIFT
; 312	;		        SC_SHIFT-1,              ;PUT NUMBER OF PLACE TO
; 313	;		                                ;SHIFT IN SC
; 314	;		        LOAD FE,                ; AND IN FE
; 315	;		        INST DISP               ;GO DO THE SHIFT
; 316	;		
; 317	;		
; 318	;		
; 319	;		7.0 MACROS
; 320	;		
; 321	;		A MACRO IS A SYMBOL WHOSE VALUE IS ONE OR MORE FIELD/VALUE SPECIFICATIONS AND/OR
; 322	;		MACROS.   A  MACRO  DEFINITION IS A LINE CONTAINING THE MACRO NAME FOLLOWED BY A
; 323	;		QUOTED STRING WHICH IS THE VALUE OF THE MACRO.  EXAMPLE:
; 324	;		
; 325	;		        LOAD VMA "MEM/1, LDVMA/1
; 326	;		
; 327	;		THE APPEARANCE OF A MACRO IN A MICROINSTRUCTION DEFINITION IS EQUIVALENT TO  THE
; 328	;		APPEARANCE OF ITS VALUE.
; 329	;		
; 330	;		MACRO MAY HAVE PARAMETERS ENCLOSED IN [].  FOR EXAMPLE,
; 331	;		
; 332	;		        []_[] "AD/A,A/@2,DEST/AD,B/@1"
; 333	;		
; 334	;		THE @1 GETS REPLACED BY WHAT IS WRITTEN IN  THE  FIRST  SET  OF  []  AND  @2  IS
; 335	;		REPLACED BY WHAT IS WRITTEN IN THE SECOND SET OF [].  THUS
; 336	;		
; 337	;		        [AR]_[ARX]
; 338	;		
; 339	;		HAS THE SAME EFFECT AS SAYING
; 340	;		
; 341	;		        AD/A,A/ARX,DEST/AD,B/AR
; 342	;		
; 343	;		
; 344	;		        SEE DESCRIPTION OF RULES FOR MACRO NAMES.
; 345	;		
; 346	;		8.0 PSEUDO OPS
; 347	;		
; 348	;		        THE MICRO ASSEMBLER HAS 13 PSEUDO-OPERATORS:
; 349	;		
; 350	;		        .DCODE AND .UCODE SELECT THE RAM INTO WHICH SUBSEQUENT MICROCODE WILL BE
; 351	;		        LOADED,  AND  THEREFORE  THE  FIELD  DEFINITIONS  AND  MACROS  WHICH ARE
; 352	;		        MEANINGFUL IN SUBSEQUENT MICROCODE
; 353	;		        .TITLE DEFINES A STRING OF TEXT TO APPEAR IN THE PAGE HEADER, AND
; 354	;		        .TOC DEFINES AN ENTRY FOR THE TABLE OF CONTENTS AT THE BEGINNING.
; 355	;		        .SET DEFINES THE VALUE OF A CONDITIONAL ASSEMBLY PARAMETER,
; 356	;		        .CHANGE REDEFINES A CONDITIONAL ASSEMBLY PARAMETER,
; 357	;		        .DEFAULT ASSIGNS A VALUE TO AN UNDEFINED PARAMETER.
; 358	;		        .IF ENABLES ASSEMBLY IF THE VALUE OF THE PARAMETER IS NOT ZERO,
; 359	;		        .IFNOT ENABLES ASSEMBLY IF THE PARAMETER VALUE IS ZERO, AND
; 360	;		        .ENDIF RE-ENABLES ASSEMBLY IF SUPPRESSED BY THE PARAMETER NAMED.
; 361	;		        .NOBIN TURNS OFF THE BINARY A GETS RID OF THE SPACE USED TO LIST IT,
; 362	;		        .BIN TURN BINARY BACK ON AGAIN.
; 363	;		        .WIDTH CONTROLS THE NUMBER OF BITS IN THE CRAM
; 364	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 11
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	HOW TO READ THE MICROCODE

; 365	
; 366	;		9.0 LOCATION CONTROL
; 367	;		
; 368	;		A MICROINSTRUCTION "LABELLED" WITH A NUMBER IS ASSIGNED TO THAT ADDRESS.
; 369	;		
; 370	;		THE CHARACTER "=" AT THE BEGINNING OF A LINE, FOLLOWED BY A STRING OF 0'S,  1'S,
; 371	;		AND/OR   *'S,   SPECIFIES   A   CONSTRAINT   ON   THE   ADDRESS   OF   FOLLOWING
; 372	;		MICROINSTRUCTIONS.  THE NUMBER OF CHARACTERS IN THE CONSTRAINT STRING (EXCLUDING
; 373	;		THE  "=")  IS  THE  NUMBER  OF  LOW-ORDER  BITS CONSTRAINED IN THE ADDRESS.  THE
; 374	;		MICROASSEMBLER ATTEMPTS TO FIND AN UNUSED LOCATION WHOSE ADDRESS HAS 0  BITS  IN
; 375	;		THE POSITIONS CORRESPONDING TO 0'S IN THE CONSTRAINT STRING AND 1 BITS WHERE THE
; 376	;		CONSTRAINT HAS 1'S.  ASTERISKS DENOTE "DON'T CARE" BIT POSITIONS.
; 377	;		
; 378	;		IF THERE ARE ANY 0'S IN THE CONSTRAINT STRING, THE CONSTRAINT IMPLIES A BLOCK OF
; 379	;		<2**N> MICROWORDS, WHERE N IS THE NUMBER OF 0'S IN THE STRING.  ALL LOCATIONS IN
; 380	;		THE BLOCK WILL HAVE 1'S IN THE ADDRESS BITS CORRESPONDING TO 1'S IN THE  STRING,
; 381	;		AND BIT POSITIONS DENOTED BY *'S WILL BE THE SAME IN ALL LOCATIONS OF THE BLOCK.
; 382	;		
; 383	;		IN SUCH A CONSTRAINT BLOCK, THE DEFAULT ADDRESS PROGRESSION IS COUNTING  IN  THE
; 384	;		"0"  POSITIONS  OF  THE  CONSTRAINT STRING, BUT A NEW CONSTRAINT STRING OCCURING
; 385	;		WITHIN A BLOCK MAY FORCE SKIPPING OVER SOME LOCATIONS OF THE  BLOCK.   WITHIN  A
; 386	;		BLOCK,  A  NEW  CONSTRAINT STRING DOES NOT CHANGE THE PATTERN OF DEFAULT ADDRESS
; 387	;		PROGRESSION, IT MERELY ADVANCES THE LOCATION COUNTER OVER THOSE LOCATIONS.   THE
; 388	;		MICROASSEMBLER WILL LATER FILL THEM IN.
; 389	;		
; 390	;		A NULL CONSTRAINT STRING ("=" FOLLOWED BY ANYTHING BUT "0", "1", OR "*")  SERVES
; 391	;		TO TERMINATE A CONSTRAINT BLOCK.  EXAMPLES:
; 392	;		
; 393	;		        =0 
; 394	;		
; 395	;		THIS SPECIFIES THAT THE LOW-ORDER ADDRESS BIT MUST BE ZERO-- THE  MICROASSEMBLER
; 396	;		FINDS  AN  EVEN-ODD  PAIR  OF LOCATIONS, AND PUTS THE NEXT TWO MICROINSTRUCTIONS
; 397	;		INTO THEM.
; 398	;		
; 399	;		        =11
; 400	;		THIS SPECIFIES THAT THE TWO LOW-ORDER BITS OF THE ADDRESS  MUST  BOTH  BE  ONES.
; 401	;		SINCE THERE ARE NO 0'S IN THIS CONSTRAINT, THE ASSEMBLER FINDS ONLY ONE LOCATION
; 402	;		MEETING THE CONSTRAINT.
; 403	;		
; 404	;		        =0*****
; 405	;		
; 406	;		THIS SPECIFIES  AN  ADDRESS  IN  WHICH  THE  "40"  BIT  IS  ZERO.   DUE  TO  THE
; 407	;		IMPLEMENTATION OF THIS FEATURE IN THE ASSEMBLER, THE DEFAULT ADDRESS PROGRESSION
; 408	;		APPLIES ONLY TO THE LOW-ORDER 5 BITS, SO THIS CONSTRAINT FINDS ONE WORD IN WHICH
; 409	;		THE  "40"  BIT  IS ZERO, AND DOES NOT ATTEMPT TO FIND ONE IN WHICH THAT BIT IS A
; 410	;		ONE.  THIS LIMITATION HAS BEEN CHANGED WITH NEWER ASSEMBLER  VERSIONS.   HOWEVER
; 411	;		NONE  OF  THE  LOCATIONS  IN  THE  MICROCODE REQUIRE ANYTHING BUT THE CONSTRAINT
; 412	;		MENTIONED ABOVE.
; 413	
; 414	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 12
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	CONDITIONAL ASSEMBLY DEFINITIONS

; 415	.TOC	"CONDITIONAL ASSEMBLY DEFINITIONS"
; 416	
; 417	.DEFAULT/SIM=0		;0=RUN ON REAL HARDWARE
; 418				;1=RUN UNDER SIMULATOR
; 419	
; 420	.DEFAULT/FULL=1		;0=INCLUDE ONLY BASIC INSTRUCTIONS
; 421				;1=INCLUDE FULL INSTRUCTION SET
; 422	
; 423	.DEFAULT/CIRC=0		;1=Assemble the CIRC instruction.
; 424	
; 425	.DEFAULT/ITS=0		;0=DEC style microcode.
; 426				;1=ITS style microcode.
; 427	
; 428	.DEFAULT/JPC=0		;1=Assemble JPC feature.
; 429	
; 430	.DEFAULT/1PROC=0	;1=Assemble one-proceed feature.
; 431	
; 432	.DEFAULT/TEST=0		;1=Assemble some temporary experimental feature.
; 433	
; 434	.WIDTH/108		;ONLY FIELDS BETWEEN BITS 0 AND 107 EVER
; 435				; GET LOADED INTO THE CRAM. OTHER FIELDS
; 436				; ARE USED FOR DEFAULTING PROCESS.
; 437	
; 438	;THIS IS USELESS AND BRAIN DAMAGED
; 439	;STUFF IS KEPT OUT OF DROM SPACE BY MORE GENERAL MECHANISMS
; 440	;.REGION/0,1377/2000,3777/1400,1777
; 441	;			;TRY AND KEEP STUFF OUT OF DROM SPACE
; 442	
; 443	;WRITE A RAM FILE WITH THE FIELDS REARRANGED SO THE 8080 CAN HACK THEM
; 444	;The RAM file format appears to be:
; 445	;
; 446	;4000 sequential CRAM locations starting at 0.
; 447	;Each location is 96 bits expressed as 8 12-bit bytes and one
; 448	;padding byte packed into three words.  Bytes are in right to
; 449	;left order within 36-bit words, and also within the 96-bit
; 450	;words.  Thus RAM SRC through MARK are in the right 12 bits of
; 451	;the first 36-bit word and J is in the middle 12 bits of the
; 452	;third 36-bit word.  Parity is even parity, computed separately
; 453	;for the two halves of the word packaged on different boards.
; 454	;
; 455	;.RAMFILE takes the fields in left-to-right (pdp10) order,
; 456	;thus the 8080's eight 12-bit bytes are given in order 2,1,0,5,4,3,pad,7,6
; 457	;One parity bit is for 0-4, the other is for 5-7.
; 458	
; 459	.RAMFILE/	AD,RSRC,DBM,DBUS,A,CLKL,CLKR,B,			;WORDS 2-1		RAMADR,DEST,LOADSC,LOADFE,CHKL,CHKR,		  OD
; 460	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 13
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	2901 REGISTER USAGE

; 461	.TOC	"2901 REGISTER USAGE"
; 462	
; 463	;	!=========================================================================!
; 464	;0:	!                   MAG (ONES IN BITS 1-36, REST ZERO)                    !
; 465	;	!-------------------------------------------------------------------------!
; 466	;1:	!                 PC (ADDRESS OF CURRENT INSTRUCTION + 1)                 !
; 467	;	!-------------------------------------------------------------------------!
; 468	;2:	!                        HR (CURRENT INSTRUCTION)                         !
; 469	;	!-------------------------------------------------------------------------!
; 470	;3:	!                    AR (TEMP -- MEM OP AT INST START)                    !
; 471	;	!-------------------------------------------------------------------------!
; 472	;4:	!               ARX (TEMP -- LOW ORDER HALF OF DOUBLE PREC)               !
; 473	;	!-------------------------------------------------------------------------!
; 474	;5:	!                                BR (TEMP)                                !
; 475	;	!-------------------------------------------------------------------------!
; 476	;6:	!           BRX (TEMP -- LOW ORDER HALF OF DOUBLE PREC BR!BRX)            !
; 477	;	!-------------------------------------------------------------------------!
; 478	;7:	!                          ONE (THE CONSTANT 1)                           !
; 479	;	!-------------------------------------------------------------------------!
; 480	;10:	!                        EBR (EXEC BASE REGISTER)                         !
; 481	;	!-------------------------------------------------------------------------!
; 482	;11:	!                        UBR (USER BASE REGISTER)                         !
; 483	;	!-------------------------------------------------------------------------!
; 484	;12:	!           MASK (ONES IN BITS 0-35, ZERO IN -1, -2, 36 AND 37)           !
; 485	;	!-------------------------------------------------------------------------!
; 486	;13:	!          FLG (FLAG BITS)           !           PAGE FAIL CODE           !
; 487	;	!-------------------------------------------------------------------------!
; 488	;14:	!                  PI (PI SYSTEM STATUS REGISTER [RDPI])                  !
; 489	;	!-------------------------------------------------------------------------!
; 490	;15:	!                       XWD1 (1 IN EACH HALF WORD)                        !
; 491	;	!-------------------------------------------------------------------------!
; 492	;16:	!                                T0 (TEMP)                                !
; 493	;	!-------------------------------------------------------------------------!
; 494	;17:	!                                T1 (TEMP)                                !
; 495	;	!=========================================================================!
; 496	
; 497	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 14
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- LISTING FORMAT

; 498	.TOC	"MICROCODE FIELDS -- LISTING FORMAT"
; 499	
; 500	;								; 3633	1561:
; 501	;								; 3634	SUB:	[AR]_AC-[AR],
; 502	;								; 3635		AD FLAGS, 3T,
; 503	;	U 1561, 1500,2551,0303,0274,4463,7701,4200,0001,0001	; 3636		EXIT
; 504	;	  [--]  [--] !!!! [][] !!![-][][-][]! !!!     [----]
; 505	;	  !     !    !!!! ! !  !!!!  ! !  ! ! !!!        !
; 506	;	  !     !    !!!! ! !  !!!!  ! !  ! ! !!!        +---- # (MAGIC NUMBER)
; 507	;	  !     !    !!!! ! !  !!!!  ! !  ! ! !!!      
; 508	;	  !     !    !!!! ! !  !!!!  ! !  ! ! !!+------------- MULTI PREC, MULTI SHIFT, CALL
; 509	;	  !     !    !!!! ! !  !!!!  ! !  ! ! !!		(4S, 2S, 1S)
; 510	;	  !     !    !!!! ! !  !!!!  ! !  ! ! !+-------------- FM WRITE, MEM, DIVIDE
; 511	;	  !     !    !!!! ! !  !!!!  ! !  ! ! !			(4S, 2S, 1S)
; 512	;	  !     !    !!!! ! !  !!!!  ! !  ! ! +--------------- CRY38, LOAD SC, LOAD FE
; 513	;	  !     !    !!!! ! !  !!!!  ! !  ! !			(4S, 2S, 1S)
; 514	;	  !     !    !!!! ! !  !!!!  ! !  ! +----------------- T
; 515	;	  !     !    !!!! ! !  !!!!  ! !  !
; 516	;	  !     !    !!!! ! !  !!!!  ! !  +------------------- SKIP
; 517	;	  !     !    !!!! ! !  !!!!  ! !
; 518	;	  !     !    !!!! ! !  !!!!  ! +---------------------- DISP
; 519	;	  !     !    !!!! ! !  !!!!  !
; 520	;	  !     !    !!!! ! !  !!!!  +------------------------ SPEC
; 521	;	  !     !    !!!! ! !  !!!!
; 522	;	  !     !    !!!! ! !  !!!+--------------------------- CLOCKS & PARITY
; 523	;	  !     !    !!!! ! !  !!!			(CLKR, GENR, CHKR, CLKL, GENL, CHKL)
; 524	;	  !     !    !!!! ! !  !!+---------------------------- DBM
; 525	;	  !     !    !!!! ! !  !!
; 526	;	  !     !    !!!! ! !  !+----------------------------- DBUS
; 527	;	  !     !    !!!! ! !  !
; 528	;	  !     !    !!!! ! !  +------------------------------ RAM ADDRESS
; 529	;	  !     !    !!!! ! !
; 530	;	  !     !    !!!! ! +--------------------------------- B
; 531	;	  !     !    !!!! !
; 532	;	  !     !    !!!! +----------------------------------- A
; 533	;	  !     !    !!!!
; 534	;	  !     !    !!!+------------------------------------- DEST
; 535	;	  !     !    !!!
; 536	;	  !     !    !!+-------------------------------------- RSRC
; 537	;	  !     !    !!
; 538	;	  !     !    !+--------------------------------------- LSRC   ]
; 539	;	  !     !    !                                                ] - AD
; 540	;	  !     !    +---------------------------------------- ALU    ]
; 541	;	  !     !
; 542	;	  !     +--------------------------------------------- J
; 543	;	  !
; 544	;	  LOCATION OF THIS MICRO WORD
; 545	
; 546	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 15
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- DATAPATH CHIP

; 547	.TOC	"MICROCODE FIELDS -- DATAPATH CHIP"
; 548	
; 549	J/=<0:11>+              ;CRA1
; 550				;NEXT MICROCODE ADDRESS
; 551	
; 552	;ALU FUNCTIONS
; 553	
; 554	;NOTE: THE AD FIELD IS A 2 DIGIT FIELD. THE LEFT DIGIT IS THE
; 555	; 2901 ALU FUNCTION. THE RIGHT DIGIT IS THE 2901 SRC CODE FOR
; 556	; THE LEFT HALF. NORMALY THE RIGHT HALF SRC CODE IS THE SAME AS
; 557	; THE LEFT HALF.
; 558	AD/=<12:17>D,44       ;DPE1 & DPE2
; 559		A+Q=00
; 560		A+B=01
; 561		0+Q=02
; 562		0+B=03
; 563		0+A=04
; 564		D+A=05
; 565		D+Q=06
; 566		0+D=07
; 567		Q-A-.25=10
; 568		B-A-.25=11
; 569		Q-.25=12
; 570		B-.25=13
; 571		A-.25=14
; 572		A-D-.25=15
; 573		Q-D-.25=16
; 574		-D-.25=17
; 575		A-Q-.25=20
; 576		A-B-.25=21
; 577		-Q-.25=22
; 578		-B-.25=23
; 579		-A-.25=24
; 580		D-A-.25=25
; 581		D-Q-.25=26
; 582		D-.25=27
; 583		A.OR.Q=30
; 584		A.OR.B=31
; 585		Q=32
; 586		B=33
; 587		A=34
; 588		D.OR.A=35
; 589		D.OR.Q=36
; 590		D=37
; 591		A.AND.Q=40
; 592		A.AND.B=41
; 593	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 16
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- DATAPATH CHIP

; 594	
; 595	;MORE ALU FUNCTIONS
; 596	
; 597		ZERO=42
; 598	;	ZERO=43
; 599	;	ZERO=44
; 600		D.AND.A=45
; 601		D.AND.Q=46
; 602	;	ZERO=47
; 603		.NOT.A.AND.Q=50
; 604		.NOT.A.AND.B=51
; 605	;	Q=52
; 606	;	B=53
; 607	;	A=54
; 608		.NOT.D.AND.A=55
; 609		.NOT.D.AND.Q=56
; 610	;	ZERO=57
; 611		A.XOR.Q=60
; 612		A.XOR.B=61
; 613	;	Q=62
; 614	;	B=63
; 615	;	A=64
; 616		D.XOR.A=65
; 617		D.XOR.Q=66
; 618	;	D=67
; 619		A.EQV.Q=70
; 620		A.EQV.B=71
; 621		.NOT.Q=72
; 622		.NOT.B=73
; 623		.NOT.A=74
; 624		D.EQV.A=75
; 625		D.EQV.Q=76
; 626		.NOT.D=77
; 627	
; 628	;THIS FIELD IS THE RIGHTMOST 3 BITS OF THE
; 629	; AD FIELD. IT IS USED ONLY TO DEFAULT THE RSRC 
; 630	; FIELD.
; 631	LSRC/=<15:17>         ;DPE1
; 632	
; 633	;THIS IS THE SOURCE FOR THE RIGHT HALF OF THE
; 634	; DATA PATH. IT LETS US MAKE THE RIGHT AND LEFT
; 635	; HALF WORDS DO SLIGHTLY DIFFERENT THINGS.
; 636	RSRC/=<18:20>F,LSRC	;DPE2
; 637		AQ=0		;A  Q
; 638		AB=1		;A  B
; 639		0Q=2		;0  Q
; 640		0B=3		;0  B
; 641		0A=4		;0  A
; 642		DA=5		;D  A
; 643		DQ=6		;D  Q
; 644		D0=7		;D  0
; 645	
; 646	;DESTINATION CONTROL
; 647	;SEE DPE1 AND DPE2 (2'S WEIGHT IS INVERTED ON DPE5)
; 648	DEST/=<21:23>D,3      ;DPE1 & DPE2
; 649		A=0		;A REG IS CHIP OUTPUT, AD IS WRITTEN
; 650				; INTO REG FILE
; 651		AD=1		;REG FILE GETS AD
; 652		Q_AD=2		;REG FILE IS NOT LOADED
; 653		PASS=3		;AD OUTPUT IS CHIP OUTPUT
; 654				; Q AND REG FILE LEFT ALONE
; 655		Q_Q*2=4		;ALSO REG FILE GETS AD*2
; 656		AD*2=5		;AND Q IS LEFT ALONE
; 657		Q_Q*.5=6	;ALSO REG FILE GETS AD*.5
; 658		AD*.5=7		;AND Q IS LEFT ALONE
; 659	
; 660	;	<24:25>		;UNUSED
; 661	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 17
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- DATAPATH CHIP

; 662	
; 663	A/=<26:29>            	;DPE1 & DPE2
; 664		MAG=0
; 665		PC=1
; 666		HR=2
; 667		AR=3
; 668		ARX=4
; 669		BR=5
; 670		BRX=6
; 671		ONE=7
; 672		EBR=10
; 673		UBR=11
; 674		MASK=12
; 675		FLG=13
; 676		PI=14
; 677		XWD1=15
; 678		T0=16
; 679		T1=17
; 680	
; 681	;	<30:31>		;UNUSED
; 682	
; 683	B/=<32:35>D,0         ;DPE1 & DPE2
; 684		MAG=0
; 685		PC=1
; 686		HR=2
; 687		AR=3
; 688		ARX=4
; 689		BR=5
; 690		BRX=6
; 691		ONE=7
; 692		EBR=10
; 693		UBR=11
; 694		MASK=12
; 695		FLG=13
; 696		PI=14
; 697		XWD1=15
; 698		T0=16
; 699		T1=17
; 700	
; 701	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 18
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- RAM FILE ADDRESS AND D-BUS

; 702	.TOC	"MICROCODE FIELDS -- RAM FILE ADDRESS AND D-BUS"
; 703	
; 704	RAMADR/=<36:38>D,4	;DPE6
; 705		AC#=0		;AC NUMBER
; 706		AC*#=1		;AC .FN. #
; 707		XR#=2		;INDEX REGISTER
; 708		VMA=4		;VIRTUAL MEMORY REFERENCE
; 709		RAM=6		;VMA SUPPLIES 10-BIT RAM ADDRESS
; 710		#=7		;ABSOLUTE RAM FILE REFERENCE
; 711	
; 712	;	<39:39>
; 713	
; 714	;LEFT HALF ON DPE3 AND RIGHT HALF ON DPE4
; 715	DBUS/=<40:41>D,1      	;DPE3 & DPE4
; 716		PC FLAGS=0	;PC FLAGS IN LEFT HALF
; 717		PI NEW=0	;NEW PI LEVEL IN BITS 19-21
; 718	;	VMA=0		;VMA IN BITS 27-35
; 719		DP=1		;DATA PATH
; 720		RAM=2		;CACHE, AC'S AND WORKSPACE
; 721		DBM=3		;DBM MIXER
; 722	
; 723	;LEFT HALF ON DPM1 AND RIGHT HALF ON DPM2
; 724	DBM/=<42:44>D,7       	;DPM1 & DPM2
; 725		SCAD DIAG=0	;(LH) SCAD DIAGNOSTIC
; 726		PF DISP=0	;PAGE FAIL DISP IN BITS 18-21
; 727		APR FLAGS=0	;APR FLAGS IN BITS 22-35
; 728		BYTES=1		;5 COPIES OF SCAD 1-7
; 729		EXP=2		;LH=EXPONENT, RH=TIME FRACTION
; 730		DP=3		;DATA PATH
; 731		DP SWAP=4	;DATA PATH SWAPPED
; 732		VMA=5		;VMA FLAGS,,VMA
; 733		MEM=6		;MEMORY BUFFER
; 734		#=7		;NUMBER FIELD IN BOTH HALVES
; 735	
; 736	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 19
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- PARITY GENERATION & HALF WORD CONTROL

; 737	.TOC	"MICROCODE FIELDS -- PARITY GENERATION & HALF WORD CONTROL"
; 738	
; 739	AD PARITY OK/=<108>D,0  ;**NOT STORED IN CRAM**
; 740				;THIS BIT IS A 1 IF THE ALU IS DOING
; 741					; SOMETHING WHICH DOES NOT INVALIDATE
; 742					; PARITY. IT DOES NOT APPEAR IN THE
; 743					; REAL MACHINE. WE JUST USE IT TO SET
; 744					; THE DEFAULT FOR GENR & GENL
; 745	
; 746	CLKL/=<45:45>D,1        ;DPE5
; 747				;CLOCK THE LEFT HALF OF THE MACHINE
; 748	GENL/=<46:46>F,AD PARITY OK ;DPE4 FROM CRM2 PARITY EN LEFT H
; 749				;STORE PARITY FOR 2901 LEFT
; 750	CHKL/=<47:47>           ;DPE4 FROM CRM2 PARITY CHK LEFT H
; 751				;CHECK LEFT HALF DBUS PARITY
; 752	
; 753	CLKR/=<48:48>D,1        ;DPE5
; 754				;CLOCK THE RIGHT HALF OF THE MACHINE
; 755	GENR/=<49:49>F,AD PARITY OK ;DPE4 FROM CRM2 PARITY EN RIGHT H
; 756				;STORE PARITY FOR 2901 RIGHT
; 757	CHKR/=<50:50>           ;DPE4 FROM CRM2 PARITY CHK RIGHT H
; 758				;CHECK RIGHT HALF DBUS PARITY
; 759	
; 760	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 20
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- SPEC

; 761	.TOC	"MICROCODE FIELDS -- SPEC"
; 762	
; 763	
; 764	;
; 765	;THE FOLLOWING SPECIAL FUNCTION ARE DECODED ON DPE1, DPE5, AND DPMA:
; 766	;	!=========================================================================!
; 767	;	!S!     EFFECT      !    CRA6 SPEC    !    CRA6 SPEC    !    CRA6 SPEC    !
; 768	;	!P!    ON SHIFT     !      EN 40      !      EN 20      !      EN 10      !
; 769	;	!E!      PATHS      !  E102 ON DPE5   !  E101 ON DPE5   !  E410 ON DPMA   !
; 770	;	!C!   (SEE DPE1)    !                 !  E411 ON DPMA   !  E113 ON CRA2   !
; 771	;	!=========================================================================!
; 772	;	!0!     NORMAL      !   CRY 18 INH    !    PREVIOUS     !        #        !
; 773	;	!-------------------------------------------------------------------------!
; 774	;	!1!      ZERO       !     IR LOAD     !     XR LOAD     !   CLR 1 MSEC    !
; 775	;	!-------------------------------------------------------------------------!
; 776	;	!2!      ONES       !     <SPARE>     !     <SPARE>     !  CLR IO LATCH   !
; 777	;	!-------------------------------------------------------------------------!
; 778	;	!3!       ROT       !     PI LOAD     !    APR FLAGS    !   CLR IO BUSY   !
; 779	;	!-------------------------------------------------------------------------!
; 780	;	!4!      ASHC       !    ASH TEST     !    SET SWEEP    !   PAGE WRITE    !
; 781	;	!-------------------------------------------------------------------------!
; 782	;	!5!      LSHC       !    EXP TEST     !     APR EN      !     NICOND      !
; 783	;	!-------------------------------------------------------------------------!
; 784	;	!6!       DIV       !    PC FLAGS     !    PXCT OFF     !     PXCT EN     !
; 785	;	!-------------------------------------------------------------------------!
; 786	;	!7!      ROTC       !  AC BLOCKS EN   !     MEM CLR     !    MEM WAIT     !
; 787	;	!=========================================================================!
; 788	; THE DPM BOARD USES THE SPEC FIELD TO CONTROL THE
; 789	;  DBM MIXER, AS FOLLOWS:
; 790	;
; 791	;	!=====================================!
; 792	;	!  S  !                               !
; 793	;	!  P  !        ACTION WHEN DBM        !
; 794	;	!  E  !          SELECTS DP           !
; 795	;	!  C  ! GET DP BITS  !  GET SCAD 1-7  !
; 796	;	!=====================================!
; 797	;	!  0  !     ALL      !      NONE      !
; 798	;	!-------------------------------------!
; 799	;	!  1  !     7-35     !      0-6       !
; 800	;	!-------------------------------------!
; 801	;	!  2  !0-6 AND 14-35 !      7-13      !
; 802	;	!-------------------------------------!
; 803	;	!  3  !0-13 AND 21-35!     14-20      !
; 804	;	!-------------------------------------!
; 805	;	!  4  !0-20 AND 28-35!     21-27      !
; 806	;	!-------------------------------------!
; 807	;	!  5  ! 0-27 AND 35  !     28-34      !
; 808	;	!-------------------------------------!
; 809	;	!  6  !         SAME AS ZERO          !
; 810	;	!-------------------------------------!
; 811	;	!  7  !         SAME AS ZERO          !
; 812	;	!=====================================!
; 813	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 21
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- SPEC

; 814	
; 815	;THE SPEC FIELD IS DEFINED AS A 6-BIT FIELD. THE TOP 3 BITS
; 816	; ARE SPEC SEL A, SPEC SEL B, AND SPEC SEL C. THE LOW 3 BITS ARE
; 817	; THE SELECT CODE.
; 818	
; 819	SPEC/=<51:56>D,0      	;DPE1 & DPE5 & DPM1 & DPMA
; 820		#=10		;DECODE # BITS 
; 821		CLRCLK=11	;CLEAR 1MS NICOND FLAG
; 822		CLR IO LATCH=12	;CLEAR IO LATCH
; 823		CLR IO BUSY=13	;CLEAR IO BUSY
; 824		LDPAGE=14	;WRITE PAGE TABLE
; 825		NICOND=15	;DOING NICOND DISPATCH
; 826		LDPXCT=16	;LOAD PXCT FLAGS
; 827		WAIT=17		;MEM WAIT
; 828		PREV=20		;FORCE PREVIOUS CONTEXT
; 829		LOADXR=21	;LOAD XR #, USES PXCT FIELD TO SELECT 
; 830				; CORRECT AC BLOCK
; 831		APR FLAGS=23	;LOAD APR FLAGS
; 832		CLRCSH=24	;CLEAR CACHE
; 833		APR EN=25	;SET APR ENABLES
; 834		MEMCLR=27	;CLEAR PAGE FAULT CONDITION
; 835		SWEEP=34	;SET SWEEP
; 836		PXCT OFF=36	;TURN OFF THE EFFECT OF PXCT
; 837		INHCRY18=40	;INHIBIT CARRY INTO LEFT HALF
; 838		LOADIR=41	;LOAD THE IR
; 839		LDPI=43		;LOAD PI SYSTEM
; 840		ASHOV=44	;TEST RESULT OF ASH
; 841		EXPTST=45	;TEST RESULT OF FLOATING POINT
; 842		FLAGS=46	;CHANGE PC FLAGS
; 843		LDACBLK=47	;LOAD AC BLOCK NUMBERS
; 844		LDINST=61	;LOAD INSTRUCTION
; 845	
; 846	;THE SPEC FIELD IS REDEFINED WHEN USED FOR BYTE MODE STUFF
; 847	BYTE/=<54:56>         	;DPM1 (SPEC SEL)
; 848		BYTE1=1
; 849		BYTE2=2
; 850		BYTE3=3
; 851		BYTE4=4
; 852		BYTE5=5
; 853	
; 854	;THE SPEC FIELD IS REDEFINED WHEN USED TO CONTROL SHIFT PATHS
; 855	SHSTYLE/=<54:56>      	;DPE1 (SPEC SEL)
; 856		NORM=0		;2 40-BIT REGISTERS
; 857		ZERO=1		;SHIFT ZERO INTO 36 BITS (ASH TOP 2901)
; 858		ONES=2		;SHIFT IN ONES
; 859		ROT=3		;ROTATE
; 860		ASHC=4		;ASHC
; 861		LSHC=5		;LSHC
; 862		DIV=6		;SPECIAL DIVIDE
; 863		ROTC=7		;ROTATE DOUBLE
; 864	
; 865	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 22
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- DISPATCH

; 866	.TOC	"MICROCODE FIELDS -- DISPATCH"
; 867	;	!=======================================================!
; 868	;	! D !      CRA1      !      CRA1      !      DPEA       !
; 869	;	! I !      DISP      !      DISP      !      DISP       !
; 870	;	! S !       10       !       20       !       40        !
; 871	;	! P !                !                !                 !
; 872	;	!=======================================================!
; 873	;	! 0 !    DIAG ADR    !    DIAG ADR    !        0        !
; 874	;	!-------------------------------------------------------!
; 875	;	! 1 !     RETURN     !     RETURN     !    DP 18-21     !
; 876	;	!-------------------------------------------------------!
; 877	;	! 2 !    MULTIPLY    !       J        !        J        !
; 878	;	!-------------------------------------------------------!
; 879	;	! 3 !   PAGE FAIL    !     AREAD     !     AREAD      !
; 880	;	!-------------------------------------------------------!
; 881	;	! 4 !     NICOND     !   NOT USABLE   !      NORM       !
; 882	;	!-------------------------------------------------------!
; 883	;	! 5 !      BYTE      !   NOT USABLE   !    DP 32-35     !
; 884	;	!-------------------------------------------------------!
; 885	;	! 6 !    EA MODE     !   NOT USABLE   !     DROM A      !
; 886	;	!-------------------------------------------------------!
; 887	;	! 7 !      SCAD      !   NOT USABLE   !     DROM B      !
; 888	;	!=======================================================!
; 889	;NOTE:	DISP EN 40 & DISP EN 10 ONLY CONTROL THE LOW 4 BITS OF THE
; 890	;	JUMP ADDRESS. DISP EN 20 ONLY CONTROLS THE HI 7 BITS. TO DO
; 891	;	SOMETHING TO ALL 11 BITS BOTH 20 & 40 OR 20 & 10 MUST BE ENABLED.
; 892	
; 893	DISP/=<57:62>D,70     	;CRA1 & DPEA
; 894		CONSOLE=00	;CONSOLE DISPATCH
; 895		DROM=12		;DROM
; 896		AREAD=13	;AREAD
; 897		DP LEFT=31	;DP 18-21
; 898		NORM=34		;NORMALIZE
; 899		DP=35		;DP 32-35
; 900		ADISP=36	;DROM A FIELD
; 901		BDISP=37	;DROM B FIELD
; 902		RETURN=41	;RETURN
; 903		MUL=62		;MULTIPLY
; 904		PAGE FAIL=63	;PAGE FAIL
; 905		NICOND=64	;NEXT INSTRUCTION DISPATCH
; 906		BYTE=65		;BYTE SIZE AND POSITION
; 907		EAMODE=66	;EFFECTIVE ADDRESS MODE
; 908		SCAD0=67	;J!2 IF SCAD BIT 0 = 1
; 909	
; 910	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 23
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- SKIP

; 911	.TOC	"MICROCODE FIELDS -- SKIP"
; 912	;	!=======================================================!
; 913	;	! S !      CRA2      !      DPEA      !      DPEA       !
; 914	;	! K !      SKIP      !      SKIP      !      SKIP       !
; 915	;	! I !       10       !       20       !       40        !
; 916	;	! P !                !                !                 !
; 917	;	!=======================================================!
; 918	;	! 0 !       0        !       0        !        0        !
; 919	;	!-------------------------------------------------------!
; 920	;	! 1 !   TRAP CYCLE   !     CRY 02     !    CARRY OUT    !
; 921	;	!-------------------------------------------------------!
; 922	;	! 2 !      AD=0      !    ADL SIGN    !      ADL=0      !
; 923	;	!-------------------------------------------------------!
; 924	;	! 3 !    SC SIGN     !    ADR SIGN    !      ADR=0      !
; 925	;	!-------------------------------------------------------!
; 926	;	! 4 !    EXECUTE     !    USER IOT    !      -USER      !
; 927	;	!-------------------------------------------------------!
; 928	;	! 5 !  -BUS IO BUSY  !   JFCL SKIP    !    FPD FLAG     !
; 929	;	!-------------------------------------------------------!
; 930	;	! 6 !   -CONTINUE    !     CRY 01     !  AC # IS ZERO   !
; 931	;	!-------------------------------------------------------!
; 932	;	! 7 !    -1 MSEC     !      TXXX      !  INTERRUPT REQ  !
; 933	;	!=======================================================!
; 934	
; 935	SKIP/=<63:68>D,70     	;CRA2 & DPEA
; 936		IOLGL=04	;(.NOT.USER)!(USER IOT)!(CONSOLE EXECUTE MODE)
; 937		LLE=12		;AD LEFT .LE. 0
; 938		CRY0=31		;AD CRY -2
; 939		ADLEQ0=32	;ADDER LEFT = 0
; 940		ADREQ0=33	;ADDER RIGHT = 0
; 941		KERNEL=34	;.NOT. USER
; 942		FPD=35		;FIRST PART DONE
; 943		AC0=36		;AC NUMBER IS ZERO
; 944		INT=37		;INTERRUPT REQUEST
; 945		LE=42		;(AD SIGN)!(AD.EQ.0)
; 946		CRY2=51		;AD CRY 02
; 947		DP0=52		;AD SIGN
; 948		DP18=53		;AD BIT 18
; 949		IOT=54		;USER IOT
; 950		JFCL=55		;JFCL SKIP
; 951		CRY1=56		;AD CRY 1
; 952		TXXX=57		;TEST INSTRUCTION SHOULD SKIP
; 953		TRAP CYCLE=61	;THIS INSTRUCTION IS THE RESULT OF A
; 954				; TRAP 1, 2, OR 3
; 955		ADEQ0=62	;AD.EQ.0
; 956		SC=63		;SC SIGN BIT
; 957		EXECUTE=64	;CONSOLE EXECUTE MODE
; 958		-IO BUSY=65	;.NOT. I/O LATCH
; 959		-CONTINUE=66	;.NOT. CONTINUE
; 960		-1 MS=67	;.NOT. 1 MS. TIMER
; 961	
; 962	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 24
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- TIME CONTROL

; 963	.TOC	"MICROCODE FIELDS -- TIME CONTROL"
; 964	
; 965	DT/=<109:111>D,0        ;**NOT STORED IN CRAM**
; 966				;DEFAULT TIME FIELD (USED IN MACROS)
; 967				; CAN BE OVERRIDDEN IN MACRO CALL
; 968		2T=0
; 969		3T=1
; 970		4T=2
; 971		5T=3
; 972	
; 973	
; 974	T/=<70:71>F,DT          ;CSL5 (E601)
; 975				;CLOCK TICKS MINUS TWO REQUIRED TO
; 976				; DO A MICRO INSTRUCTION
; 977		2T=0		;TWO TICKS
; 978		3T=1		;THREE TICKS
; 979		4T=2		;FOUR TICKS
; 980		5T=3		;FIVE TICKS
; 981	
; 982	
; 983	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 25
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- RANDOM CONTROL BITS

; 984	.TOC	"MICROCODE FIELDS -- RANDOM CONTROL BITS"
; 985	
; 986	CRY38/=<72>             ;DPE5
; 987				;INJECT A CARRY INTO THE 2901 ADDER
; 988	LOADSC/=<73>            ;DPM4
; 989				;LOAD THE STEP COUNTER FROM THE SCAD
; 990	LOADFE/=<74>            ;DPM4
; 991				;LOAD THE FE REGISTER FROM THE SCAD
; 992	FMWRITE/=<75>           ;DPE5 (E302)
; 993				;WRITE THE RAM FILE.
; 994	MEM/=<76>               ;DPM5 (E612) & DPE5 (E205)
; 995				;START (OR COMPLETE) A MEMORY OR I/O CYCLE UNDER
; 996				; CONTROL OF THE NUMBER FIELD.
; 997	DIVIDE/=<77>            ;DPE5
; 998				;THIS MICROINSTRUCTION IS DOING A DIVIDE
; 999	MULTI PREC/=<78>        ;DPE5
; 1000				;MULTIPRECISION STEP IN DIVIDE, DFAD, DFSB
; 1001	MULTI SHIFT/=<79>       ;CSL5 (HAS NOTHING TO DO WITH DPE5 MULTI SHIFT)
; 1002				;FAST SHIFT
; 1003	CALL/=<80>              ;CRA2 (STACK IS ON CRA3)
; 1004				;THIS IS A CALL
; 1005	
; 1006	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 26
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- NUMBER FIELD

; 1007	.TOC	"MICROCODE FIELDS -- NUMBER FIELD"
; 1008	
; 1009	;HERE IS THE GENERAL FIELD
; 1010	#/=<90:107>           	;MANY PLACES
; 1011	
; 1012	;# REDEFINED WHEN USED AS SCAD CONTROL:
; 1013	SCAD/=<90:92>         	;DPM3
; 1014		A*2=0
; 1015		A.OR.B=1
; 1016		A-B-1=2
; 1017		A-B=3
; 1018		A+B=4
; 1019		A.AND.B=5
; 1020		A-1=6
; 1021		A=7
; 1022	SCADA/=<93:95>        	;DPM3
; 1023		SC=0
; 1024		S#=1
; 1025		PTR44=2	;44 AND BIT 6 (SEE DPM3)
; 1026		BYTE1=3
; 1027		BYTE2=4
; 1028		BYTE3=5
; 1029		BYTE4=6
; 1030		BYTE5=7
; 1031	SCADB/=<96:97>        	;DPM3
; 1032		FE=0
; 1033		EXP=1
; 1034		SHIFT=2
; 1035		SIZE=3
; 1036	S#/=<98:107>          	;DPM3
; 1037	
; 1038	;# REDEFINED WHEN USED AS STATE REGISTER CONTROL:
; 1039	STATE/=<90:107>         ;NOT USED BY HARDWARE
; 1040		SIMPLE=0	;SIMPLE INSTRUCTIONS
; 1041		BLT=1		;BLT IN PROGRESS
; 1042	.IFNOT/ITS
; 1043		MAP=400002	;MAP IN PROGRESS
; 1044	.ENDIF/ITS
; 1045		SRC=3		;MOVE STRING SOURCE IN PROGRESS
; 1046		DST=4		;MOVE STRING FILL IN PROGRESS
; 1047		SRC+DST=5	;MOVE STRING DEST IN PROGRESS
; 1048		DSTF=6		;FILLING DEST
; 1049		CVTDB=7		;CONVERT DEC TO BIN
; 1050		COMP-DST=10	;COMPARE DEST
; 1051		EDIT-SRC=11	;EDIT SOURCE
; 1052		EDIT-DST=12	;EDIT DEST
; 1053		EDIT-S+D=13	;BOTH SRC AND DST POINTERS
; 1054	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 27
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- NUMBER FIELD

; 1055	
; 1056	;# REDEFINED WHEN USED AS WORSPACE ADDRESS
; 1057	
; 1058	WORK/=<98:107>        	;DPE6
; 1059		BADW0=160	;AC BLK 7 WORD 0 (BAD DATA FROM MEMORY)
; 1060	.IFNOT/ITS
; 1061		BADW1=161	;AC BLK 7 WORD 1 (BAD DATA FROM MEMORY)
; 1062	.ENDIF/ITS
; 1063		MUL=200		;TEMP FOR MULTIPLY
; 1064		DIV=201		;TEMP FOR DIVIDE
; 1065		SV.VMA=210	;SAVE VMA
; 1066		SV.AR=211	;SAVE AR
; 1067		SV.ARX=212	;SAVE ARX
; 1068		SV.BR=213	;SAVE BR
; 1069		SV.BRX=214	;SAVE BRX
; 1070	.IF/ITS
; 1071		DBR1=215	;Pointer to page table for user low addresses.
; 1072		DBR2=216	;Pointer to page table for user high addresses.
; 1073		DBR3=217	;Pointer to page table for exec high addresses.
; 1074		DBR4=220	;Pointer to page table for exec low addresses.
; 1075	.IFNOT/ITS
; 1076		SBR=215		;SPT BASE REGISTER
; 1077		CBR=216		;CST BASE ADDRESS
; 1078		CSTM=217	;CST MASK
; 1079		PUR=220		;PROCESS USE REGISTER
; 1080	.ENDIF/ITS
; 1081		ADJP=221	;"P" FOR ADJBP
; 1082		ADJS=222	;"S" FOR ADJBP
; 1083		ADJPTR=223	;BYTE POINTER FOR ADJBP
; 1084		ADJQ1=224	;TEMP FOR ADJBP
; 1085		ADJR2=225	;TEMP FOR ADJBP
; 1086		ADJBPW=226	;(BYTES/WORD) FOR ADJBP
; 1087		HSBADR=227	;ADDRESS OF HALT STATUS BLOCK
; 1088		APR=230		;APR ENABLES
; 1089				; 2.5 - 2.4 Both set if paging enabled.
; 1090				; 2.3 - 1.5 Flags enabled
; 1091				; 1.3 - 1.1 PI level
; 1092				;More APR status is kept in APR FLAGS hardware:
; 1093				; 2.3 - 1.5 Flags set
; 1094				; 1.4 Some flag is interrupting
; 1095	.IF/JPC
; 1096		U.JPC=231	;User mode JPC
; 1097		E.JPC=232	;Exec mode JPC
; 1098	.ENDIF/JPC
; 1099	
; 1100	;THE FOLLOWING WORDS ARE USED BY EXTEND INSTRUCTION
; 1101		E0=240		;ORIGINAL EFFECTIVE ADDRESS
; 1102		E1=241		;EFFECTIVE ADDRESS OF WORD AT E0
; 1103		SLEN=242	;SOURCE LENGTH
; 1104		MSK=243		;BYTE MASK
; 1105		FILL=244	;FILL BYTE
; 1106		CMS=245		;SRC BYTE IN STRING COMPARE
; 1107		FSIG=246	;PLACE TO SAVE ARX WHILE STORING
; 1108				; THE FLOAT CHAR
; 1109		BDH=247		;BINARY BEING CONVERTED TO
; 1110		BDL=250		; DECIMAL
; 1111	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 28
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- NUMBER FIELD

; 1112	
; 1113	;TIMER STUFF
; 1114		TIME0=300	;HIGH ORDER 36 BITS OF TIME
; 1115		TIME1=301	;LOW ORDER 36 BITS OF TIME
; 1116		PERIOD=302	;INTERRUPT PERIOD
; 1117		TTG=303		;TIME TO GO TO NEXT INTERRUPT
; 1118	.IF/ITS
; 1119		QUAN=304	;Quantum counter incremented by TOCK except
; 1120				;when PI in progress.
; 1121	.ENDIF/ITS
; 1122	
; 1123	;DDIV STUFF
; 1124		AC0=314
; 1125		AC1=315
; 1126		AC2=316
; 1127		AC3=317
; 1128		DDIV SGN=320
; 1129		DVSOR H=321
; 1130		DVSOR L=322
; 1131	;POWERS OF TEN
; 1132		DECLO=344	;LOW WORD
; 1133		DECHI=373	;HIGH WORD
; 1134	
; 1135		YSAVE=422	;Y OF LAST INDIRECT POINTER
; 1136	.IFNOT/ITS
; 1137		PTA.E=423	;ADDRESS OF EXEC PAGE MAP (NOT PROCESS TABLE)
; 1138		PTA.U=424	;ADDRESS OF USER PAGE MAP
; 1139	.ENDIF/ITS
; 1140		TRAPPC=425	;SAVED PC FROM TRAP CYCLE
; 1141		SV.AR1=426	;ANOTHER PLACE TO SAVE AR
; 1142	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 29
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- NUMBER FIELD

; 1143	
; 1144	;# REDEFINED WHEN USED AS PC FLAG CONTROL (ALL ON DPE9)
; 1145	
; 1146	SETOV/=<90>             ;DPE9
; 1147				;SET ARITHMETIC OVERFLOW
; 1148	SETFOV/=<91>            ;SET FLOATING OVERFLOW
; 1149	SETNDV/=<92>            ;SET NO DIVIDE
; 1150	
; 1151	;---------------------------------------------------------------------
; 1152	
; 1153	CLRFPD/=<93>            ;CLEAR FIRST PART DONE
; 1154	SETFPD/=<94>            ;SET FIRST PART DONE
; 1155	HOLD USER/=<95>         ;WHEN THIS BIT IS SET IT:
; 1156				; 1. PREVENTS SETTING USER IOT IN USER MODE
; 1157				; 2. PREVENTS CLEARING USER IN USER MODE
; 1158	
; 1159	;---------------------------------------------------------------------
; 1160	
; 1161	;	<96>		;SPARE
; 1162	TRAP2/=<97>             ;SET TRAP 2
; 1163	TRAP1/=<98>             ;SET TRAP 1
; 1164	
; 1165	;---------------------------------------------------------------------
; 1166	
; 1167	LD PCU/=<99>            ;LOAD PCU FROM USER
; 1168	;	<100>		;SPARE
; 1169	;	<101>		;SPARE
; 1170	
; 1171	;---------------------------------------------------------------------
; 1172	
; 1173	;	<102>		;SPARE
; 1174	;	<103>		;SPARE
; 1175	JFCLFLG/=<104>          ;DO A JFCL INSTRUCTION
; 1176	
; 1177	;---------------------------------------------------------------------
; 1178	
; 1179	LD FLAGS/=<105>         ;LOAD FLAGS FROM DP
; 1180	;	<106>
; 1181	ADFLGS/=<107>           ;UPDATE CARRY FLAGS
; 1182	
; 1183	;# REDEFINED WHEN USED AS MEMORY CYCLE CONTROL
; 1184	
; 1185	FORCE USER/=<90>        ;FORCE USER MODE REFERENCE
; 1186	FORCE EXEC/=<91>        ;FORCE EXEC MODE REFERENCE
; 1187				; (DOES NOT WORK UNDER PXCT)
; 1188	FETCH/=<92>             ;THIS IS AN INSTRUCTION FETCH
; 1189	
; 1190	;---------------------------------------------------------------------
; 1191	
; 1192	READ CYCLE/=<93>        ;SELECT A READ CYCLE
; 1193	WRITE TEST/=<94>        ;PAGE FAILE IF NOT WRITTEN
; 1194	WRITE CYCLE/=<95>       ;SELECT A MEMORY WRITE CYCLE
; 1195	
; 1196	;---------------------------------------------------------------------
; 1197	
; 1198	;	<96>		;SPARE BIT
; 1199	DONT CACHE/=<97>        ;DO NOT LOOK IN CACHE
; 1200	PHYSICAL/=<98>          ;DO NOT INVOKE PAGING HARDWARE
; 1201	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 30
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- NUMBER FIELD

; 1202	
; 1203	;---------------------------------------------------------------------
; 1204	
; 1205	PXCT/=<99:101>          ;WHICH PXCT BITS TO LOOK AT
; 1206		CURRENT=0
; 1207		E1=1
; 1208		D1=3
; 1209		BIS-SRC-EA=4
; 1210		E2=5
; 1211		BIS-DST-EA=6
; 1212		D2=7
; 1213	
; 1214	;---------------------------------------------------------------------
; 1215	
; 1216	AREAD/=<102>            ;LET DROM SELECT SYSLE TYPE AND VMA LOAD
; 1217	DP FUNC/=<103>          ;IGNORE # BITS 0-11 AND USE DP 0-13 INSTEAD
; 1218				; DP9 MEANS "FORCE PREVIOUS"
; 1219	LDVMA/=<104>            ;LOAD THE VMA
; 1220	
; 1221	;---------------------------------------------------------------------
; 1222	
; 1223	EXT ADR/=<105>          ;PUT VMA BITS 14-17 ONTO BUS
; 1224	WAIT/=<106>             ;START A MEMORY OR I/O CYCLE
; 1225	BWRITE/=<107>           ;START A MEMORY CYCLE IF DROM ASKS FOR IT
; 1226	
; 1227	;THESE BITS ARE USED ONLY TO SETUP DP FOR A DP FUNCTION
; 1228	
; 1229	;	<99>		;PREVIOUS
; 1230	IO CYCLE/=<100>         ;THIS IS AN I/O CYCLE
; 1231	WRU CYCLE/=<101>        ;WHO ARE YOU CYCLE
; 1232	
; 1233	;---------------------------------------------------------------------
; 1234	
; 1235	VECTOR CYCLE/=<102>     ;READ INTERRUPT VECTOR
; 1236	IO BYTE/=<103>          ;BYTE CYCLE
; 1237	;	<104>
; 1238	
; 1239	;# REDEFINED WHEN USED AS PI RIGHT BITS
; 1240	PI.ZER/=<90:92>         ;ZEROS
; 1241	PI.IP1/=<93>            ;PI 1 IN PROG
; 1242	PI.IP2/=<94>
; 1243	PI.IP3/=<95>
; 1244	PI.IP4/=<96>
; 1245	PI.IP5/=<97>
; 1246	PI.IP6/=<98>
; 1247	PI.IP7/=<99>
; 1248	PI.ON/=<100>            ;SYSTEM IS ON
; 1249	PI.CO1/=<101>           ;CHAN 1 IS ON
; 1250	PI.CO2/=<102>
; 1251	I.CO3/=<103>
; 1252	I.CO4/=<104>
; 1253	I.CO5/=<105>
; 1254	I.CO6/=<106>
; 1255	I.CO7/=<107>
; 1256	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 31
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- NUMBER FIELD

; 1257	
; 1258	;# REDEFINED WHEN USED AS WRPI DATA
; 1259	PI.MBZ/=<90:93>         ;MUST BE ZERO
; 1260	PI.DIR/=<94>            ;DROP INTERRUPT REQUESTS
; 1261	PI.CLR/=<95>            ;CLEAR SYSTEM
; 1262	PI.REQ/=<96>            ;REQUEST INTERRUPT
; 1263	PI.TCN/=<97>            ;TURN CHANNEL ON
; 1264	PI.TCF/=<98>            ;TURN CHANNEL OFF
; 1265	PI.TSF/=<99>            ;TURN SYSTEM OFF
; 1266	PI.TSN/=<100>           ;TURN SYSTEM ON
; 1267	PI.SC1/=<101>           ;SELECT CHANNEL 1
; 1268	PI.SC2/=<102>
; 1269	PI.SC3/=<103>
; 1270	PI.SC4/=<104>
; 1271	PI.SC5/=<105>
; 1272	PI.SC6/=<106>
; 1273	PI.SC7/=<107>
; 1274	
; 1275	;# REDEFINED WHEN USED AS AC CONTROL
; 1276	
; 1277	
; 1278	;THIS FIELD CONTROLS THE INPUT TO A 74LS181 ON DPE6. THE NUMBER
; 1279	; FIELD HAS THIS FORMAT IN <98:107>:
; 1280	;
; 1281	;	!-----!-----!-----!-----!-----!-----!-----!-----!-----!-----!
; 1282	;	!CARRY! S8  !  S4 ! S2  !  S1 ! MODE! B8  ! B4  !  B2 ! B1  !
; 1283	;	!  IN !       FUNCTION        !     !      DATA INPUTS      !
; 1284	;	!-----!-----------------------!-----!-----------------------!
; 1285	;
; 1286	
; 1287	ACALU/=<98:103>       	
; 1288		B=25
; 1289		AC+N=62
; 1290	ACN/=<104:107>
; 1291				;AC NAMES FOR STRING INSTRUCTIONS
; 1292		SRCLEN=0	;SOURCE LENGTH
; 1293		SRCP=1		;SOURCE POINTER
; 1294		DLEN=3		;DEST LENGTH
; 1295		DSTP=4		;DEST POINTER
; 1296		MARK=3		;POINTER TO MARK
; 1297		BIN0=3		;HIGH WORD OF BINARY
; 1298		BIN1=4		;LOW WORD OF BINARY
; 1299	
; 1300	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 32
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MICROCODE FIELDS -- NUMBER FIELD

; 1301	
; 1302	;# FIELD REDEFINED WHEN USE AS APRID DATA
; 1303	
; 1304	MICROCODE OPTIONS/=<90:98>
; 1305	.IF/ITS
; 1306		OPT=020			;4.5 Indicates ITS ucode, just like on KL.
; 1307	.IFNOT/ITS
; 1308		OPT=000
; 1309	.ENDIF/ITS
; 1310	
; 1311	;Actually defined in configuration file:
; 1312	;
; 1313	; MICROCODE VERSION/=<99:107>
; 1314	;	UCV=259.
; 1315	;
; 1316	; HARDWARE OPTIONS/=<90:92>
; 1317	;	HWOPT=0
; 1318	;
; 1319	; HARDWARE SERIAL NUMBER/=<93:107>
; 1320	;	HWSER=4097.
; 1321	
; 1322	;# FIELD REDEFINED WHEN USED AS A HALT CODE
; 1323	
; 1324	HALT/=<90:107>
; 1325				;CODES 0 TO 77 ARE "NORMAL" HALTS
; 1326		POWER=0		;POWER UP
; 1327		HALT=1		;HALT INSTRUCTION
; 1328		CSL=2		;CONSOLE HALT
; 1329				;CODES 100 TO 777 ARE SOFTWARE ERRORS
; 1330		IOPF=100	;I/O PAGE FAIL
; 1331		ILLII=101	;ILLEGAL INTERRUPT INSTRUCTION
; 1332		ILLINT=102	;BAD POINTER TO UNIBUS INTERRUPT VECTOR
; 1333				;CODES 1000 TO 1777 ARE HARDWARE ERRORS
; 1334		BW14=1000	;ILLEGAL BWRITE FUNCTION (BAD DROM)
; 1335		NICOND 5=1004	;ILLEGAL NICOND DISPATCH
; 1336		MULERR=1005	;VALUE COMPUTED FOR 10**21 WAS WRONG
; 1337	.IFNOT/FULL
; 1338		PAGEF=1777	;PAGE FAIL IN SMALL MICROCODE
; 1339	.ENDIF/FULL
; 1340	
; 1341	
; 1342	
; 1343	;# FIELD REDEFINED WHEN USED AS FLG BITS
; 1344	
; 1345	FLG.W/=<94>             ;W BIT FROM PAGE MAP
; 1346	FLG.PI/=<95>            ;PI CYCLE
; 1347	FLG.C/=<96>             ;CACHE BIT FROM PAGE MAP
; 1348	FLG.SN/=<97>		;SPECIAL NEGATE IN FDV & DFDV
; 1349	
; 1350	;RIGHT HALF OF FLG USED TO RECOVER FROM PAGE FAILS
; 1351	
; 1352	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 33
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	SUBFIELD DEFINITIONS FOR .RAMFILE

; 1353	.TOC	"SUBFIELD DEFINITIONS FOR .RAMFILE"
; 1354	
; 1355	SPEC HIGH/=<51:53>
; 1356	SPEC LOW/=<54:56>
; 1357	
; 1358	DISP HIGH/=<57:59>
; 1359	DISP LOW/=<60:62>
; 1360	
; 1361	SKIP HIGH/=<63:65>
; 1362	SKIP LOW/=<66:68>
; 1363	
; 1364	# HIGH/=<90:95>
; 1365	# LOW/=<96:107>
; 1366	
; 1367	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 34
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	DISPATCH ROM DEFINITIONS

; 1368	.TOC	"DISPATCH ROM DEFINITIONS"
; 1369	
; 1370	;ALL ON DPEA
; 1371	
; 1372		.DCODE
; 1373	A/=<2:5>                ;OPERAND FETCH MODE
; 1374		READ=0		;READ
; 1375		WRITE=1		;WRITE
; 1376		DREAD=2		;DOUBLE READ
; 1377		DBLAC=3		;DOUBLE AC
; 1378		SHIFT=4		;SIMPLE SHIFT
; 1379		DSHIFT=5	;DOUBLE SHIFT
; 1380		FPI=6		;FLOATING POINT IMMEDIATE
; 1381		FP=7		;FLOATING POINT
; 1382		RD-PF=10	;READ, THEN START PREFETCH
; 1383		DFP=11		;DOUBLE FLOATING POINT
; 1384		IOT=12		;CHECK FOR IO LEGAL THEN SAME AS I
; 1385	
; 1386	B/=<8:11>               ;STORE RESULTS AS
; 1387		SELF=4		;SELF
; 1388		DBLAC=5		;DOUBLE AC
; 1389		DBLB=6		;DOUBLE BOTH
; 1390		AC=15		;AC
; 1391		MEM=16		;MEMORY
; 1392		BOTH=17		;BOTH
; 1393	
; 1394	;B-FIELD WHEN USED IN FLOATING POINT OPERATIONS
; 1395	ROUND/=<8>              ;ROUND THE RESULT
; 1396	MODE/=<9>               ;SEPARATE ADD/SUB & MUL/DIV ETC.
; 1397	FL-B/=<10:11>           ;STORE RESULTS AS
; 1398		AC=1		;AC
; 1399		MEM=2		;MEMORY
; 1400		BOTH=3		;BOTH
; 1401	
; 1402	J/=<12:23>              ;DISPATCH ADDRESS (MUST BE 1400 TO 1777)
; 1403	
; 1404	ACDISP/=<24>            ;DISPATCH ON AC FIELD
; 1405	I/=<25>                 ;IMMEDIATE DISPATCH. DISP/AREAD DOES A DISP/DROM
; 1406				; IF THIS BIT IS SET.
; 1407	READ/=<26>              ;START A READ AT AREAD
; 1408	TEST/=<27>              ;START A WRITE TEST  AT AREAD
; 1409	COND FUNC/=<28>       	;START A MEMORY CYCLE ON BWRITE
; 1410	VMA/=<29>D,1            ;LOAD THE VMA ON AREAD
; 1411	WRITE/=<30>           	;START A WRITE ON AREAD
; 1412		.UCODE
; 1413	
; 1414	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 35
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	HOW TO READ MACROS

; 1415	.TOC	"HOW TO READ MACROS"
; 1416	;		
; 1417	;		1.0  REGISTER TRANSFER MACROS
; 1418	;		
; 1419	;		MOST MACROS USED IN THE KS10 ARE USED TO OPERATE ON DATA IN  (OR  FROM/TO)  2901
; 1420	;		REGISTERS.   THE  NAMES  OF  THE  2901  REGISTERS  ARE  MACRO PARAMETERS AND ARE
; 1421	;		ENCLOSED IN [].  A TYPICAL MACRO IS:
; 1422	;		
; 1423	;		        [AR]_[AR]+[BR]
; 1424	;		
; 1425	;		THE SYMBOL _ IS PRONOUNCED "GETS".  THE ABOVE MACRO WOULD BE READ "THE  AR  GETS
; 1426	;		THE AR PLUS THE BR".
; 1427	;		
; 1428	;		IF A MACRO DOES NOT HAVE A _ IN IT, THERE IS NO RESULT STORED.  THUS,  [AR]-[BR]
; 1429	;		JUST COMPARES THE AR AND THE BR AND ALLOWS FOR SKIPS ON THE VARIOUS ALU BITS.
; 1430	;		
; 1431	;		
; 1432	;		
; 1433	;		1.1  SPECIAL SYMBOLS
; 1434	;		
; 1435	;		THERE ARE A BUNCH OF SYMBOLS USED IN THE MACROS WHICH ARE  NOT  2901  REGISTERS.
; 1436	;		THEY ARE DEFINED HERE:
; 1437	;		
; 1438	;		     1.  AC -- THE AC SELECTED BY THE CURRENT INSTRUCTION.  SEE DPEA
; 1439	;		
; 1440	;		     2.  AC[] -- AC+N.  AC[1] IS AC+1, AC[2] IS AC+2, ETC.
; 1441	;		
; 1442	;		     3.  APR -- THE APR FLAGS FROM DPMA
; 1443	;		
; 1444	;		     4.  EA -- THE EFFECTIVE ADDRESS.  THAT IS, 0  IN  THE  LEFT  HALF  AND  THE
; 1445	;		         CONTENTS OF THE HR IN THE RIGHT HALF.
; 1446	;		
; 1447	;		     5.  EXP -- THE F.P.  EXPONENT  FROM  THE  SCAD.   [AR]_EXP  WILL  TAKE  THE
; 1448	;		         EXPONENT OUT OF THE FE AND PUT IT BACK INTO THE NUMBER IN THE AR.
; 1449	;		
; 1450	;		     6.  FE -- THE FE REGISTER
; 1451	;		
; 1452	;		     7.  FLAGS -- THE PC FLAGS (FROM DPE9) IN THE LEFT HALF.
; 1453	;		
; 1454	;		     8.  Q -- THE Q REGISTER
; 1455	;		
; 1456	;		     9.  RAM -- THE RAM FILE, RAM ADDRESS IS IN THE VMA.
; 1457	;		
; 1458	;		    10.  P -- THE P FIELD OF THE BYTE POINTER.  SAME IDEA AS EXP.
; 1459	;		
; 1460	;		    11.  TIME -- THE 1MS.  TIMER
; 1461	;		
; 1462	;		    12.  VMA -- THE VMA.  WHEN READ IT INCLUDES THE VMA FLAGS
; 1463	;		
; 1464	;		    13.  XR -- INDEX REGISTER
; 1465	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 36
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	HOW TO READ MACROS

; 1466	
; 1467	;		    14.  XWD -- HALF WORD.  USED TO GENERATE CONSTANTS.  FOR EXAMPLE, [AR]_0 XWD
; 1468	;		         [40] WOULD LOAD THE CONSTANT 40 (OCTAL) INTO THE AR.
; 1469	;		
; 1470	;		    15.  +SIGN AND -SIGN -- SIGN BITS USED TO SIGN  SMEAR  F.P.   NUMBERS.   FOR
; 1471	;		         EXAMPLE, [AR]_+SIGN WOULD CLEAR AR BITS 0 TO 8.
; 1472	;		
; 1473	;		    16.  WORK[] -- LOCATIONS IN  THE  WORKSPACE  USED  AS  SCRATCH  SPACE.   FOR
; 1474	;		         EXAMPLE,  [AR]_WORK[CSTM]  WOULD LOAD THE AR WITH THE CST MASK FROM THE
; 1475	;		         RAM.  CSTM IS A SYMBOL DEFINED IN THE WORK FIELD.
; 1476	;		
; 1477	;		
; 1478	;		
; 1479	;		
; 1480	;		1.2  LONG
; 1481	;		
; 1482	;		LONG IS USED ON SHIFT OPERATIONS  TO  INDICATE  THAT  THE  Q  REGISTER  IS  ALSO
; 1483	;		SHIFTED.  THIS SAYS NOTHING ABOUT HOW THE SHIFT PATHS ARE CONNECTED UP.
; 1484	;		
; 1485	;		
; 1486	;		
; 1487	;		2.0  MEMORY MACROS
; 1488	;		
; 1489	;		MEMORY IS INDICATED BY THE SYMBOL "MEM".  WHEN WE  ARE  WAITING  FOR  DATA  FROM
; 1490	;		MEMORY  THE  "MEM  READ" MACRO IS USED.  WHEN WE ARE SENDING DATA TO MEMORY, THE
; 1491	;		"MEM WRITE" MACRO IS USED.  EXAMPLE,
; 1492	;		        MEM READ,               ;WAIT FOR MEMORY
; 1493	;		        [AR]_MEM                ;LOAD DATA INTO AR
; 1494	;		VMA_ IS USED THE LOAD THE VMA.  THUS, VMA_[PC] LOADS THE VMA FROM THE PC.
; 1495	;		
; 1496	;		
; 1497	;		
; 1498	;		3.0  TIME CONTROL
; 1499	;		
; 1500	;		THERE ARE 2 SETS OF MACROS USED FOR TIME CONTROL.  THE FIRST,  SELECTS  THE  RAM
; 1501	;		ADDRESS  TO  SPEED UP THE NEXT INSTRUCTION.  THESE MACROS ARE AC, AC[], XR, VMA,
; 1502	;		WORK[].  THE SECOND, SETS THE TIME FIELD.  THESE ARE  2T,  3T,  4T,  AND  5T  TO
; 1503	;		SELECT 2, 3, 4, OR 5 TICKS.
; 1504	;		
; 1505	;		
; 1506	;		
; 1507	;		4.0  SCAD MACROS
; 1508	;		
; 1509	;		THE SCAD MACROS LOOK LIKE THE 2901 MACROS EXECPT NO [] ARE REQUIRED.  THERE  ARE
; 1510	;		ONLY A FEW SYMBOLS USED.
; 1511	;		
; 1512	;		     1.  FE -- THE FE REGISTER
; 1513	;		
; 1514	;		     2.  SC -- THE SC REGISTER
; 1515	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 37
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	HOW TO READ MACROS

; 1516	
; 1517	;		     3.  EXP -- THE EXPONENT FROM A F.P.  NUMBER.  FOR EXAMPLE FE_EXP LOADS  THE
; 1518	;		         FE FROM DP BITS 1-8.
; 1519	;		
; 1520	;		     4.  SHIFT -- THE SHIFT COUNT FROM SHIFT INSTRUCTIONS.  THAT IS DP  BITS  18
; 1521	;		         AND 28-35.
; 1522	;		
; 1523	;		     5.  S# -- THE SMALL NUMBER.  THE 10 BIT MAGIC NUMBER  INPUT  TO  THE  SCADA
; 1524	;		         MIXER.
; 1525	;		
; 1526	;		
; 1527	;		
; 1528	;		
; 1529	;		5.0  CONTROL MACROS
; 1530	;		
; 1531	;		ALL CONTROL MACROS LOOK LIKE ENGLISH COMMANDS.  SOME EXAMPLES,
; 1532	;		        HOLD LEFT               ;DO NOT CLOCK LEFT HALF OF DP
; 1533	;		        SET APR ENABLES         ;LOAD APR ENABLES FROM DP
; 1534	;		        SET NO DIVIDE           ;SET NO DIVIDE PC FLAG
; 1535	;		
; 1536	;		
; 1537	;		
; 1538	;		6.0  SKIPS
; 1539	;		
; 1540	;		ALL SKIPS CAUSE THE NEXT MICRO INSTRUCTION TO COME  FROM  THE  ODD  WORD  OF  AN
; 1541	;		EVEN/ODD PAIR.  THE MACROS HAVE THE FORMAT OF SKIP COND.  THEY SKIP IF CONDITION
; 1542	;		IS TRUE.  SOME EXAMPLES,
; 1543	;		        SKIP AD.EQ.0            ;SKIP IF ADDER OUTPUT IS ZERO
; 1544	;		        SKIP IRPT               ;SKIP IF INTERRUPT IS PENDING
; 1545	;		
; 1546	;		
; 1547	;		
; 1548	;		7.0  DISPATCH MACROS
; 1549	;		
; 1550	;		DISPATCH MACROS CAUSE THE MACHINE TO GO TO ONE OF MANY PLACES.   IN  MOST  CASES
; 1551	;		THEY HAVE THE WORD "DISP" IN THE NAME OF THE MACRO.  FOR EXAMPLE, MUL DISP, BYTE
; 1552	;		DISP.
; 1553	;		
; 1554	;		
; 1555	;		
; 1556	;		8.0  SUPER MACROS
; 1557	;		
; 1558	;		THERE ARE PLACES WHERE ONE MICRO  INSTRUCTION  IS  USED  IN  MANY  PLACES.   FOR
; 1559	;		EXAMPLE,  MANY  PLACES  DETECT ILLEGAL OPERATIONS AND WANT TO GENERATE A TRAP TO
; 1560	;		THE MONITOR.  WE COULD WRITE
; 1561	;		        J/UUO
; 1562	;		BUT THIS WASTES A MICRO STEP DOING A USELESS JUMP.  INSTEAD WE WRITE,
; 1563	;		        UUO
; 1564	;		THIS MACRO IS THE FIRST STEP  OF  THE  UUO  ROUTINE  AND  JUMPS  TO  THE  SECOND
; 1565	;		INSTRUCTION.   WE  WRITE THE EXPANSION OF THE UUO MACRO AS THE FIRST INSTRUCTION
; 1566	;		OF THE UUO ROUTINE SO THAT THE READER CAN SEE WHAT IT DOES.   SOME  EXAMPLES  OF
; 1567	
; 1568	;		SUPER MACROS ARE:
; 1569	;		        PAGE FAIL TRAP          ;GENERATE A PAGE FAIL TRAP
; 1570	;		        DONE                    ;THIS INSTRUCTION IS NOW COMPLETE
; 1571	;		                                ; USED WITH A SKIP OR DISP WHERE
; 1572	;		                                ; SOME PATHS ARE NOP'S
; 1573	;		        HALT []                 ;JUMP TO HALT LOOP. ARGUMENT IS A
; 1574	;		                                ; CODE
; 1575	
; 1576	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 38
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- DATA PATH CHIP -- GENERAL

; 1577	.TOC	"MACROS -- DATA PATH CHIP -- GENERAL"
; 1578	
; 1579	.NOT.[] 	"AD/.NOT.A,A/@1"
; 1580	[]+[]		"AD/A+B,A/@1,B/@2"
; 1581	[]-[]		"AD/A-B-.25,A/@1,B/@2,ADD .25"
; 1582	[]-#		"AD/A-D-.25,DBUS/DBM,DBM/#,A/@1,ADD .25"
; 1583	[].AND.#	"AD/D.AND.A,DBUS/DBM,DBM/#,A/@1"
; 1584	[].AND.Q	"AD/A.AND.Q,A/@1,DEST/PASS"
; 1585	[].AND.[]	"AD/A.AND.B,A/@2,B/@1,DEST/PASS"
; 1586	[].AND.NOT.[]	"AD/.NOT.A.AND.B,A/@2,B/@1,DEST/PASS"
; 1587	[].OR.[]	"AD/A.OR.B,A/@2,B/@1,DEST/PASS"
; 1588	[].XOR.#	"AD/D.XOR.A,DBUS/DBM,DBM/#,A/@1"
; 1589	[].XOR.[]	"AD/A.XOR.B,A/@2,B/@1,DEST/PASS"
; 1590	[]_#-[]		"AD/D-A-.25,DEST/AD,A/@2,B/@1,DBUS/DBM,DBM/#,ADD .25"
; 1591	[]_#		"AD/D,DBUS/DBM,DBM/#,DEST/AD,B/@1"
; 1592	[]_-1		"AD/-A-.25,A/ONE,DEST/AD,B/@1,ADD .25"
; 1593	[]_-2		"AD/-A-.25,DEST/AD*2,A/ONE,B/@1,ADD .25"
; 1594	[]_-Q		"AD/-Q-.25,DEST/AD,B/@1,ADD .25"
; 1595	[]_-Q*2		"AD/-Q-.25,DEST/AD*2,B/@1,ADD .25"
; 1596	[]_-Q*.5	"AD/-Q-.25,DEST/AD*.5,B/@1,ADD .25"
; 1597	[]_-[]		"AD/-A-.25,A/@2,DEST/AD,B/@1,ADD .25"
; 1598	[]_-[]-.25	"AD/-A-.25,A/@2,DEST/AD,B/@1"
; 1599	[]_-[]*2	"AD/-A-.25,A/@2,DEST/AD*2,B/@1,ADD .25"
; 1600	[]_.NOT.AC	"AD/.NOT.D,DBUS/RAM,RAMADR/AC#,DEST/AD,B/@1"
; 1601	[]_.NOT.AC[]	"AD/.NOT.D,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@2,DEST/AD,B/@1,DT/3T"
; 1602	[]_.NOT.Q	"AD/.NOT.Q,DEST/AD,B/@1"
; 1603	[]_.NOT.[]	"AD/.NOT.A,A/@2,DEST/AD,B/@1"
; 1604	[]_0		"AD/ZERO,DEST/AD,B/@1"
; 1605	[]_0*.5 LONG	"AD/ZERO,DEST/Q_Q*.5,B/@1"
; 1606	[]_0 XWD []	"AD/47,DEST/AD,B/@1,DBM/#,DBUS/DBM,#/@2,RSRC/DA,A/MASK"
; 1607	[]_AC		"AD/D,DBUS/RAM,RAMADR/AC#,DEST/AD,B/@1,AD PARITY"
; 1608	[]_-AC		"AD/-D-.25,DBUS/RAM,RAMADR/AC#,DEST/AD,B/@1,ADD .25"
; 1609	[]_-AC[]	"AD/-D-.25,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@2,DEST/AD,B/@1,ADD .25,DT/3T"
; 1610	[]_AC*.5	"AD/D,DBUS/RAM,RAMADR/AC#,DEST/AD*.5,B/@1,DT/3T"
; 1611	[]_AC*.5 LONG	"AD/D,DBUS/RAM,RAMADR/AC#,DEST/Q_Q*.5,B/@1,DT/3T"
; 1612	[]_AC*2 	"AD/D,DBUS/RAM,RAMADR/AC#,DEST/AD*2,B/@1,DT/3T"
; 1613	[]_AC+1 	"AD/D+A,DBUS/RAM,RAMADR/AC#,A/ONE,DEST/AD,B/@1"
; 1614	[]_AC+1000001	"AD/D+A,DBUS/RAM,RAMADR/AC#,A/XWD1,DEST/AD,B/@1"
; 1615	[]_AC+[]	"AD/D+A,A/@2,DBUS/RAM,RAMADR/AC#,DEST/AD,B/@1,DT/3T"
; 1616	[]_AC-1 	"AD/D-A-.25,DBUS/RAM,RAMADR/AC#,A/ONE,DEST/AD,B/@1,ADD .25"
; 1617	[]_AC-[]	"AD/D-A-.25,A/@2,DBUS/RAM,RAMADR/AC#,DEST/AD,B/@1,ADD .25"
; 1618	[]_AC-[]-.25	"AD/D-A-.25,A/@2,DBUS/RAM,RAMADR/AC#,DEST/AD,B/@1"
; 1619	[]_AC[]-[]	"AD/D-A-.25,A/@3,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@2,DEST/AD,B/@1,ADD .25,DT/3T"
; 1620	[]_AC[]-1	"AD/D-A-.25,A/ONE,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@2,DEST/AD,B/@1,ADD .25,DT/3T"
; 1621	[]_AC[].AND.[]	"AD/D.AND.A,A/@3,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@2,DEST/AD,B/@1,DT/3T"
; 1622	[]_AC.AND.MASK	"AD/D.AND.A,A/MASK,DBUS/RAM,RAMADR/AC#,DEST/AD,B/@1,AD PARITY"
; 1623	[]_AC[]		"AD/D,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@2,DEST/AD,B/@1,AD PARITY,DT/3T"
; 1624	[]_AC[]*2	"AD/D,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@2,DEST/AD*2,B/@1,AD PARITY,DT/3T"
; 1625	[]_AC[]*.5	"AD/D,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@2,DEST/AD*.5,B/@1,AD PARITY,DT/3T"
; 1626	[]_APR		"AD/D,DBUS/DBM,DBM/APR FLAGS,DEST/AD,B/@1,DT/3T"
; 1627	[]_CURRENT AC [] "AD/D,DBUS/RAM,RAMADR/#,ACALU/B,ACN/@2,DEST/AD,B/@1,AD PARITY,DT/3T"
; 1628	[]_EA FROM []	"AD/57,RSRC/0A,A/@2,DEST/AD,B/@1"
; 1629	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 39
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- DATA PATH CHIP -- GENERAL

; 1630	
; 1631	[]_EA		"AD/57,RSRC/0A,A/HR,DEST/AD,B/@1"
; 1632	[]_EXP		"AD/D,DBUS/DBM,DBM/EXP,A/@1,B/@1,DEST/A,SCAD/A+B,SCADA/S#,S#/0,SCADB/FE,HOLD RIGHT,EXP TES
; 1633	[]_FE		"AD/D,DEST/AD*.5,B/@1,DBUS/DBM,DBM/DP,SCAD/A+B,SCADA/S#,S#/0,SCADB/FE,BYTE/BYTE5"
; 1634	[]_FLAGS	"AD/D.AND.A,DBUS/PC FLAGS,A/MASK,DEST/AD,B/@1,RSRC/0Q"
; 1635	[]_P		"AD/D,DEST/A,A/@1,B/@1,DBUS/DBM,DBM/DP,BYTE/BYTE1,SCAD/A+B,SCADA/S#,S#/0,SCADB/FE"
; 1636	[]_PC WITH FLAGS "AD/D,DBUS/PC FLAGS,RSRC/0A,A/PC,DEST/AD,B/@1"
; 1637	[]_Q		"AD/Q,DEST/AD,B/@1"
; 1638	[]_Q*.5		"AD/Q,DEST/AD*.5,B/@1"
; 1639	[]_Q*2		"AD/Q,DEST/AD*2,B/@1"
; 1640	[]_Q*2 LONG	"AD/Q,DEST/Q_Q*2,B/@1"
; 1641	[]_Q+1		"AD/A+Q,A/ONE,DEST/AD,B/@1"
; 1642	[]_RAM		"AD/D,DBUS/RAM,RAMADR/RAM,DEST/AD,B/@1,AD PARITY"
; 1643	[]_TIME		"AD/44,RSRC/DA,A/MASK,DBUS/DBM,DBM/EXP,DEST/AD,B/@1"
; 1644	[]_VMA		"AD/D,DEST/AD,B/@1,DBUS/DBM,DBM/VMA"
; 1645	[]_XR		"AD/D,DBUS/RAM,RAMADR/XR#,DEST/AD,B/@1"
; 1646	[]_[]		"AD/A,A/@2,DEST/AD,B/@1"
; 1647	[]_[] SWAP	"AD/D,DBUS/DBM,DBM/DP SWAP,DEST/A,A/@2,B/@1"
; 1648	[]_[] XWD 0	"AD/45,DEST/AD,B/@1,DBM/#,DBUS/DBM,#/@2,RSRC/D0,A/MASK"
; 1649	[]_[]*.5	"AD/A,A/@2,DEST/AD*.5,B/@1"
; 1650	[]_[]*.5 LONG	"AD/A,A/@2,DEST/Q_Q*.5,B/@1"
; 1651	[]_[]*2 	"AD/A,A/@2,DEST/AD*2,B/@1"
; 1652	[]_[]*2 LONG	"AD/A,A/@2,DEST/Q_Q*2,B/@1"
; 1653	[]_[]*4 	"AD/A+B,A/@2,B/@1,DEST/AD*2"
; 1654	[]_[]+# 	"AD/D+A,DBUS/DBM,DBM/#,A/@2,DEST/AD,B/@1"
; 1655	[]_[]+.25	"AD/0+A,A/@2,DEST/AD,B/@1, ADD .25"
; 1656	[]_[]+0		"AD/0+A,A/@2,DEST/AD,B/@1"
; 1657	[]_[]+1 	"AD/A+B,A/ONE,B/@1,B/@2,DEST/AD"
; 1658	[]_[]+1000001	"AD/D+A,A/@2,DBUS/DBM,DBM/#,#/1,DEST/AD,B/@1"
; 1659	[]_[]+AC	"AD/D+A,A/@2,DBUS/RAM,RAMADR/AC#,DEST/AD,B/@1"
; 1660	[]_[]+AC[]	"AD/D+A,A/@2,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@3,DEST/AD,B/@1,DT/3T"
; 1661	[]_[]+Q		"AD/A+Q,A/@2,DEST/AD,B/@1"
; 1662	[]_[]+RAM	"AD/D+A,A/@2,DBUS/RAM,RAMADR/RAM,DEST/AD,B/@1"
; 1663	[]_[]+XR	"AD/D+A,DBUS/RAM,RAMADR/XR#,A/@2,DEST/AD,B/@1,HOLD LEFT"
; 1664	[]_[]+[]	"AD/A+B,A/@3,B/@1,B/@2,DEST/AD"
; 1665	[]_[]+[]+.25	"AD/A+B,A/@3,B/@1,B/@2,DEST/AD, ADD .25"
; 1666	[]_[]-# 	"AD/A-D-.25,DBUS/DBM,DBM/#,A/@2,DEST/AD,B/@1, ADD .25"
; 1667	[]_[]-1 	"AD/B-A-.25,B/@1,A/ONE,DEST/AD,ADD .25"
; 1668	[]_[]-1000001	"AD/A-D-.25,A/@2,DBUS/DBM,DBM/#,#/1,DEST/AD,B/@1,ADD .25"
; 1669	[]_[]-AC	"AD/A-D-.25,A/@2,DBUS/RAM,RAMADR/AC#,DEST/AD,B/@1,ADD .25"
; 1670	[]_[]-RAM	"AD/A-D-.25,A/@2,DBUS/RAM,RAMADR/RAM,DEST/AD,B/@1,ADD .25"
; 1671	[]_[]-[]	"AD/B-A-.25,B/@1,B/@2,A/@3,DEST/AD,ADD .25"
; 1672	[]_[]-[] REV	"AD/A-B-.25,B/@1,B/@3,A/@2,DEST/AD,ADD .25"
; 1673	[]_[].AND.#	"AD/D.AND.A,DBUS/DBM,DBM/#,DEST/AD,A/@2,B/@1"
; 1674	[]_[].AND.# CLR LH "AD/ZERO,RSRC/DA,DBUS/DBM,DBM/#,DEST/AD,A/@2,B/@1"
; 1675	[]_[].AND.# CLR RH "AD/D.AND.A,RSRC/0Q,DBUS/DBM,DBM/#,DEST/AD,A/@2,B/@1"
; 1676	[]_(AC[].AND.[])*.5 "AD/D.AND.A,DEST/AD*.5,A/@3,B/@1,RAMADR/AC*#,DBUS/RAM,ACALU/AC+N,ACN/@2"
; 1677	[]_(Q+1)*.5	"AD/A+Q,A/ONE,DEST/AD*.5,B/@1"
; 1678	[]_(#-[])*2	"AD/D-A-.25,DEST/AD*2,A/@2,B/@1,DBUS/DBM,DBM/#,ADD .25"
; 1679	[]_(-[])*.5	"AD/-A-.25,A/@2,DEST/AD*.5,B/@1,ADD .25"
; 1680	[]_(-[]-.25)*.5 LONG "AD/-A-.25,A/@2,DEST/Q_Q*.5,B/@1"
; 1681	[]_(-[]-.25)*2 LONG "AD/-A-.25,A/@2,DEST/Q_Q*2,B/@1"
; 1682	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 40
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- DATA PATH CHIP -- GENERAL

; 1683	
; 1684	[]_([].AND.#)*.5 "AD/D.AND.A,DBUS/DBM,DBM/#,DEST/AD*.5,A/@2,B/@1"
; 1685	[]_([].AND.#)*2	"AD/D.AND.A,DBUS/DBM,DBM/#,DEST/AD*2,A/@2,B/@1"
; 1686	[]_([].AND.NOT.#)*.5 "AD/.NOT.D.AND.A,DBUS/DBM,DBM/#,DEST/AD*.5,A/@2,B/@1"
; 1687	[]_([].AND.NOT.#)*2	"AD/.NOT.D.AND.A,DBUS/DBM,DBM/#,DEST/AD*2,A/@2,B/@1"
; 1688	[]_([].AND.[])*.5 "AD/A.AND.B,DEST/AD*.5,A/@3,B/@1,B/@2"
; 1689	[]_([].AND.[])*2 "AD/A.AND.B,DEST/AD*2,A/@3,B/@1,B/@2"
; 1690	[]_([].OR.#)*.5 "AD/D.OR.A,DBUS/DBM,DBM/#,DEST/AD*.5,A/@2,B/@1"
; 1691	[]_([].OR.#)*2	"AD/D.OR.A,DBUS/DBM,DBM/#,DEST/AD*2,A/@2,B/@1"
; 1692	[]_([]+#)*2	"AD/D+A,DBUS/DBM,DBM/#,DEST/AD*2,A/@2,B/@1"
; 1693	[]_([]+1)*2 	"AD/A+B,A/ONE,B/@1,B/@2,DEST/AD*2"
; 1694	[]_([]+[])*.5 LONG	"AD/A+B,A/@3,B/@1,B/@2,DEST/Q_Q*.5"
; 1695	[]_([]+[])*2 LONG	"AD/A+B,A/@3,B/@1,B/@2,DEST/Q_Q*2"
; 1696	[]_([]-[])*.5 LONG	"AD/B-A-.25,A/@3,B/@1,B/@2,DEST/Q_Q*.5, ADD .25"
; 1697	[]_([]-[])*2 LONG	"AD/B-A-.25,A/@3,B/@1,B/@2,DEST/Q_Q*2, ADD .25"
; 1698	[]_([]+[]+.25)*.5 LONG	"AD/A+B,A/@3,B/@1,B/@2,DEST/Q_Q*.5, ADD .25"
; 1699	[]_[].AND.AC	"AD/D.AND.A,DBUS/RAM,RAMADR/AC#,A/@2,DEST/AD,B/@1"
; 1700	[]_[].AND.NOT.# "AD/.NOT.D.AND.A,DBUS/DBM,DBM/#,A/@2,DEST/AD,B/@1"
; 1701	[]_[].AND.NOT.[] "AD/.NOT.A.AND.B,DEST/AD,B/@1,B/@2,A/@3"
; 1702	[]_[].AND.NOT.AC "AD/.NOT.D.AND.A,DBUS/RAM,RAMADR/AC#,A/@2,DEST/AD,B/@1"
; 1703	[]_[].AND.Q	"AD/A.AND.Q,A/@2,DEST/AD,B/@1"
; 1704	[]_[].AND.[]	"AD/A.AND.B,A/@3,B/@1,B/@2,DEST/AD"
; 1705	[]_[].EQV.AC	"AD/D.EQV.A,DBUS/RAM,RAMADR/AC#,A/@2,DEST/AD,B/@1"
; 1706	[]_[].EQV.Q	"AD/A.EQV.Q,A/@2,DEST/AD,B/@1"
; 1707	[]_[].OR.#	"AD/D.OR.A,DBUS/DBM,DBM/#,A/@2,DEST/AD,B/@1"
; 1708	[]_[].OR.AC	"AD/D.OR.A,DBUS/RAM,RAMADR/AC#,A/@2,DEST/AD,B/@1"
; 1709	[]_[].OR.FLAGS	"AD/D.OR.A,DBUS/PC FLAGS,RSRC/0A,A/@1,DEST/AD,B/@1"
; 1710	[]_[].OR.[]	"AD/A.OR.B,A/@3,B/@2,B/@1,DEST/AD"
; 1711	[]_[].XOR.#	"AD/D.XOR.A,DBUS/DBM,DBM/#,DEST/AD,A/@2,B/@1"
; 1712	[]_[].XOR.AC	"AD/D.XOR.A,DBUS/RAM,RAMADR/AC#,A/@1,DEST/AD,B/@2"
; 1713	[]_[].XOR.[]	"AD/A.XOR.B,A/@3,B/@1,B/@2,DEST/AD"
; 1714	
; 1715	[] LEFT_0	"AD/57,RSRC/0B,DEST/AD,B/@1"
; 1716	[] RIGHT_0	"AD/53,RSRC/D0,DEST/AD,B/@1"
; 1717	[] LEFT_-1	"AD/54,RSRC/0B,DEST/AD,A/MASK,B/@1"
; 1718	[] RIGHT_-1	"AD/53,RSRC/0A,DEST/AD,A/MASK,B/@1"
; 1719	
; 1720	
; 1721	[]_+SIGN	"[@1]_[@1].AND.#, #/777, HOLD RIGHT"
; 1722	[]_-SIGN	"[@1]_[@1].OR.#, #/777000, HOLD RIGHT"
; 1723	;THE FOLLOWING 2 MACROS ARE USED IN DOUBLE FLOATING STUFF
; 1724	; THEY ASSUME THAT THE OPERAND HAS BEEN SHIFTED RIGHT 1 PLACE.
; 1725	; THEY SHIFT 1 MORE PLACE
; 1726	[]_+SIGN*.5	"AD/.NOT.D.AND.A,A/@1,B/@1,DEST/AD*.5,DBUS/DBM,DBM/#,#/777400,RSRC/0A"
; 1727	[]_-SIGN*.5	"AD/D.OR.A,A/@1,B/@1,DEST/AD*.5,DBUS/DBM,DBM/#,#/777400,RSRC/0A"
; 1728	
; 1729	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 41
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- DATA PATH CHIP -- Q

; 1730	.TOC	"MACROS -- DATA PATH CHIP -- Q"
; 1731	
; 1732	Q-[]		"AD/Q-A-.25,A/@1,ADD .25"
; 1733	Q.AND.NOT.[]	"AD/.NOT.A.AND.Q,A/@1,DEST/PASS"
; 1734	Q_[]		"AD/A,DEST/Q_AD,A/@1"
; 1735	Q_[]-[] 	"AD/A-B-.25,A/@1,B/@2,DEST/Q_AD,ADD .25"
; 1736	Q_[]+[] 	"AD/A+B,A/@1,B/@2,DEST/Q_AD"
; 1737	Q_[].AND.[]	"AD/A.AND.B,A/@1,B/@2,DEST/Q_AD"
; 1738	Q_.NOT.AC[]	"AD/.NOT.D,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DEST/Q_AD,DT/3T"
; 1739	Q_-[]		"AD/-A-.25,DEST/Q_AD,A/@1, ADD .25"
; 1740	Q_-1		"Q_-[ONE]"
; 1741	Q_-AC[]	"AD/-D-.25,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DEST/Q_AD,ADD .25,DT/3T"
; 1742	Q_-Q		"AD/-Q-.25,ADD .25,DEST/Q_AD"
; 1743	Q_AC		"AD/D,DBUS/RAM,RAMADR/AC#,DEST/Q_AD,CHK PARITY"
; 1744	Q_AC[]		"AD/D,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DEST/Q_AD,CHK PARITY,DT/3T"
; 1745	Q_AC[].AND.MASK	"AD/D.AND.A,A/MASK,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DEST/Q_AD,CHK PARITY,DT/
; 1746	Q_AC[].AND.[]	"AD/D.AND.A,A/@2,DBUS/RAM,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DEST/Q_AD,CHK PARITY,DT/3T"
; 1747	Q_.NOT.Q		"AD/.NOT.Q,DEST/Q_AD"
; 1748	Q_#		"AD/D,DBUS/DBM,DBM/#,DEST/Q_AD"
; 1749	Q_0		"AD/ZERO,DEST/Q_AD"
; 1750	Q_0 XWD []	"AD/47,DEST/Q_AD,DBM/#,DBUS/DBM,#/@1,RSRC/DA,A/MASK"
; 1751	Q_Q+.25		"AD/0+Q,DEST/Q_AD,ADD .25"
; 1752	Q_Q+1		"AD/A+Q,A/ONE,DEST/Q_AD"
; 1753	Q_Q-1		"AD/Q-A-.25,A/ONE,DEST/Q_AD, ADD .25"
; 1754	Q_Q+AC		"AD/D+Q,DBUS/RAM,RAMADR/AC#,DEST/Q_AD"
; 1755	Q_Q*.5		"[MAG]_[MASK]*.5 LONG, SHSTYLE/NORM"
; 1756	Q_Q*2		"[MASK]_[MAG]*2 LONG, SHSTYLE/NORM"
; 1757	Q_Q.OR.#	"AD/D.OR.Q,DBUS/DBM,DBM/#,DEST/Q_AD"
; 1758	Q_Q.AND.#	"AD/D.AND.Q,DBUS/DBM,DBM/#,DEST/Q_AD"
; 1759	Q_Q.AND.[]	"AD/A.AND.Q,A/@1,DEST/Q_AD"
; 1760	Q_Q.AND.NOT.[]	"AD/.NOT.A.AND.Q,A/@1,DEST/Q_AD"
; 1761	Q_Q+[]		"AD/A+Q,A/@1,DEST/Q_AD"
; 1762	Q_[].AND.Q	"AD/A.AND.Q,A/@1,DEST/Q_AD"
; 1763	Q_[].OR.Q	"AD/A.OR.Q,A/@1,DEST/Q_AD"
; 1764	
; 1765	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 42
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- DATA PATH CHIP -- MISC.

; 1766	.TOC	"MACROS -- DATA PATH CHIP -- MISC."
; 1767	
; 1768	CLEAR []0	"AD/D.AND.A,A/@1,DBUS/DBM,DBM/#,#/377777,DEST/AD,B/@1,HOLD RIGHT"
; 1769	CLEAR ARX0	"CLEAR [ARX]0"
; 1770	
; 1771	;CYCLE CHIP REGISTERS THRU AD SO WE CAN TEST BITS
; 1772	READ XR		"AD/D,DBUS/RAM,RAMADR/XR#"
; 1773	READ [] 	"AD/B,B/@1"
; 1774	READ Q		"AD/Q"
; 1775	
; 1776	;TEST BITS IN REGISTERS (SKIP IF ZERO)
; 1777	TR []		"AD/D.AND.A,DBUS/DBM,DBM/#,A/@1,SKIP ADR.EQ.0,DT/3T"
; 1778	TL []		"AD/D.AND.A,DBUS/DBM,DBM/#,A/@1,SKIP ADL.EQ.0,DT/3T"
; 1779	
; 1780	
; 1781	;CAUSE BITS -2 AND -1 TO MATCH BIT 0. 
; 1782	FIX [] SIGN	"AD/D,DEST/A,A/@1,B/@1,DBUS/DP,HOLD RIGHT"
; 1783	
; 1784	;GENERATE A MASK IN Q AND ZERO A 2901 REGISTER
; 1785	GEN MSK []	"AD/ZERO,DEST/Q_Q*2,B/@1,ONES"
; 1786	
; 1787	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 43
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- STORE IN AC

; 1788	.TOC	"MACROS -- STORE IN AC"
; 1789	
; 1790	FM WRITE	"FMWRITE/1"
; 1791	
; 1792	AC[]_[] VIA AD	"AD/B,DEST/PASS,B/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE,CHK PARITY"
; 1793	AC_[] VIA AD	"AD/B,DEST/PASS,B/@1,RAMADR/AC#,DBUS/DP,FM WRITE,CHK PARITY"
; 1794	AC[]_[]		"AD/A,DEST/A,B/@2,A/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP, FM WRITE"
; 1795	AC[]_[] TEST	"AD/D,DBUS/DP,DEST/A,B/@2,A/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP, FM WRITE"
; 1796	AC[]_[]+1	"AD/A+B,DEST/PASS,A/ONE,B/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE"
; 1797	AC[]_[]*2	"AD/A+B,DEST/PASS,A/@2,B/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE"
; 1798	AC_[]		"AD/A,DEST/A,B/@1,A/@1,RAMADR/AC#,DBUS/DP, FM WRITE"
; 1799	AC_[] TEST	"AD/D,DBUS/DP,DEST/A,B/@1,A/@1,RAMADR/AC#,DBUS/DP, FM WRITE"
; 1800	AC_[]+1		"AD/A+B,DEST/PASS,A/ONE,B/@1,RAMADR/AC#, FM WRITE"
; 1801	AC_[]+Q		"AD/A+Q,DEST/PASS,A/@1,B/@1,RAMADR/AC#, FM WRITE"
; 1802	AC[]_[]+Q	"AD/A+Q,DEST/PASS,A/@2,B/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1, FM WRITE"
; 1803	AC[]_[]-[]	"AD/A-B-.25,DEST/PASS,B/@3,A/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE,ADD .25"
; 1804	AC[]_[]+[]	"AD/A+B,DEST/PASS,B/@3,A/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE"
; 1805	AC_[]+[]	"AD/A+B,DEST/PASS,B/@2,A/@1,RAMADR/AC#,DBUS/DP,FM WRITE"
; 1806	AC[]_[].AND.[]	"AD/A.AND.B,DEST/PASS,B/@3,A/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE"
; 1807	AC[]_Q.AND.[]	"AD/A.AND.Q,DEST/PASS,A/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE"
; 1808	AC[]_[].EQV.Q	"AD/A.EQV.Q,DEST/PASS,A/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE"
; 1809	AC[]_-[]	"AD/-B-.25,DEST/PASS,B/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE,ADD .25"
; 1810	AC_-[]		"AD/-A-.25,DEST/PASS,A/@1,RAMADR/AC#,DBUS/DP, ADD .25,FM WRITE"
; 1811	AC_[].OR.[]	"AD/A.OR.B,A/@1,B/@2,RAMADR/AC#,DBUS/DP, FM WRITE"
; 1812	AC[]_.NOT.[]	"AD/.NOT.B,DEST/PASS,B/@2,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE"
; 1813	AC_.NOT.[]	"AD/.NOT.B,DEST/PASS,B/@1,RAMADR/AC#,DBUS/DP,FM WRITE"
; 1814	AC[]_-Q		"AD/-Q-.25,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE,ADD .25"
; 1815	AC_Q		"AD/Q,RAMADR/AC#,DBUS/DP, FM WRITE"
; 1816	AC[]_0		"AD/ZERO,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP, FM WRITE"
; 1817	AC[]_1		"AD/B,DEST/PASS,B/ONE,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP,FM WRITE"
; 1818	AC[]_Q		"AD/Q,RAMADR/AC*#,ACALU/AC+N,ACN/@1,DBUS/DP, FM WRITE"
; 1819	
; 1820	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 44
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- MICROCODE WORK SPACE

; 1821	.TOC	"MACROS -- MICROCODE WORK SPACE"
; 1822	
; 1823	
; 1824	WORK[]_Q	"AD/Q,DEST/PASS,RAMADR/#,WORK/@1,FM WRITE"
; 1825	Q_WORK[]	"AD/D,DEST/Q_AD,RAMADR/#,DBUS/RAM,WORK/@1,DT/3T"
; 1826	WORK[]_0	"AD/ZERO,DEST/PASS,RAMADR/#,WORK/@1,FM WRITE"
; 1827	WORK[]_1	"AD/B,DEST/PASS,RAMADR/#,WORK/@1,B/ONE,FM WRITE"
; 1828	WORK[]_[]	"AD/B,DEST/PASS,RAMADR/#,WORK/@1,B/@2,FM WRITE"
; 1829	WORK[]_[] CLR LH "AD/47,RSRC/AB,DEST/PASS,RAMADR/#,WORK/@1,B/@2,A/MASK,FM WRITE"
; 1830	WORK[]_[]-1	"AD/A-B-.25,A/@2,B/ONE,DEST/PASS,RAMADR/#,WORK/@1,FM WRITE, ADD .25"
; 1831	WORK[]_.NOT.[]	"AD/.NOT.B,DEST/PASS,RAMADR/#,WORK/@1,B/@2,FM WRITE"
; 1832	WORK[]_[].AND.[] "AD/A.AND.B,DEST/PASS,RAMADR/#,WORK/@1,A/@2,B/@3,FM WRITE"
; 1833	[].AND.NOT.WORK[] "AD/.NOT.D.AND.A,A/@1,DBUS/RAM,RAMADR/#,WORK/@2,DT/3T"
; 1834	[].AND.WORK[]	"AD/D.AND.A,A/@1,DBUS/RAM,RAMADR/#,WORK/@2,DT/3T"
; 1835	[]_[]+WORK[]	"AD/D+A,A/@2,DEST/AD,B/@1,DBUS/RAM,RAMADR/#,WORK/@3,DT/3T"
; 1836	[]_[].AND.WORK[] "AD/D.AND.A,A/@2,DEST/AD,B/@1,DBUS/RAM,RAMADR/#,WORK/@3,DT/3T"
; 1837	[]_[].AND.NOT.WORK[] "AD/.NOT.D.AND.A,A/@2,DEST/AD,B/@1,DBUS/RAM,RAMADR/#,WORK/@3,DT/3T"
; 1838	[]_[].OR.WORK[]	"AD/D.OR.A,A/@2,DEST/AD,B/@1,DBUS/RAM,RAMADR/#,WORK/@3,DT/3T"
; 1839	[]_WORK[]	"AD/D,DEST/AD,B/@1,DBUS/RAM,RAMADR/#,WORK/@2,DT/3T"
; 1840	[]_.NOT.WORK[]	"AD/.NOT.D,DEST/AD,B/@1,DBUS/RAM,RAMADR/#,WORK/@2,DT/3T"
; 1841	[]_-WORK[]	"AD/-D-.25,ADD .25,DEST/AD,B/@1,DBUS/RAM,RAMADR/#,WORK/@2,DT/3T"
; 1842	[]_WORK[]+1	"AD/D+A,A/ONE,DEST/AD,B/@1,DBUS/RAM,RAMADR/#,WORK/@2,DT/3T"
; 1843	Q_Q-WORK[]	"AD/Q-D-.25,DEST/Q_AD,DBUS/RAM,RAMADR/#,WORK/@1,ADD .25,DT/3T"
; 1844	[]_[]-WORK[]	"AD/A-D-.25,DEST/AD,A/@2,B/@1,DBUS/RAM,RAMADR/#,WORK/@3,ADD .25,DT/3T"
; 1845	
; 1846	RAM_[]		"AD/B,DEST/PASS,RAMADR/RAM,B/@1,FM WRITE"
; 1847	
; 1848	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 45
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- MEMORY CONTROL

; 1849	.TOC		"MACROS -- MEMORY CONTROL"
; 1850	
; 1851	MEM CYCLE		"MEM/1"
; 1852	
; 1853	;THE FOLLOWING MACROS CONTROL MEMORY ADDRESS
; 1854	LOAD VMA		"MEM CYCLE,LDVMA/1"
; 1855	FORCE EXEC		"FORCE EXEC/1"
; 1856	VMA PHYSICAL		"PHYSICAL/1,FORCE EXEC/1,FORCE USER/0,EXT ADR/1,LOAD VMA"
; 1857	VMA PHYSICAL WRITE	"LOAD VMA,VMA PHYSICAL,WAIT/1,MEM/1,WRITE CYCLE/1,WRITE TEST/0"
; 1858	VMA PHYSICAL READ	"LOAD VMA,VMA PHYSICAL,WAIT/1,MEM/1,READ CYCLE/1,WRITE TEST/0"
; 1859	VMA EXTENDED		"EXT ADR/1"
; 1860	
; 1861	PXCT EA			"PXCT/E1"
; 1862	PXCT DATA		"PXCT/D1"
; 1863	PXCT BLT DEST		"PXCT/D1"
; 1864	PXCT BYTE PTR EA 	"PXCT/E2"
; 1865	PXCT BYTE DATA		"PXCT/D2"
; 1866	PXCT STACK WORD		"PXCT/D2"
; 1867	PXCT BLT SRC		"PXCT/D2"
; 1868	PXCT EXTEND EA		"PXCT/E2"
; 1869	
; 1870	;THE FOLLOWING MACROS GET MEMORY CYCLES STARTED
; 1871	WRITE TEST		"WRITE TEST/1,WAIT/1"
; 1872	START READ		"MEM CYCLE,READ CYCLE/1,WAIT/1"
; 1873	START WRITE		"MEM CYCLE,WRITE TEST,WRITE CYCLE/1,WAIT/1"
; 1874	START NO TEST WRITE	"MEM CYCLE,WRITE CYCLE/1,WAIT/1"
; 1875	FETCH			"START READ,FETCH/1,PXCT/CURRENT,WAIT/1"
; 1876	
; 1877	;THE FOLLOWING MACROS COMPLETE MEMORY CYCLES
; 1878	MEM WAIT		"MEM CYCLE,WAIT/1"
; 1879	MEM READ		"MEM WAIT,DBUS/DBM,DBM/MEM"
; 1880	MEM WRITE		"MEM WAIT,DT/3T"
; 1881	SPEC MEM READ		"SPEC/WAIT,DBUS/DBM,DBM/MEM"
; 1882	SPEC MEM WRITE		"SPEC/WAIT,DT/3T"
; 1883	
; 1884	
; 1885	;THINGS WHICH WRITE MEMORY
; 1886	MEM_[]			"AD/B,DEST/PASS,B/@1,DBUS/DP,RAMADR/VMA,CHK PARITY"
; 1887	MEM_Q			"AD/Q,DBUS/DP,RAMADR/VMA"
; 1888	
; 1889	
; 1890	;THINGS WHICH READ MEMORY
; 1891	[]_IO DATA		"AD/D,DBUS/DBM,RAMADR/VMA,DEST/AD,B/@1"
; 1892	[]_MEM			"AD/D,DBUS/DBM,RAMADR/VMA,DEST/AD,B/@1,CHK PARITY"
; 1893	[]_MEM THEN FETCH	"AD/D,DBUS/DBM,RAMADR/VMA,DEST/A,A/PC,B/@1,CHK PARITY, FETCH, LOAD VMA"
; 1894	[]_MEM*.5		"AD/D,DBUS/DBM,RAMADR/VMA,DEST/AD*.5,B/@1,CHK PARITY"
; 1895	[]_MEM.AND.MASK		"AD/D.AND.A,A/MASK,DBUS/DBM,RAMADR/VMA,DEST/AD,B/@1,CHK PARITY"
; 1896	[]_(MEM.AND.[])*.5	"AD/D.AND.A,A/@2,DBUS/DBM,RAMADR/VMA,DEST/AD*.5,B/@1,CHK PARITY"
; 1897	Q_MEM			"AD/D,DBUS/DBM,RAMADR/VMA,DEST/Q_AD,CHK PARITY"
; 1898	
; 1899	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 46
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- VMA

; 1900	.TOC	"MACROS -- VMA"
; 1901	
; 1902	VMA_[]			"AD/A,A/@1,DEST/PASS,LOAD VMA"
; 1903	VMA_[] WITH FLAGS	"AD/A,A/@1,DEST/PASS,LOAD VMA,WAIT/1, MEM/1, EXT ADR/1, DP FUNC/1, DT/3T"
; 1904	VMA_[].OR.[] WITH FLAGS	"AD/A.OR.B,A/@1,B/@2,DEST/PASS,LOAD VMA,WAIT/1, MEM/1, EXT ADR/1, DP FUNC/
; 1905	VMA_[]+1		"AD/A+B,A/ONE,B/@1,DEST/AD,HOLD LEFT,LOAD VMA"
; 1906	VMA_[]-1		"AD/B-A-.25,A/ONE,B/@1,ADD .25,HOLD LEFT,LOAD VMA"
; 1907	VMA_[]+XR		"AD/D+A,DBUS/RAM,RAMADR/XR#,A/@1,LOAD VMA"
; 1908	VMA_[]+[]		"AD/A+B,DEST/PASS,A/@1,B/@2,LOAD VMA"
; 1909	
; 1910	NEXT [] PHYSICAL WRITE "AD/A+B,A/ONE,B/@1,DEST/AD,HOLD LEFT,LOAD VMA, VMA PHYSICAL, START WRITE"
; 1911	
; 1912	;MACROS TO LOAD A 2901 REGISTER WITH VMA FLAG BITS
; 1913	[]_VMA FLAGS	"AD/45,DEST/AD,B/@1,DBM/#,DBUS/DBM,RSRC/D0,A/MASK"
; 1914	[]_VMA IO READ	"[@1]_VMA FLAGS,READ CYCLE/1,IO CYCLE/1,WRITE TEST/0, PHYSICAL/1, FORCE EXEC/1, FOR
; 1915	[]_VMA IO WRITE	"[@1]_VMA FLAGS,WRITE CYCLE/1,IO CYCLE/1,WRITE TEST/0, PHYSICAL/1, FORCE EXEC/1, F
; 1916	
; 1917	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 47
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- TIME CONTROL

; 1918	.TOC	"MACROS -- TIME CONTROL"
; 1919	
; 1920	AC		"RAMADR/AC#"
; 1921	AC[]		"RAMADR/AC*#,ACALU/AC+N,ACN/@1"
; 1922	XR		"RAMADR/XR#"
; 1923	VMA		"RAMADR/VMA"
; 1924	WORK[]		"RAMADR/#, WORK/@1"
; 1925	
; 1926	2T		"T/2T"
; 1927	3T		"T/3T"
; 1928	4T		"T/4T"
; 1929	5T		"T/5T"
; 1930	
; 1931	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 48
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- SCAD, SC, FE LOGIC

; 1932	.TOC	"MACROS -- SCAD, SC, FE LOGIC"
; 1933	
; 1934	LOAD SC		"LOADSC/1"
; 1935	LOAD FE		"LOADFE/1"
; 1936	STEP SC		"SCAD/A-1,SCADA/SC,LOAD SC,SKIP/SC"
; 1937	SHIFT		"SCAD/A+B,SCADA/S#,SCADB/FE,S#/1, LOAD FE, MULTI SHIFT/1"
; 1938	
; 1939	SC_SC-1		"SCAD/A-1,SCADA/SC,LOAD SC"
; 1940	SC_SHIFT	"SCAD/A+B,SCADA/S#,S#/0,SCADB/SHIFT,LOAD SC"
; 1941	SC_SHIFT-1	"SCAD/A+B,SCADA/S#,S#/1777,SCADB/SHIFT,LOAD SC"
; 1942	SC_SHIFT-2	"SCAD/A+B,SCADA/S#,S#/1776,SCADB/SHIFT,LOAD SC"
; 1943	SC_-SHIFT	"SCAD/A-B,SCADA/S#,S#/0000,SCADB/SHIFT,LOAD SC"
; 1944	SC_-SHIFT-1	"SCAD/A-B,SCADA/S#,SCADB/SHIFT,S#/1777,LOAD SC"
; 1945	SC_-SHIFT-2	"SCAD/A-B,SCADA/S#,SCADB/SHIFT,S#/1776,LOAD SC"
; 1946	SC_SC-EXP	"SCAD/A-B,SCADA/SC,SCADB/EXP,LOAD SC"
; 1947	SC_SC-EXP-1	"SCAD/A-B-1,SCADA/SC,SCADB/EXP,LOAD SC"
; 1948	SC_SC-FE-1	"SCAD/A-B-1,SCADA/SC,SCADB/FE,LOAD SC"
; 1949	SC_SC-FE	"SCAD/A-B,SCADA/SC,SCADB/FE,LOAD SC"
; 1950	SC_EXP		"SCAD/A+B,SCADA/S#,S#/0,SCADB/EXP,LOAD SC"
; 1951	SC_S#-FE	"SCAD/A-B,SCADA/S#,SCADB/FE,LOAD SC"
; 1952	SC_FE+S#	"SCAD/A+B,SCADA/S#,SCADB/FE,LOAD SC"
; 1953	SC_FE		"SCAD/A.OR.B,SCADA/S#,S#/0,SCADB/FE,LOAD SC"
; 1954	SC_S#		"SCAD/A,SCADA/S#,LOAD SC"
; 1955	
; 1956	
; 1957	SC_36.		"SC_S#,S#/36."
; 1958	SC_35.		"SC_S#,S#/35."
; 1959	SC_34.		"SC_S#,S#/34."
; 1960	SC_28.		"SC_S#,S#/28."
; 1961	SC_27.		"SC_S#,S#/27."
; 1962	SC_26.		"SC_S#,S#/26."
; 1963	SC_24.		"SC_S#,S#/24."
; 1964	SC_22.		"SC_S#,S#/22."
; 1965	SC_20.		"SC_S#,S#/20."
; 1966	SC_19.		"SC_S#,S#/19."
; 1967	SC_14.		"SC_S#,S#/14."
; 1968	SC_11.		"SC_S#,S#/11."
; 1969	SC_9.		"SC_S#,S#/9."
; 1970	SC_8.		"SC_S#,S#/8."
; 1971	SC_7		"SC_S#,S#/7"
; 1972	SC_6		"SC_S#,S#/6"
; 1973	SC_5		"SC_S#,S#/5"
; 1974	SC_4		"SC_S#,S#/4"
; 1975	SC_3		"SC_S#,S#/3"
; 1976	SC_2		"SC_S#,S#/2"
; 1977	SC_1		"SC_S#,S#/1"
; 1978	SC_0		"SC_S#,S#/0."
; 1979	SC_-1		"SC_S#,S#/1777"
; 1980	SC_-2		"SC_S#,S#/1776"
; 1981	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 49
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- SCAD, SC, FE LOGIC

; 1982	
; 1983	FE_-FE		"SCAD/A-B,SCADA/S#,S#/0,SCADB/FE,LOAD FE"
; 1984	FE_-FE-1	"SCAD/A-B,SCADA/S#,S#/1777,SCADB/FE,LOAD FE"
; 1985	FE_FE-19	"SCAD/A+B,SCADB/FE,SCADA/S#,S#/1550,LOAD FE"
; 1986	FE_-FE+S#	"SCAD/A-B,SCADA/S#,SCADB/FE,LOAD FE"
; 1987	FE_FE+SC	"SCAD/A+B,SCADA/SC,SCADB/FE, LOAD FE"
; 1988	FE_FE.AND.S#	"SCAD/A.AND.B,SCADA/S#,SCADB/FE, LOAD FE"
; 1989	FE_P		"SCAD/A,SCADA/BYTE1, LOAD FE"
; 1990	FE_S		"SCAD/A+B, SCADA/S#, S#/0 ,SCADB/SIZE, LOAD FE"
; 1991	FE_S+2		"SCAD/A+B, SCADA/S#, S#/20, SCADB/SIZE, LOAD FE"
; 1992	FE_-S-20	"SCAD/A-B,SCADA/S#,S#/1760,SCADB/SIZE, LOAD FE"
; 1993	FE_-S-10	"SCAD/A-B,SCADA/S#,S#/1770,SCADB/SIZE, LOAD FE"
; 1994	FE_S#		"SCAD/A,SCADA/S#,LOAD FE"
; 1995	FE_S#-FE	"SCAD/A-B,SCADA/S#,SCADB/FE,LOAD FE"
; 1996	FE_-2		"FE_S#,S#/1776"
; 1997	FE_-12.		"FE_S#,S#/1764"
; 1998	FE_0		"FE_S#,S#/0"
; 1999	FE_-1		"FE_S#,S#/1777"
; 2000	FE_FE+1		"SCAD/A+B,SCADA/S#,SCADB/FE,S#/1,LOAD FE"
; 2001	FE_FE+2		"SCAD/A+B,SCADA/S#,SCADB/FE,S#/2,LOAD FE"
; 2002	FE_FE+10		"SCAD/A+B,SCADA/S#,SCADB/FE,S#/10,LOAD FE"
; 2003	FE_FE-1		"SCAD/A+B,SCADA/S#,SCADB/FE,S#/1777,LOAD FE"
; 2004	FE_FE+4		"SCAD/A+B,SCADA/S#,SCADB/FE,S#/4,LOAD FE"
; 2005	FE_EXP		"SCAD/A+B,SCADA/S#,S#/0,SCADB/EXP,LOAD FE"
; 2006	FE_SC+EXP	"SCAD/A+B,SCADA/SC,SCADB/EXP,LOAD FE"
; 2007	FE_SC-EXP	"SCAD/A-B,SCADA/SC,SCADB/EXP,LOAD FE"
; 2008	FE_FE+P		"SCAD/A+B,SCADA/BYTE1,SCADB/FE, LOAD FE"
; 2009	FE_FE-200	"SCAD/A+B,SCADA/S#,S#/1600,SCADB/FE,LOAD FE"
; 2010	FE_-FE+200	"SCAD/A-B,SCADA/S#,S#/200,SCADB/FE,LOAD FE"
; 2011	FE_FE+S#	"SCAD/A+B,SCADA/S#,SCADB/FE,LOAD FE"
; 2012	
; 2013	
; 2014	GEN 17-FE	"SCAD/A-B,SCADA/S#,S#/210,SCADB/FE"
; 2015	
; 2016	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 50
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- DATA PATH FIELD CONTROL

; 2017	.TOC	"MACROS -- DATA PATH FIELD CONTROL"
; 2018	
; 2019	HOLD LEFT	"CLKL/0,GENL/0"
; 2020	ADL PARITY	"GENL/1"
; 2021	CHK PARITY L	"CHKL/1"
; 2022	
; 2023	HOLD RIGHT	"CLKR/0,GENR/0"
; 2024	ADR PARITY	"GENR/1"
; 2025	CHK PARITY R	"CHKR/1"
; 2026	
; 2027	AD PARITY	"AD PARITY OK/1"
; 2028	CHK PARITY	"CHKL/1,CHKR/1"
; 2029	BAD PARITY	"CHKL/0,CHKR/0"
; 2030	
; 2031	INH CRY18	"SPEC/INHCRY18"
; 2032	
; 2033	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 51
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- SHIFT PATH CONTROL

; 2034	.TOC	"MACROS -- SHIFT PATH CONTROL"
; 2035	
; 2036	ASH		"SHSTYLE/NORM"	;ASH SHIFT
; 2037	LSH		"SHSTYLE/NORM"	;LSH SHIFT (SAME HARDWARE AS ASH BUT
; 2038					; BITS -2 AND -1 ARE PRESET TO ZERO)
; 2039	ROT		"SHSTYLE/ROT"
; 2040	LSHC		"SHSTYLE/LSHC"
; 2041	ASHC		"SHSTYLE/ASHC"
; 2042	ROTC		"SHSTYLE/ROTC"
; 2043	ONES		"SHSTYLE/ONES"	;SHIFT IN 1 BITS
; 2044	DIV		"SHSTYLE/DIV"	;SPECIAL PATH FOR DIVIDE (LIKE ROTC BUT
; 2045					; COMPLEMENT BIT AS IT GOES AROUND)
; 2046	
; 2047	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 52
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- SPECIAL FUNCTIONS

; 2048	.TOC	"MACROS -- SPECIAL FUNCTIONS"
; 2049	
; 2050	LOAD IR		"SPEC/LOADIR"	;LOAD INSTRUCTION REG FROM
; 2051					; DBUS0-DBUS8, LOAD AC# FROM
; 2052					; DBUS9-DBUS12
; 2053					; UPDATE LAST-INST-PUBLIC PC FLAG
; 2054	LOAD INST	"SPEC/LDINST"
; 2055	LOAD INST EA	"SPEC/LOADXR,PXCT/CURRENT"
; 2056	LOAD BYTE EA	"SPEC/LOADXR,PXCT/E2"
; 2057	LOAD IND EA	"SPEC/LOADXR,PXCT/E1"
; 2058	LOAD SRC EA	"SPEC/LOADXR,PXCT/BIS-SRC-EA"
; 2059	LOAD DST EA	"SPEC/LOADXR,PXCT/BIS-DST-EA"
; 2060	ADD .25		"CRY38/1"	;GENERATE CARRY IN TO BIT 37
; 2061	CALL []		"CALL/1,J/@1"	;CALL A SUBROUTINE
; 2062	LOAD PXCT	"SPEC/LDPXCT"	;LOAD PXCT FLAGS IF EXEC MODE
; 2063	TURN OFF PXCT	"SPEC/PXCT OFF"
; 2064	LOAD PAGE TABLE	"SPEC/LDPAGE"
; 2065	LOAD AC BLOCKS	"SPEC/LDACBLK"
; 2066	SWEEP		"SPEC/SWEEP,PHYSICAL/1"
; 2067	CLRCSH		"SPEC/CLRCSH,PHYSICAL/1"
; 2068	LOAD PI		"SPEC/LDPI"
; 2069	SET HALT	"SPEC/#,#/74"
; 2070	CLEAR CONTINUE	"SPEC/#,#/40"
; 2071	CLEAR EXECUTE	"SPEC/#,#/20"
; 2072	CLEAR RUN	"SPEC/#,#/10"
; 2073	UNHALT		"SPEC/#,#/62"
; 2074	SET APR ENABLES	"SPEC/APR EN"
; 2075	ABORT MEM CYCLE	"DBUS/DBM,RAMADR/VMA,DBM/MEM,AD/ZERO,SPEC/MEMCLR,LOAD VMA"
; 2076	CLR IO BUSY	"SPEC/CLR IO BUSY"
; 2077	CLR IO LATCH	"SPEC/CLR IO LATCH"
; 2078	
; 2079	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 53
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- PC FLAGS

; 2080	.TOC	"MACROS -- PC FLAGS"
; 2081	
; 2082	CHANGE FLAGS	"SPEC/FLAGS"
; 2083	
; 2084	SET AROV	"CHANGE FLAGS, HOLD USER/1, SETOV/1, TRAP1/1"
; 2085	SET FOV		"CHANGE FLAGS, HOLD USER/1, SETFOV/1, TRAP1/1"
; 2086	SET NO DIVIDE	"CHANGE FLAGS, HOLD USER/1, SETOV/1, SETNDV/1, TRAP1/1"
; 2087	SET FL NO DIVIDE "SET NO DIVIDE, SETFOV/1"
; 2088	
; 2089	ASH AROV	"SPEC/ASHOV"
; 2090	SET FPD		"CHANGE FLAGS, HOLD USER/1, SETFPD/1"
; 2091	CLR FPD		"CHANGE FLAGS, HOLD USER/1, CLRFPD/1"
; 2092	
; 2093	SET PDL OV	"CHANGE FLAGS, HOLD USER/1, TRAP2/1"
; 2094	SET TRAP1	"CHANGE FLAGS, HOLD USER/1, TRAP1/1"
; 2095	
; 2096	LOAD PCU	"CHANGE FLAGS, LD PCU/1"
; 2097	UPDATE USER	"CHANGE FLAGS, HOLD USER/1"
; 2098	LEAVE USER	"CHANGE FLAGS, HOLD USER/0"
; 2099	
; 2100	JFCL FLAGS	"CHANGE FLAGS, HOLD USER/1, JFCLFLG/1"
; 2101	
; 2102	LOAD FLAGS	"CHANGE FLAGS, LD FLAGS/1"
; 2103	EXP TEST	"SPEC/EXPTST"
; 2104	AD FLAGS	"CHANGE FLAGS, ADFLGS/1, HOLD USER/1"
; 2105	
; 2106	NO DIVIDE	"SET NO DIVIDE, J/NIDISP"
; 2107	FL NO DIVIDE	"SET FL NO DIVIDE, J/NIDISP"
; 2108	
; 2109	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 54
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- PAGE FAIL FLAGS

; 2110	.TOC	"MACROS -- PAGE FAIL FLAGS"
; 2111	
; 2112	STATE_[]	"[FLG]_#,STATE/@1,HOLD LEFT"
; 2113	END STATE	"[FLG]_0, HOLD LEFT"
; 2114	
; 2115	END BLT		"END STATE"
; 2116	END MAP		"END STATE"
; 2117	
; 2118	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 55
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- SINGLE SKIPS

; 2119	.TOC	"MACROS -- SINGLE SKIPS"
; 2120					;SKIPS IF:
; 2121	SKIP IF AC0	"SKIP/AC0"	;THE AC NUMBER IS ZERO
; 2122	SKIP DP0	"SKIP/DP0"	;DP BIT 0=1
; 2123	SKIP DP18	"SKIP/DP18"	;DP BIT 18=1
; 2124	SKIP AD.EQ.0	"SKIP/ADEQ0,DT/3T" ;ADDER OUTPUT IS ZERO
; 2125	SKIP AD.LE.0	"SKIP/LE,DT/3T" ;ADDER OUTPUT IS LESS THAN OR EQUAL
; 2126					; TO ZERO.
; 2127	SKIP ADL.LE.0	"SKIP/LLE,DT/3T" ;ADDER LEFT IS LESS THAN OR EQUAL
; 2128					; TO ZERO.
; 2129	SKIP FPD	"SKIP/FPD"	;FIRST-PART-DONE PC FLAG IS SET
; 2130	SKIP KERNEL	"SKIP/KERNEL"	;USER=0
; 2131	SKIP IO LEGAL	"SKIP/IOLGL"	;USER=0 OR USER IOT=1
; 2132	SKIP CRY0	"SKIP/CRY0"	;ADDER BIT CRY0=1 (NOT PC FLAG BIT)
; 2133	SKIP CRY1	"SKIP/CRY1"	;ADDER BIT CRY1=1 (NOT PC FLAG BIT)
; 2134	SKIP CRY2	"SKIP/CRY2,DT/3T"	;ADDER BIT CRY2=1
; 2135	SKIP JFCL	"SKIP/JFCL"	;IF JFCL SHOULD JUMP
; 2136	SKIP ADL.EQ.0	"SKIP/ADLEQ0"	;ALU BITS -2 TO 17 = 0
; 2137	SKIP ADR.EQ.0	"SKIP/ADREQ0"	;ALU BITS 18-35 = 0
; 2138	SKIP IRPT	"SKIP/INT"	;INTERRUPT IS PENDING
; 2139	SKIP AC REF	"SKIP/ACREF"	;VMA IS 0-17
; 2140	SKIP EXECUTE	"SKIP/EXECUTE"	;CONSOLE EXECUTE
; 2141	TXXX TEST	"SKIP/TXXX"	;TEST INSTRUCTION SHOULD SKIP
; 2142	
; 2143	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 56
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	MACROS -- SPECIAL DISPATCH MACROS

; 2144	.TOC		"MACROS -- SPECIAL DISPATCH MACROS"
; 2145	
; 2146	NEXT INST	"DISP/NICOND,SPEC/NICOND,J/NICOND"
; 2147	NEXT INST FETCH	"DISP/NICOND,SPEC/NICOND,J/NICOND-FETCH"
; 2148	EA MODE DISP	"DISP/EAMODE,RAMADR/XR#"
; 2149	AREAD		"DISP/AREAD,WAIT/1,AREAD/1,MEM/1,J/0"
; 2150	B DISP		"DISP/BDISP"
; 2151	BWRITE DISP	"B DISP,MEM/1,BWRITE/1,WRITE CYCLE/1,J/BWRITE"
; 2152	INST DISP	"DISP/DROM,J/0"
; 2153	EXIT		"BWRITE DISP,SPEC/0, WRITE TEST/1""
; 2154	AD FLAGS EXIT	"BWRITE DISP, WRITE TEST/0, AD FLAGS"
; 2155	FL-EXIT		"WRITE CYCLE/1,WRITE TEST/1,MEM/1,BWRITE/1,B DISP,J/FL-BWRITE"
; 2156	TEST DISP	"B DISP,J/TEST-TABLE"
; 2157	SKIP-COMP DISP	"B DISP,J/SKIP-COMP-TABLE"
; 2158	JUMP DISP	"B DISP,J/JUMP-TABLE"
; 2159	DONE		"VMA_[PC],LOAD VMA, FETCH, NEXT INST FETCH"
; 2160	JUMPA		"[PC]_[AR],HOLD LEFT,LOAD VMA,FETCH,NEXT INST FETCH"
; 2161	UUO		"[HR]_[HR].AND.#,#/777740,HOLD RIGHT,J/UUOGO"
; 2162	LUUO		"[AR]_0 XWD [40], J/LUUO1"
; 2163	PAGE FAIL TRAP	"TL [FLG], FLG.PI/1, J/PFT"
; 2164	TAKE INTERRUPT	"[FLG]_[FLG].OR.#,FLG.PI/1,HOLD RIGHT,J/PI"
; 2165	INTERRUPT TRAP	"WORK[SV.AR]_[AR], J/ITRAP"
; 2166	MUL DISP	"DISP/MUL"
; 2167	DIV DISP	"DISP/DIV"
; 2168	BYTE DISP	"DISP/BYTE, DT/3T"
; 2169	SCAD DISP	"DISP/SCAD0"	;SKIP (2'S WEIGHT) IS SCAD IS MINUS
; 2170	RETURN []	"DISP/RETURN,J/@1"
; 2171	PI DISP		"DISP/PI"
; 2172	NORM DISP	"DISP/NORM,DT/3T"
; 2173	DISMISS		"TR [PI], #/077400, CALL [JEN1],DT/3T"
; 2174	CALL LOAD PI	"[T0]_[PI] SWAP, CALL [LDPI2]"
; 2175	HALT []		"AD/47,DEST/AD,B/T1,DBM/#,DBUS/DBM,HALT/@1,RSRC/DA,A/MASK, J/HALTED"
; 2176	CLEANUP DISP	"READ [FLG], DBUS/DP, DISP/DP, 3T, J/CLEANUP"
; 2177	
; 2178	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 57
; DSK: KSHACK; KS10 35	15:19:15 24-NOV-84	DISPATCH ROM MACROS

; 2179	.TOC		"DISPATCH ROM MACROS"
; 2180		.DCODE
; 2181	
; 2182	;"A FIELD" MACROS SAY HOW TO FETCH ARGUMENTS
; 2183	
; 2184	I	"I/1"
; 2185	I-PF	"I/1,VMA/0,READ/1"
; 2186	R	"A/READ,READ/1"
; 2187	R-PF	"A/RD-PF,READ/1"
; 2188	W	"A/WRITE,TEST/1"
; 2189	RW	"A/READ,TEST/1,READ/1"
; 2190	IW	"I/1,TEST/1"	;IMMED WHICH STORE IN E. (SETZM, ETC.)
; 2191	IR	"I/1,READ/1"	;START READ A GO TO EXECUTE CODE
; 2192	DBL R	"A/DREAD,READ/1"	;AR!ARX _ E!E+1
; 2193	DBL AC	"A/DBLAC"
; 2194	SH	"A/SHIFT,VMA/0,READ/1"
; 2195	SHC	"A/DSHIFT,VMA/0,READ/1"
; 2196	FL-R	"A/FP,READ/1"	;FLOATING POINT READ
; 2197	FL-RW	"A/FP,READ/1,TEST/1"
; 2198	FL-I	"A/FPI,READ/0"	;FLOATING POINT IMMEDIATE
; 2199	DBL FL-R "A/DFP,READ/1"
; 2200	IOT	"A/IOT"		;CHECK FOR IO LEGAL
; 2201	
; 2202	;"B FIELD" MACROS SAY HOW TO STORE RESULTS
; 2203	
; 2204	AC	"B/AC"
; 2205	M	"B/MEM,TEST/1,COND FUNC/1"
; 2206	B	"B/BOTH,TEST/1,COND FUNC/1"
; 2207	S	"B/SELF,TEST/1,COND FUNC/1"
; 2208	DAC	"B/DBLAC"
; 2209	DBL B	"B/DBLB,TEST/1,COND FUNC/1"
; 2210	FL-AC	"FL-B/AC"			;FLOATING POINT
; 2211	FL-MEM	"FL-B/MEM,TEST/1,COND FUNC/1"	;FLOATING POINT TO MEMORY
; 2212	FL-BOTH	"FL-B/BOTH,TEST/1,COND FUNC/1"	;FLOATING POINT TO BOTH
; 2213	ROUND	"ROUND/1"			;FLOATING POINT ROUNDED
; 2214	
; 2215	
; 2216	;CONTROL BITS
; 2217	W TEST	"TEST/1"
; 2218	AC DISP	"ACDISP/1"
; 2219		.UCODE
; 2220	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 58
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	DISPATCH ROM MACROS

; 2221	;;;-*-Fundamental-*-
; 2222	
							; 2223		.BIN
							; 2224	.TOC	"POWER UP SEQUENCE"
							; 2225	
							; 2226		.UCODE
							; 2227	
							; 2228	;HERE IS WHERE WE FIRE THE MACHINE UP DURING POWER ON
							; 2229	
							; 2230	
U 0000, 0002,3771,0012,4374,4007,0700,0000,0037,7777	; 2231	0:	[MASK]_#, #/377777	;BUILD A MASK WITH
U 0002, 0013,3445,1212,4174,4007,0700,0000,0000,0000	; 2232		[MASK]_[MASK]*2 	; A ONE IN 36-BITS AND 0
U 0013, 0030,3551,1212,4374,4007,0700,0000,0000,0001	; 2233		[MASK]_[MASK].OR.#,#/1	; IN BITS -2,-1,36,37
U 0030, 0053,3447,1200,4174,4007,0700,0000,0000,0000	; 2234		[MAG]_[MASK]*.5 	;MAKE CONSTANT
U 0053, 0060,3771,0015,4374,4007,0700,0000,0000,0001	; 2235		[XWD1]_#, #/1		;CONSTANT WITH 1 IN EACH
							; 2236					; HALF WORD
							; 2237		[ONE]_0 XWD [1],	;THE CONSTANT 1
U 0060, 0003,4751,1207,4374,4007,0700,0010,0000,0001	; 2238		CALL/1			;RESET STACK (CAN NEVER RETURN
							; 2239					; TO WHERE MR LEFT US)
U 0003, 0070,4751,1203,4374,4007,0700,0000,0037,6000	; 2240	3:	[AR]_0 XWD [376000]	;ADDRESS OF HALT STATUS
							; 2241					; BLOCK
U 0070, 0136,3333,0003,7174,4007,0700,0400,0000,0227	; 2242		WORK[HSBADR]_[AR]	;SAVE FOR HALT LOOP
U 0136, 0201,4221,0011,4364,4277,0700,0200,0000,0010	; 2243		[UBR]_0, ABORT MEM CYCLE ;CLEAR THE UBR AND RESET
							; 2244					; MEMORY CONTROL LOGIC
U 0201, 0233,4221,0010,4174,4477,0700,0000,0000,0000	; 2245		[EBR]_0, LOAD AC BLOCKS ;CLEAR THE EBR AND FORCE
							; 2246					; PREVIOUS AND CURRENT AC
							; 2247					; BLOCKS TO ZERO
U 0233, 0236,4221,0013,4174,4257,0700,0000,0000,0000	; 2248		[FLG]_0, SET APR ENABLES ;CLEAR THE STATUS FLAGS AND
							; 2249					; DISABLE ALL APR CONDITIONS
U 0236, 0244,3333,0013,7174,4007,0700,0400,0000,0230	; 2250		WORK[APR]_[FLG] 	;ZERO REMEMBERED ENABLES
							; 2251	
U 0244, 0254,3333,0013,7174,4007,0700,0400,0000,0300	; 2252		WORK[TIME0]_[FLG]	;CLEAR TIME BASE
U 0254, 0261,3333,0013,7174,4007,0700,0400,0000,0301	; 2253		WORK[TIME1]_[FLG]	; ..
							; 2254	.IF/FULL
U 0261, 0271,4223,0000,1174,4007,0700,0400,0000,1443	; 2255		AC[BIN0]_0		;COMPUTE A TABLE OF POWERS OF
U 0271, 0276,3333,0007,1174,4007,0700,0400,0000,1444	; 2256		AC[BIN1]_1		; TEN
U 0276, 0305,4221,0003,4174,4007,0700,2000,0071,0023	; 2257		[AR]_0, SC_19.		;WE WANT TO GET 22 NUMBERS
U 0305, 0377,3333,0007,7174,4007,0700,0400,0000,0344	; 2258		WORK[DECLO]_1		;STARTING WITH 1
U 0377, 0401,4223,0000,7174,4007,0700,0400,0000,0373	; 2259		WORK[DECHI]_0		; ..
U 0401, 0406,3771,0002,4374,4007,0700,0000,0000,0344	; 2260		[HR]_#, WORK/DECLO	;ADDRESS OF LOW WORD
U 0406, 0434,3771,0006,4374,4007,0700,0000,0000,0373	; 2261		[BRX]_#, WORK/DECHI	;ADDRESS OF HIGH WORD
U 0434, 0010,0111,0706,4174,4007,0700,0200,0000,0010	; 2262	TENLP:	[BRX]_[BRX]+1, LOAD VMA ;ADDRESS THE HIGH WORD
							; 2263	=0*	[ARX]_AC[BIN1], 	;LOW WORD TO ARX
U 0010, 1250,3771,0004,1276,6007,0701,0010,0000,1444	; 2264		CALL [DBSLOW]		;MULTIPLY BY TEN
U 0012, 0506,3333,0005,6174,4007,0700,0400,0000,0000	; 2265		RAM_[BR]		;SAVE HIGH WORD
U 0506, 0511,0111,0702,4174,4007,0700,0200,0000,0010	; 2266		[HR]_[HR]+1, LOAD VMA	;WHERE TO STORE LOW WORD
U 0511, 0006,3333,0004,6174,4007,0630,2400,0060,0000	; 2267		RAM_[ARX], STEP SC	;STORE LOW WORD AND SEE IF
							; 2268					; WE ARE DONE
U 0006, 0434,4443,0000,4174,4007,0700,0000,0000,0000	; 2269	=0	J/TENLP 		;NOT YET--KEEP GOING
U 0007, 0020,6553,0500,4374,4007,0321,0000,0033,0656	; 2270		[BR].XOR.#, 3T, SKIP ADL.EQ.0, #/330656
							; 2271					;DID WE GET THE RIGHT ANSWER
							; 2272					; IN THE TOP 18 BITS?
U 0020, 2364,4751,1217,4374,4007,0700,0000,0000,1005	; 2273	=0**0	HALT [MULERR]		;NO--CPU IS BROKEN
							; 2274	.ENDIF/FULL
							; 2275	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 59
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	POWER UP SEQUENCE

							; 2276	
U 0021, 3410,4221,0014,4174,4007,0700,0010,0000,0000	; 2277	=0**1	[PI]_0, CALL [LOADPI]	;CLEAR PI STATE
							; 2278	=1**1				;CLEAR REGISTERS SO NO
							; 2279					;PARITY ERROR HAPPEN
							; 2280	.IFNOT/FULL
							; 2281		[ARX]_0 		;WRITTEN WHILE COMPUTING POWERS
							; 2282		[BR]_0			;OF 10
							; 2283		[BRX]_0
							; 2284	.ENDIF/FULL
U 0031, 0527,4751,1217,4374,4007,0700,0000,0000,0120	; 2285		[T1]_0 XWD [120]	;RH OF 120 CONTAINS START ADDRESS
							; 2286					; FOR SIMULATOR. FOR THE REAL
							; 2287					; MACHINE IT IS JUST DATA WITH
							; 2288					; GOOD PARITY.
							; 2289	=
							; 2290	;THE CODE UNDER .IF/SIM MUST USE THE SAME ADDRESS AS THE CODE
							; 2291	; UNDER .IFNOT/SIM SO THAT MICROCODE ADDRESSES DO NOT CHANGE BETWEEN
							; 2292	; VERSIONS
							; 2293	.IF/SIM
							; 2294		VMA_[T1], START READ	;READ THE WORD
							; 2295		MEM READ, [PC]_MEM, HOLD LEFT, J/START
							; 2296					;GO FIRE UP SIMULATOR AT THE
							; 2297					; PROGRAMS STARTING ADDRESS
							; 2298	.IFNOT/SIM
							; 2299		[PC]_0, 		;CLEAR LH OF PC
							; 2300		LEAVE USER,		;ENTER EXEC MODE
U 0527, 0546,4221,0001,4174,4467,0700,0000,0000,0004	; 2301		LOAD FLAGS		;CLEAR TRAP FLAGS
							; 2302		[T1]_#, HALT/POWER,	;LOAD T1 WITH POWER UP CODE
U 0546, 2376,3771,0017,4374,4007,0700,0000,0000,0000	; 2303		J/PWRON			;ENTER HALT LOOP. DO NOT STORE
							; 2304					; HALT STATUS BLOCK
							; 2305	.ENDIF/SIM
							; 2306	
							; 2307	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 60
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	THE INSTRUCTION LOOP -- START NEXT INSTRUCTION

							; 2308	.TOC	"THE INSTRUCTION LOOP -- START NEXT INSTRUCTION"
							; 2309	
							; 2310	;ALL INSTRUCTIONS EXCEPT JUMP'S AND UUO'S END UP HERE
							; 2311	1400:
U 1400, 0070,3443,0100,4174,4156,4700,0200,0014,0012	; 2312	DONE:	DONE
U 1401, 0070,0111,0701,4170,4156,4700,0200,0014,0012	; 2313	1401:	VMA_[PC]+1, NEXT INST FETCH, FETCH
							; 2314	=0
U 0014, 0070,0111,0701,4170,4156,4700,0200,0014,0012	; 2315	SKIP:	VMA_[PC]+1, NEXT INST FETCH, FETCH
U 0015, 0070,3443,0100,4174,4156,4700,0200,0014,0012	; 2316		DONE
							; 2317	
							; 2318	
							; 2319	;16-WAY DISPATCH BASED ON NEXT INSTRUCTION
							; 2320	=0000
							; 2321	NICOND:
							; 2322	=0001	[AR]_0 XWD [423],	;TRAP TYPE 3
							; 2323					; GET ADDRESS OF TRAP INST
							; 2324		TURN OFF PXCT,		;CLEAR PXCT
U 0061, 3305,4751,1203,4374,4367,0700,0000,0000,0423	; 2325		J/TRAP			;PROCESS TRAP (INOUT.MIC)
							; 2326	=0010	[AR]_0 XWD [422],	;TRAP TYPE 2
							; 2327		TURN OFF PXCT,		;CLEAR PXCT
U 0062, 3305,4751,1203,4374,4367,0700,0000,0000,0422	; 2328		J/TRAP			;GO TRAP
							; 2329	=0011	[AR]_0 XWD [421],	;TRAP TYPE 1
							; 2330		TURN OFF PXCT,		;TURN OF PXCT
U 0063, 3305,4751,1203,4374,4367,0700,0000,0000,0421	; 2331		J/TRAP			;GO TRAP
U 0065, 2364,4751,1217,4374,4007,0700,0000,0000,0002	; 2332	=0101	HALT [CSL]		;"HA" COMMAND TO 8080
							; 2333	=0111
							; 2334	START:	VMA_[PC],		;LOAD VMA
							; 2335		FETCH,			;INDICATE INSTRUCTION FETCH
U 0067, 0077,3443,0100,4174,4007,0700,0200,0014,0012	; 2336		J/XCTGO 		;GO GET INSTRUCTION
							; 2337	;THE NEXT SET OF CASES ARE USED WHEN THERE IS A FETCH
							; 2338	; IN PROGESS
							; 2339	=1000
							; 2340	NICOND-FETCH:
							; 2341	=1001	[AR]_0 XWD [423],	;TRAP TYPE 3
							; 2342		TURN OFF PXCT,
U 0071, 3305,4751,1203,4374,4367,0700,0000,0000,0423	; 2343		J/TRAP
							; 2344	=1010	[AR]_0 XWD [422],	;TRAP TYPE 2
							; 2345		TURN OFF PXCT,
U 0072, 3305,4751,1203,4374,4367,0700,0000,0000,0422	; 2346		J/TRAP
							; 2347	=1011	[AR]_0 XWD [421],	;TRAP TYPE 1
							; 2348		TURN OFF PXCT,
U 0073, 3305,4751,1203,4374,4367,0700,0000,0000,0421	; 2349		J/TRAP
U 0075, 2364,4751,1217,4374,4007,0700,0000,0000,0002	; 2350	=1101	HALT [CSL]		;"HA" COMMAND TO 8080
							; 2351	=1111
							; 2352	XCTGO:	MEM READ,		;WAIT FOR MEMORY
							; 2353		[HR]_MEM,		;PUT DATA IN HR
							; 2354		LOAD INST,		;LOAD IR & AC #
U 0077, 0566,3771,0002,4365,5617,0700,0200,0000,0002	; 2355		J/INCPC 		;GO BUMP PC
							; 2356	=
							; 2357	
							; 2358	;HERE WE POINT PC TO NEXT INSTRUCTION WHILE WE WAIT FOR
							; 2359	; EFFECTIVE ADDRESS LOGIC TO SETTLE
							; 2360	INCPC:	VMA_[PC]+1,		;ADDRESS OF NEXT INSTRUCTION
							; 2361		FETCH/1,		;INSTRUCTION FETCH
							; 2362		TURN OFF PXCT,		;CLEAR EFFECT OF PXCT
U 0566, 0101,0111,0701,2170,4366,6700,0200,0010,0010	; 2363		EA MODE DISP		;DISPACTH OF INDEXING AND @
							; 2364	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 61
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	THE INSTRUCTION LOOP -- START NEXT INSTRUCTION

							; 2365	
							; 2366	;MAIN EFFECTIVE ADDRESS CALCULATION
							; 2367	=0001
							; 2368	EACALC:
							; 2369	;
							; 2370	;	THE FIRST 4 CASES ARE USED ONLY FOR JRST
							; 2371	;
							; 2372	
							; 2373	;CASE 0 -- JRST 0,FOO(XR)
							; 2374		[PC]_[HR]+XR,		;UPDATE PC
							; 2375		HOLD LEFT,		;ONLY RH
							; 2376		LOAD VMA, FETCH,	;START GETTING IT
U 0101, 0070,0551,0201,2270,4156,4700,0200,0014,0012	; 2377		NEXT INST FETCH 	;START NEXT INST
							; 2378	
							; 2379	;CASE 2 -- JRST 0,FOO
							; 2380		[PC]_[HR],		;NEW PC
							; 2381		HOLD LEFT,		;ONLY RH
							; 2382		LOAD VMA, FETCH,	;START GETTING IT
U 0103, 0070,3441,0201,4170,4156,4700,0200,0014,0012	; 2383		NEXT INST FETCH 	;START NEXT INST
							; 2384	
							; 2385	;CASE 4 -- JRST 0,@FOO(XR)
							; 2386		[HR]_[HR]+XR,		;ADD IN INDEX
							; 2387		START READ,		;START TO FETCH @ WORD
							; 2388		LOAD VMA,		;PUT ADDRESS IN VMA
U 0105, 0576,0551,0202,2270,4007,0700,0200,0004,0012	; 2389		J/FETIND		;GO DO MEM WAIT (FORGET ABOUT JRST)
							; 2390	
							; 2391	;CASE 6 -- JRST 0,@FOO
							; 2392		VMA_[HR],		;LOAD UP ADDRESS
							; 2393		START READ,		;START TO FETCH @ WORD
U 0107, 0576,3443,0200,4174,4007,0700,0200,0004,0012	; 2394		J/FETIND		;GO DO MEM WAIT (FORGET ABOUT JRST)
							; 2395	
							; 2396	;
							; 2397	;THESE 4 ARE FOR THE NON-JRST CASE
							; 2398	;
							; 2399	
							; 2400	;CASE 10 -- JUST INDEXING
							; 2401	INDEX:	[HR]_[HR]+XR,		;ADD IN INDEX REGISTER
U 0111, 0113,0551,0202,2270,4007,0700,0000,0000,0000	; 2402		HOLD LEFT		;JUST DO RIGHT HALF
							; 2403	
							; 2404	;CASE 12 -- NO INDEXING OR INDIRECT
							; 2405	NOMOD:	[AR]_EA,		;PUT 0,,E IN AR
U 0113, 0000,5741,0203,4174,4001,3700,0200,0000,0342	; 2406		PXCT DATA, AREAD	;DO ONE OR MORE OF THE FOLLWING
							; 2407					; ACCORDING TO THE DROM:
							; 2408					;1. LOAD VMA
							; 2409					;2. START READ OR WRITE
							; 2410					;3. DISPATCH TO 40-57
							; 2411					;   OR DIRECTLY TO EXECUTE CODE
							; 2412	
							; 2413	;CASE 14 -- BOTH INDEXING AND INDIRECT
							; 2414	BOTH:	[HR]_[HR]+XR,		;ADD IN INDEX REGISTER
							; 2415		LOAD VMA, PXCT EA,	;PUT ADDRESS IN VMA
U 0115, 0576,0551,0202,2270,4007,0700,0200,0004,0112	; 2416		START READ, J/FETIND	;START CYCLE AND GO WAIT FOR DATA
							; 2417	
							; 2418	;CASE 16 -- JUST INDIRECT
							; 2419	INDRCT: VMA_[HR],		;LOAD ADDRESS OF @ WORD
U 0117, 0576,3443,0200,4174,4007,0700,0200,0004,0112	; 2420		START READ, PXCT EA	;START CYCLE
							; 2421	
							; 2422	
							; 2423	;HERE TO FETCH INDIRECT WORD
							; 2424	FETIND: MEM READ, [HR]_MEM,	;GET DATA WORD
							; 2425		HOLD LEFT,		;JUST RIGHT HALF
U 0576, 0676,3771,0002,4361,5217,0700,0200,0000,0102	; 2426		LOAD IND EA		;RELOAD @ AND INDEX FLOPS
							; 2427	
							; 2428	XCT2:	VMA_[PC],		;PUT PC BACK IN VMA
							; 2429		FETCH/1,		;TURN ON FETCH FLAG
							; 2430		EA MODE DISP,		;REDO CALCULATION FOR
U 0676, 0101,3443,0100,2174,4006,6700,0200,0010,0010	; 2431		J/EACALC		; NEW WORD
							; 2432	
							; 2433	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 62
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	THE INSTRUCTION LOOP -- FETCH ARGUMENTS

							; 2434	.TOC	"THE INSTRUCTION LOOP -- FETCH ARGUMENTS"
							; 2435	;HERE ON AREAD DISP TO HANDLE VARIOUS CASES OF ARGUMENT FETCH
							; 2436	
							; 2437	;CASE 0 -- READ (E)
							; 2438	40:	MEM READ,		;WAIT FOR DATA
							; 2439		[AR]_MEM,		;PUT WORD IN AR
U 0040, 0000,3771,0003,4365,5001,2700,0200,0000,0002	; 2440		INST DISP		;GO TO EXECUTE CODE
							; 2441	
							; 2442	;CASE 1 -- WRITE (E)
							; 2443	41:	[AR]_AC,		;PUT AC IN AR
U 0041, 0000,3771,0003,0276,6001,2700,0000,0000,0000	; 2444		INST DISP		;GO TO EXECUTE CODE
							; 2445	
							; 2446	;CASE 2 -- DOUBLE READ
							; 2447	42:	MEM READ,		;WAIT FOR DATA
U 0042, 0731,3771,0003,4365,5007,0700,0200,0000,0002	; 2448		[AR]_MEM		;PUT HI WORD IN AR
							; 2449		VMA_[HR]+1, PXCT DATA,	;POINT TO E+1
U 0731, 0737,0111,0702,4170,4007,0700,0200,0004,0312	; 2450		START READ		;START MEMORY CYCLE
							; 2451		MEM READ,		;WAIT FOR DATA
							; 2452		[ARX]_MEM,		;LOW WORD IN ARX
U 0737, 0000,3771,0004,4365,5001,2700,0200,0000,0002	; 2453		INST DISP		;GO TO EXECUTE CODE
							; 2454	
							; 2455	;CASE 3 -- DOUBLE AC
U 0043, 0743,3771,0003,0276,6007,0700,0000,0000,0000	; 2456	43:	[AR]_AC 		;GET HIGH AC
							; 2457		[ARX]_AC[1],		;PUT C(AC+1) IN ARX
U 0743, 0000,3771,0004,1276,6001,2701,0000,0000,1441	; 2458		INST DISP		;GO TO EXECUTE CODE
							; 2459	
							; 2460	;CASE 4 -- SHIFT
							; 2461	44:
							; 2462	SHIFT:	READ [AR],		;LOOK AT EFFECTIVE ADDRESS
							; 2463		SKIP DP18,		;SEE IF LEFT OR RIGHT
							; 2464		SC_SHIFT-1,		;PUT NUMBER OF PLACES TO SHIFT IN
							; 2465		LOAD FE,		; SC AND FE
U 0044, 0000,3333,0003,4174,4001,2530,3000,0041,5777	; 2466		INST DISP		;GO DO THE SHIFT
							; 2467	
							; 2468	;CASE 5 -- SHIFT COMBINED
U 0045, 1002,3772,0000,1275,5007,0701,0000,0000,1441	; 2469	45:	Q_AC[1] 		;PUT LOW WORD IN Q
U 1002, 1021,3776,0005,0274,4007,0701,0000,0000,0000	; 2470		[BR]_AC*.5 LONG 	;PUT AC IN BR & SHIFT BR!Q RIGHT
							; 2471		[BR]_[BR]*.5 LONG,	;SHIFT BR!Q 1 MORE PLACE RIGHT
U 1021, 0044,3446,0505,4174,4007,0700,0000,0000,0000	; 2472		J/SHIFT 		;GO DO SHIFT SETUP
							; 2473	
							; 2474	;CASE 6 -- FLOATING POINT IMMEDIATE
							; 2475	46:	[AR]_[AR] SWAP,		;FLIP BITS TO LEFT HALF
U 0046, 0016,3770,0303,4344,4007,0700,0000,0000,0000	; 2476		J/FPR0			;JOIN COMMON F.P. CODE
							; 2477	
							; 2478	;CASE 7 -- FLOATING POINT
							; 2479	47:	MEM READ,		;WAIT FOR MEMORY (SPEC/MEM WAIT)
U 0047, 0016,3771,0003,4365,5007,0700,0200,0000,0002	; 2480		[AR]_MEM		;DATA INTO AR
							; 2481	=0
							; 2482	FPR0:	READ [AR],		;LOOK AT NUMBER
							; 2483		SC_EXP, FE_EXP, 	;PUT EXPONENT IN SC & FE
							; 2484		SKIP DP0,		;SEE IF NEGATIVE
U 0016, 0026,3333,0003,4174,4007,0520,3010,0041,2000	; 2485		CALL [ARSIGN]		;EXTEND AR SIGN
							; 2486	FPR1:	[ARX]_0,		;ZERO ARX
U 0017, 0000,4221,0004,4174,4001,2700,0000,0000,0000	; 2487		INST DISP		;GO TO EXECUTE CODE
							; 2488	
							; 2489	;CASE 10 -- READ THEN PREFETCH
							; 2490	50:	MEM READ,		;WAIT FOR DATA
							; 2491		[AR]_MEM THEN FETCH,	;PUT DATA IN AR AND START A READ
							; 2492					; VMA HAS PC+1.
U 0050, 0000,3770,0103,4365,5001,2700,0200,0014,0012	; 2493		INST DISP		;GO DO IT
							; 2494	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 63
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	THE INSTRUCTION LOOP -- FETCH ARGUMENTS

							; 2495	
							; 2496	;CASE 11 -- DOUBLE FLOATING READ
							; 2497	51:	SPEC MEM READ,		;WAIT FOR DATA
							; 2498		[BR]_MEM,		;HOLD IN BR
							; 2499		SC_EXP, FE_EXP, 	;SAVE EXPONENT
U 0051, 0022,3771,0005,4365,5177,0521,3000,0041,2000	; 2500		SKIP DP0, 3T		;SEE IF MINUS
							; 2501	=0	[AR]_[AR]+1,		;POINT TO E+1
							; 2502		LOAD VMA, PXCT DATA,	;PUT IN VMA
U 0022, 1036,0111,0703,4174,4007,0700,0200,0004,0312	; 2503		START READ, J/DFPR1	;GO GET POSITIVE DATA
							; 2504		[AR]_[AR]+1,		;POINT TO E+1
							; 2505		LOAD VMA, PXCT DATA,	;PUT IN VMA
U 0023, 1031,0111,0703,4174,4007,0700,0200,0004,0312	; 2506		START READ		;GO GET NEGATIVE DATA
							; 2507		[BR]_-SIGN,		;SMEAR MINUS SIGN
U 1031, 1045,3551,0505,4374,0007,0700,0000,0077,7000	; 2508		J/DFPR2 		;CONTINUE BELOW
U 1036, 1045,4551,0505,4374,0007,0700,0000,0000,0777	; 2509	DFPR1:	[BR]_+SIGN		;SMEAR PLUS SIGN
							; 2510	DFPR2:	MEM READ, 3T,		;WAIT FOR MEMORY
							; 2511		[ARX]_(MEM.AND.[MAG])*.5,
U 1045, 1072,4557,0004,4365,5007,0701,0200,0000,0002	; 2512		ASH			;SET SHIFT PATHS
U 1072, 1074,3447,0503,4174,4007,0700,0000,0000,0000	; 2513		[AR]_[BR]*.5		;SHIFT AR
							; 2514		[AR]_[AR]*.5,		;COMPLETE SHIFTING
U 1074, 1111,3447,0303,4174,4007,0700,2000,0011,0000	; 2515		SC_FE			;PAGE FAIL MAY HAVE ZAPPED
							; 2516					; THE SC.
							; 2517		VMA_[PC], FETCH,	;GET NEXT INST
U 1111, 0000,3443,0100,4174,4001,2700,0200,0014,0012	; 2518		INST DISP		;DO THIS ONE
							; 2519	
							; 2520	;CASE 12 -- TEST FOR IO LEGAL
U 0052, 0024,4443,0000,4174,4007,0040,0000,0000,0000	; 2521	52:	SKIP IO LEGAL		;IS IO LEGAL?
U 0024, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 2522	=0	UUO			;NO
U 0025, 0000,4443,0000,4174,4001,2700,0000,0000,0000	; 2523		INST DISP		;YES--DO THE INSTRUCTION
							; 2524	
							; 2525	
							; 2526	;CASE 13 -- RESERVED
							; 2527	;53:
							; 2528	
							; 2529	;CASE 14 -- RESERVED
							; 2530	;54:
							; 2531	
							; 2532	;CASE 15 -- RESERVED
							; 2533	;55:
							; 2534	
							; 2535	;CASE 16 -- RESERVED
							; 2536	;56:
							; 2537	
							; 2538	;CASE 17 -- RESERVED
							; 2539	;57:
							; 2540	
							; 2541	;EXTEND AR SIGN.
							; 2542	;CALL WITH SKIP ON AR0, RETURNS 1 ALWAYS
							; 2543	=0
U 0026, 0001,4551,0303,4374,0004,1700,0000,0000,0777	; 2544	ARSIGN:	[AR]_+SIGN, RETURN [1]	;EXTEND + SIGN
U 0027, 0001,3551,0303,4374,0004,1700,0000,0077,7000	; 2545		[AR]_-SIGN, RETURN [1]	;EXTEND - SIGN
							; 2546	
							; 2547	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 64
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	THE INSTRUCTION LOOP -- STORE ANSWERS

							; 2548	.TOC	"THE INSTRUCTION LOOP -- STORE ANSWERS"
							; 2549	
							; 2550	;NOTE:	INSTRUCTIONS WHICH STORE IN BOTH AC AND MEMORY
							; 2551	;	(E.G. ADDB, AOS)  MUST STORE IN MEMORY FIRST
							; 2552	;	SO THAT IF A PAGE FAIL HAPPENS THE  AC IS
							; 2553	;	STILL INTACT.
							; 2554	
							; 2555	1500:
							; 2556	BWRITE: ;BASE ADDRESS OF BWRITE DISPATCH
							; 2557	
							; 2558	;CASE 0 -- RESERVED
							; 2559	;1500:
							; 2560	
							; 2561	;CASE 1  --  RESERVED
							; 2562	;1501:
							; 2563	
							; 2564	;CASE 2  --  RESERVED
							; 2565	;1502:
							; 2566	
							; 2567	;CASE 3  --  RESERVED
							; 2568	;1503:
							; 2569	
							; 2570	;CASE 4 -- STORE SELF
							; 2571	1504:
							; 2572	STSELF: SKIP IF AC0,		;IS AC # ZERO?
U 1504, 0032,4443,0000,4174,4007,0360,0000,0000,0000	; 2573		J/STBTH1		;GO TO STORE BOTH CASE
							; 2574	
							; 2575	;CASE 5 -- STORE DOUBLE AC
							; 2576	1505:
							; 2577	DAC:	AC[1]_[ARX],		;STORE AC 1
U 1505, 1515,3440,0404,1174,4007,0700,0400,0000,1441	; 2578		J/STAC			;GO STORE AC
							; 2579	
							; 2580	;CASE 6 -- STORE DOUBLE BOTH (KA10 STYLE MEM_AR ONLY)
							; 2581	1506:
							; 2582	STDBTH: MEM WRITE,		;WAIT FOR MEMORY
							; 2583		MEM_[AR],		;STORE AR
U 1506, 1505,3333,0003,4175,5007,0701,0200,0000,0002	; 2584		J/DAC			;NOW STORE AC & AC+1
							; 2585	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 65
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	THE INSTRUCTION LOOP -- STORE ANSWERS

							; 2586	
							; 2587	;CASE 7 -- RESERVED
							; 2588	;1507:
							; 2589	
							; 2590	;CASE 10  --  RESERVED
							; 2591	;1510:
							; 2592	
							; 2593	;CASE 11  --  RESERVED
							; 2594	;1511:
							; 2595	
							; 2596	;CASE 12  --  RESERVED
							; 2597	;1512:
							; 2598	
							; 2599	;CASE 13  --  RESERVED
							; 2600	;1513:
							; 2601	
							; 2602	;CASE 14  --  RESERVED
							; 2603	1514:
							; 2604	FL-BWRITE:			;THE NEXT 4 CASES ARE ALSO 
							; 2605					;USED IN FLOATING POINT
U 1514, 2364,4751,1217,4374,4007,0700,0000,0000,1000	; 2606		HALT	[BW14]
							; 2607	
							; 2608	;CASE 15 -- STORE AC
							; 2609	1515:
							; 2610	STAC:	AC_[AR],		;STORE AC
U 1515, 0060,3440,0303,0174,4156,4700,0400,0000,0000	; 2611		NEXT INST		;DO NEXT INSTRUCTION
							; 2612	
							; 2613	;CASE 16 -- STORE IN MEMORY
							; 2614	1516:
							; 2615	STMEM:	MEM WRITE,		;WAIT FOR MEMORY
							; 2616		MEM_[AR],		;STORE AR
U 1516, 1400,3333,0003,4175,5007,0701,0200,0000,0002	; 2617		J/DONE			;START FETCH OF NEXT
							; 2618	
							; 2619	;CASE 17 -- STORE BOTH
							; 2620	1517:
							; 2621	STBOTH: MEM WRITE,		;WAIT FOR MEMORY
							; 2622		MEM_[AR],		;STORE AR
U 1517, 1515,3333,0003,4175,5007,0701,0200,0000,0002	; 2623		J/STAC			;NOW STORE AC
							; 2624	
							; 2625	=0
							; 2626	STBTH1: MEM WRITE,		;WAIT FOR MEMORY
							; 2627		MEM_[AR],		;STORE AR
U 0032, 1515,3333,0003,4175,5007,0701,0200,0000,0002	; 2628		J/STAC			;NOW STORE AC
							; 2629	STORE:	MEM WRITE,		;WAIT FOR MEMORY
							; 2630		MEM_[AR],		;STORE AC
U 0033, 1400,3333,0003,4175,5007,0701,0200,0000,0002	; 2631		J/DONE			;START NEXT INST
							; 2632	
							; 2633	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 66
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	MOVE GROUP

							; 2634	.TOC	"MOVE GROUP"
							; 2635	
							; 2636		.DCODE
D 0200, 1015,1515,1100					; 2637	200:	R-PF,	AC,	J/STAC		;MOVE
D 0201, 0015,1515,3000					; 2638		I-PF,	AC,	J/STAC		;MOVEI
D 0202, 0116,1404,0700					; 2639		W,	M,	J/MOVE		;MOVEM
D 0203, 0004,1504,1700					; 2640		RW,	S,	J/STSELF	;MOVES
							; 2641	
D 0204, 1015,1402,1100					; 2642	204:	R-PF,	AC,	J/MOVS		;MOVS
D 0205, 0015,1402,3000					; 2643		I-PF,	AC,	J/MOVS		;MOVSI
D 0206, 0116,1402,0700					; 2644		W,	M,	J/MOVS		;MOVSM
D 0207, 0004,1402,1700					; 2645		RW,	S,	J/MOVS		;MOVSS
							; 2646	
D 0210, 1015,1405,1100					; 2647	210:	R-PF,	AC,	J/MOVN		;MOVN
D 0211, 0015,1405,3000					; 2648		I-PF,	AC,	J/MOVN		;MOVNI
D 0212, 0116,1405,0700					; 2649		W,	M,	J/MOVN		;MOVNM
D 0213, 0004,1405,1700					; 2650		RW,	S,	J/MOVN		;MOVNS
							; 2651	
D 0214, 1015,1403,1100					; 2652	214:	R-PF,	AC,	J/MOVM		;MOVM
D 0215, 0015,1515,3000					; 2653		I-PF,	AC,	J/STAC		;MOVMI
D 0216, 0116,1403,0700					; 2654		W,	M,	J/MOVM		;MOVMM
D 0217, 0004,1403,1700					; 2655		RW,	S,	J/MOVM		;MOVNS
							; 2656		.UCODE
							; 2657	
							; 2658	1402:
U 1402, 1500,3770,0303,4344,4003,7700,0200,0003,0001	; 2659	MOVS:	[AR]_[AR] SWAP,EXIT
							; 2660	
							; 2661	1403:
U 1403, 1404,3333,0003,4174,4007,0520,0000,0000,0000	; 2662	MOVM:	READ [AR], SKIP DP0, J/MOVE
							; 2663	
							; 2664	1404:
U 1404, 1500,4443,0000,4174,4003,7700,0200,0003,0001	; 2665	MOVE:	EXIT
							; 2666	1405:
							; 2667	MOVN:	[AR]_-[AR],		;NEGATE NUMBER
							; 2668		AD FLAGS, 3T,		;UPDATE FLAGS
U 1405, 1404,2441,0303,4174,4467,0701,4000,0001,0001	; 2669		J/MOVE			;STORE ANSWER
							; 2670	
							; 2671	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 67
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	EXCH

							; 2672	.TOC	"EXCH"
							; 2673	
							; 2674		.DCODE
D 0250, 0015,1406,1500					; 2675	250:	R,W TEST,	AC,	J/EXCH
							; 2676		.UCODE
							; 2677	
							; 2678	1406:
							; 2679	EXCH:	[BR]_AC,		;COPY AC TO THE BR
U 1406, 1117,3771,0005,0276,6007,0700,0200,0003,0002	; 2680		START WRITE		;START A WRITE CYCLE
							; 2681		MEM WRITE,		;COMPLETE WRITE CYCLE
							; 2682		MEM_[BR],		;STORE BR (AC) IN MEMORY
U 1117, 1515,3333,0005,4175,5007,0701,0200,0000,0002	; 2683		J/STAC			;STORE THE AR IN AC. NOTE: AR
							; 2684					; WAS LOADED WITH MEMORY OPERAND
							; 2685					; AS PART OF INSTRUCTION DISPATCH
							; 2686	
							; 2687	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 68
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	HALFWORD GROUP

							; 2688	.TOC	"HALFWORD GROUP"
							; 2689	;	DESTINATION LEFT HALF
							; 2690	
							; 2691		.DCODE
D 0500, 1015,1410,1100					; 2692	500:	R-PF,	AC,	J/HLL
D 0501, 0015,1410,3000					; 2693		I-PF,	AC,	J/HLL
D 0502, 0016,1407,1700					; 2694		RW,	M,	J/HRR		;HLLM = HRR EXCEPT FOR STORE
D 0503, 0004,1404,1700					; 2695		RW,	S,	J/MOVE		;HLLS = MOVES
							; 2696	
D 0504, 1015,1411,1100					; 2697		R-PF,	AC,	J/HRL
D 0505, 0015,1411,3000					; 2698		I-PF,	AC,	J/HRL
D 0506, 0016,1413,1700					; 2699		RW,	M,	J/HRLM
D 0507, 0004,1414,1700					; 2700		RW,	S,	J/HRLS
							; 2701	
D 0510, 1015,1432,1100					; 2702	510:	R-PF,	AC,	J/HLLZ
D 0511, 0015,1432,3000					; 2703		I-PF,	AC,	J/HLLZ
D 0512, 0116,1432,0700					; 2704		W,	M,	J/HLLZ
D 0513, 0004,1432,1700					; 2705		RW,	S,	J/HLLZ
							; 2706	
D 0514, 1015,1424,1100					; 2707		R-PF,	AC,	J/HRLZ
D 0515, 0015,1424,3000					; 2708		I-PF,	AC,	J/HRLZ
D 0516, 0116,1424,0700					; 2709		W,	M,	J/HRLZ
D 0517, 0004,1424,1700					; 2710		RW,	S,	J/HRLZ
							; 2711	
D 0520, 1015,1433,1100					; 2712	520:	R-PF,	AC,	J/HLLO
D 0521, 0015,1433,3000					; 2713		I-PF,	AC,	J/HLLO
D 0522, 0116,1433,0700					; 2714		W,	M,	J/HLLO
D 0523, 0004,1433,1700					; 2715		RW,	S,	J/HLLO
							; 2716	
D 0524, 1015,1425,1100					; 2717		R-PF,	AC,	J/HRLO
D 0525, 0015,1425,3000					; 2718		I-PF,	AC,	J/HRLO
D 0526, 0116,1425,0700					; 2719		W,	M,	J/HRLO
D 0527, 0004,1425,1700					; 2720		RW,	S,	J/HRLO
							; 2721	
D 0530, 1015,1430,1100					; 2722	530:	R-PF,	AC,	J/HLLE
D 0531, 0015,1430,3000					; 2723		I-PF,	AC,	J/HLLE
D 0532, 0116,1430,0700					; 2724		W,	M,	J/HLLE
D 0533, 0004,1430,1700					; 2725		RW,	S,	J/HLLE
							; 2726	
D 0534, 1015,1422,1100					; 2727		R-PF,	AC,	J/HRLE
D 0535, 0015,1422,3000					; 2728		I-PF,	AC,	J/HRLE
D 0536, 0116,1422,0700					; 2729		W,	M,	J/HRLE
D 0537, 0004,1422,1700					; 2730		RW,	S,	J/HRLE
							; 2731	
							; 2732	;	DESTINATION RIGHT HALF
							; 2733	
D 0540, 1015,1407,1100					; 2734	540:	R-PF,	AC,	J/HRR
D 0541, 0015,1407,3000					; 2735		I-PF,	AC,	J/HRR
D 0542, 0016,1410,1700					; 2736		RW,	M,	J/HLL		;HRRM = HLL EXCEPT FOR STORE
D 0543, 0004,1404,1700					; 2737		RW,	S,	J/MOVE		;HRRS = MOVES
							; 2738	
D 0544, 1015,1412,1100					; 2739		R-PF,	AC,	J/HLR
D 0545, 0015,1412,3000					; 2740		I-PF,	AC,	J/HLR
D 0546, 0016,1415,1700					; 2741		RW,	M,	J/HLRM
D 0547, 0004,1416,1700					; 2742		RW,	S,	J/HLRS
							; 2743	
D 0550, 1015,1420,1100					; 2744	550:	R-PF,	AC,	J/HRRZ
D 0551, 0015,1420,3000					; 2745		I-PF,	AC,	J/HRRZ
D 0552, 0116,1420,0700					; 2746		W,	M,	J/HRRZ
D 0553, 0004,1420,1700					; 2747		RW,	S,	J/HRRZ
							; 2748	
D 0554, 1015,1426,1100					; 2749		R-PF,	AC,	J/HLRZ
D 0555, 0015,1426,3000					; 2750		I-PF,	AC,	J/HLRZ
D 0556, 0116,1426,0700					; 2751		W,	M,	J/HLRZ
D 0557, 0004,1426,1700					; 2752		RW,	S,	J/HLRZ
							; 2753	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 69
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	HALFWORD GROUP

							; 2754	
D 0560, 1015,1421,1100					; 2755	560:	R-PF,	AC,	J/HRRO
D 0561, 0015,1421,3000					; 2756		I-PF,	AC,	J/HRRO
D 0562, 0116,1421,0700					; 2757		W,	M,	J/HRRO
D 0563, 0004,1421,1700					; 2758		RW,	S,	J/HRRO
							; 2759	
D 0564, 1015,1427,1100					; 2760		R-PF,	AC,	J/HLRO
D 0565, 0015,1427,3000					; 2761		I-PF,	AC,	J/HLRO
D 0566, 0116,1427,0700					; 2762		W,	M,	J/HLRO
D 0567, 0004,1427,1700					; 2763		RW,	S,	J/HLRO
							; 2764	
D 0570, 1015,1417,1100					; 2765	570:	R-PF,	AC,	J/HRRE
D 0571, 0015,1417,3000					; 2766		I-PF,	AC,	J/HRRE
D 0572, 0116,1417,0700					; 2767		W,	M,	J/HRRE
D 0573, 0004,1417,1700					; 2768		RW,	S,	J/HRRE
							; 2769	
D 0574, 1015,1423,1100					; 2770		R-PF,	AC,	J/HLRE
D 0575, 0015,1423,3000					; 2771		I-PF,	AC,	J/HLRE
D 0576, 0116,1423,0700					; 2772		W,	M,	J/HLRE
D 0577, 0004,1423,1700					; 2773		RW,	S,	J/HLRE
							; 2774	
							; 2775		.UCODE
							; 2776	
							; 2777	;FIRST THE GUYS THAT LEAVE THE OTHER HALF ALONE
							; 2778	
							; 2779	;THE AR CONTAINS THE MEMORY OPERAND. SO WE WANT TO PUT THE LH OF
							; 2780	; AC INTO AR TO DO A HRR. OBVIOUS THING FOR HLL.
							; 2781	1407:
U 1407, 1500,3771,0003,0276,0003,7700,0200,0003,0001	; 2782	HRR:	[AR]_AC,HOLD RIGHT,EXIT
							; 2783	1410:
U 1410, 1500,3771,0003,0270,6003,7700,0200,0003,0001	; 2784	HLL:	[AR]_AC,HOLD LEFT,EXIT
							; 2785	
							; 2786	;HRL FLOW:
							; 2787	;AT HRL AR CONTAINS:
							; 2788	;
							; 2789	;	!------------------!------------------!
							; 2790	;	!     LH OF (E)    !	 RH OF (E)    !
							; 2791	;	!------------------!------------------!
							; 2792	;
							; 2793	;AR_AR SWAP GIVES:
							; 2794	;
							; 2795	;	!------------------!------------------!
							; 2796	;	!     RH OF (E)    !	 LH OF (E)    !
							; 2797	;	!------------------!------------------!
							; 2798	;
							; 2799	;AT HLL, AR_AC,HOLD LEFT GIVES:
							; 2800	;
							; 2801	;	!------------------!------------------!
							; 2802	;	!     RH OF (E)    !	 RH OF AC     !
							; 2803	;	!------------------!------------------!
							; 2804	;
							; 2805	;THE EXIT MACRO CAUSES THE AR TO BE STORED IN AC (AT STAC).
							; 2806	; THE REST OF THE HALF WORD IN THIS GROUP ARE VERY SIMILAR.
							; 2807	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 70
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	HALFWORD GROUP

							; 2808	
							; 2809	1411:
U 1411, 1410,3770,0303,4344,4007,0700,0000,0000,0000	; 2810	HRL:	[AR]_[AR] SWAP,J/HLL
							; 2811	1412:
U 1412, 1407,3770,0303,4344,4007,0700,0000,0000,0000	; 2812	HLR:	[AR]_[AR] SWAP,J/HRR
							; 2813	
							; 2814	1413:
U 1413, 1124,3770,0303,4344,4007,0700,0000,0000,0000	; 2815	HRLM:	[AR]_[AR] SWAP
U 1124, 1402,3771,0003,0270,6007,0700,0000,0000,0000	; 2816		[AR]_AC,HOLD LEFT,J/MOVS
							; 2817	1414:
U 1414, 1500,3770,0303,4344,0003,7700,0200,0003,0001	; 2818	HRLS:	[AR]_[AR] SWAP,HOLD RIGHT,EXIT
							; 2819	
							; 2820	1415:
U 1415, 1146,3770,0303,4344,4007,0700,0000,0000,0000	; 2821	HLRM:	[AR]_[AR] SWAP
U 1146, 1402,3771,0003,0276,0007,0700,0000,0000,0000	; 2822		[AR]_AC,HOLD RIGHT,J/MOVS
							; 2823	1416:
U 1416, 1500,3770,0303,4340,4003,7700,0200,0003,0001	; 2824	HLRS:	[AR]_[AR] SWAP,HOLD LEFT,EXIT
							; 2825	
							; 2826	;NOW THE HALFWORD OPS WHICH CONTROL THE "OTHER" HALF.
							; 2827	; ENTER WITH 0,,E (E) OR (AC) IN AR
							; 2828	
							; 2829	1417:
U 1417, 1420,3333,0003,4174,4007,0530,0000,0000,0000	; 2830	HRRE:	READ [AR],SKIP DP18
							; 2831	1420:
U 1420, 1500,5731,0003,4174,4003,7700,0200,0003,0001	; 2832	HRRZ:	[AR] LEFT_0, EXIT
							; 2833	1421:
U 1421, 1500,5431,1203,4174,4003,7700,0200,0003,0001	; 2834	HRRO:	[AR] LEFT_-1, EXIT
							; 2835	
							; 2836	1422:
U 1422, 1424,3333,0003,4174,4007,0530,0000,0000,0000	; 2837	HRLE:	READ [AR],SKIP DP18
							; 2838	1424:
U 1424, 1402,3771,0003,4374,0007,0700,0000,0000,0000	; 2839	HRLZ:	[AR]_#,#/0,HOLD RIGHT,J/MOVS
							; 2840	1425:
U 1425, 1402,3771,0003,4374,0007,0700,0000,0077,7777	; 2841	HRLO:	[AR]_#,#/777777,HOLD RIGHT,J/MOVS
							; 2842	
							; 2843	1423:
U 1423, 1426,3333,0003,4174,4007,0520,0000,0000,0000	; 2844	HLRE:	READ [AR],SKIP DP0
							; 2845	1426:
U 1426, 1402,3771,0003,4370,4007,0700,0000,0000,0000	; 2846	HLRZ:	[AR]_#,#/0,HOLD LEFT,J/MOVS
							; 2847	1427:
U 1427, 1402,3771,0003,4370,4007,0700,0000,0077,7777	; 2848	HLRO:	[AR]_#,#/777777,HOLD LEFT,J/MOVS
							; 2849	
							; 2850	1430:
U 1430, 1432,3333,0003,4174,4007,0520,0000,0000,0000	; 2851	HLLE:	READ [AR],SKIP DP0
							; 2852	1432:
U 1432, 1500,5371,0003,4174,4003,7700,0200,0003,0001	; 2853	HLLZ:	[AR] RIGHT_0, EXIT
							; 2854	1433:
U 1433, 1500,5341,1203,4174,4003,7700,0200,0003,0001	; 2855	HLLO:	[AR] RIGHT_-1, EXIT
							; 2856	
							; 2857	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 71
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	DMOVE, DMOVN, DMOVEM, DMOVNM

							; 2858	.TOC	"DMOVE, DMOVN, DMOVEM, DMOVNM"
							; 2859	
							; 2860		.DCODE
D 0120, 0205,1505,1100					; 2861	120:	DBL R,	DAC,	J/DAC
D 0121, 0215,1434,1100					; 2862		DBL R,	AC,	J/DMOVN
							; 2863		.UCODE
							; 2864	
							; 2865	1434:
U 1434, 2707,4551,0404,4374,0007,0700,0010,0037,7777	; 2866	DMOVN:	CLEAR ARX0, CALL [DBLNGA]
U 1436, 1515,3440,0404,1174,4007,0700,0400,0000,1441	; 2867	1436:	AC[1]_[ARX], J/STAC
							; 2868	
							; 2869		.DCODE
D 0124, 0300,1567,0100					; 2870	124:	DBL AC, 	J/DMOVN1
D 0125, 0100,1565,0500					; 2871		W,		J/DMOVNM
							; 2872		.UCODE
							; 2873	
							; 2874	
							; 2875	1565:
U 1565, 2706,3771,0004,1276,6007,0701,0010,0000,1441	; 2876	DMOVNM: [ARX]_AC[1],CALL [DBLNEG]
							; 2877	1567:
							; 2878	DMOVN1: [HR]+[ONE],		;GET E+1
							; 2879		LOAD VMA,		;PUT THAT IN VMA
							; 2880		START WRITE,		;STORE IN E+1
U 1567, 1152,0113,0207,4174,4007,0700,0200,0003,0312	; 2881		PXCT DATA		;DATA CYCLE
U 1152, 1166,3333,0004,4175,5007,0701,0200,0000,0002	; 2882		MEM WRITE, MEM_[ARX]	;STORE LOW WORD
							; 2883		VMA_[HR],		;GET E
							; 2884		LOAD VMA,		;SAVE IN VMA
							; 2885		PXCT DATA,		;OPERAND STORE
							; 2886		START WRITE,		;START MEM CYCLE
U 1166, 0033,3443,0200,4174,4007,0700,0200,0003,0312	; 2887		J/STORE 		;GO STORE AR
							; 2888	
							; 2889	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 72
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BOOLEAN GROUP

							; 2890	.TOC	"BOOLEAN GROUP"
							; 2891	
							; 2892		.DCODE
D 0400, 0015,1441,3000					; 2893	400:	I-PF,	AC,	J/SETZ
D 0401, 0015,1441,3000					; 2894		I-PF,	AC,	J/SETZ
D 0402, 0016,1441,2700					; 2895		IW,	M,	J/SETZ
D 0403, 0017,1441,2700					; 2896		IW,	B,	J/SETZ
							; 2897		.UCODE
							; 2898	
							; 2899	1441:
U 1441, 1500,4221,0003,4174,4003,7700,0200,0003,0001	; 2900	SETZ:	[AR]_0, EXIT
							; 2901	
							; 2902		.DCODE
D 0404, 1015,1442,1100					; 2903	404:	R-PF,	AC,	J/AND
D 0405, 0015,1442,3000					; 2904		I-PF,	AC,	J/AND
D 0406, 0016,1442,1700					; 2905		RW,	M,	J/AND
D 0407, 0017,1442,1700					; 2906		RW,	B,	J/AND
							; 2907		.UCODE
							; 2908	
							; 2909	1442:
U 1442, 1500,4551,0303,0274,4003,7700,0200,0003,0001	; 2910	AND:	[AR]_[AR].AND.AC,EXIT
							; 2911	
							; 2912		.DCODE
D 0410, 1015,1443,1100					; 2913	410:	R-PF,	AC,	J/ANDCA
D 0411, 0015,1443,3000					; 2914		I-PF,	AC,	J/ANDCA
D 0412, 0016,1443,1700					; 2915		RW,	M,	J/ANDCA
D 0413, 0017,1443,1700					; 2916		RW,	B,	J/ANDCA
							; 2917		.UCODE
							; 2918	
							; 2919	1443:
U 1443, 1500,5551,0303,0274,4003,7700,0200,0003,0001	; 2920	ANDCA:	[AR]_[AR].AND.NOT.AC,EXIT
							; 2921	
							; 2922		.DCODE
D 0414, 1015,1404,1100					; 2923	414:	R-PF,	AC,	J/MOVE	 ;SETM = MOVE
D 0415, 0015,1404,3000					; 2924		I-PF,	AC,	J/MOVE
D 0416, 0016,1404,1700					; 2925		RW,	M,	J/MOVE	 ;SETMM = NOP THAT WRITES MEMORY
D 0417, 0017,1404,1700					; 2926		RW,	B,	J/MOVE	 ;SETMB = MOVE THAT WRITES MEMORY
							; 2927	
D 0420, 1015,1444,1100					; 2928	420:	R-PF,	AC,	J/ANDCM
D 0421, 0015,1444,3000					; 2929		I-PF,	AC,	J/ANDCM
D 0422, 0016,1444,1700					; 2930		RW,	M,	J/ANDCM
D 0423, 0017,1444,1700					; 2931		RW,	B,	J/ANDCM
							; 2932		.UCODE
							; 2933	
							; 2934	1444:
U 1444, 1442,7441,0303,4174,4007,0700,0000,0000,0000	; 2935	ANDCM:	[AR]_.NOT.[AR],J/AND
							; 2936	
							; 2937		.DCODE
D 0424, 0000,1400,1100					; 2938	424:	R,		J/DONE
D 0425, 0000,1400,2100					; 2939		I,		J/DONE
D 0426, 0116,1404,0700					; 2940		W,	M,	J/MOVE		;SETAM = MOVEM
D 0427, 0116,1404,0700					; 2941		W,	M,	J/MOVE		;SETAB, TOO
							; 2942		.UCODE
							; 2943	
							; 2944		.DCODE
D 0430, 1015,1445,1100					; 2945	430:	R-PF,	AC,	J/XOR
D 0431, 0015,1445,3000					; 2946		I-PF,	AC,	J/XOR
D 0432, 0016,1445,1700					; 2947		RW,	M,	J/XOR
D 0433, 0017,1445,1700					; 2948		RW,	B,	J/XOR
							; 2949		.UCODE
							; 2950	
							; 2951	1445:
U 1445, 1500,6551,0303,0274,4003,7700,0200,0003,0001	; 2952	XOR:	[AR]_[AR].XOR.AC,EXIT
							; 2953	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 73
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BOOLEAN GROUP

							; 2954	
							; 2955		.DCODE
D 0434, 1015,1446,1100					; 2956	434:	R-PF,	AC,	J/IOR
D 0435, 0015,1446,3000					; 2957		I-PF,	AC,	J/IOR
D 0436, 0016,1446,1700					; 2958		RW,	M,	J/IOR
D 0437, 0017,1446,1700					; 2959		RW,	B,	J/IOR
							; 2960		.UCODE
							; 2961	
							; 2962	1446:
U 1446, 1500,3551,0303,0274,4003,7700,0200,0003,0001	; 2963	IOR:	[AR]_[AR].OR.AC,EXIT
							; 2964	
							; 2965		.DCODE
D 0440, 1015,1447,1100					; 2966	440:	R-PF,	AC,	J/ANDCB
D 0441, 0015,1447,3000					; 2967		I-PF,	AC,	J/ANDCB
D 0442, 0016,1447,1700					; 2968		RW,	M,	J/ANDCB
D 0443, 0017,1447,1700					; 2969		RW,	B,	J/ANDCB
							; 2970		.UCODE
							; 2971	
							; 2972	1447:
U 1447, 1443,7441,0303,4174,4007,0700,0000,0000,0000	; 2973	ANDCB:	[AR]_.NOT.[AR],J/ANDCA
							; 2974	
							; 2975		.DCODE
D 0444, 1015,1450,1100					; 2976	444:	R-PF,	AC,	J/EQV
D 0445, 0015,1450,3000					; 2977		I-PF,	AC,	J/EQV
D 0446, 0016,1450,1700					; 2978		RW,	M,	J/EQV
D 0447, 0017,1450,1700					; 2979		RW,	B,	J/EQV
							; 2980		.UCODE
							; 2981	
							; 2982	1450:
U 1450, 1500,7551,0303,0274,4003,7700,0200,0003,0001	; 2983	EQV:	[AR]_[AR].EQV.AC,EXIT
							; 2984	
							; 2985		.DCODE
D 0450, 0015,1451,3000					; 2986	450:	I-PF,	AC,	J/SETCA
D 0451, 0015,1451,3000					; 2987		I-PF,	AC,	J/SETCA
D 0452, 0016,1451,2700					; 2988		IW,	M,	J/SETCA
D 0453, 0017,1451,2700					; 2989		IW,	B,	J/SETCA
							; 2990		.UCODE
							; 2991	
							; 2992	1451:
U 1451, 1500,7771,0003,0274,4003,7700,0200,0003,0001	; 2993	SETCA:	[AR]_.NOT.AC,EXIT
							; 2994	
							; 2995		.DCODE
D 0454, 1015,1452,1100					; 2996	454:	R-PF,	AC,	J/ORCA
D 0455, 0015,1452,3000					; 2997		I-PF,	AC,	J/ORCA
D 0456, 0016,1452,1700					; 2998		RW,	M,	J/ORCA
D 0457, 0017,1452,1700					; 2999		RW,	B,	J/ORCA
							; 3000		.UCODE
							; 3001	
							; 3002	1452:
U 1452, 1207,7771,0005,0274,4007,0700,0000,0000,0000	; 3003	ORCA:	[BR]_.NOT.AC
U 1207, 1500,3111,0503,4174,4003,7700,0200,0003,0001	; 3004		[AR]_[AR].OR.[BR],EXIT
							; 3005	
							; 3006		.DCODE
D 0460, 1015,1453,1100					; 3007	460:	R-PF,	AC,	J/SETCM
D 0461, 0015,1453,3000					; 3008		I-PF,	AC,	J/SETCM
D 0462, 0016,1453,1700					; 3009		RW,	M,	J/SETCM
D 0463, 0017,1453,1700					; 3010		RW,	B,	J/SETCM
							; 3011		.UCODE
							; 3012	
							; 3013	1453:
U 1453, 1500,7441,0303,4174,4003,7700,0200,0003,0001	; 3014	SETCM:	[AR]_.NOT.[AR],EXIT
							; 3015	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 74
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BOOLEAN GROUP

							; 3016	
							; 3017		.DCODE
D 0464, 1015,1454,1100					; 3018	464:	R-PF,	AC,	J/ORCM
D 0465, 0015,1454,3000					; 3019		I-PF,	AC,	J/ORCM
D 0466, 0016,1454,1700					; 3020		RW,	M,	J/ORCM
D 0467, 0017,1454,1700					; 3021		RW,	B,	J/ORCM
							; 3022		.UCODE
							; 3023	
							; 3024	1454:
U 1454, 1446,7441,0303,4174,4007,0700,0000,0000,0000	; 3025	ORCM:	[AR]_.NOT.[AR],J/IOR
							; 3026	
							; 3027		.DCODE
D 0470, 1015,1455,1100					; 3028	470:	R-PF,	AC,	J/ORCB
D 0471, 0015,1455,3000					; 3029		I-PF,	AC,	J/ORCB
D 0472, 0016,1455,1700					; 3030		RW,	M,	J/ORCB
D 0473, 0017,1455,1700					; 3031		RW,	B,	J/ORCB
							; 3032		.UCODE
							; 3033	
							; 3034	1455:
U 1455, 1453,4551,0303,0274,4007,0700,0000,0000,0000	; 3035	ORCB:	[AR]_[AR].AND.AC,J/SETCM
							; 3036	
							; 3037		.DCODE
D 0474, 0015,1456,3000					; 3038	474:	I-PF,	AC,	J/SETO
D 0475, 0015,1456,3000					; 3039		I-PF,	AC,	J/SETO
D 0476, 0016,1456,2700					; 3040		IW,	M,	J/SETO
D 0477, 0017,1456,2700					; 3041		IW,	B,	J/SETO
							; 3042		.UCODE
							; 3043	
							; 3044	1456:
U 1456, 1500,2441,0703,4174,4003,7700,4200,0003,0001	; 3045	SETO:	[AR]_-[ONE], EXIT
							; 3046	
							; 3047	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 75
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ROTATES AND LOGICAL SHIFTS -- ROT, LSH, JFFO

							; 3048	.TOC	"ROTATES AND LOGICAL SHIFTS -- ROT, LSH, JFFO"
							; 3049	
							; 3050		.DCODE
D 0240, 0400,1622,1000					; 3051	240:	SH,		J/ASH
D 0241, 0400,1632,1000					; 3052		SH,		J/ROT
D 0242, 0400,1612,1000					; 3053		SH,		J/LSH
D 0243, 0000,1462,2100					; 3054		I,		J/JFFO
D 0244, 0000,1466,3000					; 3055		I-PF,		J/ASHC
D 0245, 0500,1470,1000					; 3056	245:	SHC,		J/ROTC
D 0246, 0500,1464,1000					; 3057		SHC,		J/LSHC
							; 3058	.IF/CIRC
D 0247, 0000,1665,2100					; 3059		I,		J/CIRC	;That's whats in the DROM...
							; 3060	.ENDIF/CIRC
							; 3061		.UCODE
							; 3062	
							; 3063	
							; 3064	;HERE IS THE CODE FOR LOGICAL SHIFT. THE EFFECTIVE ADDRESS IS
							; 3065	; IN AR.
							; 3066	1612:
							; 3067	LSH:	[AR]_AC,		;PICK UP AC
							; 3068		FE_-FE-1,		;NEGATIVE SHIFT
U 1612, 1213,3771,0003,0276,6007,0700,1000,0031,1777	; 3069		J/LSHL			;SHIFT LEFT
							; 3070	1613:	[AR]_AC.AND.MASK,	;MAKE IT LOOK POSITIVE
							; 3071		FE_FE+1, 		;UNDO -1 AT SHIFT
U 1613, 1243,4551,1203,0276,6007,0700,1000,0041,0001	; 3072		J/ASHR			;GO SHIFT RIGHT
							; 3073	
							; 3074	LSHL:	[AR]_[AR]*2,		;SHIFT LEFT
U 1213, 1515,3445,0303,4174,4007,0700,1020,0041,0001	; 3075		SHIFT, J/STAC		;FAST SHIFT & GO STORE AC
							; 3076	
							; 3077	;HERE IS THE CODE FOR ARITHMETIC SHIFT. THE EFFECTIVE ADDRESS IS
							; 3078	; IN AR.
							; 3079	
							; 3080	ASH36 LEFT	"[AR]_[AR]*2 LONG, ASHC, STEP SC, ASH AROV"
							; 3081	
							; 3082	1622:
U 1622, 1254,4222,0000,4174,4007,0700,0000,0000,0000	; 3083	ASH:	Q_0, J/ASHL0		;HARDWARE ONLY DOES ASHC
							; 3084	1623:	[AR]_AC,		;GET THE ARGUMENT
U 1623, 1243,3771,0003,0276,6007,0700,1000,0041,0001	; 3085		FE_FE+1 		;FE HAS NEGATIVE SHIFT COUNT
							; 3086	ASHR:	[AR]_[AR]*.5,		;SHIFT RIGHT
							; 3087		ASH, SHIFT,		;FAST SHIFT
U 1243, 1515,3447,0303,4174,4007,0700,1020,0041,0001	; 3088		J/STAC			;STORE AC WHEN DONE
							; 3089	
							; 3090	ASHL0:	[AR]_AC*.5,		;GET INTO 9 CHIPS
U 1254, 0034,3777,0003,0274,4007,0631,2000,0060,0000	; 3091		STEP SC 		;SEE IF NULL SHIFT
							; 3092	=0
U 0034, 0034,3444,0303,4174,4447,0630,2000,0060,0000	; 3093	ASHL:	ASH36 LEFT, J/ASHL	;SHIFT LEFT
							; 3094					;SLOW BECAUSE WE HAVE TO
							; 3095					; TEST FOR OVERFLOW
							; 3096	
U 0035, 1515,3445,0303,4174,4007,0700,0000,0000,0000	; 3097	ASHX:	[AR]_[AR]*2, J/STAC	;SHIFT BACK INTO 10 CHIPS
							; 3098	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 76
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ROTATES AND LOGICAL SHIFTS -- ROT, LSH, JFFO

							; 3099	
							; 3100	;HERE IS THE CODE FOR ROTATE. THE EFFECTIVE ADDRESS IS
							; 3101	; IN AR.
							; 3102	1632:
							; 3103	ROT:	[AR]_AC*.5,		;PICK UP THE AC (& SHIFT)
							; 3104		FE_-FE-1,		;NEGATIVE SHIFT COUNT
U 1632, 1350,3777,0003,0274,4007,0701,1000,0031,1777	; 3105		J/ROTL			;ROTATE LEFT
							; 3106	1633:	[AR]_AC*.5,		;PICK UP THE AC (& SHIFT)
U 1633, 1264,3777,0003,0274,4007,0701,1000,0041,0001	; 3107		FE_FE+1 		;NEGATIVE SHIFT COUNT
U 1264, 1326,3447,0303,4174,4007,0700,0000,0000,0000	; 3108		[AR]_[AR]*.5		;PUT IN 9 DIPS
							; 3109		[AR]_[AR]*.5,		;SHIFT RIGHT
U 1326, 1346,3447,0303,4174,4037,0700,1020,0041,0001	; 3110		ROT, SHIFT		;FAST SHIFT
U 1346, 0035,3445,0303,4174,4007,0700,0000,0000,0000	; 3111	ASHXX:	[AR]_[AR]*2,J/ASHX	;SHIFT TO STD PLACE
							; 3112	
U 1350, 1353,3447,0303,4174,4007,0700,0000,0000,0000	; 3113	ROTL:	[AR]_[AR]*.5		;PUT IN RIGHT 36-BITS
							; 3114		[AR]_[AR]*2,		;ROTATE LEFT
							; 3115		ROT, SHIFT,		;FAST SHIFT
U 1353, 1346,3445,0303,4174,4037,0700,1020,0041,0001	; 3116		J/ASHXX 		;ALL DONE--SHIFT BACK
							; 3117	
							; 3118	1462:
							; 3119	JFFO:	[BR]_AC.AND.MASK, 4T,	;GET AC WITH NO SIGN
U 1462, 0036,4551,1205,0276,6007,0622,0000,0000,0000	; 3120		SKIP AD.EQ.0		; EXTENSION. SKIP IF
							; 3121					; ZERO.
							; 3122	=0	[PC]_[AR],		;NOT ZERO--JUMP
							; 3123		LOAD VMA, FETCH,	;GET NEXT INST
U 0036, 1435,3441,0301,4174,4007,0700,0200,0014,0012	; 3124		J/JFFO1 		;ENTER LOOP
U 0037, 1400,4223,0000,1174,4007,0700,0400,0000,1441	; 3125		AC[1]_0, J/DONE 	;ZERO--DONE
							; 3126	
U 1435, 0054,4443,0000,4174,4007,0700,1000,0071,1764	; 3127	JFFO1:	FE_-12. 		;WHY -12.? WELL THE
							; 3128					; HARDWARE LOOKS AT
							; 3129					; BIT -2 SO THE FIRST
							; 3130					; 2 STEPS MOVE THE BR
							; 3131					; OVER. WE ALSO LOOK AT
							; 3132					; THE DATA BEFORE THE SHIFT
							; 3133					; SO WE END UP GOING 1 PLACE
							; 3134					; TOO MANY. THAT MEANS THE
							; 3135					; FE SHOULD START AT -3.
							; 3136					; HOWEVER, WE COUNT THE FE BY
							; 3137					; 4  (BECAUSE THE 2 LOW ORDER
							; 3138					; BITS DO NOT COME BACK) SO
							; 3139					; FE_-12.
							; 3140	=0
							; 3141	JFFOL:	[BR]_[BR]*2,		;SHIFT LEFT
							; 3142		FE_FE+4,		;COUNT UP BIT NUMBER
U 0054, 0054,3445,0505,4174,4007,0520,1000,0041,0004	; 3143		SKIP DP0, J/JFFOL	;LOOP TILL WE FIND THE BIT
U 0055, 1507,3777,0003,4334,4057,0700,0000,0041,0000	; 3144		[AR]_FE 		;GET ANSWER BACK
U 1507, 1564,4251,0303,4374,4007,0700,0000,0000,0077	; 3145		[AR]_[AR].AND.# CLR LH,#/77 ;MASK TO 1 COPY
U 1564, 0060,3440,0303,1174,4156,4700,0400,0000,1441	; 3146		AC[1]_[AR], NEXT INST	;STORE AND EXIT
							; 3147	
							; 3148	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 77
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ROTATES AND LOGICAL SHIFTS -- LSHC

							; 3149	.TOC	"ROTATES AND LOGICAL SHIFTS -- LSHC"
							; 3150	
							; 3151	;SHIFT CONNECTIONS WHEN THE SPECIAL FUNCTION "LSHC" IS DONE:
							; 3152	;
							; 3153	;   !-!   !----!------------------------------------!
							; 3154	;   !0!-->!0000!	 HIGH ORDER 36 BITS	    !  RAM FILE
							; 3155	;   !-!   !----!------------------------------------!
							; 3156	;						   ^
							; 3157	;						   :
							; 3158	;		....................................
							; 3159	;		:
							; 3160	;	  !----!------------------------------------!
							; 3161	;	  !0000!	  LOW ORDER 36 BITS	    !  Q-REGISTER
							; 3162	;	  !----!------------------------------------!
							; 3163	;						   ^
							; 3164	;						   :
							; 3165	;						  !-!
							; 3166	;						  !0!
							; 3167	;						  !-!
							; 3168	;
							; 3169	
							; 3170	1464:
U 1464, 0120,4443,0000,4174,4007,0630,2000,0060,0000	; 3171	LSHC:	STEP SC, J/LSHCL
U 1465, 1575,3333,0003,4174,4007,0700,2000,0031,5777	; 3172	1465:	READ [AR], SC_-SHIFT-1
U 1575, 0056,4443,0000,4174,4007,0630,2000,0060,0000	; 3173		STEP SC
							; 3174	=0
U 0056, 0056,3446,0505,4174,4057,0630,2000,0060,0000	; 3175	LSHCR:	[BR]_[BR]*.5 LONG,STEP SC,LSHC,J/LSHCR
U 0057, 1645,3444,0505,4174,4007,0700,0000,0000,0000	; 3176		[BR]_[BR]*2 LONG,J/LSHCX
							; 3177	
							; 3178	=0
U 0120, 0120,3444,0505,4174,4057,0630,2000,0060,0000	; 3179	LSHCL:	[BR]_[BR]*2 LONG,LSHC,STEP SC,J/LSHCL
U 0121, 1645,3444,0505,4174,4007,0700,0000,0000,0000	; 3180		[BR]_[BR]*2 LONG
U 1645, 1646,3444,0505,4174,4007,0700,0000,0000,0000	; 3181	LSHCX:	[BR]_[BR]*2 LONG
U 1646, 2004,3440,0505,0174,4007,0700,0400,0000,0000	; 3182		AC_[BR], J/ASHCQ1
							; 3183	
							; 3184	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 78
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ROTATES AND LOGICAL SHIFTS -- ASHC

							; 3185	.TOC	"ROTATES AND LOGICAL SHIFTS -- ASHC"
							; 3186	
							; 3187	
							; 3188	1466:
							; 3189	ASHC:	READ [AR],		;PUT AR ON DP
							; 3190		SC_SHIFT, LOAD FE,	;PUT SHIFT IN BOTH SC AND FE
U 1466, 0122,3333,0003,4174,4007,0330,3000,0041,4000	; 3191		SKIP ADR.EQ.0		;SEE IF NULL SHIFT
							; 3192	=0	Q_AC[1],		;NOT NULL--GET LOW WORD
U 0122, 1745,3772,0000,1275,5007,0701,0000,0000,1441	; 3193		J/ASHC1 		;CONTINUE BELOW
U 0123, 0060,4443,0000,4174,4156,4700,0000,0000,0000	; 3194	NIDISP: NEXT INST		;NULL--ALL DONE
							; 3195	ASHC1:	[BR]_AC*.5 LONG,	;GET HIGH WORD
							; 3196					;AND SHIFT Q
U 1745, 0124,3776,0005,0274,4007,0631,0000,0000,0000	; 3197		SKIP/SC 		;SEE WHICH DIRECTION
							; 3198	=0	[BR]_[BR]*.5,		;ADJUST POSITION
							; 3199		SC_FE+S#, S#/1776,	;SUBRTACT 2 FROM FE
U 0124, 0130,3447,0505,4174,4007,0700,2000,0041,1776	; 3200		J/ASHCL 		;GO LEFT
							; 3201		[BR]_[BR]*.5,		;ADJUST POSITION
U 0125, 0126,3447,0505,4174,4007,0700,2000,0031,1776	; 3202		SC_S#-FE, S#/1776	;SC_-2-FE, SC_+# OF STEPS
							; 3203	=0				;HERE TO GO RIGHT
							; 3204	ASHCR:	[BR]_[BR]*.5 LONG,	;GO RIGHT
							; 3205		ASHC,			;SET DATA PATHS FOR ASHC (SEE DPE1)
U 0126, 0126,3446,0505,4174,4047,0630,2000,0060,0000	; 3206		STEP SC, J/ASHCR	;COUNT THE STEP AND KEEP LOOPING
							; 3207		[BR]_[BR]*2 LONG,	;PUT BACK WHERE IT GOES
U 0127, 2000,3444,0505,4174,4047,0700,0000,0000,0000	; 3208		ASHC, J/ASHCX		;COMPLETE INSTRUCTION
							; 3209	
							; 3210	=0
							; 3211	ASHCL:	[BR]_[BR]*2 LONG,	;GO LEFT
							; 3212		ASHC, ASH AROV, 	;SEE IF OVERFLOW
U 0130, 0130,3444,0505,4174,4447,0630,2000,0060,0000	; 3213		STEP SC, J/ASHCL	;LOOP OVER ALL PLACES
							; 3214		[BR]_[BR]*2 LONG,	;SHIFT BACK WHERE IT GOES
U 0131, 2000,3444,0505,4174,4447,0700,0000,0000,0000	; 3215		ASHC, ASH AROV		;CAN STILL OVERFLOW
							; 3216	ASHCX:	AC_[BR]+[BR], 3T,	;PUT BACK HIGH WORD
U 2000, 0132,0113,0505,0174,4007,0521,0400,0000,0000	; 3217		SKIP DP0		;SEE HOW TO FIX LOW SIGN
							; 3218	=0	Q_Q.AND.#, #/377777,	;POSITIVE, CLEAR LOW SIGN
U 0132, 2004,4662,0000,4374,0007,0700,0000,0037,7777	; 3219		HOLD RIGHT, J/ASHCQ1	;GO STORE ANSWER
							; 3220		Q_Q.OR.#, #/400000,	;NEGATIVE, SET LOW SIGN
U 0133, 2004,3662,0000,4374,0007,0700,0000,0040,0000	; 3221		HOLD RIGHT		;IN LEFT HALF
U 2004, 0060,3223,0000,1174,4156,4700,0400,0000,1441	; 3222	ASHCQ1: AC[1]_Q, NEXT INST	;PUT BACK Q AND EXIT
							; 3223	
							; 3224	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 79
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ROTATES AND LOGICAL SHIFTS -- ROTC

							; 3225	.TOC	"ROTATES AND LOGICAL SHIFTS -- ROTC"
							; 3226	
							; 3227	;SHIFT CONNECTIONS WHEN THE SPECIAL FUNCTION "ROTC" IS DONE:
							; 3228	;
							; 3229	;	  !----!------------------------------------!
							; 3230	;   .....>!0000!	 HIGH ORDER 36 BITS	    !  RAM FILE
							; 3231	;   :	  !----!------------------------------------!
							; 3232	;   :						   ^
							; 3233	;   :						   :
							; 3234	;   :	............................................
							; 3235	;   :	:
							; 3236	;   :	: !----!------------------------------------!
							; 3237	;   :	..!0000!	  LOW ORDER 36 BITS	    !  Q-REGISTER
							; 3238	;   :	  !----!------------------------------------!
							; 3239	;   :						   ^
							; 3240	;   :						   :
							; 3241	;   :..............................................:
							; 3242	;
							; 3243	
							; 3244	1470:
U 1470, 0140,4443,0000,4174,4007,0630,2000,0060,0000	; 3245	ROTC:	STEP SC, J/ROTCL
U 1471, 2021,3333,0003,4174,4007,0700,2000,0031,5777	; 3246	1471:	READ [AR], SC_-SHIFT-1
U 2021, 0134,4443,0000,4174,4007,0630,2000,0060,0000	; 3247		STEP SC
							; 3248	=0
U 0134, 0134,3446,0505,4174,4077,0630,2000,0060,0000	; 3249	ROTCR:	[BR]_[BR]*.5 LONG,STEP SC,ROTC,J/ROTCR
U 0135, 1645,3444,0505,4174,4007,0700,0000,0000,0000	; 3250		[BR]_[BR]*2 LONG,J/LSHCX
							; 3251	
							; 3252	=0
U 0140, 0140,3444,0505,4174,4077,0630,2000,0060,0000	; 3253	ROTCL:	[BR]_[BR]*2 LONG,ROTC,STEP SC,J/ROTCL
							; 3254		[BR]_[BR]*2 LONG,
U 0141, 1645,3444,0505,4174,4007,0700,0000,0000,0000	; 3255		J/LSHCX
							; 3256	
							; 3257	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 80
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	CIRC

							; 3258	.TOC	"CIRC"
							; 3259	
							; 3260	.IF/CIRC
							; 3261	
							; 3262	1665:
U 1665, 2026,3772,0000,1275,5007,0701,0000,0000,1441	; 3263	CIRC:	Q_AC[1] 		;PUT LOW WORD IN Q
U 2026, 2037,3776,0005,0274,4007,0701,0000,0000,0000	; 3264		[BR]_AC*.5 LONG 	;PUT AC IN BR & SHIFT BR!Q RIGHT
U 2037, 2047,3446,0505,4174,4007,0700,0000,0000,0000	; 3265		[BR]_[BR]*.5 LONG	;SHIFT BR!Q 1 MORE PLACE RIGHT
							; 3266		READ [AR],		;LOOK AT EFFECTIVE ADDRESS
							; 3267		 SKIP DP18,		;SEE IF LEFT OR RIGHT
U 2047, 0142,3333,0003,4174,4007,0530,2000,0041,5777	; 3268		 SC_SHIFT-1		;PUT NUMBER OF PLACES TO SHIFT IN
							; 3269					; SC AND FE (ASSUMING LEFT SHIFT)
U 0142, 0144,4443,0000,4174,4007,0630,2000,0060,0000	; 3270	=0	STEP SC, J/CIRCL	;GO LEFT SHIFT
U 0143, 2053,3333,0003,4174,4007,0700,2000,0031,5777	; 3271		READ [AR], SC_-SHIFT-1	;CORRECT FOR RIGHT SHIFT
U 2053, 0146,4443,0000,4174,4007,0630,2000,0060,0000	; 3272		STEP SC, J/CIRCR	;GO RIGHT SHIFT
							; 3273	
U 2132, 2136,3446,0505,4174,4077,0700,0000,0000,0000	; 3274	CIRCLA:	[BR]_[BR]*.5 LONG, ROTC		;BOTH WORDS RIGHT
U 2136, 0144,3445,0505,4174,4037,0630,2000,0060,0000	; 3275		[BR]_[BR]*2, ROT, STEP SC	;FIRST WORD LEFT, STEP
							; 3276	=0
U 0144, 2132,3445,0505,4174,4037,0700,0000,0000,0000	; 3277	CIRCL:	[BR]_[BR]*2, ROT, J/CIRCLA	;FIRST WORD LEFT
U 0145, 1645,3444,0505,4174,4007,0700,0000,0000,0000	; 3278		[BR]_[BR]*2 LONG, J/LSHCX	;DONE
							; 3279	
U 2206, 2217,3444,0505,4174,4077,0700,0000,0000,0000	; 3280	CIRCRA:	[BR]_[BR]*2 LONG, ROTC		;BOTH WORDS LEFT
U 2217, 0146,3447,0505,4174,4037,0630,2000,0060,0000	; 3281		[BR]_[BR]*.5, ROT, STEP SC	;FIRST WORD RIGHT, STEP
							; 3282	=0
U 0146, 2206,3447,0505,4174,4037,0700,0000,0000,0000	; 3283	CIRCR:	[BR]_[BR]*.5, ROT, J/CIRCRA	;FIRST WORD RIGHT
U 0147, 1645,3444,0505,4174,4007,0700,0000,0000,0000	; 3284		[BR]_[BR]*2 LONG, J/LSHCX	;DONE
							; 3285	
							; 3286	.ENDIF/CIRC
							; 3287	
							; 3288	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 81
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	TEST GROUP

							; 3289	.TOC	"TEST GROUP"
							; 3290	
							; 3291		.DCODE
							; 3292	
							; 3293	;SPECIAL MACROS USED ONLY IN B-FIELD OF TEST INSTRUCTIONS
							; 3294	TN-		"B/4"
							; 3295	TNE		"B/0"
							; 3296	WORD-TNE	"B/10"	;USED IN TIOE
							; 3297	TNA		"B/0"
							; 3298	TNN		"B/4"
							; 3299	WORD-TNN	"B/14"	;USED IN TION
							; 3300	TZ-		"B/5"
							; 3301	TZE		"B/1"
							; 3302	TZA		"B/1"
							; 3303	TZN		"B/5"
							; 3304	TC-		"B/6"
							; 3305	TCE		"B/2"
							; 3306	TCA		"B/2"
							; 3307	TCN		"B/6"
							; 3308	TO-		"B/7"
							; 3309	TOE		"B/3"
							; 3310	TOA		"B/3"
							; 3311	TON		"B/7"
							; 3312	
D 0600, 0000,1400,2100					; 3313	600:	I,		J/DONE		;TRN- IS NOP
D 0601, 0000,1400,2100					; 3314		I,		J/DONE		;SO IS TLN-
D 0602, 0000,1475,2100					; 3315		I,	TNE,	J/TDXX
D 0603, 0000,1474,2100					; 3316		I,	TNE,	J/TSXX
D 0604, 0000,1473,2100					; 3317		I,	TNA,	J/TDX
D 0605, 0000,1472,2100					; 3318		I,	TNA,	J/TSX
D 0606, 0004,1475,2100					; 3319		I,	TNN,	J/TDXX
D 0607, 0004,1474,2100					; 3320		I,	TNN,	J/TSXX
							; 3321	
D 0610, 0000,1400,2100					; 3322	610:	I,		J/DONE		;TDN- IS A NOP
D 0611, 0000,1400,2100					; 3323		I,		J/DONE		;TSN- ALSO
D 0612, 0000,1475,1100					; 3324		R,	TNE,	J/TDXX
D 0613, 0000,1474,1100					; 3325		R,	TNE,	J/TSXX
D 0614, 0000,1473,1100					; 3326		R,	TNA,	J/TDX
D 0615, 0000,1472,1100					; 3327		R,	TNA,	J/TSX
D 0616, 0004,1475,1100					; 3328		R,	TNN,	J/TDXX
D 0617, 0004,1474,1100					; 3329		R,	TNN,	J/TSXX
							; 3330	
D 0620, 0005,1473,2100					; 3331	620:	I,	TZ-,	J/TDX
D 0621, 0005,1472,2100					; 3332		I,	TZ-,	J/TSX
D 0622, 0001,1475,2100					; 3333		I,	TZE,	J/TDXX
D 0623, 0001,1474,2100					; 3334		I,	TZE,	J/TSXX
D 0624, 0001,1473,2100					; 3335		I,	TZA,	J/TDX
D 0625, 0001,1472,2100					; 3336		I,	TZA,	J/TSX
D 0626, 0005,1475,2100					; 3337		I,	TZN,	J/TDXX
D 0627, 0005,1474,2100					; 3338		I,	TZN,	J/TSXX
							; 3339	
D 0630, 0005,1473,1100					; 3340	630:	R,	TZ-,	J/TDX
D 0631, 0005,1472,1100					; 3341		R,	TZ-,	J/TSX
D 0632, 0001,1475,1100					; 3342		R,	TZE,	J/TDXX
D 0633, 0001,1474,1100					; 3343		R,	TZE,	J/TSXX
D 0634, 0001,1473,1100					; 3344		R,	TZA,	J/TDX
D 0635, 0001,1472,1100					; 3345		R,	TZA,	J/TSX
D 0636, 0005,1475,1100					; 3346		R,	TZN,	J/TDXX
D 0637, 0005,1474,1100					; 3347		R,	TZN,	J/TSXX
							; 3348	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 82
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	TEST GROUP

							; 3349	
D 0640, 0006,1473,2100					; 3350	640:	I,	TC-,	J/TDX
D 0641, 0006,1472,2100					; 3351		I,	TC-,	J/TSX
D 0642, 0002,1475,2100					; 3352		I,	TCE,	J/TDXX
D 0643, 0002,1474,2100					; 3353		I,	TCE,	J/TSXX
D 0644, 0002,1473,2100					; 3354		I,	TCA,	J/TDX
D 0645, 0002,1472,2100					; 3355		I,	TCA,	J/TSX
D 0646, 0006,1475,2100					; 3356		I,	TCN,	J/TDXX
D 0647, 0006,1474,2100					; 3357		I,	TCN,	J/TSXX
							; 3358	
D 0650, 0006,1473,1100					; 3359	650:	R,	TC-,	J/TDX
D 0651, 0006,1472,1100					; 3360		R,	TC-,	J/TSX
D 0652, 0002,1475,1100					; 3361		R,	TCE,	J/TDXX
D 0653, 0002,1474,1100					; 3362		R,	TCE,	J/TSXX
D 0654, 0002,1473,1100					; 3363		R,	TCA,	J/TDX
D 0655, 0002,1472,1100					; 3364		R,	TCA,	J/TSX
D 0656, 0006,1475,1100					; 3365		R,	TCN,	J/TDXX
D 0657, 0006,1474,1100					; 3366		R,	TCN,	J/TSXX
D 0660, 0007,1473,2100					; 3367	660:	I,	TO-,	J/TDX
D 0661, 0007,1472,2100					; 3368		I,	TO-,	J/TSX
D 0662, 0003,1475,2100					; 3369		I,	TOE,	J/TDXX
D 0663, 0003,1474,2100					; 3370		I,	TOE,	J/TSXX
D 0664, 0003,1473,2100					; 3371		I,	TOA,	J/TDX
D 0665, 0003,1472,2100					; 3372		I,	TOA,	J/TSX
D 0666, 0007,1475,2100					; 3373		I,	TON,	J/TDXX
D 0667, 0007,1474,2100					; 3374		I,	TON,	J/TSXX
							; 3375	
D 0670, 0007,1473,1100					; 3376	670:	R,	TO-,	J/TDX
D 0671, 0007,1472,1100					; 3377		R,	TO-,	J/TSX
D 0672, 0003,1475,1100					; 3378		R,	TOE,	J/TDXX
D 0673, 0003,1474,1100					; 3379		R,	TOE,	J/TSXX
D 0674, 0003,1473,1100					; 3380		R,	TOA,	J/TDX
D 0675, 0003,1472,1100					; 3381		R,	TOA,	J/TSX
D 0676, 0007,1475,1100					; 3382		R,	TON,	J/TDXX
D 0677, 0007,1474,1100					; 3383		R,	TON,	J/TSXX
							; 3384	
							; 3385		.UCODE
							; 3386	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 83
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	TEST GROUP

							; 3387	
							; 3388	;THESE 64 INSTRUCTIONS ARE DECODED BY MASK MODE(IMMEDIATE OR MEMORY)
							; 3389	; IN THE A FIELD, DISPATCH TO HERE ON THE J FIELD, AND RE-DISPATCH
							; 3390	; FOR THE MODIFICATION ON THE B FIELD.
							; 3391	
							; 3392	; ENTER WITH 0,E OR (E) IN AR, B FIELD BITS 2 AND 3 AS FOLLOWS:
							; 3393	; 0 0	NO MODIFICATION
							; 3394	; 0 1	0S
							; 3395	; 1 0	COMPLEMENT
							; 3396	; 1 1	ONES
							; 3397	;   THIS ORDER HAS NO SIGNIFICANCE EXCEPT THAT IT CORRESPONDS TO THE
							; 3398	;   ORDER OF INSTRUCTIONS AT TGROUP.
							; 3399	
							; 3400	;THE BIT 1 OF THE B FIELD IS USED TO DETERMINE THE SENSE
							; 3401	; OF THE SKIP
							; 3402	; 1	SKIP IF AC.AND.MASK .NE. 0 (TXX- AND TXXN)
							; 3403	; 0	SKIP IF AC.AND.MASK .EQ. 0 (TXXA AND TXXE)
							; 3404	
							; 3405	;BIT 0 IS UNUSED AND MUST BE ZERO
							; 3406	
							; 3407	
							; 3408	1472:
U 1472, 1473,3770,0303,4344,4007,0700,0000,0000,0000	; 3409	TSX:	[AR]_[AR] SWAP		;TSXX AND TLXX
							; 3410	1473:
U 1473, 0154,4221,0005,4174,4003,7700,0000,0000,0000	; 3411	TDX:	[BR]_0,TEST DISP	; ALWAYS AND NEVER SKIP CASES
							; 3412	
							; 3413	1474:
U 1474, 1475,3770,0303,4344,4007,0700,0000,0000,0000	; 3414	TSXX:	[AR]_[AR] SWAP		;TSXE, TSXN, TLXE, TLXN
							; 3415	1475:
							; 3416	TDXX:	[BR]_[AR].AND.AC,	;TDXE, TDXN, TRXE, TRXN
U 1475, 0154,4551,0305,0274,4003,7700,0000,0000,0000	; 3417		TEST DISP
							; 3418	
							; 3419	;TEST DISP DOES AN 8 WAY BRANCH BASED ON THE B-FIELD OF DROM
							; 3420	
							; 3421	=1100
							; 3422	TEST-TABLE:
							; 3423	
							; 3424	;CASE 0 & 4	-- TXNX
U 0154, 1400,3333,0005,4174,4007,0571,0000,0000,0000	; 3425	TXXX:	READ [BR], TXXX TEST, 3T, J/DONE
							; 3426	
							; 3427	;CASE 1 & 5 -- TXZ AND TXZX
U 0155, 2250,7441,0303,4174,4007,0700,0000,0000,0000	; 3428		[AR]_.NOT.[AR],J/TXZX
							; 3429	
							; 3430	;CASE 2 & 6 -- TXC AND TXCX
U 0156, 2261,6551,0303,0274,4007,0700,0000,0000,0000	; 3431		[AR]_[AR].XOR.AC,J/TDONE
							; 3432	
							; 3433	;CASE 3 & 7 -- TXO AND TXOX
U 0157, 2261,3551,0303,0274,4007,0700,0000,0000,0000	; 3434		[AR]_[AR].OR.AC,J/TDONE
							; 3435	
							; 3436	;THE SPECIAL FUNCTION TXXX TEST CAUSES A MICROCODE SKIP IF
							; 3437	; AD.EQ.0 AND DROM B IS 0-3 OR AD.NE.0 AND DROM B IS 4-7.
							; 3438	
U 2250, 2261,4551,0303,0274,4007,0700,0000,0000,0000	; 3439	TXZX:	[AR]_[AR].AND.AC
U 2261, 0154,3440,0303,0174,4007,0700,0400,0000,0000	; 3440	TDONE:	AC_[AR],J/TXXX
							; 3441	;	READ BR,TXXX TEST,J/DONE
							; 3442	
							; 3443	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 84
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	COMPARE -- CAI, CAM

							; 3444	.TOC	"COMPARE -- CAI, CAM"
							; 3445	
							; 3446		.DCODE
							; 3447	
							; 3448	;SPECIAL B-FIELD ENCODING USED BY SKIP-JUMP-COMPARE CLASS
							; 3449	; INSTRUCTIONS:
							; 3450	
							; 3451	SJC-	"B/0"	;NEVER
							; 3452	SJCL	"B/1"	;LESS
							; 3453	SJCE	"B/2"	;EQUAL
							; 3454	SJCLE	"B/3"	;LESS EQUAL
							; 3455	SJCA	"B/4"	;ALWAYS
							; 3456	SJCGE	"B/5"	;GREATER THAN OR EQUAL
							; 3457	SJCN	"B/6"	;NOT EQUAL
							; 3458	SJCG	"B/7"	;GREATER
							; 3459	
							; 3460		.UCODE
							; 3461	
							; 3462	;COMPARE TABLE
							; 3463	=1000
							; 3464	SKIP-COMP-TABLE:
							; 3465	
							; 3466	;CASE 0 -- NEVER
U 0170, 0070,3443,0100,4174,4156,4700,0200,0014,0012	; 3467		DONE
							; 3468	
							; 3469	;CASE 1 -- LESS
U 0171, 1400,3333,0003,4174,4007,0520,0000,0000,0000	; 3470		READ [AR], SKIP DP0,J/DONE
							; 3471	
							; 3472	;CASE 2 -- EQUAL
U 0172, 1400,3333,0003,4174,4007,0621,0000,0000,0000	; 3473	SKIPE:	READ [AR], SKIP AD.EQ.0,J/DONE
							; 3474	
							; 3475	;CASE 3 -- LESS OR EQUAL
U 0173, 1400,3333,0003,4174,4007,0421,0000,0000,0000	; 3476		READ [AR], SKIP AD.LE.0,J/DONE
							; 3477	
							; 3478	;CASE 4 -- ALWAYS
U 0174, 0070,0111,0701,4170,4156,4700,0200,0014,0012	; 3479		VMA_[PC]+1, NEXT INST FETCH, FETCH
							; 3480	
							; 3481	;CASE 5 -- GREATER THAN OR EQUAL
U 0175, 0014,3333,0003,4174,4007,0520,0000,0000,0000	; 3482		READ [AR], SKIP DP0,J/SKIP
							; 3483	
							; 3484	;CASE 6 -- NOT EQUAL
U 0176, 0014,3333,0003,4174,4007,0621,0000,0000,0000	; 3485		READ [AR], SKIP AD.EQ.0,J/SKIP
							; 3486	
							; 3487	;CASE 7 -- GREATER
U 0177, 0014,3333,0003,4174,4007,0421,0000,0000,0000	; 3488		READ [AR], SKIP AD.LE.0,J/SKIP
							; 3489	
							; 3490		.DCODE
D 0300, 0000,1400,2100					; 3491	300:	I,	SJC-,	J/DONE	;CAI
D 0301, 0001,1476,2100					; 3492		I,	SJCL,	J/CAIM
D 0302, 0002,1476,2100					; 3493		I,	SJCE,	J/CAIM
D 0303, 0003,1476,2100					; 3494		I,	SJCLE,	J/CAIM
D 0304, 0004,1476,2100					; 3495		I,	SJCA,	J/CAIM
D 0305, 0005,1476,2100					; 3496		I,	SJCGE,	J/CAIM
D 0306, 0006,1476,2100					; 3497		I,	SJCN,	J/CAIM
D 0307, 0007,1476,2100					; 3498		I,	SJCG,	J/CAIM
							; 3499	
D 0310, 0000,1476,1100					; 3500	310:	R,	SJC-,	J/CAIM	;CAM
D 0311, 0001,1476,1100					; 3501		R,	SJCL,	J/CAIM
D 0312, 0002,1476,1100					; 3502		R,	SJCE,	J/CAIM
D 0313, 0003,1476,1100					; 3503		R,	SJCLE,	J/CAIM
D 0314, 0004,1476,1100					; 3504		R,	SJCA,	J/CAIM
D 0315, 0005,1476,1100					; 3505		R,	SJCGE,	J/CAIM
D 0316, 0006,1476,1100					; 3506		R,	SJCN,	J/CAIM
D 0317, 0007,1476,1100					; 3507		R,	SJCG,	J/CAIM
							; 3508		.UCODE
							; 3509	
							; 3510	1476:
U 1476, 0170,2551,0303,0274,4003,7701,4000,0000,0000	; 3511	CAIM:	[AR]_AC-[AR], 3T, SKIP-COMP DISP
							; 3512	
							; 3513	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 85
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC SKIPS -- AOS, SOS, SKIP

							; 3514	.TOC	"ARITHMETIC SKIPS -- AOS, SOS, SKIP"
							; 3515	;ENTER WITH (E) IN AR
							; 3516	
							; 3517		.DCODE
D 0330, 0000,1477,1100					; 3518	330:	R,	SJC-,	J/SKIPS ;NOT A NOP IF AC .NE. 0
D 0331, 0001,1477,1100					; 3519		R,	SJCL,	J/SKIPS
D 0332, 0002,1477,1100					; 3520		R,	SJCE,	J/SKIPS
D 0333, 0003,1477,1100					; 3521		R,	SJCLE,	J/SKIPS
D 0334, 0004,1477,1100					; 3522		R,	SJCA,	J/SKIPS
D 0335, 0005,1477,1100					; 3523		R,	SJCGE,	J/SKIPS
D 0336, 0006,1477,1100					; 3524		R,	SJCN,	J/SKIPS
D 0337, 0007,1477,1100					; 3525		R,	SJCG,	J/SKIPS
							; 3526		.UCODE
							; 3527	
							; 3528	1477:
							; 3529	SKIPS:	FIX [AR] SIGN,
U 1477, 0150,3770,0303,4174,0007,0360,0000,0000,0000	; 3530		SKIP IF AC0
U 0150, 0170,3440,0303,0174,4003,7700,0400,0000,0000	; 3531	=0	AC_[AR],SKIP-COMP DISP
U 0151, 0170,4443,0000,4174,4003,7700,0000,0000,0000	; 3532		SKIP-COMP DISP
							; 3533	
							; 3534		.DCODE
D 0350, 0000,1431,1500					; 3535	350:	RW,	SJC-,	J/AOS
D 0351, 0001,1431,1500					; 3536		RW,	SJCL,	J/AOS
D 0352, 0002,1431,1500					; 3537		RW,	SJCE,	J/AOS
D 0353, 0003,1431,1500					; 3538		RW,	SJCLE,	J/AOS
D 0354, 0004,1431,1500					; 3539		RW,	SJCA,	J/AOS
D 0355, 0005,1431,1500					; 3540		RW,	SJCGE,	J/AOS
D 0356, 0006,1431,1500					; 3541		RW,	SJCN,	J/AOS
D 0357, 0007,1431,1500					; 3542		RW,	SJCG,	J/AOS
							; 3543		.UCODE
							; 3544	
							; 3545	1431:
U 1431, 2312,0111,0703,4174,4467,0701,0000,0001,0001	; 3546	AOS:	[AR]_[AR]+1, 3T, AD FLAGS
U 2312, 2316,4443,0000,4174,4007,0700,0200,0003,0002	; 3547	XOS:	START WRITE
U 2316, 1477,3333,0003,4175,5007,0701,0200,0000,0002	; 3548		MEM WRITE,MEM_[AR],J/SKIPS
							; 3549	
							; 3550		.DCODE
D 0370, 0000,1437,1500					; 3551	370:	RW,	SJC-,	J/SOS
D 0371, 0001,1437,1500					; 3552		RW,	SJCL,	J/SOS
D 0372, 0002,1437,1500					; 3553		RW,	SJCE,	J/SOS
D 0373, 0003,1437,1500					; 3554		RW,	SJCLE,	J/SOS
D 0374, 0004,1437,1500					; 3555		RW,	SJCA,	J/SOS
D 0375, 0005,1437,1500					; 3556		RW,	SJCGE,	J/SOS
D 0376, 0006,1437,1500					; 3557		RW,	SJCN,	J/SOS
D 0377, 0007,1437,1500					; 3558		RW,	SJCG,	J/SOS
							; 3559		.UCODE
							; 3560	
							; 3561	1437:
U 1437, 2312,1111,0703,4174,4467,0701,4000,0001,0001	; 3562	SOS:	[AR]_[AR]-1, 3T, AD FLAGS, J/XOS
							; 3563	
							; 3564	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 86
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	CONDITIONAL JUMPS -- JUMP, AOJ, SOJ, AOBJ

							; 3565	.TOC	"CONDITIONAL JUMPS -- JUMP, AOJ, SOJ, AOBJ"
							; 3566	; ENTER WITH E IN AR
							; 3567	
							; 3568	=1000
							; 3569	JUMP-TABLE:
							; 3570	
							; 3571	;CASE 0 -- NEVER
U 0210, 0060,3440,0505,0174,4156,4700,0400,0000,0000	; 3572		AC_[BR], NEXT INST
							; 3573	
							; 3574	;CASE 1 -- LESS
U 0211, 0152,3770,0505,0174,4007,0520,0400,0000,0000	; 3575		AC_[BR] TEST, SKIP DP0, J/JUMP-
							; 3576	
							; 3577	;CASE 2 -- EQUAL
U 0212, 0152,3770,0505,0174,4007,0621,0400,0000,0000	; 3578		AC_[BR] TEST, SKIP AD.EQ.0, J/JUMP-
							; 3579	
							; 3580	;CASE 3 -- LESS THAN OR EQUAL
U 0213, 0152,3770,0505,0174,4007,0421,0400,0000,0000	; 3581		AC_[BR] TEST, SKIP AD.LE.0, J/JUMP-
							; 3582	
							; 3583	;CASE 4 -- ALWAYS
U 0214, 0160,3440,0505,0174,4007,0700,0400,0000,0000	; 3584	JMPA:	AC_[BR], J/JUMPA
							; 3585	
							; 3586	;CASE 5 -- GREATER THAN OR EQUAL TO
U 0215, 0160,3770,0505,0174,4007,0520,0400,0000,0000	; 3587		AC_[BR] TEST, SKIP DP0, J/JUMPA
							; 3588	
							; 3589	;CASE 6 -- NOT EQUAL
U 0216, 0160,3770,0505,0174,4007,0621,0400,0000,0000	; 3590		AC_[BR] TEST, SKIP AD.EQ.0, J/JUMPA
							; 3591	
							; 3592	;CASE 7 -- GREATER
U 0217, 0160,3770,0505,0174,4007,0421,0400,0000,0000	; 3593		AC_[BR] TEST, SKIP AD.LE.0, J/JUMPA
							; 3594	
							; 3595	=0
U 0152, 0070,3443,0100,4174,4156,4700,0200,0014,0012	; 3596	JUMP-:	DONE
U 0153, 0070,3441,0301,4170,4156,4700,0200,0014,0012	; 3597		JUMPA
							; 3598	
							; 3599	=0
U 0160, 0070,3441,0301,4170,4156,4700,0200,0014,0012	; 3600	JUMPA:	JUMPA
U 0161, 0070,3443,0100,4174,4156,4700,0200,0014,0012	; 3601		DONE
							; 3602	
							; 3603	
							; 3604		.DCODE
D 0320, 0000,1400,2100					; 3605	320:	I,	SJC-,	J/DONE
D 0321, 0001,1440,2100					; 3606		I,	SJCL,	J/JUMP
D 0322, 0002,1440,2100					; 3607		I,	SJCE,	J/JUMP
D 0323, 0003,1440,2100					; 3608		I,	SJCLE,	J/JUMP
D 0324, 0004,1520,2100					; 3609		I,	SJCA,	J/JRST
D 0325, 0005,1440,2100					; 3610		I,	SJCGE,	J/JUMP
D 0326, 0006,1440,2100					; 3611		I,	SJCN,	J/JUMP
D 0327, 0007,1440,2100					; 3612		I,	SJCG,	J/JUMP
							; 3613		.UCODE
							; 3614	
							; 3615	1440:
U 1440, 0210,3771,0005,0276,6003,7700,0000,0000,0000	; 3616	JUMP:	[BR]_AC,JUMP DISP
							; 3617	
							; 3618		.DCODE
D 0340, 0000,1611,3000					; 3619	340:	I-PF,	SJC-,	J/AOJ
D 0341, 0001,1611,2100					; 3620		I,	SJCL,	J/AOJ
D 0342, 0002,1611,2100					; 3621		I,	SJCE,	J/AOJ
D 0343, 0003,1611,2100					; 3622		I,	SJCLE,	J/AOJ
D 0344, 0004,1611,2100					; 3623		I,	SJCA,	J/AOJ
D 0345, 0005,1611,2100					; 3624		I,	SJCGE,	J/AOJ
D 0346, 0006,1611,2100					; 3625		I,	SJCN,	J/AOJ
D 0347, 0007,1611,2100					; 3626		I,	SJCG,	J/AOJ
							; 3627		.UCODE
							; 3628	
							; 3629	1611:
U 1611, 0210,0551,0705,0274,4463,7702,0000,0001,0001	; 3630	AOJ:	[BR]_AC+1, AD FLAGS, 4T, JUMP DISP
							; 3631	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 87
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	CONDITIONAL JUMPS -- JUMP, AOJ, SOJ, AOBJ

							; 3632	
							; 3633		.DCODE
D 0360, 0000,1542,3000					; 3634	360:	I-PF,	SJC-,	J/SOJ
D 0361, 0001,1542,2100					; 3635		I,	SJCL,	J/SOJ
D 0362, 0002,1542,2100					; 3636		I,	SJCE,	J/SOJ
D 0363, 0003,1542,2100					; 3637		I,	SJCLE,	J/SOJ
D 0364, 0004,1542,2100					; 3638		I,	SJCA,	J/SOJ
D 0365, 0005,1542,2100					; 3639		I,	SJCGE,	J/SOJ
D 0366, 0006,1542,2100					; 3640		I,	SJCN,	J/SOJ
D 0367, 0007,1542,2100					; 3641		I,	SJCG,	J/SOJ
							; 3642		.UCODE
							; 3643	
							; 3644	1542:
U 1542, 0210,2551,0705,0274,4463,7702,4000,0001,0001	; 3645	SOJ:	[BR]_AC-1, AD FLAGS, 4T, JUMP DISP
							; 3646	
							; 3647		.DCODE
D 0252, 0005,1547,2100					; 3648	252:	I,	SJCGE,	J/AOBJ
D 0253, 0001,1547,2100					; 3649		I,	SJCL,	J/AOBJ
							; 3650		.UCODE
							; 3651	
							; 3652	1547:
							; 3653	AOBJ:	[BR]_AC+1000001,	;ADD 1 TO BOTH HALF WORDS
							; 3654		INH CRY18, 3T,		;NO CARRY INTO LEFT HALF
U 1547, 0210,0551,1505,0274,4403,7701,0000,0000,0000	; 3655		JUMP DISP		;HANDLE EITHER AOBJP OR AOBJN
							; 3656	
							; 3657	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 88
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	AC DECODE JUMPS -- JRST, JFCL

							; 3658	.TOC	"AC DECODE JUMPS -- JRST, JFCL"
							; 3659	
							; 3660		.DCODE
D 0254, 0000,1520,6000					; 3661	254:	I,VMA/0, AC DISP,	J/JRST	;DISPATCHES TO 1 OF 16
							; 3662						; PLACES ON AC BITS
D 0255, 0000,1540,2100					; 3663		I,			J/JFCL
							; 3664		.UCODE
							; 3665	
							; 3666	;JRST DISPATCHES TO ONE OF 16 LOC'NS ON AC BITS
							; 3667	
							; 3668	=0000
							; 3669	1520:
U 1520, 0070,3441,0301,4170,4156,4700,0200,0014,0012	; 3670	JRST:	JUMPA			;(0) JRST 0,
U 1521, 0070,3441,0301,4170,4156,4700,0200,0014,0012	; 3671	1521:	JUMPA			;(1) PORTAL IS SAME AS JRST
							; 3672	1522:	VMA_[PC]-1, START READ, ;(2) JRSTF
U 1522, 0064,1113,0701,4170,4007,0700,4200,0004,0012	; 3673		J/JRSTF
U 1523, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3674	1523:	UUO			;(3)
U 1524, 0162,4443,0000,4174,4007,0340,0000,0000,0000	; 3675	1524:	SKIP KERNEL, J/HALT	;(4) HALT
							; 3676	1525:
							; 3677	XJRSTF0: VMA_[AR], START READ, ;(5) XJRSTF
U 1525, 2356,3443,0300,4174,4007,0700,0200,0004,0012	; 3678		J/XJRSTF
U 1526, 0240,4443,0000,4174,4007,0340,0000,0000,0000	; 3679	1526:	SKIP KERNEL, J/XJEN	;(6) XJEN
U 1527, 0166,4443,0000,4174,4007,0340,0000,0000,0000	; 3680	1527:	SKIP KERNEL, J/XPCW	;(7) XPCW
							; 3681	1530:	VMA_[PC]-1, START READ, ;(10)
U 1530, 0164,1113,0701,4170,4007,0040,4200,0004,0012	; 3682		 SKIP IO LEGAL, J/JRST10
U 1531, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3683	1531:	UUO			;(11)
							; 3684	1532:	VMA_[PC]-1, START READ, ;(12) JEN
U 1532, 0220,1113,0701,4170,4007,0040,4200,0004,0012	; 3685		 SKIP IO LEGAL, J/JEN
U 1533, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3686	1533:	UUO			;(13)
U 1534, 0202,4443,0000,4174,4007,0340,0000,0000,0000	; 3687	1534:	SKIP KERNEL, J/SFM	;(14) SFM
U 1535, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3688	1535:	UUO			;(15)
U 1536, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3689	1536:	UUO			;(16)
U 1537, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3690	1537:	UUO			;(17)
							; 3691	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 89
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	AC DECODE JUMPS -- JRST, JFCL

							; 3692	
							; 3693	=0*
							; 3694	JRSTF:	MEM READ,		;WAIT FOR DATA
							; 3695		[HR]_MEM,		;STICK IN HR
							; 3696		LOAD INST EA,		;LOAD @ AND XR
U 0064, 2326,3771,0002,4365,5217,0700,0210,0000,0002	; 3697		CALL [JRST0]		;COMPUTE EA AGAIN
U 0066, 0070,3441,0301,4170,4156,4700,0200,0014,0012	; 3698		JUMPA			;JUMP
							; 3699	
U 2326, 0110,4443,0000,2174,4006,6700,0000,0000,0000	; 3700	JRST0:	EA MODE DISP		;WHAT TYPE OF EA?
							; 3701	=100*
							; 3702		READ XR,		;INDEXED
							; 3703		LOAD FLAGS,		;GET FLAGS FROM XR
							; 3704		UPDATE USER,		;ALLOW USER TO SET
U 0110, 0002,3773,0000,2274,4464,1700,0000,0001,0004	; 3705		RETURN [2]		;ALL DONE
							; 3706		READ [HR],		;PLAIN
							; 3707		LOAD FLAGS,		;LOAD FLAGS FROM INST
							; 3708		UPDATE USER,		;ALLOW USER TO SET
U 0112, 0002,3333,0002,4174,4464,1700,0000,0001,0004	; 3709		RETURN [2]		;RETURN
							; 3710		[HR]_[HR]+XR,		;BOTH
							; 3711		LOAD VMA,		;FETCH IND WORD
							; 3712		START READ,		;START MEM CYCLE
U 0114, 2336,0551,0202,2270,4007,0700,0200,0004,0012	; 3713		J/JRST1 		;CONTINUE BELOW
							; 3714		VMA_[HR],		;INDIRECT
							; 3715		START READ,		;FETCH IND WORD
							; 3716		PXCT EA,		;SETUP PXCT STUFF
U 0116, 2336,3443,0200,4174,4007,0700,0200,0004,0112	; 3717		J/JRST1 		;CONTINUE BELOW
							; 3718	JRST1:	MEM READ,		;WAIT FOR DATA
							; 3719		[HR]_MEM,		;LOAD THE HR
							; 3720		LOAD INST EA,		;LOAD @ AND XR
U 2336, 2326,3771,0002,4365,5217,0700,0200,0000,0002	; 3721		J/JRST0 		;LOOP BACK
							; 3722	
							; 3723	=0
U 0162, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3724	HALT:	UUO			;USER MODE
U 0163, 2346,3441,0301,4174,4007,0700,0000,0000,0000	; 3725		[PC]_[AR]		;EXEC MODE--CHANGE PC
U 2346, 2364,4751,1217,4374,4007,0700,0000,0000,0001	; 3726		HALT [HALT]		;HALT INSTRUCTION
							; 3727	
							; 3728	=0
U 0164, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3729	JRST10: UUO
U 0165, 0223,4443,0000,4174,4007,0700,0000,0000,0000	; 3730		J/JEN2			;DISMISS INTERRUPT
							; 3731	=0000
U 0220, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3732	JEN:	UUO			; FLAGS
							; 3733		MEM READ,
							; 3734		[HR]_MEM,		;GET INST
							; 3735		LOAD INST EA,		;LOAD XR & @
U 0221, 2326,3771,0002,4365,5217,0700,0210,0000,0002	; 3736		CALL [JRST0]		;COMPUTE FLAGS
							; 3737	=0011
U 0223, 2302,4553,1400,4374,4007,0331,0010,0007,7400	; 3738	JEN2:	DISMISS 		;DISMISS INTERRUPT
U 0227, 3411,3770,1416,4344,4007,0700,0010,0000,0000	; 3739	=0111	CALL LOAD PI		;RELOAD PI HARDWARE
U 0237, 0070,3441,0301,4170,4156,4700,0200,0014,0012	; 3740	=1111	JUMPA			;GO JUMP
							; 3741	=
							; 3742	
							; 3743	1540:
							; 3744	JFCL:	JFCL FLAGS,		;ALL DONE IN HARDWARE
							; 3745		SKIP JFCL,		;SEE IF SKIPS
							; 3746		3T,			;ALLOW TIME
U 1540, 0152,4443,0000,4174,4467,0551,0000,0001,0010	; 3747		J/JUMP- 		;JUMP IF WE SHOULD
							; 3748	
							; 3749	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 90
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	EXTENDED ADDRESSING INSTRUCTIONS

							; 3750	.TOC	"EXTENDED ADDRESSING INSTRUCTIONS"
							; 3751	
							; 3752	=0000
U 0240, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3753	XJEN:	UUO			;HERE IF USER MODE
U 0241, 2302,4553,1400,4374,4007,0331,0010,0007,7400	; 3754		DISMISS 		;CLEAR HIGHEST INTERRUPT
U 0245, 0255,3333,0012,4174,4437,0700,0000,0000,0000	; 3755	=0101	READ [MASK], LOAD PI	;NO MORE INTERRUPTS
							; 3756	=1101	ABORT MEM CYCLE,	;AVOID INTERRUPT PAGE FAIL
U 0255, 1525,4223,0000,4364,4277,0700,0200,0000,0010	; 3757		J/XJRSTF0		;START READING FLAG WORD
							; 3758	=
							; 3759	
U 2356, 2365,3771,0005,4365,5007,0700,0200,0000,0002	; 3760	XJRSTF: MEM READ, [BR]_MEM	;PUT FLAGS IN BR
							; 3761		[AR]_[AR]+1,		;INCREMENT ADDRESS
							; 3762		LOAD VMA,		;PUT RESULT IN VMA
U 2365, 2366,0111,0703,4174,4007,0700,0200,0004,0012	; 3763		START READ		;START MEMORY
							; 3764		MEM READ, [PC]_MEM,	;PUT DATA IN PC
U 2366, 2375,3771,0001,4361,5007,0700,0200,0000,0002	; 3765		HOLD LEFT		;IGNORE SECTION NUMBER
							; 3766		READ [BR], LOAD FLAGS,	;LOAD NEW FLAGS
U 2375, 2437,3333,0005,4174,4467,0700,0000,0001,0004	; 3767		UPDATE USER		;ALSO USER FLAG
							; 3768	PISET:	[FLG]_[FLG].AND.NOT.#,	;CLEAR PI CYCLE
U 2437, 2241,5551,1313,4374,4007,0700,0000,0001,0000	; 3769		 FLG.PI/1, J/PIEXIT	;RELOAD PI HARDWARE
							; 3770					; INCASE THIS IS AN
							; 3771					; INTERRUPT INSTRUCTION
							; 3772	
							; 3773	=0
U 0166, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3774	XPCW:	UUO			;USER MODE
U 0167, 0200,4521,1205,4074,4007,0700,0000,0000,0000	; 3775		[BR]_FLAGS		;PUT FLAGS IN BR
							; 3776	=0*0
							; 3777	PIXPCW: VMA_[AR], START WRITE,	;STORE FLAGS
U 0200, 3472,3443,0300,4174,4007,0700,0210,0003,0012	; 3778		CALL [STOBR]		;PUT BR IN MEMORY
							; 3779	=1*0	VMA_[AR]+1, LOAD VMA,
							; 3780		START WRITE,		;PREPEARE TO STORE PC
U 0204, 3473,0111,0703,4170,4007,0700,0210,0003,0012	; 3781		CALL [STOPC]		;PUT PC IN MEMORY
							; 3782	=1*1	[AR]_[AR]+1,		;DO NEW PC PART
U 0205, 2356,0111,0703,4174,4007,0700,0200,0004,0002	; 3783		START READ, J/XJRSTF
							; 3784	=
							; 3785	
							; 3786	=0
U 0202, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3787	SFM:	UUO
U 0203, 2442,3443,0300,4174,4007,0700,0200,0003,0012	; 3788		VMA_[AR], START WRITE	;STORE FLAGS
U 2442, 0033,4521,1203,4074,4007,0700,0000,0000,0000	; 3789		[AR]_FLAGS, J/STORE	;STORE AND EXIT
							; 3790	
							; 3791	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 91
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	XCT, XCTR, XCTRI

							; 3792	.TOC	"XCT, XCTR, XCTRI"
							; 3793	
							; 3794		.DCODE
							; 3795	.IF/ITS
D 0102, 0000,1662,2100					; 3796	102:	I,		J/XCTRI
D 0103, 0000,1663,2100					; 3797		I,		J/XCTR
							; 3798	.ENDIF/ITS
D 0256, 0000,1541,1100					; 3799	256:	R,		J/XCT	;OPERAND FETCHED AS DATA
							; 3800		.UCODE
							; 3801	
							; 3802	.IF/ITS
							; 3803	1662:
U 1662, 0206,4443,0000,4174,4007,0340,0000,0000,0000	; 3804	XCTRI:	SKIP KERNEL, J/XCTR1
							; 3805	1663:
U 1663, 0206,4443,0000,4174,4007,0340,0000,0000,0000	; 3806	XCTR:	SKIP KERNEL, J/XCTR1
							; 3807	=0
U 0206, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 3808	XCTR1:	UUO
U 0207, 2444,3333,0002,4174,4167,0700,0200,0004,0002	; 3809		READ [HR], LOAD PXCT, START READ
U 2444, 1541,3771,0003,4365,5007,0700,0200,0000,0002	; 3810	=	MEM READ, [AR]_MEM, J/XCT
							; 3811	
							; 3812	1541:
							; 3813	XCT:	[HR]_[AR],		;STUFF INTO HR
							; 3814		 DBUS/DP,		;PLACE ON DBUS FOR IR
							; 3815		 LOAD INST,		;LOAD IR, AC, XR, ETC.
U 1541, 2446,3441,0302,4174,4617,0700,0000,0000,0100	; 3816		 PXCT/E1		;ALLOW XR TO BE PREVIOUS
							; 3817	XCT1:	WORK[YSAVE]_[HR] CLR LH,;SAVE FOR IO INSTRUCTIONS
U 2446, 0676,4713,1202,7174,4007,0700,0400,0000,0422	; 3818		 J/XCT2			;GO EXECUTE IT
							; 3819	.IFNOT/ITS
							; 3820	1541:
							; 3821	XCT:	SKIP KERNEL		;SEE IF MAY BE PXCT
							; 3822	=0
							; 3823	XCT1A:	[HR]_[AR],		;STUFF INTO HR
							; 3824		 DBUS/DP,		;PLACE ON DBUS FOR IR
							; 3825		 LOAD INST,		;LOAD IR, AC, XR, ETC.
							; 3826		 PXCT/E1,		;ALLOW XR TO BE PREVIOUS
							; 3827		 J/XCT1			;CONTINUE BELOW
							; 3828		READ [HR],		;LOAD PXCT FLAGS
							; 3829		 LOAD PXCT,		; ..
							; 3830		 J/XCT1A		;CONTINUE WITH NORMAL FLOW
							; 3831	
							; 3832	XCT1:	WORK[YSAVE]_[HR] CLR LH,;SAVE FOR IO INSTRUCTIONS
							; 3833		 J/XCT2			;GO EXECUTE IT
							; 3834	.ENDIF/ITS
							; 3835	
							; 3836	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 92
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	STACK INSTRUCTIONS -- PUSHJ, PUSH, POP, POPJ

							; 3837	.TOC	"STACK INSTRUCTIONS -- PUSHJ, PUSH, POP, POPJ"
							; 3838	
							; 3839		.DCODE
D 0260, 0000,1544,2100					; 3840	260:	I,	B/0,	J/PUSHJ
D 0261, 0002,1543,3100					; 3841		IR,	B/2,	J/PUSH
D 0262, 0002,1545,2100					; 3842		I,	B/2,	J/POP
D 0263, 0000,1546,2100					; 3843		I,		J/POPJ
							; 3844		.UCODE
							; 3845	
							; 3846	;ALL START WITH E IN AR
							; 3847	1543:
							; 3848	PUSH:	MEM READ,		;PUT MEMOP IN BR
U 1543, 2451,3771,0005,4365,5007,0700,0200,0000,0002	; 3849		[BR]_MEM		; ..
							; 3850	PUSH1:	[ARX]_AC+1000001,	;BUMP BOTH HALVES OF AC
							; 3851		INH CRY18,		;NO CARRY
							; 3852		LOAD VMA,		;START TO STORE ITEM
							; 3853		START WRITE,		;START MEM CYCLE
							; 3854		PXCT STACK WORD,	;THIS IS THE STACK DATA WORD
							; 3855		3T,			;ALLOW TIME
							; 3856		SKIP CRY0,		;GO TO STMAC, SKIP IF PDL OV
U 2451, 0224,0551,1504,0274,4407,0311,0200,0003,0712	; 3857		J/STMAC 		; ..
							; 3858	
							; 3859	1544:
							; 3860	PUSHJ:	[BR]_PC WITH FLAGS,	;COMPUTE UPDATED FLAGS
							; 3861		CLR FPD,		;CLEAR FIRST-PART-DONE
U 1544, 2451,3741,0105,4074,4467,0700,0000,0005,0000	; 3862		J/PUSH1 		; AND JOIN PUSH CODE
							; 3863	
							; 3864	=0
							; 3865	STMAC:	MEM WRITE,		;WAIT FOR MEMORY
							; 3866		MEM_[BR],		;STORE BR ON STACK
							; 3867		B DISP, 		;SEE IF PUSH OR PUSHJ
U 0224, 0230,3333,0005,4175,5003,7701,0200,0000,0002	; 3868		J/JSTAC 		;BELOW
							; 3869	;WE MUST STORE THE STACK WORD PRIOR TO SETTING PDL OV IN CASE OF
							; 3870	; PAGE FAIL.
							; 3871		MEM WRITE,		;WAIT FOR MEMORY
U 0225, 2522,3333,0005,4175,5007,0701,0200,0000,0002	; 3872		MEM_[BR]		;STORE BR
							; 3873	SETPDL: SET PDL OV,		;OVERFLOW
							; 3874		B DISP, 		;SEE IF PUSH OR PUSHJ
U 2522, 0230,4443,0000,4174,4463,7700,0000,0001,2000	; 3875		J/JSTAC 		;BELOW
							; 3876	
							; 3877	=00
							; 3878	JSTAC:	[PC]_[AR],		;PUSHJ--LOAD PC
							; 3879		LOAD VMA,		;LOAD ADDRESS
U 0230, 0231,3441,0301,4174,4007,0700,0200,0014,0012	; 3880		FETCH			;GET NEXT INST
							; 3881	JSTAC1: AC_[ARX],		;STORE BACK STACK PTR
U 0231, 0060,3440,0404,0174,4156,4700,0400,0000,0000	; 3882		NEXT INST		;DO NEXT INST
							; 3883		AC_[ARX],		;UPDATE STACK POINTER
U 0232, 1400,3440,0404,0174,4007,0700,0400,0000,0000	; 3884		J/DONE			;DO NEXT INST
							; 3885	=
							; 3886	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 93
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	STACK INSTRUCTIONS -- PUSHJ, PUSH, POP, POPJ

							; 3887	
							; 3888	1545:
							; 3889	POP:	[ARX]_AC,		;GET POINTER
							; 3890		LOAD VMA,		;ADDRESS OF STACK WORD
							; 3891		START READ, 3T,		;START CYCLE
U 1545, 2540,3771,0004,0276,6007,0701,0200,0004,0712	; 3892		PXCT STACK WORD 	;FOR PXCT
							; 3893	
							; 3894		MEM READ,		;LOAD BR (QUIT IF PAGE FAIL)
U 2540, 2541,3771,0005,4365,5007,0700,0200,0000,0002	; 3895		[BR]_MEM		;STACK WORD TO BR
							; 3896	
							; 3897		[ARX]_[ARX]+#,		;UPDATE POINTER
							; 3898		#/777777,		;-1 IN EACH HALF
							; 3899		INH CRY18, 3T,		;BUT NO CARRY
U 2541, 0234,0551,0404,4374,4407,0311,0000,0077,7777	; 3900		SKIP CRY0		;SEE IF OVERFLOW
							; 3901	
							; 3902	=0	VMA_[AR],		;EFFECTIVE ADDRESS
							; 3903		PXCT DATA,		;FOR PXCT
							; 3904		START WRITE,		;WHERE TO STORE RESULT
U 0234, 2543,3443,0300,4174,4007,0700,0200,0003,0312	; 3905		J/POPX1			;OVERFLOW
							; 3906	
							; 3907		VMA_[AR],		;EFFECTIVE ADDRESS
							; 3908		PXCT DATA,		;FOR PXCT
U 0235, 2542,3443,0300,4174,4007,0700,0200,0003,0312	; 3909		START WRITE		;WHERE TO STORE RESULT
							; 3910	
							; 3911		MEM WRITE,		;WAIT FOR MEM
							; 3912		MEM_[BR],		;STORE BR
							; 3913		B DISP, 		;POP OR POPJ?
U 2542, 0230,3333,0005,4175,5003,7701,0200,0000,0002	; 3914		J/JSTAC 		;STORE POINTER
							; 3915	
							; 3916	
							; 3917	POPX1:	MEM WRITE,		;WAIT FOR MEMORY
							; 3918		MEM_[BR],		;STORE BR
U 2543, 2522,3333,0005,4175,5007,0701,0200,0000,0002	; 3919		J/SETPDL		;GO SET PDL OV
							; 3920	
							; 3921	1546:
							; 3922	POPJ:	[ARX]_AC,		;GET POINTER
							; 3923		LOAD VMA,		;POINT TO STACK WORD
							; 3924		PXCT STACK WORD, 3T,	;FOR PXCT
U 1546, 2544,3771,0004,0276,6007,0701,0200,0004,0712	; 3925		START READ		;START READ
							; 3926		[ARX]_[ARX]+#,		;UPDATE POINTER
							; 3927		#/777777,		;-1 IN BOTH HALFS
							; 3928		INH CRY18, 3T,		;INHIBIT CARRY 18
U 2544, 0242,0551,0404,4374,4407,0311,0000,0077,7777	; 3929		SKIP CRY0		;SEE IF OVERFLOW
U 0242, 0243,4443,0000,4174,4467,0700,0000,0001,2000	; 3930	=0	SET PDL OV		;SET OVERFLOW
							; 3931		MEM READ, [PC]_MEM,	;STICK DATA IN PC
							; 3932		HOLD LEFT,		;NO FLAGS
U 0243, 0231,3771,0001,4361,5007,0700,0200,0000,0002	; 3933		J/JSTAC1		;STORE POINTER
							; 3934	
							; 3935	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 94
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	STACK INSTRUCTIONS -- ADJSP

							; 3936	.TOC	"STACK INSTRUCTIONS -- ADJSP"
							; 3937	
							; 3938		.DCODE
D 0105, 0000,1551,3000					; 3939	105:	I-PF,	B/0,		J/ADJSP
							; 3940		.UCODE
							; 3941	
							; 3942	1551:
							; 3943	ADJSP:	[AR]_[AR] SWAP, 	;MAKE 2 COPIES OF RH
U 1551, 2545,3770,0303,4344,0007,0700,0000,0000,0000	; 3944		HOLD RIGHT
							; 3945		[BR]_AC,		;READ AC, SEE IF MINUS
							; 3946		3T,
U 2545, 0246,3771,0005,0276,6007,0521,0000,0000,0000	; 3947		SKIP DP0
							; 3948	=0	AC_[BR]+[AR],		;UPDATE AC
							; 3949		INH CRY18,		;NO CARRY
							; 3950		SKIP DP0,		;SEE IF STILL OK
							; 3951		3T,			;ALLOW TIME
U 0246, 0250,0113,0503,0174,4407,0521,0400,0000,0000	; 3952		J/ADJSP1		;TEST FOR OFLO
							; 3953		AC_[BR]+[AR],		;UPDATE AC
							; 3954		INH CRY18,		;NO CARRY
							; 3955		SKIP DP0,		;SEE IF STILL MINUS
							; 3956		3T,			;ALLOW TIME FOR SKIP
U 0247, 0252,0113,0503,0174,4407,0521,0400,0000,0000	; 3957		J/ADJSP2		;CONTINUE BELOW
							; 3958	
							; 3959	=0
U 0250, 0060,4443,0000,4174,4156,4700,0000,0000,0000	; 3960	ADJSP1: NEXT INST		;NO OVERFLOW
							; 3961		SET PDL OV,		;SET PDL OV
U 0251, 0123,4443,0000,4174,4467,0700,0000,0001,2000	; 3962		J/NIDISP		;GO DO NICOND DISP
							; 3963	
							; 3964	=0
							; 3965	ADJSP2: SET PDL OV,		;SET PDL OV
U 0252, 0123,4443,0000,4174,4467,0700,0000,0001,2000	; 3966		J/NIDISP		;GO DO NICOND DISP
U 0253, 0060,4443,0000,4174,4156,4700,0000,0000,0000	; 3967		NEXT INST		;NO OVERFLOW
							; 3968	
							; 3969	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 95
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	SUBROUTINE CALL/RETURN -- JSR, JSP, JSA, JRA

							; 3970	.TOC	"SUBROUTINE CALL/RETURN -- JSR, JSP, JSA, JRA"
							; 3971	
							; 3972		.DCODE
D 0264, 0000,1552,2100					; 3973	264:	I,		J/JSR
D 0265, 0000,1550,2100					; 3974		I,		J/JSP
D 0266, 0000,1554,2100					; 3975		I,		J/JSA
D 0267, 0000,1555,2100					; 3976		I,		J/JRA
							; 3977		.UCODE
							; 3978	
							; 3979	1550:
U 1550, 2546,3741,0105,4074,4007,0700,0000,0000,0000	; 3980	JSP:	[BR]_PC WITH FLAGS	;GET PC WITH FLAGS
							; 3981		CLR FPD,		;CLEAR FIRST-PART-DONE
							; 3982		AC_[BR],		;STORE FLAGS
U 2546, 0160,3440,0505,0174,4467,0700,0400,0005,0000	; 3983		J/JUMPA 		;GO JUMP
							; 3984	
							; 3985	1552:
							; 3986	JSR:	[BR]_PC WITH FLAGS,	;GET PC WITH FLAGS
U 1552, 2547,3741,0105,4074,4467,0700,0000,0005,0000	; 3987		CLR FPD 		;CLEAR FIRST-PART-DONE
							; 3988		VMA_[AR],		;EFFECTIVE ADDRESS
U 2547, 2550,3443,0300,4174,4007,0700,0200,0003,0012	; 3989		START WRITE		;STORE OLD PC WORD
							; 3990		MEM WRITE,		;WAIT FOR MEMORY
U 2550, 2551,3333,0005,4175,5007,0701,0200,0000,0002	; 3991		MEM_[BR]		;STORE
							; 3992		[PC]_[AR]+1000001,	;PC _ E+1
							; 3993		HOLD LEFT,		;NO JUNK IN LEFT
							; 3994		3T,			;ALLOW TIME FOR DBM
U 2551, 0067,0551,0301,4370,4007,0701,0000,0000,0001	; 3995		J/START 		;START AT E+1
							; 3996	
							; 3997	
							; 3998	1554:
							; 3999	JSA:	[BR]_[AR],		;SAVE E
U 1554, 2552,3441,0305,4174,4007,0700,0200,0003,0002	; 4000		START WRITE		;START TO STORE
U 2552, 0260,3770,0304,4344,4007,0700,0000,0000,0000	; 4001		[ARX]_[AR] SWAP 	;ARX LEFT _ E
							; 4002	=0*0	[AR]_AC, 		;GET OLD AC
U 0260, 2714,3771,0003,0276,6007,0700,0010,0000,0000	; 4003		CALL [IBPX]		;SAVE AR IN MEMORY
							; 4004	=1*0	[ARX]_[PC],		;ARX NOW HAS E,,PC
							; 4005		HOLD LEFT,		; ..
U 0264, 3474,3441,0104,4170,4007,0700,0010,0000,0000	; 4006		CALL [AC_ARX]		;GO PUT ARX IN AC
							; 4007	=1*1	[PC]_[BR]+1000001,	;NEW PC
							; 4008		3T,			;ALLOW TIME
							; 4009		HOLD LEFT,		;NO JUNK IN PC LEFT
U 0265, 0067,0551,0501,4370,4007,0701,0000,0000,0001	; 4010		J/START 		;START AT E+1
							; 4011	=
							; 4012	
							; 4013	1555:
U 1555, 2553,3771,0005,0276,6007,0700,0000,0000,0000	; 4014	JRA:	[BR]_AC 		;GET AC
U 2553, 2554,3770,0505,4344,4007,0700,0000,0000,0000	; 4015		[BR]_[BR] SWAP		;OLD E IN BR RIGHT
							; 4016		VMA_[BR],		;LOAD VMA
U 2554, 2555,3443,0500,4174,4007,0700,0200,0004,0012	; 4017		START READ		;FETCH SAVED AC
							; 4018		MEM READ,		;WAIT FOR MEMORY
							; 4019		[BR]_MEM,		;LOAD BR WITH SAVE AC
U 2555, 0214,3771,0005,4365,5007,0700,0200,0000,0002	; 4020		J/JMPA			;GO JUMP
							; 4021	
							; 4022	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 96
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ILLEGAL INSTRUCTIONS AND UUO'S

							; 4023	.TOC	"ILLEGAL INSTRUCTIONS AND UUO'S"
							; 4024	;LUUO'S TRAP TO CURRENT CONTEXT
							; 4025	
							; 4026		.DCODE
D 0030, 0000,1557,2100					; 4027	030:	I,	B/0,	J/LUUO
D 0031, 0001,1557,2100					; 4028		I,	B/1,	J/LUUO
D 0032, 0002,1557,2100					; 4029		I,	B/2,	J/LUUO
D 0033, 0003,1557,2100					; 4030		I,	B/3,	J/LUUO
D 0034, 0004,1557,2100					; 4031		I,	B/4,	J/LUUO
D 0035, 0005,1557,2100					; 4032		I,	B/5,	J/LUUO
D 0036, 0006,1557,2100					; 4033		I,	B/6,	J/LUUO
D 0037, 0007,1557,2100					; 4034		I,	B/7,	J/LUUO
							; 4035	
							; 4036	;MONITOR UUO'S -- TRAP TO EXEC
							; 4037	
D 0040, 0000,1556,2100					; 4038	040:	I,		J/MUUO		;CALL
D 0041, 0000,1556,2100					; 4039		I,		J/MUUO		;INIT
D 0042, 0000,1556,2100					; 4040		I,		J/MUUO
D 0043, 0000,1556,2100					; 4041		I,		J/MUUO
D 0044, 0000,1556,2100					; 4042		I,		J/MUUO
D 0045, 0000,1556,2100					; 4043		I,		J/MUUO
D 0046, 0000,1556,2100					; 4044		I,		J/MUUO
D 0047, 0000,1556,2100					; 4045		I,		J/MUUO		;CALLI
D 0050, 0000,1556,2100					; 4046		I,		J/MUUO		;OPEN
D 0051, 0000,1556,2100					; 4047		I,		J/MUUO		;TTCALL
D 0052, 0000,1556,2100					; 4048		I,		J/MUUO
D 0053, 0000,1556,2100					; 4049		I,		J/MUUO
D 0054, 0000,1556,2100					; 4050		I,		J/MUUO
D 0055, 0000,1556,2100					; 4051		I,		J/MUUO		;RENAME
D 0056, 0000,1556,2100					; 4052		I,		J/MUUO		;IN
D 0057, 0000,1556,2100					; 4053		I,		J/MUUO		;OUT
D 0060, 0000,1556,2100					; 4054		I,		J/MUUO		;SETSTS
D 0061, 0000,1556,2100					; 4055		I,		J/MUUO		;STATO
D 0062, 0000,1556,2100					; 4056		I,		J/MUUO		;GETSTS
D 0063, 0000,1556,2100					; 4057		I,		J/MUUO		;STATZ
D 0064, 0000,1556,2100					; 4058		I,		J/MUUO		;INBUF
D 0065, 0000,1556,2100					; 4059		I,		J/MUUO		;OUTBUF
D 0066, 0000,1556,2100					; 4060		I,		J/MUUO		;INPUT
D 0067, 0000,1556,2100					; 4061		I,		J/MUUO		;OUTPUT
D 0070, 0000,1556,2100					; 4062		I,		J/MUUO		;CLOSE
D 0071, 0000,1556,2100					; 4063		I,		J/MUUO		;RELEAS
D 0072, 0000,1556,2100					; 4064		I,		J/MUUO		;MTAPE
D 0073, 0000,1556,2100					; 4065		I,		J/MUUO		;UGETF
D 0074, 0000,1556,2100					; 4066		I,		J/MUUO		;USETI
D 0075, 0000,1556,2100					; 4067		I,		J/MUUO		;USETO
D 0076, 0000,1556,2100					; 4068		I,		J/MUUO		;LOOKUP
D 0077, 0000,1556,2100					; 4069		I,		J/MUUO		;ENTER
							; 4070	
							; 4071	;EXPANSION OPCODES
							; 4072	
D 0100, 0000,1556,2100					; 4073	100:	I,		J/UUO		;UJEN
D 0101, 0000,1661,2100					; 4074		I,		J/UUO101
							; 4075	.IFNOT/ITS
							; 4076		I,		J/UUO102	;XCTRI in ITS
							; 4077		I,		J/UUO103	;XCTR in ITS
							; 4078	.ENDIF/ITS
							; 4079	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 97
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ILLEGAL INSTRUCTIONS AND UUO'S

							; 4080	
							; 4081	;RESERVED OPCODES
							; 4082	
D 0000, 0000,1556,2100					; 4083	000:	I,		J/UUO
D 0104, 0000,1664,2100					; 4084	104:	I,		J/JSYS		;JSYS
D 0106, 0000,1666,2100					; 4085	106:	I,		J/UUO106
D 0107, 0000,1667,2100					; 4086		I,		J/UUO107
D 0130, 0000,1660,2100					; 4087	130:	I,	B/0,	J/FP-LONG	;UFA
D 0131, 0001,1660,2100					; 4088		I,	B/1,	J/FP-LONG	;DFN
D 0141, 0002,1660,2100					; 4089	141:	I,	B/2,	J/FP-LONG	;FADL
D 0151, 0003,1660,2100					; 4090	151:	I,	B/3,	J/FP-LONG	;FSBL
D 0161, 0004,1660,2100					; 4091	161:	I,	B/4,	J/FP-LONG	;FMPL
D 0171, 0005,1660,2100					; 4092	171:	I,	B/5,	J/FP-LONG	;FDVL
							; 4093	.IFNOT/CIRC
							; 4094	247:	I,		J/UUO247	;RESERVED
							; 4095	.ENDIF/CIRC
							; 4096		.UCODE
							; 4097	
							; 4098	1661:
U 1661, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 4099	UUO101: UUO
							; 4100	
							; 4101	.IFNOT/ITS
							; 4102	1662:
							; 4103	UUO102: UUO			;XCTRI in ITS
							; 4104	1663:
							; 4105	UUO103: UUO			;XCTR in ITS
							; 4106	.ENDIF/ITS
							; 4107	
							; 4108	1664:
U 1664, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 4109	JSYS:	UUO
							; 4110	1666:
U 1666, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 4111	UUO106: UUO
							; 4112	1667:
U 1667, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 4113	UUO107: UUO
							; 4114	1660:
U 1660, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 4115	FP-LONG:UUO
							; 4116	.IFNOT/CIRC
							; 4117	1665:
							; 4118	UUO247: UUO
							; 4119	.ENDIF/CIRC
							; 4120	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 98
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ILLEGAL INSTRUCTIONS AND UUO'S

							; 4121	
							; 4122	;HERE FOR UUO'S WHICH TRAP TO EXEC
							; 4123	1556:
							; 4124	UUO:	;THIS TAG IS USED FOR ILLEGAL THINGS WHICH DO UUO TRAPS
							; 4125	MUUO:	;THIS TAG IS USED FOR MONITOR CALL INSTRUCTIONS
							; 4126		[HR]_[HR].AND.#,	;MASK OUT @ AND XR
							; 4127		#/777740,		;MASK
U 1556, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 4128		HOLD RIGHT		;KEEP RIGHT
							; 4129	;THE UUO MACRO DOES THE ABOVE INSTRUCTION AND GOES TO UUOGO
U 2556, 0256,4751,1204,4374,4007,0700,0000,0000,0424	; 4130	UUOGO:	[ARX]_0 XWD [424]	;HERE FROM UUO MACRO
							; 4131					;GET OFFSET TO UPT
							; 4132	=0	[ARX]_[ARX]+[UBR],	;ADDRESS OF MUUO WORD
U 0256, 3465,0111,1104,4174,4007,0700,0010,0000,0000	; 4133		CALL [ABORT]		;STOP MEMORY
							; 4134		READ [EBR],		;KL PAGING
U 0257, 0262,3333,0010,4174,4007,0520,0000,0000,0000	; 4135		SKIP DP0		; ??
							; 4136	=0	READ [ARX],		;GET THE ADDRESS
							; 4137		LOAD VMA,		;START WRITE
							; 4138		VMA PHYSICAL WRITE,	;ABSOLUTE ADDRESS
U 0262, 0304,3333,0004,4174,4007,0700,0200,0021,1016	; 4139		J/KIMUUO		;GO STORE KI STYLE
U 0263, 0266,3770,0203,4344,4007,0700,0000,0000,0000	; 4140		[AR]_[HR] SWAP		;PUT IN RIGHT HALF
							; 4141	=0	[AR]_FLAGS,		;FLAGS IN LEFT HALF
							; 4142		HOLD RIGHT,		;JUST WANT FLAGS
U 0266, 2564,4521,1203,4074,0007,0700,0010,0000,0000	; 4143		CALL [UUOFLG]		;CLEAR TRAP FLAGS
							; 4144		READ [ARX],		;LOOK AT ADDRESS
							; 4145		LOAD VMA,		;LOAD THE VMA
U 0267, 0074,3333,0004,4174,4007,0700,0200,0021,1016	; 4146		VMA PHYSICAL WRITE	;STORE FLAG WORD
							; 4147	=0*	MEM WRITE,		;WAIT FOR MEMORY
U 0074, 2565,3333,0003,4175,5007,0701,0210,0000,0002	; 4148		MEM_[AR], CALL [NEXT]	;STORE
							; 4149		MEM WRITE,		;WAIT FOR MEMORY
U 0076, 0270,3333,0001,4175,5007,0701,0200,0000,0002	; 4150		MEM_[PC]		;STORE FULL WORD PC
							; 4151	=000	[HR]_0, 		;SAVE E
U 0270, 2565,4221,0002,4174,0007,0700,0010,0000,0000	; 4152		HOLD RIGHT, CALL [NEXT]	;BUT CLEAR OPCODE
							; 4153	=010
							; 4154	UUOPCW: MEM WRITE,		;WAIT FOR MEMORY
							; 4155		MEM_[HR],		;STORE INSTRUCTION IN KI
							; 4156					; OR FULL WORD E IN KL
U 0272, 3350,3333,0002,4175,5007,0701,0210,0000,0002	; 4157		CALL [GETPCW]		;GET PROCESS-CONTEXT-WORD
							; 4158	
							; 4159	=011	NEXT [ARX] PHYSICAL WRITE, ;POINT TO NEXT WORD
U 0273, 3472,0111,0704,4170,4007,0700,0210,0023,1016	; 4160		CALL [STOBR]		;STORE PROCESS CONTEXT WORD
							; 4161	
							; 4162	;NOW WE MUST PICK ONE OF 8 NEW PC WORDS BASED ON PC FLAGS
U 0277, 2557,4751,1205,4374,4007,0700,0000,0000,0430	; 4163	=111	[BR]_0 XWD [430]	;OFFSET INTO UPT
							; 4164	=
U 2557, 2560,0111,1105,4174,4007,0700,0000,0000,0000	; 4165		[BR]_[BR]+[UBR] 	;ADDRESS OF WORD
U 2560, 2561,4521,1203,4074,4007,0700,0000,0000,0000	; 4166		[AR]_FLAGS		;GET FLAGS
							; 4167		TL [AR],		;LOOK AT FLAGS
U 2561, 0274,4553,0300,4374,4007,0321,0000,0000,0600	; 4168		#/600			;TRAP SET?
							; 4169	=0	[BR]_[BR].OR.#, 	;YES--POINT TO TRAP CASE
							; 4170		#/1,			; ..
U 0274, 0275,3551,0505,4370,4007,0700,0000,0000,0001	; 4171		HOLD LEFT		;LEAVE LEFT ALONE
							; 4172		TL [AR],		;USER OR EXEC
U 0275, 0300,4553,0300,4374,4007,0321,0000,0001,0000	; 4173		#/10000 		; ..
							; 4174	=0	[BR]_[BR].OR.#, 	;USER
							; 4175		#/4,			;POINT TO USER WORDS
U 0300, 0301,3551,0505,4370,4007,0700,0000,0000,0004	; 4176		HOLD LEFT
							; 4177		READ [BR],		;LOOK AT ADDRESS
							; 4178		LOAD VMA,		;PLACE IN VMA
							; 4179		VMA PHYSICAL,		;PHYSICAL ADDRESS
U 0301, 2562,3333,0005,4174,4007,0700,0200,0024,1016	; 4180		START READ		;GET NEW PC WORD
							; 4181		;;Page fault delivering code joins in here.
							; 4182		;;J/EAPF1	DEC Paging
							; 4183		;;J/PFTRAP1	ITS Paging
							; 4184	GOEXEC:	MEM READ,		;WAIT FOR DATA
U 2562, 2563,3771,0003,4365,5007,0700,0200,0000,0002	; 4185		 [AR]_MEM		;STICK IN AR
							; 4186		READ [AR],		;LOOK AT DATA
							; 4187		 LOAD FLAGS,		;LOAD NEW FLAGS
							; 4188		 LEAVE USER,		;ALLOW USER TO LOAD
							; 4189		 LOAD PCU,		;SET PCU FROM USER
U 2563, 0160,3333,0003,4174,4467,0700,0000,0000,0404	; 4190		 J/JUMPA 		;JUMP
							; 4191	
							; 4192	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 99
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ILLEGAL INSTRUCTIONS AND UUO'S

							; 4193	
							; 4194	;HERE FOR TOPS-10 STYLE PAGING
							; 4195	
							; 4196	=00
							; 4197	KIMUUO: MEM WRITE,		;STORE INSTRUCTION
U 0304, 2565,3333,0002,4175,5007,0701,0210,0000,0002	; 4198		MEM_[HR], CALL [NEXT]	;IN MEMORY
							; 4199	=10	[AR]_PC WITH FLAGS,	;GET PC WORD
U 0306, 2564,3741,0103,4074,4007,0700,0010,0000,0000	; 4200		CALL [UUOFLG]		;CLEAR TRAP FLAGS
							; 4201	=11	MEM WRITE,		;STORE PC WORD
							; 4202		MEM_[AR],		; ..
U 0307, 0272,3333,0003,4175,5007,0701,0200,0000,0002	; 4203		J/UUOPCW		;GO STORE PROCESS CONTEXT
							; 4204	
							; 4205	UUOFLG:	[AR]_[AR].AND.NOT.#,	;CLEAR TRAP FLAGS
							; 4206		#/600, HOLD RIGHT,	; IN WORD TO SAVE
U 2564, 0001,5551,0303,4374,0004,1700,0000,0000,0600	; 4207		RETURN [1]		; BACK TO CALLER
							; 4208	
							; 4209	NEXT:	NEXT [ARX] PHYSICAL WRITE, ;POINT TO NEXT WORD
U 2565, 0002,0111,0704,4170,4004,1700,0200,0023,1016	; 4210		RETURN [2]
							; 4211	
							; 4212	;HERE FOR LUUO'S
							; 4213	1557:
U 1557, 0400,4751,1203,4374,4007,0700,0000,0000,0040	; 4214	LUUO:	[AR]_0 XWD [40] 	;AR GET CONSTANT 40
							; 4215	;THE LUUO MACRO DOES THE ABOVE INSTRUCTION AND GOES TO LUUO1
							; 4216	400:				;FOR SIMULATOR
							; 4217	LUUO1:	READ [AR],		;LOAD 40 INTO
							; 4218		LOAD VMA,		; THE VMA AND
U 0400, 2566,3333,0003,4174,4007,0700,0200,0003,0012	; 4219		START WRITE		; PREPARE TO STORE
							; 4220		[HR]_[HR].AND.#,	;CLEAR OUT INDEX AND @
							; 4221		#/777740,		; ..
U 2566, 2567,4551,0202,4374,0007,0700,0000,0077,7740	; 4222		HOLD RIGHT
							; 4223		MEM WRITE,		;STORE LUUO IN 40
U 2567, 2570,3333,0002,4175,5007,0701,0200,0000,0002	; 4224		MEM_[HR]
							; 4225		VMA_[AR]+1,		;POINT TO 41
							; 4226		LOAD VMA,		;PUT 41 IN VMA
							; 4227		START READ,		;START FETCH
U 2570, 2401,0111,0703,4170,4007,0700,0200,0004,0012	; 4228		J/CONT1 		;GO EXECUTE THE INSTRUCTION
							; 4229	
							; 4230	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 100
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- ADD, SUB

							; 4231	.TOC	"ARITHMETIC -- ADD, SUB"
							; 4232	
							; 4233		.DCODE
D 0270, 1015,1560,1100					; 4234	270:	R-PF,	AC,	J/ADD
D 0271, 0015,1560,3000					; 4235		I-PF,	AC,	J/ADD
D 0272, 0016,1560,1700					; 4236		RW,	M,	J/ADD
D 0273, 0017,1560,1700					; 4237		RW,	B,	J/ADD
							; 4238		.UCODE
							; 4239	
							; 4240	1560:
							; 4241	ADD:	[AR]_[AR]+AC,		;DO THE ADD
U 1560, 1500,0551,0303,0274,4463,7701,0200,0001,0001	; 4242		AD FLAGS EXIT, 3T	;UPDATE CARRY FLAGS
							; 4243					;STORE ANSWER
							; 4244					;MISSES 3-TICKS BY 3 NS.
							; 4245	
							; 4246	
							; 4247		.DCODE
D 0274, 1015,1561,1100					; 4248	274:	R-PF,	AC,	J/SUB
D 0275, 0015,1561,3000					; 4249		I-PF,	AC,	J/SUB
D 0276, 0016,1561,1700					; 4250		RW,	M,	J/SUB
D 0277, 0017,1561,1700					; 4251		RW,	B,	J/SUB
							; 4252		.UCODE
							; 4253	
							; 4254	1561:
							; 4255	SUB:	[AR]_AC-[AR],		;DO THE SUBTRACT
U 1561, 1500,2551,0303,0274,4463,7701,4200,0001,0001	; 4256		AD FLAGS EXIT, 3T	;UPDATE PC CARRY FLAGS
							; 4257					;ALL DONE
							; 4258					;MISSES 3-TICKS BY 3 NS.
							; 4259	
							; 4260	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 101
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- DADD, DSUB

							; 4261	.TOC	"ARITHMETIC -- DADD, DSUB"
							; 4262	
							; 4263		.DCODE
D 0114, 0205,1457,1100					; 4264	114:	DBL R,	DAC,	J/DADD
D 0115, 0205,1615,1100					; 4265		DBL R,	DAC,	J/DSUB
							; 4266		.UCODE
							; 4267	
							; 4268	1457:
							; 4269	DADD:	[ARX]_[ARX]+AC[1], 4T,	;ADD LOW WORDS
U 1457, 0302,0551,0404,1274,4007,0562,0000,0000,1441	; 4270		SKIP CRY1		;SEE IF CARRY TO HIGH WORD
							; 4271	=0
							; 4272	DADD1:	[AR]_[AR]+AC,		;ADD HIGH WORDS
							; 4273		ADD .25,		;ADD IN ANY CARRY FROM LOW WORD
							; 4274		AD FLAGS, 4T,		;UPDATE PC FLAGS
U 0302, 2572,0551,0303,0274,4467,0702,4000,0001,0001	; 4275		J/CPYSGN		;COPY SIGN TO LOW WORD
U 0303, 2571,7441,1205,4174,4007,0700,0000,0000,0000	; 4276		[BR]_.NOT.[MASK]	;SET BITS 35 AND 36 IN
							; 4277		[AR]_[AR].OR.[BR],	; AR SO THAT ADD .25 WILL
U 2571, 0302,3111,0503,4170,4007,0700,0000,0000,0000	; 4278		HOLD LEFT, J/DADD1	; ADD 1.
							; 4279	
							; 4280	1615:
							; 4281	DSUB:	[ARX]_AC[1]-[ARX], 4T,	;SUBTRACT LOW WORD
U 1615, 0310,2551,0404,1274,4007,0562,4000,0000,1441	; 4282		SKIP CRY1		;SEE IF CARRY
							; 4283	=0	[AR]_AC-[AR]-.25,	;NO CARRY
							; 4284		AD FLAGS, 4T,		;UPDATE PC FLAGS
U 0310, 2572,2551,0303,0274,4467,0702,0000,0001,0001	; 4285		J/CPYSGN		;GO COPY SIGN
							; 4286		[AR]_AC-[AR], 4T,	;THERE WAS A CARRY
U 0311, 2572,2551,0303,0274,4467,0702,4000,0001,0001	; 4287		AD FLAGS		;UPDATE CARRY FLAGS
							; 4288	
U 2572, 0312,3770,0303,4174,0007,0520,0000,0000,0000	; 4289	CPYSGN: FIX [AR] SIGN, SKIP DP0
U 0312, 1404,4551,0404,4374,0007,0700,0000,0037,7777	; 4290	=0	[ARX]_[ARX].AND.#, #/377777, HOLD RIGHT, J/MOVE
U 0313, 1404,3551,0404,4374,0007,0700,0000,0040,0000	; 4291		[ARX]_[ARX].OR.#, #/400000, HOLD RIGHT, J/MOVE
							; 4292	
							; 4293	
							; 4294	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 102
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- MUL, IMUL

							; 4295	.TOC	"ARITHMETIC -- MUL, IMUL"
							; 4296	
							; 4297		.DCODE
D 0220, 1015,1641,1100					; 4298	220:	R-PF,	AC,	J/IMUL
D 0221, 0015,1641,3000					; 4299		I-PF,	AC,	J/IMUL
D 0222, 0016,1641,1700					; 4300		RW,	M,	J/IMUL
D 0223, 0017,1641,1700					; 4301		RW,	B,	J/IMUL
							; 4302		.UCODE
							; 4303	1641:
U 1641, 2573,3441,0306,0174,4007,0700,0000,0000,0000	; 4304	IMUL:	[BRX]_[AR], AC		;COPY C(E)
U 2573, 0100,3772,0000,0275,5007,0700,2000,0071,0043	; 4305		Q_AC, SC_35.		;GET THE AC
							; 4306	=0**	[BRX]_[BRX]*.5 LONG,	;SHIFT RIGHT
U 0100, 2617,3446,0606,4174,4007,0700,0010,0000,0000	; 4307		CALL [MULSUB]		;MULTIPLY
U 0104, 0314,3333,0004,4174,4007,0621,0000,0000,0000	; 4308		READ [ARX], SKIP AD.EQ.0 ;SEE IF FITS
U 0314, 2574,3445,0404,4174,4007,0700,0000,0000,0000	; 4309	=0	[ARX]_[ARX]*2, J/IMUL2	;NOT ZERO--SHIFT LEFT
U 0315, 1500,3221,0003,4174,4003,7700,0200,0003,0001	; 4310	IMUL1:	[AR]_Q, EXIT		;POSITIVE
							; 4311	
							; 4312	IMUL2:	[MASK].AND.NOT.[ARX],	;SEE IF ALL SIGN BITS
U 2574, 0316,5113,0412,4174,4007,0621,0000,0000,0000	; 4313		SKIP AD.EQ.0		; ..
							; 4314	=0	FIX [ARX] SIGN, 	;NOT ALL SIGN BITS
U 0316, 0320,3770,0404,4174,0007,0520,0000,0000,0000	; 4315		SKIP DP0, J/IMUL3	;GIVE + OR - OVERFLOW
U 0317, 1500,7001,0003,4174,4003,7700,0200,0003,0001	; 4316		[AR]_[MAG].EQV.Q, EXIT	;NEGATIVE
							; 4317	=0
U 0320, 1404,3221,0003,4174,4467,0700,0000,0041,1000	; 4318	IMUL3:	[AR]_Q, SET AROV, J/MOVE
U 0321, 1404,7001,0003,4174,4467,0700,0000,0041,1000	; 4319		[AR]_[MAG].EQV.Q, SET AROV, J/MOVE
							; 4320	
							; 4321	
							; 4322		.DCODE
D 0224, 1005,1571,1100					; 4323	224:	R-PF,	DAC,	J/MUL
D 0225, 0005,1571,3000					; 4324		I-PF,	DAC,	J/MUL
D 0226, 0016,1571,1700					; 4325		RW,	M,	J/MUL
D 0227, 0006,1571,1700					; 4326		RW,	DBL B,	J/MUL
							; 4327		.UCODE
							; 4328	
							; 4329	
							; 4330	1571:
U 1571, 2575,3442,0300,0174,4007,0700,0000,0000,0000	; 4331	MUL:	Q_[AR], AC		;COPY C(E)
U 2575, 2576,3441,0316,4174,4007,0700,0000,0000,0000	; 4332		[T0]_[AR]		;SAVE FOR OVERFLOW TEST
U 2576, 0102,3771,0006,0276,6007,0700,2000,0071,0043	; 4333		[BRX]_AC, SC_35.	;GET THE AC
							; 4334	=0**	[BRX]_[BRX]*.5 LONG,	;SHIFT OVER
U 0102, 2617,3446,0606,4174,4007,0700,0010,0000,0000	; 4335		CALL [MULSUB]		;MULTIPLY
U 0106, 2577,3445,0403,4174,4007,0700,0000,0000,0000	; 4336		[AR]_[ARX]*2		;SHIFT OVER
U 2577, 0322,3770,0303,4174,0007,0520,0000,0000,0000	; 4337		FIX [AR] SIGN, SKIP DP0 ;SEE IF NEGATIVE
							; 4338	=0	[ARX]_[MAG].AND.Q,	;POSITIVE
U 0322, 1500,4001,0004,4174,4003,7700,0200,0003,0001	; 4339		EXIT
U 0323, 0324,4113,0616,4174,4007,0520,0000,0000,0000	; 4340		[T0].AND.[BRX], SKIP DP0 ;TRIED TO SQUARE 1B0?
U 0324, 1500,7001,0004,4174,4003,7700,0200,0003,0001	; 4341	=0	[ARX]_[MAG].EQV.Q, EXIT	;NO
							; 4342		[ARX]_[MAG].EQV.Q, 	;YES 
U 0325, 1404,7001,0004,4174,4467,0700,0000,0041,1000	; 4343		SET AROV, J/MOVE
							; 4344	
							; 4345	
							; 4346	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 103
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- DMUL

							; 4347	.TOC	"ARITHMETIC -- DMUL"
							; 4348	
							; 4349		.DCODE
D 0116, 0205,1566,1100					; 4350	116:	DBL R,	DAC,		J/DMUL
							; 4351		.UCODE
							; 4352	
							; 4353	.IF/FULL
							; 4354	1566:
U 1566, 2600,3447,0303,4174,4007,0700,0000,0000,0000	; 4355	DMUL:	[AR]_[AR]*.5		;SHIFT MEM OPERAND RIGHT
U 2600, 2601,4117,0004,4174,4007,0700,0000,0000,0000	; 4356		[ARX]_([ARX].AND.[MAG])*.5
							; 4357		[BR]_[ARX],		;COPY LOW WORD
U 2601, 0330,3441,0405,4174,4007,0350,0000,0000,0000	; 4358		SKIP FPD		;SEE IF FIRST PART DONE
							; 4359	;
							; 4360	; BRX * BR ==> C(E+1) * C(AC+1)
							; 4361	;
							; 4362	=000	[BRX]_(AC[1].AND.[MAG])*.5, 3T, ;GET LOW AC
U 0330, 2613,4557,0006,1274,4007,0701,0010,0000,1441	; 4363		CALL [DMULGO]		;START MULTIPLY
							; 4364		[ARX]_(AC[2].AND.[MAG])*.5, 3T, ;FIRST PART DONE
U 0331, 2603,4557,0004,1274,4007,0701,0000,0000,1442	; 4365		J/DMUL1 		;GO DO SECOND PART
U 0334, 0222,3223,0000,1174,4007,0700,0400,0000,1443	; 4366	=100	AC[3]_Q 		;SALT AWAY 1 WORD OF PRODUCT
							; 4367	=
							; 4368	;
							; 4369	; BRX * Q ==> C(E) * C(AC+1)
							; 4370	;
							; 4371	=0**	Q_[AR], SC_35., 	;GO MULT NEXT HUNK
U 0222, 0341,3442,0300,4174,4007,0700,2010,0071,0043	; 4372		CALL [QMULT]		; ..
U 0226, 2602,3441,0416,4174,4007,0700,0000,0000,0000	; 4373		[T0]_[ARX]		;SAVE PRODUCT
							; 4374		AC[2]_Q, [ARX]_Q*.5,	;SAVE PRODUCT
U 2602, 0332,3227,0004,1174,4007,0700,0400,0000,1442	; 4375		J/DMUL2			;GO DO HIGH HALF
U 2603, 0332,3777,0016,1276,6007,0701,0000,0000,1441	; 4376	DMUL1:	[T0]_AC[1]*.5		;RESTORE T0
							; 4377	=0*0
							; 4378	;
							; 4379	; BRX * BR ==> C(AC) * C(E+1)
							; 4380	;
							; 4381	DMUL2:	[BRX]_AC*.5,		;PREPARE TO DO HIGH HALF
U 0332, 2614,3777,0006,0274,4007,0701,0010,0000,0000	; 4382		CALL [DBLMUL]		; GO DO IT
							; 4383		AC[1]_[T0]*2, 3T,	;INTERRUPT, SAVE T0
U 0333, 2616,0113,1616,1174,4007,0701,0400,0000,1441	; 4384		J/DMLINT		;SET FPD AND INTERRUPT
U 0336, 2604,3223,0000,1174,4007,0700,0400,0000,1442	; 4385		AC[2]_Q 		;SAVE PRODUCT
							; 4386	=
U 2604, 0340,0111,1604,4174,4007,0700,0000,0000,0000	; 4387		[ARX]_[ARX]+[T0]	;PREPARE FOR LAST MUL
							; 4388	;
							; 4389	; BRX * Q ==> C(AC) * C(E)
							; 4390	;
							; 4391	=0**	Q_[AR], SC_35., 	;DO THE LAST MULTIPLY
U 0340, 0341,3442,0300,4174,4007,0700,2010,0071,0043	; 4392		CALL [QMULT]		; GO DO IT
							; 4393		[ARX]_[ARX]*2,		;SHIFT BACK
U 0344, 2605,3445,0404,4174,4467,0700,0000,0005,0000	; 4394		CLR FPD 		;CLEAR FPD
							; 4395	
U 2605, 0326,3770,0404,0174,4007,0520,0400,0000,0000	; 4396		AC_[ARX] TEST, SKIP DP0 ;PUT BACK INTO AC
U 0326, 2612,3223,0000,1174,4007,0700,0400,0000,1441	; 4397	=0	AC[1]_Q, J/DMTRAP	;POSITIVE
U 0327, 2606,7003,0000,1174,4007,0700,0400,0000,1441	; 4398		AC[1]_[MAG].EQV.Q	;NEGATIVE
U 2606, 2607,3772,0000,1275,5007,0701,0000,0000,1442	; 4399		Q_AC[2]
U 2607, 2610,7003,0000,1174,4007,0700,0400,0000,1442	; 4400		AC[2]_[MAG].EQV.Q
U 2610, 2611,3772,0000,1275,5007,0701,0000,0000,1443	; 4401		Q_AC[3]
U 2611, 2612,7003,0000,1174,4007,0700,0400,0000,1443	; 4402		AC[3]_[MAG].EQV.Q
							; 4403	DMTRAP: [AR]_PC WITH FLAGS,	;LOOK AT FLAGS
U 2612, 0342,3741,0103,4074,4007,0520,0000,0000,0000	; 4404		SKIP DP0		;SEE IF AROV SET?
U 0342, 0070,3443,0100,4174,4156,4700,0200,0014,0012	; 4405	=0	DONE			;NO--ALL DONE
U 0343, 1400,4443,0000,4174,4467,0700,0000,0041,1000	; 4406		SET AROV, J/DONE	;YES--FORCE TRAP 1 ALSO
							; 4407	
							; 4408	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 104
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- DMUL

							; 4409	
							; 4410	;WAYS TO CALL MULTIPLY
U 2613, 2614,4221,0004,4174,4007,0700,0000,0000,0000	; 4411	DMULGO: [ARX]_0 		;CLEAR ARX
U 2614, 2615,3442,0500,4174,4007,0700,2000,0071,0043	; 4412	DBLMUL: Q_[BR], SC_35.
U 2615, 0341,3447,0606,4174,4007,0700,0000,0000,0000	; 4413		[BRX]_[BRX]*.5
							; 4414	=0**
							; 4415	QMULT:	Q_Q*.5,
U 0341, 2621,3446,1200,4174,4007,0700,0010,0000,0000	; 4416		CALL [MULTIPLY]
							; 4417		[ARX]+[ARX], AD FLAGS,	;TEST FOR OVERFLOW
U 0345, 0004,0113,0404,4174,4464,1701,0000,0001,0001	; 4418		3T, RETURN [4]		;AND RETURN
							; 4419	
U 2616, 2503,4443,0000,4174,4467,0700,0000,0003,0000	; 4420	DMLINT: SET FPD, J/FIXPC	;SET FPD, BACKUP PC
							; 4421					; INTERRUPT
							; 4422	.IFNOT/FULL
							; 4423	1566:
							; 4424	DMUL:	UUO
							; 4425	.ENDIF/FULL
							; 4426	
							; 4427	;MULTIPLY SUBROUTINE
							; 4428	;ENTERED WITH:
							; 4429	;	MULTIPLIER IN Q
							; 4430	;	MULTIPLICAND IN BRX
							; 4431	;RETURNS 4 WITH PRODUCT IN ARX!Q
							; 4432	
							; 4433	MUL STEP	"A/BRX,B/ARX,DEST/Q_Q*.5,ASHC,STEP SC,MUL DISP"
							; 4434	MUL FINAL	"A/BRX,B/ARX,DEST/Q_Q*2"
							; 4435	
U 2617, 2620,3446,0606,4174,4007,0700,0000,0000,0000	; 4436	MULSUB: [BRX]_[BRX]*.5 LONG
							; 4437	MULSB1: [ARX]_0*.5 LONG,	;CLEAR ARX AND SHIFT Q
							; 4438		STEP SC,		;COUNT FIRST STEP
U 2620, 0352,4226,0004,4174,4007,0630,2000,0060,0000	; 4439		J/MUL+			;ENTER LOOP
							; 4440	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 105
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- DMUL

							; 4441	
							; 4442	;MULTIPLY SUBROUTINE
							; 4443	;ENTERED WITH:
							; 4444	;	MULTIPLIER IN Q
							; 4445	;	MULTIPLICAND IN BRX
							; 4446	;	PARTIAL PRODUCT IN ARX
							; 4447	;RETURNS 4 WITH Q*BRX+ARX IN ARX!Q
							; 4448	
							; 4449	MULTIPLY:
							; 4450		Q_Q*.5, 		;SHIFT Q
							; 4451		STEP SC,		;COUNT FIRST STEP
U 2621, 0352,3446,1200,4174,4007,0630,2000,0060,0000	; 4452		J/MUL+			;ENTER LOOP
							; 4453	
							; 4454	;HERE FOR POSITIVE STEPS
							; 4455	=010				;0 IN A POSITIVE STEP
							; 4456	MUL+:	AD/B,			;DON'T ADD
							; 4457		MUL STEP,		;SHIFT
U 0352, 0352,3336,0604,4174,4046,2630,2000,0060,0000	; 4458		J/MUL+			;KEEP POSITIVE
							; 4459	=011				;DONE
							; 4460		AD/B,			;DON'T ADD
							; 4461		MUL FINAL,		;SHIFT
U 0353, 0004,3334,0604,4174,4004,1700,0000,0000,0000	; 4462		RETURN [4]		;SHIFT Q AND RETURN
							; 4463	=110				;1 IN A POSITIVE STEP
							; 4464		AD/B-A-.25, ADD .25,	;SUBTRACT
							; 4465		MUL STEP,		;SHIFT AND COUNT
U 0356, 0362,1116,0604,4174,4046,2630,6000,0060,0000	; 4466		J/MUL-			;NEGATIVE NOW
							; 4467	=111				;DONE
							; 4468		AD/B-A-.25, ADD .25,	;SUBTRACT
							; 4469		MUL FINAL,		;SHIFT
U 0357, 0004,1114,0604,4174,4004,1700,4000,0000,0000	; 4470		RETURN [4]		; AND RETURN
							; 4471	
							; 4472	;HERE FOR NEGATIVE STEPS
							; 4473	=010				;0 IN NEGATIVE STEP
							; 4474	MUL-:	AD/A+B, 		;ADD
							; 4475		MUL STEP,		;SHIFT AND COUNT
U 0362, 0352,0116,0604,4174,4046,2630,2000,0060,0000	; 4476		J/MUL+			;POSITIVE NOW
							; 4477	=011				;DONE
							; 4478		AD/A+B, 		;ADD
							; 4479		MUL FINAL,		;SHIFT
U 0363, 0004,0114,0604,4174,4004,1700,0000,0000,0000	; 4480		RETURN [4]			;FIX Q AND RETURN
							; 4481	=110				;1 IN NEGATIVE STEP
							; 4482		AD/B,			;DON'T ADD
							; 4483		MUL STEP,		;SHIFT AND COUNT
U 0366, 0362,3336,0604,4174,4046,2630,2000,0060,0000	; 4484		J/MUL-			;STILL NEGATIVE
							; 4485	=111				;DONE
							; 4486		AD/B,			;DON'T ADD
							; 4487		MUL FINAL,		;SHIFT
U 0367, 0004,3334,0604,4174,4004,1700,0000,0000,0000	; 4488		RETURN [4]			;FIX Q AND RETURN
							; 4489	
							; 4490	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 106
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- DIV, IDIV

							; 4491	.TOC	"ARITHMETIC -- DIV, IDIV"
							; 4492	
							; 4493		.DCODE
D 0230, 1005,1600,1100					; 4494	230:	R-PF,	DAC,	J/IDIV
D 0231, 0005,1600,3000					; 4495		I-PF,	DAC,	J/IDIV
D 0232, 0016,1600,1700					; 4496		RW,	M,	J/IDIV
D 0233, 0006,1600,1700					; 4497		RW,	DBL B,	J/IDIV
							; 4498	
D 0234, 1005,1601,1100					; 4499	234:	R-PF,	DAC,	J/DIV
D 0235, 0005,1601,3000					; 4500		I-PF,	DAC,	J/DIV
D 0236, 0016,1601,1700					; 4501		RW,	M,	J/DIV
D 0237, 0006,1601,1700					; 4502		RW,	DBL B,	J/DIV
							; 4503		.UCODE
							; 4504	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 107
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- DIV, IDIV

							; 4505	
							; 4506	1600:
U 1600, 2622,3441,0305,0174,4007,0700,0000,0000,0000	; 4507	IDIV:	[BR]_[AR], AC		;COPY MEMORY OPERAND
							; 4508		Q_AC,			;LOAD Q
U 2622, 0346,3772,0000,0275,5007,0520,0000,0000,0000	; 4509		SKIP DP0		;SEE IF MINUS
							; 4510	=0	[AR]_0, 		;EXTEND + SIGN
U 0346, 0371,4221,0003,4174,4007,0700,0000,0000,0000	; 4511		J/DIV1			;NOW SAME AS DIV
							; 4512		[AR]_-1,		;EXTEND - SIGN
U 0347, 0371,2441,0703,4174,4007,0700,4000,0000,0000	; 4513		J/DIV1			;SAME AS DIV
							; 4514	
							; 4515	1601:
U 1601, 2623,3441,0305,4174,4007,0700,0000,0000,0000	; 4516	DIV:	[BR]_[AR]		;COPY MEM OPERAND
U 2623, 2624,3771,0003,0276,6007,0700,0000,0000,0000	; 4517		[AR]_AC 		;GET AC
U 2624, 2625,3772,0000,1275,5007,0701,0000,0000,1441	; 4518		Q_AC[1] 		;AND AC+1
							; 4519		READ [AR],		;TEST FOR NO DIVIDE
U 2625, 0370,3333,0003,4174,4007,0621,0000,0000,0000	; 4520		SKIP AD.EQ.0
							; 4521	=000	.NOT.[AR],		;SEE IF ALL SIGN BITS IN AR
							; 4522		SKIP AD.EQ.0,		; ..
U 0370, 0350,7443,0300,4174,4007,0621,0000,0000,0000	; 4523		J/DIVA			;CONTINUE BELOW
							; 4524	=001
							; 4525	DIV1:	READ [BR],		;SEE IF DIVIDE BY
U 0371, 0374,3333,0005,4174,4007,0621,0000,0000,0000	; 4526		SKIP AD.EQ.0		; ZERO
							; 4527	=100
							; 4528	DIV2:	SC_34., 		;NOT ZERO--LOAD STEP COUNT
U 0374, 0510,4443,0000,4174,4007,0700,2010,0071,0042	; 4529		CALL [DIVSUB]		;DIVIDE
U 0375, 0123,4443,0000,4174,4467,0700,0000,0051,1000	; 4530	=101	NO DIVIDE		;DIVIDE BY ZERO
							; 4531	=110	[ARX]_[AR],		;COPY REMAINDER
U 0376, 0315,3441,0304,4174,4007,0700,0000,0000,0000	; 4532		J/IMUL1 		;STORE ANSWER
							; 4533	=
							; 4534	
							; 4535	
							; 4536	=0
							; 4537	DIVA:	[BRX]_[AR],		;HIGH WORD IS NOT SIGNS
U 0350, 2626,3441,0306,4174,4007,0700,0000,0000,0000	; 4538		J/DIVB			;GO TEST FOR NO DIVIDE
							; 4539		READ [BR],		;ALL SIGN BITS
							; 4540		SKIP AD.EQ.0,		;SEE IF ZERO DIVIDE
U 0351, 0374,3333,0005,4174,4007,0621,0000,0000,0000	; 4541		J/DIV2			;BACK TO MAIN FLOW
							; 4542	
U 2626, 2627,3221,0004,4174,4007,0700,0000,0000,0000	; 4543	DIVB:	[ARX]_Q 		;MAKE ABS VALUES
							; 4544		READ [AR],		;SEE IF +
U 2627, 0404,3333,0003,4174,4007,0520,0000,0000,0000	; 4545		SKIP DP0
							; 4546	=00	READ [BR],		;SEE IF +
							; 4547		SKIP DP0,
U 0404, 0354,3333,0005,4174,4007,0520,0000,0000,0000	; 4548		J/DIVC			;CONTINUE BELOW
							; 4549		CLEAR [ARX]0,		;FLUSH DUPLICATE SIGN
U 0405, 2710,4551,0404,4374,0007,0700,0010,0037,7777	; 4550		CALL [DBLNG1]		;NEGATE AR!ARX
							; 4551	=11	READ [BR],		;SEE IF TOO BIG
							; 4552		SKIP DP0,
U 0407, 0354,3333,0005,4174,4007,0520,0000,0000,0000	; 4553		J/DIVC
							; 4554	=
							; 4555	=0
							; 4556	DIVC:	[AR]-[BR],		;COMPUTE DIFFERENCE
							; 4557		SKIP DP0,		;SEE IF IT GOES
							; 4558		3T,			;ALLOW TIME
U 0354, 0360,2113,0305,4174,4007,0521,4000,0000,0000	; 4559		J/NODIV 		;TEST
							; 4560		[AR]+[BR],
							; 4561		SKIP DP0,		;SAME TEST FOR -VE BR
							; 4562		3T,
U 0355, 0360,0113,0305,4174,4007,0521,0000,0000,0000	; 4563		J/NODIV
							; 4564	=0
U 0360, 0123,4443,0000,4174,4467,0700,0000,0051,1000	; 4565	NODIV:	NO DIVIDE		;TOO BIG
							; 4566		[AR]_[BRX],		;FITS
U 0361, 0371,3441,0603,4174,4007,0700,0000,0000,0000	; 4567		J/DIV1			;GO BACK AND DIVIDE
							; 4568	
							; 4569	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 108
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- DDIV

							; 4570	.TOC	"ARITHMETIC -- DDIV"
							; 4571	
							; 4572		.DCODE
D 0117, 0205,1627,1100					; 4573	117:	DBL R,	DAC,	J/DDIV
							; 4574		.UCODE
							; 4575	
							; 4576	.IF/FULL
							; 4577	1627:
U 1627, 2630,4112,0400,4174,4007,0700,0000,0000,0000	; 4578	DDIV:	Q_[ARX].AND.[MAG]	;COPY LOW WORD
							; 4579		[BR]_[AR]*.5,		;COPY MEMORY OPERAND
U 2630, 0364,3447,0305,4174,4007,0421,0000,0000,0000	; 4580		SKIP AD.LE.0		;SEE IF POSITIVE
							; 4581	=0	[BR]_[BR]*.5 LONG,	;POSITIVE
U 0364, 0402,3446,0505,4174,4007,0700,0000,0000,0000	; 4582		J/DDIV1 		;CONTINUE BELOW
							; 4583		[BR]_[BR]*.5 LONG,	;NEGATIVE OR ZERO
U 0365, 0372,3446,0505,4174,4007,0520,0000,0000,0000	; 4584		SKIP DP0		;SEE WHICH?
							; 4585	=0	[MAG].AND.Q,		;SEE IF ALL ZERO
U 0372, 0402,4003,0000,4174,4007,0621,0000,0000,0000	; 4586		SKIP AD.EQ.0, J/DDIV1	;CONTINUE BELOW
U 0373, 2631,4751,1217,4374,4007,0700,0000,0000,0005	; 4587		[T1]_0 XWD [5]		;NEGATE MEM OP
							; 4588		Q_Q.OR.#, #/600000,	;SIGN EXTEND THE LOW
U 2631, 2632,3662,0000,4374,0007,0700,0000,0060,0000	; 4589		HOLD RIGHT		; WORD
U 2632, 2633,2222,0000,4174,4007,0700,4000,0000,0000	; 4590		Q_-Q			;MAKE Q POSITIVE
							; 4591		[BR]_(-[BR]-.25)*.5 LONG, ;NEGATE HIGH WORD
							; 4592		ASHC, MULTI PREC/1,	;USE CARRY FROM LOW WORD
U 2633, 2635,2446,0505,4174,4047,0700,0040,0000,0000	; 4593		J/DDIV3 		;CONTINUE BELOW
							; 4594	=0
							; 4595	DDIV1:	[BR]_[BR]*.5 LONG,	;SHIFT OVER 1 PLACE
U 0402, 2634,3446,0505,4174,4047,0700,0000,0000,0000	; 4596		ASHC, J/DDIV2		;CONTINUE BELOW
U 0403, 0123,4443,0000,4174,4467,0700,0000,0051,1000	; 4597		NO DIVIDE		;DIVIDE BY ZERO
U 2634, 2635,4751,1217,4374,4007,0700,0000,0000,0004	; 4598	DDIV2:	[T1]_0 XWD [4]		;MEM OPERAND IS POSITIVE
U 2635, 2636,3221,0006,0174,4007,0700,0000,0000,0000	; 4599	DDIV3:	[BRX]_Q, AC		;COPY Q
							; 4600	
U 2636, 0414,3777,0003,0274,4007,0520,0000,0000,0000	; 4601		[AR]_AC*.5, 2T, SKIP DP0 ;GET AC--SEE IF NEGATIVE
							; 4602	=0*1*0
							; 4603	DDIV3A:	Q_AC[1].AND.[MAG],	;POSITIVE (OR ZERO)
U 0414, 0410,4552,0000,1275,5007,0701,0000,0000,1441	; 4604		J/DDIV4 		;CONTINUE BELOW
							; 4605		[T1]_[T1].XOR.#,	;NEGATIVE
U 0415, 2677,6551,1717,4374,4007,0700,0010,0000,0007	; 4606		#/7, CALL [QDNEG]	;UPDATE SAVED FLAGS
							; 4607	=1*1*1	[AR]_[AR]*.5,		;SHIFT AR OVER
U 0435, 0414,3447,0303,4174,4007,0700,0000,0000,0000	; 4608		J/DDIV3A		;GO BACK AND LOAD Q
							; 4609	=
							; 4610	=0
							; 4611	DDIV4:	[AR]_[AR]*.5 LONG,	;SHIFT AR OVER
U 0410, 2661,3446,0303,4174,4007,0700,0010,0000,0000	; 4612		CALL [DDIVS]		;SHIFT 1 MORE PLACE
U 0411, 0412,2113,0305,4174,4007,0521,4000,0000,0000	; 4613		[AR]-[BR], 3T, SKIP DP0 ;TEST MAGNITUDE
							; 4614	=0	[AR]-[BR], 2T,
U 0412, 0416,2113,0305,4174,4007,0620,4000,0000,0000	; 4615		SKIP AD.EQ.0, J/DDIV5
U 0413, 2637,3221,0004,4174,4007,0700,0000,0000,0000	; 4616		[ARX]_Q, J/DDIV5A	;ANSWER FITS
							; 4617	
							; 4618	=0
U 0416, 0473,3333,0017,4174,4003,5701,0000,0000,0000	; 4619	DDIV5:	READ [T1], 3T, DISP/DP, J/NODDIV
U 0417, 0420,1003,0600,4174,4007,0521,4000,0000,0000	; 4620		Q-[BRX], 3T, SKIP DP0
U 0420, 0473,3333,0017,4174,4003,5701,0000,0000,0000	; 4621	=0	READ [T1], 3T, DISP/DP, J/NODDIV
U 0421, 2637,3221,0004,4174,4007,0700,0000,0000,0000	; 4622		[ARX]_Q 		;COPY LOW WORD
							; 4623	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 109
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- DDIV

							; 4624	
							; 4625	;HERE WITH EVERYTHING SETUP AND READY TO GO
U 2637, 0335,4552,0000,1275,5007,0701,0000,0000,1442	; 4626	DDIV5A: Q_AC[2].AND.[MAG]
U 0335, 0460,3446,1200,4174,4007,0700,2010,0071,0042	; 4627	=0*	Q_Q*.5, SC_34., CALL [DBLDIV]
U 0337, 2640,3224,0016,4174,4007,0700,0000,0000,0000	; 4628		[T0]_Q*2 LONG
U 2640, 2641,0002,1600,4174,4007,0700,0000,0000,0000	; 4629		Q_Q+[T0]
U 2641, 0422,4003,0000,1174,4007,0700,0400,0000,1440	; 4630		AC[0]_Q.AND.[MAG]	;STORE ANSWER
U 0422, 2661,3442,0400,4174,4007,0700,0010,0000,0000	; 4631	=0	Q_[ARX], CALL [DDIVS]	;SHIFT OUT EXTRA ZERO BIT
U 0423, 2642,3221,0004,4174,4007,0700,0000,0000,0000	; 4632		[ARX]_Q 		; ..
U 2642, 0424,4552,0000,1275,5007,0701,0000,0000,1443	; 4633		Q_AC[3].AND.[MAG]
							; 4634	=0*	[T0]_[AR]*.5 LONG,	;SHIFT Q, PUT AR ON DP
							; 4635		SC_34., 		;LOAD SHIFT COUNT
							; 4636		SKIP DP0,		;LOOK AT AR SIGN
U 0424, 0460,3446,0316,4174,4007,0520,2010,0071,0042	; 4637		CALL [DBLDIV]		;GO DIVIDE
U 0426, 2643,3224,0016,4174,4007,0700,0000,0000,0000	; 4638		[T0]_Q*2 LONG
U 2643, 0436,3333,0017,4174,4003,5701,0000,0000,0000	; 4639		READ [T1], 3T, DISP/DP	;WHAT SIGN IS QUO
							; 4640	=1110	[T0]_[T0]+Q,		;POSITIVE QUO
U 0436, 2646,0001,1616,4174,4007,0700,0000,0000,0000	; 4641		J/DDIV5B		;CONTINUE BELOW
U 0437, 2644,2225,0016,4174,4007,0700,4000,0000,0000	; 4642		[T0]_-Q*2		;NEGATIVE QUO
							; 4643		AD/-D-.25, DBUS/RAM, 3T,
							; 4644		RAMADR/AC#, DEST/Q_AD,
U 2644, 2645,1772,0000,0274,4007,0701,0040,0000,0000	; 4645		MULTI PREC/1
U 2645, 0430,3223,0000,0174,4007,0621,0400,0000,0000	; 4646		AC_Q, SKIP AD.EQ.0
U 0430, 2647,3440,1616,1174,4007,0700,0400,0000,1441	; 4647	=0	AC[1]_[T0], J/DDIV5C
U 0431, 2651,4223,0000,1174,4007,0700,0400,0000,1441	; 4648		AC[1]_0, J/DDIV6
							; 4649	
U 2646, 2651,4113,1600,1174,4007,0700,0400,0000,1441	; 4650	DDIV5B: AC[1]_[T0].AND.[MAG], J/DDIV6	;STORE LOW WORD IN + CASE
							; 4651	
U 2647, 2650,3551,1616,4374,0007,0700,0000,0040,0000	; 4652	DDIV5C: [T0]_[T0].OR.#, #/400000, HOLD RIGHT
U 2650, 2651,3440,1616,1174,4007,0700,0400,0000,1441	; 4653		AC[1]_[T0]
							; 4654	
U 2651, 0432,3333,0003,4174,4007,0520,0000,0000,0000	; 4655	DDIV6:	READ [AR], SKIP DP0	;LOOK AT AR SIGN
							; 4656	=0
U 0432, 2655,3442,0400,4174,4007,0700,0000,0000,0000	; 4657	DDIV7:	Q_[ARX], J/DDIV8
U 0433, 2652,0112,0406,4174,4007,0700,0000,0000,0000	; 4658		Q_[ARX]+[BRX]
							; 4659		[AR]_[AR]+[BR],
U 2652, 2653,0111,0503,4174,4007,0700,0040,0000,0000	; 4660		MULTI PREC/1
U 2653, 2654,0002,0600,4174,4007,0700,0000,0000,0000	; 4661		Q_Q+[BRX]
							; 4662		[AR]_[AR]+[BR],
U 2654, 2655,0111,0503,4174,4007,0700,0040,0000,0000	; 4663		MULTI PREC/1
U 2655, 0455,3333,0017,4174,4003,5701,0000,0000,0000	; 4664	DDIV8:	READ [T1], 3T, DISP/DP
							; 4665	=1101
							; 4666	DDIV8A: [AR]_[AR]*2 LONG, ASHC, ;POSITIVE REMAINDER
U 0455, 2657,3444,0303,4174,4047,0700,0000,0000,0000	; 4667		J/DDIV9 		;CONTINUE BELOW
U 0457, 2656,2222,0000,4174,4007,0700,4000,0000,0000	; 4668		Q_-Q			;NEGATE REMAINDER IN AR!Q
							; 4669		[AR]_(-[AR]-.25)*2 LONG,
U 2656, 2657,2444,0303,4174,4047,0700,0040,0000,0000	; 4670		MULTI PREC/1, ASHC
							; 4671	
							; 4672	DDIV9:	AC[2]_[AR]+[AR], 3T,
U 2657, 0440,0113,0303,1174,4007,0521,0400,0000,1442	; 4673		SKIP DP0
							; 4674	=0	AC[3]_Q.AND.[MAG],
U 0440, 0060,4003,0000,1174,4156,4700,0400,0000,1443	; 4675		NEXT INST
U 0441, 2660,4002,0000,1174,4007,0700,0000,0000,1443	; 4676		Q_Q.AND.[MAG], AC[3]
							; 4677		AC[3]_[MAG].EQV.Q,
U 2660, 0060,7003,0000,1174,4156,4700,0400,0000,1443	; 4678		NEXT INST
							; 4679	
							; 4680	
							; 4681	;HERE IF WE WANT TO SET NO DIVIDE
							; 4682	=11011
U 0473, 2677,4443,0000,4174,4007,0700,0010,0000,0000	; 4683	NODDIV: CALL [QDNEG]		;FIXUP AC TO AC+3
U 0477, 0123,4443,0000,4174,4467,0700,0000,0051,1000	; 4684		NO DIVIDE		;ABORT DIVIDE
							; 4685	
U 2661, 0001,3446,0303,4174,4044,1700,0000,0000,0000	; 4686	DDIVS:	[AR]_[AR]*.5 LONG, ASHC, RETURN [1]
							; 4687	.IFNOT/FULL
							; 4688	1627:
							; 4689	DDIV:	UUO
							; 4690	.ENDIF/FULL
							; 4691	
							; 4692	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 110
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- DIVIDE SUBROUTINE

							; 4693	.TOC	"ARITHMETIC -- DIVIDE SUBROUTINE"
							; 4694	
							; 4695	;HERE IS THE SUBROUTINE TO DO DIVIDE
							; 4696	;ENTER WITH:
							; 4697	;	AR!Q = D'END
							; 4698	;	BR = D'SOR
							; 4699	;RETURN 2 WITH:
							; 4700	;	AR = REMAINDER
							; 4701	;	Q = QUOTIENT
							; 4702	;CALLER MUST CHECK FOR ZERO DIVIDE PRIOR TO CALL
							; 4703	;
							; 4704	=1000
							; 4705	DIVSUB:	Q_Q.AND.#,		;CLEAR SIGN BIT IN
							; 4706		#/377777,		;MASK
							; 4707		HOLD RIGHT,		;JUST CLEAR BIT 0
U 0510, 2662,4662,0000,4374,0007,0700,0010,0037,7777	; 4708		CALL [DIVSGN]		;DO REAL DIVIDE
U 0514, 0002,4443,0000,4174,4004,1700,0000,0000,0000	; 4709	=1100	RETURN [2]		;ALL POSITIVE
U 0515, 0002,2222,0000,4174,4004,1700,4000,0000,0000	; 4710	=1101	Q_-Q, RETURN [2]	;-QUO +REM
U 0516, 0517,2222,0000,4174,4007,0700,4000,0000,0000	; 4711	=1110	Q_-Q			;ALL NEGATIVE
U 0517, 0002,2441,0303,4174,4004,1700,4000,0000,0000	; 4712	=1111	[AR]_-[AR], RETURN [2]	;NEGATIVE REMAINDER
							; 4713	
							; 4714	;HERE IS THE INNER DIVIDE SUBROUTINE
							; 4715	;SAME SETUP AS DIVSUB
							; 4716	;RETURNS WITH AR AND Q POSITIVE AND
							; 4717	;	14 IF ALL POSITIVE
							; 4718	;	15 IF -QUO
							; 4719	;	16 IF ALL NEGATIVE
							; 4720	;	17 IF NEGATIVE REMAINDER
							; 4721	
							; 4722	BASIC DIV STEP	"DEST/Q_Q*2, DIV, A/BR, B/AR, STEP SC"
							; 4723	DIV STEP	"BASIC DIV STEP, AD/A+B, DIVIDE/1"
							; 4724	FIRST DIV STEP	"BASIC DIV STEP, AD/B-A-.25, ADD .25"
							; 4725	
U 2662, 0442,3333,0003,4174,4007,0520,0000,0000,0000	; 4726	DIVSGN:	READ [AR], SKIP DP0
U 0442, 2664,4221,0004,4174,4007,0700,0000,0000,0000	; 4727	=0	[ARX]_0, J/DVSUB2	;REMAINDER IS POSITIVE
U 0443, 0444,2222,0000,4174,4007,0621,4000,0000,0000	; 4728		Q_-Q, SKIP AD.EQ.0	;COMPLEMENT LOW WORD
U 0444, 2663,7441,0303,4174,4007,0700,0000,0000,0000	; 4729	=0	[AR]_.NOT.[AR], J/DVSUB1 ;COMPLEMENT HI WORD
U 0445, 2663,2441,0303,4174,4007,0700,4000,0000,0000	; 4730		[AR]_-[AR]		;TWO'S COMPLEMENT HI WORD SINCE
							; 4731					; LOW WORD WAS ZERO
U 2663, 2664,3771,0004,4374,4007,0700,0000,0010,0000	; 4732	DVSUB1: [ARX]_#, #/100000	;REMAINDER IS NEGATIVE
U 2664, 0446,3333,0005,4174,4007,0520,0000,0000,0000	; 4733	DVSUB2: READ [BR], SKIP DP0	;IS THE DIVISOR NEGATIVE
							; 4734	=0
							; 4735	DVSUB3: [AR]_[AR]*.5 LONG,	;START TO PUT IN 9-CHIPS
U 0446, 2666,3446,0303,4174,4007,0700,0000,0000,0000	; 4736		J/DIVSET		;JOIN MAIN STREAM
U 0447, 2665,2441,0505,4174,4007,0700,4000,0000,0000	; 4737		[BR]_-[BR]		;COMPLEMENT DIVISOR
							; 4738		[ARX]_[ARX].OR.#, 	;ADJUST SIGN OF QUOTIENT
U 2665, 0446,3551,0404,4374,4007,0700,0000,0004,0000	; 4739		#/40000, J/DVSUB3	;USE 9 CHIPS
U 2666, 2667,3447,0303,4174,4007,0700,0000,0000,0000	; 4740	DIVSET: [AR]_[AR]*.5
U 2667, 2670,3447,0505,4174,4007,0700,0000,0000,0000	; 4741		[BR]_[BR]*.5
U 2670, 2671,3447,0505,4174,4007,0700,0000,0000,0000	; 4742		[BR]_[BR]*.5
U 2671, 0450,1114,0503,4174,4067,0630,6000,0060,0000	; 4743		FIRST DIV STEP
							; 4744	;HERE IS THE MAIN DIVIDE LOOP
							; 4745	=0
U 0450, 0450,0114,0503,4174,4067,0630,2100,0060,0000	; 4746	DIVIDE: DIV STEP, J/DIVIDE
U 0451, 2672,3444,1717,4174,4067,0700,0100,0000,0000	; 4747		[T1]_[T1]*2 LONG, DIVIDE/1, DIV
U 2672, 0452,3447,0303,4174,4007,0520,0000,0000,0000	; 4748		[AR]_[AR]*.5, SKIP DP0
							; 4749	=0
U 0452, 2673,3444,0303,4174,4007,0700,0000,0000,0000	; 4750	FIX++:	[AR]_[AR]*2 LONG, J/FIX1++
U 0453, 0452,0111,0503,4174,4007,0700,0000,0000,0000	; 4751		[AR]_[AR]+[BR], J/FIX++
U 2673, 2674,3444,0303,4174,4007,0700,0000,0000,0000	; 4752	FIX1++: [AR]_[AR]*2 LONG
U 2674, 2675,4002,1200,4174,4007,0700,0000,0000,0000	; 4753		Q_[MASK].AND.Q
							; 4754		READ [ARX], 3T,		;RETURN TO 1 OF 4 PLACES
							; 4755		DISP/1,			;BASED ON SIGN OF RESULT
U 2675, 0014,3333,0004,4174,4000,1701,0000,0000,0000	; 4756		J/14			;RETURN
							; 4757	
							; 4758	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 111
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- DOUBLE DIVIDE SUBROUTINE

							; 4759	.TOC	"ARITHMETIC -- DOUBLE DIVIDE SUBROUTINE"
							; 4760	.IF/FULL
							; 4761	;CALL WITH:
							; 4762	;	AR!ARX!Q = 3 WORD DV'END
							; 4763	;	BR!BRX	 = 2 WORD DV'SOR
							; 4764	;RETURN 2 WITH:
							; 4765	;	AR!ARX	 = 2 WORD REMAINDER
							; 4766	;			CORRECT IF POSITIVE (Q IS ODD)
							; 4767	;			WRONG (BY BR!BRX) IF NEGATIVE (Q IS EVEN)
							; 4768	;	Q	 = 1 WORD QUOTIENT
							; 4769	;CALLER MUST CHECK FOR ZERO DIVIDE PRIOR TO CALL
							; 4770	;
							; 4771	;NOTE: THIS SUBROUTINE ONLY WORKS FOR POSITIVE NUMBERS
							; 4772	;
							; 4773	=0
							; 4774	;HERE FOR NORMAL STARTUP
							; 4775	DBLDIV: [ARX]_([ARX]-[BRX])*2 LONG, ;SUBTRACT LOW WORD
U 0460, 2676,1114,0604,4174,4057,0700,4000,0000,0000	; 4776		LSHC, J/DIVHI		;GO ENTER LOOP
							; 4777	;SKIP ENTRY POINT IF FINAL STEP IN PREVIOUS ENTRY WAS IN ERROR
							; 4778		[ARX]_([ARX]+[BRX])*2 LONG, ;CORRECTION STEP
U 0461, 2676,0114,0604,4174,4057,0700,0000,0000,0000	; 4779		LSHC, J/DIVHI		;GO ENTER LOOP
							; 4780	
							; 4781	;HERE IS DOUBLE DIVIDE LOOP
							; 4782	DIVHI:	AD/A+B, 		;ADD (HARDWARE MAY OVERRIDE)
							; 4783		A/BR, B/AR,		;OPERANDS ARE AR AND BR
							; 4784		DEST/AD*2,		;SHIFT LEFT
							; 4785		SHSTYLE/NORM,		;SET SHIFT PATHS (SEE DPE1)
							; 4786		MULTI PREC/1,		;INJECT SAVED BITS
U 2676, 0462,0115,0503,4174,4007,0630,2040,0060,0000	; 4787		STEP SC 		;COUNT DOWN LOOP
							; 4788	=0	AD/A+B, 		;ADD (HARDWARE MAY OVERRIDE)
							; 4789		A/BRX, B/ARX,		;LOW WORDS
							; 4790		DEST/Q_Q*2,		;SHIFT WHOLE MESS LEFT
							; 4791		SHSTYLE/DIV,		;SET SHIFT PATHS (SEE DPE1)
							; 4792		DIVIDE/1,		;SAVE BITS
U 0462, 2676,0114,0604,4174,4067,0700,0100,0000,0000	; 4793		J/DIVHI 		;KEEP LOOPING
							; 4794	;HERE WHEN ALL DONE
							; 4795		DEST/Q_Q*2, DIV,	;SHIFT IN LAST Q BIT
							; 4796		DIVIDE/1,		;GENERATE BIT
U 0463, 0002,4444,0002,4174,4064,1700,0100,0000,0000	; 4797		B/HR, RETURN [2]	;ZERO HR AND RETURN
							; 4798	
							; 4799	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 112
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- SUBROUTINES FOR ARITHMETIC

							; 4800	.TOC	"ARITHMETIC -- SUBROUTINES FOR ARITHMETIC"
							; 4801	
							; 4802	;QUAD WORD NEGATE
							; 4803	;ARGUMENT IN AC!AC1!AC2!AC3
							; 4804	;LEAVES COPY OF AC!AC1 IN AR!Q
							; 4805	;RETURNS TO CALL!24
U 2677, 2700,1772,0000,1274,4007,0701,4000,0000,1443	; 4806	QDNEG:	Q_-AC[3]
							; 4807		AC[3]_Q.AND.[MAG],	;PUT BACK LOW WORD
U 2700, 0464,4003,0000,1174,4007,0621,0400,0000,1443	; 4808		SKIP AD.EQ.0		;SEE IF ANY CARRY
							; 4809	=0
U 0464, 2703,7772,0000,1274,4007,0701,0000,0000,1442	; 4810	COM2A:	Q_.NOT.AC[2], J/COM2	;CARRY--DO 1'S COMPLEMENT
U 0465, 2701,1772,0000,1274,4007,0701,4000,0000,1442	; 4811		Q_-AC[2]		;NEXT WORD
							; 4812		AC[2]_Q.AND.[MAG],	;PUT BACK WORD
U 2701, 0466,4003,0000,1174,4007,0621,0400,0000,1442	; 4813		SKIP AD.EQ.0
							; 4814	=0
U 0466, 2704,7772,0000,1274,4007,0701,0000,0000,1441	; 4815	COM1A:	Q_.NOT.AC[1], J/COM1
U 0467, 2702,1772,0000,1274,4007,0701,4000,0000,1441	; 4816		Q_-AC[1]
							; 4817		AC[1]_Q.AND.[MAG],
U 2702, 0470,4003,0000,1174,4007,0621,0400,0000,1441	; 4818		SKIP AD.EQ.0
							; 4819	=0
U 0470, 2705,7771,0003,0274,4007,0700,0000,0000,0000	; 4820	COM0A:	[AR]_.NOT.AC, J/COM0
U 0471, 2705,1771,0003,0274,4007,0701,4000,0000,0000	; 4821		[AR]_-AC, 3T, J/COM0
							; 4822	
U 2703, 0466,4003,0000,1174,4007,0700,0400,0000,1442	; 4823	COM2:	AC[2]_Q.AND.[MAG], J/COM1A
U 2704, 0470,4003,0000,1174,4007,0700,0400,0000,1441	; 4824	COM1:	AC[1]_Q.AND.[MAG], J/COM0A
U 2705, 0024,3440,0303,0174,4004,1700,0400,0000,0000	; 4825	COM0:	AC_[AR], RETURN [24]
							; 4826	.ENDIF/FULL
							; 4827	
							; 4828	;DOUBLE WORD NEGATE
							; 4829	;ARGUMENT IN AR AND ARX
							; 4830	;RETURNS TO CALL!2
							; 4831	
U 2706, 2707,4551,0404,4374,0007,0700,0000,0037,7777	; 4832	DBLNEG: CLEAR ARX0		;FLUSH DUPLICATE SIGN
							; 4833	DBLNGA: [ARX]_-[ARX],		;FLIP LOW WORD
U 2707, 0474,2441,0404,4174,4007,0621,4000,0000,0000	; 4834		SKIP AD.EQ.0		;SEE IF CARRY
							; 4835	=0	[AR]_.NOT.[AR], 	;NO CARRY-- 1 COMP
U 0474, 1366,7441,0303,4174,4467,0700,0000,0001,0001	; 4836		AD FLAGS, J/CLARX0	;CLEAR LOW SIGN
							; 4837		[AR]_-[AR],		;CARRY
U 0475, 1366,2441,0303,4174,4467,0701,4000,0001,0001	; 4838		AD FLAGS, 3T, J/CLARX0
							; 4839	
							; 4840	;SAME THING BUT DOES NOT SET PC FLAGS
U 2710, 0500,2441,0404,4174,4007,0621,4000,0000,0000	; 4841	DBLNG1: [ARX]_-[ARX], SKIP AD.EQ.0
U 0500, 1366,7441,0303,4174,4007,0700,0000,0000,0000	; 4842	=0	[AR]_.NOT.[AR], J/CLARX0
U 0501, 1366,2441,0303,4174,4007,0700,4000,0000,0000	; 4843		[AR]_-[AR], J/CLARX0
							; 4844	
							; 4845	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 113
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	ARITHMETIC -- SUBROUTINES FOR ARITHMETIC

; 4846		.NOBIN
; 4847	.TOC	"BYTE GROUP -- IBP, ILDB, LDB, IDPB, DPB"
; 4848	
; 4849	
; 4850	;ALL FIVE INSTRUCTIONS OF THIS GROUP ARE CALLED WITH THE BYTE POINTER
; 4851	;IN THE AR.  ALL INSTRUCTIONS SHARE COMMON SUBROUTINES.
; 4852	
; 4853	;IBP OR ADJBP
; 4854	;IBP IF AC#0, ADJBP OTHERWISE
; 4855	; HERE WITH THE BASE POINTER IN AR
; 4856	
; 4857	;HERE IS A MACRO TO DO IBP. WHAT HAPPENS IS:
; 4858	;	THE AR IS PUT ON THE DP.
; 4859	;	THE BR IS LOADED FROM THE DP WITH BITS 0-5 FROM SCAD
; 4860	;	THE SCAD COMPUTES P-S
; 4861	;	IBPS IS CALLED WITH A 4-WAY DISPATCH ON SCAD0 AND FIRST-PART-DONE
; 4862	;THE MACRO IS WRITTEN WITH SEVERAL SUB-MACROS BECAUSE OF RESTRICTIONS
; 4863	; IN THE MICRO ASSEMBLER
; 4864	
; 4865	IBP DP		"AD/D, DEST/A, A/AR, B/BR, DBUS/DBM, DBM/DP, BYTE/BYTE1"
; 4866	IBP SCAD	"SCAD/A-B, SCADA/BYTE1, SCADB/SIZE"
; 4867	IBP SPEC	"SCAD DISP, SKIP FPD"
; 4868	CALL IBP	"IBP DP, IBP SCAD, IBP SPEC, CALL [IBPS], DT/3T"
; 4869	
; 4870	SET P TO 36-S	"AD/D,DEST/A,A/BR,B/AR,DBUS/DBM,DBM/DP,SCAD/A-B,SCADB/SIZE,BYTE/BYTE1,SCADA/PTR44"
; 4871	
; 4872	;THE FOLLOWING MACRO IS USED FOR COUNTING SHIFTS IN THE BYTE ROUTINES. IT
; 4873	; USES THE FE AND COUNTS BY 8. NOTE: BYTE STEP IS A 2S WEIGHT SKIP NOT 1S.
; 4874	BYTE STEP	"SCAD/A+B,SCADA/S#,S#/1770,SCADB/FE,LOAD FE, 3T,SCAD DISP"
; 4875	
							; 4876		.BIN
							; 4877	
							; 4878		.DCODE
D 0133, 0015,1610,1100					; 4879	133:	R,	AC,	J/IBP		;OR ADJBP
D 0134, 0000,1620,1500					; 4880	134:	R,W TEST,	J/ILDB		;CAN'T USE RPW BECAUSE OF FPD
D 0135, 0000,1624,1100					; 4881		R,		J/LDB
D 0136, 0000,1630,1500					; 4882		R,W TEST,	J/IDPB
D 0137, 0000,1634,1100					; 4883		R,		J/DPB
							; 4884		.UCODE
							; 4885	1610:
U 1610, 0520,4443,0000,4174,4007,0360,0000,0000,0000	; 4886	IBP:	SKIP IF AC0		;SEE IF ADJBP
							; 4887	=000	WORK[ADJPTR]_[AR],	;SAVE POINTER
U 0520, 2746,3333,0003,7174,4007,0700,0400,0000,0223	; 4888		J/ADJBP 		;GO ADJUST BYTE POINTER
U 0521, 0530,3770,0305,4334,4016,7351,0010,0033,6000	; 4889	=001	CALL IBP		;BUMP BYTE POINTER
U 0525, 0070,3443,0100,4174,4156,4700,0200,0014,0012	; 4890	=101	DONE			;POINTER STORED
							; 4891	=
							; 4892	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 114
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BYTE GROUP -- IBP, ILDB, LDB, IDPB, DPB

							; 4893	
							; 4894	1620:
U 1620, 0530,3770,0305,4334,4016,7351,0010,0033,6000	; 4895	ILDB:	CALL IBP		;BUMP BYTE POINTER
							; 4896	1624:
							; 4897	LDB:	READ [AR],		;LOOK AT POINTER
							; 4898		LOAD BYTE EA, FE_P, 3T, ;GET STUFF OUT OF POINTER
U 1624, 2716,3333,0003,4174,4217,0701,1010,0073,0500	; 4899		CALL [BYTEA]		;COMPUTE EFFECTIVE ADDRESS
U 1625, 0425,3443,0100,4174,4007,0700,0200,0014,0012	; 4900	1625:	VMA_[PC], FETCH 	;START FETCH OF NEXT INST
							; 4901	=0*	READ [AR],		;LOOK AT POINTER
							; 4902		FE_FE.AND.S#, S#/0770,	;MASK OUT JUNK IN FE
							; 4903		BYTE DISP,		;DISPATCH ON BYTE SIZE
U 0425, 0540,3333,0003,4174,4006,5701,1010,0051,0770	; 4904		CALL [LDB1]		;GET BYTE
							; 4905		AC_[AR], CLR FPD,	;STORE AC
U 0427, 0123,3440,0303,0174,4467,0700,0400,0005,0000	; 4906		J/NIDISP		;GO DO NEXT INST
							; 4907	
							; 4908	1630:
U 1630, 0530,3770,0305,4334,4016,7351,0010,0033,6000	; 4909	IDPB:	CALL IBP		;BUMP BYTE POINTER
							; 4910	1634:
U 1634, 2711,3775,0004,0274,4007,0701,0000,0000,0000	; 4911	DPB:	[ARX]_AC*2		;PUT 7 BIT BYTE IN 28-34
							; 4912		AD/A, A/ARX, SCAD/A,	;PUT THE BYTE INTO
							; 4913		SCADA/BYTE5, 3T,	; INTO THE FE REGISTER
U 2711, 2712,3443,0400,4174,4007,0701,1000,0077,0000	; 4914		LOAD FE 		; FE REGISTER
U 2712, 0504,3771,0004,0276,6007,0700,0000,0000,0000	; 4915		[ARX]_AC		;PUT BYTE IN ARX
							; 4916	=100	READ [AR],		;LOOK AT BYTE POINTER
							; 4917		LOAD BYTE EA,		;LOAD UP EFFECTIVE ADDRESS
U 0504, 2716,3333,0003,4174,4217,0700,0010,0000,0500	; 4918		CALL [BYTEA]		;COMPUTE EFFECTIVE ADDRESS
							; 4919		READ [AR],		;LOOK AT POINTER AGAIN
							; 4920		BYTE DISP,		;DISPATCH ON SIZE
U 0505, 0560,3333,0003,4174,4006,5701,0010,0000,0000	; 4921		CALL [DPB1]		;GO STORE BYTE
U 0507, 1400,4443,0000,4174,4467,0700,0000,0005,0000	; 4922	=111	CLR FPD, J/DONE 	;ALL DONE
							; 4923	=
							; 4924	
							; 4925	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 115
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BYTE GROUP -- INCREMENT BYTE POINTER SUBROUTINE

							; 4926	.TOC	"BYTE GROUP -- INCREMENT BYTE POINTER SUBROUTINE"
							; 4927	
							; 4928	=00
U 0530, 2714,3441,0503,4174,4007,0700,0200,0003,0002	; 4929	IBPS:	[AR]_[BR], START WRITE, J/IBPX	;NO OVERFLOW, BR HAS ANSWER
U 0531, 0004,4443,0000,4174,4004,1700,0000,0000,0000	; 4930		RETURN [4]			;FIRST PART DONE SET
U 0532, 2713,3770,0503,4334,4017,0700,0000,0032,6000	; 4931		SET P TO 36-S, J/NXTWRD 	;WORD OVERFLOW
U 0533, 0004,4443,0000,4174,4004,1700,0000,0000,0000	; 4932		RETURN [4]			;FPD WAS SET IGNORE OVERFLOW
							; 4933						; AND RETURN
							; 4934	
U 2713, 2714,0111,0703,4170,4007,0700,0200,0003,0002	; 4935	NXTWRD: [AR]_[AR]+1, HOLD LEFT, START WRITE	;BUMP Y AND RETURN
U 2714, 0004,3333,0003,4175,5004,1701,0200,0000,0002	; 4936	IBPX:	MEM WRITE, MEM_[AR], RETURN [4]
							; 4937	
							; 4938	
							; 4939	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 116
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BYTE GROUP -- BYTE EFFECTIVE ADDRESS EVALUATOR

							; 4940	.TOC	"BYTE GROUP -- BYTE EFFECTIVE ADDRESS EVALUATOR"
							; 4941	
							; 4942	;ENTER WITH POINTER IN AR
							; 4943	;RETURN1 WITH (EA) IN VMA AND WORD IN BR
							; 4944	BYTEAS: EA MODE DISP,		;HERE TO AVOID FPD
U 2715, 0550,4443,0000,2174,4006,6700,0000,0000,0000	; 4945		J/BYTEA0		;GO COMPUTE EA
							; 4946	BYTEA:	SET FPD,		;SET FIRST-PART-DONE
U 2716, 0550,4443,0000,2174,4466,6700,0000,0003,0000	; 4947		EA MODE DISP		;DISPATCH
							; 4948	=100*
							; 4949	BYTEA0: VMA_[AR]+XR,		;INDEXING
							; 4950		START READ,		;FETCH DATA WORD
							; 4951		PXCT BYTE DATA, 	;FOR PXCT
U 0550, 2720,0553,0300,2274,4007,0700,0200,0004,0712	; 4952		J/BYTFET		;GO WAIT
							; 4953		VMA_[AR],		;PLAIN
							; 4954		START READ,		;START CYCLE
							; 4955		PXCT BYTE DATA, 	;FOR PXCT
U 0552, 2720,3443,0300,4174,4007,0700,0200,0004,0712	; 4956		J/BYTFET		;GO WAIT
							; 4957		VMA_[AR]+XR,		;BOTH
							; 4958		START READ,		;START CYCLE
							; 4959		PXCT BYTE PTR EA,	;FOR PXCT
U 0554, 2717,0553,0300,2274,4007,0700,0200,0004,0512	; 4960		J/BYTIND		;GO DO INDIRECT
							; 4961		VMA_[AR],		;JUST @
							; 4962		START READ,		;START READ
U 0556, 2717,3443,0300,4174,4007,0700,0200,0004,0512	; 4963		PXCT BYTE PTR EA	;FOR PXCT
							; 4964	BYTIND: MEM READ,		;WAIT FOR @ WORD
							; 4965		[AR]_MEM,		;PUT IN AR
							; 4966		HOLD LEFT,		;JUST IN RH (SAVE P & S)
							; 4967		LOAD BYTE EA,		;LOOP BACK
U 2717, 2715,3771,0003,4361,5217,0700,0200,0000,0502	; 4968		J/BYTEAS		; ..
							; 4969	
							; 4970	BYTFET: MEM READ,		;WAIT FOR BYTE DATA
							; 4971		[BR]_MEM.AND.MASK,	; WORD. UNSIGNED
U 2720, 0001,4551,1205,4365,5004,1700,0200,0000,0002	; 4972		RETURN [1]		;RETURN TO CALLER
							; 4973	
							; 4974	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 117
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BYTE GROUP -- LOAD BYTE SUBROUTINE

							; 4975	.TOC	"BYTE GROUP -- LOAD BYTE SUBROUTINE"
							; 4976	
							; 4977	;CALL WITH:
							; 4978	;	WORD IN BR
							; 4979	;	POINTER IN AR
							; 4980	;	P IN FE
							; 4981	;	BYTE DISPATCH
							; 4982	;RETURN2 WITH BYTE IN AR
							; 4983	LDB SCAD	"SCAD/A,BYTE/BYTE5"
							; 4984	7-BIT LDB	"AD/D,DBUS/DBM,DBM/DP,DEST/A,A/BR,B/BR, LDB SCAD"
							; 4985	
							; 4986	=000
							; 4987	LDB1:	GEN 17-FE, 3T,		;GO SEE IF ALL THE BITS
							; 4988		SCAD DISP,		; ARE IN THE LEFT HALF
U 0540, 0534,4443,0000,4174,4006,7701,0000,0031,0210	; 4989		J/LDBSWP		;GO TO LDBSWP & SKIP IF LH
							; 4990	
							; 4991	;HERE ARE THE 7-BIT BYTES
U 0541, 2721,3770,0505,4334,4057,0700,0000,0073,0000	; 4992	=001	7-BIT LDB, SCADA/BYTE1, J/LDB7
U 0542, 2721,3770,0505,4334,4057,0700,0000,0074,0000	; 4993	=010	7-BIT LDB, SCADA/BYTE2, J/LDB7
U 0544, 2721,3770,0505,4334,4057,0700,0000,0075,0000	; 4994	=100	7-BIT LDB, SCADA/BYTE3, J/LDB7
U 0545, 2721,3770,0505,4334,4057,0700,0000,0076,0000	; 4995	=101	7-BIT LDB, SCADA/BYTE4, J/LDB7
U 0547, 2721,3770,0505,4334,4057,0700,0000,0077,0000	; 4996	=111	7-BIT LDB, SCADA/BYTE5, J/LDB7
							; 4997	=
							; 4998	
							; 4999	;FOR 7-BIT BYTES WE HAVE BYTE IN BR 28-35 AND JUNK IN REST OF BR.
							; 5000	; WE JUST MASK THE SELECTED BYTE AND SHIFT ONE PLACE RIGHT.
							; 5001	LDB7:	AD/ZERO,RSRC/DA,	;LH_ZERO, RH_D.AND.A
							; 5002		DBUS/DBM,DBM/#,#/376,	;D INPUT IS 376
							; 5003		A/BR,			;A IS BR
							; 5004		B/AR,			;PUT RESULT IN AR
							; 5005		DEST/AD*.5, 3T, 	;SHIFT RESULT 1 PLACE
U 2721, 0002,4257,0503,4374,4004,1701,0000,0000,0376	; 5006		RETURN [2]		;RETURN TO CALLER
							; 5007	
							; 5008	;HERE FOR NORMAL BYTES
							; 5009	=00
							; 5010	LDBSWP: FE_-FE, 		;MAKE P NEGATIVE
U 0534, 2723,4443,0000,4174,4007,0700,1000,0031,0000	; 5011		J/LDBSH 		;JOIN MAIN LDB LOOP
U 0536, 2722,3770,0505,4344,4007,0700,0000,0000,0000	; 5012	=10	[BR]_[BR] SWAP		;SHIFT 18 STEPS
							; 5013	=
							; 5014		[BR]_0, HOLD RIGHT,	;PUT ZERO IN LH
U 2722, 2723,4221,0005,4174,0007,0700,1000,0031,0220	; 5015		FE_-FE+S#, S#/220	;UPDATE FE
							; 5016	LDBSH:	[BR]_[BR]*.5,		;SHIFT RIGHT
							; 5017		FE_FE+10,		;UPDATE THE FE
U 2723, 2724,3447,0505,4174,4007,0700,1020,0041,0010	; 5018		MULTI SHIFT/1		;FAST SHIFT
U 2724, 2725,3333,0003,4174,4007,0700,1000,0031,7770	; 5019		READ [AR], FE_-S-10	;GET SIZE
U 2725, 2726,4222,0000,4174,4007,0700,0000,0000,0000	; 5020		Q_0			;CLEAR Q
							; 5021		GEN MSK [AR],		;PUT MASK IN Q (WIPEOUT AR)
							; 5022		FE_FE+10,		;COUNT UP ALL STEPS
U 2726, 2727,4224,0003,4174,4027,0700,1020,0041,0010	; 5023		MULTI SHIFT/1		;FAST SHIFT
U 2727, 2730,4224,0003,4174,4027,0700,0000,0000,0000	; 5024		GEN MSK [AR]		;ONE MORE BIT
U 2730, 0002,4001,0503,4174,4004,1700,0000,0000,0000	; 5025		[AR]_[BR].AND.Q, RETURN [2]
							; 5026	
							; 5027	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 118
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BYTE GROUP -- LOAD BYTE SUBROUTINE

; 5028		.NOBIN
; 5029	.TOC	"BYTE GROUP -- DEPOSIT BYTE IN MEMORY"
; 5030	
; 5031	;FLOW FOR DPB (NOT 7-BIT BYTE)
; 5032	;
; 5033	;FIRST SET ARX TO -1 AND Q TO ZERO AND ROTATE LEFT
; 5034	; S PLACES GIVING:
; 5035	
; 5036	;		ARX		  Q
; 5037	;	+------------------!------------------+
; 5038	;	!111111111111000000!000000000000111111!
; 5039	;	+------------------!------------------+
; 5040	;					!<--->!
; 5041	;					S BITS
; 5042	;
; 5043	
; 5044	;NOW THE AC IS LOAD INTO THE ARX AND BOTH THE ARX AND Q
; 5045	; ARE SHIFTED LEFT P BITS GIVING:
; 5046	
; 5047	;	+------------------!------------------+
; 5048	;	!??????BBBBBB000000!000000111111000000!
; 5049	;	+------------------!------------------+
; 5050	;	 <----><---->		  <----><---->
; 5051	;	  JUNK	BYTE		   MASK P BITS
; 5052	;
; 5053	
; 5054	;AT THIS POINT WE ARE ALMOST DONE. WE NEED TO AND
; 5055	; THE BR WITH .NOT. Q TO ZERO THE BITS FOR THE BYTE
; 5056	; AND AND ARX WITH Q TO MASK OUT THE JUNK THIS GIVES:
; 5057	;
; 5058	;		ARX
; 5059	;	+------------------+
; 5060	;	!000000BBBBBB000000!
; 5061	;	+------------------!
; 5062	;
; 5063	;		AR
; 5064	;	+------------------+
; 5065	;	!DDDDDD000000DDDDDD!
; 5066	;	+------------------+
; 5067	;
; 5068	;WE NOW OR THE AR WITH ARX TO GENERATE THE ANSWER.
; 5069	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 119
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BYTE GROUP -- DEPOSIT BYTE IN MEMORY

; 5070	
							; 5071		.BIN
							; 5072	
							; 5073	;DEPOSIT BYTE SUBROUTINE
							; 5074	;CALL WITH:
							; 5075	;	BYTE POINTER IN AR
							; 5076	;	BYTE TO STORE IN ARX
							; 5077	;	WORD TO MERGE WITH IN BR
							; 5078	;	(E) OF BYTE POINTER IN VMA
							; 5079	;	7-BIT BYTE IN FE
							; 5080	;	BYTE DISPATCH
							; 5081	;RETURN2 WITH BYTE IN MEMORY
							; 5082	;
							; 5083	DPB SCAD	"SCAD/A+B,SCADA/S#,SCADB/FE,S#/0"
							; 5084	7-BIT DPB	"AD/D,DEST/A,A/BR,DBUS/DBM,DBM/DP,B/AR, DPB SCAD"
							; 5085	
							; 5086	=000
U 0560, 2733,3333,0003,4174,4007,0700,1000,0031,7770	; 5087	DPB1:	READ [AR], FE_-S-10, J/DPBSLO	;NOT SPECIAL
U 0561, 2731,3770,0503,4334,4017,0700,0000,0041,0000	; 5088	=001	7-BIT DPB, BYTE/BYTE1, J/DPB7
U 0562, 2731,3770,0503,4334,4027,0700,0000,0041,0000	; 5089	=010	7-BIT DPB, BYTE/BYTE2, J/DPB7
U 0564, 2731,3770,0503,4334,4037,0700,0000,0041,0000	; 5090	=100	7-BIT DPB, BYTE/BYTE3, J/DPB7
U 0565, 2731,3770,0503,4334,4047,0700,0000,0041,0000	; 5091	=101	7-BIT DPB, BYTE/BYTE4, J/DPB7
U 0567, 2731,3770,0503,4334,4057,0700,0000,0041,0000	; 5092	=111	7-BIT DPB, BYTE/BYTE5, J/DPB7
							; 5093	=
U 2731, 2732,3447,1200,4174,4007,0700,0200,0003,0002	; 5094	DPB7:	[MAG]_[MASK]*.5, START WRITE
U 2732, 0002,3333,0003,4175,5004,1701,0200,0000,0002	; 5095		MEM WRITE, MEM_[AR], RETURN [2]
							; 5096	
							; 5097	
U 2733, 2734,4222,0000,4174,4007,0700,0000,0000,0000	; 5098	DPBSLO: Q_0			;CLEAR Q
							; 5099		GEN MSK [MAG],		;GENERATE MASK IN Q (ZAP MAG)
							; 5100		FE_FE+10,		;COUNT STEPS
U 2734, 2735,4224,0000,4174,4027,0700,1020,0041,0010	; 5101		MULTI SHIFT/1		;FAST SHIFT
U 2735, 2736,4224,0000,4174,4027,0700,0000,0000,0000	; 5102		GEN MSK [MAG]		;ONE MORE BITS
U 2736, 2737,3333,0003,4174,4007,0701,1000,0073,0000	; 5103		READ [AR], 3T, FE_P	;AMOUNT TO SHIFT
U 2737, 2740,4443,0000,4174,4007,0700,1000,0051,0770	; 5104		FE_FE.AND.S#, S#/0770	;MASK OUT JUNK
							; 5105		Q_Q.AND.[MASK], 	;CLEAR BITS 36 AND 37
U 2740, 2741,4002,1200,4174,4007,0700,1000,0031,0000	; 5106		FE_-FE			;MINUS NUMBER OF STEPS
							; 5107		[ARX]_[ARX]*2 LONG,	;SHIFT BYTE AND MASK
							; 5108		FE_FE+10,		;COUNT OUT STEPS
U 2741, 2742,3444,0404,4174,4007,0700,1020,0041,0010	; 5109		MULTI SHIFT/1		;FAST SHIFT
							; 5110	;AT THIS POINT WE HAVE DONE ALL THE SHIFTING WE NEED. THE BYTE IS
							; 5111	; IN ARX AND THE MASK IS IN Q.
U 2742, 2743,7221,0003,4174,4007,0700,0000,0000,0000	; 5112		[AR]_.NOT.Q
U 2743, 2744,4111,0503,4174,4007,0700,0000,0000,0000	; 5113		[AR]_[AR].AND.[BR]
U 2744, 2745,4001,0404,4174,4007,0700,0000,0000,0000	; 5114		[ARX]_[ARX].AND.Q
							; 5115		[AR]_[AR].OR.[ARX],
U 2745, 2731,3111,0403,4174,4007,0700,0000,0000,0000	; 5116		J/DPB7
							; 5117	
							; 5118	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 120
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BYTE GROUP -- ADJUST BYTE POINTER

							; 5119	.TOC	"BYTE GROUP -- ADJUST BYTE POINTER"
							; 5120	.IF/FULL
							; 5121	;FIRST THE NUMBER OF BYTES PER WORD IS COMPUTED FROM THE
							; 5122	; FOLLOWING FORMULA:
							; 5123	;
							; 5124	;		       (  P  )	    ( 36-P )
							; 5125	;  BYTES PER WORD = INT( --- ) + INT( ---- )
							; 5126	;		       (  S  )	    (  S   )
							; 5127	;
							; 5128	;THIS GIVES 2 BYTES PER WORD FOR THE FOLLOWING 12 BIT BYTE:
							; 5129	;	!=====================================!
							; 5130	;	!  6  !////////////!	12     !  6   !
							; 5131	;	!=====================================!
							; 5132	;		P=18 AND S=12
							; 5133	;
							; 5134	;WE GET 3 BYTES/WORD IF THE BYTES FALL IN THE NATURAL PLACE:
							; 5135	;	!=====================================!
							; 5136	;	!    12     !\\\\\\\\\\\\!     12     !
							; 5137	;	!=====================================!
							; 5138	;	       P=12 AND S=12
							; 5139	
							; 5140	;WE COME HERE WITH THE BYTE POINTER IN AR, AND ADJPTR
							; 5141	ADJBP:	[ARX]_[AR] SWAP,	;MOVE SIZE OVER
U 2746, 0502,3770,0304,4344,4007,0700,2000,0071,0011	; 5142		SC_9.			;READY TO SHIFT
							; 5143	=0
							; 5144	ADJBP0: [ARX]_[ARX]*.5, 	;SHIFT P OVER
							; 5145		STEP SC,		; ..
U 0502, 0502,3447,0404,4174,4007,0630,2000,0060,0000	; 5146		J/ADJBP0		; ..
							; 5147		[ARX]_([ARX].AND.#)*.5, ;SHIFT AND MASK
							; 5148		3T,			;WAIT
U 0503, 2747,4557,0404,4374,4007,0701,0000,0000,0176	; 5149		#/176			;6 BIT MASK
							; 5150		[ARX]_#,		;CLEAR LH
							; 5151		#/0,			; ..
U 2747, 2750,3771,0004,4374,0007,0700,0000,0000,0000	; 5152		HOLD RIGHT		; ..
U 2750, 2751,3333,0004,7174,4007,0700,0400,0000,0221	; 5153		WORK[ADJP]_[ARX]	;SAVE P
							; 5154		[BR]_([AR].AND.#)*.5,	;START ON S
							; 5155		3T,			;EXTRACT S
U 2751, 2752,4557,0305,4374,4007,0701,0000,0000,7700	; 5156		#/007700		; ..
							; 5157		[BR]_[BR] SWAP, 	;SHIFT 18 PLACES
U 2752, 2753,3770,0505,4344,4007,0700,2000,0071,0003	; 5158		SC_3			; ..
							; 5159		[BR]_0, 		;CLEAR LH
U 2753, 0512,4221,0005,4174,0007,0700,0000,0000,0000	; 5160		HOLD RIGHT		; ..
							; 5161	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 121
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BYTE GROUP -- ADJUST BYTE POINTER

							; 5162	
							; 5163	=0
							; 5164	ADJBP1: [BR]_[BR]*.5,		;SHIFT S OVER
							; 5165		STEP SC,		; ..
U 0512, 0512,3447,0505,4174,4007,0630,2000,0060,0000	; 5166		J/ADJBP1		; ..
							; 5167		WORK[ADJS]_[BR],	;SALT S AWAY
U 0513, 0522,3333,0005,7174,4007,0621,0400,0000,0222	; 5168		SKIP AD.EQ.0		;SEE IF ZERO
							; 5169	=0	Q_[ARX],		;DIVIDE P BY S
							; 5170		SC_34.,			;STEP COUNT
U 0522, 0454,3442,0400,4174,4007,0700,2000,0071,0042	; 5171		J/ADJBP2		;SKIP NEXT WORD
U 0523, 1404,3771,0003,7274,4007,0701,0000,0000,0223	; 5172		[AR]_WORK[ADJPTR], J/MOVE	;S=0 -- SAME AS MOVE
							; 5173	=0*
							; 5174	ADJBP2: [AR]_#, 		;FILL AR WITH SIGN BITS
							; 5175		#/0,			;POSITIVE
U 0454, 0510,3771,0003,4374,4007,0700,0010,0000,0000	; 5176		CALL [DIVSUB]		;GO DIVIDE
U 0456, 2754,3223,0000,7174,4007,0700,0400,0000,0224	; 5177		WORK[ADJQ1]_Q		;SAVE QUOTIENT
							; 5178		Q_#,			;COMPUTE (36-P)/S
							; 5179		#/36.,			; ..
U 2754, 2755,3772,0000,4370,4007,0700,0000,0000,0044	; 5180		HOLD LEFT		;SMALL ANSWER
U 2755, 2756,1662,0000,7274,4007,0701,4000,0000,0221	; 5181		Q_Q-WORK[ADJP]		;SUBTRACT P
U 2756, 2757,3771,0005,7274,4007,0701,0000,0000,0222	; 5182		[BR]_WORK[ADJS]		;DIVIDE BY S
U 2757, 0524,4443,0000,4174,4007,0700,2000,0071,0042	; 5183		SC_34.			;STEP COUNT
							; 5184	=0*	[AR]_#,			;MORE SIGN BITS
							; 5185		#/0,			; ..
U 0524, 0510,3771,0003,4374,4007,0700,0010,0000,0000	; 5186		CALL [DIVSUB]		;GO DIVIDE
U 0526, 2760,3333,0003,7174,4007,0700,0400,0000,0225	; 5187		WORK[ADJR2]_[AR]	;SAVE REMAINDER
							; 5188		[AR]_#, 		;ASSUME NEGATIVE ADJ
U 2760, 2761,3771,0003,4374,4007,0700,0000,0077,7777	; 5189		#/777777		;EXTEND SIGN
							; 5190		AD/D+Q, 		;BR_(P/S)+((36-P)/S)
							; 5191		DEST/AD,		; ..
							; 5192		B/BR,			; ..
							; 5193		RAMADR/#,		; ..
							; 5194		DBUS/RAM,		; ..
							; 5195		WORK/ADJQ1,		; ..
							; 5196		4T,			; ..
U 2761, 0570,0661,0005,7274,4007,0622,0000,0000,0224	; 5197		SKIP AD.EQ.0		;SEE IF ZERO
							; 5198	=0	Q_Q+AC, 		;GET ADJUSTMENT
							; 5199		SC_34.,			;STEP COUNT
							; 5200		SKIP DP0,		;GO DO DIVIDE
							; 5201		4T,			;WAIT FOR DP
U 0570, 0574,0662,0000,0274,4007,0522,2000,0071,0042	; 5202		J/ADJBP3		;BELOW
U 0571, 0123,4443,0000,4174,4467,0700,0000,0051,1000	; 5203		NO DIVIDE		;0 BYTES/WORD
							; 5204	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 122
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BYTE GROUP -- ADJUST BYTE POINTER

							; 5205	
							; 5206	;WE NOW DIVIDE THE ADJUSTMENT BY THE BYTES PER WORD AND FORCE THE
							; 5207	; REMAINDER (R) TO BE A POSITIVE NUMBER (MUST NOT BE ZERO). THE
							; 5208	; QUOTIENT IS ADDED TO THE Y FIELD IN THE BYTE POINTER AND THE NEW
							; 5209	; P FIELD IS COMPUTED BY:
							; 5210	;
							; 5211	;	     (		     ( 36-P ))
							; 5212	; NEW P = 36-((R * S) +  RMDR( ---- ))
							; 5213	;	     (		     (	 S  ))
							; 5214	;
							; 5215	;WE NOW HAVE BYTES/WORD IN BR AND ADJUSTMENT IN Q. DIVIDE TO GET
							; 5216	; WORDS TO ADJUST BY.
							; 5217	=00
							; 5218	ADJBP3: [AR]_#, 		;POSITIVE ADJUSTMENT
U 0574, 0575,3771,0003,4374,4007,0700,0000,0000,0000	; 5219		#/0.
							; 5220		WORK[ADJBPW]_[BR],	;SAVE BYTES/WORD & COMPUTE
U 0575, 0510,3333,0005,7174,4007,0700,0410,0000,0226	; 5221		CALL [DIVSUB]		; ADJ/(BYTES/WORD)
							; 5222	;WE NOW WANT TO ADJUST THE REMAINDER SO THAT IT IS POSITIVE
							; 5223	=11	Q_#,			;ONLY RIGHT HALF
							; 5224		#/0,			; ..
U 0577, 2762,3772,0000,4374,0007,0700,0000,0000,0000	; 5225		HOLD RIGHT		; ..
							; 5226	=
							; 5227		READ [AR],		;ALREADY +
U 2762, 0572,3333,0003,4174,4007,0421,0000,0000,0000	; 5228		SKIP AD.LE.0		; ..
							; 5229	=0
							; 5230	ADJBP4: AD/D+Q, 		;ADD Q TO POINTER AND STORE
							; 5231		DEST/AD,		; ..
							; 5232		B/BR,			;RESULT TO BR
							; 5233		RAMADR/#,		;PTR IS IN RAM
							; 5234		DBUS/RAM,		; ..
							; 5235		WORK/ADJPTR,		; ..
							; 5236		INH CRY18,		;JUST RH
							; 5237		3T,			;WAIT FOR RAM
U 0572, 2764,0661,0005,7274,4407,0701,0000,0000,0223	; 5238		J/ADJBP5		;CONTINUE BELOW
							; 5239		Q_Q-1,			;NO--MAKE Q SMALLER
U 0573, 2763,1002,0700,4170,4007,0700,4000,0000,0000	; 5240		HOLD LEFT		; ..
							; 5241		[AR]_[AR]+WORK[ADJBPW], ;MAKE REM BIGGER
U 2763, 0572,0551,0303,7274,4007,0701,0000,0000,0226	; 5242		J/ADJBP4		;NOW HAVE + REMAINDER
							; 5243	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 123
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BYTE GROUP -- ADJUST BYTE POINTER

							; 5244	
							; 5245	ADJBP5: [BRX]_[AR],		;COMPUTE R*S
U 2764, 2765,3441,0306,4174,4007,0700,2000,0071,0043	; 5246		SC_35.			;STEP COUNT
U 2765, 0472,3772,0000,7274,4007,0701,0000,0000,0222	; 5247		Q_WORK[ADJS]		;GET S
							; 5248	=01*	[BRX]_[BRX]*.5 LONG,	;SHIFT OVER
U 0472, 2617,3446,0606,4174,4007,0700,0010,0000,0000	; 5249		CALL [MULSUB]		; ..
							; 5250		AD/D+Q, 		;AR_(R*S)+RMDR(36-P)/S
							; 5251		DEST/AD,		; ..
							; 5252		B/AR,			; ..
							; 5253		RAMADR/#,		; ..
							; 5254		3T,			; ..
							; 5255		DBUS/RAM,		; ..
U 0476, 2766,0661,0003,7274,4007,0701,0000,0000,0225	; 5256		WORK/ADJR2		; ..
							; 5257		[AR]_(#-[AR])*2,	;COMPUTE 36-AR
							; 5258		3T,			;AND START LEFT
U 2766, 2767,2555,0303,4374,4007,0701,4000,0000,0044	; 5259		#/36.			; ..
							; 5260		[AR]_[AR] SWAP, 	;PUT THE POSITION BACK
U 2767, 2770,3770,0303,4344,4007,0700,2000,0071,0011	; 5261		SC_9.			; ..
							; 5262		[AR]_#, 		;CLEAR JUNK FROM RH
							; 5263		#/0,			; ..
U 2770, 0600,3771,0003,4370,4007,0700,0000,0000,0000	; 5264		HOLD LEFT		; ..
							; 5265	=0
							; 5266	ADJBP6: [AR]_[AR]*2,		;LOOP OVER ALL BITS
							; 5267		STEP SC,		; ..
U 0600, 0600,3445,0303,4174,4007,0630,2000,0060,0000	; 5268		J/ADJBP6		; ..
							; 5269		[BR]_[BR].AND.#,	; ..
							; 5270		#/007777,		; ..
U 0601, 2771,4551,0505,4374,0007,0700,0000,0000,7777	; 5271		HOLD RIGHT		; ..
							; 5272		AC_[AR].OR.[BR],	;ALL DONE
U 2771, 1400,3113,0305,0174,4007,0700,0400,0000,0000	; 5273		J/DONE
							; 5274	.IFNOT/FULL
							; 5275	
							; 5276	ADJBP:	UUO			;NO ADJBP IN SMALL
							; 5277						; MICROCODE
							; 5278	.ENDIF/FULL
							; 5279	
							; 5280	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 124
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BYTE GROUP -- ADJUST BYTE POINTER

; 5281		.NOBIN
; 5282	.TOC	"BLT"
; 5283	
; 5284	;THIS CODE PROVIDES A GUARANTEED RESULT IN AC ON COMPLETION OF
; 5285	; THE TRANSFER (EXCEPT IN THE CASE AC IS PART OF BUT NOT THE LAST WORD
; 5286	; OF THE DESTINATION BLOCK).  WHEN AC IS NOT PART OF THE DESTINATION
; 5287	; BLOCK, IT IS LEFT CONTAINING THE ADDRESSES OF THE FIRST WORD FOLLOWING
; 5288	; THE SOURCE BLOCK (IN THE LH), AND THE FIRST WORD FOLLOWING THE DEST-
; 5289	; INATION BLOCK (IN THE RH).  IF AC IS THE LAST WORD OF THE DESTINATION
; 5290	; BLOCK, IT WILL BE A COPY OF THE LAST WORD OF THE SOURCE BLOCK.
; 5291	
; 5292	;IN ADDITION, A SPECIAL-CASE CHECK IS MADE FOR THE CASE IN WHICH EACH
; 5293	; WORD STORED IS USED AS THE SOURCE OF THE NEXT TRANSFER.  IN THIS CASE,
; 5294	; ONLY ONE READ NEED BE PERFORMED, AND THAT DATA MAY BE STORED FOR EACH
; 5295	; TRANSFER.  THUS THE COMMON USE OF BLT TO CLEAR CORE IS SPEEDED UP.
; 5296	
							; 5297		.BIN
							; 5298		.DCODE
D 0251, 0000,1640,2100					; 5299	251:	I,		J/BLT
							; 5300		.UCODE
							; 5301	
							; 5302	1640:
U 1640, 2772,3771,0006,0276,6007,0700,0000,0000,0000	; 5303	BLT:	[BRX]_AC		;FETCH THE AC (DEST IN RH)
U 2772, 0602,3770,0604,4344,4007,0700,0000,0000,0000	; 5304		[ARX]_[BRX] SWAP	;COPY TO ARX (SRC IN RH)
							; 5305	=0	VMA_[ARX],		;ADDRESS OF FIRST WORD
							; 5306		START READ,
							; 5307		PXCT BLT SRC,
U 0602, 3466,3443,0400,4174,4007,0700,0210,0004,0712	; 5308		CALL [CLARXL]		;CLEAR THE LEFT HALF OF
							; 5309		[BRX]_0,		; BOTH SRC AND DEST
U 0603, 2773,4221,0006,4174,0007,0700,0000,0000,0000	; 5310		HOLD RIGHT
U 2773, 2774,2112,0306,4174,4007,0700,4000,0000,0000	; 5311		Q_[AR]-[BRX]		;NUMBER OF WORDS TO MOVE
U 2774, 2775,0001,0705,4174,4007,0700,0000,0000,0000	; 5312		[BR]_Q+1		;LENGTH +1
							; 5313		[BR]_[BR] SWAP, 	;COPY TO BOTH HALFS
U 2775, 2776,3770,0505,4344,0007,0700,0000,0000,0000	; 5314		HOLD RIGHT
							; 5315		[BR]_AC+[BR],		;FINAL AC
U 2776, 2777,0551,0505,0274,4407,0701,0000,0000,0000	; 5316		INH CRY18		;KEEP AC CORRECT IF DEST IS 777777
U 2777, 0604,3771,0013,4370,4007,0700,0000,0000,0001	; 5317		STATE_[BLT]		;SET PAGE FAIL FLAGS
							; 5318	=0	AC_[BR],		;STORE BACK IN AC
U 0604, 3464,3440,0505,0174,4007,0700,0410,0000,0000	; 5319		CALL [LOADQ]		;LOAD FIRST WORD INTO Q
							; 5320		[BR]_[ARX]+1000001,	;SRC+1
							; 5321		3T,
U 0605, 3000,0551,0405,4370,4007,0701,0000,0000,0001	; 5322		HOLD LEFT
							; 5323		[BR]-[BRX], 3T,		;IS THIS THE CORE CLEAR CASE
U 3000, 0606,2113,0506,4174,4007,0331,4000,0000,0000	; 5324		SKIP ADR.EQ.0
							; 5325	=0
							; 5326	BLTLP1: VMA_[BRX],
							; 5327		START WRITE,
							; 5328		PXCT BLT DEST,		;WHERE TO STORE
U 0606, 3003,3443,0600,4174,4007,0700,0200,0003,0312	; 5329		J/BLTGO
							; 5330	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 125
; DSK: KSHACK; SIMPLE 22	23:36:28 5-OCT-84	BLT

							; 5331	
							; 5332	;CLEAR CORE CASE
							; 5333		VMA_[BRX],
							; 5334		START WRITE,
U 0607, 3001,3443,0600,4174,4007,0700,0200,0003,0312	; 5335		PXCT BLT DEST
							; 5336	BLTCLR: MEM WRITE,		;STORE WORD
							; 5337		MEM_Q,
U 3001, 0610,3223,0000,4174,4007,0671,0200,0000,0002	; 5338		SKIP/-1 MS		;1 MS TIMER UP
U 0610, 3004,4443,0000,4174,4007,0700,0000,0000,0000	; 5339	=0	J/BLTGOT		;GO TAKE INTERRUPT
							; 5340		[BRX]-[AR],		;BELOW E?
							; 5341		3T,
U 0611, 0612,2113,0603,4174,4007,0521,4000,0000,0000	; 5342		SKIP DP0
							; 5343	=0	END BLT,		;NO--STOP BLT
U 0612, 1400,4221,0013,4170,4007,0700,0000,0000,0000	; 5344		J/DONE
							; 5345		[ARX]_[ARX]+1,		;FOR PAGE FAIL LOGIC
U 0613, 0614,0111,0704,4174,4007,0370,0000,0000,0000	; 5346		SKIP IRPT
							; 5347	=0	VMA_[BRX]+1,
							; 5348		LOAD VMA,
							; 5349		PXCT BLT DEST,
							; 5350		START WRITE,		;YES--KEEP STORING
U 0614, 3001,0111,0706,4170,4007,0700,0200,0003,0312	; 5351		J/BLTCLR
							; 5352		VMA_[BRX]+1,		;INTERRUPT
							; 5353		LOAD VMA,
							; 5354		PXCT BLT DEST,
							; 5355		START WRITE,
U 0615, 3003,0111,0706,4170,4007,0700,0200,0003,0312	; 5356		J/BLTGO
							; 5357	
							; 5358	;HERE FOR NORMAL BLT
							; 5359	BLTLP:	MEM READ,		;FETCH
							; 5360		Q_MEM,
U 3002, 0606,3772,0000,4365,5007,0700,0200,0000,0002	; 5361		J/BLTLP1
							; 5362	BLTGO:	MEM WRITE,		;STORE
U 3003, 3004,3223,0000,4174,4007,0701,0200,0000,0002	; 5363		MEM_Q
							; 5364	BLTGOT:	[BRX]-[AR],		;BELOW E?
							; 5365		3T,
U 3004, 0616,2113,0603,4174,4007,0521,4000,0000,0000	; 5366		SKIP DP0
							; 5367	=0	END BLT,		;NO--STOP BLT
U 0616, 1400,4221,0013,4170,4007,0700,0000,0000,0000	; 5368		J/DONE
U 0617, 3005,0111,0706,4174,4007,0700,0000,0000,0000	; 5369		[BRX]_[BRX]+1		;UPDATE DEST ADDRESS
							; 5370		VMA_[ARX]+1,
							; 5371		LOAD VMA,
							; 5372		PXCT BLT SRC,
							; 5373		START READ,		;YES--MOVE 1 MORE WORD
U 3005, 3002,0111,0704,4170,4007,0700,0200,0004,0712	; 5374		J/BLTLP
							; 5375	
							; 5376	;HERE TO CLEAN UP AFTER BLT PAGE FAILS
							; 5377	BLT-CLEANUP:
U 3006, 3007,3770,0303,4344,4007,0700,0000,0000,0000	; 5378		[AR]_[AR] SWAP		;PUT SRC IN LEFT HALF
							; 5379		[AR]_WORK[SV.BRX],
U 3007, 3010,3771,0003,7270,4007,0701,0000,0000,0214	; 5380		HOLD LEFT
							; 5381		AC_[AR],		;STORE THE AC AND RETURN
U 3010, 2520,3440,0303,0174,4007,0700,0400,0000,0000	; 5382		J/CLEANED
							; 5383	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 126
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	BLT

							; 5384	;;;-*-Fundamental-*-
							; 5385	
							; 5386	.TOC	"FLOATING POINT -- FAD, FSB"
							; 5387	
							; 5388		.DCODE
D 0140, 0701,1577,1100					; 5389	140:	FL-R,	FL-AC,		J/FAD
D 0142, 0702,1577,1700					; 5390	142:	FL-RW,	FL-MEM,		J/FAD
D 0143, 0703,1577,1700					; 5391		FL-RW,	FL-BOTH,	J/FAD
D 0144, 0711,1577,1100					; 5392		FL-R,	FL-AC, ROUND,	J/FAD
D 0145, 0611,1577,0100					; 5393		FL-I,	FL-AC, ROUND,	J/FAD
D 0146, 0712,1577,1700					; 5394		FL-RW,	FL-MEM, ROUND,	J/FAD
D 0147, 0713,1577,1700					; 5395		FL-RW,	FL-BOTH, ROUND,	J/FAD
							; 5396	
D 0150, 0701,1576,1100					; 5397	150:	FL-R,	FL-AC,		J/FSB
D 0152, 0702,1576,1700					; 5398	152:	FL-RW,	FL-MEM,		J/FSB
D 0153, 0703,1576,1700					; 5399		FL-RW,	FL-BOTH,	J/FSB
D 0154, 0711,1576,1100					; 5400		FL-R,	FL-AC, ROUND,	J/FSB
D 0155, 0611,1576,0100					; 5401		FL-I,	FL-AC, ROUND,	J/FSB
D 0156, 0712,1576,1700					; 5402		FL-RW,	FL-MEM, ROUND,	J/FSB
D 0157, 0713,1576,1700					; 5403		FL-RW,	FL-BOTH, ROUND,	J/FSB
							; 5404		.UCODE
							; 5405	
							; 5406	;BOTH FAD & FSB ARE ENTERED WITH THE MEMORY OPERAND IN AR
							; 5407	; SIGN SMEARED. THE EXPONENT IN BOTH SC AND FE.
							; 5408	1576:
U 1576, 1577,2441,0303,4174,4007,0700,4000,0000,0000	; 5409	FSB:	[AR]_-[AR]		;MAKE MEMOP NEGATIVE
							; 5410	
							; 5411	1577:
U 1577, 0535,3771,0005,0276,6006,7701,2000,0020,2000	; 5412	FAD:	[BR]_AC, SC_SC-EXP-1, 3T, SCAD DISP
							; 5413	=0*
U 0535, 0622,3333,0005,4174,4007,0520,0000,0000,0000	; 5414	FAS1:	READ [BR], SKIP DP0, J/FAS2	;BR .LE. AR
U 0537, 3011,3441,0304,4174,4007,0700,0000,0000,0000	; 5415		[ARX]_[AR]		;SWAP AR AND BR
U 3011, 3012,3441,0503,4174,4007,0700,2000,0041,2000	; 5416		[AR]_[BR], SC_EXP
U 3012, 3013,3441,0405,4174,4007,0700,2000,0020,0000	; 5417		[BR]_[ARX], SC_SC-FE-1	;NUMBER OF SHIFT STEPS
U 3013, 0620,3333,0003,4174,4007,0520,1000,0041,2000	; 5418		READ [AR], FE_EXP, 2T, SKIP DP0
U 0620, 3014,4551,0303,4374,0007,0700,0000,0000,0777	; 5419	=0	[AR]_+SIGN, J/FAS3
U 0621, 3014,3551,0303,4374,0007,0700,0000,0077,7000	; 5420		[AR]_-SIGN, J/FAS3
							; 5421	
							; 5422	=0	;SIGN SMEAR BR AND UNNORMALIZE
U 0622, 3014,4551,0505,4374,0007,0700,0000,0000,0777	; 5423	FAS2:	[BR]_+SIGN, J/FAS3
U 0623, 3014,3551,0505,4374,0007,0700,0000,0077,7000	; 5424		[BR]_-SIGN, J/FAS3
							; 5425	
U 3014, 0624,4222,0000,4174,4007,0630,2000,0060,0000	; 5426	FAS3:	Q_0, STEP SC
							; 5427	=0
U 0624, 0624,3446,0505,4174,4047,0630,2000,0060,0000	; 5428	FAS4:	[BR]_[BR]*.5 LONG, STEP SC, ASHC, J/FAS4
U 0625, 0720,0111,0503,4174,4003,4701,0000,0000,0000	; 5429		[AR]_[AR]+[BR], NORM DISP, J/SNORM
							; 5430	
							; 5431	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 127
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	FLAOTING POINT -- FMP

							; 5432	.TOC	"FLAOTING POINT -- FMP"
							; 5433	
							; 5434		.DCODE
D 0160, 0701,1570,1100					; 5435	160:	FL-R,	FL-AC,		J/FMP
D 0162, 0702,1570,1700					; 5436	162:	FL-RW,	FL-MEM,		J/FMP
D 0163, 0703,1570,1700					; 5437		FL-RW,	FL-BOTH,	J/FMP
							; 5438	
D 0164, 0711,1570,1100					; 5439		FL-R,	FL-AC, ROUND,	J/FMP
D 0165, 0611,1570,0100					; 5440		FL-I,	FL-AC, ROUND,	J/FMP
D 0166, 0712,1570,1700					; 5441		FL-RW,	FL-MEM, ROUND,	J/FMP
D 0167, 0713,1570,1700					; 5442		FL-RW,	FL-BOTH, ROUND,	J/FMP
							; 5443		.UCODE
							; 5444	
							; 5445	1570:
							; 5446	FMP:	[BRX]_AC,		;GET AC
							; 5447		FE_SC+EXP, 3T,		;EXPONENT OF ANSWER
U 1570, 0626,3771,0006,0276,6007,0521,1000,0040,2000	; 5448		SKIP DP0		;GET READY TO SMEAR SIGN
U 0626, 3015,4551,0606,4374,0007,0700,0000,0000,0777	; 5449	=0	[BRX]_+SIGN, J/FMP1	;POSITIVE
U 0627, 3015,3551,0606,4374,0007,0700,0000,0077,7000	; 5450		[BRX]_-SIGN, J/FMP1	;NEGATIVE
U 3015, 0553,3442,0300,4174,4007,0700,2000,0071,0033	; 5451	FMP1:	Q_[AR], SC_27.		;GET MEMORY OPERAND
							; 5452	=01*	[BRX]_[BRX]*.5 LONG,	;SHIFT RIGHT
U 0553, 2617,3446,0606,4174,4007,0700,0010,0000,0000	; 5453		CALL [MULSUB]		;MULTIPLY
							; 5454		Q_Q.AND.#, #/777000,	;WE ONLY COMPUTED
U 0557, 3016,4662,0000,4370,4007,0700,0000,0077,7000	; 5455		HOLD LEFT		; 27 BITS
U 3016, 3017,3441,0403,4174,4007,0700,1000,0041,0002	; 5456		[AR]_[ARX], FE_FE+2	;SET SHIFT PATHS
							; 5457		[AR]_[AR]*.5 LONG,	;SHIFT OVER
							; 5458		FE_FE-200,		;ADJUST EXPONENT
U 3017, 0720,3446,0303,4174,4003,4701,1000,0041,1600	; 5459		NORM DISP, J/SNORM	;NORMALIZE & EXIT
							; 5460	
							; 5461	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 128
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	FLOATING POINT -- FDV

							; 5462	.TOC	"FLOATING POINT -- FDV"
							; 5463	
							; 5464		.DCODE
D 0170, 0701,1574,1100					; 5465	170:	FL-R,	FL-AC,		J/FDV
D 0172, 0702,1574,1700					; 5466	172:	FL-RW,	FL-MEM,		J/FDV
D 0173, 0703,1574,1700					; 5467		FL-RW,	FL-BOTH,	J/FDV
							; 5468	
D 0174, 0711,1574,1100					; 5469		FL-R,	FL-AC, ROUND,	J/FDV
D 0175, 0611,1574,0100					; 5470		FL-I,	FL-AC, ROUND,	J/FDV
D 0176, 0712,1574,1700					; 5471		FL-RW,	FL-MEM, ROUND,	J/FDV
D 0177, 0713,1574,1700					; 5472		FL-RW,	FL-BOTH, ROUND,	J/FDV
							; 5473		.UCODE
							; 5474	
							; 5475	
							; 5476	1574:
U 1574, 0630,3441,0305,0174,4007,0621,0000,0000,0000	; 5477	FDV:	[BR]_[AR], SKIP AD.EQ.0, AC	;COPY DIVSOR SEE IF 0
							; 5478	=0
							; 5479		[AR]_AC, FE_SC-EXP, SKIP DP0,	;GET AC & COMPUTE NEW
U 0630, 0632,3771,0003,0276,6007,0520,1000,0030,2000	; 5480			J/FDV0			; EXPONENT
U 0631, 0123,4443,0000,4174,4467,0700,0000,0071,1000	; 5481		FL NO DIVIDE			;DIVIDE BY ZERO
							; 5482	=0
U 0632, 3020,4551,0303,4374,0007,0700,0000,0000,0777	; 5483	FDV0:	[AR]_+SIGN, J/FDV1
U 0633, 3021,3551,0303,4374,0007,0700,0000,0077,7000	; 5484		[AR]_-SIGN, J/FDV2
U 3020, 3022,3441,0304,4174,4007,0700,1000,0031,0200	; 5485	FDV1:	[ARX]_[AR],FE_-FE+200,J/FDV3	;COMPUTE 2*DVND
U 3021, 3022,2441,0304,4174,4007,0700,5000,0031,0200	; 5486	FDV2:	[ARX]_-[AR],FE_-FE+200,J/FDV3	;ABSOLUTE VALUE
U 3022, 0634,3445,0506,4174,4007,0520,0000,0000,0000	; 5487	FDV3:	[BRX]_[BR]*2, SKIP DP0	;ABSOLUTE VALUE
							; 5488	=0
U 0634, 0636,2113,0406,4174,4007,0311,4000,0000,0000	; 5489	FDV4:	[ARX]-[BRX], SKIP CRY0, 3T, J/FDV5	;FLOATING NO DIV?
U 0635, 0634,2445,0506,4174,4007,0700,4000,0000,0000	; 5490		[BRX]_-[BR]*2, J/FDV4		;FORCE ABSOLUTE VALUE
							; 5491	=0
U 0636, 0640,3447,0606,4174,4007,0700,0000,0000,0000	; 5492	FDV5:	[BRX]_[BRX]*.5, J/FDV6		;SHIFT BACK ARX
U 0637, 0123,4443,0000,4174,4467,0700,0000,0071,1000	; 5493		FL NO DIVIDE			;UNNORMALIZED INPUT
							; 5494	=0
							; 5495	FDV6:	[AR]_[AR]*2,			;DO NOT DROP A BIT
U 0640, 3470,3445,0303,4174,4007,0700,0010,0000,0000	; 5496		CALL [SBRL]			;AT FDV7+1
U 0641, 0644,2113,0604,4174,4007,0421,4000,0000,0000	; 5497		[BRX]-[ARX], SKIP AD.LE.0	;IS ANSWER .LE. 1?
							; 5498	=00100
U 0644, 2662,4222,0000,4174,4007,0700,2010,0071,0033	; 5499	FDV7:	Q_0, SC_27., CALL [DIVSGN]	;DIVIDE
U 0645, 0644,3447,0303,4174,4007,0700,1000,0041,0001	; 5500	=00101	[AR]_[AR]*.5, FE_FE+1, J/FDV7	;SCALE DV'END
							; 5501	=01100
U 0654, 3023,3227,0003,4174,4007,0700,0000,0000,0000	; 5502	FDV8:	[AR]_Q*.5, J/FDV9		;PUT ANSWER IN AR
							; 5503	=01101	READ [AR], SKIP AD.EQ.0,	;-VE ANSWER, LOOK AT RMDR
U 0655, 1054,3333,0003,4174,4007,0621,0010,0000,0000	; 5504		CALL [SETSN]			; SEE HOW TO NEGATE
							; 5505	=01110	READ [AR], SKIP AD.EQ.0,	;-VE ANSWER, LOOK AT RMDR
U 0656, 1054,3333,0003,4174,4007,0621,0010,0000,0000	; 5506		CALL [SETSN]			; SEE HOW TO NEGATE
U 0657, 3023,3227,0003,4174,4007,0700,0000,0000,0000	; 5507	=01111	[AR]_Q*.5, J/FDV9		;PUT ANSWER IN AR
U 0677, 3023,2227,0003,4174,4007,0700,4000,0000,0000	; 5508	=11111	[AR]_-Q*.5, J/FDV9		;ZERO RMDR
							; 5509	
U 3023, 0653,4222,0000,4174,4007,0700,0000,0000,0000	; 5510	FDV9:	Q_0, J/SNORM0			;GO NORMALIZE
							; 5511	
							; 5512	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 129
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	FLOATING POINT -- FLTR, FSC

							; 5513	.TOC	"FLOATING POINT -- FLTR, FSC"
							; 5514	
							; 5515		.DCODE
D 0127, 0011,1616,1100					; 5516	127:	R,	FL-AC,ROUND,	J/FLTR
D 0132, 0001,1621,2100					; 5517	132:	I,	FL-AC,		J/FSC
							; 5518		.UCODE
							; 5519	
							; 5520	1616:
U 1616, 0642,4553,0300,4374,4007,0321,0000,0077,7000	; 5521	FLTR:	[AR].AND.#, #/777000, 3T, SKIP ADL.EQ.0 ;SMALL POS NUMBER?
U 0642, 0646,2441,0305,4174,4007,0521,4000,0000,0000	; 5522	=0	[BR]_-[AR], SKIP DP0, 3T, J/FLTR1	;NO--SEE IF MINUS
U 0643, 0653,4222,0000,4174,4007,0700,1000,0071,0233	; 5523		Q_0, FE_S#, S#/233, J/SNORM0	;FITS IN 27 BITS
							; 5524	=0
							; 5525	FLTR1:	[BR].AND.#, #/777000, 3T,
U 0646, 0650,4553,0500,4374,4007,0321,0000,0077,7000	; 5526			SKIP ADL.EQ.0, J/FLTR1A	;SMALL NEGATIVE NUMBER
U 0647, 3024,4222,0000,4174,4007,0700,1000,0071,0244	; 5527		Q_0, FE_S#, S#/244, J/FLTR2	;LARGE POS NUMBER
							; 5528	=0
U 0650, 3024,4222,0000,4174,4007,0700,1000,0071,0244	; 5529	FLTR1A:	Q_0, FE_S#, S#/244, J/FLTR2	;BIG NUMBER
U 0651, 0653,4222,0000,4174,4007,0700,1000,0071,0233	; 5530		Q_0, FE_S#, S#/233, J/SNORM0	;FITS IN 27 BITS
							; 5531	;AT THIS POINT WE KNOW THE NUMBER TAKES MORE THAN 27 BITS. WE JUST
							; 5532	; SHIFT 8 PLACES RIGHT AND NORMALIZE. WE COULD BE MORE CLEVER BUT
							; 5533	; THIS IS THE RARE CASE ANYWAY.
U 3024, 0652,3446,0303,4174,4047,0700,2000,0071,0006	; 5534	FLTR2:	[AR]_[AR]*.5 LONG, ASHC, SC_6	;SHOVE OVER TO THE RIGHT
							; 5535	=0
							; 5536	FLTR3:	[AR]_[AR]*.5 LONG, ASHC, 	;SHIFT RIGHT 9 PLACES
U 0652, 0652,3446,0303,4174,4047,0630,2000,0060,0000	; 5537			STEP SC, J/FLTR3	; SO IT WILL FIT
U 0653, 0720,3333,0003,4174,4003,4701,0000,0000,0000	; 5538	SNORM0:	READ [AR], NORM DISP, J/SNORM	;NORMALIZE ANSWER
							; 5539	
							; 5540	
							; 5541	1621:
U 1621, 3025,3333,0003,4174,4007,0700,2000,0041,4000	; 5542	FSC:	READ [AR], SC_SHIFT
U 3025, 3026,4222,0000,0174,4007,0700,0000,0000,0000	; 5543		Q_0, AC				;DON'T SHIFT IN JUNK
U 3026, 0660,3771,0003,0276,6007,0520,1000,0040,2000	; 5544		[AR]_AC, FE_SC+EXP, SKIP DP0	;SIGN SMEAR
U 0660, 0653,4551,0303,4374,0007,0700,0000,0000,0777	; 5545	=0	[AR]_+SIGN, J/SNORM0
U 0661, 0653,3551,0303,4374,0007,0700,0000,0077,7000	; 5546		[AR]_-SIGN, J/SNORM0
							; 5547	
							; 5548	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 130
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	FLOATING POINT -- FIX AND FIXR

							; 5549	.TOC	"FLOATING POINT -- FIX AND FIXR"
							; 5550	
							; 5551		.DCODE
D 0122, 0701,1626,1100					; 5552	122:	FL-R,	FL-AC,		J/FIX
D 0126, 0711,1626,1100					; 5553	126:	FL-R,	FL-AC,ROUND,	J/FIX
							; 5554		.UCODE
							; 5555	
							; 5556	1626:
							; 5557	FIX:	Q_0, SCAD/A+B, SCADA/S#,	;CLEAR Q, SEE IF
							; 5558			S#/1534, SCADB/FE, 3T,	; ANSWER FITS IN
U 1626, 0664,4222,0000,4174,4006,7701,0000,0041,1534	; 5559			SCAD DISP		; 35 BITS.
U 0664, 0123,4443,0000,4174,4467,0700,0000,0041,1000	; 5560	=0*	SET AROV, J/NIDISP		;TOO BIG
U 0666, 0665,4443,0000,4174,4006,7701,2000,0041,1544	; 5561		SC_FE+S#, S#/1544, 3T, SCAD DISP ;NEED TO MOVE LEFT?
U 0665, 0670,4443,0000,4174,4007,0630,2000,0060,0000	; 5562	=0*	STEP SC, J/FIXL
U 0667, 3027,4443,0000,4174,4007,0700,2000,0031,0232	; 5563		SC_S#-FE, S#/232		;NUMBER OF PLACES TO SHIFT
							; 5564						; RIGHT
U 3027, 0662,4443,0000,4174,4007,0630,2000,0060,0000	; 5565		STEP SC				;ALREADY THERE
							; 5566	=0
							; 5567	FIXR:	[AR]_[AR]*.5 LONG, ASHC,	;SHIFT BINARY POINT
U 0662, 0662,3446,0303,4174,4047,0630,2000,0060,0000	; 5568			STEP SC, J/FIXR		; TO BIT 35.5
U 0663, 0703,3447,0705,4174,4003,7700,0000,0000,0000	; 5569		[BR]_[ONE]*.5, B DISP, J/FIXX	;WHICH KIND OF FIX?
							; 5570	
							; 5571	=0
U 0670, 0670,3445,0303,4174,4007,0630,2000,0060,0000	; 5572	FIXL:	[AR]_[AR]*2, STEP SC, J/FIXL	;SHIFT LEFT
U 0671, 0060,3440,0303,0174,4156,4700,0400,0000,0000	; 5573		AC_[AR], NEXT INST		;WE ARE NOW DONE
							; 5574	
							; 5575	=0*11
U 0703, 0672,3333,0003,4174,4007,0520,0000,0000,0000	; 5576	FIXX:	READ [AR], SKIP DP0, J/FIXT	;FIX--SEE IF MINUS
U 0713, 1514,0111,0503,4174,4003,7700,0200,0003,0001	; 5577	FIXX1:	[AR]_[AR]+[BR], FL-EXIT		;FIXR--ROUND UP
							; 5578	=0
U 0672, 0060,3440,0303,0174,4156,4700,0400,0000,0000	; 5579	FIXT:	AC_[AR], NEXT INST		;FIX & +, TRUNCATE
U 0673, 0674,3223,0000,4174,4007,0621,0000,0000,0000	; 5580		READ Q, SKIP AD.EQ.0		;NEGATIVE--ANY FRACTION?
U 0674, 1514,0111,0703,4174,4003,7700,0200,0003,0001	; 5581	=0	[AR]_[AR]+1, FL-EXIT		;YES--ROUND UP
							; 5582		[BR]_.NOT.[MASK],		;MAYBE--GENERATE .75
U 0675, 0713,7441,1205,4174,4007,0700,0000,0000,0000	; 5583		J/FIXX1				;ROUND UP IF BIT 36 OR
							; 5584						; 37 SET
							; 5585	
							; 5586	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 131
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	FLOATING POINT -- SINGLE PRECISION NORMALIZE

							; 5587	.TOC	"FLOATING POINT -- SINGLE PRECISION NORMALIZE"
							; 5588	
							; 5589	;NORMALIZE DISPATCH IS A 9-WAY DISPATCH. THE HARDWARE LOOKS AT
							; 5590	; 4 SIGNALS: DP=0, DP BIT 8, DP BIT 9, DP BIT -2. THE 9 CASES
							; 5591	; ARE:
							; 5592	
							; 5593	;	DP=0	DP08	DP09	DP00	ACTION TO TAKE
							; 5594	;	0	0	0	0	SHIFT LEFT
							; 5595	;
							; 5596	;	0	0	0	1	NEGATE AND RETRY
							; 5597	;
							; 5598	;	0	0	1	0	ALL DONE
							; 5599	;
							; 5600	;	0	0	1	1	NEGATE AND RETRY
							; 5601	;
							; 5602	;	0	1	0	0	SHIFT RIGHT
							; 5603	;
							; 5604	;	0	1	0	1	NEGATE AND RETRY
							; 5605	;
							; 5606	;	0	1	1	0	SHIFT RIGHT
							; 5607	;
							; 5608	;	0	1	1	1	NEGATE AND RETRY
							; 5609	;
							; 5610	;	1	-	-	-	LOOK AT Q BITS
							; 5611	
							; 5612	;ENTER HERE WITH UNNORMALIZED NUMBER IN AR!Q. FE HOLDS THE NEW
							; 5613	; EXPONENT. CALL WITH NORM DISP
							; 5614	=0000		;9-WAY DISPATCH
U 0720, 0720,3444,0303,4174,4063,4701,1000,0041,1777	; 5615	SNORM:	[AR]_[AR]*2 LONG, DIV, FE_FE-1, NORM DISP, J/SNORM
U 0721, 0704,2222,0000,4174,4007,0311,4000,0000,0000	; 5616		Q_-Q, SKIP CRY0, 3T, J/SNNEG
U 0722, 0702,3333,0003,4174,4003,4701,0010,0000,0000	; 5617		READ [AR], NORM DISP, CALL [SROUND]
U 0723, 0704,2222,0000,4174,4007,0311,4000,0000,0000	; 5618		Q_-Q, SKIP CRY0, 3T, J/SNNEG
U 0724, 0702,3447,0303,4174,4007,0700,1010,0041,0001	; 5619		[AR]_[AR]*.5, FE_FE+1, CALL [SROUND]
U 0725, 0704,2222,0000,4174,4007,0311,4000,0000,0000	; 5620		Q_-Q, SKIP CRY0, 3T, J/SNNEG
U 0726, 0702,3447,0303,4174,4007,0700,1010,0041,0001	; 5621		[AR]_[AR]*.5, FE_FE+1, CALL [SROUND]
U 0727, 0704,2222,0000,4174,4007,0311,4000,0000,0000	; 5622		Q_-Q, SKIP CRY0, 3T, J/SNNEG
U 0730, 0700,3223,0000,4174,4007,0621,0000,0000,0000	; 5623		READ Q, SKIP AD.EQ.0, J/SNORM1
U 0736, 0701,3770,0303,4324,0457,0700,0000,0041,0000	; 5624	=1110	[AR]_EXP, J/FLEX
							; 5625	=
							; 5626	=0
U 0700, 0720,3444,0303,4174,4063,4701,1000,0041,1777	; 5627	SNORM1:	[AR]_[AR]*2 LONG, DIV, FE_FE-1, NORM DISP, J/SNORM
U 0701, 1514,4443,0000,4174,4003,7700,0200,0003,0001	; 5628	FLEX:	FL-EXIT
							; 5629	
							; 5630	=0
U 0704, 0740,7441,0303,4174,4003,4701,0000,0000,0000	; 5631	SNNEG:	[AR]_.NOT.[AR], NORM DISP, J/SNNORM ;NEGATE HIGH WORD
							; 5632						; (NO CARRY)
U 0705, 0740,2441,0303,4174,4003,4701,4000,0000,0000	; 5633		[AR]_-[AR], NORM DISP, J/SNNORM	;NEGATE HIGH WORD (W/CARRY)
							; 5634	=0000
U 0740, 0740,3444,0303,4174,4063,4701,1000,0041,1777	; 5635	SNNORM:	[AR]_[AR]*2 LONG, DIV, FE_FE-1, NORM DISP, J/SNNORM
U 0742, 0702,3333,0003,4174,4003,4701,0010,0000,0000	; 5636	=0010	READ [AR], NORM DISP, CALL [SROUND]
U 0744, 0702,3447,0303,4174,4007,0700,1010,0041,0001	; 5637	=0100	[AR]_[AR]*.5, FE_FE+1, CALL [SROUND]
U 0746, 0702,3447,0303,4174,4007,0700,1010,0041,0001	; 5638	=0110	[AR]_[AR]*.5, FE_FE+1, CALL [SROUND]
U 0756, 0707,3770,0303,4324,0453,7700,0000,0041,0000	; 5639	=1110	[AR]_EXP, B DISP
							; 5640	=
U 0707, 0710,4553,1300,4374,4007,0321,0000,0000,2000	; 5641	=0111	TL [FLG], FLG.SN/1, J/SNNOT
							; 5642		[AR]_[AR].AND.[MASK],	;CLEAR ANY LEFT OVER BITS
U 0717, 0715,4111,1203,4174,4007,0700,0000,0000,0000	; 5643		J/SNNOT1
							; 5644	=0
U 0710, 3030,7441,0303,4174,4007,0700,0000,0000,0000	; 5645	SNNOT:	[AR]_.NOT.[AR], J/SNNOT2
U 0711, 0714,3223,0000,4174,4007,0621,0000,0000,0000	; 5646		READ Q, SKIP AD.EQ.0
U 0714, 3030,7441,0303,4174,4007,0700,0000,0000,0000	; 5647	=0	[AR]_.NOT.[AR], J/SNNOT2
U 0715, 3030,2441,0303,4174,4007,0700,4000,0000,0000	; 5648	SNNOT1:	[AR]_-[AR], J/SNNOT2	;NORMAL NEGATE AND EXIT
U 3030, 1514,4221,0013,4174,4003,7700,0200,0003,0001	; 5649	SNNOT2:	[FLG]_0, FL-EXIT
							; 5650	
							; 5651	
							; 5652	
							; 5653	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 132
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	FLOATING POINT -- ROUND ANSWER

							; 5654	.TOC	"FLOATING POINT -- ROUND ANSWER"
							; 5655	
							; 5656	=*01*
U 0702, 0747,3447,0705,4174,4003,7700,0000,0000,0000	; 5657	SROUND:	[BR]_[ONE]*.5, B DISP, J/SRND1
U 0706, 0702,3447,0303,4174,4007,0700,1000,0041,0001	; 5658		[AR]_[AR]*.5, FE_FE+1, J/SROUND ;WE WENT TOO FAR
							; 5659	=0111
U 0747, 0016,4443,0000,4174,4004,1700,0000,0000,0000	; 5660	SRND1:	RETURN [16]			;NOT ROUNDING INSTRUCTION
U 0757, 0712,0111,0503,4174,4003,4701,0000,0000,0000	; 5661		[AR]_[AR]+[BR], NORM DISP
U 0712, 0016,4443,0000,4174,4004,1700,0000,0000,0000	; 5662	=*01*	RETURN [16]
U 0716, 0016,3447,0303,4174,4004,1700,1000,0041,0001	; 5663		[AR]_[AR]*.5, FE_FE+1, RETURN [16]
							; 5664	
							; 5665	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 133
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	FLOATING POINT -- DFAD, DFSB

							; 5666	.TOC	"FLOATING POINT -- DFAD, DFSB"
							; 5667	
							; 5668		.DCODE
D 0110, 1100,1637,1100					; 5669	110:	DBL FL-R,		J/DFAD
D 0111, 1100,1635,1100					; 5670	111:	DBL FL-R,		J/DFSB
							; 5671		.UCODE
							; 5672	
							; 5673	;ENTER FROM A-READ CODE WITH:
							; 5674	;FE/	EXP
							; 5675	;SC/	EXP
							; 5676	;AR/	C(E) SHIFT RIGHT 2 PLACES
							; 5677	;ARX/	C(E+1) SHIFTED RIGHT 1 PLACE
							; 5678	1635:
U 1635, 3031,2441,0404,4174,4007,0700,4000,0000,0000	; 5679	DFSB:	[ARX]_-[ARX]		;NEGATE LOW WORD
U 3031, 1637,2441,0303,4174,4007,0700,0040,0000,0000	; 5680		[AR]_-[AR]-.25, MULTI PREC/1
							; 5681	1637:
U 1637, 3032,4557,0006,1274,4007,0701,0000,0000,1441	; 5682	DFAD:	[BRX]_(AC[1].AND.[MAG])*.5, 3T ;GET LOW WORD
							; 5683		[BR]_AC*.5, 3T,		;GET AC AND START TO SHIFT
							; 5684		SC_SC-EXP-1,		;NUMBER OF PLACES TO SHIFT
U 3032, 0732,3777,0005,0274,4007,0521,2000,0020,2000	; 5685		SKIP DP0		;SEE WHAT SIGN
							; 5686	=0	[BR]_+SIGN*.5, 3T,	;SIGN SMEAR
U 0732, 0734,5547,0505,0374,4007,0631,0000,0077,7400	; 5687		AC, SKIP/SC, J/DFAS1	;SEE WHICH IS BIGGER
							; 5688		[BR]_-SIGN*.5, 3T,	;SIGN SMEAR
U 0733, 0734,3547,0505,0374,4007,0631,0000,0077,7400	; 5689		AC, SKIP/SC, J/DFAS1	;SEE WHICH IS BIGGER
							; 5690	=0
							; 5691	DFAS1:	Q_[BRX],		;AR IS BIGGER
U 0734, 0750,3442,0600,4174,4007,0700,0000,0000,0000	; 5692		J/DFAS2			;ADJUST BR!Q
							; 5693		[T0]_AC,		;BR IS BIGGER OR EQUAL
U 0735, 3034,3771,0016,0276,6007,0700,2000,0041,2000	; 5694		SC_EXP, 2T, J/DFAS3	;SET SC TO THAT EXPONENT
							; 5695	
							; 5696	;HERE IF AR!ARX IS GREATER THAN BR!BRX
							; 5697	=0
U 0750, 0543,3441,0516,4174,4007,0700,0010,0000,0000	; 5698	DFAS2:	[T0]_[BR], CALL [DFADJ]	;ADJUST BR!Q
U 0751, 3033,3441,1605,4174,4007,0700,0000,0000,0000	; 5699		[BR]_[T0]		;PUT ANSWER BACK
U 3033, 3037,0002,0400,4174,4007,0700,0000,0000,0000	; 5700		Q_Q+[ARX], J/DFAS5	;ADD LOW WORDS
							; 5701	
							; 5702	;HERE IS BR!BRX IF GREATER THAN OR EQUAL TO AR!ARX
							; 5703	DFAS3:	Q_[ARX],		;SETUP TO SHIFT AR!ARX
U 3034, 3035,3442,0400,4174,4007,0700,2000,0020,0000	; 5704		SC_SC-FE-1		;COMPUTE # OF PLACES
U 3035, 0752,3333,0016,4174,4007,0700,1000,0041,2000	; 5705		READ [T0], FE_EXP	;EXPONENT OF ANSWER
U 0752, 0543,3441,0316,4174,4007,0700,0010,0000,0000	; 5706	=0	[T0]_[AR], CALL [DFADJ]	;ADJUST AR!Q
U 0753, 3036,3441,1603,4174,4007,0700,0000,0000,0000	; 5707		[AR]_[T0]		;PUT ANSWER BACK
U 3036, 3037,0002,0600,4174,4007,0700,0000,0000,0000	; 5708		Q_Q+[BRX], J/DFAS5	;ADD LOW WORDS
							; 5709	
							; 5710	;BIT DIDDLE TO GET THE ANSWER (INCLUDING 2 GUARD BITS) INTO
							; 5711	; AR!Q
							; 5712	DFAS5:	[AR]_([AR]+[BR])*.5 LONG, ;ADD HIGH WORDS
U 3037, 3040,0116,0503,4174,4047,0700,0040,0000,0000	; 5713		MULTI PREC/1, ASHC	;INJECT SAVED CRY2
							; 5714		[AR]_[AR]*2 LONG,	;SHIFT BACK LEFT
U 3040, 0773,3444,0303,4174,4046,2700,0000,0000,0000	; 5715		ASHC, MUL DISP		;SEE IF WE LOST A 1
							; 5716	=1011
U 0773, 3041,5111,1217,4174,4007,0700,0000,0000,0000	; 5717	DFAS6:	[T1]_[T1].AND.NOT.[MASK], J/DFAS7
U 0777, 0773,0222,0000,4174,4007,0700,4000,0000,0000	; 5718		Q_Q+.25, J/DFAS6
							; 5719	DFAS7:	[AR]_[AR]*2 LONG, ASHC,	;PUT IN GUARD BITS
U 3041, 3042,3444,0303,4174,4047,0700,1000,0041,1777	; 5720		FE_FE-1
							; 5721		[AR]_[AR]*2 LONG, ASHC,
U 3042, 3043,3444,0303,4174,4047,0700,1000,0041,1777	; 5722		FE_FE-1
U 3043, 0767,3002,1700,4170,4007,0700,0000,0000,0000	; 5723		Q_[T1].OR.Q, HOLD LEFT, J/DNORM0
							; 5724	
							; 5725	;SUBROUTINE TO ADJUST NUMBER IN T0!Q
							; 5726	;RETURNS 1 WITH
							; 5727	;	T0!Q ADJUSTED
							; 5728	;	FLG.SN=1 IF WE SHIFTED OUT ANY 1 BITS (STICKY BIT)
							; 5729	;	T1 HAS Q TWO STEPS PRIOR TO BEING DONE
							; 5730	DFADJ	"STEP SC, ASHC, MUL DISP"
							; 5731	
							; 5732	=0**11
							; 5733	DFADJ:	[T0]_[T0]*2 LONG, DIV,	;MOVE EVERYTHING 2 PLACES
U 0543, 1055,3444,1616,4174,4067,0700,0010,0000,0000	; 5734		CALL [CLRSN]
U 0563, 3044,3444,1616,4174,4067,0700,0000,0000,0000	; 5735		[T0]_[T0]*2 LONG, DIV
U 3044, 3045,3444,1616,4174,4067,0700,0000,0000,0000	; 5736		[T0]_[T0]*2 LONG, DIV
							; 5737		[T0]_[T0]*.5 LONG, ASHC, ;SHIFT AT LEAST 1 PLACE
U 3045, 1012,3446,1616,4174,4047,0630,2000,0060,0000	; 5738		STEP SC
							; 5739	=1010
							; 5740	DFADJ1:	[T0]_[T0]*.5 LONG,	;UNNORMALIZE T0!Q
U 1012, 1012,3446,1616,4174,4046,2630,2000,0060,0000	; 5741		DFADJ, J/DFADJ1		;LOOP TILL DONE
							; 5742	DFADJ2:	[T1]_Q,			;SAVE GUARD BITS
U 1013, 1033,3221,0017,4174,4006,2700,0000,0000,0000	; 5743		MUL DISP, J/DFADJ5	;LOOK AT LAST BIT
U 1016, 0754,3551,1313,4374,0007,0700,0000,0000,2000	; 5744		[FLG]_[FLG].OR.#, FLG.SN/1, HOLD RIGHT, J/DFADJ3
U 1017, 0755,3551,1313,4374,0007,0700,0000,0000,2000	; 5745		[FLG]_[FLG].OR.#, FLG.SN/1, HOLD RIGHT, J/DFADJ4
							; 5746	
							; 5747	=0
U 0754, 0754,3446,1616,4174,4047,0630,2000,0060,0000	; 5748	DFADJ3:	[T0]_[T0]*.5 LONG, ASHC, STEP SC, J/DFADJ3
U 0755, 1033,3221,0017,4174,4007,0700,0000,0000,0000	; 5749	DFADJ4:	[T1]_Q			;SAVE 2 GUARD BITS
							; 5750	=1011
U 1033, 3046,3446,1616,4174,4047,0700,0000,0000,0000	; 5751	DFADJ5:	[T0]_[T0]*.5 LONG, ASHC, J/DFADJ6
U 1037, 1033,3551,1313,4374,0007,0700,0000,0000,2000	; 5752		[FLG]_[FLG].OR.#, FLG.SN/1, HOLD RIGHT, J/DFADJ5
U 3046, 0001,3446,1616,4174,4044,1700,0000,0000,0000	; 5753	DFADJ6:	[T0]_[T0]*.5 LONG, ASHC, RETURN [1]
							; 5754	
							; 5755	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 134
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	FLOATING POINT -- DFMP

							; 5756	.TOC	"FLOATING POINT -- DFMP"
							; 5757	
							; 5758		.DCODE
D 0112, 1105,1631,1100					; 5759	112:	DBL FL-R,	DAC,	J/DFMP
							; 5760		.UCODE
							; 5761	
							; 5762	;SAME ENTRY CONDITIONS AS DFAD/DFSB
							; 5763	1631:
U 1631, 0760,3442,0400,4174,4007,0700,2000,0071,0006	; 5764	DFMP:	Q_[ARX], SC_6		;SHIFT MEM OP 8 PLACES
							; 5765	=0
							; 5766	DFMP1:	[AR]_[AR]*2 LONG, ASHC,	;SHIFT
U 0760, 0760,3444,0303,4174,4047,0630,2000,0060,0000	; 5767		STEP SC, J/DFMP1
U 0761, 3047,3446,1200,4174,4007,0700,0000,0000,0000	; 5768		Q_Q*.5
U 3047, 3050,4662,0000,4374,0007,0700,0000,0007,7777	; 5769		Q_Q.AND.#, #/077777, HOLD RIGHT
U 3050, 3051,3221,0005,4174,4007,0700,0000,0000,0000	; 5770		[BR]_Q			;COPY LOW WORD
							; 5771	;
							; 5772	; BRX * BR ==> C(E+1) * C(AC+1)
							; 5773	;
U 3051, 0551,4557,0006,1274,4007,0700,0000,0000,1441	; 5774		[BRX]_(AC[1].AND.[MAG])*.5 ;GET LOW AC
U 0551, 2620,3447,0606,4174,4007,0700,2010,0071,0043	; 5775	=0**	[BRX]_[BRX]*.5, SC_35., CALL [MULSB1]
							; 5776	;
							; 5777	; BRX * Q ==> C(E) * C(AC+1)
							; 5778	;
U 0555, 0741,3442,0300,4174,4007,0700,2000,0071,0043	; 5779		Q_[AR], SC_35. 		;GO MULT NEXT HUNK
U 0741, 2621,4443,0000,4174,4007,0700,0010,0000,0000	; 5780	=0**	CALL [MULTIPLY]
U 0745, 3052,3441,0416,4174,4007,0700,0000,0000,0000	; 5781		[T0]_[ARX]		;SAVE PRODUCT
U 3052, 3053,3227,0004,4174,4007,0700,2000,0011,0000	; 5782		[ARX]_Q*.5, SC_FE	;PUT IN NEXT STEP
							; 5783	;
							; 5784	; BRX * BR ==> C(AC) * C(E+1)
							; 5785	;
							; 5786		[BRX]_AC*.5,		;PREPARE TO DO HIGH HALF
							; 5787		FE_SC+EXP,		;EXPONENT ON ANSWER
U 3053, 0762,3777,0006,0274,4007,0521,1000,0040,2000	; 5788		SKIP DP0, 3T
U 0762, 0770,5547,0606,4374,4007,0701,0000,0077,7400	; 5789	=0	[BRX]_+SIGN*.5, 3T, J/DFMP2
U 0763, 0770,3547,0606,4374,4007,0701,0000,0077,7400	; 5790		[BRX]_-SIGN*.5, 3T
							; 5791	=0**
U 0770, 2621,3442,0500,4174,4007,0700,2010,0071,0043	; 5792	DFMP2:	Q_[BR], SC_35., CALL [MULTIPLY]	;GO MULTIPLY
U 0774, 3054,3221,0017,4174,4007,0700,0000,0000,0000	; 5793		[T1]_Q			;SAVE FOR ROUNDING
U 3054, 0771,0111,1604,4174,4007,0700,0000,0000,0000	; 5794		[ARX]_[ARX]+[T0]	;PREPARE FOR LAST MUL
							; 5795	;
							; 5796	; BRX * Q ==> C(AC) * C(E)
							; 5797	;
							; 5798	=0**	Q_[AR], SC_35., 	;DO THE LAST MULTIPLY
U 0771, 2621,3442,0300,4174,4007,0700,2010,0071,0043	; 5799		CALL [MULTIPLY]		; ..
							; 5800	
							; 5801	;OK, WE NOW HAVE THE PRODUCT IN ARX!Q!T1. ALL WE NEED TO DO
							; 5802	; IS SOME BIT DIDDLES TO GET EVERYTHING IN THE RIGHT PLACE
							; 5803		[AR]_[ARX]*.5 LONG,	;SHIFT THE ANSWER
U 0775, 1003,3446,0403,4174,4007,0700,1000,0041,1576	; 5804		FE_FE+S#, S#/1576	;CORRECT EXPONENT
							; 5805	=0**11	READ [T1], SKIP AD.EQ.0, ;SEE IF LOW ORDER 1
U 1003, 1054,3333,0017,4174,4007,0621,0010,0000,0000	; 5806		CALL [SETSN]		; BITS AROUND SOMEPLACE
U 1023, 3055,3444,0303,4174,4047,0700,0000,0000,0000	; 5807		[AR]_[AR]*2 LONG, ASHC	;SHIFT LEFT
U 3055, 3056,3447,0705,4174,4007,0700,0000,0000,0000	; 5808		[BR]_[ONE]*.5		;PLACE TO INSTERT BITS
U 3056, 0764,4553,1700,4374,4007,0321,0000,0020,0000	; 5809		TL [T1], #/200000	;ANYTHING TO INJECT?
U 0764, 0765,0002,0500,4174,4007,0700,0000,0000,0000	; 5810	=0	Q_Q+[BR]		;YES--PUT IT IN
U 0765, 3057,3444,0303,4174,4047,0700,0000,0000,0000	; 5811		[AR]_[AR]*2 LONG, ASHC	;MAKE ROOM FOR MORE
U 3057, 0766,4553,1700,4374,4007,0321,0000,0010,0000	; 5812		TL [T1], #/100000	;ANOTHER BIT NEEDED
U 0766, 0767,0002,0500,4174,4007,0700,0000,0000,0000	; 5813	=0	Q_Q+[BR]		;YES--PUT IN LAST BIT
							; 5814	DNORM0:	READ [AR], NORM DISP,	;SEE WHAT WE NEED TO DO
U 0767, 1060,3333,0003,4174,4003,4701,1000,0041,0002	; 5815		FE_FE+S#, S#/2, J/DNORM	;ADJUST FOR INITIAL SHIFTS
							; 5816	
							; 5817	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 135
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	FLOATING POINT -- DFDV

							; 5818	.TOC	"FLOATING POINT -- DFDV"
							; 5819	
							; 5820		.DCODE
D 0113, 1105,1636,1100					; 5821	113:	DBL FL-R,	DAC,	J/DFDV
							; 5822		.UCODE
							; 5823	1636:
U 1636, 1026,3441,0406,4174,4007,0700,0000,0000,0000	; 5824	DFDV:	[BRX]_[ARX]		;COPY OPERAND (COULD SAVE TIME
							; 5825					; WITH SEPERATE A-READ FOR DFDV)
U 1026, 1055,4221,0017,4174,4007,0700,0010,0000,0000	; 5826	=1**10	[T1]_0, CALL [CLRSN]	;CLEAR FLAG
							; 5827		[BR]_[AR], SKIP AD.LE.0, ;SEE IF POSITIVE
U 1027, 1000,3441,0305,1174,4007,0421,0000,0000,1441	; 5828		AC[1]			;WARM UP RAM
							; 5829	=0
							; 5830	DFDV1:	[ARX]_(AC[1].AND.[MAG])*.5, ;POSITIVE--GET AC
U 1000, 3062,4557,0004,1274,4007,0700,0000,0000,1441	; 5831		J/DFDV2			; AND CONTINUE BELOW
U 1001, 3060,7441,1717,4174,4007,0700,0000,0000,0000	; 5832		[T1]_.NOT.[T1]		;DV'SOR NEGATIVE (OR ZERO)
U 3060, 3061,2441,0606,4174,4007,0700,4000,0000,0000	; 5833		[BRX]_-[BRX]		;NEGATE LOW WORD
							; 5834		AD/-B-.25, B/BR, DEST/AD, ;NEGATE HIGH WORD
							; 5835		MULTI PREC/1, 3T,	;ADDING IN CRY02
							; 5836		SKIP DP0, AC[1],	;SEE IF STILL NEGATIVE
U 3061, 1000,2331,0005,1174,4007,0521,0040,0000,1441	; 5837		J/DFDV1			; ..
							; 5838	DFDV2:	[AR]_AC*.5,		;GET AC AND SHIFT
							; 5839		FE_SC-EXP, 3T,		;COMPUTE NEW EXPONENT
U 3062, 1004,3777,0003,0274,4007,0521,1000,0030,2000	; 5840		SKIP DP0		;SEE IF NEGATIVE
U 1004, 1006,5547,0303,4374,4007,0701,0000,0077,7400	; 5841	=0	[AR]_+SIGN*.5, 3T, J/DFDV3	;POSITIVE
U 1005, 3063,7441,1717,4174,4007,0700,0000,0000,0000	; 5842		[T1]_.NOT.[T1]		;NEGATIVE OR ZERO
U 3063, 3064,3547,0303,4374,4007,0701,0000,0077,7400	; 5843		[AR]_-SIGN*.5, 3T	;SIGN SMEAR
U 3064, 3065,2442,0400,4174,4007,0700,4000,0000,0000	; 5844		Q_-[ARX]		;NEGATE OPERAND
							; 5845		[AR]_(-[AR]-.25)*.5 LONG, ;NEGATE HIGH WORD
							; 5846		MULTI PREC/1,		;USE SAVED CARRY
U 3065, 1007,2446,0303,4174,4047,0700,0040,0000,0000	; 5847		ASHC, J/DFDV4		;CONTINUE BELOW
							; 5848	=0
							; 5849	DFDV3:	Q_[ARX],		;COPY OPERAND
U 1006, 2661,3442,0400,4174,4007,0700,0010,0000,0000	; 5850		CALL [DDIVS]		;SHIFT OVER
U 1007, 1010,2113,0305,4174,4007,0521,4000,0000,0000	; 5851	DFDV4:	[AR]-[BR], 3T, SKIP DP0	;SEE IF OVERFLOW
U 1010, 0123,4443,0000,4174,4467,0700,0000,0071,1000	; 5852	=0	FL NO DIVIDE
U 1011, 1020,3221,0004,4174,4007,0700,0000,0000,0000	; 5853		[ARX]_Q			;START DIVISION
U 1020, 0460,4222,0000,4174,4007,0700,2010,0071,0032	; 5854	=0*	Q_0, SC_26., CALL [DBLDIV]
U 1022, 1030,3221,0016,4174,4007,0700,2000,0071,0043	; 5855		[T0]_Q, SC_35.
							; 5856	=0*	Q_Q.AND.NOT.[MAG],	;SEE IF ODD
							; 5857		SKIP AD.EQ.0,		;SKIP IF EVEN
U 1030, 0460,5002,0000,4174,4007,0621,0010,0000,0000	; 5858		CALL [DBLDIV]		;GO DIVIDE
U 1032, 3066,3446,1200,4174,4007,0700,0000,0000,0000	; 5859		Q_Q*.5			;MOVE ANSWER OVER
							; 5860	=
							; 5861		[T0]_[T0]*2 LONG, ASHC, ;DO FIRST NORM STEP
U 3066, 1053,3444,1616,4174,4046,2700,0000,0000,0000	; 5862		MUL DISP		; SEE IF A 1 FELL OUT
							; 5863	=1011
							; 5864	DFDV4A:	READ [T1], SKIP DP0,	;SHOULD RESULT BE NEGATIVE
							; 5865		FE_S#-FE, S#/202,	;CORRECT EXPONENT
U 1053, 1014,3333,0017,4174,4007,0520,1000,0031,0202	; 5866		J/DFDV4B		;LOOK BELOW
U 1057, 1053,0222,0000,4174,4007,0700,4000,0000,0000	; 5867		Q_Q+.25, J/DFDV4A	;PUT BACK THE BIT
							; 5868	=0
U 1014, 1060,3441,1603,4174,4003,4701,0000,0000,0000	; 5869	DFDV4B:	[AR]_[T0], NORM DISP, J/DNORM ;PLUS
U 1015, 1100,3441,1603,4174,4003,4701,0000,0000,0000	; 5870		[AR]_[T0], NORM DISP, J/DNNORM ;MINUS
							; 5871	
							; 5872	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 136
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	FLOATING POINT -- DOUBLE PRECISION NORMALIZE

							; 5873	.TOC	"FLOATING POINT -- DOUBLE PRECISION NORMALIZE"
							; 5874	
							; 5875	;NORMALIZE AR!Q
							; 5876	;DNORM0:	READ [AR], NORM DISP,	;SEE WHAT WE NEED TO DO
							; 5877	;	FE_FE+S#, S#/2, J/DNORM	;ADJUST FOR INITIAL SHIFTS
							; 5878	=0000
							; 5879	DNORM:	[AR]_[AR]*2 LONG,	;SHIFT LEFT
							; 5880		FE_FE-1, ASHC,		;ADJUST EXPONENT
U 1060, 1060,3444,0303,4174,4043,4701,1000,0041,1777	; 5881		NORM DISP, J/DNORM	;TRY AGAIN
U 1061, 1034,4553,1300,4374,4007,0321,0000,0000,2000	; 5882		TL [FLG], FLG.SN/1, J/DNEG ;RESULT IS NEGATIVE
							; 5883		READ [AR], NORM DISP,	;SEE IF WE WENT TOO FAR
U 1062, 0772,3333,0003,4174,4003,4701,0010,0000,0000	; 5884		CALL [DROUND]		; AND ROUND ANSWER
U 1063, 1034,4553,1300,4374,4007,0321,0000,0000,2000	; 5885		TL [FLG], FLG.SN/1, J/DNEG ;RESULT IS NEGATIVE
							; 5886		[AR]_[AR]*.5 LONG, ASHC,
U 1064, 0772,3446,0303,4174,4047,0700,1010,0041,0001	; 5887		FE_FE+1, CALL [DROUND]
U 1065, 1034,4553,1300,4374,4007,0321,0000,0000,2000	; 5888		TL [FLG], FLG.SN/1, J/DNEG ;RESULT IS NEGATIVE
							; 5889		[AR]_[AR]*.5 LONG, ASHC,
U 1066, 0772,3446,0303,4174,4047,0700,1010,0041,0001	; 5890		FE_FE+1, CALL [DROUND]
U 1067, 1034,4553,1300,4374,4007,0321,0000,0000,2000	; 5891		TL [FLG], FLG.SN/1, J/DNEG ;RESULT IS NEGATIVE
							; 5892		Q_[MAG].AND.Q,		;HIGH WORD IS ZERO
U 1070, 3067,4002,0000,4174,0007,0700,0000,0000,0000	; 5893		HOLD RIGHT, J/DNORM1	;GO TEST LOW WORD
							; 5894	=1110	AC[1]_[ARX].AND.[MAG],	;STORE LOW WORD
U 1076, 1515,4113,0400,1174,4007,0700,0400,0000,1441	; 5895		J/STAC			;GO DO HIGH WORD
							; 5896	=
							; 5897	
U 3067, 1024,3223,0000,4174,4007,0621,0000,0000,0000	; 5898	DNORM1:	READ Q, SKIP AD.EQ.0	;TEST LOW WORD
							; 5899	=0	[AR]_[AR]*2 LONG, 	;LOW WORD IS NON-ZERO
							; 5900		FE_FE-1, ASHC,		;ADJUST EXPONENT
U 1024, 1060,3444,0303,4174,4043,4701,1000,0041,1777	; 5901		NORM DISP, J/DNORM	;KEEP LOOKING
U 1025, 1515,3440,0303,1174,4007,0700,0400,0000,1441	; 5902		AC[1]_[AR], J/STAC	;WHOLE ANSWER IS ZERO
							; 5903	
							; 5904	;HERE TO NORMALIZE NEGATIVE D.P. RESULTS
							; 5905	=0
U 1034, 3070,7222,0000,4174,4007,0700,0000,0000,0000	; 5906	DNEG:	Q_.NOT.Q, J/DNEG1	;ONES COMP
U 1035, 1040,2222,0000,4174,4007,0511,4000,0000,0000	; 5907		Q_-Q, SKIP CRY2, J/DNEG2
U 3070, 1040,4221,0013,4174,4007,0700,0000,0000,0000	; 5908	DNEG1:	[FLG]_0
							; 5909	=0
							; 5910	DNEG2:	[AR]_.NOT.[AR],		;NO CARRY
U 1040, 1100,7441,0303,4174,4003,4701,0000,0000,0000	; 5911		NORM DISP, J/DNNORM	;GO NORMALIZE
							; 5912		[AR]_-[AR],		;CARRY
U 1041, 1100,2441,0303,4174,4003,4701,4000,0000,0000	; 5913		NORM DISP, J/DNNORM	;NORMALIZE
							; 5914	
							; 5915	=000*
							; 5916	DNNORM:	[AR]_[AR]*2 LONG,	;SHIFT 1 PLACE
							; 5917		FE_FE-1, ASHC,		;ADJUST EXPONENT
U 1100, 1100,3444,0303,4174,4043,4701,1000,0041,1777	; 5918		NORM DISP, J/DNNORM	;LOOP TILL DONE
							; 5919	=001*	READ [AR], NORM DISP,	;SEE IF WE WENT TOO FAR
U 1102, 0772,3333,0003,4174,4003,4701,0010,0000,0000	; 5920		CALL [DROUND]		; AND ROUND ANSWER
							; 5921	=010*	[AR]_[AR]*.5 LONG, ASHC,
U 1104, 0772,3446,0303,4174,4047,0700,1010,0041,0001	; 5922		FE_FE+1, CALL [DROUND]
							; 5923	=011*	[AR]_[AR]*.5 LONG, ASHC,
U 1106, 0772,3446,0303,4174,4047,0700,1010,0041,0001	; 5924		FE_FE+1, CALL [DROUND]
							; 5925	=100*	Q_[MAG].AND.Q,		;HIGH WORD IS ZERO
U 1110, 3073,4002,0000,4174,0007,0700,0000,0000,0000	; 5926		HOLD RIGHT, J/DNNRM1	;GO TEST LOW WORD
U 1116, 1044,4111,1204,4174,4007,0700,0000,0000,0000	; 5927	=111*	[ARX]_[ARX].AND.[MASK]	;REMOVE ROUNDING BIT
							; 5928	=
							; 5929	=00	[ARX]_[ARX].AND.[MAG],	;ALSO CLEAR SIGN
U 1044, 3074,4111,0004,4174,4007,0700,0010,0000,0000	; 5930		CALL [CHKSN]		;ONES COMP?
							; 5931	=10	[ARX]_[ARX].XOR.[MAG],	;YES--ONES COMP
U 1046, 3071,6111,0004,4174,4007,0700,0000,0000,0000	; 5932		J/DNN1			;CONTINUE BELOW
							; 5933	=11	[ARX]_-[ARX], 3T,	;NEGATE RESULT
U 1047, 1042,2441,0404,4174,4007,0561,4000,0000,0000	; 5934		SKIP CRY1, J/DNN2
							; 5935	=
U 3071, 1042,4221,0013,4174,4007,0700,0000,0000,0000	; 5936	DNN1:	[FLG]_0			;CLEAR FLAG
							; 5937	=0
U 1042, 3072,7333,0003,0174,4007,0700,0400,0000,0000	; 5938	DNN2:	AC_.NOT.[AR], J/DNORM2
U 1043, 3072,2443,0300,0174,4007,0701,4400,0000,0000	; 5939		AC_-[AR], 3T
							; 5940	DNORM2:	AC[1]_[ARX].AND.[MAG],	;STORE LOW WORD
U 3072, 0060,4113,0400,1174,4156,4700,0400,0000,1441	; 5941		NEXT INST		;ALL DONE
							; 5942	
U 3073, 1050,3223,0000,4174,4007,0621,0000,0000,0000	; 5943	DNNRM1:	READ Q, SKIP AD.EQ.0	;TEST LOW WORD
							; 5944	=0	[AR]_[AR]*2 LONG, 	;LOW WORD IS NON-ZERO
							; 5945		FE_FE-1, ASHC,		;ADJUST EXPONENT
U 1050, 1100,3444,0303,4174,4043,4701,1000,0041,1777	; 5946		NORM DISP, J/DNNORM	;KEEP LOOKING
U 1051, 1515,3440,0303,1174,4007,0700,0400,0000,1441	; 5947		AC[1]_[AR], J/STAC	;WHOLE ANSWER IS ZERO
							; 5948	
U 3074, 0002,4553,1300,4374,4004,1321,0000,0000,2000	; 5949	CHKSN:	TL [FLG], FLG.SN/1, RETURN [2]
							; 5950	
							; 5951	;SUBROUTINE TO SET/CLEAR FLG.SN
							; 5952	;CALL WITH:
							; 5953	;	CALL [SETSN], SKIP IF WE SHOULD CLEAR
							; 5954	;RETURNS 23
							; 5955	=0
U 1054, 0023,3551,1313,4374,0004,1700,0000,0000,2000	; 5956	SETSN:	[FLG]_[FLG].OR.#, FLG.SN/1, HOLD RIGHT, RETURN [23]
U 1055, 0023,5551,1313,4374,0004,1700,0000,0000,2000	; 5957	CLRSN:	[FLG]_[FLG].AND.NOT.#, FLG.SN/1, HOLD RIGHT, RETURN [23]
							; 5958	
							; 5959	
							; 5960	;SUBROUTINE TO ROUND A FLOATING POINT NUMBER
							; 5961	;CALL WITH:
							; 5962	;	NUMBER IN AR!Q AND NORM DISP
							; 5963	;RETURNS 16 WITH ROUNDED NUMBER IN AR!ARX
							; 5964	;
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 137
; DSK: KSHACK; FLT 3	14:55:38 25-SEPT-84	FLOATING POINT -- DOUBLE PRECISION NORMALIZE

							; 5965	=*01*
							; 5966	DROUND:	[ARX]_(Q+1)*.5,		;ROUND AND SHIFT
							; 5967		SKIP CRY2,		;SEE IF OVERFLOW
U 0772, 1122,0007,0704,4174,4007,0511,0000,0000,0000	; 5968		J/DRND1			;COMPLETE ROUNDING
							; 5969		[AR]_[AR]*.5 LONG,	;WE WENT TOO FAR
U 0776, 0772,3446,0303,4174,4047,0700,1000,0041,0001	; 5970		FE_FE+1, ASHC, J/DROUND	;SHIFT BACK AND ROUND
							; 5971	=*010
U 1122, 0016,3770,0303,4324,0454,1700,0000,0041,0000	; 5972	DRND1:	[AR]_EXP, RETURN [16]	;NO OVERFLOW
							; 5973	=011	[AR]_[AR]+.25,		;ADD CARRY (BITS 36 AND 37
							; 5974					; ARE COPIES OF Q BITS)
							; 5975		NORM DISP,		;SEE IF OVERFLOW
U 1123, 1122,0441,0303,4174,4003,4701,4000,0000,0000	; 5976		J/DRND1		; ..
							; 5977	=110	[AR]_[AR]*.5,		;SHIFT RIGHT
							; 5978		FE_FE+1,		;KEEP EXP RIGHT
U 1126, 1122,3447,0303,4174,4007,0700,1000,0041,0001	; 5979		J/DRND1		;ALL SET NOW
							; 5980	=
							; 5981	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 138
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	FLOATING POINT -- DOUBLE PRECISION NORMALIZE

							; 5982	;;;-*-Fundamental-*-
							; 5983	
							; 5984	.TOC	"EXTEND -- DISPATCH ROM ENTRIES"
							; 5985	
							; 5986		.DCODE
D 0001, 0001,1740,2100					; 5987	001:	I,	SJCL,	J/L-CMS
D 0002, 0002,1740,2100					; 5988		I,	SJCE,	J/L-CMS
D 0003, 0003,1740,2100					; 5989		I,	SJCLE,	J/L-CMS
D 0004, 0002,1741,2100					; 5990		I,	B/2,	J/L-EDIT
D 0005, 0005,1740,2100					; 5991		I,	SJCGE,	J/L-CMS
D 0006, 0006,1740,2100					; 5992		I,	SJCN,	J/L-CMS
D 0007, 0007,1740,2100					; 5993		I,	SJCG,	J/L-CMS
							; 5994	
D 0010, 0001,1742,2100					; 5995	010:	I,	B/1,	J/L-DBIN	;CVTDBO
D 0011, 0004,1742,2100					; 5996		I,	B/4,	J/L-DBIN	;CVTDBT
D 0012, 0001,1743,2100					; 5997		I,	B/1,	J/L-BDEC	;CVTBDO
D 0013, 0000,1743,2100					; 5998		I,	B/0,	J/L-BDEC	;CVTBDT
							; 5999	
D 0014, 0001,1744,2100					; 6000	014:	I,	B/1,	J/L-MVS		;MOVSO
D 0015, 0000,1744,2100					; 6001		I,	B/0,	J/L-MVS		;MOVST
D 0016, 0002,1744,2100					; 6002		I,	B/2,	J/L-MVS		;MOVSLJ
D 0017, 0003,1744,2100					; 6003		I,	B/3,	J/L-MVS		;MOVSRJ	
							; 6004	
D 0020, 0000,1746,2100					; 6005	020:	I,		J/L-XBLT
D 0021, 0000,1747,2100					; 6006		I,		J/L-SPARE-A
D 0022, 0000,1750,2100					; 6007		I,		J/L-SPARE-B
D 0023, 0000,1751,2100					; 6008		I,	B/0,	J/L-SPARE-C
D 0024, 0001,1751,2100					; 6009		I,	B/1,	J/L-SPARE-C
D 0025, 0002,1751,2100					; 6010		I,	B/2,	J/L-SPARE-C
D 0026, 0004,1751,2100					; 6011		I,	B/4,	J/L-SPARE-C
D 0027, 0010,1751,2100					; 6012		I,	B/10,	J/L-SPARE-C
							; 6013		.UCODE
							; 6014	
							; 6015	1740:
U 1740, 0400,4751,1203,4374,4007,0700,0000,0000,0040	; 6016	L-CMS:	LUUO
							; 6017	1741:
U 1741, 0400,4751,1203,4374,4007,0700,0000,0000,0040	; 6018	L-EDIT:	LUUO
							; 6019	1742:
U 1742, 0400,4751,1203,4374,4007,0700,0000,0000,0040	; 6020	L-DBIN:	LUUO
							; 6021	1743:
U 1743, 0400,4751,1203,4374,4007,0700,0000,0000,0040	; 6022	L-BDEC:	LUUO
							; 6023	1744:
U 1744, 0400,4751,1203,4374,4007,0700,0000,0000,0040	; 6024	L-MVS:	LUUO
							; 6025	1746:
U 1746, 0400,4751,1203,4374,4007,0700,0000,0000,0040	; 6026	L-XBLT:	LUUO
							; 6027	1747:
U 1747, 0400,4751,1203,4374,4007,0700,0000,0000,0040	; 6028	L-SPARE-A: LUUO
							; 6029	1750:
U 1750, 0400,4751,1203,4374,4007,0700,0000,0000,0040	; 6030	L-SPARE-B: LUUO
							; 6031	1751:
U 1751, 0400,4751,1203,4374,4007,0700,0000,0000,0040	; 6032	L-SPARE-C: LUUO
							; 6033	
							; 6034	;NOTE: WE DO NOT NEED TO RESERVE 3746 TO 3751 BECAUSE THE CODE
							; 6035	;	AT EXTEND DOES A RANGE CHECK.
							; 6036	
							; 6037	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 139
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- INSTRUCTION SET DECODING

							; 6038	.TOC	"EXTEND -- INSTRUCTION SET DECODING"
							; 6039	
							; 6040	;EACH INSTRUCTION IN THE RANGE 1-23 GOES TO 1 OF 2 PLACES
							; 6041	; 1740-1747 IF NOT UNDER EXTEND
							; 6042	; 3740-3747 IF UNDER EXTEND
							; 6043	
							; 6044		.DCODE
D 0123, 0000,1467,3100					; 6045	123:	I,READ/1,		J/EXTEND
							; 6046		.UCODE
							; 6047	
							; 6048	1467:
U 1467, 1052,3771,0005,4365,5007,0700,0200,0000,0002	; 6049	EXTEND:	MEM READ, [BR]_MEM	;FETCH INSTRUCTION
							; 6050	=0**	TL [BR], #/760740,	;IN RANGE 0-17 (AND AC#=0)
U 1052, 3556,4553,0500,4374,4007,0321,0010,0076,0740	; 6051		CALL [BITCHK]		;TRAP IF NON-ZERO BITS FOUND
							; 6052		[BRX]_[HR].AND.# CLR RH, ;SPLIT OUT AC NUMBER
U 1056, 3075,4521,0206,4374,4007,0700,0000,0000,0740	; 6053		#/000740		; FROM EXTEND INSTRUCTION
							; 6054		[BR]_[BR].OR.[BRX],	;LOAD IR AND AC #
U 3075, 3076,3111,0605,4174,0417,0700,0000,0000,0000	; 6055		HOLD RIGHT, LOAD IR	; ..
							; 6056		READ [BR], LOAD BYTE EA,	;LOAD XR #
U 3076, 3077,3333,0005,4174,4217,0700,0000,0000,0500	; 6057		    J/EXTEA0			;COMPUTE E1
							; 6058	
U 3077, 3100,3333,0003,7174,4007,0700,0400,0000,0240	; 6059	EXTEA0:	WORK[E0]_[AR]
U 3100, 1071,4443,0000,2174,4006,6700,0000,0000,0000	; 6060	EXTEA1:	EA MODE DISP
							; 6061	=100*
U 1071, 1073,0551,0505,2270,4007,0700,0000,0000,0000	; 6062	EXTEA:	[BR]_[BR]+XR
							; 6063	EXTDSP:	[BR]_EA FROM [BR], LOAD VMA,
U 1073, 1136,5741,0505,4174,4003,7700,0200,0000,0010	; 6064		B DISP, J/EXTEXT
U 1075, 3101,0551,0505,2270,4007,0700,0200,0004,0512	; 6065		[BR]_[BR]+XR, START READ, PXCT EXTEND EA, LOAD VMA, J/EXTIND
U 1077, 3101,3443,0500,4174,4007,0700,0200,0004,0512	; 6066		VMA_[BR], START READ, PXCT EXTEND EA
							; 6067	
U 3101, 3100,3771,0005,4361,5217,0700,0200,0000,0502	; 6068	EXTIND:	MEM READ, [BR]_MEM, HOLD LEFT, LOAD BYTE EA, J/EXTEA1
							; 6069	
							; 6070	;HERE TO EXTEND SIGN FOR OFFSET MODES
							; 6071	=1110
							; 6072	EXTEXT:	WORK[E1]_[BR],			;SAVE E1
U 1136, 3400,3333,0005,7174,4001,2700,0400,0000,0241	; 6073		DISP/DROM, J/3400		;GO TO EXTENDED EXECUTE CODE
U 1137, 1112,3333,0005,4174,4007,0530,0000,0000,0000	; 6074		READ [BR], SKIP DP18		;NEED TO EXTEND SIGN
							; 6075	=0	WORK[E1]_[BR],			;POSITIVE
U 1112, 3400,3333,0005,7174,4001,2700,0400,0000,0241	; 6076		DISP/DROM, J/3400
							; 6077		[BR]_#, #/777777, HOLD RIGHT,	;NEGATIVE
U 1113, 1136,3771,0005,4374,0007,0700,0000,0077,7777	; 6078		J/EXTEXT
							; 6079	
							; 6080	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 140
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- MOVE STRING -- SETUP

							; 6081	.TOC	"EXTEND -- MOVE STRING -- SETUP"
							; 6082	
							; 6083	;HERE TO MOVE A STRING
							; 6084	;COME HERE WITH:
							; 6085	;	AR/ E0
							; 6086	;	BR/ E1
							; 6087	;
							; 6088	3744:
							; 6089	MVS:	[AR]_[AR]+1,		;GO FETCH FILL
							; 6090		LOAD VMA,		; BYTE
							; 6091		START READ,		; ..
U 3744, 3267,0111,0703,4174,4007,0700,0210,0004,0012	; 6092		CALL [GTFILL]		;SUBROUTINE TO COMPLETE
U 3754, 1101,3771,0005,1276,6007,0701,0000,0000,1443	; 6093	3754:	[BR]_AC[DLEN]		;GET DEST LENGTH AND FLAGS
							; 6094	=0**	TL [BR], #/777000,	;ANY FLAGS SET?
U 1101, 3556,4553,0500,4374,4007,0321,0010,0077,7000	; 6095		CALL [BITCHK]		;SEE IF ILLEGAL
U 1105, 1114,3771,0003,0276,6007,0700,0000,0000,0000	; 6096		[AR]_AC			;GET SRC LENGTH AND FLAGS
							; 6097	=0	[BRX]_[AR].AND.# CLR RH, ;COPY FLAGS TO BRX
							; 6098		#/777000,		; ..
U 1114, 3271,4521,0306,4374,4007,0700,0010,0077,7000	; 6099		CALL [CLRFLG]		;CLEAR FLAGS IN AR
							; 6100					;NEW DLEN IS <SRC LEN>-<DST LEN>
							; 6101		AC[DLEN]_[AR]-[BR], 3T,	;COMPUTE DIFFERENCE
U 1115, 1120,2113,0305,1174,4007,0521,4400,0000,1443	; 6102		SKIP DP0		;WHICH IS SHORTER?
							; 6103	=0	[AR]_.NOT.[BR], 	;DESTINATION
U 1120, 3102,7441,0503,4174,4007,0700,0000,0000,0000	; 6104		J/MVS1			;GET NEGATIVE LENGTH
U 1121, 3102,7441,0303,4174,4007,0700,0000,0000,0000	; 6105		[AR]_.NOT.[AR]		;SOURCE
							; 6106	MVS1:	WORK[SLEN]_[AR],	; ..
U 3102, 1154,3333,0003,7174,4003,7700,0400,0000,0242	; 6107		B DISP			;SEE WHAT TYPE OF MOVE
							; 6108	;SLEN NOW HAS -<LEN OF SHORTER STRING>-1
							; 6109	=1100
U 1154, 1140,3771,0013,4370,4007,0700,0000,0000,0003	; 6110		STATE_[SRC], J/MOVELP	;TRANSLATE--ALL SET
U 1155, 3103,3771,0005,1276,6007,0701,0000,0000,1444	; 6111		[BR]_AC[DSTP], J/MVSO	;OFFSET BUILD MASK
							; 6112		[ARX]_[AR],		;LEFT JUSTIFY
U 1156, 3116,3441,0304,4174,4007,0700,0000,0000,0000	; 6113		J/MOVST0		; ..
							; 6114		[ARX]_AC[DLEN],		;RIGHT JUSTIFY
							; 6115		SKIP DP0, 4T,		;WHICH IS SHORTER?
U 1157, 1150,3771,0004,1276,6007,0522,0000,0000,1443	; 6116		J/MOVRJ
							; 6117	
U 3103, 3104,3333,0005,4174,4007,0700,1000,0041,6020	; 6118	MVSO:	READ [BR], FE_S+2	;GET DST BYTE SIZE
U 3104, 1125,4222,0000,4174,4006,7701,1000,0041,1770	; 6119		Q_0, BYTE STEP		;BUILD AN S BIT MASK
							; 6120	=0*
U 1125, 1125,4224,0003,4174,4026,7701,1000,0041,1770	; 6121	MVSO1:	GEN MSK [AR], BYTE STEP, J/MVSO1
U 1127, 3105,7221,0003,4174,4007,0700,0000,0000,0000	; 6122		[AR]_.NOT.Q		;BITS WHICH MUST NOT BE SET
							; 6123		WORK[MSK]_[AR].AND.[MASK], ;SAVE FOR SRCMOD
U 3105, 1147,4113,0312,7174,4007,0700,0400,0000,0243	; 6124		J/MOVLP0		;GO ENTER LOOP
							; 6125	
							; 6126	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 141
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- MOVE STRING -- OFFSET/TRANSLATE

							; 6127	.TOC	"EXTEND -- MOVE STRING -- OFFSET/TRANSLATE"
							; 6128	
							; 6129	;HERE IS THE LOOP FOR OFFSET AND TRANSLATED MOVES
							; 6130	=000
							; 6131	MOVELP:	[AR]_WORK[SLEN]+1,	;UPDATE STRING LENGTH
U 1140, 2050,0551,0703,7274,4007,0701,0010,0000,0242	; 6132		CALL [SRCMOD]		;GET A SOURCE BYTE
							; 6133	=001	[ARX]_[AR], SKIP DP0,	;(1) LENGTH EXHAUSTED
U 1141, 1164,3441,0304,4174,4007,0520,0000,0000,0000	; 6134		J/MOVST2		;    SEE IF FILL IS NEEDED
							; 6135	=100	[AR]_-WORK[SLEN],	;(4) ABORT
U 1144, 3106,1771,0003,7274,4007,0701,4000,0000,0242	; 6136		J/MVABT			; ..
							; 6137		STATE_[SRC+DST],	;(5) NORMAL--STORE DST BYTE
U 1145, 3261,3771,0013,4370,4007,0700,0010,0000,0005	; 6138		CALL [PUTDST]		;     ..
							; 6139	=111
U 1147, 1140,3771,0013,4370,4007,0700,0000,0000,0003	; 6140	MOVLP0:	STATE_[SRC], J/MOVELP	;(7) DPB DONE
							; 6141	=
							; 6142	
							; 6143	;HERE TO ABORT A STRING MOVE DUE TO TRANSLATE OR OFFSET FAILURE
							; 6144	
							; 6145	MVABT:	[BR]_AC[DLEN], 		;WHICH STRING IS LONGER
U 3106, 1130,3771,0005,1276,6007,0522,0000,0000,1443	; 6146		SKIP DP0, 4T
							; 6147	=0
U 1130, 3107,3440,0303,1174,4007,0700,0400,0000,1443	; 6148	MVABT1:	AC[DLEN]_[AR], J/MVABT2	;PUT AWAY DEST LEN
							; 6149		[AR]_[AR]-[BR],		;DEST LEN WAS GREATER
U 1131, 1130,1111,0503,4174,4007,0700,4000,0000,0000	; 6150		J/MVABT1		;STICK BACK IN AC
							; 6151	
U 3107, 3110,7771,0003,7274,4007,0701,0000,0000,0242	; 6152	MVABT2:	[AR]_.NOT.WORK[SLEN]	;GET UNDECREMENTED SLEN
U 3110, 1132,3333,0005,4174,4007,0520,0000,0000,0000	; 6153		READ [BR], SKIP DP0	;NEED TO FIXUP SRC?
U 1132, 1133,0111,0503,4174,4007,0700,0000,0000,0000	; 6154	=0	[AR]_[AR]+[BR]		;SRC LONGER BY (DLEN)
U 1133, 3111,3111,0603,4174,4007,0700,0000,0000,0000	; 6155	MVEND:	[AR]_[AR].OR.[BRX]	;PUT BACK SRC FLAGS
U 3111, 1515,4221,0013,4170,4007,0700,0000,0000,0000	; 6156		END STATE, J/STAC	;ALL DONE
							; 6157	
							; 6158	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 142
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- MOVE STRING -- MOVSRJ

							; 6159	.TOC	"EXTEND -- MOVE STRING -- MOVSRJ"
							; 6160	
							; 6161	=00
U 1150, 3112,3771,0003,1276,6007,0701,0000,0000,1441	; 6162	MOVRJ:	[AR]_AC[SRCP], J/MVSKP	;SRC LONGER, SKIP OVER SOME
							; 6163		STATE_[DSTF],		;DST LONGER, FILL IT
U 1151, 2035,3771,0013,4370,4007,0700,0010,0000,0006	; 6164		CALL [MOVFIL]		; ..
							; 6165	=11	[ARX]_WORK[SLEN]+1,	;DONE FILLING
U 1153, 3117,0551,0704,7274,4007,0701,0000,0000,0242	; 6166		J/MOVST1		;GO MOVE STRING
							; 6167	
							; 6168	;HERE TO SKIP OVER EXTRA SOURCE BYTES
U 3112, 3113,3440,0303,1174,4007,0700,0400,0000,1441	; 6169	MVSKP:	AC[SRCP]_[AR]		;PUT POINTER BACK
							; 6170		[ARX]_[ARX]-1, 3T,	;DONE SKIPPING?
U 3113, 1134,1111,0704,4174,4007,0521,4000,0000,0000	; 6171		SKIP DP0
							; 6172	=0	IBP DP, IBP SCAD,	;NO--START THE IBP
							; 6173		SCAD DISP, SKIP IRPT,	;4-WAY DISPATCH
U 1134, 1160,3770,0305,4334,4016,7371,0000,0033,6000	; 6174		3T, J/MVSKP1		;GO BUMP POINTER
							; 6175		AC[DLEN]_0,		;LENGTHS ARE NOW EQUAL
U 1135, 1176,4223,0000,1174,4007,0700,0400,0000,1443	; 6176		J/MOVST4		;GO MOVE STRING
							; 6177	
							; 6178	=00
U 1160, 3112,3441,0503,4174,4007,0700,0000,0000,0000	; 6179	MVSKP1:	[AR]_[BR], J/MVSKP	;NO OVERFLOW
							; 6180		[AR]_.NOT.WORK[SLEN],	;INTERRUPT
U 1161, 3114,7771,0003,7274,4007,0701,0000,0000,0242	; 6181		J/MVSK3			; ..
							; 6182		SET P TO 36-S,		;WORD OVERFLOW
U 1162, 3115,3770,0503,4334,4017,0700,0000,0032,6000	; 6183		J/MVSKP2		;FIXUP Y
U 1163, 3114,7771,0003,7274,4007,0701,0000,0000,0242	; 6184		[AR]_.NOT.WORK[SLEN]	;INTERRUPT
U 3114, 1142,3440,0303,1174,4007,0700,0400,0000,1443	; 6185	MVSK3:	AC[DLEN]_[AR]		;RESET DLEN
							; 6186	=0	[AR]_[AR]+[ARX],
U 1142, 3467,0111,0403,4174,4007,0700,0010,0000,0000	; 6187		CALL [INCAR]		;ADD 1 TO AR
							; 6188		AC_[AR].OR.[BRX],	;PUT BACK FLAGS
U 1143, 3516,3113,0306,0174,4007,0700,0400,0000,0000	; 6189		J/ITRAP			;DO INTERRUPT TRAP
							; 6190	
							; 6191	MVSKP2:	[AR]_[AR]+1, HOLD LEFT,	;BUMP Y
U 3115, 3112,0111,0703,4170,4007,0700,0000,0000,0000	; 6192		J/MVSKP		;KEEP GOING
							; 6193	
							; 6194	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 143
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- MOVE STRING -- SIMPLE MOVE LOOP

							; 6195	.TOC	"EXTEND -- MOVE STRING -- SIMPLE MOVE LOOP"
							; 6196	
							; 6197	;HERE FOR NO-MODIFICATION STRING MOVES
U 3116, 3117,0111,0704,4174,4007,0700,0000,0000,0000	; 6198	MOVST0:	[ARX]_[ARX]+1		;CANT DO [ARX]_[AR]+1
U 3117, 1170,3771,0013,4370,4007,0700,0000,0000,0003	; 6199	MOVST1:	STATE_[SRC]		;PREPARE FOR PAGE FAIL
							; 6200	=000
							; 6201		WORK[SLEN]_[ARX],	;GO GET A SOURCE BYTE
U 1170, 2102,3333,0004,7174,4007,0520,0410,0000,0242	; 6202		SKIP DP0, CALL [GSRC]	; ..
							; 6203	MOVSTX:	[ARX]_[AR],		;SHORT STRING RAN OUT
U 1171, 1164,3441,0304,4174,4007,0520,0000,0000,0000	; 6204		SKIP DP0, J/MOVST2	;GO SEE IF FILL NEEDED
							; 6205	=010	STATE_[SRC+DST],	;WILL NEED TO BACK UP BOTH POINTERS
U 1172, 3261,3771,0013,4370,4007,0700,0010,0000,0005	; 6206		CALL [PUTDST]		;STORE BYTE
							; 6207	=110
							; 6208	MOVST4:	[ARX]_WORK[SLEN]+1,	;COUNT DOWN LENGTH
U 1176, 3117,0551,0704,7274,4007,0701,0000,0000,0242	; 6209		J/MOVST1		;LOOP OVER STRING
							; 6210	=
							; 6211	=00
U 1164, 3120,4223,0000,1174,4007,0700,0400,0000,1443	; 6212	MOVST2:	AC[DLEN]_0, J/MOVST3	;CLEAR DEST LEN, REBUILD SRC
U 1165, 2035,3771,0013,4370,4007,0700,0010,0000,0004	; 6213		STATE_[DST], CALL [MOVFIL] ;FILL OUT DEST
U 1167, 1263,3440,0606,0174,4007,0700,0400,0000,0000	; 6214	=11	AC_[BRX], J/ENDSKP	;ALL DONE
							; 6215	
U 3120, 3121,3113,0406,0174,4007,0700,0400,0000,0000	; 6216	MOVST3:	AC_[ARX].OR.[BRX]	;REBUILD SRC
U 3121, 0172,4221,0013,4170,4007,0700,0000,0000,0000	; 6217		END STATE, J/SKIPE	; ..
							; 6218	
							; 6219	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 144
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- COMPARE STRING

							; 6220	.TOC	"EXTEND -- COMPARE STRING"
							; 6221	
							; 6222	3740:
U 3740, 1103,3771,0004,1276,6007,0701,0000,0000,1443	; 6223	CMS:	[ARX]_AC[DLEN]		;GET DEST LEN
U 1103, 3556,4553,0400,4374,4007,0321,0010,0077,7000	; 6224	=0**	TL [ARX], #/777000, CALL [BITCHK]
U 1107, 1173,3771,0006,0276,6007,0700,0000,0000,0000	; 6225		[BRX]_AC		;GET SRC LEN
U 1173, 3556,4553,0600,4374,4007,0321,0010,0077,7000	; 6226	=0**	TL [BRX], #/777000, CALL [BITCHK]
U 1177, 1174,2113,0604,4174,4007,0521,4000,0000,0000	; 6227		[BRX]-[ARX], 3T, SKIP DP0 ;WHICH STRING IS LONGER?
U 1174, 1175,0111,0703,4174,4007,0700,0000,0000,0000	; 6228	=0	[AR]_[AR]+1		;SRC STRING IS LONGER
U 1175, 1200,0111,0703,4170,4007,0700,0200,0004,0012	; 6229		VMA_[AR]+1, START READ	;DST STRING
							; 6230	=0	[AR]_0,			;FORCE FIRST COMPARE TO BE
							; 6231					;EQUAL
U 1200, 3464,4221,0003,4174,4007,0700,0010,0000,0000	; 6232		CALL [LOADQ]		;PUT FILL INTO Q
							; 6233		WORK[FILL]_Q,		;SAVE FILLER
U 1201, 3131,3223,0000,7174,4007,0700,0400,0000,0244	; 6234		J/CMS2			;ENTER LOOP
							; 6235	
							; 6236	;HERE IS THE COMPARE LOOP.
							; 6237	; ARX/ CONATINS REMAINING DEST LENGTH
							; 6238	; BRX/ CONTAINS REMAINING SOURCE LENGTH
							; 6239	=0
							; 6240	CMS3:				;BYTES ARE NOT EQUAL
							; 6241		END STATE,		;NO MORE SPECIAL PAGE FAIL ACTION
U 1202, 0170,4221,0013,4170,4003,7700,0000,0000,0000	; 6242		SKIP-COMP DISP		;SEE SKIP-COMP-TABLE
U 1203, 3122,3771,0003,1276,6007,0701,0000,0000,1441	; 6243	CMS4:	[AR]_AC[SRCP]		;GET BYTE POINTER
U 3122, 1204,3333,0006,4174,4007,0520,0000,0000,0000	; 6244		READ [BRX], SKIP DP0	;MORE IN SOURCE STRING?
							; 6245	=00	STATE_[EDIT-SRC],	;PREPARE FOR PAGE FAIL
U 1204, 2103,3771,0013,4370,4007,0700,0010,0000,0011	; 6246		CALL [GETSRC]		; GO GET BYTE
							; 6247		READ [ARX], SKIP DP0,	;NO MORE SRC--SEE IF MORE DEST
U 1205, 1214,3333,0004,4174,4007,0520,0000,0000,0000	; 6248		J/CMS5			; ..
U 1206, 3123,3333,0003,7174,4007,0700,0400,0000,0245	; 6249		WORK[CMS]_[AR]		;SAVE SRC BYTE
							; 6250	=
U 3123, 3124,3440,0606,0174,4007,0700,0400,0000,0000	; 6251		AC_[BRX]		;PUT BACK SRC LEN
U 3124, 3125,3771,0013,4370,4007,0700,0000,0000,0010	; 6252		STATE_[COMP-DST]	;HAVE TO BACK UP IF DST FAILS
U 3125, 1210,3333,0004,4174,4007,0520,0000,0000,0000	; 6253		READ [ARX], SKIP DP0	;ANY MORE DEST?
							; 6254	=00
U 1210, 1216,4443,0000,4174,4007,0700,0010,0000,0000	; 6255	CMS6:	CALL [CMPDST]		;MORE DEST BYTES
							; 6256		[AR]_WORK[FILL],	;OUT OF DEST BYTES
U 1211, 3126,3771,0003,7274,4007,0701,0000,0000,0244	; 6257		J/CMS7			;GO DO COMPARE
U 1212, 3126,3440,0404,1174,4007,0700,0400,0000,1443	; 6258		AC[DLEN]_[ARX]		;GOT A BYTE, UPDATE LENGTH
							; 6259	=
							; 6260	CMS7:	[AR]_[AR].AND.[MASK],	;MAKE MAGNITUDES
U 3126, 3127,4111,1203,7174,4007,0700,0000,0000,0245	; 6261		WORK[CMS]		;WARM UP RAM
U 3127, 3130,4551,1205,7274,4007,0700,0000,0000,0245	; 6262		[BR]_[MASK].AND.WORK[CMS], 2T ;GET SRC MAGNITUDE
U 3130, 3131,2111,0503,4174,4007,0700,4000,0000,0000	; 6263		[AR]_[BR]-[AR] REV	;UNSIGNED COMPARE
U 3131, 3132,1111,0704,4174,4007,0700,4000,0000,0000	; 6264	CMS2:	[ARX]_[ARX]-1		;UPDATE LENGTHS
U 3132, 3133,1111,0706,4174,4007,0700,4000,0000,0000	; 6265		[BRX]_[BRX]-1		; ..
U 3133, 1202,3333,0003,4174,4007,0621,0000,0000,0000	; 6266		READ [AR], SKIP AD.EQ.0, J/CMS3 ;SEE IF EQUAL
							; 6267	
							; 6268	=0
U 1214, 3134,3772,0000,7274,4007,0701,0000,0000,0244	; 6269	CMS5:	Q_WORK[FILL], J/CMS8	;MORE DST--GET SRC FILL
U 1215, 1202,4221,0003,4174,4007,0700,0000,0000,0000	; 6270		[AR]_0, J/CMS3		;STRINGS ARE EQUAL
U 3134, 3135,3771,0013,4370,4007,0700,0000,0000,0012	; 6271	CMS8:	STATE_[EDIT-DST]	;JUST DST POINTER ON PAGE FAIL
U 3135, 1210,3223,0000,7174,4007,0700,0400,0000,0245	; 6272		WORK[CMS]_Q, J/CMS6	;MORE DST--SAVE SRC FILL
							; 6273	
							; 6274	=0
							; 6275	CMPDST:	[AR]_AC[DSTP],		;GET DEST POINTER
U 1216, 3262,3771,0003,1276,6007,0701,0010,0000,1444	; 6276		CALL [IDST]		;UPDATE IT
							; 6277		READ [AR],		;LOOK AT BYTE POINTER
							; 6278		FE_FE.AND.S#, S#/0770,	;MASK OUT BIT 6
U 1217, 0540,3333,0003,4174,4006,5701,1000,0051,0770	; 6279		BYTE DISP, J/LDB1	;GO LOAD BYTE
							; 6280	
							; 6281	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 145
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- DECIMAL TO BINARY CONVERSION

							; 6282	.TOC	"EXTEND -- DECIMAL TO BINARY CONVERSION"
							; 6283	
							; 6284	3742:
U 3742, 3136,4571,1203,4374,4007,0700,0000,0077,7777	; 6285	DBIN:	[AR]_[777777] XWD 0	;IF WE ARE IN OFFSET MODE
U 3136, 3137,3333,0003,7174,4007,0700,0400,0000,0243	; 6286		WORK[MSK]_[AR]		; ONLY ALLOW 18 BITS
							; 6287					;RANGE CHECKED (0-10) LATER
U 3137, 3140,3771,0003,0276,6007,0700,0000,0000,0000	; 6288		[AR]_AC			;GET SRC LENGTH
							; 6289		[BRX]_[AR].AND.# CLR RH, ;SPLIT OUT FLAGS
U 3140, 1220,4521,0306,4374,4007,0700,0000,0077,7000	; 6290		#/777000		; ..
							; 6291	=0*	[ARX]_AC[BIN1],		;GET LOW WORD
U 1220, 1366,3771,0004,1276,6007,0701,0010,0000,1444	; 6292		CALL [CLARX0]		;CLEAR BIT 0 OF ARX
U 1222, 1224,3440,0404,1174,4007,0700,0400,0000,1444	; 6293		AC[BIN1]_[ARX]		;STORE BACK
							; 6294	=0	READ [BRX], SKIP DP0,	;IS S ALREADY SET?
U 1224, 1300,3333,0006,4174,4007,0520,0010,0000,0000	; 6295		CALL [CLRBIN]		;GO CLEAR BIN IF NOT
							; 6296		[AR]_[AR].AND.#,	;CLEAR FLAGS FROM LENGTH
							; 6297		#/000777, HOLD RIGHT,	; ..
U 1225, 1236,4551,0303,4374,0003,7700,0000,0000,0777	; 6298		B DISP			;SEE IF OFFSET OR TRANSLATE
							; 6299	=1110
U 1236, 3141,3771,0013,4370,4007,0700,0000,0000,0007	; 6300	DBIN1:	STATE_[CVTDB], J/DBIN2	;TRANSLATE--LEAVE S ALONE
							; 6301		[BRX]_[BRX].OR.#,	;OFFSET--FORCE S TO 1
							; 6302		#/400000, HOLD RIGHT,
U 1237, 1236,3551,0606,4374,0007,0700,0000,0040,0000	; 6303		J/DBIN1
U 3141, 1230,7333,0003,7174,4007,0700,0400,0000,0242	; 6304	DBIN2:	WORK[SLEN]_.NOT.[AR]	;STORE -SLEN-1
							; 6305	
							; 6306	;HERE IS THE MAIN LOOP
							; 6307	=0*0
U 1230, 2050,0551,0703,7274,4007,0701,0010,0000,0242	; 6308	DBINLP:	[AR]_WORK[SLEN]+1, CALL [SRCMOD] ;(0) GET MODIFIED SRC BYTE
							; 6309		TL [BRX], #/100000,	;(1) DONE, IS M SET?
U 1231, 1252,4553,0600,4374,4007,0321,0000,0010,0000	; 6310		J/DBXIT
							; 6311		[AR]_.NOT.WORK[SLEN],	;(4) ABORT
U 1234, 3146,7771,0003,7274,4007,0701,0000,0000,0242	; 6312		J/DBABT			;	..
							; 6313		[AR]-#, #/10.,		;(5) NORMAL--SEE IF 0-9
U 1235, 1226,1553,0300,4374,4007,0532,4000,0000,0012	; 6314		4T, SKIP DP18		; ..
							; 6315	=0	[AR]_.NOT.WORK[SLEN],	;DIGIT TOO BIG
U 1226, 3146,7771,0003,7274,4007,0701,0000,0000,0242	; 6316		J/DBABT			;GO ABORT CVT
							; 6317	
							; 6318	;HERE TO ADD IN A DIGIT
							; 6319		[BR]_AC[BIN0], 4T,	;GET HIGH BINARY
U 1227, 1240,3771,0005,1276,6007,0622,0000,0000,1443	; 6320		SKIP AD.EQ.0		;SEE IF SMALL
							; 6321	=00
							; 6322	DBSLO:	[ARX]_AC[BIN1],		;TOO BIG
U 1240, 1250,3771,0004,1276,6007,0701,0010,0000,1444	; 6323		CALL [DBSLOW]		;GO USE DOUBLE PRECISION PATHS
							; 6324		[BR]_AC[BIN1],		;GET LOW WORD
U 1241, 3142,3771,0005,1276,6007,0701,0000,0000,1444	; 6325		J/DBFAST		;MIGHT FIT IN 1 WORD
U 1242, 1230,4443,0000,4174,4007,0700,0000,0000,0000	; 6326		J/DBINLP		;RETURN FROM DBSLOW
							; 6327					;GO DO NEXT DIGIT
							; 6328	=
U 3142, 1232,4553,0500,4374,4007,0321,0000,0076,0000	; 6329	DBFAST:	TL [BR], #/760000	;WILL RESULT FIT IN 36 BITS?
U 1232, 1240,4443,0000,4174,4007,0700,0000,0000,0000	; 6330	=0	J/DBSLO			;MAY NOT FIT--USE DOUBLE WORD
U 1233, 3143,3775,0005,1276,6007,0701,0000,0000,1444	; 6331		[BR]_AC[BIN1]*2		;COMPUTE AC*2
U 3143, 1244,3445,0505,1174,4007,0700,0000,0000,1444	; 6332		[BR]_[BR]*2, AC[BIN1]	;COMPUTE AC*4
							; 6333	=0	[BR]_[BR]+AC[BIN1], 2T,	;COMPUTE AC*5
U 1244, 3470,0551,0505,1274,4007,0700,0010,0000,1444	; 6334		CALL [SBRL]		;COMPUTE AC*10
							; 6335		AC[BIN1]_[AR]+[BR], 3T,	;NEW BINARY RESULT
U 1245, 1230,0113,0305,1174,4007,0701,0400,0000,1444	; 6336		J/DBINLP		;DO NEXT DIGIT
							; 6337	
							; 6338	;HERE IF NUMBER DOES NOT FIT IN ONE WORD
							; 6339	
							; 6340	=000
							; 6341	DBSLOW:	[BR]_AC[BIN0],		;FETCH HIGH WORD
U 1250, 1270,3771,0005,1276,6007,0701,0010,0000,1443	; 6342		CALL [MULBY4]		;MULTIPLY BY 4
							; 6343		[ARX]_[ARX]+AC[BIN1],	;COMPUTE VALUE * 5
							; 6344		SKIP CRY1, 4T,		;SEE IF OVERFLOW
U 1251, 1246,0551,0404,1274,4007,0562,0010,0000,1444	; 6345		CALL [ADDCRY]		;GO ADD CARRY
U 1255, 1260,0551,0505,1274,4007,0701,0000,0000,1443	; 6346	=101	[BR]_[BR]+AC[BIN0]	;ADD IN HIGH WORD
							; 6347	=
U 1260, 1271,4443,0000,4174,4007,0700,0010,0000,0000	; 6348	=000	CALL [DBLDBL]		;MAKE * 10
							; 6349		[ARX]_[ARX]+[AR], 3T,	;ADD IN NEW DIGIT
							; 6350		SKIP CRY1,		;SEE IF OVERFLOW
U 1261, 1246,0111,0304,4174,4007,0561,0010,0000,0000	; 6351		CALL [ADDCRY]		;ADD IN THE CARRY
U 1265, 3144,3440,0404,1174,4007,0700,0400,0000,1444	; 6352	=101	AC[BIN1]_[ARX]		;PUT BACK ANSWER
							; 6353	=
							; 6354		AC[BIN0]_[BR],		; ..
U 3144, 0002,3440,0505,1174,4004,1700,0400,0000,1443	; 6355		RETURN [2]		;GO DO NEXT BYTE
							; 6356	
							; 6357	;HERE TO DOUBLE BR!ARX
							; 6358	=000
U 1270, 1271,4443,0000,4174,4007,0700,0010,0000,0000	; 6359	MULBY4:	CALL [DBLDBL]		;DOUBLE TWICE
U 1271, 1272,0111,0505,4174,4007,0700,0000,0000,0000	; 6360	DBLDBL:	[BR]_[BR]+[BR]		;DOUBLE HIGH WORD FIRST
							; 6361					;(SO WE DON'T DOUBLE CARRY)
							; 6362		[ARX]_[ARX]+[ARX],	;DOUBLE LOW WORD
							; 6363		SKIP CRY1, 3T,		;SEE IF CARRY
U 1272, 1246,0111,0404,4174,4007,0561,0010,0000,0000	; 6364		CALL [ADDCRY]		;ADD IN CARRY
U 1276, 0001,4443,0000,4174,4004,1700,0000,0000,0000	; 6365	=110	RETURN [1]		;ALL DONE
							; 6366	=
							; 6367	
							; 6368	;HERE TO ADD THE CARRY
							; 6369	=0
U 1246, 0004,4443,0000,4174,4004,1700,0000,0000,0000	; 6370	ADDCRY:	RETURN [4]		;NO CARRY
U 1247, 3145,4551,0404,4374,0007,0700,0000,0037,7777	; 6371		CLEAR [ARX]0		;KEEP LOW WORD POSITIVE
							; 6372		[BR]_[BR]+1,		;ADD CARRY
U 3145, 0004,0111,0705,4174,4004,1700,0000,0000,0000	; 6373		RETURN [4]		;ALL DONE
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 146
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- DECIMAL TO BINARY CONVERSION

							; 6374	
							; 6375	;HERE TO ABORT CONVERSION
U 3146, 3147,3111,0306,4174,4007,0700,0000,0000,0000	; 6376	DBABT:	[BRX]_[BRX].OR.[AR]	;PUT BACK UNUSED LENGTH
							; 6377		[PC]_[PC]-1, HOLD LEFT,	;DO NOT SKIP
U 3147, 1253,1111,0701,4170,4007,0700,4000,0000,0000	; 6378		J/DBDONE		;GO FIX UP SIGN COPY
							; 6379	
							; 6380	;HERE AT END
							; 6381	=0
							; 6382	DBXIT:	[ARX]_AC[BIN1],		;GET LOW WORD
U 1252, 3152,3771,0004,1276,6007,0701,0000,0000,1444	; 6383		J/DBNEG			;GO NEGATE
U 1253, 3150,3771,0003,1276,6007,0701,0000,0000,1444	; 6384	DBDONE:	[AR]_AC[BIN1]		;FETCH LOW WORD
							; 6385		[BR]_AC[BIN0], 4T,	;GET HIGH WORD
U 3150, 1256,3771,0005,1276,6007,0522,0000,0000,1443	; 6386		SKIP DP0		;WHAT SIGN
U 1256, 3151,4551,0303,4374,0007,0700,0000,0037,7777	; 6387	=0	CLEAR [AR]0, J/DBDN1	;POSITIVE
U 1257, 3151,3551,0303,4374,0007,0700,0000,0040,0000	; 6388		[AR]_[AR].OR.#, #/400000, HOLD RIGHT
U 3151, 1262,3440,0303,1174,4007,0700,0400,0000,1444	; 6389	DBDN1:	AC[BIN1]_[AR]		;STORE AC BACK
							; 6390	=0	AC_[BRX] TEST,	;RETURN FLAGS
U 1262, 1300,3770,0606,0174,4007,0520,0410,0000,0000	; 6391		SKIP DP0, CALL [CLRBIN]	;CLEAR BIN IS S=0
U 1263, 0014,4221,0013,4170,4007,0700,0000,0000,0000	; 6392	ENDSKP:	END STATE, J/SKIP	;NO--ALL DONE
							; 6393	
U 3152, 3153,4551,0404,4374,0007,0700,0000,0037,7777	; 6394	DBNEG:	CLEAR ARX0		;CLEAR EXTRA SIGN BIT
							; 6395		[ARX]_-[ARX], 3T,	;NEGATE AND SEE IF
U 3153, 1266,2441,0404,1174,4007,0621,4000,0000,1443	; 6396		SKIP AD.EQ.0, AC[BIN0]	; ANY CARRY
U 1266, 1275,7771,0003,1274,4007,0700,0000,0000,1443	; 6397	=0	[AR]_.NOT.AC[BIN0], 2T, J/STAC34 ;NO CARRY
							; 6398		[AR]_-AC[BIN0], 3T,	;CARRY
U 1267, 1274,1771,0003,1274,4007,0621,4000,0000,1443	; 6399		SKIP AD.EQ.0		;SEE IF ALL ZERO
U 1274, 1275,4571,1204,4374,4007,0700,0000,0040,0000	; 6400	=0	[ARX]_[400000] XWD 0	;MAKE COPY OF SIGN
							; 6401					; UNLESS HIGH WORD IS ZERO
U 1275, 3154,3440,0303,1174,4007,0700,0400,0000,1443	; 6402	STAC34:	AC[BIN0]_[AR]		;PUT BACK ANSWER
U 3154, 1253,3440,0404,1174,4007,0700,0400,0000,1444	; 6403		AC[BIN1]_[ARX], J/DBDONE	; ..
							; 6404	
							; 6405	;HELPER SUBROUTINE TO CLEAR AC[BIN0] AND AC[BIN1] IF S=0
							; 6406	;CALL WITH:
							; 6407	;	READ [BRX], SKIP DP0, CALL [CLRBIN]
							; 6408	;RETURNS 1 ALWAYS
							; 6409	=0
U 1300, 3155,4223,0000,1174,4007,0700,0400,0000,1443	; 6410	CLRBIN:	AC[BIN0]_0, J/CLRB1
U 1301, 0001,4443,0000,4174,4004,1700,0000,0000,0000	; 6411		RETURN [1]
U 3155, 0001,4223,0000,1174,4004,1700,0400,0000,1444	; 6412	CLRB1:	AC[BIN1]_0, RETURN [1]
							; 6413	
							; 6414	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 147
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- BINARY TO DECIMAL CONVERSION

							; 6415	.TOC	"EXTEND -- BINARY TO DECIMAL CONVERSION"
							; 6416	
							; 6417	3743:
							; 6418	BDEC:	[BRX]_AC[DLEN],		;GET LENGTH AND FLAGS
U 3743, 1302,3771,0006,1276,6007,0351,0000,0000,1443	; 6419		SKIP FPD		;CONTINUE FROM INTERUPT?
							; 6420	=0	[BRX]_[BRX].AND.#,	;JUST KEEP THE FLAGS
							; 6421		#/777000,		; ..
U 1302, 3156,4551,0606,4374,4007,0700,0000,0077,7000	; 6422		J/BDEC0			;COMPUTE NEW FLAGS
U 1303, 3174,3771,0003,0276,6007,0700,0000,0000,0000	; 6423	DOCVT:	[AR]_AC, J/DOCVT1	;ALL SET PRIOR TO TRAP
U 3156, 3157,3771,0004,1276,6007,0701,0000,0000,1441	; 6424	BDEC0:	[ARX]_AC[1]		;GET LOW BINARY
U 3157, 1221,3771,0003,0276,6007,0700,2000,0071,0024	; 6425		[AR]_AC, SC_20.		;GET HIGH WORD, SET STEP COUNT
							; 6426	=0*	WORK[BDL]_[ARX],	;SAVE IN CASE OF ABORT
U 1221, 1366,3333,0004,7174,4007,0700,0410,0000,0250	; 6427		CALL [CLARX0]		;MAKE SURE BIT 0 IS OFF
							; 6428		WORK[BDH]_[AR],		;SAVE HIGH WORD AND
U 1223, 1304,3333,0003,7174,4007,0520,0400,0000,0247	; 6429		SKIP DP0		; TEST SIGN
							; 6430	=0
							; 6431	BDEC1:	[BRX]_0, HOLD LEFT,	;POSITIVE, CLEAR RH OF BRX
U 1304, 1314,4221,0006,4170,4007,0700,0000,0000,0000	; 6432		J/BDEC3			;COMPUTE # OF DIGITS REQUIRED
							; 6433		[BRX]_[BRX].OR.#, 	;NEGATIVE, SET M
U 1305, 1310,3551,0606,4374,0007,0700,0000,0010,0000	; 6434		#/100000, HOLD RIGHT	; ..
							; 6435	=0*
U 1310, 2710,4551,0404,4374,0007,0700,0010,0037,7777	; 6436	BDEC2:	CLEAR ARX0, CALL [DBLNG1] ;NEGATE AR!ARX
							; 6437		AC_[AR] TEST,		;PUT BACK ANSWER
U 1312, 1306,3770,0303,0174,4007,0520,0400,0000,0000	; 6438		SKIP DP0		;IF STILL MINUS WE HAVE
							; 6439					; 1B0, AND NO OTHER BITS
U 1306, 1304,3440,0404,1174,4007,0700,0400,0000,1441	; 6440	=0	AC[1]_[ARX], J/BDEC1	;POSITIVE NOW
U 1307, 3160,0111,0704,4174,4007,0700,0000,0000,0000	; 6441		[ARX]_[ARX]+1		;JUST 1B0--ADD 1
							; 6442		[BRX]_[BRX].OR.#,	;AND REMEMBER THAT WE DID
							; 6443		#/040000, HOLD RIGHT,	; IN LEFT HALF OF AC+3
U 3160, 1310,3551,0606,4374,0007,0700,0000,0004,0000	; 6444		J/BDEC2			; NEGATE IT AGAIN
							; 6445	=0
U 1314, 1321,3771,0003,0276,6007,0700,0000,0000,0000	; 6446	BDEC3:	[AR]_AC, J/BDEC4	;GET HIGH AC
							; 6447		[BRX]_[BRX].OR.#,	;NO LARGER POWER OF 10 FITS
							; 6448		#/200000,		;SET N FLAG (CLEARLY NOT 0)
U 1315, 1324,3551,0606,4374,0007,0700,0000,0020,0000	; 6449		HOLD RIGHT, J/BDEC5	;SETUP TO FILL, ETC.
							; 6450	=001
							; 6451	BDEC4:	[ARX]_AC[1],		;GET HIGH WORD
U 1321, 1362,3771,0004,1276,6007,0701,0010,0000,1441	; 6452		CALL [BDSUB]		;SEE IF 10**C(BRX) FITS
							; 6453	=011	[BRX]_[BRX]+1,	;NUMBER FITS--TRY A LARGER ONE
U 1323, 1314,0111,0706,4174,4007,0630,2000,0060,0000	; 6454		STEP SC, J/BDEC3	;UNLESS WE ARE OUT OF NUMBERS
U 1327, 1316,4553,0600,4374,4007,0331,0000,0077,7777	; 6455	=111	TR [BRX], #/777777	;ANY DIGITS REQUIRED?
							; 6456	=
							; 6457	=0	[BRX]_[BRX].OR.#,	;SOME DIGITS NEEDED,
							; 6458		#/200000, HOLD RIGHT,	; SET N FLAG
U 1316, 1324,3551,0606,4374,0007,0700,0000,0020,0000	; 6459		J/BDEC5			;CONTINUE BELOW
U 1317, 1324,0111,0706,4174,4007,0700,0000,0000,0000	; 6460		[BRX]_[BRX]+1		;ZERO--FORCE AT LEAST 1 DIGIT
							; 6461	
							; 6462	=0
							; 6463	BDEC5:	[AR]_AC[DLEN],		;GET LENGTH
U 1324, 3271,3771,0003,1276,6007,0701,0010,0000,1443	; 6464		CALL [CLRFLG]		;REMOVE FLAGS FROM AR
U 1325, 3161,4221,0005,4174,4007,0700,0000,0000,0000	; 6465		[BR]_0
U 3161, 3162,3441,0605,4170,4007,0700,0000,0000,0000	; 6466		[BR]_[BRX], HOLD LEFT	;GET # OF DIGITS NEEDED
							; 6467		[BR]_[BR]-[AR],		;NUMBER OF FILLS NEEDED
U 3162, 1330,1111,0305,4174,4007,0421,4000,0000,0000	; 6468		SKIP AD.LE.0		;SEE IF ENOUGH ROOM
							; 6469	=0	[ARX]_WORK[BDL],	;DOES NOT FIT IN SPACE ALLOWED
U 1330, 3204,3771,0004,7274,4007,0701,0000,0000,0250	; 6470		J/BDABT			; DO NOT DO CONVERT
U 1331, 1332,3333,0006,4174,4007,0520,0000,0000,0000	; 6471		READ [BRX], SKIP DP0	;IS L ALREADY SET
							; 6472	=0	AC[DLEN]_[BRX],		;NO--NO FILLERS
U 1332, 1303,3440,0606,1174,4007,0700,0400,0000,1443	; 6473		J/DOCVT			;GO CHURN OUT THE NUMBER
							; 6474	
							; 6475	
							; 6476	;HERE TO STORE LEADING FILLERS
U 1333, 3163,3441,0603,4174,0007,0700,0000,0000,0000	; 6477		[AR]_[BRX], HOLD RIGHT	;MAKE SURE THE FLAGS GET SET
U 3163, 3164,3440,0303,1174,4007,0700,0400,0000,1443	; 6478		AC[DLEN]_[AR]		; BEFORE WE PAGE FAIL
U 3164, 3165,3771,0003,7274,4007,0701,0000,0000,0240	; 6479		[AR]_WORK[E0]		;ADDRESS OF FILL (-1)
							; 6480		[AR]_[AR]+1, LOAD VMA,	;FETCH FILLER
U 3165, 3166,0111,0703,4174,4007,0700,0200,0004,0012	; 6481		START READ
U 3166, 3167,3771,0016,4365,5007,0700,0200,0000,0002	; 6482		MEM READ, [T0]_MEM	;GET FILLER INTO AR
U 3167, 3170,3771,0013,4370,4007,0700,0000,0000,0012	; 6483		STATE_[EDIT-DST]	;PAGE FAILS BACKUP DST
U 3170, 3171,2113,0507,7174,4007,0701,4400,0000,0242	; 6484		WORK[SLEN]_[BR]-1, 3T	;SAVE # OF FILLERS
U 3171, 3172,3441,1603,7174,4007,0700,0000,0000,0242	; 6485	BDFILL:	[AR]_[T0], WORK[SLEN]	;RESTORE FILL BYTE AND
							; 6486					; WARM UP RAM FILE
							; 6487		[BR]_WORK[SLEN]+1, 3T,	;MORE FILLERS NEEDED?
U 3172, 1340,0551,0705,7274,4007,0521,0000,0000,0242	; 6488		SKIP DP0
U 1340, 1303,3440,0606,1174,4007,0700,0400,0000,1443	; 6489	=000	AC[DLEN]_[BRX], J/DOCVT	;ALL DONE FIX FLAGS AND CONVERT
							; 6490	=001	WORK[SLEN]_[BR],	;SAVE UPDATED LENGTH
U 1341, 3261,3333,0005,7174,4007,0700,0410,0000,0242	; 6491		CALL [PUTDST]		; AND STORE FILLER
U 1347, 3173,2551,0705,1274,4007,0701,4000,0000,1443	; 6492	=111	[BR]_AC[DLEN]-1		;COUNT DOWN STRING LENGTH
							; 6493	=
U 3173, 3171,3440,0505,1174,4007,0700,0400,0000,1443	; 6494		AC[DLEN]_[BR], J/BDFILL	;KEEP FILLING
							; 6495	
							; 6496	;HERE TO STORE THE ANSWER
							; 6497	
							; 6498	DOCVT1:	[ARX]_AC[1],		;GET LOW WORD
U 3174, 3203,3771,0004,1276,6007,0701,0000,0000,1441	; 6499		J/DOCVT2		;ENTER LOOP FROM BOTTOM
							; 6500	=010
							; 6501	BDECLP:	[BR]_[BR]+1,		;COUNT DIGITS
U 1352, 1362,0111,0705,4174,4007,0700,0010,0000,0000	; 6502		CALL [BDSUB]		;KEEP SUBTRACTING 10**C(BRX)
U 1356, 3175,3333,0003,7174,4007,0700,0400,0000,0247	; 6503	=110	WORK[BDH]_[AR]		;SAVE BINARY
							; 6504	=
							; 6505		[AR]_[BR]+WORK[E1],	;OFFSET DIGIT
U 3175, 1336,0551,0503,7274,4003,7701,0000,0000,0241	; 6506		B DISP			;SEE WHICH MODE
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 148
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- BINARY TO DECIMAL CONVERSION

							; 6507	=1110	READ [AR], LOAD VMA,	;TRANSLATE, START READING TABLE
U 1336, 1344,3333,0003,4174,4007,0700,0200,0004,0012	; 6508		START READ, J/BDTBL	; GO GET ENTRY FROM TABLE
U 1337, 1351,3333,0004,7174,4007,0700,0400,0000,0250	; 6509	BDSET:	WORK[BDL]_[ARX]		;SAVE LOW BINARY
U 1351, 3261,3771,0013,4370,4007,0700,0010,0000,0012	; 6510	=00*	STATE_[EDIT-DST], CALL [PUTDST]
U 1357, 3176,2551,0705,1274,4007,0701,4000,0000,1443	; 6511	=11*	[BR]_AC[DLEN]-1		;UPDATE STRING LENGTH
U 3176, 3177,3771,0003,7274,4007,0701,0000,0000,0247	; 6512		[AR]_WORK[BDH]
U 3177, 3200,3771,0004,7274,4007,0701,0000,0000,0250	; 6513		[ARX]_WORK[BDL]
U 3200, 1334,4553,0500,4374,4007,0321,0000,0004,0000	; 6514		TL [BR], #/040000	;ARE WE CONVERTING 1B0?
U 1334, 3205,0111,0704,4174,4007,0700,0000,0000,0000	; 6515	=0	[ARX]_[ARX]+1, J/BDCFLG	;YES--FIX THE NUMBER AND CLEAR FLAG
U 1335, 3201,3440,0303,0174,4007,0700,0400,0000,0000	; 6516	DOCVT3:	AC_[AR]
U 3201, 3202,3440,0404,1174,4007,0700,0400,0000,1441	; 6517		AC[1]_[ARX]
U 3202, 3203,3440,0505,1174,4007,0700,0400,0000,1443	; 6518		AC[DLEN]_[BR]		;STORE BACK NEW STRING LENGTH
U 3203, 1342,1111,0706,4174,4007,0531,4000,0000,0000	; 6519	DOCVT2:	[BRX]_[BRX]-1, 3T, SKIP DP18
U 1342, 1352,2441,0705,4174,4467,0701,4000,0003,0000	; 6520	=0	[BR]_-1, SET FPD, 3T, J/BDECLP
U 1343, 0014,4221,0013,4170,4467,0700,0000,0005,0000	; 6521		END STATE, CLR FPD, J/SKIP
							; 6522	
							; 6523	;HERE TO TRANSLATE 1 DIGIT
							; 6524	=0
							; 6525	BDTBL:	END STATE,		;DON'T CHANGE BYTE POINTER IF
							; 6526					; THIS PAGE FAILS
U 1344, 3462,4221,0013,4170,4007,0700,0010,0000,0000	; 6527		CALL [LOADAR]		;GO PUT WORD IN AR
U 1345, 1354,4553,0600,4374,4007,0331,0000,0077,7777	; 6528		TR [BRX], #/777777	;LAST DIGIT
U 1354, 1337,4221,0003,4174,0007,0700,0000,0000,0000	; 6529	=0	[AR]_0, HOLD RIGHT, J/BDSET
U 1355, 1360,4553,0600,4374,4007,0321,0000,0010,0000	; 6530		TL [BRX], #/100000	;AND NEGATIVE
U 1360, 1361,3770,0303,4344,4007,0700,0000,0000,0000	; 6531	=0	[AR]_[AR] SWAP		;LAST AND MINUS, USE LH
U 1361, 1337,4221,0003,4174,0007,0700,0000,0000,0000	; 6532		[AR]_0, HOLD RIGHT, J/BDSET
							; 6533	
U 3204, 1505,3771,0003,7274,4007,0701,0000,0000,0247	; 6534	BDABT:	[AR]_WORK[BDH], J/DAC
							; 6535	
							; 6536	BDCFLG:	[BR]_[BR].AND.NOT.#, 	;CLEAR FLAG THAT TELLS US
							; 6537		#/040000, HOLD RIGHT,	; TO SUBTRACT 1 AND
U 3205, 1335,5551,0505,4374,0007,0700,0000,0004,0000	; 6538		J/DOCVT3		; CONTINUE CONVERTING
							; 6539	
							; 6540	;SUBROUTINE TO SUBRTACT A POWER OF 10 FROM AR!ARX
							; 6541	;CALL WITH:
							; 6542	;	AR!ARX/	NUMBER TO BE CONVERTED
							; 6543	;	BRX(RIGHT)/ POWER OF 10
							; 6544	;RETURNS:
							; 6545	;	2 RESULT IS STILL POSITIVE
							; 6546	;	6 RESULT WOULD HAVE BEEN NEGATIVE (RESTORE DONE)
							; 6547	=0
							; 6548	BDSUB:	[T0]_[BRX]+#, 3T, WORK/DECLO, ;ADDRESS OF LOW WORD
U 1362, 1311,0551,0616,4374,4007,0701,0000,0000,0344	; 6549		J/BDSUB1		;NO INTERRUPT
U 1363, 2503,4443,0000,4174,4007,0700,0000,0000,0000	; 6550		J/FIXPC			;INTERRUPT
							; 6551	=0*
							; 6552	BDSUB1:	[T1]_[T0], LOAD VMA,	;PUT IN VMA,
U 1311, 1366,3441,1617,4174,4007,0700,0210,0000,0010	; 6553		CALL [CLARX0]		;FIX UP SIGN OF LOW WORD
							; 6554		[ARX]_[ARX]-RAM, 3T,	;SUBTRACT
U 1313, 1364,1551,0404,6274,4007,0561,4000,0000,0000	; 6555		SKIP CRY1		;SEE IF OVERFLOW
U 1364, 1365,1111,0703,4174,4007,0700,4000,0000,0000	; 6556	=0	[AR]_[AR]-1		;PROCESS CARRY
U 1365, 3206,0551,0616,4374,4007,0701,0000,0000,0373	; 6557		[T0]_[BRX]+#, 3T, WORK/DECHI ;ADDRESS OF HIGH WORD
U 3206, 3207,3333,0016,4174,4007,0700,0200,0000,0010	; 6558		READ [T0], LOAD VMA	;PLACE IN VMA
							; 6559		[AR]_[AR]-RAM, 4T,	;SUBTRACT
U 3207, 1366,1551,0303,6274,4007,0522,4000,0000,0000	; 6560		SKIP DP0		;SEE IF IT FIT
							; 6561	=0
							; 6562	CLARX0:	CLEAR ARX0,		;IT FIT, KEEP LOW WORD +
U 1366, 0002,4551,0404,4374,0004,1700,0000,0037,7777	; 6563		RETURN [2]		; AND RETURN
U 1367, 3210,0551,0303,6274,4007,0700,0000,0000,0000	; 6564		[AR]_[AR]+RAM		;RESTORE
U 3210, 3211,3333,0017,4174,4007,0700,0200,0000,0010	; 6565		READ [T1], LOAD VMA
U 3211, 1370,0551,0404,6274,4007,0561,0000,0000,0000	; 6566		[ARX]_[ARX]+RAM, 3T, SKIP CRY1
							; 6567	=0
							; 6568	BDSUB2:	CLEAR ARX0,		;KEEP LOW WORD +
U 1370, 0006,4551,0404,4374,0004,1700,0000,0037,7777	; 6569		RETURN [6]		;RETURN OVERFLOW
							; 6570		[AR]_[AR]+1,		;ADD BACK THE CARRY
U 1371, 1370,0111,0703,4174,4007,0700,0000,0000,0000	; 6571		J/BDSUB2		;COMPLETE SUBTRACT
							; 6572	
							; 6573	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 149
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- EDIT -- MAIN LOOP

							; 6574	.TOC	"EXTEND -- EDIT -- MAIN LOOP"
							; 6575	
							; 6576	;HERE FOR EDIT INSTRUCTION
							; 6577	;CALL WITH:
							; 6578	;	AR/	E0	ADDRESS OF FILL, FLOAT, AND MESSAGE TABLE
							; 6579	;	BR/	E1	TRANSLATE TABLE
							; 6580	;
							; 6581	3741:
							; 6582	EDIT:	VMA_[AR]+1, START READ,	;FIRST GET FILL BYTE
U 3741, 3267,0111,0703,4170,4007,0700,0210,0004,0012	; 6583		CALL [GTFILL]		;GO GET IT
U 3751, 1273,3771,0006,0276,6007,0700,0000,0000,0000	; 6584	3751:	[BRX]_AC		;GET PATTERN POINTER
							; 6585	=0**	TL [BRX], #/047777,	;MAKE SURE SECTION 0
U 1273, 3556,4553,0600,4374,4007,0321,0010,0004,7777	; 6586		CALL [BITCHK]		; ..
U 1277, 3212,3443,0600,4174,4007,0700,0200,0004,0012	; 6587	EDITLP:	VMA_[BRX], START READ	;FETCH PATTERN WORD
U 3212, 3213,4221,0013,4170,4007,0700,0000,0000,0000	; 6588		END STATE		;NO SPECIAL PAGE FAIL ACTION
U 3213, 1372,3770,0605,4344,4007,0700,0000,0000,0000	; 6589		[BR]_[BRX] SWAP		;GET PBN IN BITS 20 & 21
							; 6590	=0	[BR]_[BR]*4,		; ..
U 1372, 3462,0115,0505,4174,4007,0700,0010,0000,0000	; 6591		CALL [LOADAR]		;GET PATTERN WORD
U 1373, 1374,3333,0005,4174,4003,1701,0000,0000,0000	; 6592		READ [BR], 3T, DISP/DP LEFT
							; 6593	=1100
U 1374, 1500,3770,0303,4344,4007,0700,2000,0071,0007	; 6594		[AR]_[AR] SWAP, SC_7, J/MOVPAT	;(0) BITS 0-8
U 1375, 1501,3770,0303,4344,4007,0700,0000,0000,0000	; 6595		[AR]_[AR] SWAP, J/MSKPAT	;(1) BITS 9-17
U 1376, 1500,3447,0303,4174,4007,0700,2000,0071,0006	; 6596		[AR]_[AR]*.5, SC_6, J/MOVPAT	;(2) BITS 18-27
U 1377, 3214,4551,0303,4374,4007,0700,0000,0000,0777	; 6597		[AR]_[AR].AND.#, #/777, J/EDISP	;(3) BITS 28-35
							; 6598	=0
U 1500, 1500,3447,0303,4174,4007,0630,2000,0060,0000	; 6599	MOVPAT:	[AR]_[AR]*.5, STEP SC, J/MOVPAT	;SHIFT OVER
U 1501, 3214,4551,0303,4374,4007,0700,0000,0000,0777	; 6600	MSKPAT:	[AR]_[AR].AND.#, #/777
							; 6601	
							; 6602	;HERE WITH PATTERN BYTE RIGHT ADJUSTED IN AR
U 3214, 1502,3447,0305,4174,4007,0700,2000,0071,0002	; 6603	EDISP:	[BR]_[AR]*.5, SC_2	;SHIFT OVER
							; 6604	=0
U 1502, 1502,3447,0505,4174,4007,0630,2000,0060,0000	; 6605	EDISP1:	[BR]_[BR]*.5, STEP SC, J/EDISP1
U 1503, 2001,3333,0005,4174,4003,5701,0000,0000,0000	; 6606		READ [BR], 3T, DISP/DP	;LOOK AT HIGH 3 BITS
							; 6607	=0001				;(0) OPERATE GROUP
							; 6608		[AR]-#, #/5, 4T,	;	SEE IF 0-4
U 2001, 1510,1553,0300,4374,4007,0532,4000,0000,0005	; 6609		SKIP DP18, J/EDOPR
							; 6610					;(1) MESSAGE BYTE
							; 6611		READ [BRX], SKIP DP0,
U 2003, 1604,3333,0006,4174,4007,0520,0000,0000,0000	; 6612		J/EDMSG
							; 6613					;(2) UNDEFINED
U 2005, 3234,4443,0000,4174,4007,0700,0000,0000,0000	; 6614		J/EDNOP
							; 6615					;(3) UNDEFINED
U 2007, 3234,4443,0000,4174,4007,0700,0000,0000,0000	; 6616		J/EDNOP
							; 6617					;(4) UNDEFINED
U 2011, 3234,4443,0000,4174,4007,0700,0000,0000,0000	; 6618		J/EDNOP
							; 6619					;(5) SKIP IF M SET
							; 6620		TL [BRX], #/100000,
U 2013, 1752,4553,0600,4374,4007,0321,0000,0010,0000	; 6621		J/EDSKP
							; 6622					;(6) SKIP IF N SET
							; 6623		TL [BRX], #/200000,
U 2015, 1752,4553,0600,4374,4007,0321,0000,0020,0000	; 6624		J/EDSKP
							; 6625					;(7) SKIP ALWAYS
U 2017, 1752,4443,0000,4174,4007,0700,0000,0000,0000	; 6626		J/EDSKP
							; 6627	
							; 6628	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 150
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- EDIT -- DECODE OPERATE GROUP

							; 6629	.TOC	"EXTEND -- EDIT -- DECODE OPERATE GROUP"
							; 6630	
							; 6631	;HERE FOR OPERATE GROUP. SKIP IF IN RANGE
							; 6632	=0
U 1510, 3234,4443,0000,4174,4007,0700,0000,0000,0000	; 6633	EDOPR:	J/EDNOP			;OUT OF RANGE
U 1511, 1670,3333,0003,4174,4003,5701,0000,0000,0000	; 6634		READ [AR], 3T, DISP/DP	;DISPATCH ON TYPE
U 1670, 3215,0111,0701,4174,4007,0700,0000,0000,0000	; 6635	=1000	[PC]_[PC]+1, J/EDSTOP	;(0) STOP EDIT
							; 6636		STATE_[EDIT-SRC], 	;(1) SELECT SOURCE BYTE
U 1671, 1320,3771,0013,4370,4007,0700,0000,0000,0011	; 6637		J/EDSEL
							; 6638		READ [BRX], SKIP DP0,	;(2) START SIGNIFICANCE
U 1672, 1606,3333,0006,4174,4007,0520,0000,0000,0000	; 6639		J/EDSSIG
							; 6640		[BRX]_[BRX].AND.#,	;(3) FIELD SEPERATOR
							; 6641		#/77777, HOLD RIGHT,
U 1673, 3234,4551,0606,4374,0007,0700,0000,0007,7777	; 6642		J/EDNOP
U 1674, 1675,3771,0005,1276,6007,0701,0000,0000,1443	; 6643		[BR]_AC[MARK]		;(4) EXCHANGE MARK AND DEST
							; 6644		VMA_[BR], START READ,
U 1675, 1562,3443,0500,4174,4007,0700,0200,0004,0012	; 6645		J/EDEXMD
							; 6646	=
							; 6647	
							; 6648	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 151
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- EDIT -- STOP EDIT

							; 6649	.TOC	"EXTEND -- EDIT -- STOP EDIT"
							; 6650	
							; 6651	;HERE TO END AN EDIT OPERATION. PC IS SET TO SKIP IF NORMAL END
							; 6652	; OR NON-SKIP IF ABORT
							; 6653	EDSTOP:	[BR]_.NOT.[BRX],	;AD WILL NOT DO D.AND.NOT.A
U 3215, 3216,7441,0605,4174,4007,0700,1000,0071,0010	; 6654		FE_S#, S#/10		;PRESET FE
U 3216, 3217,3441,0603,4174,4007,0701,1000,0043,0000	; 6655		[AR]_[BRX], 3T, FE_FE+P	;MOVE POINTER, UPBATE PBN
							; 6656		[BR].AND.#, 3T,		;WAS OLD NUMBER 3?
U 3217, 1512,4553,0500,4374,4007,0321,0000,0003,0000	; 6657		#/030000, SKIP ADL.EQ.0	; ..
							; 6658	=0
U 1512, 1515,3770,0303,4334,4017,0700,0000,0041,0000	; 6659	EDSTP1:	[AR]_P, J/STAC		;NO--ALL DONE
							; 6660		[AR]_[AR]+1,		;YES--BUMP WORD #
							; 6661		FE_FE.AND.S#, S#/0700,	;KEEP ONLY FLAG BITS
U 1513, 1512,0111,0703,4174,4007,0700,1000,0051,0700	; 6662		J/EDSTP1		;GO STOP EDIT
							; 6663	
							; 6664	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 152
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- EDIT -- START SIGNIFICANCE

							; 6665	.TOC	"EXTEND -- EDIT -- START SIGNIFICANCE"
							; 6666	
							; 6667	;HERE WITH DST POINTER IN AR
							; 6668	=110
U 1606, 3223,4443,0000,4174,4007,0700,0010,0000,0000	; 6669	EDSSIG:	CALL [EDFLT]		;STORE FLT CHAR
U 1607, 3234,4443,0000,4174,4007,0700,0000,0000,0000	; 6670		J/EDNOP			;DO NEXT PATTERN BYTE
							; 6671	
							; 6672	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 153
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- EDIT -- EXCHANGE MARK AND DESTINATION

							; 6673	.TOC	"EXTEND -- EDIT -- EXCHANGE MARK AND DESTINATION"
							; 6674	
							; 6675	;HERE WITH ADDRESS OF MARK POINTER IN BR
							; 6676	=0
							; 6677	EDEXMD:	Q_AC[DSTP],		;GET DEST POINTER
U 1562, 3462,3772,0000,1275,5007,0701,0010,0000,1444	; 6678		CALL [LOADAR]		;GO PUT MARK IN AR
U 1563, 3220,4443,0000,4174,4007,0700,0200,0003,0002	; 6679		START WRITE		;START WRITE. SEPERATE STEP TO AVOID
							; 6680					; PROBLEM ON DPM5
U 3220, 3221,3223,0000,4174,4007,0701,0200,0000,0002	; 6681		MEM WRITE, MEM_Q	;PUT OLD DEST IN MARK
U 3221, 3234,3440,0303,1174,4007,0700,0400,0000,1444	; 6682		AC[DSTP]_[AR], J/EDNOP	;PUT BACK DEST POINTER
							; 6683	
							; 6684	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 154
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- EDIT -- PROCESS SOURCE BYTE

							; 6685	.TOC	"EXTEND -- EDIT -- PROCESS SOURCE BYTE"
							; 6686	
							; 6687	=0*
							; 6688	EDSEL:	[AR]_AC[SRCP],		;PICK UP SRC POINTER
U 1320, 2103,3771,0003,1276,6007,0701,0010,0000,1441	; 6689		CALL [GETSRC]		;GET SOURCE BYTE
U 1322, 2020,3447,0303,7174,4007,0700,0000,0000,0241	; 6690		[AR]_[AR]*.5, WORK[E1]	;PREPARE TO TRANSLATE
							; 6691	=000	[AR]_[AR]+WORK[E1],	;GO TRANSLATE BY HALFWORDS
U 2020, 3254,0551,0303,7274,4007,0700,0010,0000,0241	; 6692		2T, CALL [TRNAR]	; ..
							; 6693	=010
							; 6694	EDFILL:	READ [AR],		;(2) NO SIGNIFICANCE, GO FILL
							; 6695		SKIP AD.EQ.0,		;    SEE IF ANY FILLER
U 2022, 1572,3333,0003,4174,4007,0621,0000,0000,0000	; 6696		J/EDFIL1		;    GO TO IT
							; 6697		STATE_[EDIT-SRC],	;(3) SIG START, DO FLOAT CHAR
U 2023, 1676,3771,0013,4370,4007,0700,0000,0000,0011	; 6698		J/EDSFLT
U 2024, 3215,4443,0000,4174,4007,0700,0000,0000,0000	; 6699	=100	J/EDSTOP		;(4) ABORT
							; 6700	=101
							; 6701	EDSPUT:	STATE_[EDIT-S+D],	;(5) NORMAL, STORE AT DST
U 2025, 3261,3771,0013,4370,4007,0700,0010,0000,0013	; 6702		CALL [PUTDST]		;    ..
							; 6703	=111
U 2027, 3234,4443,0000,4174,4007,0700,0000,0000,0000	; 6704		J/EDNOP			;(7) BYTE STORED
							; 6705	=
							; 6706	
							; 6707	;HERE TO COMPLETE STORING FILL
							; 6708	=0
U 1572, 2025,4443,0000,4174,4007,0700,0000,0000,0000	; 6709	EDFIL1:	J/EDSPUT		;STORE FILLER
U 1573, 3234,4443,0000,4174,4007,0700,0000,0000,0000	; 6710		J/EDNOP			;NO FILLER TO STORE
							; 6711	
							; 6712	;HERE TO DO FLOAT BYTE
							; 6713	=110
							; 6714	EDSFLT:	WORK[FSIG]_[ARX],	;SAVE SIG CHAR
U 1676, 3223,3333,0004,7174,4007,0700,0410,0000,0246	; 6715		CALL [EDFLT]		;STORE FLOAT CHAR
U 1677, 3222,3771,0003,7274,4007,0701,0000,0000,0246	; 6716		[AR]_WORK[FSIG]		;RESTORE CHAR
							; 6717		[AR]_[AR].AND.# CLR LH,	;JUST KEEP THE BYTE IN CASE
							; 6718		#/77777,		; DEST BYTE .GT. 15 BITS
U 3222, 2025,4251,0303,4374,4007,0700,0000,0007,7777	; 6719		J/EDSPUT		;GO STORE CHAR WHICH STARTED THIS ALL
							; 6720	
							; 6721	;SUBRUTINE TO PROCESS FLOAT CHAR
							; 6722	;CALL WITH:
							; 6723	;	AR/ POINTER TO STORE @ MARK
							; 6724	;RETURN 7 WITH FLOAT STORED
U 3223, 3224,3771,0005,1276,6007,0701,0000,0000,1443	; 6725	EDFLT:	[BR]_AC[MARK]		;ADDRESS OF MARK POINTER
U 3224, 3225,3443,0500,4174,4007,0700,0200,0003,0012	; 6726		VMA_[BR], START WRITE	;READY TO STORE
U 3225, 3226,3771,0005,1276,6007,0701,0000,0000,1444	; 6727		[BR]_AC[DSTP]		;GET DST POINTER
U 3226, 1602,3333,0005,4175,5007,0701,0200,0000,0002	; 6728		MEM WRITE, MEM_[BR]	;STORE POINTER
							; 6729	=0	[AR]_0 XWD [2],		;FETCH FLOAT CHAR
U 1602, 3230,4751,1203,4374,4007,0700,0010,0000,0002	; 6730		CALL [EDBYTE]		;GET TBL BYTE
							; 6731		MEM READ, [AR]_MEM,	;GET FLOAT CHAR
U 1603, 2030,3771,0003,4365,5007,0621,0200,0000,0002	; 6732		SKIP AD.EQ.0		;SEE IF NULL
							; 6733	=000
							; 6734		[FLG]_[FLG].OR.#,	;REMEMBER TO BACKUP DST POINTER
							; 6735		STATE/EDIT-DST,		; WILL ALSO BACKUP SRC IF CALLED
							; 6736		HOLD LEFT,		; FROM SELECT
U 2030, 3261,3551,1313,4370,4007,0700,0010,0000,0012	; 6737		CALL [PUTDST]		; STORE FLOAT
							; 6738	=001	[BRX]_[BRX].OR.#, #/400000,
U 2031, 3227,3551,0606,4374,0007,0700,0000,0040,0000	; 6739		HOLD RIGHT,  J/EDFLT1	;NULL
							; 6740	=110	[BRX]_[BRX].OR.#, #/400000,
U 2036, 3227,3551,0606,4374,0007,0700,0000,0040,0000	; 6741		HOLD RIGHT,  J/EDFLT1	;MARK STORED
							; 6742	=
							; 6743	EDFLT1:	AC_[BRX],		;SAVE FLAGS SO WE DON'T
							; 6744					;TRY TO DO THIS AGAIN IF
							; 6745					;NEXT STORE PAGE FAILS
U 3227, 0007,3440,0606,0174,4004,1700,0400,0000,0000	; 6746		RETURN [7]		;AND RETURN
							; 6747	
							; 6748	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 155
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- EDIT -- MESSAGE BYTE

							; 6749	.TOC	"EXTEND -- EDIT -- MESSAGE BYTE"
							; 6750	
							; 6751	;HERE WITH SKIP ON S
							; 6752	=0
							; 6753	EDMSG:	[AR]_WORK[FILL],	;GET FILL BYTE
							; 6754		SKIP AD.EQ.0, 4T,	;SEE IF NULL
U 1604, 2040,3771,0003,7274,4007,0622,0000,0000,0244	; 6755		J/EDMSG1		;GO STORE
							; 6756		[AR]_[AR].AND.# CLR LH, ;GET OFFSET INTO TABLE
U 1605, 1642,4251,0303,4374,4007,0700,0000,0000,0077	; 6757		#/77
							; 6758	=0	[AR]_[AR]+1, WORK[E0],	;PLUS 1
U 1642, 3230,0111,0703,7174,4007,0700,0010,0000,0240	; 6759		CALL [EDBYTE]		;GET TBL BYTE
U 1643, 2040,3771,0003,4365,5007,0700,0200,0000,0002	; 6760		MEM READ, [AR]_MEM	;FROM MEMORY
							; 6761	=000
							; 6762	EDMSG1:	STATE_[EDIT-DST],	;WHAT TO DO ON PAGE FAILS
U 2040, 3261,3771,0013,4370,4007,0700,0010,0000,0012	; 6763		CALL [PUTDST]		;STORE MESSAGE BYTE
U 2041, 3234,4443,0000,4174,4007,0700,0000,0000,0000	; 6764	=001	J/EDNOP			;NULL FILLER
U 2046, 3234,4443,0000,4174,4007,0700,0000,0000,0000	; 6765	=110	J/EDNOP			;NEXT BYTE
							; 6766	=
							; 6767	
U 3230, 3231,0551,0303,7274,4007,0701,0000,0000,0240	; 6768	EDBYTE:	[AR]_[AR]+WORK[E0]	;GET OFFSET INTO TABLE
							; 6769		VMA_[AR], START READ,	;START MEMORY CYCLE
U 3231, 0001,3443,0300,4174,4004,1700,0200,0004,0012	; 6770		RETURN [1]		;RETURN TO CALLER
							; 6771	
							; 6772	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 156
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- EDIT -- SKIP

							; 6773	.TOC	"EXTEND -- EDIT -- SKIP"
							; 6774	
							; 6775	=0
							; 6776	;HERE TO SKIP ALWAYS
							; 6777	EDSKP:	[AR]_[AR].AND.#, #/77,	;JUST KEEP SKIP DISTANCE
U 1752, 3232,4551,0303,4374,4007,0700,0000,0000,0077	; 6778		J/EDSKP1		;CONTINUE BELOW
							; 6779	;HERE IF WE DO NOT WANT TO SKIP
U 1753, 3234,4443,0000,4174,4007,0700,0000,0000,0000	; 6780		J/EDNOP
U 3232, 3233,0115,0703,4174,4007,0700,0000,0000,0000	; 6781	EDSKP1:	[AR]_([AR]+1)*2		;GIVE 1 EXTRA SKIP
							; 6782		READ [AR], SCAD/A*2,	;PUT THE ADJUSTMENT
							; 6783		SCADA/BYTE5, 3T, LOAD SC, ; THE SC
U 3233, 3235,3333,0003,4174,4007,0701,2000,0007,0000	; 6784		J/EDNOP1		;JOIN MAIN LOOP
							; 6785	
							; 6786	
							; 6787	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 157
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- EDIT -- ADVANCE PATTERN POINTER

							; 6788	.TOC	"EXTEND -- EDIT -- ADVANCE PATTERN POINTER"
							; 6789	
U 3234, 3235,4443,0000,4174,4007,0700,2000,0071,0000	; 6790	EDNOP:	SC_0			;NO SKIP
U 3235, 3236,3333,0006,4174,4007,0701,1000,0073,0000	; 6791	EDNOP1:	READ [BRX], 3T, FE_P	;PUT PBN IN FE
U 3236, 3237,4443,0000,4174,4007,0700,1000,0051,0030	; 6792		FE_FE.AND.S#, S#/30	;JUST BYTE #
U 3237, 3240,4443,0000,4174,4007,0700,1000,0040,0000	; 6793		FE_FE+SC		;ADD IN ANY SKIP DISTANCE
U 3240, 3241,4443,0000,4174,4007,0700,1000,0041,0010	; 6794		FE_FE+S#, S#/10		;BUMP PBN
							; 6795		[AR]_FE,		;GET NUMBER OF WORDS
U 3241, 3242,3777,0003,4334,4057,0700,2000,0041,0000	; 6796		LOAD SC			;PUT MSB WHERE IT CAN BE TESTED
							; 6797					; QUICKLY
							; 6798		[AR]_[AR].AND.# CLR LH,	;KEEP ONLY 1 COPY
U 3242, 1756,4251,0303,4374,4007,0630,0000,0000,0170	; 6799		#/170, SKIP/SC		; ..
							; 6800	=0
							; 6801	EDN1A:	[AR]_[AR]*.5, SC_0,
U 1756, 2032,3447,0303,4174,4007,0700,2000,0071,0000	; 6802		J/EDNOP2		;READY TO SHIFT OFF BYTE WITHIN
							; 6803					; WORD
							; 6804		[AR]_[AR].OR.#, #/200,	;GET THE SIGN BIT OF THE FE
							; 6805		HOLD LEFT,		; INTO THE AR. ONLY HAPPENS ON
U 1757, 1756,3551,0303,4370,4007,0700,0000,0000,0200	; 6806		J/EDN1A			; SKP 76 OR SKP 77
							; 6807	=0
U 2032, 2032,3447,0303,4174,4007,0630,2000,0060,0000	; 6808	EDNOP2:	[AR]_[AR]*.5, STEP SC, J/EDNOP2
							; 6809		[BRX]_[BRX]+[AR],	;UPDATE WORD ADDRESS
U 2033, 3243,0111,0306,4170,4007,0700,0000,0000,0000	; 6810		HOLD LEFT
U 3243, 3244,3770,0303,4334,4017,0700,0000,0041,0000	; 6811		[AR]_P			;PUT PBN BACK IN BRX
							; 6812		[BRX]_[BRX].AND.#,	;JUST KEEP FLAGS
							; 6813		#/700000,		; ..
U 3244, 3245,4551,0606,4374,0007,0700,0000,0070,0000	; 6814		HOLD RIGHT
							; 6815		[AR]_[AR].AND.#,	;JUST KEEP PBN
U 3245, 3246,4551,0303,4374,4007,0700,0000,0003,0000	; 6816		#/030000
							; 6817		[BRX]_[BRX].OR.[AR],	;FINAL ANSWER
U 3246, 3247,3111,0306,4174,0007,0700,0000,0000,0000	; 6818		HOLD RIGHT
U 3247, 1277,3440,0606,0174,4007,0700,0400,0000,0000	; 6819		AC_[BRX], J/EDITLP	;DO NEXT FUNCTION
							; 6820	
							; 6821	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 158
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND SUBROUTINES -- FILL OUT DESTINATION

							; 6822	.TOC	"EXTEND SUBROUTINES -- FILL OUT DESTINATION"
							; 6823	
							; 6824	;CALL WITH
							; 6825	;	AC[DLEN]/ NEGATIVE NUMBER OF BYTES LEFT IN DEST
							; 6826	;	FILL/  FILL BYTE
							; 6827	;	RETURN [2] WITH FILLERS STORED
							; 6828	;
							; 6829	;NOTE: THIS ROUTINE NEED NOT TEST FOR INTERRUPTS ON EACH BYTE
							; 6830	;	BECAUSE EVERY BYTE STORE DOES A MEMORY READ.
							; 6831	;
							; 6832	=01*
							; 6833	MOVF1:	[AR]_WORK[FILL], 2T,	;GET FILL BYTE
U 2002, 3261,3771,0003,7274,4007,0700,0010,0000,0244	; 6834		CALL [PUTDST]		;PLACE IN DEST
U 2006, 3250,3771,0003,1276,6007,0701,0000,0000,1443	; 6835		[AR]_AC[DLEN]		;AMOUNT LEFT
							; 6836		AC[DLEN]_[AR]+1, 3T,	;STORE UPDATED LEN
U 3250, 2034,0113,0703,1174,4007,0521,0400,0000,1443	; 6837		SKIP DP0		; AND SEE IF DONE
U 2034, 0002,4443,0000,4174,4004,1700,0000,0000,0000	; 6838	=0	RETURN [2]		;DONE
U 2035, 2002,4443,0000,7174,4007,0700,0000,0000,0244	; 6839	MOVFIL:	WORK[FILL], J/MOVF1	;DO ANOTHER BYTE
							; 6840					;ENTERING HERE SAVES 150NS
							; 6841					; PER BYTE BUT COSTS 300NS
							; 6842					; PER FIELD MOVED. I ASSUME (BUT DO
							; 6843					; NOT KNOW) THAT THIS SPEEDS
							; 6844					; THINGS UP.
							; 6845	
							; 6846	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 159
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND SUBROUTINES -- GET MODIFIED SOURCE BYTE

							; 6847	.TOC"EXTEND SUBROUTINES -- GET MODIFIED SOURCE BYTE"
							; 6848	
							; 6849	;CALL WITH:
							; 6850	;SLEN = MINUS LENGTH OF STRING
							; 6851	;MSK = MASK FOR BYTE SIZE (1 IF BIT MUST BE ZERO)
							; 6852	;E1 = EFFECTIVE ADDRESS OF OPERATION WORD (SIGN EXTENDED IF OFFSET)
							; 6853	;	[AR]_WORK[SLEN]+1, CALL [SRCMOD]
							; 6854	;RETURNS:
							; 6855	;	1 LENGTH EXHAUSTED
							; 6856	;	2 (EDIT ONLY) NO SIGNIFICANCE
							; 6857	;	3 (EDIT ONLY) SIGNIFICANCE START:
							; 6858	;	4 ABORT: OUT OF RANGE OR TRANSLATE FAILURE
							; 6859	;	5 NORMAL: BYTE IN AR
							; 6860	;
							; 6861	;DROM B SET AS FOLLOWS:
							; 6862	;	0 TRANSLATE
							; 6863	;	1 OFFSET
							; 6864	;	2 EDIT
							; 6865	;	4 CVTDBT
							; 6866	=00
							; 6867	SRCMOD:	WORK[SLEN]_[AR],	;PUT BACK SOURCE LENGTH
							; 6868		SKIP DP0,		;SEE IF DONE
U 2050, 2102,3333,0003,7174,4007,0520,0410,0000,0242	; 6869		CALL [GSRC]		;GET A SOURCE BYTE
U 2051, 0001,4221,0013,4170,4004,1700,0000,0000,0000	; 6870		END STATE, RETURN [1]	;DONE
U 2052, 2056,4443,0000,7174,4003,7700,0000,0000,0241	; 6871		WORK[E1], B DISP	;OFFSET OR TRANSLATE?
							; 6872	=
U 2056, 3253,3447,0303,4174,4007,0700,0000,0000,0000	; 6873	=1110	[AR]_[AR]*.5, J/XLATE	;TRANSLATE
U 2057, 3251,3770,0303,7174,0007,0700,0000,0000,0241	; 6874		FIX [AR] SIGN, WORK[E1]	;IF WE ARE PROCESSING FULL WORD
							; 6875					; BYTES, AND THEY ARE NEGATIVE,
							; 6876					; AND THE OFFSET IS POSITIVE THEN
							; 6877					; WE HAVE TO MAKE BITS -1 AND -2
							; 6878					; COPIES OF THE SIGN BIT.
U 3251, 3252,0551,0303,7274,4007,0700,0000,0000,0241	; 6879		[AR]_[AR]+WORK[E1], 2T	;OFFSET
							; 6880		[AR].AND.WORK[MSK],	;VALID BYTE?
							; 6881		SKIP AD.EQ.0, 4T,	;SKIP IF OK
U 3252, 0004,4553,0300,7274,4004,1622,0000,0000,0243	; 6882		RETURN [4]		;RETURN 4 IF BAD, 5 IF OK
							; 6883	
							; 6884	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 160
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND SUBROUTINES -- TRANSLATE

							; 6885	.TOC	"EXTEND SUBROUTINES -- TRANSLATE"
							; 6886	
							; 6887	;HERE WITH BYTE IN AR 1-36. FETCH TABLE ENTRY.
U 3253, 3254,0551,0303,7274,4007,0701,0000,0000,0241	; 6888	XLATE:	[AR]_[AR]+WORK[E1]	;COMPUTE ADDRESS
							; 6889	TRNAR:	READ [AR], LOAD VMA,	;FETCH WORD
U 3254, 2042,3333,0003,4174,4007,0700,0200,0004,0012	; 6890		START READ		; ..
							; 6891	=0	[AR]_[AR]*2,		;GET BACK LSB
							; 6892					;BIT 36 IS NOT PRESERVED 
							; 6893					; BY PAGE FAILS
U 2042, 3463,3445,0303,4174,4007,0700,0010,0000,0000	; 6894		CALL [LOADARX]		;PUT ENTRY IN ARX
U 2043, 2044,4553,0300,4374,4007,0331,0000,0000,0001	; 6895		TR [AR], #/1		;WHICH HALF?
							; 6896	=0
							; 6897	XLATE1:	[AR]_[ARX], 3T, 	;RH -- COPY TO AR
							; 6898		DISP/DP LEFT,		;DISPATCH ON CODE
U 2044, 2061,3441,0403,4174,4003,1701,0000,0000,0000	; 6899		J/TRNFNC		;DISPATCH TABLE
							; 6900		[ARX]_[ARX] SWAP,	;LH -- FLIP AROUND
U 2045, 2044,3770,0404,4344,4007,0700,0000,0000,0000	; 6901		J/XLATE1		;START SHIFT
							; 6902	
							; 6903	;HERE ON TRANSLATE OPERATION TO PERFORM FUNCTIONS REQUIRED BY
							; 6904	; THE 3 HIGH ORDER BITS OF THE TRANSLATE FUNCTION HALFWORD. WE
							; 6905	; DISPATCH ON FUNCTION AND HAVE:
							; 6906	;	BRX/	FLAGS
							; 6907	;	ARX/	TABLE ENTRY IN RH
							; 6908	;
							; 6909	=0001
							; 6910					;(0) NOP
							; 6911	TRNFNC:	READ [BRX], SKIP DP0,	;S FLAG ALREADY SET?
U 2061, 2054,3333,0006,4174,4007,0520,0000,0000,0000	; 6912		J/TRNRET		; ..
							; 6913					;(1) ABORT
U 2063, 0004,4443,0000,4174,4004,1700,0000,0000,0000	; 6914		RETURN [4]
							; 6915					;(2) CLEAR M FLAG
							; 6916		[BRX]_[BRX].AND.NOT.#,
							; 6917		#/100000, HOLD RIGHT,	
U 2065, 2061,5551,0606,4374,0007,0700,0000,0010,0000	; 6918		J/TRNFNC
							; 6919					;(3) SET M FLAG
							; 6920		[BRX]_[BRX].OR.#,
							; 6921		#/100000, HOLD RIGHT,
U 2067, 2061,3551,0606,4374,0007,0700,0000,0010,0000	; 6922		J/TRNFNC
							; 6923					;(4) SET N FLAG
							; 6924	TRNSIG:	[BRX]_[BRX].OR.#,
							; 6925		#/200000, HOLD RIGHT,
U 2071, 2061,3551,0606,4374,0007,0700,0000,0020,0000	; 6926		J/TRNFNC
							; 6927					;(5) SET N FLAG THEN ABORT
							; 6928		[BRX]_[BRX].OR.#,
							; 6929		#/200000, HOLD RIGHT,
U 2073, 0004,3551,0606,4374,0004,1700,0000,0020,0000	; 6930		RETURN [4]
							; 6931					;(6) CLEAR M THEN SET N
							; 6932		[BRX]_[BRX].AND.NOT.#,
							; 6933		#/100000, HOLD RIGHT,
U 2075, 2071,5551,0606,4374,0007,0700,0000,0010,0000	; 6934		J/TRNSIG
							; 6935					;(7) SET N AND M
							; 6936		[BRX]_[BRX].OR.#,	
							; 6937		#/300000, HOLD RIGHT,
U 2077, 2061,3551,0606,4374,0007,0700,0000,0030,0000	; 6938		J/TRNFNC
							; 6939	
							; 6940	;HERE TO COMPLETE A TRANSLATE
							; 6941	
							; 6942	=0
							; 6943	TRNRET:	READ [ARX], SKIP DP18,	;S-FLAG IS ZERO
							; 6944		B DISP, SKIP DP18,	;SEE IF EDIT OR SIG START
U 2054, 2114,3333,0004,4174,4003,7530,0000,0000,0000	; 6945		J/TRNSS			; ..
							; 6946	TRNSS1:	[AR]_[ARX].AND.# CLR LH, ;S IS SET, JUST RETURN BYTE
U 2055, 0005,4251,0403,4374,4004,1700,0000,0007,7777	; 6947		#/77777, RETURN [5]	; ..
							; 6948	
							; 6949	=1100
							; 6950	TRNSS:	[AR]_AC[DLEN],		;NO SIG ON MOVE OR D2B
U 2114, 2133,3771,0003,1276,6003,7701,0000,0000,1443	; 6951		B DISP, J/TRNNS1	;SEE IF D2B
							; 6952		[BRX]_[BRX].OR.#,	;SIG START ON MOVE OR D2B
							; 6953		#/400000, HOLD RIGHT,
U 2115, 2055,3551,0606,4374,0007,0700,0000,0040,0000	; 6954		J/TRNSS1		;RETURN BYTE
							; 6955		[AR]_WORK[FILL],	;EDIT--NO SIG RETURN FILL
U 2116, 0002,3771,0003,7274,4004,1701,0000,0000,0244	; 6956		RETURN [2]		; ..
							; 6957		[AR]_AC[DSTP],		;EDIT--START OF SIG
U 2117, 0003,3771,0003,1276,6004,1701,0000,0000,1444	; 6958		RETURN [3]		; ..
							; 6959	
							; 6960	=1011
U 2133, 3255,1111,0703,4174,4007,0700,4000,0000,0000	; 6961	TRNNS1:	[AR]_[AR]-1, J/TRNNS2	;COMPENSATE FOR IGNORING SRC
							; 6962		[AR]_WORK[SLEN]+1,	;DEC TO BIN HAS NO DEST LENGTH
U 2137, 2050,0551,0703,7274,4007,0701,0000,0000,0242	; 6963		J/SRCMOD		;JUST UPDATE SRC LENTH
							; 6964	TRNNS2:	AC[DLEN]_[AR] TEST,	;PUT BACK DLEN AND
U 3255, 2100,3770,0303,1174,4007,0520,0400,0000,1443	; 6965		SKIP DP0		; SEE WHICH IS NOW SHORTER
							; 6966	=0	[AR]_WORK[SLEN],	;DEST IS SHORTER. DO NOT CHANGE
U 2100, 2050,3771,0003,7274,4007,0701,0000,0000,0242	; 6967		J/SRCMOD		; AMOUNT LEFT
							; 6968		[AR]_WORK[SLEN]+1,	;GO LOOK AT NEXT BYTE
U 2101, 2050,0551,0703,7274,4007,0701,0000,0000,0242	; 6969		J/SRCMOD
							; 6970	
							; 6971	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 161
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND SUBROUTINES -- GET UNMODIFIED SOURCE BYTE

							; 6972	.TOC	"EXTEND SUBROUTINES -- GET UNMODIFIED SOURCE BYTE"
							; 6973	
							; 6974	;CALL:
							; 6975	;	GSRC WITH SKIP ON SOURCE LENGTH
							; 6976	;	GETSRC IF LENGHT IS OK
							; 6977	;WITH:
							; 6978	;	AC1/ SOURCE BYTE POINTER
							; 6979	;RETURNS:
							; 6980	;	1 IF LENGTH RAN OUT
							; 6981	;	2 IF OK (BYTE IN AR)
							; 6982	;
							; 6983	=0
							; 6984	GSRC:	[AR]_AC[DLEN],		;LENGTH RAN OUT
U 2102, 0001,3771,0003,1276,6004,1701,0000,0000,1443	; 6985		RETURN [1]		;RESTORE AR AND RETURN
U 2103, 3256,3771,0003,1276,6007,0701,0000,0000,1441	; 6986	GETSRC:	[AR]_AC[SRCP]		;GET SRC PTR
							; 6987		IBP DP,	IBP SCAD,	;UPDATE BYTE POINTER
U 3256, 2105,3770,0305,4334,4016,7701,0000,0033,6000	; 6988		SCAD DISP, 3T		;SEE IF OFLOW
U 2105, 3260,3441,0503,4174,4007,0700,0000,0000,0000	; 6989	=01	[AR]_[BR], J/GSRC1	;NO OFLOW
U 2107, 3257,3770,0503,4334,4017,0700,0000,0032,6000	; 6990		SET P TO 36-S		;RESET P
U 3257, 3260,0111,0703,4170,4007,0700,0000,0000,0000	; 6991		[AR]_[AR]+1, HOLD LEFT	;BUMP Y
							; 6992	
U 3260, 2110,3440,0303,1174,4007,0700,0400,0000,1441	; 6993	GSRC1:	AC[SRCP]_[AR]		;STORE UPDATED POINTER
							; 6994	=0	READ [AR], LOAD BYTE EA,	;SETUP TO FIGURE OUT
U 2110, 2715,3333,0003,4174,4217,0701,1010,0073,0500	; 6995		FE_P, 3T, CALL [BYTEAS]		; EFFECTIVE ADDRESS
							; 6996		READ [AR],		;LOOK AT POINTER
							; 6997		BYTE DISP,		;SEE IF 7 BIT
							; 6998		FE_FE.AND.S#, S#/0770,	;MASK OUT P FIELD
U 2111, 0540,3333,0003,4174,4006,5701,1000,0051,0770	; 6999		J/LDB1			;GO GET THE BYTE
							; 7000	
							; 7001	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 162
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND SUBROUTINES -- STORE BYTE IN DESTINATION STRING

							; 7002	.TOC	"EXTEND SUBROUTINES -- STORE BYTE IN DESTINATION STRING"
							; 7003	
							; 7004	;CALL WITH:
							; 7005	;	AR/ BYTE TO STORE
							; 7006	;	AC4/ DESTINATION BYTE POINTER
							; 7007	;RETURNS:
							; 7008	;	AR & AC4/ UPDATED BYTE POINTER
							; 7009	;	ARX/ BYTE TO STORE
							; 7010	;	BR/ WORD TO MERGE WITH
							; 7011	;	6 ALWAYS
							; 7012	;
U 3261, 2112,3441,0304,4174,4007,0700,0000,0000,0000	; 7013	PUTDST:	[ARX]_[AR]		;SAVE BYTE
							; 7014	=0	[AR]_AC[DSTP],		;GET DEST POINTER
U 2112, 3262,3771,0003,1276,6007,0701,0010,0000,1444	; 7015		CALL [IDST]		;BUMP DEST POINTER
							; 7016		AD/A+B, A/ARX, B/ARX,	;SHIFT 7-BIT BYTE TO
							; 7017		SCAD/A, 3T,		; NATURAL PLACE, AND PUT
U 2113, 2010,0113,0404,4174,4007,0701,1000,0077,0000	; 7018		SCADA/BYTE5, LOAD FE	; INTO FE
							; 7019	=0*	READ [AR], BYTE DISP,	;GO PUT BYTE IN MEMORY
U 2010, 0560,3333,0003,4174,4006,5701,0010,0000,0000	; 7020		CALL [DPB1]		; ..
U 2012, 0006,4443,0000,4174,4004,1700,0000,0000,0000	; 7021		RETURN [6]		;ALL DONE
							; 7022	
							; 7023	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 163
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND SUBROUTINES -- UPDATE DEST STRING POINTERS

							; 7024	.TOC	"EXTEND SUBROUTINES -- UPDATE DEST STRING POINTERS"
							; 7025	
							; 7026	
							; 7027	;SUBROUTINE TO BUMP DST POINTERS
							; 7028	;CALL WITH:
							; 7029	;	AR/	AC[DSTP]
							; 7030	;	RETURN 1 WITH UPDATED POINTER STORED
							; 7031	;
U 3262, 2014,3770,0305,4334,4016,7701,0000,0033,6000	; 7032	IDST:	IBP DP, IBP SCAD, SCAD DISP, 3T
U 2014, 3264,3441,0503,4174,4217,0700,0000,0000,0600	; 7033	=0*	[AR]_[BR], LOAD DST EA, J/IDSTX
U 2016, 3263,3770,0503,4334,4017,0700,0000,0032,6000	; 7034		SET P TO 36-S
U 3263, 3264,0111,0703,4170,4217,0700,0000,0000,0600	; 7035		[AR]_[AR]+1, HOLD LEFT, LOAD DST EA
							; 7036	IDSTX:	AC[DSTP]_[AR], 3T,	;STORE PTR BACK
U 3264, 2070,3440,0303,1174,4006,6701,1400,0073,1444	; 7037		FE_P, DISP/EAMODE	;SAVE P FOR CMPDST
							; 7038	=100*
U 2070, 2720,0553,0300,2274,4007,0701,0200,0004,0712	; 7039	DSTEA:	VMA_[AR]+XR, START READ, PXCT BYTE DATA, 3T, J/BYTFET
U 2072, 2720,3443,0300,4174,4007,0700,0200,0004,0712	; 7040		VMA_[AR], START READ, PXCT BYTE DATA, J/BYTFET
U 2074, 3265,0553,0300,2274,4007,0701,0200,0004,0612	; 7041		VMA_[AR]+XR, START READ, PXCT/BIS-DST-EA, 3T, J/DSTIND
U 2076, 3265,3443,0300,4174,4007,0700,0200,0004,0612	; 7042		VMA_[AR], START READ, PXCT/BIS-DST-EA, J/DSTIND
							; 7043	
U 3265, 3266,3771,0003,4361,5217,0700,0200,0000,0602	; 7044	DSTIND:	MEM READ, [AR]_MEM, HOLD LEFT, LOAD DST EA
U 3266, 2070,4443,0000,2174,4006,6700,0000,0000,0000	; 7045		EA MODE DISP, J/DSTEA
							; 7046	
							; 7047	
							; 7048	;HERE TO TEST ILLEGAL BITS SET
							; 7049	;CALL WITH:
							; 7050	;	SKIP IF ALL BITS LEGAL
							; 7051	;	RETURN [4] IF OK, ELSE DO UUO
							; 7052	;
							; 7053	3556:		;EXTEND OF 0 COMES HERE
U 3556, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7054	BITCHK:	UUO
U 3557, 0004,4443,0000,4174,4004,1700,0000,0000,0000	; 7055	3557:	RETURN [4]
							; 7056	
							; 7057	;HERE TO PUT FILL IN [AR] AND WORK[FILL]
							; 7058	GTFILL:	MEM READ,		;WAIT FOR DATA
U 3267, 3270,3771,0003,4365,5007,0700,0200,0000,0002	; 7059		[AR]_MEM		;PLACE IN AR
							; 7060		WORK[FILL]_[AR],	;SAVE FOR LATER
U 3270, 0010,3333,0003,7174,4004,1700,0400,0000,0244	; 7061		RETURN [10]		;RETURN TO CALLER
							; 7062	
							; 7063	;SUBROUTINE TO CLEAR FLAGS IN AR
							; 7064	CLRFLG:	[AR]_[AR].AND.#,	;CLEAR FLAGS IN AR
							; 7065		#/000777,		; ..
U 3271, 0001,4551,0303,4374,0004,1700,0000,0000,0777	; 7066		HOLD RIGHT, RETURN [1]
							; 7067	
							; 7068	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 164
; DSK: KSHACK; EXTEND 3	14:55:56 25-SEPT-84	EXTEND -- PAGE FAIL CLEANUP

							; 7069	.TOC	"EXTEND -- PAGE FAIL CLEANUP"
							; 7070	
							; 7071	;BACK UP SOURCE POINTER
							; 7072	=0
							; 7073	BACKS:	[AR]_AC[SRCP],
U 2120, 3304,3771,0003,1276,6007,0701,0010,0000,1441	; 7074		CALL [BACKBP]		;BACKUP BP
U 2121, 3567,3440,0505,1174,4007,0700,0400,0000,1441	; 7075		AC[SRCP]_[BR], J/CLDISP
							; 7076	
U 3272, 3273,3771,0003,7274,4007,0701,0000,0000,0214	; 7077	CMSDST:	[AR]_WORK[SV.BRX]	;GET OLD SRC LEN
U 3273, 2122,0113,0703,0174,4007,0701,0400,0000,0000	; 7078		AC_[AR]+1, 3T		;BACK UP
							; 7079	;BACK UP DESTINATION POINTER
							; 7080	=0
							; 7081	BACKD:	[AR]_AC[DSTP],
U 2122, 3304,3771,0003,1276,6007,0701,0010,0000,1444	; 7082		CALL [BACKBP]
U 2123, 3567,3440,0505,1174,4007,0700,0400,0000,1444	; 7083		AC[DSTP]_[BR], J/CLDISP
							; 7084	
							; 7085	;FAILURES DURING MOVE STRING (BACKUP LENGTHS)
U 3274, 3275,1771,0003,7274,4007,0701,4000,0000,0242	; 7086	STRPF:	[AR]_-WORK[SLEN]	;GET AMOUNT LEFT
							; 7087	STRPF0:	[BR]_AC[DLEN], 4T,	;WHICH STRING IS LONGER?
U 3275, 2124,3771,0005,1276,6007,0522,0000,0000,1443	; 7088		SKIP DP0
							; 7089	=0
U 2124, 3277,3440,0303,1174,4007,0700,0400,0000,1443	; 7090	STRPF1:	AC[DLEN]_[AR], J/STPF1A	;SRC LONGER
U 2125, 2126,3441,0304,4174,4007,0700,0000,0000,0000	; 7091		[ARX]_[AR]		;COPY SRC LENGTH
							; 7092	=0	[ARX]_[ARX].OR.WORK[SV.BRX], ;REBUILD FLAGS
U 2126, 3474,3551,0404,7274,4007,0701,0010,0000,0214	; 7093		CALL [AC_ARX]		;RESET AC]SLEN]
U 2127, 3276,1111,0503,4174,4007,0700,4000,0000,0000	; 7094		[AR]_[AR]-[BR]		;MAKE DEST LEN
							; 7095	STRPF3:	AC[DLEN]_[AR],		;PUT BACK DEST LEN
U 3276, 3567,3440,0303,1174,4007,0700,0400,0000,1443	; 7096		J/CLDISP		;DO NEXT CLEANUP
							; 7097	
U 3277, 3301,0111,0503,4174,4007,0700,0000,0000,0000	; 7098	STPF1A:	[AR]_[AR]+[BR], J/STRPF2
							; 7099	
U 3300, 3301,1771,0003,7274,4007,0701,4000,0000,0242	; 7100	PFDBIN:	[AR]_-WORK[SLEN]	;RESTORE LENGTH
U 3301, 3302,3551,0303,7274,4007,0701,0000,0000,0214	; 7101	STRPF2:	[AR]_[AR].OR.WORK[SV.BRX]
U 3302, 3567,3440,0303,0174,4007,0700,0400,0000,0000	; 7102	PFGAC0:	AC_[AR], J/CLDISP	;PUT BACK SRC LEN AND FLAGS
							; 7103	
U 3303, 3275,7771,0003,7274,4007,0701,0000,0000,0242	; 7104	STRPF4:	[AR]_.NOT.WORK[SLEN], J/STRPF0
							; 7105	
							; 7106	BACKBP:	IBP DP, SCAD/A+B, SCADA/BYTE1, SCADB/SIZE, ;P_P+S
U 3304, 0001,3770,0305,4334,4014,1700,0000,0043,6000	; 7107		RETURN [1]
							; 7108	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 165
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	EXTEND -- PAGE FAIL CLEANUP

							; 7109	;;;-*-Fundamental-*-
							; 7110	
							; 7111	.TOC	"TRAPS"
							; 7112	
U 3305, 3306,3741,0104,4074,4007,0700,0000,0000,0000	; 7113	TRAP:	[ARX]_PC WITH FLAGS	;SAVE THE PC WHICH CAUSED THE
							; 7114		WORK[TRAPPC]_[ARX],	; TRAP
U 3306, 2130,3333,0004,7174,4007,0340,0400,0000,0425	; 7115		SKIP KERNEL		;SEE IF UBR OR EBR
							; 7116	=0	[AR]_[AR]+[UBR],	;ADDRESS OF INSTRUCTION
							; 7117		MEM READ,		;WAIT FOR PREFETCH TO GET INTO
							; 7118					; THE CACHE. MAY PAGE FAIL BUT
							; 7119					; THAT IS OK
							; 7120		START READ,		;START FETCH
							; 7121		VMA PHYSICAL,		;ABSOLUTE ADDRESSING
U 2130, 3307,0111,1103,4364,4007,0700,0200,0024,1016	; 7122		J/TRP1			;JOIN COMMON CODE
							; 7123	
							; 7124		[AR]_[AR]+[EBR],	;WE COME HERE IN EXEC MODE
							; 7125		MEM READ,		;WAIT FOR PREFETCH TO GET INTO
							; 7126					; THE CACHE. MAY PAGE FAIL BUT
							; 7127					; THAT IS OK
							; 7128		START READ,		;START FETCH
							; 7129		VMA PHYSICAL,		;ABSOLUTE ADDRESSING
U 2131, 3307,0111,1003,4364,4007,0700,0200,0024,1016	; 7130		J/TRP1			;JOIN COMMON CODE
							; 7131	
							; 7132	TRP1:	MEM READ, [HR]_MEM,	;PLACE INSTRUCTION IN HR
U 3307, 3310,3771,0002,4365,5617,0700,0200,0000,0002	; 7133		LOAD INST		;LOAD IR, XR, @
							; 7134		[HR].AND.#,		;TEST TO SEE IF THIS
							; 7135		#/700000, 3T,		; IS A UUO
U 3310, 2134,4553,0200,4374,4007,0321,0000,0070,0000	; 7136		SKIP ADL.EQ.0
							; 7137	=0	CHANGE FLAGS,		;NOT A UUO
							; 7138		HOLD USER/1,		;CLEAR TRAP FLAGS
U 2134, 2446,4443,0000,4174,4467,0700,0000,0001,0000	; 7139		J/XCT1			;DO THE INSTRUCTION
U 2135, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7140		UUO			;DO THE UUO
							; 7141	
							; 7142	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 166
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES

							; 7143	.TOC	"IO -- INTERNAL DEVICES"
							; 7144	
							; 7145		.DCODE
D 0700, 1200,1700,4100					; 7146	700:	IOT,AC DISP,	J/GRP700
D 0701, 1200,1720,4100					; 7147		IOT,AC DISP,	J/GRP701
							; 7148		.UCODE
							; 7149	
U 1701, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7150	1701:	UUO		;DATAI APR,
U 1702, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7151	1702:	UUO		;BLKO APR,
U 1703, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7152	1703:	UUO		;DATAO APR,
U 1706, 3313,3771,0005,4304,4007,0701,0000,0000,0000	; 7153	1706:	[BR]_APR, J/APRSZ ;CONSZ APR,
U 1707, 3311,3771,0005,4304,4007,0701,0000,0000,0000	; 7154	1707:	[BR]_APR, J/APRSO ;CONSO APR,
							; 7155	1710:
U 1710, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7156	RDERA:	UUO		;BLKI PI,
U 1711, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7157	1711:	UUO		;DATAI PI,
U 1712, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7158	1712:	UUO		;BLKO PI,
U 1713, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7159	1713:	UUO		;DATAO PI,
U 1716, 3314,3441,1405,4174,4007,0700,0000,0000,0000	; 7160	1716:	[BR]_[PI], J/CONSZ ;CONSZ PI,
U 1717, 3312,3441,1405,4174,4007,0700,0000,0000,0000	; 7161	1717:	[BR]_[PI], J/CONSO ;CONSO PI,
							; 7162	
							; 7163	.IFNOT/ITS
							; 7164	1720:
							; 7165	GRP701:	UUO		;BLKI PAG,
							; 7166	.ENDIF/ITS
U 1726, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7167	1726:	UUO		;CONSZ PAG,
U 1727, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7168	1727:	UUO		;CONSO PAG,
							; 7169	
							; 7170	;680I AND CACHE SWEEP STUFF
U 1730, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7171	1730:	UUO		;BLKI
U 1731, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7172	1731:	UUO		;DATAI
U 1732, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7173	1732:	UUO		;BLKO
U 1733, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7174	1733:	UUO		;DATAO
U 1734, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7175	1734:	UUO		;CONO
U 1735, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7176	1735:	UUO		;CONI
U 1736, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7177	1736:	UUO		;CONSZ
U 1737, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7178	1737:	UUO		;CONSO
							; 7179	
U 3311, 3312,4251,0505,4374,4007,0700,0000,0000,7770	; 7180	APRSO:	[BR]_[BR].AND.# CLR LH, #/7770
U 3312, 0014,4113,0305,4174,4007,0330,0000,0000,0000	; 7181	CONSO:	[BR].AND.[AR], SKIP ADR.EQ.0, J/SKIP
							; 7182	
U 3313, 3314,4251,0505,4374,4007,0700,0000,0000,7770	; 7183	APRSZ:	[BR]_[BR].AND.# CLR LH, #/7770
U 3314, 1400,4113,0305,4174,4007,0330,0000,0000,0000	; 7184	CONSZ:	[BR].AND.[AR], SKIP ADR.EQ.0, J/DONE
							; 7185	
							; 7186	1700:
							; 7187	GRP700:
							; 7188	APRID:	[BR]_#,
							; 7189		HARDWARE OPTIONS/HWOPT,
U 1700, 0137,3771,0005,4374,4007,0700,0000,0000,3301	; 7190		HARDWARE SERIAL NUMBER/HWSER
							; 7191	137:	[BR]_#,
							; 7192		MICROCODE OPTIONS/OPT,
							; 7193		MICROCODE VERSION/UCV,
							; 7194		HOLD RIGHT,
U 0137, 3414,3771,0005,4374,0007,0700,0000,0002,0403	; 7195		J/RTNREG
							; 7196	
							; 7197	1704:
U 1704, 3315,3771,0005,7274,4007,0701,0000,0000,0230	; 7198	WRAPR:	[BR]_WORK[APR]
							; 7199		[BR]_[BR].AND.NOT.#,	;CLEAR THE OLD PIA
U 3315, 3316,5551,0505,4370,4007,0700,0000,0000,0007	; 7200		#/7, HOLD LEFT		; ..
U 3316, 3317,4551,0304,4374,4007,0700,0000,0000,0007	; 7201		[ARX]_[AR].AND.#, #/7	;PUT NEW PIA IN ARX
U 3317, 3320,3111,0405,4174,4007,0700,0000,0000,0000	; 7202		[BR]_[BR].OR.[ARX]	;PUT NEW PIA IN BR
							; 7203		[ARX]_[AR].AND.#, 	;MASK THE DATA BITS
U 3320, 3321,4551,0304,4374,4007,0700,0000,0000,7760	; 7204		#/007760		; DOWN TO ENABLES
U 3321, 2140,4553,0300,4374,4007,0331,0000,0010,0000	; 7205		TR [AR], #/100000	;WANT TO ENABLE ANY?
U 2140, 2141,3111,0405,4174,4007,0700,0000,0000,0000	; 7206	=0	[BR]_[BR].OR.[ARX]	;YES--SET THEM
U 2141, 2142,4553,0300,4374,4007,0331,0000,0004,0000	; 7207		TR [AR], #/40000	;WANT TO DISABLE ANY?
U 2142, 2143,5111,0405,4174,4007,0700,0000,0000,0000	; 7208	=0	[BR]_[BR].AND.NOT.[ARX]	;YES--CLEAR THEM
U 2143, 3322,3771,0006,4304,4007,0701,0000,0000,0000	; 7209		[BRX]_APR		;GET CURRENT STATUS
U 3322, 2144,4553,0300,4374,4007,0331,0000,0002,0000	; 7210		TR [AR], #/20000	;WANT TO CLEAR FLAGS?
U 2144, 2145,5111,0406,4174,4007,0700,0000,0000,0000	; 7211	=0	[BRX]_[BRX].AND.NOT.[ARX] ;YES--CLEAR BITS
U 2145, 2146,4553,0300,4374,4007,0331,0000,0001,0000	; 7212		TR [AR], #/10000	;WANT TO SET ANY FLAGS?
U 2146, 2147,3111,0406,4174,4007,0700,0000,0000,0000	; 7213	=0	[BRX]_[BRX].OR.[ARX]	;YES--SET FLAGS
U 2147, 2150,4553,0300,4374,4007,0331,0000,0003,0000	; 7214		TR [AR], #/30000	;ANY CHANGE AT ALL?
							; 7215	=0	READ [BRX],		;YES--LOAD NEW FLAGS
U 2150, 3325,3333,0006,4174,4007,0700,0000,0000,0000	; 7216		J/WRAPR2		;TURN OFF INTERRUPT 8080
U 2151, 3323,3333,0005,4174,4007,0700,0000,0000,0000	; 7217	WRAPR1:	READ [BR]		;FIX DPM TIMING BUG
							; 7218		READ [BR], 		;ENABLE CONDITIONS
U 3323, 3324,3333,0005,4174,4257,0700,0000,0000,0000	; 7219		SET APR ENABLES
							; 7220		WORK[APR]_[BR],		;SAVE FOR RDAPR
U 3324, 1400,3333,0005,7174,4007,0700,0400,0000,0230	; 7221		J/DONE			;ALL DONE
							; 7222	
							; 7223	WRAPR2:	READ [BRX], 		;LOAD NEW FLAGS
U 3325, 3326,3333,0006,4174,4237,0700,0000,0000,0000	; 7224		SPEC/APR FLAGS		; ..
							; 7225		[BRX]_[BRX].AND.NOT.#,	;CLEAR INTERRUPT THE 8080
U 3326, 3327,5551,0606,4370,4007,0700,0000,0000,2000	; 7226		#/002000, HOLD LEFT	; FLAG
							; 7227		READ [BRX], 		;LOAD NEW FLAGS
							; 7228		SPEC/APR FLAGS,		; ..
U 3327, 2151,3333,0006,4174,4237,0700,0000,0000,0000	; 7229		J/WRAPR1		;LOOP BACK
							; 7230	
							; 7231	1705:
U 1705, 3330,3771,0005,7274,4007,0701,0000,0000,0230	; 7232	RDAPR:	[BR]_WORK[APR]
							; 7233		[BR]_[BR] SWAP,		;PUT ENABLES IN BOTH
U 3330, 3331,3770,0505,4344,0007,0700,0000,0000,0000	; 7234		HOLD RIGHT		; HALVES
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 167
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES

							; 7235		[BR]_[BR].AND.#,	;SAVE ENABLES IN LH
							; 7236		#/7760,			;
U 3331, 3332,4551,0505,4374,0007,0700,0000,0000,7760	; 7237		HOLD RIGHT
							; 7238		[BR]_[BR].AND.#,	;SAVE PIA IN RH
							; 7239		#/7,
U 3332, 3333,4551,0505,4370,4007,0700,0000,0000,0007	; 7240		HOLD LEFT
U 3333, 3334,3771,0004,4304,4007,0701,0000,0000,0000	; 7241		[ARX]_APR		;READ THE APR FLAGS
							; 7242		[ARX]_[ARX].AND.# CLR LH, ;MASK OUT JUNK
U 3334, 3335,4251,0404,4374,4007,0700,0000,0000,7770	; 7243		#/007770		;KEEP 8 FLAGS
							; 7244		[BR]_[BR].OR.[ARX],	;MASH THE STUFF TOGETHER
U 3335, 3414,3111,0405,4174,4007,0700,0000,0000,0000	; 7245		J/RTNREG		;RETURN
							; 7246	
							; 7247	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 168
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES -- EBR & UBR

							; 7248	.TOC	"IO -- INTERNAL DEVICES -- EBR & UBR"
							; 7249	
							; 7250	.IF/ITS
							; 7251	1723:
U 1723, 3336,3443,0300,4174,4007,0700,0200,0004,0012	; 7252	WRUBR:	VMA_[AR], START READ
							; 7253		MEM READ, [AR]_MEM,
U 3336, 2152,3771,0003,4365,5007,0521,0200,0000,0002	; 7254		 3T, SKIP DP0		; Load AC blocks?
							; 7255	=0	[AR]_[AR].AND.#,	; No:  Clear those bits in argument.
							; 7256		 #/100003,
							; 7257		 HOLD RIGHT,
U 2152, 3337,4551,0303,4374,0007,0700,0000,0010,0003	; 7258		 J/WRUBR1
							; 7259		[UBR]_[UBR].AND.#,	; Yes:  Clear those bits in UBR.
							; 7260		 #/100003,
U 2153, 3337,4551,1111,4374,0007,0700,0000,0010,0003	; 7261		 HOLD RIGHT
U 3337, 2154,4553,0300,4374,4007,0321,0000,0010,0000	; 7262	WRUBR1:	TL [AR], #/100000	; Set base address?
							; 7263	=0	[UBR]_[UBR].AND.# CLR RH,	; Yes:  Clear those bits in UBR.
							; 7264		 #/407700,
U 2154, 3340,4521,1111,4374,4007,0700,0000,0040,7700	; 7265		 J/WRUBR2
							; 7266		[AR]_[AR].AND.# CLR RH,	; No:  Clear those bits in argument.
U 2155, 3340,4521,0303,4374,4007,0700,0000,0040,7700	; 7267		 #/407700
							; 7268	WRUBR2:	[UBR]_[UBR].OR.[AR],	; Put it all together
							; 7269		 LOAD AC BLOCKS,	; and tell the hardware.
U 3340, 2236,3111,0311,4174,4477,0700,0000,0000,0000	; 7270		 J/SWEEP
							; 7271	
							; 7272	.IFNOT/ITS
							; 7273	1723:
							; 7274	WRUBR:	VMA_[AR],		;LOAD E INTO VMA
							; 7275		 START READ		;START MEMORY
							; 7276		MEM READ,		;WAIT FOR DATA
							; 7277		 [AR]_MEM, 3T,		;PUT IT INTO THE AR
							; 7278		 SKIP DP0		;SEE IF WE WANT TO LOAD
							; 7279					; AC BLOCK NUMBERS
							; 7280	=0	[AR]_[AR].AND.#,	;NO--CLEAR JUNK IN AR
							; 7281		 #/100000,		; LEAVE ONLY LOAD UBR
							; 7282		 HOLD RIGHT,		; IN LEFT HALF
							; 7283		 SKIP ADL.EQ.0, 3T,	;SEE IF WE WANT TO LOAD
							; 7284		 J/ACBSET		;SKIP AROUND UBR LOAD
							; 7285		[UBR]_[UBR].AND.#,	;MASK OUT THE OLD
							; 7286		 #/770077,		; AC BLOCK NUMBERS
							; 7287		 HOLD RIGHT		;IN THE LEFT HALF
							; 7288		[AR].AND.#,		;SEE IF WE WANT TO LOAD
							; 7289		 #/100000, 3T,		; UBR ALSO
							; 7290		 SKIP ADL.EQ.0
							; 7291	=0
							; 7292	ACBSET: [BR]_[AR].AND.#,	;COPY UBR PAGE NUMBER
							; 7293		 #/17777,		; INTO BR
							; 7294		 J/SETUBR		;GO LOAD UBR
							; 7295		[UBR]_[UBR].OR.[AR],	;DO NOT LOAD UBR
							; 7296					; PUT AC BLOCK # IN
							; 7297		 HOLD RIGHT,		; THE LEFT HALF
							; 7298		 LOAD AC BLOCKS,	;LOAD HARDWARE
							; 7299		 J/DONE			;ALL DONE
							; 7300	
							; 7301	SETUBR: [BR]_0, 		;CLEAR BR LEFT
							; 7302		 SC_7,			;PUT THE COUNT IN SC
							; 7303		 HOLD RIGHT
							; 7304	=0
							; 7305	STUBRS: [BR]_[BR]*2,		;SHIFT BR OVER
							; 7306		 STEP SC,		; 9 PLACES
							; 7307		 J/STUBRS
							; 7308		[UBR]_[UBR].AND.#,	;MASK OUT OLD UBR
							; 7309		 #/777774,		; BITS IN
							; 7310		 HOLD RIGHT		; LEFT HALF
							; 7311		[UBR]_0,		;CLEAR RIGHT HALF
							; 7312		 HOLD LEFT
							; 7313		[UBR]_[UBR].OR.[BR]	;PUT IN PAGE TABLE ADDRESS
							; 7314		[UBR]_[UBR].OR.[AR],	;PUT IN AC BLOCK #
							; 7315		 HOLD RIGHT,		; IN LEFT HALF
							; 7316		 LOAD AC BLOCKS,	;TELL HARDWARE
							; 7317		 J/SWEEP		;CLEAR CACHE
							; 7318	.ENDIF/ITS
							; 7319	
							; 7320	1724:
U 1724, 2156,3445,0303,4174,4007,0700,2000,0071,0006	; 7321	WREBR:	[AR]_[AR]*2, SC_6
							; 7322	=0
U 2156, 2156,3445,0303,4174,4007,0630,2000,0060,0000	; 7323	WREBR1:	[AR]_[AR]*2, STEP SC, J/WREBR1
							; 7324	.IF/FULL			;DO NOT ENABLE PAGING IN SMALL
							; 7325					; MICROCODE.
U 2157, 3341,3771,0005,7274,4007,0701,0000,0000,0230	; 7326		[BR]_WORK[APR]
U 3341, 3342,4551,0505,4370,4007,0700,0000,0074,7777	; 7327		[BR]_[BR].AND.#, #/747777, HOLD LEFT
U 3342, 2160,4553,0300,4374,4007,0321,0000,0000,0020	; 7328		[AR].AND.#, #/20, 3T, SKIP ADL.EQ.0
U 2160, 2161,3551,0505,4370,4007,0700,0000,0003,0000	; 7329	=0	[BR]_[BR].OR.#, #/030000, HOLD LEFT
U 2161, 3343,3333,0005,4174,4257,0700,0000,0000,0000	; 7330		READ [BR], SET APR ENABLES
U 3343, 3344,3333,0005,7174,4007,0700,0400,0000,0230	; 7331		WORK[APR]_[BR]
							; 7332	.ENDIF/FULL
U 3344, 3345,3441,0310,4174,4007,0700,0000,0000,0000	; 7333		[EBR]_[AR]
U 3345, 2162,4553,1000,4374,4007,0321,0000,0000,0040	; 7334		[EBR].AND.#, #/40, 3T, SKIP ADL.EQ.0
U 2162, 2236,3551,1010,4374,0007,0700,0000,0040,0000	; 7335	=0	[EBR]_[EBR].OR.#, #/400000, HOLD RIGHT, J/SWEEP
U 2163, 2236,5551,1010,4374,0007,0700,0000,0040,0000	; 7336		[EBR]_[EBR].AND.NOT.#, #/400000, HOLD RIGHT, J/SWEEP
							; 7337	
							; 7338	1725:
U 1725, 2164,3447,1005,4174,4007,0700,2000,0071,0006	; 7339	RDEBR:	[BR]_[EBR]*.5, SC_6
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 169
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES -- EBR & UBR

							; 7340	=0
U 2164, 2164,3447,0505,4174,4007,0630,2000,0060,0000	; 7341	RDEBR1:	[BR]_[BR]*.5, STEP SC, J/RDEBR1
U 2165, 3346,4551,0505,4374,4007,0700,0000,0006,3777	; 7342		[BR]_[BR].AND.#, #/63777 ;MASK TO JUST EBR
							; 7343		[BR]_0,			;CLEAR LEFT HALF
							; 7344		HOLD RIGHT,		; BITS
U 3346, 3414,4221,0005,4174,0007,0700,0000,0000,0000	; 7345		J/RTNREG		;RETURN ANSWER
							; 7346	
							; 7347	.IF/ITS
							; 7348	1721:
U 1721, 3347,3441,1105,4174,4007,0700,0000,0000,0000	; 7349	RDUBR:	[BR]_[UBR]
							; 7350		[BR]_[BR].AND.#,
							; 7351		 #/507703,
							; 7352		 HOLD RIGHT,
U 3347, 3414,4551,0505,4374,0007,0700,0000,0050,7703	; 7353		 J/RTNREG
							; 7354	
U 3350, 3351,3441,1105,4174,4007,0700,0000,0000,0000	; 7355	GETPCW:	[BR]_[UBR]
							; 7356		[BR]_[BR].AND.#,
							; 7357		 #/507703,
							; 7358		 HOLD RIGHT,
U 3351, 0001,4551,0505,4374,0004,1700,0000,0050,7703	; 7359		 RETURN [1]
							; 7360	
							; 7361	.IFNOT/ITS
							; 7362	1721:	
							; 7363	RDUBR:	[BR]_[UBR]
							; 7364	=0	[BRX]_[BR]*.5, SC_6, CALL [GTPCW1]
							; 7365		[BR]_[BR].AND.#,	;JUST RETURN USEFUL
							; 7366		#/507700, HOLD RIGHT,	; BITS
							; 7367		J/RTNREG
							; 7368	
							; 7369	
							; 7370	GETPCW:	[BR]_[UBR]
							; 7371		[BRX]_[BR]*.5, SC_6
							; 7372	=0
							; 7373	GTPCW1:	[BRX]_[BRX]*.5, STEP SC, J/GTPCW1
							; 7374		[BRX]_[BRX].AND.#, #/17777
							; 7375		[BR]_[BRX], HOLD LEFT, RETURN [1]
							; 7376	.ENDIF/ITS
							; 7377	
							; 7378	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 170
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES -- KL PAGING REGISTERS

							; 7379	.TOC	"IO -- INTERNAL DEVICES -- KL PAGING REGISTERS"
							; 7380	
							; 7381		.DCODE
D 0702, 1216,1760,4700					; 7382	702:	IOT,AC DISP,	M,	J/GRP702
							; 7383		.UCODE
							; 7384	
							; 7385	.IF/ITS
							; 7386	1760:
							; 7387	GRP702:
U 1760, 3414,3771,0005,7274,4007,0701,0000,0000,0215	; 7388	SDBR1:	[BR]_WORK[DBR1], J/RTNREG
							; 7389	1761:
U 1761, 3414,3771,0005,7274,4007,0701,0000,0000,0216	; 7390	SDBR2:	[BR]_WORK[DBR2], J/RTNREG
							; 7391	1762:
U 1762, 3414,3771,0005,7274,4007,0701,0000,0000,0217	; 7392	SDBR3:	[BR]_WORK[DBR3], J/RTNREG
							; 7393	1763:
U 1763, 3414,3771,0005,7274,4007,0701,0000,0000,0220	; 7394	SDBR4:	[BR]_WORK[DBR4], J/RTNREG
							; 7395	.IFNOT/ITS
							; 7396	1760:
							; 7397	GRP702:
							; 7398	RDSPB:	[BR]_WORK[SBR], J/RTNREG
							; 7399	1761:
							; 7400	RDCSB:	[BR]_WORK[CBR], J/RTNREG
							; 7401	1762:
							; 7402	RDPUR:	[BR]_WORK[PUR], J/RTNREG
							; 7403	1763:
							; 7404	RDCSTM:	[BR]_WORK[CSTM], J/RTNREG
							; 7405	.ENDIF/ITS
							; 7406	
							; 7407	1766:
U 1766, 3414,3771,0005,7274,4007,0701,0000,0000,0227	; 7408	RDHSB:	[BR]_WORK[HSBADR], J/RTNREG
							; 7409	
							; 7410	.IFNOT/ITS
							; 7411	1767:	UUO
							; 7412	.IF/ITS
							; 7413	1767:
U 1767, 3352,3771,0004,7274,4007,0701,0000,0000,0215	; 7414	SPM:	[ARX]_WORK[DBR1]
U 3352, 3353,3443,0300,4174,4007,0700,0200,0003,0012	; 7415		VMA_[AR], START WRITE
U 3353, 2166,3333,0004,4175,5007,0701,0200,0000,0002	; 7416		MEM WRITE, MEM_[ARX]
U 2166, 3354,3771,0004,7274,4007,0701,0010,0000,0216	; 7417	=0	[ARX]_WORK[DBR2], CALL [SPM-NEXT]
U 2167, 2170,3333,0004,4175,5007,0701,0200,0000,0002	; 7418		MEM WRITE, MEM_[ARX]
U 2170, 3354,3771,0004,7274,4007,0701,0010,0000,0304	; 7419	=0	[ARX]_WORK[QUAN], CALL [SPM-NEXT]
							; 7420	.IFNOT/JPC
U 2171, 1400,3333,0004,4175,5007,0701,0200,0000,0002	; 7421		MEM WRITE, MEM_[ARX], J/DONE
							; 7422	.IF/JPC
							; 7423		MEM WRITE, MEM_[ARX]
							; 7424	=0	[ARX]_WORK[U.JPC], CALL [SPM-NEXT]
							; 7425		MEM WRITE, MEM_[ARX]
							; 7426	=0	[ARX]_WORK[E.JPC], CALL [SPM-NEXT]
							; 7427		MEM WRITE, MEM_[ARX], J/DONE
							; 7428	.ENDIF/JPC
							; 7429	=
							; 7430	
							; 7431	SPM-NEXT:
U 3354, 0001,0111,0703,4170,4004,1700,0200,0003,0012	; 7432		[AR]_[AR]+1, LOAD VMA, HOLD LEFT, START WRITE, RETURN [1]
							; 7433	
							; 7434	.ENDIF/ITS
							; 7435	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 171
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES -- KL PAGING REGISTERS

							; 7436	
							; 7437	.IF/ITS
							; 7438	;;; These guys could be careful and only sweep half of the page table (but all
							; 7439	;;; of the cache).
							; 7440	1770:
U 1770, 2236,3333,0003,7174,4007,0700,0400,0000,0215	; 7441	LDBR1:	WORK[DBR1]_[AR], J/SWEEP
							; 7442	1771:
U 1771, 2236,3333,0003,7174,4007,0700,0400,0000,0216	; 7443	LDBR2:	WORK[DBR2]_[AR], J/SWEEP
							; 7444	1772:
U 1772, 2236,3333,0003,7174,4007,0700,0400,0000,0217	; 7445	LDBR3:	WORK[DBR3]_[AR], J/SWEEP
							; 7446	1773:
U 1773, 2236,3333,0003,7174,4007,0700,0400,0000,0220	; 7447	LDBR4:	WORK[DBR4]_[AR], J/SWEEP
							; 7448	.IFNOT/ITS
							; 7449	1770:
							; 7450	WRSPB:	START READ
							; 7451		MEM READ, [AR]_MEM
							; 7452		WORK[SBR]_[AR], J/DONE
							; 7453	1771:
							; 7454	WRCSB:	START READ
							; 7455		MEM READ, [AR]_MEM
							; 7456		WORK[CBR]_[AR], J/DONE
							; 7457	1772:
							; 7458	WRPUR:	START READ
							; 7459		MEM READ, [AR]_MEM
							; 7460		WORK[PUR]_[AR], J/DONE
							; 7461	1773:
							; 7462	WRCSTM:	START READ
							; 7463		MEM READ, [AR]_MEM
							; 7464		WORK[CSTM]_[AR], J/DONE
							; 7465	.ENDIF/ITS
							; 7466	
							; 7467	1776:
U 1776, 3355,4443,0000,4174,4007,0700,0200,0004,0002	; 7468	WRHSB:	START READ
U 3355, 3356,3771,0003,4365,5007,0700,0200,0000,0002	; 7469		MEM READ, [AR]_MEM
U 3356, 1400,3333,0003,7174,4007,0700,0400,0000,0227	; 7470		WORK[HSBADR]_[AR], J/DONE
							; 7471	
							; 7472	.IFNOT/ITS
							; 7473	1777:	UUO
							; 7474	.IF/ITS
							; 7475	1777:
U 1777, 3357,4443,0000,4174,4007,0700,0200,0004,0002	; 7476	LPMR:	START READ
U 3357, 3360,3771,0004,4365,5007,0700,0200,0000,0002	; 7477		MEM READ, [ARX]_MEM
U 3360, 2172,3333,0004,7174,4007,0700,0400,0000,0215	; 7478		WORK[DBR1]_[ARX]
							; 7479	=0	[AR]_[AR]+1, LOAD VMA, HOLD LEFT, START READ,
U 2172, 3463,0111,0703,4170,4007,0700,0210,0004,0012	; 7480		 CALL [LOADARX]
U 2173, 2174,3333,0004,7174,4007,0700,0400,0000,0216	; 7481		WORK[DBR2]_[ARX]
							; 7482	=0	[AR]_[AR]+1, LOAD VMA, HOLD LEFT, START READ,
U 2174, 3463,0111,0703,4170,4007,0700,0210,0004,0012	; 7483		 CALL [LOADARX]
							; 7484	.IFNOT/JPC
U 2175, 2236,3333,0004,7174,4007,0700,0400,0000,0304	; 7485		WORK[QUAN]_[ARX], J/SWEEP
							; 7486	.IF/JPC
							; 7487		WORK[QUAN]_[ARX]
							; 7488	=0	[AR]_[AR]+1, LOAD VMA, HOLD LEFT, START READ,
							; 7489		 CALL [LOADARX]
							; 7490		WORK[U.JPC]_[ARX]
							; 7491	=0	[AR]_[AR]+1, LOAD VMA, HOLD LEFT, START READ,
							; 7492		 CALL [LOADARX]
							; 7493		WORK[E.JPC]_[ARX], J/SWEEP
							; 7494	.ENDIF/JPC
							; 7495	=
							; 7496	.ENDIF/ITS
							; 7497	
							; 7498	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 172
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES -- TIMER CONTROL

							; 7499	.TOC	"IO -- INTERNAL DEVICES -- TIMER CONTROL"
							; 7500	
							; 7501	
U 3361, 3362,4751,1205,4374,4007,0700,0000,0001,0000	; 7502	TOCK:	[BR]_0 XWD [10000]	;2^12 UNITS PER MS
U 3362, 3363,0111,0503,4174,4007,0700,0000,0000,0000	; 7503		[AR]_[AR]+[BR]		;INCREMENT THE TIMER
U 3363, 2176,3770,0303,4174,0007,0520,0000,0000,0000	; 7504		FIX [AR] SIGN, SKIP DP0	;SEE IF IT OVERFLOWED
							; 7505	=0
							; 7506	TOCK1:	WORK[TIME1]_[AR],	;STORE THE NEW TIME
U 2176, 3364,3333,0003,7174,4007,0700,0400,0000,0301	; 7507		 J/TOCK2		;SKIP OVER THE OVERFLOW CODE
U 2177, 2060,3771,0003,7274,4007,0701,0000,0000,0300	; 7508		[AR]_WORK[TIME0]	;GET HIGH WORD
							; 7509	=0*	[AR]_[AR]+1,		;BUMP IT
U 2060, 3373,0111,0703,4174,4007,0700,0010,0000,0000	; 7510		 CALL [WRTIM1]		;STORE BACK IN RAM
							; 7511		[AR]_0,			;CAUSE LOW WORD WORD
U 2062, 2176,4221,0003,4174,4007,0700,0000,0000,0000	; 7512		 J/TOCK1		; TO GET STORED
							; 7513	
							; 7514	.IF/ITS
							; 7515	TOCK2:	TR [PI], PI.IP1/1,	;PI in progress?
							; 7516		 PI.IP2/1, PI.IP3/1,
							; 7517		 PI.IP4/1, PI.IP5/1,
U 3364, 2200,4553,1400,4374,4007,0331,0000,0007,7400	; 7518		 PI.IP6/1, PI.IP7/1
							; 7519	=0
							; 7520	TOCK3:	[AR]_WORK[TTG],		;Yes: Skip quantum counter.
U 2200, 3366,3771,0003,7274,4007,0701,0000,0000,0303	; 7521		 J/TOCK4
U 2201, 3365,0551,0503,7274,4007,0701,0000,0000,0304	; 7522		[AR]_[BR]+WORK[QUAN]	;No: Increment quantum counter.
							; 7523	=	WORK[QUAN]_[AR],
U 3365, 2200,3333,0003,7174,4007,0700,0400,0000,0304	; 7524		 J/TOCK3
							; 7525	
							; 7526	TOCK4:	[AR]_[AR]-[BR],		;COUNT DOWN TIME TO GO
U 3366, 2202,1111,0503,4174,4007,0421,4000,0000,0000	; 7527		 SKIP AD.LE.0		;SEE IF IT TIMED OUT
							; 7528	=0
							; 7529	TOCK5:	WORK[TTG]_[AR],		;SAVE NEW TIME TO GO
U 2202, 0002,3333,0003,7174,4004,1700,0400,0000,0303	; 7530		 RETURN [2]		;ALL DONE
U 2203, 3367,0551,0303,7274,4007,0701,0000,0000,0302	; 7531		[AR]_[AR]+WORK[PERIOD]	;WHY THROW AWAY ALL THAT ACCURACY?
							; 7532	.IFNOT/ITS
							; 7533	TOCK2:	[AR]_WORK[TTG]
							; 7534		[AR]_[AR]-[BR],		;COUNT DOWN TIME TO GO
							; 7535		 SKIP AD.LE.0		;SEE IF IT TIMED OUT
							; 7536	=0
							; 7537	TOCK5:	WORK[TTG]_[AR],		;SAVE NEW TIME TO GO
							; 7538		 RETURN [2]		;ALL DONE
							; 7539		[AR]_WORK[PERIOD]
							; 7540	.ENDIF/ITS
U 3367, 3370,3771,0005,4304,4007,0701,0000,0000,0000	; 7541		[BR]_APR		;GET CURRENT FLAGS
U 3370, 3371,3551,0505,4374,4007,0700,0000,0000,0040	; 7542		[BR]_[BR].OR.#, #/40	;SET TIMER INTERRUPT FLAG
							; 7543		READ [BR],		;PLACE ON DP AND
							; 7544		 SPEC/APR FLAGS,	; LOAD INTO HARDWARE
U 3371, 2202,3333,0005,4174,4237,0700,0000,0000,0000	; 7545		 J/TOCK5		;ALL DONE
							; 7546	
							; 7547	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 173
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES -- WRTIME & RDTIME

							; 7548	.TOC	"IO -- INTERNAL DEVICES -- WRTIME & RDTIME"
							; 7549	
							; 7550	1774:
U 1774, 3372,4443,0000,4174,4007,0700,0200,0004,0002	; 7551	WRTIME:	START READ		;FETCH WORD AT E
							; 7552		MEM READ,		;WAIT FOR DATA
U 3372, 2204,3771,0003,4365,5007,0700,0200,0000,0002	; 7553		 [AR]_MEM		;PUT WORD IN AR
							; 7554	=00	VMA_[HR]+1,		;BUMP E
							; 7555		 START READ,		;START MEMORY
U 2204, 3463,0111,0702,4170,4007,0700,0210,0004,0012	; 7556		 CALL [LOADARX]		;PUT DATA IN ARX
							; 7557		[ARX]_[ARX].AND.#,	;CLEAR PART HELD IN
							; 7558		 #/770000,		; HARDWARE COUNTER
U 2205, 3373,4551,0404,4370,4007,0700,0010,0077,0000	; 7559		 HOLD LEFT,  CALL [WRTIM1]
							; 7560	=11	WORK[TIME1]_[ARX],	;IN WORK SPACE
U 2207, 1400,3333,0004,7174,4007,0700,0400,0000,0301	; 7561		 J/DONE			;NEXT INSTRUCTION
							; 7562	=
							; 7563	WRTIM1:	WORK[TIME0]_[AR],	;SAVE THE NEW VALUE
U 3373, 0002,3333,0003,7174,4004,1700,0400,0000,0300	; 7564		RETURN [2]
							; 7565	
							; 7566	1764:
U 1764, 3374,4451,1205,4324,4007,0700,0000,0000,0000	; 7567	RDTIME:	[BR]_TIME		;READ THE TIME
U 3374, 3375,4451,1204,4324,4007,0700,0000,0000,0000	; 7568		[ARX]_TIME		; AGAIN
U 3375, 3376,4451,1206,4324,4007,0700,0000,0000,0000	; 7569		[BRX]_TIME		; AGAIN
							; 7570		[BR].XOR.[ARX],		;SEE IF STABLE
U 3376, 2210,6113,0405,4174,4007,0621,0000,0000,0000	; 7571		 SKIP AD.EQ.0		; ..
U 2210, 2211,3441,0604,4174,4007,0700,0000,0000,0000	; 7572	=0	[ARX]_[BRX]		;NO THEN NEXT TRY MUST BE OK
U 2211, 3377,3771,0005,7274,4007,0701,0000,0000,0300	; 7573		[BR]_WORK[TIME0]
							; 7574		[ARX]_[ARX]+WORK[TIME1], ;COMBINE PARTS
U 3377, 2214,0551,0404,7274,4007,0671,0000,0000,0301	; 7575		 SKIP/-1 MS		;SEE IF OVERFLOW HAPPENED
							; 7576	=00	SPEC/CLRCLK,		;CLEAR CLOCK FLAG
							; 7577		 [AR]_WORK[TIME1], 2T,	;GET LOW WORD FOR TOCK
U 2214, 3361,3771,0003,7274,4117,0700,0010,0000,0301	; 7578		 CALL [TOCK]		;UPDATE CLOCKS
							; 7579		READ [HR], LOAD VMA,	;DID NOT OVERFLOW
U 2215, 3400,3333,0002,4174,4007,0700,0200,0003,0012	; 7580		 START WRITE, J/RDTIM1	;STORE ANSWER
U 2216, 1764,4443,0000,4174,4007,0700,0000,0000,0000	; 7581		J/RDTIME		;TRY AGAIN
							; 7582	=
U 3400, 3401,3333,0005,4175,5007,0701,0200,0000,0002	; 7583	RDTIM1:	MEM WRITE, MEM_[BR]
U 3401, 3402,0111,0702,4170,4007,0700,0200,0003,0012	; 7584		VMA_[HR]+1, LOAD VMA, START WRITE
U 3402, 1400,3333,0004,4175,5007,0701,0200,0000,0002	; 7585		MEM WRITE, MEM_[ARX], J/DONE
							; 7586	
							; 7587	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 174
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES -- WRINT & RDINT

							; 7588	.TOC	"IO -- INTERNAL DEVICES -- WRINT & RDINT"
							; 7589	
							; 7590	
							; 7591	1775:
U 1775, 3403,4443,0000,4174,4007,0700,0200,0004,0002	; 7592	WRINT:	START READ
U 3403, 3404,3771,0003,4365,5007,0700,0200,0000,0002	; 7593		MEM READ, [AR]_MEM
U 3404, 3405,3333,0003,7174,4007,0700,0400,0000,0302	; 7594		WORK[PERIOD]_[AR]
							; 7595		WORK[TTG]_[AR],
U 3405, 1400,3333,0003,7174,4007,0700,0400,0000,0303	; 7596		J/DONE
							; 7597	
							; 7598	1765:
							; 7599	RDINT:	[BR]_WORK[PERIOD],
U 1765, 3414,3771,0005,7274,4007,0701,0000,0000,0302	; 7600		J/RTNREG
							; 7601	
							; 7602	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 175
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES -- RDPI & WRPI

							; 7603	.TOC	"IO -- INTERNAL DEVICES -- RDPI & WRPI"
							; 7604	
							; 7605	1715:
U 1715, 3414,3441,1405,4174,4007,0700,0000,0000,0000	; 7606	RDPI:	[BR]_[PI], J/RTNREG
							; 7607	
							; 7608	1714:
U 1714, 2212,4553,0300,4374,4007,0331,0000,0001,0000	; 7609	WRPI:	TR [AR], PI.CLR/1
U 2212, 2213,4221,0014,4174,4007,0700,0000,0000,0000	; 7610	=0	[PI]_0
U 2213, 2220,4553,0300,4374,4007,0331,0000,0074,0000	; 7611		TR [AR], PI.MBZ/17
U 2220, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 7612	=0	UUO
U 2221, 3406,4551,0305,4374,4007,0700,0000,0000,0177	; 7613		[BR]_[AR].AND.#,#/177
U 3406, 3407,3770,0505,4344,0007,0700,0000,0000,0000	; 7614		[BR]_[BR] SWAP, HOLD RIGHT
U 3407, 2222,4553,0300,4374,4007,0331,0000,0002,0000	; 7615		TR [AR], PI.DIR/1
U 2222, 2223,5111,0514,4174,0007,0700,0000,0000,0000	; 7616	=0	[PI]_[PI].AND.NOT.[BR], HOLD RIGHT
U 2223, 2224,4553,0300,4374,4007,0331,0000,0000,4000	; 7617		TR [AR], PI.REQ/1
U 2224, 2225,3111,0514,4174,0007,0700,0000,0000,0000	; 7618	=0	[PI]_[PI].OR.[BR], HOLD RIGHT
U 2225, 2226,4553,0300,4374,4007,0331,0000,0000,0200	; 7619		TR [AR], PI.TSN/1
U 2226, 2227,3551,1414,4370,4007,0700,0000,0000,0200	; 7620	=0	[PI]_[PI].OR.#,PI.ON/1, HOLD LEFT
U 2227, 2230,4553,0300,4374,4007,0331,0000,0000,0400	; 7621		TR [AR], PI.TSF/1
U 2230, 2231,5551,1414,4370,4007,0700,0000,0000,0200	; 7622	=0	[PI]_[PI].AND.NOT.#,PI.ON/1, HOLD LEFT
U 2231, 2232,4553,0300,4374,4007,0331,0000,0000,2000	; 7623		TR [AR], PI.TCN/1
U 2232, 2233,3111,0514,4170,4007,0700,0000,0000,0000	; 7624	=0	[PI]_[PI].OR.[BR], HOLD LEFT
U 2233, 2240,4553,0300,4374,4007,0331,0000,0000,1000	; 7625		TR [AR], PI.TCF/1
U 2240, 2241,5111,0514,4170,4007,0700,0000,0000,0000	; 7626	=0**0	[PI]_[PI].AND.NOT.[BR], HOLD LEFT
U 2241, 3411,3770,1416,4344,4007,0700,0010,0000,0000	; 7627	PIEXIT:	CALL LOAD PI
							; 7628	=1**1
U 2251, 0070,3443,0100,4174,4156,4700,0200,0014,0012	; 7629		DONE
							; 7630	=
							; 7631	
							; 7632	;SUBROUTINE TO LOAD PI HARDWARE
							; 7633	;CALL WITH:
							; 7634	;	CALL LOAD PI
							; 7635	;RETURNS 10 WITH PI HARDWARE LOADED
							; 7636	;
U 3410, 3411,3770,1416,4344,4007,0700,0000,0000,0000	; 7637	LOADPI:	[T0]_[PI] SWAP		;PUT ACTIVE CHANS IN LH
U 3411, 3412,2441,0716,4170,4007,0700,4000,0000,0000	; 7638	LDPI2:	[T0]_-1, HOLD LEFT	;DONT MASK RH
U 3412, 3413,4111,1416,4174,4007,0700,0000,0000,0000	; 7639		[T0]_[T0].AND.[PI]	;ONLY REQUEST CHANS THAT ARE ON
							; 7640		.NOT.[T0], LOAD PI,	;RELOAD HARDWARE
U 3413, 0010,7443,1600,4174,4434,1700,0000,0000,0000	; 7641		 RETURN [10]		;RETURN TO CALLER
							; 7642	
							; 7643	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 176
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES -- SUBROUTINES

							; 7644	.TOC	"IO -- INTERNAL DEVICES -- SUBROUTINES"
							; 7645	
							; 7646	
							; 7647	;HERE WITH SOMETHING IN BR STORE IT @AR
U 3414, 3415,3443,0300,4174,4007,0700,0200,0003,0012	; 7648	RTNREG:	VMA_[AR], START WRITE
U 3415, 1400,3333,0005,4175,5007,0701,0200,0000,0002	; 7649		MEM WRITE, MEM_[BR], J/DONE
							; 7650	
							; 7651	;CACHE SWEEP
							; 7652	
							; 7653	1722:
							; 7654	CLRPT:	VMA_[AR],		;PUT CORRECT ADDRESS IN VMA
U 1722, 3416,3443,0300,4174,4147,0700,0200,0000,0010	; 7655		 LOAD PAGE TABLE	;GET SET TO WRITE PAGE TABLE
U 3416, 1720,4221,0003,4174,4007,0700,0000,0000,0000	; 7656		[AR]_0			;CLEAR ENTRY
							; 7657	.IF/ITS
							; 7658	1720:
							; 7659	GRP701:
U 1720, 3417,3771,0003,4374,4007,0700,0000,0037,7377	; 7660	CLRCSH:	[AR]_#, #/377377	;INITIAL VMA VALUE
U 3417, 3420,4443,0000,4174,4007,0700,2000,0071,0375	; 7661		SC_S#, S#/375		;LOAD THE SC WITH NUMBER OF STEPS
							; 7662	.IFNOT/ITS
							; 7663	=0	[AR]_#,#/377377,	;INITIAL VMA VALUE
							; 7664		 CALL [SSWEEP]		;LOAD THE SC
							; 7665	.ENDIF/ITS
							; 7666		[BR]_#, #/1001,		;CONSTANT TO KEEP ADDING
U 3420, 3421,3771,0005,4374,4247,0700,0000,0000,1001	; 7667		 CLRCSH			;START TO CLEAR CACHE
U 3421, 2234,3333,0003,4174,4247,0700,0000,0000,1000	; 7668		READ [AR], CLRCSH	;FIRST THING TO CLEAR
							; 7669	=0
							; 7670	CLRPTL:	[AR]_[AR]-[BR],		;UPDATE AR (AND PUT ON DP)
							; 7671		 CLRCSH,		;SWEEP ON NEXT STEP
							; 7672		 STEP SC,		;SKIP IF WE ARE DONE
U 2234, 2234,1111,0503,4174,4247,0630,6000,0060,1000	; 7673		 J/CLRPTL		;LOOP FOR ALL ENTRIES
							; 7674	.IFNOT/ITS
							; 7675		READ [AR], J/ZAPPTA	;CLEAR LAST ENTRY
							; 7676	.IF/ITS
U 2235, 1400,3333,0003,4174,4007,0700,0000,0000,0000	; 7677		READ [AR], J/DONE	;Clear last entry.
							; 7678	.ENDIF/ITS
							; 7679	
							; 7680	=0
							; 7681	SWEEP:	[AR]_#,#/377377,	;INITIAL VMA VALUE
U 2236, 3423,3771,0003,4374,4007,0700,0010,0037,7377	; 7682		 CALL [SSWEEP]		;LOAD NUMBER OF STEPS INTO SC
							; 7683		[BR]_#, #/1001,		;CONSTANT TO KEEP ADDING
U 2237, 3422,3771,0005,4374,4347,0700,0000,0000,1001	; 7684		 SWEEP			;START SWEEP
U 3422, 2242,3333,0003,4174,4347,0700,0000,0000,1000	; 7685		READ [AR], SWEEP	;FIRST THING TO CLEAR
							; 7686	=0
							; 7687	SWEEPL:	[AR]_[AR]-[BR],		;UPDATE AR (AND PUT ON DP)
							; 7688		 SWEEP,			;SWEEP ON NEXT STEP
							; 7689		 STEP SC,		;SKIP IF WE ARE DONE
U 2242, 2242,1111,0503,4174,4347,0630,6000,0060,1000	; 7690		 J/SWEEPL		;LOOP FOR ALL ENTRIES
							; 7691					;CLEAR LAST ENTRY AND
							; 7692	.IF/ITS
U 2243, 1400,4221,0003,4174,4007,0700,0000,0000,0000	; 7693		[AR]_0, J/DONE		;Clear last entry.
							; 7694	.IFNOT/ITS
							; 7695	ZAPPTA:	WORK[PTA.U]_0		; FORGET PAGE TABLE ADDRESS
							; 7696		WORK[PTA.E]_0,		;FORGET PAGE TABLE ADDRESS
							; 7697		 J/DONE			;ALL DONE
							; 7698	.ENDIF/ITS
							; 7699	
							; 7700	SSWEEP:	SC_S#, S#/375,		;NUMBER OF STEPS
U 3423, 0001,4443,0000,4174,4004,1700,2000,0071,0375	; 7701		RETURN [1]		;RETURN
							; 7702	
							; 7703	;WE COME HERE EITHER FROM NEXT INSTRUCTION DISPATCH OR PAGE FAIL
							; 7704	; LOGIC. IN ALL CASES, THE CURRENT INSTRUCTION IS CORRECTLY SETUP
							; 7705	; TO RESTART PROPERLY.
							; 7706	
							; 7707	;FIRST SET THE CORRECT PI IN PROGRESS BIT
							; 7708	;	[FLG]_[FLG].OR.#,FLG.PI/1, HOLD RIGHT,
							; 7709	;		J/PI		;SET PI CYCLE AND PROCESS PI
							; 7710	=1000
							; 7711	PI:	AD/D, DBUS/PI NEW,	;LOOK AT NEW LEVEL
							; 7712		DISP/DP LEFT, 3T,	;DISPATCH ON IT
U 2270, 2270,3773,0000,4074,4003,1701,0000,0000,0000	; 7713		J/PI			;GO TO 1 OF NEXT 7 PLACES
U 2271, 3424,3551,1414,4370,4007,0700,0000,0004,0000	; 7714	=1001	[PI]_[PI].OR.#, #/040000, HOLD LEFT, J/PIP1
U 2272, 3425,3551,1414,4370,4007,0700,0000,0002,0000	; 7715	=1010	[PI]_[PI].OR.#, #/020000, HOLD LEFT, J/PIP2
U 2273, 3426,3551,1414,4370,4007,0700,0000,0001,0000	; 7716	=1011	[PI]_[PI].OR.#, #/010000, HOLD LEFT, J/PIP3
U 2274, 3427,3551,1414,4370,4007,0700,0000,0000,4000	; 7717	=1100	[PI]_[PI].OR.#, #/004000, HOLD LEFT, J/PIP4
U 2275, 3430,3551,1414,4370,4007,0700,0000,0000,2000	; 7718	=1101	[PI]_[PI].OR.#, #/002000, HOLD LEFT, J/PIP5
U 2276, 3431,3551,1414,4370,4007,0700,0000,0000,1000	; 7719	=1110	[PI]_[PI].OR.#, #/001000, HOLD LEFT, J/PIP6
U 2277, 3432,3551,1414,4370,4007,0700,0000,0000,0400	; 7720	=1111	[PI]_[PI].OR.#, #/000400, HOLD LEFT, J/PIP7
U 3424, 3433,4751,1206,4374,4007,0700,0000,0000,0001	; 7721	PIP1:	[BRX]_0 XWD [1], J/PI10	;REMEMBER WE ARE AT LEVEL 1
U 3425, 3433,4751,1206,4374,4007,0700,0000,0000,0002	; 7722	PIP2:	[BRX]_0 XWD [2], J/PI10	;REMEMBER WE ARE AT LEVEL 2
U 3426, 3433,4751,1206,4374,4007,0700,0000,0000,0003	; 7723	PIP3:	[BRX]_0 XWD [3], J/PI10	;REMEMBER WE ARE AT LEVEL 3
U 3427, 3433,4751,1206,4374,4007,0700,0000,0000,0004	; 7724	PIP4:	[BRX]_0 XWD [4], J/PI10	;REMEMBER WE ARE AT LEVEL 4
U 3430, 3433,4751,1206,4374,4007,0700,0000,0000,0005	; 7725	PIP5:	[BRX]_0 XWD [5], J/PI10	;REMEMBER WE ARE AT LEVEL 5
U 3431, 3433,4751,1206,4374,4007,0700,0000,0000,0006	; 7726	PIP6:	[BRX]_0 XWD [6], J/PI10	;REMEMBER WE ARE AT LEVEL 6
U 3432, 3433,4751,1206,4374,4007,0700,0000,0000,0007	; 7727	PIP7:	[BRX]_0 XWD [7], J/PI10	;REMEMBER WE ARE AT LEVEL 7
							; 7728	
							; 7729	PI10:	[AR]_[PI].AND.# CLR LH,	;TURN OFF PI SYSTEM
U 3433, 3434,4251,1403,4374,4007,0700,0000,0007,7577	; 7730		#/077577		; TILL WE ARE DONE
U 3434, 3435,7443,0300,4174,4437,0700,0000,0000,0000	; 7731		.NOT.[AR], LOAD PI	;  ..
U 3435, 2244,4223,0000,4364,4277,0700,0200,0000,0010	; 7732		ABORT MEM CYCLE		;NO MORE TRAPS
							; 7733	=0	[AR]_VMA IO READ,	;SETUP TO READ WRU BITS
							; 7734		WRU CYCLE/1,		; ..
U 2244, 3471,4571,1203,4374,4007,0700,0010,0024,1300	; 7735		CALL [STRTIO]		;START THE CYCLE
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 177
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	IO -- INTERNAL DEVICES -- SUBROUTINES

							; 7736		MEM READ,		;WAIT FOR DATA
							; 7737		[AR]_IO DATA, 3T,	;PUT DATA IN AR
U 2245, 2246,3771,0003,4364,4007,0331,0200,0000,0002	; 7738		SKIP ADR.EQ.0		;SEE IF ANYONE THERE
U 2246, 3444,4221,0004,4174,4007,0700,0000,0000,0000	; 7739	=0	[ARX]_0, J/VECINT	;YES--VECTORED INTERRUPT
U 2247, 3436,3445,0603,4174,4007,0700,0000,0000,0000	; 7740		[AR]_[BRX]*2		;N*2
							; 7741		[AR]_[AR]+#, #/40, 3T,	;2*N+40
U 3436, 3437,0551,0303,4370,4007,0701,0000,0000,0040	; 7742		HOLD LEFT		; ..
							; 7743		[AR]_[AR]+[EBR],	;ABSOULTE ADDRESS OF 
U 3437, 3440,0111,1003,4174,4007,0700,0000,0000,0000	; 7744		J/PI40			; INTERRUPT INSTRUCTION
							; 7745	
							; 7746	;HERE WITH ABSOLUTE ADDRESS OF INTERRUPT INSTRUCTION IN [AR]
U 3440, 3441,3443,0300,4174,4007,0700,0200,0024,1016	; 7747	PI40:	VMA_[AR], VMA PHYSICAL READ	;FETCH THE INSTRUCTION
							; 7748	PI50:	MEM READ, [AR]_MEM, LOAD VMA,	;FETCH INSTRUCTION
U 3441, 3442,3771,0003,4365,5007,0701,0200,0020,0012	; 7749		3T, FORCE EXEC			;E IS EXEC MODE
U 3442, 2252,6553,0300,4374,4007,0321,0000,0025,4340	; 7750		[AR].XOR.#, #/254340, 3T, SKIP ADL.EQ.0
U 2252, 2254,6553,0300,4374,4007,0321,0000,0026,4000	; 7751	=0	[AR].XOR.#, #/264000, SKIP ADL.EQ.0, 3T, J/PIJSR
U 2253, 3443,4521,1205,4074,4007,0700,0000,0000,0000	; 7752		[BR]_FLAGS			;SAVE FLAGS
							; 7753		AD/ZERO, LOAD FLAGS,
U 3443, 0200,4223,0000,4174,4467,0700,0000,0000,0004	; 7754		J/PIXPCW			;ENTER EXEC MODE AND ASSUME
							; 7755						; WE HAVE AN XPCW
							; 7756	;IF WE HALT HERE ON A VECTORED INTERRUPT, WE HAVE
							; 7757	;	T0/ WHAT WE READ FROM BUS AS VECTOR
							; 7758	;	ARX/ EPT+100+DEVICE
							; 7759	;	BR/  ADDRESS OF ILLEGAL INSTRUCTION
							; 7760	;	BRX/ VECTOR (MASKED AND SHIFTED)
							; 7761	=0
U 2254, 2364,4751,1217,4374,4007,0700,0000,0000,0101	; 7762	PIJSR:	HALT [ILLII]			;NOT A JSR OR XPCW
U 2255, 2260,4443,0000,4174,4007,0700,0200,0023,0002	; 7763		START WRITE, FORCE EXEC		;PREPARE TO STORE OLD PC
							; 7764	=0*0	[BR]_PC WITH FLAGS,		;OLD PC
U 2260, 3472,3741,0105,4074,4007,0700,0010,0000,0000	; 7765		CALL [STOBR]			;STORE OLD PC
							; 7766	=1*0	[AR]_#, #/0, HOLD RIGHT,		;PREPARE TO CLEAR FLAGS
U 2264, 3467,3771,0003,4374,0007,0700,0010,0000,0000	; 7767		CALL [INCAR]			;BUMP POINTER
							; 7768	=1*1	[PC]_[AR], LOAD FLAGS,		;NEW PC
U 2265, 2437,3441,0301,4174,4467,0700,0000,0000,0004	; 7769		J/PISET				;CLEAR PI CYCLE & START
							; 7770						; INTERRUPT PROGRAM
							; 7771	=
							; 7772	
							; 7773	;HERE TO PROCESS A VECTORED INTERRUPT. AT THIS POINT:
							; 7774	;	AR/ WRU BITS (BIT 18 FOR DEVICE 0)
							; 7775	;	ARX/ 0
							; 7776	VECINT:	[AR]_[AR]*2,		;SHIFT LEFT (UNSHIFTED ON DP)
U 3444, 2256,3445,0303,4174,4007,0530,0000,0000,0000	; 7777		SKIP DP18		;ANYONE THERE?
							; 7778	=0	[ARX]_[ARX]+[XWD1],	;NO--BUMP BOTH HALVES
U 2256, 3444,0111,1504,4174,4007,0700,0000,0000,0000	; 7779		J/VECINT		;KEEP LOOKING
							; 7780		[AR]_VMA IO READ,	;SETUP FOR VECTOR CYCLE
U 2257, 2262,4571,1203,4374,4007,0700,0000,0024,1240	; 7781		VECTOR CYCLE/1		; ..
							; 7782	=0	[AR]_[AR].OR.[ARX],	;PUT IN UNIT NUMBER
U 2262, 3471,3111,0403,4174,4007,0700,0010,0000,0000	; 7783		CALL [STRTIO]		;START CYCLE
							; 7784		MEM READ,		;WAIT FOR VECTOR (SEE DPM5)
U 2263, 2266,3771,0016,4364,4007,0700,0200,0000,0002	; 7785		[T0]_IO DATA		;GET VECTOR
							; 7786	=0	[BR]_[EBR]+#, 3T, #/100,	;EPT+100
U 2266, 3466,0551,1005,4374,4007,0701,0010,0000,0100	; 7787		CALL [CLARXL]		;CLEAR ARX LEFT
							; 7788		[ARX]_[ARX]+[BR],	;EPT+100+DEVICE
U 2267, 3445,0111,0504,4174,4007,0700,0200,0024,1016	; 7789		VMA PHYSICAL READ	;FETCH WORD
							; 7790		MEM READ, [BR]_MEM, 3T,	;GET POINTER
U 3445, 2300,3771,0005,4365,5007,0331,0200,0000,0002	; 7791		SKIP ADR.EQ.0		;SEE IF NON-ZERO
							; 7792	=0	[BRX]_([T0].AND.#)*.5, 3T, ;OK--MAKE VECTOR MOD 400
U 2300, 3446,4557,1606,4374,4007,0701,0000,0000,0774	; 7793		#/774, J/VECIN1		; AND SHIFT OVER
U 2301, 2364,4751,1217,4374,4007,0700,0000,0000,0102	; 7794		HALT [ILLINT]
U 3446, 3447,3447,0606,4174,4007,0700,0000,0000,0000	; 7795	VECIN1:	[BRX]_[BRX]*.5		;SHIFT 1 MORE PLACE
							; 7796		[BR]_[BR]+[BRX],	;ADDRESS OF WORD TO USE
							; 7797		LOAD VMA, FORCE EXEC,	;FORCE EXEC VIRTUAL ADDRESS
U 3447, 3441,0111,0605,4174,4007,0700,0200,0024,0012	; 7798		START READ, J/PI50	;GO GET INSTRUCTION
							; 7799	
							; 7800	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 178
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	PRIORITY INTERRUPTS -- DISMISS SUBROUTINE

							; 7801	.TOC	"PRIORITY INTERRUPTS -- DISMISS SUBROUTINE"
							; 7802	
							; 7803	;SUBROUTINE TO DISMISS THE HIGHEST PI IN PROGRESS
							; 7804	;RETURNS 4 ALWAYS
							; 7805	
							; 7806	;DISMISS:
							; 7807	;	TR [PI], #/077400	;ANY PI IN PROGRESS?
							; 7808	=0
U 2302, 3450,3771,0005,4374,4007,0700,0000,0004,0000	; 7809	JEN1:	[BR]_#, PI.IP1/1, J/DSMS1 ;YES--START LOOP
U 2303, 0004,4443,0000,4174,4004,1700,0000,0000,0000	; 7810		RETURN [4]		;NO--JUST RETURN
							; 7811	
U 3450, 2304,4113,0514,4174,4007,0330,0000,0000,0000	; 7812	DSMS1:	[PI].AND.[BR], SKIP ADR.EQ.0
U 2304, 0004,5111,0514,4170,4004,1700,0000,0000,0000	; 7813	=0	[PI]_[PI].AND.NOT.[BR], HOLD LEFT, RETURN [4]
U 2305, 3450,3447,0505,4174,4007,0700,0000,0000,0000	; 7814		[BR]_[BR]*.5, J/DSMS1
							; 7815	
							; 7816	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 179
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	EXTERNAL IO INSTRUCTIONS

							; 7817	.TOC	"EXTERNAL IO INSTRUCTIONS"
							; 7818	
							; 7819		.DCODE
D 0710, 1210,1614,0100					; 7820	710:	IOT,	WORD-TNE,	J/TIOX
D 0711, 1214,1614,0100					; 7821	711:	IOT,	WORD-TNN,	J/TIOX
D 0720, 1200,1614,0100					; 7822	720:	IOT,	TNE,		J/TIOX
D 0721, 1204,1614,0100					; 7823	721:	IOT,	TNN,		J/TIOX
							; 7824		.UCODE
							; 7825	
							; 7826	1614:
U 1614, 2306,4443,0000,4174,4007,0700,0010,0000,0000	; 7827	TIOX:	CALL [IORD]
U 1617, 0154,4551,0305,0274,4003,7700,0000,0000,0000	; 7828	1617:	[BR]_[AR].AND.AC, TEST DISP
							; 7829	
							; 7830		.DCODE
D 0712, 1210,1460,0100					; 7831	712:	IOT,	B/10,		J/RDIO
D 0713, 1210,1461,0100					; 7832	713:	IOT,	B/10,		J/WRIO
D 0722, 1200,1460,0100					; 7833	722:	IOT,	B/0,		J/RDIO
D 0723, 1200,1461,0100					; 7834	723:	IOT,	B/0,		J/WRIO
							; 7835		.UCODE
							; 7836	
							; 7837	1460:
U 1460, 2306,4443,0000,4174,4007,0700,0010,0000,0000	; 7838	RDIO:	CALL [IORD]
U 1463, 1400,3440,0303,0174,4007,0700,0400,0000,0000	; 7839	1463:	AC_[AR], J/DONE
							; 7840	
							; 7841	1461:
U 1461, 2322,3771,0005,0276,6007,0700,0000,0000,0000	; 7842	WRIO:	[BR]_AC, J/IOWR
							; 7843	
							; 7844		.DCODE
D 0714, 1210,1644,0100					; 7845	714:	IOT,		B/10,	J/BIXUB
D 0715, 1214,1644,0100					; 7846	715:	IOT,		B/14,	J/BIXUB
D 0724, 1200,1644,0100					; 7847	724:	IOT,		B/0,	J/BIXUB
D 0725, 1204,1644,0100					; 7848	725:	IOT,		B/4,	J/BIXUB
							; 7849		.UCODE
							; 7850	
							; 7851	1644:
							; 7852	BIXUB:	[BRX]_[AR],		;SAVE EFFECTIVE ADDRESS
U 1644, 2306,3441,0306,4174,4007,0700,0010,0000,0000	; 7853		CALL [IORD]		;GO GET THE DATA
							; 7854	1647:	[BR]_[AR],		;COPY DATA ITEM
U 1647, 2313,3441,0305,4174,4003,7700,0000,0000,0000	; 7855		B DISP			;SEE IF SET OR CLEAR
							; 7856	=1011	[BR]_[BR].OR.AC,	;SET BITS
U 2313, 3451,3551,0505,0274,4007,0700,0000,0000,0000	; 7857		J/BIXUB1		;GO DO WRITE
							; 7858		[BR]_[BR].AND.NOT.AC,	;CLEAR BITS
U 2317, 3451,5551,0505,0274,4007,0700,0000,0000,0000	; 7859		J/BIXUB1		;GO DO WRITE
							; 7860	
							; 7861	BIXUB1:	[AR]_[BRX],		;RESTORE ADDRESS
U 3451, 2322,3441,0603,4174,4007,0700,0000,0000,0000	; 7862		J/IOWR
							; 7863	
							; 7864	;SUBROUTINE TO READ FROM AN IO DEVICE
							; 7865	;CALL WITH:
							; 7866	;	SECTION 0 EFFECTIVE ADDRESS IN AR
							; 7867	;	INSTRUCTION IN HR
							; 7868	;RETURN 3 WITH WORD OR BYTE IN AR
							; 7869	;
							; 7870	=0
							; 7871	IORD:	CLR IO BUSY,		;CLEAR BUSY
U 2306, 2334,4443,0000,4174,4137,0700,0010,0000,0000	; 7872		CALL [IOEA]		;COMPUTE IO EA
U 2307, 2327,4443,0000,4174,4003,7700,0000,0000,0000	; 7873		B DISP
							; 7874	=10111	[BR]_VMA IO READ,	;BYTE MODE
							; 7875		IO BYTE/1,		;SET BYTE FLAG
U 2327, 2310,4571,1205,4374,4007,0700,0000,0024,1220	; 7876		J/IORD1			;GO DO C/A CYCLE
U 2337, 2310,4571,1205,4374,4007,0700,0000,0024,1200	; 7877	=11111	[BR]_VMA IO READ	;WORD MODE
							; 7878	=
							; 7879	=0
							; 7880	IORD1:	VMA_[AR].OR.[BR] WITH FLAGS,
U 2310, 3460,3113,0305,4174,4007,0701,0210,0000,0036	; 7881		CALL [IOWAIT]		;WAIT FOR THINGS COMPLETE
							; 7882		MEM READ,		;MAKE SURE REALLY READY
							; 7883		[BR]_IO DATA,		;PUT DATA IN BR
U 2311, 2347,3771,0005,4364,4003,7700,0200,0000,0002	; 7884		B DISP			;SEE IF BYTE MODE
U 2347, 2314,4553,0300,4374,4007,0331,0000,0000,0001	; 7885	=0111	TR [AR], #/1, J/IORD2	;BYTE MODE SEE IF ODD
U 2357, 0003,3441,0503,4174,4004,1700,0000,0000,0000	; 7886		[AR]_[BR], RETURN [3]	;ALL DONE
							; 7887	
							; 7888	;HERE ON WORD MODE
							; 7889	=0
							; 7890	IORD2:	[BR]_[BR]*.5, SC_5,	;LEFT BYTE
U 2314, 2320,3447,0505,4174,4007,0700,2000,0071,0005	; 7891		J/IORD3			;GO SHIFT IT
							; 7892		[AR]_[BR].AND.#,	;MASK IT
U 2315, 0003,4551,0503,4374,4004,1700,0000,0000,0377	; 7893		#/377, RETURN [3]	;ALL DONE
							; 7894	
							; 7895	=0
							; 7896	IORD3:	[BR]_[BR]*.5,		;SHIFT OVER 
U 2320, 2320,3447,0505,4174,4007,0630,2000,0060,0000	; 7897		STEP SC, J/IORD3	; ..
							; 7898		[AR]_[BR].AND.#,	;MASK IT
U 2321, 0003,4551,0503,4374,4004,1700,0000,0000,0377	; 7899		#/377, RETURN [3]	;ALL DONE
							; 7900	
							; 7901	;ROUTINE TO WRITE TO AN IO DEVICE
							; 7902	;CALL WITH:
							; 7903	;	SECTION 0 EFFECTIVE ADDRESS IN AR
							; 7904	;	INSTRUCTION IN HR
							; 7905	;	WORD OR BYTE IN BR
							; 7906	;RETURNS BACK TO USER
							; 7907	;
							; 7908	=0
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 180
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	EXTERNAL IO INSTRUCTIONS

							; 7909	IOWR:	CLR IO BUSY,		;CLEAR BUSY
U 2322, 2334,4443,0000,4174,4137,0700,0010,0000,0000	; 7910		CALL [IOEA]		;COMPUTE IO EA
U 2323, 2367,4443,0000,4174,4003,7700,0000,0000,0000	; 7911		B DISP
U 2367, 2330,4553,0300,4374,4007,0331,0000,0000,0001	; 7912	=10111	TR [AR], #/1, J/IOWR2	;BYTE MODE
U 2377, 3452,4571,1204,4374,4007,0700,0000,0021,1200	; 7913	=11111	[ARX]_VMA IO WRITE	;SETUP FLAGS
							; 7914	=
U 3452, 2324,3113,0304,4174,4007,0701,0200,0000,0036	; 7915	IOWR1:	VMA_[AR].OR.[ARX] WITH FLAGS
							; 7916	=0	MEM WRITE, MEM_[BR],	;SEND DATA
U 2324, 3460,3333,0005,4175,5007,0701,0210,0000,0002	; 7917		CALL [IOWAIT]		;WAIT FOR DATA
U 2325, 0070,3443,0100,4174,4156,4700,0200,0014,0012	; 7918		DONE			;RETURN
							; 7919	
							; 7920	;HERE FOR BYTE MODE
							; 7921	=0
							; 7922	IOWR2:	[BR]_[BR]*2, SC_5,	;ODD--MOVE LEFT
U 2330, 2332,3445,0505,4174,4007,0700,2000,0071,0005	; 7923		J/IOWR3			; ..
							; 7924		[ARX]_VMA IO WRITE,	;SETUP FLAGS
U 2331, 3452,4571,1204,4374,4007,0700,0000,0021,1220	; 7925		IO BYTE/1, J/IOWR1	; ..
							; 7926	
							; 7927	=0
							; 7928	IOWR3:	[BR]_[BR]*2, STEP SC,	;SHIFT LEFT
U 2332, 2332,3445,0505,4174,4007,0630,2000,0060,0000	; 7929		J/IOWR3			;KEEP SHIFTING
							; 7930		[ARX]_VMA IO WRITE,	;SETUP FLAGS
U 2333, 3452,4571,1204,4374,4007,0700,0000,0021,1220	; 7931		IO BYTE/1, J/IOWR1	; ..
							; 7932	
							; 7933	;HERE TO COMPUTE IO EFFECTIVE ADDRESS
							; 7934	;CALL WITH:
							; 7935	;	SECTION 0 EFFECTIVE ADDRESS IN AR
							; 7936	;	INSTRUCTION IN HR
							; 7937	;RETURN 1 WITH EA IN AR
							; 7938	;
							; 7939	=0
							; 7940	IOEA:	VMA_[PC]-1,		;GET INSTRUCTION
							; 7941		START READ,		; ..
U 2334, 3462,1113,0701,4170,4007,0700,4210,0004,0012	; 7942		CALL [LOADAR]		;PUT WORD IN AR
U 2335, 3453,7441,0306,4174,4007,0700,0000,0000,0000	; 7943		[BRX]_.NOT.[AR]		;SEE IF IN RANGE 700-777
U 3453, 2340,4553,0600,4374,4007,0321,0000,0070,0000	; 7944		TL [BRX], #/700000	; ..
							; 7945	=0
U 2340, 2342,4553,0200,4374,4007,0321,0000,0000,0020	; 7946	IOEA1:	TL [HR], #/20, J/IOEA2	;INDIRECT?
							; 7947		WORK[YSAVE]_[AR] CLR LH, ;DIRECT IO INSTRUCTION
U 2341, 2340,4713,1203,7174,4007,0700,0400,0000,0422	; 7948		J/IOEA1			;SAVE Y FOR EA CALCULATION
							; 7949	=0
							; 7950	IOEA2:	[AR]_WORK[YSAVE],	;@--GET SAVED Y
U 2342, 3454,3771,0003,7274,4007,0701,0000,0000,0422	; 7951		J/IOEAI			;GET Y AND GO
U 2343, 2415,4443,0000,2174,4006,6700,0000,0000,0000	; 7952		EA MODE DISP		;WAS THERE INDEXING?
							; 7953	=1101	[ARX]_XR, SKIP ADL.LE.0, ;SEE IF LOCAL OR GLOBAL INDEXING
U 2415, 2350,3771,0004,2274,4007,0120,0000,0000,0000	; 7954		2T, J/IOEAX		; ..
							; 7955		[AR]_WORK[YSAVE],	;JUST PLAIN IO
U 2417, 0001,3771,0003,7274,4124,1701,0000,0000,0422	; 7956		CLR IO LATCH, RETURN [1]
							; 7957	
							; 7958	IOEAI:	READ [HR], DBUS/DP,	;LOAD XR FLOPS IN CASE
U 3454, 3455,3333,0002,4174,4217,0700,0000,0000,0000	; 7959		LOAD INST EA		; THERE IS INDEXING
U 3455, 2344,4553,0200,4374,4007,0321,0000,0000,0017	; 7960		TL [HR], #/17		;WAS THERE ALSO INDEXING
U 2344, 2345,0551,0303,2270,4007,0701,0000,0000,0000	; 7961	=0	[AR]_[AR]+XR, 3T, HOLD LEFT ;YES--ADD IN INDEX VALUE
U 2345, 3456,3443,0300,4174,4007,0700,0200,0004,0012	; 7962		VMA_[AR], START READ	;FETCH DATA WORD
							; 7963		MEM READ, [AR]_MEM,	;GO GET DATA WORD
U 3456, 0001,3771,0003,4365,5124,1700,0200,0000,0002	; 7964		CLR IO LATCH, RETURN [1]
							; 7965	
							; 7966	=0
							; 7967	IOEAX:	[AR]_[ARX]+WORK[YSAVE],	;GLOBAL INDEXING
U 2350, 0001,0551,0403,7274,4124,1701,0000,0000,0422	; 7968		CLR IO LATCH, RETURN [1]
U 2351, 3457,0551,0403,7274,4007,0701,0000,0000,0422	; 7969		[AR]_[ARX]+WORK[YSAVE]	;LOCAL INDEXING
							; 7970		[AR]_0, HOLD RIGHT,
U 3457, 0001,4221,0003,4174,0124,1700,0000,0000,0000	; 7971		CLR IO LATCH, RETURN [1]
							; 7972	
							; 7973	;WAIT FOR IO TO COMPLETE
							; 7974	;RETURNS 1 OR PAGE FAILS
							; 7975	;
							; 7976	IOWAIT:	SC_S#, S#/200,		;DELAY
							; 7977		[T0]_VMA,		;GET VMA
U 3460, 2360,3771,0016,4354,4007,0650,2000,0071,0200	; 7978		SKIP/-IO BUSY		;SEE IF BUSY YET
							; 7979	=00
							; 7980	IOW1:	CLR IO LATCH,		;WENT BUSY
							; 7981		WORK[SV.VMA]_[T0],	;MAKE SURE SV.VMA IS SETUP
U 2360, 3461,3333,0016,7174,4127,0700,0400,0000,0210	; 7982		J/IOW2			;WAIT FOR IT TO CLEAR
							; 7983		SC_SC-1, SCAD DISP, 5T,	;SEE IF DONE YET
							; 7984		SKIP/-IO BUSY,		; ..
U 2361, 2360,4443,0000,4174,4006,7653,2000,0060,0000	; 7985		J/IOW1			;BACK TO LOOP
							; 7986		CLR IO LATCH,		;WENT BUSY AND TIMEOUT
							; 7987		WORK[SV.VMA]_[T0],	;MAKE SURE SV.VMA IS SETUP
U 2362, 3461,3333,0016,7174,4127,0700,0400,0000,0210	; 7988		J/IOW2			; ..
							; 7989		WORK[SV.VMA]_[T0],	;MAKE SURE SV.VMA IS SETUP
U 2363, 2355,3333,0016,7174,4007,0700,0400,0000,0210	; 7990		J/IOW5			;GO TRAP
							; 7991	
							; 7992	IOW2:	SC_S#, S#/777,		;GO TIME IO
U 3461, 2352,4443,0000,4174,4007,0650,2000,0071,0777	; 7993		SKIP/-IO BUSY		; ..
							; 7994	=0
							; 7995	IOW3:	CLR IO LATCH,		;TRY TO CLEAR LATCH
U 2352, 2354,4443,0000,4174,4127,0630,2000,0060,0000	; 7996		STEP SC, J/IOW4		;STILL BUSY
U 2353, 0001,4443,0000,4174,4004,1700,0000,0000,0000	; 7997		RETURN [1]		;IDLE
							; 7998	
							; 7999	=0
							; 8000	IOW4:	CLR IO LATCH, 5T,	;TRY TO CLEAR LATCH
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 181
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	EXTERNAL IO INSTRUCTIONS

							; 8001		SKIP/-IO BUSY,		;SEE IF STILL BUSY
U 2354, 2352,4443,0000,4174,4127,0653,0000,0000,0000	; 8002		J/IOW3			; ..
U 2355, 3524,4571,1206,4374,4007,0700,0000,0020,0000	; 8003	IOW5:	[BRX]_[200000] XWD 0, J/HARD
							; 8004	
							; 8005	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 182
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	SMALL SUBROUTINES

							; 8006	.TOC	"SMALL SUBROUTINES"
							; 8007	
							; 8008	;HERE ARE A COLLECTION ON 1-LINE SUBROUTINES
							; 8009	LOADAR:	MEM READ, [AR]_MEM,	;FROM MEMORY TO AR
U 3462, 0001,3771,0003,4365,5004,1700,0200,0000,0002	; 8010		RETURN [1]		;RETURN TO CALLER
							; 8011	
U 3463, 0001,3771,0004,4365,5004,1700,0200,0000,0002	; 8012	LOADARX: MEM READ, [ARX]_MEM, RETURN [1]
							; 8013	
U 3464, 0001,3772,0000,4365,5004,1700,0200,0000,0002	; 8014	LOADQ:	MEM READ, Q_MEM, RETURN [1]
							; 8015	
U 3465, 0001,4223,0000,4364,4274,1700,0200,0000,0010	; 8016	ABORT:	ABORT MEM CYCLE, RETURN [1]
							; 8017	
U 3466, 0001,4221,0004,4174,0004,1700,0000,0000,0000	; 8018	CLARXL:	[ARX]_0, HOLD RIGHT, RETURN [1]
							; 8019	
U 3467, 0001,0111,0703,4174,4004,1700,0000,0000,0000	; 8020	INCAR:	[AR]_[AR]+1, RETURN [1]
							; 8021	
U 3470, 0001,3445,0505,4174,4004,1700,0000,0000,0000	; 8022	SBRL:	[BR]_[BR]*2, RETURN [1]
							; 8023	
U 3471, 0001,3443,0300,4174,4004,1701,0200,0000,0036	; 8024	STRTIO:	VMA_[AR] WITH FLAGS, RETURN [1]
							; 8025	
U 3472, 0004,3333,0005,4175,5004,1701,0200,0000,0002	; 8026	STOBR:	MEM WRITE, MEM_[BR], RETURN [4]
							; 8027	
U 3473, 0001,3333,0001,4175,5004,1701,0200,0000,0002	; 8028	STOPC:	MEM WRITE, MEM_[PC], RETURN [1]
							; 8029	
U 3474, 0001,3440,0404,0174,4004,1700,0400,0000,0000	; 8030	AC_ARX:	AC_[ARX], RETURN [1]
							; 8031	
							; 8032	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 183
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	UNDEFINED IO INSTRUCTIONS

							; 8033	.TOC	"UNDEFINED IO INSTRUCTIONS"
							; 8034	
							; 8035		.DCODE
D 0703, 0003,1650,2100					; 8036	703:	I,	B/3,	J/IOT700
D 0706, 0006,1650,2100					; 8037	706:	I,	B/6,	J/IOT700
D 0707, 0007,1650,2100					; 8038		I,	B/7,	J/IOT700
							; 8039	
D 0716, 0006,1651,2100					; 8040	716:	I,	B/6,	J/IOT710
D 0717, 0007,1651,2100					; 8041		I,	B/7,	J/IOT710
							; 8042	
D 0726, 0006,1652,2100					; 8043	726:	I,	B/6,	J/IOT720
D 0727, 0007,1652,2100					; 8044		I,	B/7,	J/IOT720
							; 8045	
D 0730, 0000,1653,2100					; 8046	730:	I,	B/0,	J/IOT730
D 0731, 0001,1653,2100					; 8047		I,	B/1,	J/IOT730
D 0732, 0002,1653,2100					; 8048		I,	B/2,	J/IOT730
D 0733, 0003,1653,2100					; 8049		I,	B/3,	J/IOT730
D 0734, 0004,1653,2100					; 8050		I,	B/4,	J/IOT730
D 0735, 0005,1653,2100					; 8051		I,	B/5,	J/IOT730
D 0736, 0006,1653,2100					; 8052		I,	B/6,	J/IOT730
D 0737, 0007,1653,2100					; 8053		I,	B/7,	J/IOT730
							; 8054	
D 0740, 0000,1654,2100					; 8055	740:	I,	B/0,	J/IOT740
D 0741, 0001,1654,2100					; 8056		I,	B/1,	J/IOT740
D 0742, 0002,1654,2100					; 8057		I,	B/2,	J/IOT740
D 0743, 0003,1654,2100					; 8058		I,	B/3,	J/IOT740
D 0744, 0004,1654,2100					; 8059		I,	B/4,	J/IOT740
D 0745, 0005,1654,2100					; 8060		I,	B/5,	J/IOT740
D 0746, 0006,1654,2100					; 8061		I,	B/6,	J/IOT740
D 0747, 0007,1654,2100					; 8062		I,	B/7,	J/IOT740
							; 8063	
D 0750, 0000,1655,2100					; 8064	750:	I,	B/0,	J/IOT750
D 0751, 0001,1655,2100					; 8065		I,	B/1,	J/IOT750
D 0752, 0002,1655,2100					; 8066		I,	B/2,	J/IOT750
D 0753, 0003,1655,2100					; 8067		I,	B/3,	J/IOT750
D 0754, 0004,1655,2100					; 8068		I,	B/4,	J/IOT750
D 0755, 0005,1655,2100					; 8069		I,	B/5,	J/IOT750
D 0756, 0006,1655,2100					; 8070		I,	B/6,	J/IOT750
D 0757, 0007,1655,2100					; 8071		I,	B/7,	J/IOT750
							; 8072	
D 0760, 0000,1656,2100					; 8073	760:	I,	B/0,	J/IOT760
D 0761, 0001,1656,2100					; 8074		I,	B/1,	J/IOT760
D 0762, 0002,1656,2100					; 8075		I,	B/2,	J/IOT760
D 0763, 0003,1656,2100					; 8076		I,	B/3,	J/IOT760
D 0764, 0004,1656,2100					; 8077		I,	B/4,	J/IOT760
D 0765, 0005,1656,2100					; 8078		I,	B/5,	J/IOT760
D 0766, 0006,1656,2100					; 8079		I,	B/6,	J/IOT760
D 0767, 0007,1656,2100					; 8080		I,	B/7,	J/IOT760
							; 8081	
D 0770, 0000,1657,2100					; 8082	770:	I,	B/0,	J/IOT770
D 0771, 0001,1657,2100					; 8083		I,	B/1,	J/IOT770
D 0772, 0002,1657,2100					; 8084		I,	B/2,	J/IOT770
D 0773, 0003,1657,2100					; 8085		I,	B/3,	J/IOT770
D 0774, 0004,1657,2100					; 8086		I,	B/4,	J/IOT770
D 0775, 0005,1657,2100					; 8087		I,	B/5,	J/IOT770
D 0776, 0006,1657,2100					; 8088		I,	B/6,	J/IOT770
D 0777, 0007,1657,2100					; 8089		I,	B/7,	J/IOT770
							; 8090		.UCODE
							; 8091	
							; 8092	1650:
U 1650, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 8093	IOT700:	UUO
							; 8094	1651:
U 1651, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 8095	IOT710:	UUO
							; 8096	1652:
U 1652, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 8097	IOT720:	UUO
							; 8098	1653:
U 1653, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 8099	IOT730:	UUO
							; 8100	1654:
U 1654, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 8101	IOT740:	UUO
							; 8102	1655:
U 1655, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 8103	IOT750:	UUO
							; 8104	1656:
U 1656, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 8105	IOT760:	UUO
							; 8106	1657:
U 1657, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 8107	IOT770:	UUO
							; 8108	
							; 8109	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 184
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	UMOVE AND UMOVEM

							; 8110	.TOC	"UMOVE AND UMOVEM"
							; 8111	
							; 8112		.DCODE
D 0704, 1200,1754,0100					; 8113	704:	IOT,	J/UMOVE
D 0705, 1200,1755,0100					; 8114		IOT,	J/UMOVEM
							; 8115		.UCODE
							; 8116	
							; 8117	1754:
							; 8118	UMOVE:	VMA_[AR],		;LOAD VMA
							; 8119		START READ,		;START MEMORY
U 1754, 3475,3443,0300,4174,4207,0700,0200,0004,0012	; 8120		SPEC/PREV		;FORCE PREVIOUS
							; 8121		MEM READ,		;WAIT FOR MEMORY
							; 8122		[AR]_MEM,		;PUT DATA IN AR
U 3475, 1515,3771,0003,4365,5007,0700,0200,0000,0002	; 8123		J/STAC			;GO PUT AR IN AC
							; 8124	
							; 8125	1755:
							; 8126	UMOVEM:	VMA_[AR],		;LOAD VMA
							; 8127		START WRITE,		;START MEMORY
U 1755, 3476,3443,0300,4174,4207,0700,0200,0003,0012	; 8128		SPEC/PREV		;FORCE PREVIOUS
							; 8129		[AR]_AC,		;FETCH AC
U 3476, 1516,3771,0003,0276,6007,0700,0000,0000,0000	; 8130		J/STMEM			;STORE IN MEMORY
							; 8131	
							; 8132	;HERE WITH HALT CODE IN THE T1
							; 8133	=010*
							; 8134	HALTED:	WORK[SV.ARX]_[ARX],	;SAVE TEMP REGISTER
U 2364, 3501,3333,0004,7174,4007,0700,0410,0000,0212	; 8135		CALL [SAVVMA]		;PUT VMA IN WORK[SV.VMA]
							; 8136	=110*	ABORT MEM CYCLE,		;ABORT CYCLE IN PROGRESS
U 2374, 3500,4223,0000,4364,4277,0700,0210,0000,0010	; 8137		CALL [WRTHSB]		;WRITE HALT STATUS BLOCK
							; 8138	=111*
U 2376, 3477,4221,0004,4174,4007,0700,0200,0021,1016	; 8139	PWRON:	[ARX]_0, VMA PHYSICAL WRITE ;STORE HALT CODE
							; 8140	=
U 3477, 2370,3333,0017,4175,5007,0701,0200,0000,0002	; 8141		MEM WRITE, MEM_[T1]	; IN LOCATION 0
							; 8142	=0	NEXT [ARX] PHYSICAL WRITE,
U 2370, 3473,0111,0704,4170,4007,0700,0210,0023,1016	; 8143		CALL [STOPC]
U 2371, 0005,4443,0000,4174,4107,0700,0000,0000,0074	; 8144	H1:	SET HALT, J/HALTLP	;TELL CONSOLE WE HAVE HALTED
							; 8145	
							; 8146	
							; 8147	4:	UNHALT,			;RESET CONSOLE
U 0004, 2372,4443,0000,4174,4107,0640,0000,0000,0062	; 8148		SKIP EXECUTE, J/CONT	;SEE IF CO OR EX
							; 8149	5:
U 0005, 0004,4443,0000,4174,4007,0660,0000,0000,0000	; 8150	HALTLP:	SKIP/-CONTINUE, J/4	;WAIT FOR CONTINUE
							; 8151	
							; 8152	=0
							; 8153	CONT:	VMA_[PC],		;LOAD PC INTO VMA
							; 8154		FETCH,			;START READ
U 2372, 0077,3443,0100,4174,4007,0700,0200,0014,0012	; 8155		J/XCTGO			;DO THE INSTRUCTION
U 2373, 2400,4571,1203,4374,4007,0700,0000,0024,1200	; 8156		[AR]_VMA IO READ	;PUT FLAGS IN AR
							; 8157	=0	[AR]_[AR].OR.#,		;PUT IN ADDRESS
							; 8158		#/200000, HOLD LEFT,	; OF CSL REGISTER
U 2400, 3471,3551,0303,4370,4007,0700,0010,0020,0000	; 8159		CALL [STRTIO]
							; 8160	CONT1:	MEM READ,		;WAIT FOR DATA
							; 8161		[HR]_MEM,		;PUT IN HR
							; 8162		LOAD INST,		;LOAD IR, ETC.
U 2401, 2446,3771,0002,4365,5617,0700,0200,0000,0002	; 8163		J/XCT1			;GO DO THE INSTRUCTION
							; 8164	
							; 8165	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 185
; DSK: KSHACK; INOUT 33	14:51:14 20-NOV-84	WRITE HALT STATUS BLOCK

							; 8166	.TOC	"WRITE HALT STATUS BLOCK"
							; 8167	
							; 8168	;THE HALT STATUS BLOCK LOOKS LIKE:
							; 8169	
							; 8170	;	!=======================================================!
							; 8171	;	!00!                        MAG                         !
							; 8172	;	!-------------------------------------------------------!
							; 8173	;	!01!                         PC                         !
							; 8174	;	!-------------------------------------------------------!
							; 8175	;	!02!                         HR                         !
							; 8176	;	!-------------------------------------------------------!
							; 8177	;	!03!                         AR                         !
							; 8178	;	!-------------------------------------------------------!
							; 8179	;	!04!                        ARX                         !
							; 8180	;	!-------------------------------------------------------!
							; 8181	;	!05!                         BR                         !
							; 8182	;	!-------------------------------------------------------!
							; 8183	;	!06!                        BRX                         !
							; 8184	;	!-------------------------------------------------------!
							; 8185	;	!07!                        ONE                         !
							; 8186	;	!-------------------------------------------------------!
							; 8187	;	!10!                        EBR                         !
							; 8188	;	!-------------------------------------------------------!
							; 8189	;	!11!                        UBR                         !
							; 8190	;	!-------------------------------------------------------!
							; 8191	;	!12!                        MASK                        !
							; 8192	;	!-------------------------------------------------------!
							; 8193	;	!13!                        FLG                         !
							; 8194	;	!-------------------------------------------------------!
							; 8195	;	!14!                         PI                         !
							; 8196	;	!-------------------------------------------------------!
							; 8197	;	!15!                        XWD1                        !
							; 8198	;	!-------------------------------------------------------!
							; 8199	;	!16!                         T0                         !
							; 8200	;	!-------------------------------------------------------!
							; 8201	;	!17!                         T1                         !
							; 8202	;	!=======================================================!
							; 8203	;	!         VMA FLAGS         !            VMA            !
							; 8204	;	!=======================================================!
							; 8205	
							; 8206	;START AT 1 TO DUMP 2901 REGISTERS INTO MAIN MEMORY
							; 8207	1:	WORK[SV.ARX]_[ARX],	;SAVE TEMP REGISTER
U 0001, 3501,3333,0004,7174,4007,0700,0410,0000,0212	; 8208		CALL [SAVVMA]		;WORK[SV.VMA]_VMA
U 0011, 2064,3771,0004,7274,4007,0701,0000,0000,0227	; 8209	11:	[ARX]_WORK[HSBADR]
U 2064, 3503,4223,0000,4364,4277,0700,0210,0000,0010	; 8210	=10*	ABORT MEM CYCLE, CALL [DUMP]
U 2066, 2371,4443,0000,4174,4107,0700,0000,0000,0074	; 8211		SET HALT, J/H1
							; 8212	
							; 8213	
							; 8214	WRTHSB:	[ARX]_WORK[HSBADR], ;GET ADDRESS OF HSB
U 3500, 2402,3771,0004,7274,4007,0422,0000,0000,0227	; 8215		SKIP AD.LE.0, 4T	;SEE IF VALID
							; 8216	=0	READ [MASK], LOAD PI,	;TURN OFF PI SYSTEM
U 2402, 3503,3333,0012,4174,4437,0700,0000,0000,0000	; 8217		J/DUMP			; AND GO TAKE DUMP
							; 8218		[ARX]_WORK[SV.ARX],
U 2403, 0002,3771,0004,7274,4004,1701,0000,0000,0212	; 8219		RETURN [2]		;DO NOT DUMP ANYTHING
							; 8220	
U 3501, 3502,3771,0004,4354,4007,0700,0000,0000,0000	; 8221	SAVVMA:	[ARX]_VMA
							; 8222		WORK[SV.VMA]_[ARX],
U 3502, 0010,3333,0004,7174,4004,1700,0400,0000,0210	; 8223		RETURN [10]
							; 8224	
							; 8225	;DUMP OUT THE 2901
U 3503, 2104,3333,0004,4174,4007,0700,0200,0021,1016	; 8226	DUMP:	READ [ARX], VMA PHYSICAL WRITE
U 2104, 2565,3333,0000,4175,5007,0701,0210,0000,0002	; 8227	=0*	MEM WRITE, MEM_[MAG], CALL [NEXT]
U 2106, 3504,3333,0001,4175,5007,0701,0200,0000,0002	; 8228		MEM WRITE, MEM_[PC]
U 3504, 2404,0111,0704,4170,4007,0700,0200,0023,1016	; 8229		NEXT [ARX] PHYSICAL WRITE
U 2404, 2565,3333,0002,4175,5007,0701,0210,0000,0002	; 8230	=0*	MEM WRITE, MEM_[HR], CALL [NEXT]
U 2406, 2405,3333,0003,4175,5007,0701,0200,0000,0002	; 8231		MEM WRITE, MEM_[AR]
U 2405, 2565,3333,0003,7174,4007,0700,0410,0000,0211	; 8232	=0*	WORK[SV.AR]_[AR], CALL [NEXT]
U 2407, 2410,3771,0003,7274,4007,0701,0000,0000,0212	; 8233		[AR]_WORK[SV.ARX]
U 2410, 2565,3333,0003,4175,5007,0701,0210,0000,0002	; 8234	=0*	MEM WRITE, MEM_[AR], CALL [NEXT]
U 2412, 3505,3333,0005,4175,5007,0701,0200,0000,0002	; 8235		MEM WRITE, MEM_[BR]
U 3505, 2411,0111,0704,4170,4007,0700,0200,0023,1016	; 8236		NEXT [ARX] PHYSICAL WRITE
U 2411, 2565,3333,0006,4175,5007,0701,0210,0000,0002	; 8237	=0*	MEM WRITE, MEM_[BRX], CALL [NEXT]
U 2413, 3506,3333,0007,4175,5007,0701,0200,0000,0002	; 8238		MEM WRITE, MEM_[ONE]
U 3506, 2414,0111,0704,4170,4007,0700,0200,0023,1016	; 8239		NEXT [ARX] PHYSICAL WRITE
U 2414, 2565,3333,0010,4175,5007,0701,0210,0000,0002	; 8240	=0*	MEM WRITE, MEM_[EBR], CALL [NEXT]
U 2416, 3507,3333,0011,4175,5007,0701,0200,0000,0002	; 8241		MEM WRITE, MEM_[UBR]
U 3507, 2420,0111,0704,4170,4007,0700,0200,0023,1016	; 8242		NEXT [ARX] PHYSICAL WRITE
U 2420, 2565,3333,0012,4175,5007,0701,0210,0000,0002	; 8243	=0*	MEM WRITE, MEM_[MASK], CALL [NEXT]
U 2422, 3510,3333,0013,4175,5007,0701,0200,0000,0002	; 8244		MEM WRITE, MEM_[FLG]
U 3510, 2421,0111,0704,4170,4007,0700,0200,0023,1016	; 8245		NEXT [ARX] PHYSICAL WRITE
U 2421, 2565,3333,0014,4175,5007,0701,0210,0000,0002	; 8246	=0*	MEM WRITE, MEM_[PI], CALL [NEXT]
U 2423, 3511,3333,0015,4175,5007,0701,0200,0000,0002	; 8247		MEM WRITE, MEM_[XWD1]
U 3511, 2424,0111,0704,4170,4007,0700,0200,0023,1016	; 8248		NEXT [ARX] PHYSICAL WRITE
U 2424, 2565,3333,0016,4175,5007,0701,0210,0000,0002	; 8249	=0*	MEM WRITE, MEM_[T0], CALL [NEXT]
U 2426, 2425,3333,0017,4175,5007,0701,0200,0000,0002	; 8250		MEM WRITE, MEM_[T1]
U 2425, 2565,3771,0003,7274,4007,0701,0010,0000,0210	; 8251	=0*	[AR]_WORK[SV.VMA], CALL [NEXT]
U 2427, 3512,3333,0003,4175,5007,0701,0200,0000,0002	; 8252		MEM WRITE, MEM_[AR]
U 3512, 3513,3771,0003,7274,4007,0701,0000,0000,0211	; 8253	HSBDON:	[AR]_WORK[SV.AR]
U 3513, 3514,3771,0004,7274,4007,0701,0000,0000,0210	; 8254		[ARX]_WORK[SV.VMA]
U 3514, 3515,3443,0400,4174,4007,0700,0200,0000,0010	; 8255		VMA_[ARX]
							; 8256		[ARX]_WORK[SV.ARX],
U 3515, 0006,3771,0004,7274,4004,1701,0000,0000,0212	; 8257		RETURN [6]
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 186
; DSK: KSHACK; ITSPAG 88	15:15:37 24-NOV-84	WRITE HALT STATUS BLOCK

							; 8258	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 187
; DSK: KSHACK; ITSPAG 88	15:15:37 24-NOV-84	WRITE HALT STATUS BLOCK

							; 8259	;;;-*-Fundamental-*-
							; 8260	
							; 8261	.TOC	"ITS PAGE REFILL CODE"
							; 8262	
							; 8263	.IF/ITS
							; 8264	
							; 8265	CLEANUP DONE	"END STATE, SKIP IRPT, J/PFTRAP"
							; 8266	CLEANUP AND TRAP	"[AR]_WORK[SV.VMA], SKIP/TRAP CYCLE, J/CLTRP"
							; 8267	
							; 8268	;ITS page table entry:
							; 8269	;(when shifted left once the valid bit, cache bit, write bit and page
							; 8270	;number will be in the right place for loading the hardware.)
							; 8271	PTE VALID/=<91>			;2.8	(internal to the microcode)
							; 8272	PTE AGE/=<94>			;2.5
							; 8273	PTE WRITE/=<94>			;2.5	(internal to the microcode)
							; 8274	PTE CACHE/=<95>			;2.4
							; 8275	PTE PAGE/=<98:107>		;2.1 - 1.1
							; 8276	
							; 8277	;Hardware page table control bits:
							; 8278	PT VALID/=<90>			;2.9
							; 8279	PT WRITE/=<93>			;2.6
							; 8280	PT CACHE/=<94>			;2.5
							; 8281	PT PAGE/=<97:107>		;2.2 - 1.1
							; 8282		EVEN=3776
							; 8283		ALL=3777
							; 8284	
							; 8285	;	VMA flags:		Page fail word flags:
							; 8286	;4.9	User mode		User mode
							; 8287	;FORCE USER
							; 8288	;4.8	Exec mode		Nonexistent IO register
							; 8289	NONEXISTENT IO REGISTER/=<91>	;J/IOW5
							; 8290	;4.7	Instruction fetch	Nonexistent memory
							; 8291	NONEXISTENT MEMORY/=<92>	;J/PFD
							; 8292	;4.6	Read			Uncorrectable memory error
							; 8293	UNCORRECTABLE MEMORY ERROR/=<93>	;J/PFD, J/BADDATA
							; 8294	;4.5	Write test
							; 8295	;WRITE TEST
							; 8296	;4.4	Write			Memory write
							; 8297	;WRITE CYCLE
							; 8298	;4.3				2.9 from page table entry	
							; 8299	;4.2	Don't cache		2.8 from page table entry
							; 8300	PAGE ACCESS/=<96:97>
							; 8301	;4.1	Physical		Physical
							; 8302	;PHYSICAL
							; 8303	;3.4 - 1.1 Address		Address
							; 8304	ADDRESS HIGH/=<104:107>
							; 8305		MEMORY=1		;19 bits of physical address.
							; 8306		IO=17
							; 8307		ALL=17
							; 8308	
							; 8309	;	(These VMA flags only from DP:)
							; 8310	;3.8	IO cycle		IO cycle
							; 8311	;IO CYCLE
							; 8312	;3.7	WRU cycle
							; 8313	;3.6	Vector cycle
							; 8314	;3.5	Byte cycle		IO byte cycle
							; 8315	;IO BYTE
							; 8316	
							; 8317	;	(These VMA flags only from #:)
							; 8318	;3.9 - 3.7 XCTR control
							; 8319	;3.6 Hack for AREAD: DROM supplies 4.6 - 4.4 and 3.4
							; 8320	;3.5 Ignore 4.9 - 3.7 from # and use 4.9 - 3.5 from DP instead.
							; 8321	;3.4 Load the VMA
							; 8322	;3.3 Extended address:  Use 3.4 - 3.1
							; 8323	;3.2 Wait: Start a cycle.
							; 8324	;3.1 Hack for BWRITE: DROM supplies 3.2
							; 8325	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 188
; DSK: KSHACK; ITSPAG 88	15:15:37 24-NOV-84	ITS PAGE REFILL CODE

							; 8326	
							; 8327		.DCODE
D 0257, 1215,1553,0100					; 8328	257:	IOT,	AC,	J/UUO257	;Used to be MAP
							; 8329		.UCODE
							; 8330	
							; 8331	1553:
U 1553, 2556,4551,0202,4374,0007,0700,0000,0077,7740	; 8332	UUO257:	UUO
							; 8333	
							; 8334	;The hardware comes here with a page fail or pending interrupt:
							; 8335	3777:
							; 8336	PAGE-FAIL:
U 3777, 3516,3333,0003,7174,4007,0700,0400,0000,0211	; 8337		WORK[SV.AR]_[AR]
							; 8338		;;INTERRUPT-TRAP macro (which nobody uses) does the above and comes
							; 8339		;;here:
U 3516, 3517,3333,0004,7174,4007,0700,0400,0000,0212	; 8340	ITRAP:	WORK[SV.ARX]_[ARX]	;J/MVSKP
U 3517, 3520,3333,0006,7174,4007,0700,0400,0000,0214	; 8341		WORK[SV.BRX]_[BRX]
U 3520, 3521,3771,0006,4354,4007,0700,0000,0000,0000	; 8342		[BRX]_VMA		;BRX: FLAGS,,VMA
							; 8343		WORK[SV.VMA]_[BRX],
U 3521, 2440,3333,0006,7174,4007,0370,0400,0000,0210	; 8344		 SKIP IRPT		;See if interrupt (saves a dispatch)
							; 8345	=0000
							; 8346	PFD:	DBM/PF DISP, DBUS/DBM,	;Puts page fail condition on
							; 8347		 AD/D, DEST/PASS, 4T,	;DP 18-21.
U 2440, 2440,3773,0000,4304,4003,1702,0000,0000,0000	; 8348		 DISP/DP LEFT, J/PFD	;Dispatch on it.
							; 8349	=0001	WORK[SV.BR]_[BR],	;(1) Interrupt
U 2441, 3527,3333,0005,7174,4007,0700,0400,0000,0213	; 8350		 J/PF-INT
							; 8351	=0011	[BRX]_IO DATA,		;(3) Parity
							; 8352		 AD PARITY OK/0,	;Don't look at parity.
U 2443, 3522,3771,0006,4374,4007,0700,0000,0000,0000	; 8353		 J/BADDATA
							; 8354	=0101	[BRX]_[100000] XWD 0,	;(5) NXM 
U 2445, 3524,4571,1206,4374,4007,0700,0000,0010,0000	; 8355		 J/HARD
							; 8356	=0111	[BRX]_[140000] XWD 0,	;(7) NXM & Parity
U 2447, 3524,4571,1206,4374,4007,0700,0000,0014,0000	; 8357		 J/HARD
							; 8358	=1000	WORK[SV.BR]_[BR],	;(10) Read-only page
U 2450, 3531,3333,0005,7174,4007,0700,0400,0000,0213	; 8359		 J/PFMAP
							; 8360	=1010	WORK[SV.BR]_[BR],	;(12) Nonexistent page
U 2452, 3531,3333,0005,7174,4007,0700,0400,0000,0213	; 8361		 J/PFMAP
							; 8362	=1011	WORK[SV.BR]_[BR],	;(13) Exec/User mismatch
U 2453, 3531,3333,0005,7174,4007,0700,0400,0000,0213	; 8363		 J/PFMAP
							; 8364	=
							; 8365	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 189
; DSK: KSHACK; ITSPAG 88	15:15:37 24-NOV-84	ITS PAGE REFILL CODE

							; 8366	
							; 8367	;Here is how a hard memory error is handled:
							; 8368	BADDATA:
U 3522, 3523,3333,0006,7174,4007,0700,0400,0000,0160	; 8369		WORK[BADW0]_[BRX]	;Save bad word.
U 3523, 3524,4571,1206,4374,4007,0700,0000,0004,0000	; 8370		[BRX]_[040000] XWD 0
							; 8371		;;I/O failures come here from J/IOW5 with 200000 in BRX:
U 3524, 2430,3333,0005,7174,4007,0700,0400,0000,0213	; 8372	HARD:	WORK[SV.BR]_[BR]	;Finally save BR
							; 8373	=0	[BR]_VMA,		;VMA for page fail word.
U 2430, 3465,3771,0005,4354,4007,0700,0010,0000,0000	; 8374		 CALL [ABORT]		;Clear page fault condition. 
							; 8375		[BR]_[BR].AND.#,	;Save interesting flags:
							; 8376		 FORCE USER/1, PHYSICAL/1,
							; 8377		 IO CYCLE/1, IO BYTE/1,
U 2431, 3525,4551,0505,4374,0007,0700,0000,0040,1237	; 8378		 ADDRESS HIGH/ALL, HOLD RIGHT
U 3525, 3526,3111,0506,4174,4007,0700,0000,0000,0000	; 8379	=	[BRX]_[BRX].OR.[BR]	;BRX: Page fail word
U 3526, 2476,4553,1300,4374,4007,0321,0000,0001,0000	; 8380		PAGE FAIL TRAP
							; 8381	
							; 8382	;Here is what happens when the initial dispatch on the page fail condition
							; 8383	;tells us an interrupt is pending:
U 3527, 2434,4443,0000,4174,4007,0370,0000,0000,0000	; 8384	PF-INT:	SKIP IRPT		;Timer trap?
							; 8385	=00	[AR]_WORK[TIME1],	;Yes:  Get low word.
							; 8386		 SPEC/CLRCLK,		; Clear clock flag.
U 2434, 3361,3771,0003,7274,4117,0701,0010,0000,0301	; 8387		 CALL [TOCK]		; Do the update.  TOCK returns 2.
U 2435, 2500,3771,0003,7274,4007,0611,0000,0000,0210	; 8388		CLEANUP AND TRAP	;No:  External interrupt.
U 2436, 3530,4223,0000,4364,4277,0700,0200,0000,0010	; 8389		ABORT MEM CYCLE		;Clear 1ms flags.
							; 8390	=	[AR]_WORK[SV.VMA],	;Restore VMA and continue where 
U 3530, 3561,3771,0003,7274,4007,0701,0000,0000,0210	; 8391		 J/PAGE-CONTINUE	; we left off.
							; 8392	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 190
; DSK: KSHACK; ITSPAG 88	15:15:37 24-NOV-84	ITS PAGE REFILL CODE

							; 8393	
							; 8394	;Here we handle a soft page failure.  BRX contains VMA FLAGS,,VMA.
U 3531, 3532,4223,0000,4364,4277,0700,0200,0000,0010	; 8395	PFMAP:	ABORT MEM CYCLE		;Clear page fail condition.
U 3532, 2432,4553,0600,4374,4007,0321,0000,0002,0000	; 8396		TL [BRX], WRITE TEST/1	;Write test?
							; 8397	=0	[BRX]_[BRX].OR.#,	;Yes: Turn into simple write.
U 2432, 2433,3551,0606,4374,0007,0700,0000,0001,0000	; 8398		 WRITE CYCLE/1, HOLD RIGHT
							; 8399		[BRX]_[BRX].AND.#,	;Save interesting flags:
							; 8400		 FORCE USER/1, WRITE CYCLE/1, PHYSICAL/1,
U 2433, 3533,4551,0606,4374,0007,0700,0000,0041,1001	; 8401		 ADDRESS HIGH/MEMORY, HOLD RIGHT
							; 8402	=	[AR]_[BRX],		;Copy virtual address and
U 3533, 2454,3441,0603,4174,4007,0700,2000,0071,0011	; 8403		 SC_9.			;prepare to shift 11 places.
							; 8404	=0
							; 8405	PFMAP1:	[AR]_[AR]*.5,		;Right adjust page #
U 2454, 2454,3447,0303,4174,4007,0630,2000,0060,0000	; 8406		 STEP SC, J/PFMAP1
							; 8407		[AR]_[AR].AND.# CLR LH,	;AR: index off DBR
U 2455, 3534,4251,0303,4374,4007,0700,0000,0000,0077	; 8408		 #/77
U 3534, 2456,3333,0006,4174,4007,0520,0000,0000,0000	; 8409	=	READ [BRX], SKIP DP0	;User ref?
							; 8410	=0	READ [BRX], SKIP DP18,	;Exec high ref?
U 2456, 2462,3333,0006,4174,4007,0530,0000,0000,0000	; 8411		 J/EXEC-DBR
							; 8412		READ [BRX], SKIP DP18,	;User high ref?
U 2457, 2460,3333,0006,4174,4007,0530,0000,0000,0000	; 8413		 J/USER-DBR
							; 8414	=
							; 8415	
							; 8416	=0
							; 8417	USER-DBR:
							; 8418		[AR]_[AR]+WORK[DBR1],	;User low
U 2460, 3535,0551,0303,7274,4007,0701,0000,0000,0215	; 8419		 J/GOTDBR
							; 8420		[AR]_[AR]+WORK[DBR2],	;User high
U 2461, 3535,0551,0303,7274,4007,0701,0000,0000,0216	; 8421		 J/GOTDBR
							; 8422	=
							; 8423	
							; 8424	=0
							; 8425	EXEC-DBR:
							; 8426		[AR]_[AR]+WORK[DBR4],	;Exec low
U 2462, 3535,0551,0303,7274,4007,0701,0000,0000,0220	; 8427		 J/GOTDBR
							; 8428		[AR]_[AR]+WORK[DBR3],	;Exec high
U 2463, 3535,0551,0303,7274,4007,0701,0000,0000,0217	; 8429		 J/GOTDBR
							; 8430	=
							; 8431	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 191
; DSK: KSHACK; ITSPAG 88	15:15:37 24-NOV-84	ITS PAGE REFILL CODE

							; 8432	
							; 8433	;BRX: Original VMA FLAGS,,VMA modified as for a page fail word.
							; 8434	;AR: Address of page table word.
U 3535, 3536,3443,0300,4174,4007,0700,0200,0024,1016	; 8435	GOTDBR:	VMA_[AR], START READ, VMA PHYSICAL
U 3536, 3537,3771,0005,4365,5007,0700,0200,0000,0002	; 8436		MEM READ, [BR]_MEM
U 3537, 2464,4553,0600,4374,4007,0331,0000,0000,2000	; 8437		TR [BRX], #/2000	;Odd?
							; 8438	=0	[ARX]_[BR],		;Yes: entry is in right half, just copy it
U 2464, 3540,3441,0504,4174,4007,0700,0000,0000,0000	; 8439		 J/PTWRH		; into ARX.
							; 8440		[ARX]_[BR] SWAP,	;No: entry is in left half, so copy in ARX
U 2465, 3541,3770,0504,4344,4007,0700,0000,0000,0000	; 8441		 J/PTWLH		; is swapped first.
							; 8442	=
							; 8443	
							; 8444	PTWRH:	[BR]_[BR].OR.#,		;BR gets the word to write back with the 
							; 8445		 PTE AGE/1, HOLD LEFT,	; age bit set in the right half.
U 3540, 2466,3551,0505,4370,4007,0530,0000,0002,0000	; 8446		 SKIP DP18, J/PTWTST	;Test 2.9 of entry.
							; 8447	
							; 8448	PTWLH:	[BR]_[BR].OR.#,		;BR gets the word to write back with the 
							; 8449		 PTE AGE/1, HOLD RIGHT,	; age bit set in the left half.
U 3541, 2466,3551,0505,4374,0007,0520,0000,0002,0000	; 8450		 SKIP DP0, J/PTWTST	;Test 2.9 of entry.
							; 8451	
							; 8452	=0
U 2466, 2470,4553,0400,4374,4007,0331,0000,0020,0000	; 8453	PTWTST:	TR [ARX], #/200000, J/PTWTS0	;0X: Test 2.8
U 2467, 2472,4553,0400,4374,4007,0331,0000,0020,0000	; 8454		TR [ARX], #/200000, J/PTWTS1	;1X: Test 2.8
							; 8455	=
							; 8456	
							; 8457	=0
							; 8458	PTWTS0:	[BRX]_[BRX].OR.#,	;01: Read only
							; 8459		 PAGE ACCESS/1,		;Indicate that in page fail word.
							; 8460		 HOLD RIGHT,
U 2470, 3542,3551,0606,4374,0007,0700,0000,0000,2000	; 8461		 J/READ-ONLY
U 2471, 2476,4553,1300,4374,4007,0321,0000,0001,0000	; 8462		PAGE FAIL TRAP		;00: Not accessible.
							; 8463	=
							; 8464	
							; 8465	=0
							; 8466	PTWTS1:	[ARX]_[ARX].OR.#,	;11: Read/Write
							; 8467		 PTE WRITE/1,		;Set Writable bit in page table. 
							; 8468		 HOLD LEFT,
U 2472, 3543,3551,0404,4370,4007,0700,0000,0002,0000	; 8469		 J/PAGE-REFILL
							; 8470		[BRX]_[BRX].OR.#,	;10: Read/Write/First
							; 8471		 PAGE ACCESS/2,		;Indicate that in page fail word.
							; 8472		 HOLD RIGHT,
U 2473, 3542,3551,0606,4374,0007,0700,0000,0000,4000	; 8473		 J/READ-ONLY
							; 8474	=
							; 8475	
							; 8476	READ-ONLY:
							; 8477		TL [BRX],		;Were we perhaps trying to write?
U 3542, 2474,4553,0600,4374,4007,0321,0000,0001,0000	; 8478		 WRITE CYCLE/1
U 2474, 2476,4553,1300,4374,4007,0321,0000,0001,0000	; 8479	=0	PAGE FAIL TRAP		;That would be a problem wouldn't it!
							; 8480		[ARX]_[ARX].AND.NOT.#,	;Clear writable bit in page table.
							; 8481		 PTE WRITE/1,
							; 8482		 HOLD LEFT,
U 2475, 3543,5551,0404,4370,4007,0700,0000,0002,0000	; 8483		 J/PAGE-REFILL
							; 8484	=
							; 8485	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 192
; DSK: KSHACK; ITSPAG 88	15:15:37 24-NOV-84	ITS PAGE REFILL CODE

							; 8486	
							; 8487	;BRX: Original VMA FLAGS,,VMA modified as for a page fail word.
							; 8488	;AR: Address of page table word.
							; 8489	;ARX: Half formed page table entry in right half.
							; 8490	;BR: Original page table word with the age bit set.
							; 8491	PAGE-REFILL:
							; 8492		VMA_[AR],		;Prepare to put the word back.
							; 8493		 START WRITE,
U 3543, 3544,3443,0300,4174,4007,0700,0200,0023,1016	; 8494		 VMA PHYSICAL
							; 8495		MEM WRITE,		;Write it back.
U 3544, 3545,3333,0005,4175,5007,0701,0200,0000,0002	; 8496		 MEM_[BR]
U 3545, 3546,3771,0003,7274,4007,0701,0000,0000,0210	; 8497		[AR]_WORK[SV.VMA]	;AR: For PAGE-CONTINUE to use.
							; 8498		[BR]_[AR].AND.NOT.#,	;Clear bits which start a cycle.
							; 8499		 READ CYCLE/1, WRITE CYCLE/1,
U 3546, 3547,5551,0305,4374,0007,0700,0000,0007,0000	; 8500		 WRITE TEST/1, HOLD RIGHT
							; 8501		[BR]_[AR].AND.NOT.#,	;Make DEC page number even.
U 3547, 3550,5551,0305,4370,4007,0700,0000,0000,1000	; 8502		 #/1000, HOLD LEFT
U 3550, 3551,3443,0500,4174,4007,0701,0200,0000,0030	; 8503		VMA_[BR], 3T, DP FUNC/1	;Restore VMA and set User according to
							; 8504					;what it was.
							; 8505		[ARX]_([ARX].OR.#)*2,	;Set Valid bit and shift into position.
							; 8506		 3T, PTE VALID/1,
U 3551, 3552,3555,0404,4374,4147,0701,0000,0020,0000	; 8507		 LOAD PAGE TABLE	;Load page table on next instruction.
							; 8508		[ARX]_[ARX].AND.# CLR LH,	;Mask out all but the correct
							; 8509		 PT VALID/1, PT WRITE/1,	; bits.  Make the DEC physical
U 3552, 3553,4251,0404,4374,4007,0700,0000,0046,3776	; 8510		 PT CACHE/1, PT PAGE/EVEN	; page number even.
							; 8511		[BR]_[BR].OR.#,		;Make DEC page number in VMA odd.
U 3553, 3554,3551,0505,4370,4007,0700,0000,0000,1000	; 8512		 #/1000, HOLD LEFT
U 3554, 3555,3443,0500,4174,4007,0701,0200,0000,0030	; 8513		VMA_[BR], 3T, DP FUNC/1	;Restore VMA again for the odd page.
							; 8514		[ARX]_[ARX].OR.#,	;Then the odd physical page.
							; 8515		 #/1, HOLD LEFT,
U 3555, 3560,3551,0404,4370,4147,0700,0000,0000,0001	; 8516		 LOAD PAGE TABLE	;Load page table on next instruction.
							; 8517		READ [ARX],
U 3560, 3561,3333,0004,4174,4007,0700,0000,0000,0000	; 8518		 J/PAGE-CONTINUE
							; 8519	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 193
; DSK: KSHACK; ITSPAG 88	15:15:37 24-NOV-84	ITS PAGE REFILL CODE

							; 8520	
							; 8521	;Return to interrupted microinstruction after a successful page table
							; 8522	;reload or a timer trap.  AR should contain the right VMA to restart the
							; 8523	;memory cycle.
							; 8524	PAGE-CONTINUE:
U 3561, 3562,3771,0004,7274,4007,0701,0000,0000,0212	; 8525		[ARX]_WORK[SV.ARX]	;Restore saved stuff
U 3562, 3563,3771,0005,7274,4007,0701,0000,0000,0213	; 8526		[BR]_WORK[SV.BR]
U 3563, 3564,3771,0006,7274,4007,0701,0000,0000,0214	; 8527		[BRX]_WORK[SV.BRX]
							; 8528		VMA_[AR],		;MAKE MEM REQUEST
							; 8529		 DP FUNC/1, 3T,		;FROM DATA PATH
U 3564, 3565,3443,0300,4174,4007,0701,0200,0000,0032	; 8530		 WAIT/1			;WAIT FOR PREVIOUS CYCLE TO
							; 8531					; COMPLETE. (NEED THIS TO 
							; 8532					; START ANOTHER CYCLE)
							; 8533		[AR]_WORK[SV.AR],
U 3565, 0000,3771,0003,7274,4004,1701,0000,0000,0211	; 8534		 RETURN [0]
							; 8535	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 194
; DSK: KSHACK; ITSPAG 88	15:15:37 24-NOV-84	ITS PAGE REFILL CODE

							; 8536	
							; 8537	;;; Here we have hair to back us out of an instruction in case we have to
							; 8538	;;; deliver a page fault or an interrupt.  Think of it as micro PCLSRing.
							; 8539	;;; Anybody who comes to this page to deliver a page fault better have set
							; 8540	;;; up BRX to contain the right page fail word first.  Cleanup handlers
							; 8541	;;; better not smash it either.
							; 8542	
							; 8543	;PAGE FAIL TRAP macro does:
							; 8544	;	TL [FLG], FLG.PI/1,	;PI cycle?
							; 8545	;	 J/PFT
							; 8546	=0
U 2476, 2364,4751,1217,4374,4007,0700,0000,0000,0100	; 8547	PFT:	HALT [IOPF]		;Yes: IO Page Failure
U 2477, 2500,3771,0003,7274,4007,0611,0000,0000,0210	; 8548		CLEANUP AND TRAP	;No: deliver hard page fault.
							; 8549	=
							; 8550	
							; 8551	;CLEANUP AND TRAP macro does:
							; 8552	;	[AR]_WORK[SV.VMA],
							; 8553	;	 SKIP/TRAP CYCLE,	;See if trap cycle.
							; 8554	;	 J/CLTRP
							; 8555	=0
							; 8556	CLTRP:	TL [AR], FETCH/1,	;Is this an instruction fetch?
U 2500, 2502,4553,0300,4374,4007,0321,0000,0010,0000	; 8557		 J/CLTRP1
U 2501, 3566,3771,0003,7274,4007,0701,0000,0000,0425	; 8558		[AR]_WORK[TRAPPC]	;This is a trap cycle.
							; 8559	=	READ [AR], LOAD FLAGS,	;Restore PC flags.
U 3566, 3567,3333,0003,4174,4467,0700,0000,0000,0004	; 8560		 J/CLDISP
							; 8561	
							; 8562	=0
U 2502, 2504,4221,0013,4170,4007,0370,0000,0000,0000	; 8563	CLTRP1:	CLEANUP DONE		;Instruction fetch:  Everything is clean.
							; 8564		;;Many things jump here to backup the PC and cleanup.
U 2503, 3567,1111,0701,4170,4007,0700,4000,0000,0000	; 8565	FIXPC:	[PC]_[PC]-1, HOLD LEFT
							; 8566	=	;;Many things jump here to cleanup.
U 3567, 2520,3333,0013,4174,4003,5701,0000,0000,0000	; 8567	CLDISP:	READ [FLG], DBUS/DP, DISP/DP, 3T, J/CLEANUP
							; 8568		;;CLEANUP DISP macro (which nobody uses) does the above.
							; 8569	
							; 8570	=0000
							; 8571	CLEANUP:	;;Dispatch table to cleanup after a page fault or interrupt.
							; 8572	CLEANED:	;;J/BLT-CLEANUP	;(0) Normal case:  No more cleanup needed.
U 2520, 2504,4221,0013,4170,4007,0370,0000,0000,0000	; 8573		CLEANUP DONE		;Go deliver page fault or interrupt.  
							; 8574	=0001	[AR]_WORK[SV.ARX],	;(1) BLT
U 2521, 3006,3771,0003,7274,4007,0701,0000,0000,0212	; 8575		 J/BLT-CLEANUP
							; 8576					;(2) Unused.
							; 8577	=0011	STATE_[EDIT-SRC],	;(3) SRC IN STRING MOVE
U 2523, 3274,3771,0013,4370,4007,0700,0000,0000,0011	; 8578		 J/STRPF
							; 8579	=0100	STATE_[EDIT-DST],	;(4) DST IN STRING MOVE
U 2524, 3274,3771,0013,4370,4007,0700,0000,0000,0012	; 8580		 J/STRPF
							; 8581	=0101	STATE_[SRC],		;(5) SRC+DST IN STRING MOVE
U 2525, 2122,3771,0013,4370,4007,0700,0000,0000,0003	; 8582		 J/BACKD
							; 8583	=0110	STATE_[EDIT-DST],	;(6) FILL IN MOVSRJ
U 2526, 3303,3771,0013,4370,4007,0700,0000,0000,0012	; 8584		 J/STRPF4
							; 8585	=0111	STATE_[EDIT-SRC],	;(7) DEC TO BIN
U 2527, 3300,3771,0013,4370,4007,0700,0000,0000,0011	; 8586		 J/PFDBIN
							; 8587	=1000	STATE_[EDIT-SRC],	;(10) SRC+DST IN COMP
U 2530, 3272,3771,0013,4370,4007,0700,0000,0000,0011	; 8588		 J/CMSDST
U 2531, 2120,4221,0013,4170,4007,0700,0000,0000,0000	; 8589	=1001	END STATE, J/BACKS	;(11) EDIT SRC FAIL
U 2532, 2122,4221,0013,4170,4007,0700,0000,0000,0000	; 8590	=1010	END STATE, J/BACKD	;(12) EDIT DST FAIL
							; 8591	=1011	STATE_[EDIT-SRC],	;(13) SRC+DST IN EDIT
U 2533, 2122,3771,0013,4370,4007,0700,0000,0000,0011	; 8592		 J/BACKD
							; 8593	=
							; 8594	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 195
; DSK: KSHACK; ITSPAG 88	15:15:37 24-NOV-84	ITS PAGE REFILL CODE

							; 8595	
							; 8596	;CLEANUP DONE macro does:
							; 8597	;	END STATE, SKIP IRPT, J/PFTRAP
							; 8598	=0
							; 8599	PFTRAP:	TR [PI],		;Here to deliver page fault after cleanup.
							; 8600		 PI.IP1/1, PI.IP2/1,	; This hack figures out what 3 locations to
							; 8601		 PI.IP3/1, PI.IP4/1,	; use to deliver the page fault.
U 2504, 2506,4553,1400,4374,4007,0331,0000,0007,4000	; 8602		 J/PFTDSP
U 2505, 2270,3551,1313,4374,0007,0700,0000,0001,0000	; 8603		TAKE INTERRUPT		;Here to deliver interrupt after cleanup.
							; 8604					; J/PI after setting FLG.PI
							; 8605	=
							; 8606	
							; 8607	=0
U 2506, 2510,4553,1400,4374,4007,0331,0000,0006,0000	; 8608	PFTDSP:	TR [PI], PI.IP1/1, PI.IP2/1, J/PFTDS1
U 2507, 2512,4553,1400,4374,4007,0331,0000,0000,3000	; 8609		TR [PI], PI.IP5/1, PI.IP6/1, J/PFTDS0
							; 8610	=0
U 2510, 2514,4553,1400,4374,4007,0331,0000,0004,0000	; 8611	PFTDS1:	TR [PI], PI.IP1/1, J/PFTD11
U 2511, 2516,4553,1400,4374,4007,0331,0000,0001,0000	; 8612		TR [PI], PI.IP3/1, J/PFTD10
							; 8613	=0
U 2512, 2534,4553,1400,4374,4007,0331,0000,0000,2000	; 8614	PFTDS0:	TR [PI], PI.IP5/1, J/PFTD01
U 2513, 2536,4553,1400,4374,4007,0331,0000,0000,0400	; 8615		TR [PI], PI.IP7/1, J/PFTD00
							; 8616	=0
U 2514, 3570,4751,1203,4374,4007,0700,0000,0000,0443	; 8617	PFTD11:	[AR]_0 XWD [443], J/PFTRAP1
U 2515, 3570,4751,1203,4374,4007,0700,0000,0000,0446	; 8618		[AR]_0 XWD [446], J/PFTRAP1
							; 8619	=0
U 2516, 3570,4751,1203,4374,4007,0700,0000,0000,0451	; 8620	PFTD10:	[AR]_0 XWD [451], J/PFTRAP1
U 2517, 3570,4751,1203,4374,4007,0700,0000,0000,0454	; 8621		[AR]_0 XWD [454], J/PFTRAP1
							; 8622	=0
U 2534, 3570,4751,1203,4374,4007,0700,0000,0000,0457	; 8623	PFTD01:	[AR]_0 XWD [457], J/PFTRAP1
U 2535, 3570,4751,1203,4374,4007,0700,0000,0000,0462	; 8624		[AR]_0 XWD [462], J/PFTRAP1
							; 8625	=0
U 2536, 3570,4751,1203,4374,4007,0700,0000,0000,0465	; 8626	PFTD00:	[AR]_0 XWD [465], J/PFTRAP1
U 2537, 3570,4751,1203,4374,4007,0700,0000,0000,0440	; 8627		[AR]_0 XWD [440], J/PFTRAP1
							; 8628	=
							; 8629	
							; 8630	PFTRAP1:
							; 8631		[AR]_[AR]+[EBR],	; Where to store PFW
U 3570, 3571,0111,1003,4174,4007,0700,0200,0021,1016	; 8632		 VMA PHYSICAL WRITE
							; 8633		MEM WRITE,		; Store PFW
U 3571, 3572,3333,0006,4175,5007,0701,0200,0000,0002	; 8634		 MEM_[BRX]
U 3572, 3573,0111,0703,4170,4007,0700,0200,0023,1016	; 8635		NEXT [AR] PHYSICAL WRITE	; Where to store old PC
U 3573, 3574,3741,0105,4074,4007,0700,0000,0000,0000	; 8636		[BR]_PC WITH FLAGS	; Get old PC
							; 8637		MEM WRITE,		; Store old PC
U 3574, 3575,3333,0005,4175,5007,0701,0200,0000,0002	; 8638		 MEM_[BR]
							; 8639		[AR]_[AR]+1,		; Where to get new PC
							; 8640		 VMA PHYSICAL READ,
U 3575, 2562,0111,0703,4174,4007,0700,0200,0024,1016	; 8641		 J/GOEXEC
							; 8642	
							; 8643	.ENDIF/ITS
							; 8644	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 196
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	ITS PAGE REFILL CODE

							; 8645	;;;-*-Fundamental-*-
							; 8646	
; 8647		.NOBIN
; 8648	.TOC	"PAGE FAIL REFIL LOGIC"
; 8649	
; 8650	.IFNOT/ITS
; 8651	
; 8652	;WHEN THE CPU CAN NOT COMPLETE A MEMORY REFERENCE BECAUSE THE PAGE
; 8653	; TABLE DOES NOT CONTAIN VALID INFORMATION FOR THE VIRTUAL PAGE INVOLVED
; 8654	; THE HARDWARE CALLS THIS ROUTINE TO RELOAD THE HARDWARE PAGE TABLE.
; 8655	;
; 8656	;THIS CODE WILL EITHER DO THE RELOAD OR GENERATE A PAGE FAIL FOR THE
; 8657	; SOFTWARE. THE INFORMATION LOADED CONSISTS OF THE PHYSICAL PAGE NUMBER,
; 8658	; THE CACHE ENABLE BIT AND THE WRITE ENABLE BIT.
; 8659	
; 8660	;THIS LOGIC USES MANY VARIABLES. THEY ARE DESCRIBED BRIEFLY HERE:
; 8661	
; 8662	;THING			WHERE KEPT			USE
; 8663	;OLD VMA		WORKSPACE WORD 210		SAVES VMA
; 8664	;OLD AR 		WORKSPACE WORD 211		SAVES AR
; 8665	;OLD ARX		WORKSPACE WORD 212		SAVES ARX
; 8666	;OLD BR 		WORKSPACE WORD 213		SAVES BR
; 8667	;OLD BRX		WORKSPACE WORD 214		SAVES BRX
; 8668	;KL PAGING BIT		EBR BIT 1 (IN 2901)		INDICATES KL STYLE (TOPS-20) PAGING
; 8669	;							INSTEAD OF KI STYLE (TOPS-10 AND DIAGNOSTIC)
; 8670	;							MODE PAGING
; 8671	;W BIT			FLG BIT 4			PAGE CAN BE WRITTEN
; 8672	;C BIT			FLG BIT 6			DATA IN THIS PAGE MAY BE PUT
; 8673	;							INTO CACHE
; 8674	;PI CYCLE		FLG BIT 5			STORING OLD PC DURING PI
; 8675	;MAP FLAG		FLG BIT 18			MAP INSTRUCTION IN PROGRESS
; 8676	;CLEANUP CODE		FLG BITS 32-35			WHAT TO DO SO INSTRUCTION MAY BE
; 8677	;							RESTARTED
; 8678	;SPT BASE		WORKSPACE WORD 215		ADDRESS OF SHARED-POINTER-TABLE
; 8679	;CST BASE		WORKSPACE WORD 216		ADDRESS OF CORE-STATUS-TABLE
; 8680	;CST MASK		WORKSPACE WORD 217		BITS TO KEEP ON CST UPDATE
; 8681	;CST DATA (PUR) 	WORKSPACE WORD 220		BITS TO SET ON CST UPDATE
; 8682	;PAGE TABLE ADDRESS	AR				WHERE THIS PAGE TABLE IS LOCATED
; 8683	;PHYSICAL PAGE # (PPN)	AR				RESULT OF THIS PROCESS
; 8684	;CST ENTRY		AR				CORE STATUS TABLE ENTRY
; 8685	;SPT ENTRY		AR				WORD FROM SPT
; 8686	;PAGE TABLE ENTRY	AR				WORD FROM PT
; 8687	;PAGE NUMBER		BR				INDEX INTO CURENT PAGE TABLE
; 8688	;PAGE FAIL WORD 	BRX				WHAT HAPPENED (ALSO MAP RESULT)
; 8689	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 197
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 8690	
; 8691	;
; 8692	;
; 8693	;
; 8694	;		   KL10 PAGING - WORD FORMATS
; 8695	;
; 8696	;Section Pointer
; 8697	;
; 8698	;The section pointer is found in the user or exec section table.
; 8699	;(Part of UPT or EPT.)
; 8700	;
; 8701	;Section pointer provides (via the SPT) the physical address  of
; 8702	;the PAGE TABLE for the given section.
; 8703	;
; 8704	;	 Code:	 0	 No-access (trap)
; 8705	;		 1	 Immediate
; 8706	;		 2	 Share
; 8707	;		 3	 Indirect
; 8708	;		 4-7	 Unused, reserved
; 8709	;
; 8710	;	 0 1 2 3 4 5 6		 18			 35
; 8711	;	 +----+-+-+-+-+---------+-------------------------+	
; 8712	;	 !CODE!P!W! !C!/////////!  PAGE TABLE IDENTIFIER  !
; 8713	;	 !010 ! ! ! ! !/////////!	 (SPT INDEX)	  !
; 8714	;	 +----+-+-+-+-+---------+-------------------------+
; 8715	;
; 8716	;		NORMAL SECTION POINTER (Code = 2)
; 8717	;
; 8718	;	 0   2 3 4 5 6	   9	       18		      35
; 8719	;	 +----+-+-+-+-+---+-----------+------------------------+
; 8720	;	 !CODE!P!W! !C!///!SECTION    !SECTION TABLE IDENTIFIER!
; 8721	;	 !011 ! ! ! ! !///!TABLE INDEX!       (SPT INDEX)      !
; 8722	;	 +----+-+-+-+-+---+-----------+------------------------+
; 8723	;
; 8724	;	       INDIRECT SECTION POINTER (Code = 3)
; 8725	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 198
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 8726	
; 8727	;PAGE POINTERS
; 8728	;
; 8729	;FOUND IN PAGE TABLES
; 8730	;
; 8731	;	 0 1 2 3 4 5 6	    12				 35
; 8732	;	 +----+-+-+-+-+----+------------------------------+
; 8733	;	 !CODE!P!W! !C!////!   PHYSICAL ADDRESS OF PAGE   !
; 8734	;	 !001 ! ! ! ! !////!				  !
; 8735	;	 +----+-+-+-+-+----+------------------------------+
; 8736	;
; 8737	;		 IMMEDIATE POINTER (code field = 1)
; 8738	;
; 8739	;	 B12-35  give PHYSICAL ADDRESS OF PAGE
; 8740	;	     if  B12-17 >< 0, page not in core-trap
; 8741	;	     if  B12-17 =  0, B23-35 give CORE PAGE
; 8742	;			      NUMBER of page, B18-22 MBZ
; 8743	;
; 8744	;
; 8745	;
; 8746	;
; 8747	;
; 8748	;	 0    2 3     6 	  18			 35
; 8749	;	 +-----+-------+---------+------------------------+
; 8750	;	 !CODE !SAME AS!/////////!	  SPT INDEX	  !
; 8751	;	 !010  ! IMMED.!/////////!			  !
; 8752	;	 +-----+-------+---------+------------------------+
; 8753	;
; 8754	;		 SHARED POINTER (code field = 2)
; 8755	;
; 8756	;	 B18-35  Give SPT INDEX (SPTX).  SPTX + SPT BASE
; 8757	;		 ADDRESS = physical core address of word
; 8758	;		 holding physical address of page.
; 8759	
; 8760	;	 0 1 2 3      6     9	 17 18			 35
; 8761	;	 +----+--------+---+-------+----------------------+
; 8762	;	 !CODE!SAME AS !///! PAGE  ! PAGE TABLE IDENTIFIER!	
; 8763	;	 !011 ! IMMED. !///!NUMBER !	 (SPT INDEX)	  !
; 8764	;	 +----+--------+---+-------+----------------------+
; 8765	;
; 8766	;		 INDIRECT POINTER (code field = 3)
; 8767	;
; 8768	;	 This pointer type causes another pointer to be  fetched
; 8769	;	 and  interpreted.   The  new pointer is found in word N
; 8770	;	 (B9-17) of the page addressed by C(SPT + SPTX).
; 8771	;
; 8772	;
; 8773	;
; 8774	;	 SPT ENTRY
; 8775	;
; 8776	;	 Found in the SPT, i.e., when fetching C(SPT +SPTX)
; 8777	;
; 8778	;			       12			 35
; 8779	;	 +--------------------+---------------------------+
; 8780	;	 !////////////////////!  PHYSICAL ADDRESS OF PAGE !
; 8781	;	 !////////////////////! 	 OR PAGE TABLE	  !
; 8782	;	 +--------------------+---------------------------+
; 8783	;
; 8784	;		 B12-35  Give PHYSICAL ADDRESS of page.
; 8785	;
; 8786	;	 The base address (physical core  address)  of	the  SPT
; 8787	;	 resides in one AC of the reserved AC block.
; 8788	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 199
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 8789	
; 8790	;PHYSICAL STORAGE ADDRESS
; 8791	;
; 8792	;Found in B12-35 of IMMEDIATE POINTERS and SPT ENTRIES.
; 8793	;
; 8794	;			 12	 17 18	 23		 35
; 8795	;			 +---------+----+-----------------+
; 8796	;			 !	   !MBZ ! CORE PAGE NUMBER!
; 8797	;			 !	   !	!   IF B12-17 = 0 !
; 8798	;			 +---------+----+-----------------+
; 8799	;
; 8800	;	 If B12-17 = 0, then B23-35 are CORE PAGE NUMBER  (i.e.,
; 8801	;	 B14-26  of  physical  core  address) of page and B18-22
; 8802	;	 MBZ.  If B12-17 >< 0, then  address  is  not  core  and
; 8803	;	 pager traps.
; 8804	;
; 8805	;
; 8806	;
; 8807	;CORE STATUS TABLE ENTRY
; 8808	;
; 8809	;Found when fetching C(CBR + CORE PAGENO)
; 8810	;
; 8811	;	 0	5				  32  34 35
; 8812	;	 +-------+-------------------------------+------+-+
; 8813	;	 !  CODE !				 !	!M!
; 8814	;	 +-------+-------------------------------+------+-+
; 8815	;
; 8816	;	 B0-5	 are code field:
; 8817	;
; 8818	;		 0 - unavailable, trap
; 8819	;
; 8820	;		 1-77 - available
; 8821	;
; 8822	;
; 8823	;
; 8824	;	 B32-34 reserved for future hardware specification.
; 8825	;
; 8826	;	 B35 is "modified" bit, set on any write ref to page.
; 8827	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 200
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 8828	
; 8829	;QUANTITIES IN HARDWARE REGISTERS
; 8830	;
; 8831	;SPT	 SPT Base Register
; 8832	;
; 8833	;			 14				 35
; 8834	;			 +--------------------------------+
; 8835	;			 !   PHYSICAL CORE WORD ADDRESS   !
; 8836	;			 +--------------------------------+
; 8837	;
; 8838	;CBR	 CST Base Register
; 8839	;
; 8840	;			 14				 35
; 8841	;			 +--------------------------------+
; 8842	;			 !   PHYSICAL CORE WORD ADDRESS   !
; 8843	;			 +--------------------------------+
; 8844	;
; 8845	;CSTMSK  CST Update Mask
; 8846	;
; 8847	;	 0					     32  35
; 8848	;	 +------------------------------------------+---+-+
; 8849	;	 !			 MASK		    !111!1!
; 8850	;	 +------------------------------------------+---+-+
; 8851	;
; 8852	;		 ANDed with CST word during update
; 8853	;
; 8854	;(B32-35 must be all 1's to preserve existing CST information)
; 8855	;
; 8856	;CSTDATA CST Update Data
; 8857	;
; 8858	;	 0				      32 34 35	
; 8859	;	 +------------------------------------------+---+-+
; 8860	;	 !			 DATA		    !000!0!
; 8861	;	 +------------------------------------------+---+-+
; 8862	;
; 8863	;		 IORed with CST word during update
; 8864	;
; 8865	;(B32-35 must be all 0's to preserve existing CST information)
; 8866	;
; 8867	;All  unspecified  bits  and  fields  are  reserved  for  future
; 8868	;specification by DEC.
; 8869	;
; 8870	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 201
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 8871	
; 8872		.BIN
; 8873	
; 8874		.DCODE
; 8875	257:	IOT,	AC,	J/MAP
; 8876		.UCODE
; 8877	
; 8878	1553:
; 8879	MAP:	[AR]_[AR].OR.#,		;ASSUME PHYSICAL REF
; 8880		 #/160000,		;FAKE ANSWER (Set Accessible, Writable,
; 8881		 HOLD RIGHT		;and "Software".)
; 8882		[BRX]_VMA		;PUT VMA AND FLAGS IN BRX
; 8883		[BRX]_[BRX].AND.#,	;JUST KEEP USER BIT
; 8884		 #/400000, HOLD RIGHT	; ..
; 8885		WORK[SV.VMA]_[BRX]	;SAVE IN WORKSPACE
; 8886		[BR]_WORK[APR]		;GET APR FLAGS
; 8887		TR [BR], #/030000	;PAGING ENABLED?
; 8888	=0	STATE_[MAP], J/PFMAP	;YES--DO REAL MAP
; 8889		AC_[AR], NEXT INST	;NO--RETURN VIRTUAL ADDRESS
; 8890	;HARDWARE COMES HERE ON PAGE TABLE NOT VALID (OR INTERRUPT) WHEN
; 8891	; STARTING A MEMORY REFERENCE. MICOWORD ADDRESS OF INSTRUCTION DOING
; 8892	; MEM WAIT IS SAVED ON THE STACK.
; 8893	3777:
; 8894	PAGE-FAIL:
; 8895		WORK[SV.AR]_[AR]
; 8896	ITRAP:	WORK[SV.BRX]_[BRX]
; 8897		[BRX]_VMA
; 8898		WORK[SV.VMA]_[BRX]
; 8899		WORK[SV.ARX]_[ARX],
; 8900		 SKIP IRPT		;SEE IF INTERRUPT (SAVE DISPATCH)
; 8901	=0000
; 8902	PFD:	DBM/PF DISP, DBUS/DBM,	;BRING CODE TO 2901'S
; 8903		 AD/D, DEST/PASS, 4T,	;PUT ON DP 18-21
; 8904		 DISP/DP LEFT, J/PFD	;DISPATCH ON IT
; 8905	=0001				;(1) INTERRUPT
; 8906		WORK[SV.BR]_[BR], J/PFPI1
; 8907	=0011				;(3) BAD DATA FROM MEMORY
; 8908		[BRX]_IO DATA,		;GET THE BAD DATA
; 8909		 AD PARITY OK/0,	; DO NOT LOOK AT PARITY
; 8910		 J/BADDATA		;SAVE IN AC BLK 7
; 8911	=0101				;(5) NXM ERROR
; 8912		[BRX]_[370000] XWD 0, J/HARD
; 8913	=0111				;(7) NXM & BAD DATA
; 8914		[BRX]_[370000] XWD 0, J/HARD
; 8915	=1000				;(10) WRITE VIOLATION
; 8916		WORK[SV.BR]_[BR], J/PFMAP
; 8917	=1010				;(12) PAGE NOT VALID
; 8918		WORK[SV.BR]_[BR], J/PFMAP
; 8919	=1011				;(13) EXEC/USER MISMATCH
; 8920		WORK[SV.BR]_[BR], J/PFMAP
; 8921	=
; 8922	
; 8923	BADDATA:
; 8924		WORK[BADW0]_[BRX]	;SAVE BAD WORD
; 8925		WORK[BADW1]_[BRX]	;AGAIN
; 8926		[BRX]_[360000] XWD 0, J/HARD
; 8927	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 202
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 8928	
; 8929	;WE HAVE SAVED AR, ARX, BR AND BRX. WE MERGE IN HERE FROM MAP
; 8930	; INSTRUCTION, SAVE THE VMA AND START THE PAGE FAIL WORD.
; 8931	PFMAP:	ABORT MEM CYCLE		;CLEAR PAGE FAIL
; 8932		[FLG]_[FLG].OR.#,	;PRESET W AND C TO 1
; 8933		 FLG.W/1, FLG.C/1,	;BITS INVOLVED
; 8934		 HOLD RIGHT		;LEAVE RH ALONE
; 8935		TL [BRX], WRITE TEST/1	;IS THIS A WRITE TEST?
; 8936	=0	[BRX]_[BRX].OR.#,
; 8937		 #/10000,
; 8938		 HOLD RIGHT		;YES--TURN INTO WRITE REF
; 8939		[BRX]_[BRX].AND.#,	;START PAGE FAIL WORD
; 8940		 #/411000,		;SAVE 3 INTERESTING BITS
; 8941		 HOLD RIGHT		;SAVE VIRTUAL ADDRESS
; 8942					;USER ADDR (400000)
; 8943					;WRITE REF (010000)
; 8944					;PAGED REF (001000)
; 8945		[BRX]_[BRX].XOR.#,	;FIX BIT 8
; 8946		 #/1000, HOLD RIGHT
; 8947		[BR]_[BRX],		;COPY VIRTUAL ADDRESS
; 8948		 SC_7			;PREPARE TO SHIFT 9 PLACES
; 8949	=0
; 8950	PF25:	[BR]_[BR]*.5,		;RIGHT ADJUST PAGE #
; 8951		 STEP SC,		;COUNT SHIFT STEPS
; 8952		 J/PF25			;LOOP FOR 9
; 8953		[BR]_[BR].AND.# CLR LH,	;MASK TO 9 BITS
; 8954		 #/777			; ..
; 8955		TL [EBR],		;KI MODE REFILL?
; 8956		 #/40			;FLAG BIT
; 8957	=0	READ [BRX],		;USER REF? (KL MODE)
; 8958		 SKIP DP0,		; ..
; 8959		 J/PF30			;CONTINUE AT PF30
; 8960		[ARX]_[BR]*.5,		;KI10 MODE REFILL
; 8961		 J/KIFILL		;GO HANDLE EASY CASE
; 8962	
; 8963	;HERE IN TOPS-20 MODE
; 8964	;PICK UP CORRECT SECTION POINTER
; 8965	=0
; 8966	PF30:	[ARX]_WORK[PTA.E],	;EXEC MODE
; 8967		 SKIP AD.EQ.0, 4T,	;SEE IF VALID
; 8968		 J/PF35			;CONTINUE BELOW
; 8969		[ARX]_WORK[PTA.U],	;USER MODE
; 8970		 SKIP AD.EQ.0, 4T	;SEE IF VALID
; 8971	=0	VMA_[ARX]+[BR],		;POINTER VALID
; 8972		 VMA PHYSICAL READ,	;START MEMORY
; 8973		 J/PF77			;CONTINUE BELOW
; 8974		[AR]_[UBR]+#, 3T,	;USER MODE
; 8975		 #/540,			;OFFSET TO UPT
; 8976		 J/PF40			;GO GET POINTER
; 8977	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 203
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 8978	
; 8979	=0
; 8980	PF35:	VMA_[ARX]+[BR],		;POINTER VALID
; 8981		 VMA PHYSICAL READ,	;START MEMORY
; 8982		 J/PF77			;CONTINUE BELOW
; 8983		[AR]_[EBR]+#, 3T,	;EXEC MODE
; 8984		 #/540			;OFFSET TO EPT
; 8985	PF40:	VMA_[AR],		;LOAD THE VMA
; 8986		 START READ,		;START THE MEMORY CRANKING
; 8987		 VMA PHYSICAL		;ABSOLUTE ADDRESS
; 8988		MEM READ,		;WAIT FOR MEMORY
; 8989		 [AR]_MEM		;POINT POINTER IN AR
; 8990	;LOOK AT SECTION POINTER AND DISPATCH ON TYPE
; 8991	=000
; 8992	PF45:	SC_7,			;FETCH SECTION 0 POINTER
; 8993		 CALL [SETPTR]		;FIGURE OUT POINTER TYPE
; 8994	SECIMM:	TL [AR],		;IMMEDIATE POINTER
; 8995		 #/77,			;TEST FOR 12-17 = 0
; 8996		 J/PF50			;CONTINUE AT PF50
; 8997		[AR]_[AR]+WORK[SBR],	;SHARED SECTION
; 8998		 J/SECSHR		;GO FETCH POINTER FROM SPT
; 8999		[AR]_[AR]+WORK[SBR],	;INDIRECT SECTION POINTER
; 9000		 CALL [RDPT]		;GO FETCH SPT ENTRY
; 9001	=111	TL [AR],		;12 TO 17 = 0?
; 9002		 #/77			; ..
; 9003	=
; 9004	=0	PAGE FAIL TRAP		;NO
; 9005		[AR]_[AR]*2,		;FIRST SHIFT
; 9006		 STEP SC		;SC WAS LOADED AT PF45
; 9007	=0*0
; 9008	PF60:	[AR]_[AR]*2,		;CONVERT TO ADDRESS OF
; 9009		 STEP SC,		; SECTION TABLE
; 9010		 J/PF60
; 9011		CALL [RDPT]		;READ SECTION TABLE
; 9012	=1*1	J/PF45			;TRY AGAIN
; 9013	=
; 9014	
; 9015	;HERE FOR SHARED SECTION. AR GETS THE ADDRESS OF PAGE TABLE
; 9016	=0**
; 9017	SECSHR:	CALL [RDPT]		;READ WORD FROM SPT
; 9018		TL [AR], #/77		;TEST FOR BITS 12-17 = 0
; 9019	
; 9020	;HERE WITH ADDRESS OF PAGE TABLE IN AR AND SKIP ON
; 9021	; BITS 12 THRU 17 EQUAL TO ZERO
; 9022	=0
; 9023	PF50:	PAGE FAIL TRAP		;BITS 12-17 .NE. 0
; 9024		[ARX]_[AR].AND.# CLR LH, ;PAGE NUMBER OF PAGE TABLE
; 9025		 #/3777			;11 BIT PHYSICAL PAGE #
; 9026	=0*	[AR]_[ARX],		;COPY ADDRESS
; 9027		 CALL [UPCST]		;UPDATE CST0
; 9028	PF70:	[AR]_[AR].OR.WORK[PUR]	;PUT IN NEW AGE AND
; 9029					; USE BITS
; 9030	=0**	START NO TEST WRITE,	;START MEMORY WRITE
; 9031		 CALL [IBPX]		;GO STORE IN MEMORY
; 9032		SC_7			;THIS CAN BE BUMMED
; 9033	=0
; 9034	PF75:	[ARX]_[ARX]*2,		;CONVERT PAGE NUMBER TO
; 9035		 STEP SC,		; PAGE ADDRESS
; 9036		 J/PF75			;LOOP OVER 9 STEPS
; 9037	
; 9038	;WE NOW HAVE THE ADDRESS OF THE PAGE TABLE ENTRY. GO
; 9039	; READ IT AND START ANALYSIS
; 9040	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 204
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 9041	
; 9042	;IF WE ARE HERE FOR THE FIRST TIME FOR THE USER OR EXEC SAVE THE
; 9043	; ADDRESS OF THE PAGE TABLE IN PTA.E OR PTA.U SO THAT WE DO NOT
; 9044	; HAVE TO DO THE SECTION LOOKUP EVERY TIME.
; 9045		READ [BRX], SKIP DP0	;USER OR EXEC REF?
; 9046	=000	[AR]_WORK[PTA.E],	;EXEC MODE
; 9047		 SKIP AD.EQ.0, 4T,	;SEE IF SET YET
; 9048		 CALL [SHDREM]		;SHOULD WE REMEMBER PTR
; 9049		[AR]_WORK[PTA.U],	;USER MODE
; 9050		 SKIP AD.EQ.0, 4T,	;SEE IF SET YET
; 9051		 CALL [SHDREM]		;SHOULD WE REMEMBER PTR
; 9052		WORK[PTA.E]_[ARX],	;SAVE FOR EXEC
; 9053		 J/PF76			;CONTINUE BELOW
; 9054		WORK[PTA.U]_[ARX],	;SAVE FOR USER
; 9055		 J/PF76			;CONTINUE BELOW
; 9056	=111
; 9057	PF76:	VMA_[ARX]+[BR], 	;READ PAGE POINTER
; 9058		 START READ,
; 9059		 VMA PHYSICAL
; 9060	=
; 9061	=00
; 9062	PF77:	MEM READ,		;START ANALYSIS OF POINTER
; 9063		 [AR]_MEM,
; 9064		 CALL [SETPTR]
; 9065	PTRIMM:	TL [AR],		;IMMEDIATE POINTER
; 9066		 #/77,			;CHECK FOR BITS 0-5
; 9067		 J/PF80			;GO TO PF80
; 9068		[AR]_[AR]+WORK[SBR],	;SHARED POINTER
; 9069		 J/PTRSHR		;GO TO READ SPT
; 9070	
; 9071	;INDIRECT POINTER. CHANGE PAGE # AND LOOK FOR PAGE TABLE
; 9072	PTRIND:	[BR]_[AR] SWAP, 	;PUT IN RIGHT HALF
; 9073		 SKIP/-1 MS		;DID CLOCK GO OFF
; 9074	=0	WORK[SV.AR1]_[AR],	;YES--UPDATE CLOCK
; 9075		 J/PFTICK		; ..
; 9076		[BR]_[BR].AND.# CLR LH,	;UPDATE PAGE # AND RESTART
; 9077		 #/777,			;MASK FOR PAGE #
; 9078		 SKIP IRPT		;SEE IF THIS IS A LOOP
; 9079	=0	[AR]_[AR].AND.#,	;CHANGE INDIRECT POINTER
; 9080		 #/277000,		; INTO SHARE POINTER
; 9081		 HOLD RIGHT,		; ..
; 9082		 J/PF45			;GO BACK AND TRY AGAIN
; 9083		PAGE FAIL TRAP		;POINTER LOOP
; 9084	
; 9085	=0**
; 9086	PTRSHR:	CALL [RDPT]		;GO LOOK AT POINTER
; 9087		TL [AR],		;BITS 12-17 .EQ. 0?
; 9088		 #/77
; 9089	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 205
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 9090	
; 9091	;HERE WITH FINAL POINTER. SKIP IF 12-17 NOT EQUAL TO ZERO
; 9092	=00
; 9093	PF80:	PAGE FAIL TRAP		;NO--TAKE A TRAP
; 9094		[ARX]_[AR].AND.# CLR LH,;SAVE PHYSICAL PAGE #
; 9095		 #/3777,		;MASK TO 13 BITS
; 9096		 CALL [UPCST]		;UPDATE CST0
; 9097	;HERE WE HAVE CST ENTRY IN AR, PAGE FAIL WORD IN BRX. GO LOOK
; 9098	; AT WRITABLE AND WRITTEN BITS
; 9099	=11
; 9100	PF90:	[BRX]_[BRX].OR.#,	;TRANSLATION IS VALID
; 9101		 #/100000, HOLD RIGHT	; ..
; 9102		TL [FLG], FLG.W/1	;IS THIS PAGE WRITABLE?
; 9103	=0	[BRX]_[BRX].OR.#,	;YES--INDICATE THAT IN PFW
; 9104		 #/020000,
; 9105		 J/PF100		;NOT WRITE VIOLATION
; 9106		TL [BRX],		;IS THIS A WRITE REF?
; 9107		 WRITE TEST/1, WRITE CYCLE/1
; 9108	=0	PAGE FAIL TRAP		;WRITE VIOLATION
; 9109	PF107:	[AR]_[AR].OR.WORK[PUR],	;PUT IN NEW AGE
; 9110		 J/PF110		;GO TO STORE CST ENTRY
; 9111	
; 9112	=0*
; 9113	PFTICK:	[AR]_WORK[TIME1],	;UPDATE TIMER
; 9114		 SPEC/CLRCLK, CALL [TOCK]
; 9115		[AR]_WORK[SV.AR1],	;RESTORE AR
; 9116		 J/PTRIND		;GO TRY AGAIN
; 9117	
; 9118	;HERE IF PAGE IS WRITABLE
; 9119	PF100:	TL [BRX], WRITE CYCLE/1	;IS THIS A WRITE REF?
; 9120	=0	[AR]_[AR].OR.#, 	;YES--SET WRITTEN BIT
; 9121		 #/1,
; 9122		 HOLD LEFT,
; 9123		 J/PF105
; 9124		TR [AR],		;NOT WRITE, ALREADY WRITTEN?
; 9125		 #/1
; 9126	=0
; 9127	PF105:	[BRX]_[BRX].OR.#,	;WRITTEN SET BIT
; 9128		 #/040000,		;MARK PAGE AS
; 9129		 HOLD RIGHT,		;WRITABLE
; 9130		 J/PF107		;STORE CST WORD
; 9131		[FLG]_[FLG].AND.NOT.#,	;NOT WRITTEN, CAUSE TRAP ON
; 9132		 FLG.W/1,		; WRITE ATTEMPT
; 9133		 HOLD RIGHT,		;ONLY CLEAR LH
; 9134		 J/PF107
; 9135	=0**
; 9136	PF110:	START NO TEST WRITE,
; 9137		 CALL [IBPX]		;STORE CST ENTRY
; 9138	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 206
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 9139	
; 9140	;HERE WHEN WE HAVE FIGURED OUT PHYSICAL ADDRESS (IN ARX) AND FLAGS
; 9141	; (IN BRX) RELOAD PAGE TABLE.
; 9142	PFDONE:	TR [FLG],		;MAP INSTRUCTION?
; 9143		 #/400000
; 9144	=0	[AR]_[ARX],		;GET PHYSCIAL PAGE #
; 9145		 SC_7,			;PREPARE TO CONVERT TO
; 9146		 J/PF130		; WORD ADDRESS
; 9147		[AR]_WORK[SV.VMA],;RESTORE VMA
; 9148		 J/PF120
; 9149	=0
; 9150	PF130:	[AR]_[AR]*2,		;CONVERT TO WORD #
; 9151		 STEP SC,
; 9152		 J/PF130
; 9153		[AR]_[AR].AND.#,	;JUST ADDRESS BITS
; 9154		 #/3,
; 9155		 HOLD RIGHT
; 9156		END MAP 		;CLEAR MAP FLAGS
; 9157		[BRX]_[BRX].OR.#,	;TURN ON THE TRANSLATION
; 9158		 #/100000,		; VALID BIT
; 9159		 HOLD RIGHT		; IN LEFT HALF ONLY
; 9160		TL [FLG], FLG.C/1	;CACHE BIT SET?
; 9161	=0	[BRX]_[BRX].OR.#,	;YES--SET IN MAP WORD
; 9162		 #/002000, HOLD RIGHT	; ..
; 9163		[BRX]_[BRX].AND.#,	;PRESERVE WORD #
; 9164		 #/777, HOLD LEFT	; IN PAGE FAIL WORD
; 9165		[AR]_[AR].OR.[BRX],	;COMPLETE MAP INSTRUCTION
; 9166		 EXIT
; 9167	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 207
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 9168	
; 9169	PF120:	[BR]_[AR]		;COPY PAGE FAIL WORD
; 9170		[BR]_[AR].AND.NOT.#,	;CLEAR BITS WHICH START A CYCLE
; 9171		 READ CYCLE/1,		; ..
; 9172		 WRITE CYCLE/1,		; ..
; 9173		 WRITE TEST/1,		; ..
; 9174		 HOLD RIGHT		;JUST DO LEFT HALF
; 9175		VMA_[BR], 3T,		;RESTORE VMA
; 9176		 DP FUNC/1		;SET USER ACCORDING TO WHAT IT WAS
; 9177		[ARX]_[ARX].AND.# CLR LH, ;JUST KEEP PAGE #
; 9178		 #/3777			; ..
; 9179		[BRX]_[ARX].OR.#, #/400000 ;SET VALID BITS
; 9180		TL [FLG], FLG.W/1	;WANT WRITE SET?
; 9181	=0	[BRX]_[BRX].OR.#, #/040000 ;SET WRITE BIT
; 9182		TL [FLG], FLG.C/1,	;WANT CACHE SET?
; 9183		 LOAD PAGE TABLE	;LOAD PAGE TABLE ON NEXT
; 9184					; MICRO INSTRUCTION
; 9185	=0	[BRX]_[BRX].OR.#,	;SET CACHE BIT
; 9186		 #/020000, J/PF125	;CACHE BIT
; 9187		READ [BRX]		;LOAD PAGE TABLE
; 9188	PF125:	[ARX]_WORK[SV.ARX]
; 9189		[BR]_WORK[SV.BR]
; 9190		[BRX]_WORK[SV.BRX]
; 9191		VMA_[AR],		;MAKE MEM REQUEST
; 9192		 DP FUNC/1, 3T,		;FROM DATA PATH
; 9193		 WAIT/1			;WAIT FOR PREVIOUS CYCLE TO
; 9194					; COMPLETE. (NEED THIS TO 
; 9195					; START ANOTHER CYCLE)
; 9196		[AR]_WORK[SV.AR],
; 9197		 RETURN [0]
; 9198	;SUBROUTINE TO START CST UPDATE
; 9199	;CALL WITH:
; 9200	;	AR/ PHYSICAL PAGE NUMBER
; 9201	;RETURN 2 WITH ENTRY IN AR, PAGE FAIL IF AGE TOO SMALL
; 9202	=0**
; 9203	UPCST:	[AR]_[AR]+WORK[CBR],	;ADDRESS OF CST0 ENTRY
; 9204		 CALL [RDPT]		;READ OLD VALUE
; 9205		TL [AR],		;0 - 5 = 0?
; 9206		 #/770000		; ..
; 9207	=0	[AR]_[AR].AND.WORK[CSTM],	;CLEAR AGE FIELD
; 9208		 RETURN [2]		;AGE IS NOT ZERO
; 9209		PAGE FAIL TRAP		;AGE TOO SMALL
; 9210	
; 9211	;SUBROUTINE TO LOOK AT PAGE POINTER
; 9212	;CALL WITH POINTER IN AR
; 9213	;RETURNS 1 IF TYPE 1
; 9214	;RETURNS 2 IF TYPE 2
; 9215	;RETURNS 3 IF TYPE 3
; 9216	;GOES TO PFT IF TYPE 0 OR 4 THRU 7
; 9217	SETPTR:	[ARX]_[AR].OR.#,	;AND C AND W BITS
; 9218		 #/753777		; OF ALL POINTERS
; 9219		[FLG]_[FLG].AND.[ARX],	; ..
; 9220		 HOLD RIGHT		;KEEP IN LH OF FLG
; 9221		READ [AR],		;TYPE 4,5,6 OR 7?
; 9222		 SKIP DP0		; ..
; 9223	=0	TL [AR],		;HERE WE TEST FOR TYPE
; 9224		 #/300000,		; ZERO POINTER
; 9225		 J/STPTR1		;CHECK AT STPTR1
; 9226		PAGE FAIL TRAP		;BAD TYPE
; 9227	=0
; 9228	STPTR1:	TL [AR],		;NOT ZERO
; 9229		 #/100000,		;SEPERATE TYPE 2
; 9230		 J/STPTR2		; ..
; 9231		PAGE FAIL TRAP		;TYPE 0
; 9232	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 208
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 9233	
; 9234	=0
; 9235	STPTR2:	TL [AR],		;SEPERATE TYPE 1
; 9236		 #/200000,		; AND 3
; 9237		 J/STPTR3		; ..
; 9238		RETURN [2]		;TYPE 2
; 9239	
; 9240	=0
; 9241	STPTR3:	RETURN [3]		;TYPE 3
; 9242		RETURN [1]		;TYPE 1
; 9243	
; 9244	;SUBROUTINE TO FETCH A PAGE POINTER OR CST ENTRY
; 9245	;CALL WITH ADDRESS IN AR
; 9246	;RETURN 4 WITH WORD IN AR
; 9247	;
; 9248	RDPT:	VMA_[AR],		;LOAD THE VMA
; 9249		 START READ,		;START MEM CYCLE
; 9250		 VMA PHYSICAL,		;ABSOLUTE ADDRESS
; 9251		 SKIP IRPT		;CHECK FOR INTERRUPTS
; 9252	=0	MEM READ,		;NO INTERRUPTS
; 9253		 [AR]_MEM,		;PUT THE DATA INTO AR
; 9254		 RETURN [4]		;AND RETURN
; 9255		PAGE FAIL TRAP		;INTERRUPT
; 9256	
; 9257	
; 9258	;SUBROUTINE TO SEE IF WE SHOULD REMEMBER AN EXEC SECTION PTR
; 9259	;CALL WITH SKIP ON ADR.EQ.0
; 9260	;RETURNS 2 IF WE SHOULD STORE AND 7 IF WE SHOULD NOT
; 9261	;
; 9262	=0
; 9263	SHDREM:	RETURN [7]		;INDIRECT PTR
; 9264		[AR]_.NOT.[FLG]		;FLIP BITS
; 9265		TL [AR], FLG.W/1, FLG.C/1 ;BOTH BITS SET
; 9266	=0	RETURN [7]		;NO--DON'T STORE
; 9267		RETURN [2]		;STORE
; 9268	
; 9269	;HERE IN KI10 MODE
; 9270	;BR CONTAINS PAGE # AND ARX CONTAINS PAGE #/2
; 9271	
; 9272	KIFILL:	READ [BRX],		;USER REF?
; 9273		 SKIP DP0		; ..
; 9274	=0	[BR]-#, 		;EXEC--LESS THAN 340?
; 9275		 #/340,			; ..
; 9276		 SKIP DP18, 4T,		; ..
; 9277		 J/KIF10		;FOLLOW EXEC PATH
; 9278	KIUPT:	[ARX]_[ARX]+[UBR],	;POINTER TO PAGE MAP ENTRY
; 9279		 LOAD VMA,		;PUT ADDRESS IN VMA
; 9280		 VMA PHYSICAL,		;ABSOLUTE ADDRESS
; 9281		 START READ,		;FETCH UPT WORD
; 9282		 J/KIF30		;JOIN COMMON CODE
; 9283	=0
; 9284	KIF10:	[BR]-#, 		;EXEC ADDRESS .GE. 340
; 9285		 #/400,			; SEE IF .GT. 400
; 9286		 SKIP DP18, 4T,		; ..
; 9287		 J/KIEPT		;LOOK AT KIF20
; 9288		[ARX]_[ARX]+#, 3T,	;EXEC ADDRESS .LT. 340
; 9289		 #/600,			;IN EBR+600
; 9290		 J/KIEPT		;JOIN COMMON CODE
; 9291	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 209
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 9292	
; 9293	=0
; 9294	KIEPT:	[ARX]_[ARX]+[EBR],	;ADD OFFSET TO
; 9295		 LOAD VMA,		; EPT
; 9296		 START READ,		;START FETCH
; 9297		 VMA PHYSICAL,		;ABSOLUTE ADDRESS
; 9298		 J/KIF30		;GO GET POINTER
; 9299		[ARX]_[ARX]+#,		;PER PROCESS PAGE
; 9300		 #/220, 3T,		; IS IN UPT + 400
; 9301		 J/KIUPT		;JOIN COMMON CODE
; 9302	KIF30:	MEM READ,		;WAIT FOR DATA
; 9303		 [ARX]_MEM		;PLACE IT IN ARX
; 9304		TR [BR],		;SEE IF EVEN OR ODD
; 9305		 #/1			; ..
; 9306	
; 9307	=0
; 9308	KIF40:	READ [ARX],		;ODD
; 9309		 SKIP DP18,		;SEE IF VALID
; 9310		 J/KIF50		;JOIN COMMON CODE
; 9311		[ARX]_[ARX] SWAP,	;EVEN--FLIP AROUND
; 9312		 J/KIF40		; AND CONTINUE
; 9313	
; 9314	=0
; 9315	KIF50:	PAGE FAIL TRAP
; 9316	;AT THIS POINT WE HAVE THE PAGE MAP ENTRY IN RH OF AR
; 9317		[FLG]_[FLG].AND.NOT.#,	;CLEAR W AND C
; 9318		 FLG.W/1, FLG.C/1	; FLAGS
; 9319		TR [ARX], #/020000	;CACHE ENABLED?
; 9320	=0	[FLG]_[FLG].OR.#,	;SET CACHE BITS
; 9321		 FLG.C/1, HOLD RIGHT	; ..
; 9322		TR [ARX], #/040000	;DO NOT CACHE
; 9323					;SEE IF CACHE BIT SET
; 9324	=0	[BRX]_[BRX].OR.#,	;COPY BITS TO BRX
; 9325		 #/020000,
; 9326		 HOLD RIGHT
; 9327		TR [ARX],		; ..
; 9328		 #/100000
; 9329	=0	[FLG]_[FLG].OR.#,	;SAVE W
; 9330		 FLG.W/1,		; ..
; 9331		 HOLD RIGHT,		; ..
; 9332		 J/KIF90		;ALL DONE
; 9333		TL [BRX],		;W=0, WRITE REF?
; 9334		 WRITE CYCLE/1
; 9335	=0
; 9336	KIF80:	[BRX]_[BRX].OR.#,	;WRITE FAILURE
; 9337		 #/100000, HOLD RIGHT,	;INDICATE THAT ACCESS WAS ON
; 9338		 J/KIF50		;GO PAGE FAIL
; 9339		J/PFDONE		;ALL DONE
; 9340	
; 9341	KIF90:	[BRX]_[BRX].OR.#,	;PAGE IS WRITABLE
; 9342		 #/40000,		;TURN ON IN BRX
; 9343		 J/PFDONE		;ALL SET
; 9344	
; 9345	;HERE ON HARD PAGE FAILURES
; 9346	HARD:	WORK[SV.BR]_[BR]	;SAVE BR (CLEANUP MAY NEED IT)
; 9347	=0	[BR]_VMA,		;BUILD PAGE FAIL WORD
; 9348		 CALL [ABORT]		;CLEAR ERROR
; 9349		[BR]_[BR].AND.#,	;SAVE THE FLAGS
; 9350		 #/401237,		; ..
; 9351		 HOLD RIGHT		; ..
; 9352		[BRX]_[BRX].OR.[BR],	;COMPLETE PAGE FAIL WORD
; 9353		 J/KIF50		;GO TRAP
; 9354	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 210
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 9355	
; 9356	PFPI1:	SKIP IRPT		;TIMER TRAP?
; 9357	=00
; 9358		[AR]_WORK[TIME1],	;YES--GET LOW WORD
; 9359		 SPEC/CLRCLK,		;CLEAR CLOCK FLAG
; 9360		 CALL [TOCK]		;DO THE UPDATE
; 9361		J/PFT1			;EXTERNAL INTERRUPT
; 9362		ABORT MEM CYCLE		;CLEAR 1MS FLAGS
; 9363	=
; 9364	PFPI2:	[AR]_WORK[SV.VMA],	;RESTORE VMA
; 9365		 J/PF125
; 9366	
; 9367	
; 9368	;HERE ON PAGE FAIL TRAP
; 9369	=0
; 9370	PFT:	HALT [IOPF]		;IO PAGE FAILURE
; 9371	PFT1:	[AR]_WORK[SV.VMA],
; 9372		 SKIP/TRAP CYCLE	;SEE IF TRAP CYCLE
; 9373	=0	TL [AR], FETCH/1,	;IS THIS AN INSTRUCTION FETCH
; 9374		 J/PFT1A		;GO LOOK BELOW
; 9375		[AR]_WORK[TRAPPC]	;RESTORE PC
; 9376		READ [AR], LOAD FLAGS, J/CLDISP
; 9377	=0
; 9378	PFT1A:	J/CLEANED		;YES--NO PC TO BACK UP
; 9379	FIXPC:	[PC]_[PC]-1, HOLD LEFT	;DATA FAILURE--BACKUP PC
; 9380	=0
; 9381	CLDISP:	CLEANUP DISP		;GO CLEANUP AFTER PAGE FAIL
; 9382	=0000
; 9383	CLEANUP:
; 9384	CLEANED:			;(0) NORMAL CASE
; 9385		END STATE, SKIP IRPT,	;NO MORE CLEANUP NEEDED
; 9386		 J/PFT2			;HANDLE PAGE FAIL OR INTERRUPT
; 9387		[AR]_WORK[SV.ARX],	;(1) BLT
; 9388		 J/BLT-CLEANUP
; 9389		[PC]_[PC]+1,		;(2) MAP
; 9390		 J/MAPDON
; 9391		STATE_[EDIT-SRC],	;(3) SRC IN STRING MOVE
; 9392		 J/STRPF
; 9393		STATE_[EDIT-DST],	;(4) DST IN STRING MOVE
; 9394		 J/STRPF
; 9395		STATE_[SRC],		;(5) SRC+DST IN STRING MOVE
; 9396		 J/BACKD
; 9397		STATE_[EDIT-DST],	;(6) FILL IN MOVSRJ
; 9398		 J/STRPF4
; 9399		STATE_[EDIT-SRC],	;(7) DEC TO BIN
; 9400		 J/PFDBIN
; 9401		STATE_[EDIT-SRC],	;(10) SRC+DST IN COMP
; 9402		 J/CMSDST
; 9403		END STATE, J/BACKS	;(11) EDIT SRC FAIL
; 9404		END STATE, J/BACKD	;(12) EDIT DST FAIL
; 9405		STATE_[EDIT-SRC],	;(13) SRC+DST IN EDIT
; 9406		 J/BACKD
; 9407	=
; 9408	î; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 211
; DSK: KSHACK; PAGEF 10	02:03:53 8-OCT-84	PAGE FAIL REFIL LOGIC

; 9409	
; 9410	=0
; 9411	PFT2:	[AR]_[UBR]+#,		;PREPARE TO STORE PFW
; 9412		 #/500, 3T,
; 9413		 J/PFT10
; 9414	PFT3:	TAKE INTERRUPT		;PROCESS INTERRUPT
; 9415	PFT10:	VMA_[AR],		;WHERE TO STORE PFW
; 9416		 VMA PHYSICAL WRITE
; 9417	=0	MEM WRITE,		;STORE PFW
; 9418		 MEM_[BRX],
; 9419		 CALL [NEXTAR]		;ADVANCE POINTER TO
; 9420					;PREPARE TO STORE PC
; 9421		TL [EBR], #/400000	;KL PAGING?
; 9422	=0	[BR]_FLAGS,J/EAPF	;YES--DO EXTENDED THING
; 9423		[BR]_PC WITH FLAGS	;GET OLD PC
; 9424		MEM WRITE,		;STORE OLD PC
; 9425		 MEM_[BR],
; 9426		 J/EAPF1
; 9427	
; 9428	MAPDON:	END STATE,		;CLEAR MAP BIT
; 9429		 SKIP IRPT		;ANY INTERRUPT?
; 9430	=0	[AR]_[BRX],		;RETURN PAGE FAIL WORD
; 9431		 EXIT
; 9432		[PC]_[PC]-1, J/PFT3	;INTERRUPTED OUT OF MAP
; 9433					; RETRY INSTRUCTION
; 9434	
; 9435	
; 9436	=0
; 9437	EAPF:	MEM WRITE, MEM_[BR],	;STORE FLAGS
; 9438		 CALL [NEXTAR]		;STORE PC WORD
; 9439		MEM WRITE, MEM_[PC]	; ..
; 9440	EAPF1:	[AR]_[AR]+1,
; 9441		 VMA PHYSICAL READ,
; 9442		 J/GOEXEC
; 9443		
; 9444	NEXTAR:	NEXT [AR] PHYSICAL WRITE, RETURN [1]
; 9445	
; 9446	.ENDIF/ITS
; 9447	


; Number of Micro Words used:
;	D Words= 512
;	U Words= 1926

	END
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 212
; CROSS REFERENCE LISTING

(U) A				663 #
	AR			667 #	2475	2514	2544	2545	2610	2659	2667	2810	2812	2815	2818
				2821	2824	2910	2920	2935	2952	2963	2973	2983	3014	3025	3035
				3074	3086	3093	3097	3108	3109	3111	3113	3114	3122	3145	3146
				3409	3414	3416	3428	3431	3434	3439	3440	3511	3529	3531	3597
				3600	3670	3671	3677	3698	3725	3740	3777	3788	3813	3878	3902
				3907	3943	3988	3992	3999	4001	4167	4172	4205	4241	4255	4272
				4283	4286	4289	4304	4331	4332	4337	4355	4371	4391	4507	4516
				4521	4531	4537	4556	4560	4579	4607	4611	4613	4614	4634	4666
				4669	4672	4686	4712	4729	4730	4735	4740	4748	4750	4752	4825
				4835	4837	4842	4843	4889	4895	4905	4909	4949	4953	4957	4961
				5141	5154	5241	5245	5257	5260	5266	5272	5311	5378	5381	5409
				5415	5419	5420	5451	5457	5477	5483	5484	5485	5486	5495	5500
				5521	5522	5534	5536	5545	5546	5567	5572	5573	5579	5615	5619
				5621	5624	5627	5631	5633	5635	5637	5638	5639	5645	5647	5648
				5658	5663	5680	5706	5714	5719	5721	5766	5779	5798	5807	5811
				5827	5841	5843	5845	5851	5879	5886	5889	5899	5902	5910	5912
				5916	5921	5923	5939	5944	5947	5969	5972	5973	5977	6097	6101
				6105	6112	6123	6133	6148	6169	6172	6185	6188	6203	6289	6296
				6313	6335	6349	6376	6387	6388	6389	6402	6437	6467	6478	6516
				6531	6559	6564	6594	6595	6596	6597	6599	6600	6603	6608	6659
				6682	6690	6691	6717	6756	6768	6769	6777	6798	6801	6804	6808
				6809	6811	6815	6817	6873	6874	6879	6880	6888	6891	6895	6964
				6987	6993	7013	7032	7036	7039	7040	7041	7042	7064	7090	7091
				7095	7101	7102	7106	7181	7184	7201	7203	7205	7207	7210	7212
				7214	7252	7255	7262	7266	7268	7321	7323	7328	7333	7415	7504
				7531	7609	7611	7613	7615	7617	7619	7621	7623	7625	7648	7654
				7731	7741	7747	7750	7751	7768	7776	7828	7839	7852	7854	7880
				7885	7912	7915	7943	7961	7962	8024	8118	8126	8157	8405	8407
				8418	8420	8426	8428	8435	8492	8498	8501	8528	8556
	ARX			668 #	2577	2866	2867	3881	3883	3897	3926	4269	4281	4290	4291
				4309	4312	4314	4336	4357	4373	4393	4396	4417	4549	4578	4631
				4657	4658	4738	4832	4833	4841	4912	5107	5114	5115	5144	5147
				5169	5305	5320	5417	5456	5489	5679	5700	5703	5764	5781	5803
				5824	5844	5849	5894	5933	5940	6186	6216	6224	6258	6293	6343
				6352	6362	6371	6394	6395	6403	6436	6440	6517	6554	6562	6566
				6568	6897	6900	6946	7016	7092	7202	7206	7208	7211	7213	7242
				7244	7557	7570	7574	7782	7967	7969	8030	8255	8453	8454	8466
				8480	8505	8508	8514
	BR			669 #	2270	2471	2507	2509	2513	3004	3141	3175	3176	3179	3180
				3181	3182	3198	3201	3204	3207	3211	3214	3216	3249	3250	3253
				3254	3265	3274	3275	3277	3278	3280	3281	3283	3284	3572	3575
				3578	3581	3584	3587	3590	3593	3948	3953	3982	4007	4015	4016
				4169	4174	4277	4412	4581	4583	4591	4595	4659	4662	4737	4741
				4742	4743	4746	4751	4783	4929	4931	4992	4993	4994	4995	4996
				5003	5012	5016	5025	5088	5089	5090	5091	5092	5113	5157	5164
				5269	5313	5315	5318	5323	5416	5423	5424	5428	5429	5487	5490
				5525	5577	5661	5686	5688	5698	5712	5792	5810	5813	6050	6062
				6063	6065	6066	6094	6103	6149	6154	6179	6182	6263	6329	6332
				6333	6346	6354	6360	6484	6494	6505	6514	6518	6536	6590	6605
				6644	6656	6726	6989	6990	7033	7034	7075	7083	7094	7098	7180
				7183	7199	7233	7235	7238	7327	7329	7341	7342	7350	7356	7503
				7522	7526	7542	7614	7616	7618	7624	7626	7670	7687	7788	7812
				7813	7814	7856	7858	7886	7890	7892	7896	7898	7922	7928	8022
				8375	8379	8438	8440	8444	8448	8503	8511	8513
	BRX			670 #	4306	4334	4340	4413	4436	4457	4461	4465	4469	4475	4479
				4483	4487	4566	4620	4661	4775	4778	4789	5248	5304	5326	5333
				5340	5364	5449	5450	5452	5492	5497	5691	5708	5775	5789	5790
				5833	6054	6155	6214	6226	6227	6251	6301	6309	6390	6420	6433
				6442	6447	6455	6457	6466	6472	6477	6489	6528	6530	6548	6557
				6585	6587	6589	6620	6623	6640	6653	6655	6738	6740	6743	6812
				6819	6916	6920	6924	6928	6932	6936	6952	7225	7572	7740	7795
				7796	7861	7944	8396	8397	8399	8402	8437	8458	8470	8477
	EBR			672 #	7124	7334	7335	7336	7339	7743	7786	8631
	FLG			675 #	3768	5641	5744	5745	5752	5882	5885	5888	5891	5949	5956
				5957	6734	8380	8462	8479	8603
	HR			666 #	2374	2380	2386	2392	2401	2405	2414	2419	2522	2878	2883
				3674	3683	3686	3688	3689	3690	3710	3714	3724	3729	3732	3753
				3774	3787	3808	4099	4109	4111	4113	4115	4126	4140	4220	6052
				7054	7134	7140	7150	7151	7152	7156	7157	7158	7159	7167	7168
				7171	7172	7173	7174	7175	7176	7177	7178	7612	7946	7960	8093
				8095	8097	8099	8101	8103	8105	8107	8332
	MAG			664 #	2511	4316	4319	4338	4341	4342	4356	4362	4364	4398	4400
				4402	4585	4603	4626	4630	4633	4674	4676	4677	4807	4812	4817
				4823	4824	5682	5774	5830	5856	5892	5925	5929	5931
	MASK			674 #	2232	2233	2234	2237	2240	2273	2285	2322	2326	2329	2332
				2341	2344	2347	2350	2606	2834	2855	3070	3119	3726	3775	3789
				3817	4130	4141	4163	4166	4214	4276	4415	4450	4587	4598	4627
				4753	4971	5094	5105	5582	5642	5717	5768	5859	5927	6016	6018
				6020	6022	6024	6026	6028	6030	6032	6260	6262	6285	6400	6729
				7502	7567	7568	7569	7721	7722	7723	7724	7725	7726	7727	7733
				7752	7762	7780	7794	7874	7877	7913	7924	7930	7947	8003	8156
				8354	8356	8370	8547	8617	8618	8620	8621	8623	8624	8626	8627
	ONE			671 #	2262	2266	2313	2315	2360	2449	2501	2504	3045	3479	3546
				3562	3630	3645	3672	3681	3684	3761	3779	3782	4159	4209	4225
				4512	4935	5239	5312	5345	5347	5352	5369	5370	5569	5581	5657
				5808	5966	6089	6131	6165	6170	6191	6198	6208	6228	6229	6264
				6265	6308	6372	6377	6441	6453	6460	6480	6487	6492	6501	6511
				6515	6519	6520	6556	6570	6582	6635	6660	6758	6781	6836	6961
				6962	6968	6991	7035	7078	7432	7479	7482	7509	7554	7584	7638
				7940	8020	8142	8229	8236	8239	8242	8245	8248	8565	8635	8639
	PC			665 #	2312	2316	2334	2428	2491	2517	3467	3596	3601	3860	3980
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 213
; CROSS REFERENCE LISTING

				3986	4004	4199	4403	4405	4890	4900	7113	7629	7764	7918	8153
				8636
	PI			676 #	3738	3739	3754	7160	7161	7515	7606	7620	7622	7627	7637
				7639	7714	7715	7716	7717	7718	7719	7720	7729	8599	8608	8609
				8611	8612	8614	8615
	T0			678 #	4383	4387	4629	4640	4647	4650	4652	4653	5699	5707	5733
				5735	5736	5737	5740	5748	5751	5753	5794	5861	5869	5870	6485
				6552	7640	7792
	T1			679 #	4605	4747	5723	5809	5812	5832	5842
	UBR			673 #	4132	4165	7116	7259	7263	7349	7355
	XWD1			677 #	3653	3850	7778
(D) A				1373 #
	DBLAC			1377 #	2870
	DFP			1383 #	5669	5670	5759	5821
	DREAD			1376 #	2861	2862	4264	4265	4350	4573
	DSHIFT			1379 #	3056	3057
	FP			1381 #	5389	5390	5391	5392	5394	5395	5397	5398	5399	5400	5402
				5403	5435	5436	5437	5439	5441	5442	5465	5466	5467	5469	5471
				5472	5552	5553
	FPI			1380 #	5393	5401	5440	5470
	IOT			1384 #	7146	7147	7382	7820	7821	7822	7823	7831	7832	7833	7834
				7845	7846	7847	7848	8113	8114	8328
	RD-PF			1382 #	2637	2642	2647	2652	2692	2697	2702	2707	2712	2717	2722
				2727	2734	2739	2744	2749	2755	2760	2765	2770	2903	2913	2923
				2928	2945	2956	2966	2976	2996	3007	3018	3028	4234	4248	4298
				4323	4494	4499
	READ			1374 #	2640	2645	2650	2655	2675	2694	2695	2699	2700	2705	2710
				2715	2720	2725	2730	2736	2737	2741	2742	2747	2752	2758	2763
				2768	2773	2905	2906	2915	2916	2925	2926	2930	2931	2938	2947
				2948	2958	2959	2968	2969	2978	2979	2998	2999	3009	3010	3020
				3021	3030	3031	3324	3325	3326	3327	3328	3329	3340	3341	3342
				3343	3344	3345	3346	3347	3359	3360	3361	3362	3363	3364	3365
				3366	3376	3377	3378	3379	3380	3381	3382	3383	3500	3501	3502
				3503	3504	3505	3506	3507	3518	3519	3520	3521	3522	3523	3524
				3525	3535	3536	3537	3538	3539	3540	3541	3542	3551	3552	3553
				3554	3555	3556	3557	3558	3799	4236	4237	4250	4251	4300	4301
				4325	4326	4496	4497	4501	4502	4879	4880	4881	4882	4883	5516
	SHIFT			1378 #	3051	3052	3053
	WRITE			1375 #	2639	2644	2649	2654	2704	2709	2714	2719	2724	2729	2746
				2751	2757	2762	2767	2772	2871	2940	2941
(U) ACALU			1287 #
	AC+N			1289 #	2255	2256	2263	2457	2469	2577	2867	2876	3125	3146	3192
				3222	3263	4269	4281	4362	4364	4366	4374	4376	4383	4385	4397
				4398	4399	4400	4401	4402	4518	4603	4626	4630	4633	4647	4648
				4650	4653	4672	4674	4676	4677	4806	4807	4810	4811	4812	4815
				4816	4817	4823	4824	5682	5774	5828	5830	5836	5894	5902	5940
				5947	6093	6101	6111	6114	6145	6148	6162	6169	6175	6185	6212
				6223	6243	6258	6275	6291	6293	6319	6322	6324	6331	6332	6333
				6335	6341	6343	6346	6352	6354	6382	6384	6385	6389	6396	6397
				6398	6402	6403	6410	6412	6418	6424	6440	6451	6463	6472	6478
				6489	6492	6494	6498	6511	6517	6518	6643	6677	6682	6688	6725
				6727	6835	6836	6950	6957	6964	6984	6986	6993	7014	7036	7073
				7075	7081	7083	7087	7090	7095
	B			1288 #
(D) ACDISP			1404 #	3661	7146	7147	7382
(U) ACN				1290 #	2457	2469	2577	2867	2876	3125	3146	3192	3222	3263	4269
				4281	4362	4364	4366	4374	4376	4383	4385	4397	4398	4399	4400
				4401	4402	4518	4603	4626	4630	4633	4647	4648	4650	4653	4672
				4674	4676	4677	4806	4807	4810	4811	4812	4815	4816	4817	4823
				4824	5682	5774	5828	5830	5836	5894	5902	5940	5947	6424	6440
				6451	6498	6517
	BIN0			1297 #	2255	6319	6341	6346	6354	6385	6396	6397	6398	6402	6410
	BIN1			1298 #	2256	2263	6291	6293	6322	6324	6331	6332	6333	6335	6343
				6352	6382	6384	6389	6403	6412
	DLEN			1294 #	6093	6101	6114	6145	6148	6175	6185	6212	6223	6258	6418
				6463	6472	6478	6489	6492	6494	6511	6518	6835	6836	6950	6964
				6984	7087	7090	7095
	DSTP			1295 #	6111	6275	6677	6682	6727	6957	7014	7036	7081	7083
	MARK			1296 #	6643	6725
	SRCLEN			1292 #
	SRCP			1293 #	6162	6169	6243	6688	6986	6993	7073	7075
(U) AD				558 #	2237	2240	2273	2285	2322	2326	2329	2332	2341	2344	2347
				2350	2405	2606	2832	2834	2853	2855	3726	3817	4130	4163	4214
				4587	4598	6016	6018	6020	6022	6024	6026	6028	6030	6032	6063
				6285	6400	6729	7502	7567	7568	7569	7721	7722	7723	7724	7725
				7726	7727	7733	7762	7780	7794	7874	7877	7913	7924	7930	7947
				8003	8156	8354	8356	8370	8547	8617	8618	8620	8621	8623	8624
				8626	8627
	A			587 #	2232	2234	2312	2316	2334	2380	2392	2419	2428	2471	2513
				2514	2517	2577	2610	2867	2883	3074	3086	3093	3097	3108	3109
				3111	3113	3114	3122	3141	3146	3175	3176	3179	3180	3181	3182
				3198	3201	3204	3207	3211	3214	3249	3250	3253	3254	3265	3274
				3275	3277	3278	3280	3281	3283	3284	3440	3467	3531	3572	3584
				3596	3597	3600	3601	3670	3671	3677	3698	3714	3725	3740	3777
				3788	3813	3878	3881	3883	3902	3907	3982	3988	3999	4004	4016
				4304	4306	4309	4331	4332	4334	4336	4355	4357	4371	4373	4391
				4393	4405	4412	4413	4415	4436	4450	4507	4516	4531	4537	4566
				4579	4581	4583	4595	4607	4611	4627	4631	4634	4647	4653	4657
				4666	4686	4735	4740	4741	4742	4747	4748	4750	4752	4825	4890
				4900	4905	4912	4929	4953	4961	5016	5094	5107	5144	5164	5169
				5245	5248	5266	5305	5318	5326	5333	5381	5415	5416	5417	5428
				5451	5452	5456	5457	5477	5485	5487	5492	5495	5500	5534	5536
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 214
; CROSS REFERENCE LISTING

				5567	5569	5572	5573	5579	5615	5619	5621	5627	5635	5637	5638
				5657	5658	5663	5691	5698	5699	5703	5706	5707	5714	5719	5721
				5733	5735	5736	5737	5740	5748	5751	5753	5764	5766	5768	5775
				5779	5781	5792	5798	5803	5807	5808	5811	5824	5827	5849	5859
				5861	5869	5870	5879	5886	5889	5899	5902	5916	5921	5923	5944
				5947	5969	5977	6066	6112	6133	6148	6169	6179	6185	6203	6214
				6251	6258	6293	6332	6352	6354	6389	6402	6403	6440	6466	6472
				6477	6478	6485	6489	6494	6516	6517	6518	6552	6587	6596	6599
				6603	6605	6644	6655	6682	6690	6726	6743	6769	6801	6808	6819
				6873	6891	6897	6989	6993	7013	7033	7036	7040	7042	7075	7083
				7090	7091	7095	7102	7160	7161	7252	7321	7323	7333	7339	7341
				7349	7355	7415	7572	7606	7629	7648	7654	7740	7747	7768	7776
				7795	7814	7839	7852	7854	7861	7886	7890	7896	7918	7922	7928
				7962	8022	8024	8030	8118	8126	8153	8255	8402	8405	8435	8438
				8492	8503	8513	8528
	A+B			560 #	2262	2266	2313	2315	2360	2449	2501	2504	2878	3216	3479
				3546	3761	3779	3782	3948	3953	4132	4159	4165	4209	4225	4383
				4387	4417	4474	4478	4560	4658	4659	4662	4672	4746	4751	4778
				4782	4788	4935	5345	5347	5352	5369	5370	5429	5577	5581	5661
				5712	5794	6089	6154	6186	6191	6198	6228	6229	6335	6349	6360
				6362	6372	6441	6453	6460	6480	6501	6515	6570	6582	6590	6635
				6660	6758	6781	6809	6836	6991	7016	7035	7078	7098	7116	7124
				7432	7479	7482	7503	7509	7554	7584	7743	7778	7788	7796	8020
				8142	8229	8236	8239	8242	8245	8248	8631	8635	8639
	A+Q			559 #	4629	4640	4661	5312	5700	5708	5810	5813	5966
	A-.25			571 #
	A-B-.25			576 #	4556	4613	4614	5311	5323	5340	5364	5489	5497	5851	6101
				6227	6263	6484
	A-D-.25			572 #	6313	6554	6559	6608
	A-Q-.25			575 #
	A.AND.B			592 #	4340	4356	4578	4650	5113	5642	5894	5927	5929	5940	6123
				6260	7181	7184	7639	7812
	A.AND.Q			591 #	4338	4585	4630	4674	4676	4753	4807	4812	4817	4823	4824
				5025	5105	5114	5892	5925
	A.EQV.B			620 #
	A.EQV.Q			619 #	4316	4319	4341	4342	4398	4400	4402	4677
	A.OR.B			584 #	3004	4277	5115	5272	6054	6155	6188	6216	6376	6817	7202
				7206	7213	7244	7268	7618	7624	7782	7880	7915	8379
	A.OR.Q			583 #	5723
	A.XOR.B			612 #	5931	7570
	A.XOR.Q			611 #
	B			586 #	2242	2250	2252	2253	2256	2258	2265	2267	2462	2482	2583
				2616	2622	2627	2630	2662	2682	2830	2837	2844	2851	2882	3172
				3189	3246	3266	3271	3425	3470	3473	3476	3482	3485	3488	3548
				3706	3755	3766	3809	3866	3872	3912	3918	3991	4134	4136	4144
				4148	4150	4155	4177	4186	4198	4202	4217	4224	4308	4456	4460
				4482	4486	4519	4525	4539	4544	4546	4551	4619	4621	4639	4655
				4664	4726	4733	4754	4887	4897	4901	4916	4919	4936	5019	5087
				5095	5103	5153	5167	5187	5220	5227	5414	5418	5503	5505	5538
				5542	5576	5617	5636	5705	5805	5814	5864	5883	5919	6056	6059
				6072	6074	6075	6106	6118	6153	6201	6244	6247	6249	6253	6266
				6277	6286	6294	6426	6428	6471	6490	6503	6507	6509	6558	6565
				6592	6606	6611	6634	6638	6694	6714	6728	6782	6791	6867	6889
				6911	6943	6994	6996	7019	7060	7114	7215	7217	7218	7220	7223
				7227	7330	7331	7416	7418	7421	7441	7443	7445	7447	7470	7478
				7481	7485	7506	7523	7529	7543	7560	7563	7579	7583	7585	7594
				7595	7649	7668	7677	7685	7916	7958	7981	7987	7989	8026	8028
				8134	8141	8207	8216	8222	8226	8227	8228	8230	8231	8232	8234
				8235	8237	8238	8240	8241	8243	8244	8246	8247	8249	8250	8252
				8337	8340	8341	8343	8349	8358	8360	8362	8369	8372	8409	8410
				8412	8496	8517	8559	8567	8634	8638
	B-.25			570 #
	B-A-.25			568 #	3562	3672	3681	3684	4464	4468	4743	4775	6149	6170	6264
				6265	6377	6467	6519	6556	6961	7094	7526	7670	7687	7940	8565
	D			590 #	2231	2235	2260	2261	2263	2302	2353	2424	2439	2443	2448
				2452	2456	2457	2469	2470	2475	2480	2491	2498	2659	2679	2782
				2784	2810	2812	2815	2816	2818	2821	2822	2824	2839	2841	2846
				2848	2876	3067	3084	3090	3103	3106	3144	3192	3195	3263	3264
				3409	3414	3529	3575	3578	3581	3587	3590	3593	3616	3695	3702
				3719	3734	3739	3760	3764	3810	3849	3860	3889	3895	3922	3931
				3943	3945	3980	3986	4001	4002	4014	4015	4019	4140	4185	4199
				4289	4305	4314	4333	4337	4376	4381	4396	4399	4401	4403	4508
				4517	4518	4601	4732	4889	4895	4909	4911	4915	4931	4965	4992
				4993	4994	4995	4996	5012	5088	5089	5090	5091	5092	5141	5150
				5157	5172	5174	5178	5182	5184	5188	5218	5223	5247	5260	5262
				5303	5304	5313	5317	5360	5378	5379	5412	5446	5479	5544	5624
				5639	5683	5693	5786	5838	5972	6049	6068	6077	6093	6096	6110
				6111	6114	6137	6140	6145	6162	6163	6172	6182	6199	6205	6213
				6223	6225	6243	6245	6252	6256	6269	6271	6275	6288	6291	6300
				6319	6322	6324	6331	6341	6382	6384	6385	6390	6418	6423	6424
				6425	6437	6446	6451	6463	6469	6479	6482	6483	6498	6510	6512
				6513	6531	6534	6584	6589	6594	6595	6636	6643	6659	6677	6688
				6697	6701	6716	6725	6727	6731	6753	6760	6762	6795	6811	6833
				6835	6874	6900	6950	6955	6957	6964	6966	6984	6986	6987	6990
				7014	7032	7034	7044	7059	7073	7077	7081	7087	7106	7113	7132
				7153	7154	7188	7191	7198	7209	7232	7233	7241	7253	7326	7388
				7390	7392	7394	7408	7414	7417	7419	7469	7477	7504	7508	7520
				7541	7553	7573	7577	7593	7599	7614	7627	7637	7660	7666	7681
				7683	7711	7737	7748	7764	7766	7785	7790	7809	7842	7883	7950
				7953	7955	7963	7977	8009	8012	8014	8122	8129	8161	8209	8214
				8218	8221	8233	8251	8253	8254	8256	8342	8347	8351	8373	8385
				8388	8390	8436	8440	8497	8525	8526	8527	8533	8548	8558	8574
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 215
; CROSS REFERENCE LISTING

				8577	8579	8581	8583	8585	8587	8591	8636
	D+A			564 #	2374	2386	2401	2414	3630	3653	3710	3850	3897	3926	3992
				4007	4241	4269	4272	4949	4957	5241	5315	5320	6062	6065	6131
				6165	6208	6308	6333	6343	6346	6487	6505	6548	6557	6564	6566
				6691	6768	6879	6888	6962	6968	7039	7041	7522	7531	7574	7741
				7786	7961	7967	7969	8418	8420	8426	8428
	D+Q			565 #	5190	5198	5230	5250
	D-.25			582 #
	D-A-.25			580 #	3511	3645	4255	4281	4283	4286	5257	6492	6511
	D-Q-.25			581 #
	D.AND.A			600 #	2509	2511	2522	2544	2866	2910	3035	3070	3119	3416	3439
				3674	3683	3686	3688	3689	3690	3724	3729	3732	3738	3753	3754
				3774	3775	3787	3789	3808	4099	4109	4111	4113	4115	4126	4141
				4166	4167	4172	4220	4290	4362	4364	4549	4603	4626	4633	4832
				4971	5147	5154	5269	5419	5423	5449	5483	5521	5525	5545	5641
				5682	5774	5809	5812	5830	5882	5885	5888	5891	5949	6050	6052
				6094	6097	6224	6226	6262	6289	6296	6309	6329	6371	6387	6394
				6420	6436	6455	6514	6528	6530	6562	6568	6585	6597	6600	6620
				6623	6640	6656	6777	6812	6815	6880	6895	7054	7064	7134	7140
				7150	7151	7152	7156	7157	7158	7159	7167	7168	7171	7172	7173
				7174	7175	7176	7177	7178	7201	7203	7205	7207	7210	7212	7214
				7235	7238	7255	7259	7262	7263	7266	7327	7328	7334	7342	7350
				7356	7515	7557	7609	7611	7612	7613	7615	7617	7619	7621	7623
				7625	7752	7792	7828	7885	7892	7898	7912	7944	7946	7960	8093
				8095	8097	8099	8101	8103	8105	8107	8332	8375	8380	8396	8399
				8437	8453	8454	8462	8477	8479	8556	8599	8608	8609	8611	8612
				8614	8615
	D.AND.Q			601 #	3218	4705	5454	5769
	D.EQV.A			624 #	2983
	D.EQV.Q			625 #
	D.OR.A			588 #	2233	2507	2545	2963	3434	4169	4174	4291	4652	4738	5420
				5424	5450	5484	5546	5688	5744	5745	5752	5790	5843	5956	6301
				6388	6433	6442	6447	6457	6734	6738	6740	6804	6920	6924	6928
				6936	6952	7092	7101	7329	7335	7542	7620	7714	7715	7716	7717
				7718	7719	7720	7856	8157	8397	8444	8448	8458	8466	8470	8505
				8511	8514	8603
	D.OR.Q			589 #	3220	4588
	D.XOR.A			616 #	2270	2952	3431	4605	7750	7751
	D.XOR.Q			617 #
	Q			585 #	3222	4310	4318	4366	4374	4374	4385	4397	4543	4599	4616
				4622	4628	4632	4638	4646	5177	5337	5363	5502	5507	5580	5623
				5646	5742	5749	5770	5782	5793	5853	5855	5898	5943	6233	6272
				6681
	Q-.25			569 #
	Q-A-.25			567 #	4620	5239
	Q-D-.25			573 #	5181
	ZERO			597 #	2243	2243	2245	2248	2255	2257	2259	2277	2299	2486	2900
				3083	3125	3145	3411	3756	4151	4411	4437	4510	4648	4727	5001
				5014	5020	5021	5024	5098	5099	5102	5159	5309	5343	5367	5426
				5499	5510	5523	5527	5529	5530	5543	5557	5649	5826	5854	5908
				5936	6119	6121	6156	6175	6212	6217	6230	6241	6270	6392	6410
				6412	6431	6465	6521	6525	6529	6532	6588	6717	6756	6798	6870
				6946	7180	7183	7242	7343	7511	7610	7656	7693	7729	7732	7739
				7753	7970	8016	8018	8136	8139	8210	8389	8395	8407	8508	8563
				8573	8589	8590
	-A-.25			579 #	2667	3045	4512	4591	4669	4712	4730	4737	4833	4837	4841
				4843	5409	5486	5490	5522	5633	5648	5679	5680	5833	5844	5845
				5912	5933	5939	6395	6520	7638
	-B-.25			578 #	5834
	-D-.25			574 #	4643	4806	4811	4816	4821	6135	6398	7086	7100
	-Q-.25			577 #	4590	4642	4668	4710	4711	4728	5508	5616	5618	5620	5622
				5907
	.NOT.A			623 #	2935	2973	3014	3025	3428	4276	4521	4729	4835	4842	5582
				5631	5645	5647	5832	5842	5910	6103	6105	6653	7640	7731	7943
	.NOT.A.AND.B		604 #	4312	5717	7208	7211	7616	7626	7813
	.NOT.A.AND.Q		603 #	5856
	.NOT.B			622 #	5938	6304
	.NOT.D			626 #	2993	3003	4810	4815	4820	6152	6180	6184	6311	6315	6397
				7104
	.NOT.D.AND.A		608 #	2920	3768	4205	5686	5789	5841	5957	6536	6916	6932	7199
				7225	7336	7622	7858	8480	8498	8501
	.NOT.D.AND.Q		609 #
	.NOT.Q			621 #	5112	5906	6122
	0+A			563 #	5973
	0+B			562 #
	0+D			566 #
	0+Q			561 #	5718	5867
(U) AD PARITY OK		739 #	2263	2443	2456	2457	2679	2782	2784	2816	2822	2876	3067
				3070	3084	3119	3616	3889	3922	3945	4002	4014	4333	4376	4517
				4915	5303	5412	5446	5479	5544	5693	6093	6096	6111	6114	6145
				6162	6223	6225	6243	6275	6288	6291	6319	6322	6324	6331	6341
				6382	6384	6385	6418	6423	6424	6425	6446	6451	6463	6498	6584
				6643	6688	6725	6727	6835	6950	6957	6984	6986	7014	7073	7081
				7087	7842	8129	8352
(U) ADDRESS HIGH		8304 #
	ALL			8307 #	8378
	IO			8306 #
	MEMORY			8305 #	8401
(U) ADFLGS			1181 #	2668	3546	3562	3630	3645	4242	4256	4274	4284	4287	4417
				4836	4838
(U) AREAD			1216 #	2406
(U) B				683 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 216
; CROSS REFERENCE LISTING

	AR			687 #	2240	2242	2257	2322	2326	2329	2341	2344	2347	2405	2439
				2443	2448	2456	2462	2475	2480	2482	2491	2501	2501	2504	2504
				2513	2514	2544	2545	2583	2610	2616	2622	2627	2630	2659	2662
				2667	2782	2784	2810	2812	2815	2816	2818	2821	2822	2824	2830
				2832	2834	2837	2839	2841	2844	2846	2848	2851	2853	2855	2900
				2910	2920	2935	2952	2963	2973	2983	2993	3004	3004	3014	3025
				3035	3045	3067	3070	3074	3084	3086	3090	3093	3097	3103	3106
				3108	3109	3111	3113	3114	3144	3145	3146	3172	3189	3246	3266
				3271	3409	3414	3428	3431	3434	3439	3440	3470	3473	3476	3482
				3485	3488	3511	3529	3531	3546	3546	3548	3562	3761	3761	3779
				3782	3782	3789	3810	3943	3948	3953	4002	4140	4141	4148	4166
				4185	4186	4199	4202	4205	4214	4217	4225	4241	4255	4272	4277
				4277	4283	4286	4289	4310	4316	4318	4319	4336	4337	4355	4403
				4510	4512	4517	4519	4544	4566	4601	4607	4611	4655	4659	4659
				4662	4662	4666	4669	4672	4686	4712	4726	4729	4730	4735	4740
				4743	4746	4748	4750	4751	4751	4752	4783	4820	4821	4825	4835
				4837	4842	4843	4887	4897	4901	4905	4916	4919	4929	4931	4935
				4935	4936	4965	5004	5019	5021	5024	5025	5087	5088	5089	5090
				5091	5092	5095	5103	5112	5113	5113	5115	5115	5172	5174	5184
				5187	5188	5218	5227	5241	5252	5257	5260	5262	5266	5340	5364
				5378	5379	5381	5409	5416	5418	5419	5420	5429	5429	5456	5457
				5479	5483	5484	5495	5500	5502	5503	5505	5507	5508	5534	5536
				5538	5542	5544	5545	5546	5567	5572	5573	5576	5577	5577	5579
				5581	5581	5615	5617	5619	5621	5624	5627	5631	5633	5635	5636
				5637	5638	5639	5642	5642	5645	5647	5648	5658	5661	5661	5663
				5680	5707	5712	5712	5714	5719	5721	5766	5803	5807	5811	5814
				5838	5841	5843	5845	5869	5870	5879	5883	5886	5889	5899	5902
				5910	5912	5916	5919	5921	5923	5938	5944	5947	5969	5972	5973
				5977	6016	6018	6020	6022	6024	6026	6028	6030	6032	6059	6089
				6089	6096	6103	6105	6106	6121	6122	6131	6135	6148	6149	6149
				6152	6154	6154	6155	6155	6162	6169	6179	6180	6182	6184	6185
				6186	6186	6191	6191	6228	6228	6229	6230	6243	6249	6256	6260
				6260	6263	6263	6266	6270	6275	6277	6285	6286	6288	6296	6304
				6308	6311	6315	6384	6387	6388	6389	6397	6398	6402	6423	6425
				6428	6437	6446	6463	6477	6478	6479	6480	6480	6485	6503	6505
				6507	6512	6516	6529	6531	6532	6534	6556	6559	6564	6570	6570
				6582	6594	6595	6596	6597	6599	6600	6634	6655	6659	6660	6660
				6682	6688	6690	6691	6694	6716	6717	6729	6731	6753	6756	6758
				6758	6760	6768	6777	6781	6781	6782	6795	6798	6801	6804	6808
				6811	6815	6833	6835	6836	6867	6873	6874	6879	6888	6889	6891
				6897	6946	6950	6955	6957	6961	6962	6964	6966	6968	6984	6986
				6989	6990	6991	6991	6993	6994	6996	7014	7019	7033	7034	7035
				7035	7036	7044	7059	7060	7064	7073	7077	7078	7081	7086	7090
				7094	7094	7095	7098	7098	7100	7101	7102	7104	7116	7116	7124
				7124	7253	7255	7266	7321	7323	7432	7432	7441	7443	7445	7447
				7469	7470	7479	7479	7482	7482	7503	7503	7504	7506	7508	7509
				7509	7511	7520	7522	7523	7526	7526	7529	7531	7553	7563	7577
				7593	7594	7595	7656	7660	7668	7670	7670	7677	7681	7685	7687
				7687	7693	7729	7733	7737	7740	7741	7743	7743	7748	7766	7776
				7780	7782	7782	7839	7861	7886	7892	7898	7947	7950	7955	7961
				7963	7967	7969	7970	8009	8020	8020	8122	8129	8156	8157	8231
				8232	8233	8234	8251	8252	8253	8337	8385	8388	8390	8402	8405
				8407	8418	8420	8426	8428	8497	8533	8548	8558	8559	8574	8617
				8618	8620	8621	8623	8624	8626	8627	8631	8631	8635	8639	8639
	ARX			688 #	2263	2267	2452	2457	2486	2511	2577	2866	2867	2876	2882
				3850	3881	3883	3889	3897	3922	3926	4001	4004	4130	4132	4132
				4136	4144	4159	4209	4269	4281	4290	4291	4308	4309	4314	4338
				4341	4342	4356	4356	4364	4374	4387	4387	4393	4396	4411	4417
				4437	4457	4461	4465	4469	4475	4479	4483	4487	4531	4543	4549
				4616	4622	4632	4727	4732	4738	4754	4775	4775	4778	4778	4789
				4832	4833	4841	4911	4915	5107	5114	5141	5144	5147	5150	5153
				5304	5345	5345	5370	5415	5485	5486	5497	5679	5782	5794	5794
				5830	5853	5927	5927	5929	5929	5931	5931	5933	5966	6112	6114
				6133	6165	6170	6198	6198	6201	6203	6208	6223	6227	6247	6253
				6258	6264	6291	6293	6322	6343	6349	6349	6352	6362	6362	6371
				6382	6394	6395	6400	6403	6424	6426	6436	6440	6441	6441	6451
				6469	6498	6509	6513	6515	6515	6517	6554	6562	6566	6568	6714
				6900	6943	7013	7016	7091	7092	7113	7114	7201	7203	7241	7242
				7414	7416	7417	7418	7419	7421	7477	7478	7481	7485	7557	7560
				7568	7572	7574	7585	7739	7778	7778	7788	7788	7913	7915	7924
				7930	7953	8012	8018	8030	8134	8139	8142	8207	8209	8214	8218
				8221	8222	8226	8229	8236	8239	8242	8245	8248	8254	8256	8340
				8438	8440	8466	8480	8505	8508	8514	8517	8525
	BR			689 #	2265	2470	2471	2498	2507	2509	2679	2682	3003	3119	3141
				3175	3176	3179	3180	3181	3182	3195	3198	3201	3204	3207	3211
				3214	3216	3249	3250	3253	3254	3264	3265	3274	3275	3277	3278
				3280	3281	3283	3284	3411	3416	3425	3572	3575	3578	3581	3584
				3587	3590	3593	3616	3630	3645	3653	3760	3766	3775	3849	3860
				3866	3872	3895	3912	3918	3945	3980	3982	3986	3991	3999	4014
				4015	4019	4163	4165	4165	4169	4174	4177	4276	4357	4507	4516
				4525	4539	4546	4551	4556	4560	4579	4581	4583	4591	4595	4613
				4614	4733	4737	4741	4742	4889	4895	4909	4971	4992	4993	4994
				4995	4996	5012	5014	5016	5154	5157	5159	5164	5167	5182	5192
				5220	5232	5269	5272	5312	5313	5315	5318	5320	5412	5414	5417
				5423	5424	5428	5477	5522	5569	5582	5657	5683	5686	5688	5699
				5770	5808	5827	5834	5851	6049	6054	6054	6056	6062	6063	6065
				6068	6072	6074	6075	6077	6093	6101	6111	6118	6145	6153	6172
				6262	6319	6324	6331	6332	6333	6335	6341	6346	6354	6360	6360
				6372	6372	6385	6465	6466	6467	6467	6487	6490	6492	6494	6501
				6501	6511	6518	6520	6536	6589	6590	6592	6603	6605	6606	6643
				6653	6725	6727	6728	6987	7032	7075	7083	7087	7106	7153	7154
				7160	7161	7180	7181	7183	7184	7188	7191	7198	7199	7202	7202
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 217
; CROSS REFERENCE LISTING

				7206	7206	7208	7208	7217	7218	7220	7232	7233	7235	7238	7244
				7244	7326	7327	7329	7330	7331	7339	7341	7342	7343	7349	7350
				7355	7356	7388	7390	7392	7394	7408	7502	7541	7542	7543	7567
				7570	7573	7583	7599	7606	7613	7614	7649	7666	7683	7752	7764
				7786	7790	7796	7796	7809	7814	7828	7842	7854	7856	7858	7874
				7877	7880	7883	7890	7896	7916	7922	7928	8022	8026	8235	8349
				8358	8360	8362	8372	8373	8375	8436	8444	8448	8496	8498	8501
				8511	8526	8636	8638
	BRX			690 #	2261	2262	2262	4304	4306	4333	4334	4362	4381	4413	4436
				4537	4599	4658	5245	5248	5303	5309	5311	5323	5347	5352	5369
				5369	5446	5449	5450	5452	5487	5489	5490	5492	5682	5774	5775
				5786	5789	5790	5824	5833	6052	6097	6188	6214	6216	6225	6244
				6251	6265	6289	6294	6301	6376	6376	6390	6418	6420	6431	6433
				6442	6447	6453	6453	6457	6460	6460	6471	6472	6489	6519	6584
				6611	6638	6640	6738	6740	6743	6791	6809	6809	6812	6817	6817
				6819	6911	6916	6920	6924	6928	6932	6936	6952	7209	7211	7211
				7213	7213	7215	7223	7225	7227	7569	7721	7722	7723	7724	7725
				7726	7727	7792	7795	7852	7943	8003	8237	8341	8342	8343	8351
				8354	8356	8369	8370	8379	8379	8397	8399	8409	8410	8412	8458
				8470	8527	8634
	EBR			692 #	2245	4134	7333	7335	7336	8240
	FLG			695 #	2248	2250	2252	2253	3768	5317	5343	5367	5649	5744	5745
				5752	5908	5936	5956	5957	6110	6137	6140	6156	6163	6199	6205
				6213	6217	6241	6245	6252	6271	6300	6392	6483	6510	6521	6525
				6588	6636	6697	6701	6734	6762	6870	8244	8563	8567	8573	8577
				8579	8581	8583	8585	8587	8589	8590	8591	8603
	HR			686 #	2260	2266	2266	2353	2386	2401	2414	2424	2449	2522	3674
				3683	3686	3688	3689	3690	3695	3706	3710	3719	3724	3729	3732
				3734	3753	3774	3787	3808	3809	3813	3817	4099	4109	4111	4113
				4115	4126	4151	4155	4198	4220	4224	4797	7054	7132	7140	7150
				7151	7152	7156	7157	7158	7159	7167	7168	7171	7172	7173	7174
				7175	7176	7177	7178	7554	7579	7584	7612	7958	8093	8095	8097
				8099	8101	8103	8105	8107	8161	8230	8332
	MAG			684 #	2234	4415	4450	4578	4627	4650	5094	5099	5102	5768	5859
				5894	5940	8227
	MASK			694 #	2231	2232	2233	3755	4312	6123	8216	8243
	ONE			691 #	2237	2256	2258	2878	6484	8238
	PC			685 #	2299	2313	2315	2360	2374	2380	3122	3479	3597	3600	3670
				3671	3672	3681	3684	3698	3725	3740	3764	3878	3931	3992	4007
				4150	6377	6635	6635	7768	7940	8028	8228	8565
	PI			696 #	2277	7610	7616	7616	7618	7618	7620	7622	7624	7624	7626
				7626	7714	7715	7716	7717	7718	7719	7720	7812	7813	7813	8246
	T0			698 #	3739	4332	4340	4373	4376	4383	4628	4634	4638	4640	4642
				4647	4652	4653	5693	5698	5705	5706	5733	5735	5736	5737	5740
				5748	5751	5753	5781	5855	5861	6482	6548	6557	6558	7627	7637
				7638	7639	7639	7785	7977	7981	7987	7989	8249
	T1			699 #	2273	2285	2302	2332	2350	2606	3726	4587	4598	4605	4619
				4621	4639	4664	4747	5717	5717	5742	5749	5793	5805	5826	5832
				5842	5864	6552	6565	7762	7794	8141	8250	8547
	UBR			693 #	2243	7259	7263	7268	7268	8241
	XWD1			697 #	2235	8247
(D) B				1386 #	3315	3316	3317	3318	3319	3320	3324	3325	3326	3327	3328
				3329	3331	3332	3333	3334	3335	3336	3337	3338	3340	3341	3342
				3343	3344	3345	3346	3347	3350	3351	3352	3353	3354	3355	3356
				3357	3359	3360	3361	3362	3363	3364	3365	3366	3367	3368	3369
				3370	3371	3372	3373	3374	3376	3377	3378	3379	3380	3381	3382
				3383	3491	3492	3493	3494	3495	3496	3497	3498	3500	3501	3502
				3503	3504	3505	3506	3507	3518	3519	3520	3521	3522	3523	3524
				3525	3535	3536	3537	3538	3539	3540	3541	3542	3551	3552	3553
				3554	3555	3556	3557	3558	3605	3606	3607	3608	3609	3610	3611
				3612	3619	3620	3621	3622	3623	3624	3625	3626	3634	3635	3636
				3637	3638	3639	3640	3641	3648	3649	3840	3841	3842	3939	4027
				4028	4029	4030	4031	4032	4033	4034	4087	4088	4089	4090	4091
				4092	5987	5988	5989	5990	5991	5992	5993	5995	5996	5997	5998
				6000	6001	6002	6003	6008	6009	6010	6011	6012	7820	7821	7822
				7823	7831	7832	7833	7834	7845	7846	7847	7848	8036	8037	8038
				8040	8041	8043	8044	8046	8047	8048	8049	8050	8051	8052	8053
				8055	8056	8057	8058	8059	8060	8061	8062	8064	8065	8066	8067
				8068	8069	8070	8071	8073	8074	8075	8076	8077	8078	8079	8080
				8082	8083	8084	8085	8086	8087	8088	8089
	AC			1390 #	2637	2638	2642	2643	2647	2648	2652	2653	2675	2692	2693
				2697	2698	2702	2703	2707	2708	2712	2713	2717	2718	2722	2723
				2727	2728	2734	2735	2739	2740	2744	2745	2749	2750	2755	2756
				2760	2761	2765	2766	2770	2771	2862	2893	2894	2903	2904	2913
				2914	2923	2924	2928	2929	2945	2946	2956	2957	2966	2967	2976
				2977	2986	2987	2996	2997	3007	3008	3018	3019	3028	3029	3038
				3039	4234	4235	4248	4249	4298	4299	4879	8328
	BOTH			1392 #	2896	2906	2916	2926	2931	2948	2959	2969	2979	2989	2999
				3010	3021	3031	3041	4237	4251	4301
	DBLAC			1388 #	2861	4264	4265	4323	4324	4350	4494	4495	4499	4500	4573
				5759	5821
	DBLB			1389 #	4326	4497	4502
	MEM			1391 #	2639	2644	2649	2654	2694	2699	2704	2709	2714	2719	2724
				2729	2736	2741	2746	2751	2757	2762	2767	2772	2895	2905	2915
				2925	2930	2940	2941	2947	2958	2968	2978	2988	2998	3009	3020
				3030	3040	4236	4250	4300	4325	4496	4501	7382
	SELF			1387 #	2640	2645	2650	2655	2695	2700	2705	2710	2715	2720	2725
				2730	2737	2742	2747	2752	2758	2763	2768	2773
(U) BWRITE			1225 #	2659	2665	2782	2784	2818	2824	2832	2834	2853	2855	2900
				2910	2920	2952	2963	2983	2993	3004	3014	3045	4242	4256	4310
				4316	4339	4341	5577	5581	5628	5649
(U) BYTE			847 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 218
; CROSS REFERENCE LISTING

	BYTE1			848 #	4889	4895	4909	4931	5088	6172	6182	6659	6811	6987	6990
				7032	7034	7106
	BYTE2			849 #	5089
	BYTE3			850 #	5090
	BYTE4			851 #	5091
	BYTE5			852 #	3144	4992	4993	4994	4995	4996	5092	6795
(U) CALL			1003 #	2238	2264	2277	2485	2866	2876	3697	3736	3738	3739	3754
				3778	3781	4003	4006	4133	4143	4148	4152	4157	4160	4198	4200
				4307	4335	4363	4372	4382	4392	4416	4529	4550	4606	4612	4627
				4631	4637	4683	4708	4889	4895	4899	4904	4909	4918	4921	5176
				5186	5221	5249	5308	5319	5453	5496	5499	5504	5506	5617	5619
				5621	5636	5637	5638	5698	5706	5734	5775	5780	5792	5799	5806
				5826	5850	5854	5858	5884	5887	5890	5920	5922	5924	5930	6051
				6092	6095	6099	6132	6138	6164	6187	6202	6206	6213	6224	6226
				6232	6246	6255	6276	6292	6295	6308	6323	6334	6342	6345	6348
				6351	6359	6364	6391	6427	6436	6452	6464	6491	6502	6510	6527
				6553	6583	6586	6591	6669	6678	6689	6692	6702	6715	6730	6737
				6759	6763	6834	6869	6894	6995	7015	7020	7074	7082	7093	7417
				7419	7480	7483	7510	7556	7559	7578	7627	7682	7735	7765	7767
				7783	7787	7827	7838	7853	7872	7881	7910	7917	7942	8135	8137
				8143	8159	8208	8210	8227	8230	8232	8234	8237	8240	8243	8246
				8249	8251	8374	8387
(U) CHKL			750 #	2353	2424	2439	2448	2452	2469	2480	2491	2498	2511	2583
				2616	2622	2627	2630	2682	2882	3192	3263	3548	3695	3719	3734
				3760	3764	3810	3849	3866	3872	3895	3912	3918	3931	3991	4019
				4148	4150	4155	4185	4198	4202	4224	4305	4399	4401	4508	4518
				4603	4626	4633	4936	4965	4971	5095	5360	6049	6068	6482	6677
				6728	6731	6760	7044	7059	7132	7253	7416	7418	7421	7469	7477
				7553	7583	7585	7593	7649	7748	7790	7916	7963	8009	8012	8014
				8026	8028	8122	8141	8161	8227	8228	8230	8231	8234	8235	8237
				8238	8240	8241	8243	8244	8246	8247	8249	8250	8252	8436	8496
				8634	8638
(U) CHKR			757 #	2353	2424	2439	2448	2452	2469	2480	2491	2498	2511	2583
				2616	2622	2627	2630	2682	2882	3192	3263	3548	3695	3719	3734
				3760	3764	3810	3849	3866	3872	3895	3912	3918	3931	3991	4019
				4148	4150	4155	4185	4198	4202	4224	4305	4399	4401	4508	4518
				4603	4626	4633	4936	4965	4971	5095	5360	6049	6068	6482	6677
				6728	6731	6760	7044	7059	7132	7253	7416	7418	7421	7469	7477
				7553	7583	7585	7593	7649	7748	7790	7916	7963	8009	8012	8014
				8026	8028	8122	8141	8161	8227	8228	8230	8231	8234	8235	8237
				8238	8240	8241	8243	8244	8246	8247	8249	8250	8252	8436	8496
				8634	8638
(U) CLKL			746 #	2313	2315	2360	2374	2375	2381	2386	2401	2402	2414	2425
				2449	2784	2816	2824	2846	2848	3479	3597	3600	3670	3671	3672
				3681	3684	3698	3710	3740	3765	3779	3932	3993	4005	4009	4159
				4171	4176	4209	4225	4278	4935	4966	5180	5240	5264	5317	5322
				5343	5347	5352	5367	5370	5380	5455	5723	6062	6065	6068	6110
				6137	6140	6156	6163	6191	6199	6205	6213	6217	6229	6241	6245
				6252	6271	6300	6377	6392	6431	6466	6483	6510	6521	6525	6582
				6588	6636	6697	6701	6736	6762	6805	6810	6870	6991	7035	7044
				7200	7226	7240	7327	7329	7432	7479	7482	7554	7559	7584	7620
				7622	7624	7626	7638	7714	7715	7716	7717	7718	7719	7720	7742
				7813	7940	7961	7961	8142	8158	8229	8236	8239	8242	8245	8248
				8445	8468	8482	8502	8512	8515	8563	8565	8573	8577	8579	8581
				8583	8585	8587	8589	8590	8591	8635
(U) CLKR			753 #	2507	2509	2522	2544	2545	2782	2818	2822	2839	2841	2866
				3219	3221	3529	3674	3683	3686	3688	3689	3690	3724	3729	3732
				3753	3774	3787	3808	3944	4099	4109	4111	4113	4115	4128	4142
				4152	4206	4222	4289	4290	4291	4314	4337	4549	4589	4652	4707
				4832	5014	5152	5160	5225	5271	5310	5314	5419	5420	5423	5424
				5449	5450	5483	5484	5545	5546	5624	5639	5744	5745	5752	5769
				5893	5926	5956	5957	5972	6055	6077	6297	6302	6371	6387	6388
				6394	6434	6436	6443	6449	6458	6477	6529	6532	6537	6562	6568
				6641	6739	6741	6814	6818	6874	6917	6921	6925	6929	6933	6937
				6953	7054	7066	7140	7150	7151	7152	7156	7157	7158	7159	7167
				7168	7171	7172	7173	7174	7175	7176	7177	7178	7194	7234	7237
				7257	7261	7335	7336	7344	7352	7358	7504	7612	7614	7616	7618
				7766	7970	8018	8093	8095	8097	8099	8101	8103	8105	8107	8332
				8378	8398	8401	8449	8460	8472	8500	8603
(U) CLRFPD			1153 #	3861	3981	3987	4394	4905	4922	6521
(D) COND FUNC			1409 #	2639	2640	2644	2645	2649	2650	2654	2655	2694	2695	2699
				2700	2704	2705	2709	2710	2714	2715	2719	2720	2724	2725	2729
				2730	2736	2737	2741	2742	2746	2747	2751	2752	2757	2758	2762
				2763	2767	2768	2772	2773	2895	2896	2905	2906	2915	2916	2925
				2926	2930	2931	2940	2941	2947	2948	2958	2959	2968	2969	2978
				2979	2988	2989	2998	2999	3009	3010	3020	3021	3030	3031	3040
				3041	4236	4237	4250	4251	4300	4301	4325	4326	4496	4497	4501
				4502	5390	5391	5394	5395	5398	5399	5402	5403	5436	5437	5441
				5442	5466	5467	5471	5472	7382
(U) CRY38			986 #	2667	3045	3511	3562	3645	3672	3681	3684	4255	4273	4281
				4286	4464	4468	4512	4556	4590	4613	4614	4620	4642	4668	4710
				4711	4712	4728	4730	4737	4743	4775	4806	4811	4816	4821	4833
				4837	4841	4843	5181	5239	5257	5311	5323	5340	5364	5409	5486
				5489	5490	5497	5508	5522	5616	5618	5620	5622	5633	5648	5679
				5718	5833	5844	5851	5867	5907	5912	5933	5939	5973	6101	6135
				6149	6170	6227	6263	6264	6265	6313	6377	6395	6398	6467	6484
				6492	6511	6519	6520	6554	6556	6559	6608	6961	7086	7094	7100
				7526	7638	7670	7687	7940	8565
(U) DBM				724 #
	APR FLAGS		727 #	7153	7154	7209	7241	7541
	BYTES			728 #
	DP			730 #	3144	4889	4895	4909	4931	4992	4993	4994	4995	4996	5088
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 219
; CROSS REFERENCE LISTING

				5089	5090	5091	5092	6172	6182	6659	6795	6811	6987	6990	7032
				7034	7106
	DP SWAP			731 #	2475	2659	2810	2812	2815	2818	2821	2824	3409	3414	3739
				3943	4001	4015	4140	5012	5141	5157	5260	5304	5313	5378	6531
				6589	6594	6595	6900	7233	7614	7627	7637	8440
	EXP			729 #	5624	5639	5972	7567	7568	7569
	MEM			733 #	2243	2352	2424	2438	2447	2451	2479	2490	2497	2510	3694
				3718	3733	3756	3760	3764	3810	3848	3894	3931	4018	4184	4964
				4970	5359	6049	6068	6482	6731	6760	7044	7058	7117	7125	7132
				7253	7469	7477	7552	7593	7732	7736	7748	7784	7790	7882	7963
				8009	8012	8014	8016	8121	8136	8160	8210	8389	8395	8436
	PF DISP			726 #	8346
	SCAD DIAG		725 #
	VMA			732 #	7977	8221	8342	8373
	#			734 #	2231	2233	2235	2237	2240	2260	2261	2270	2273	2285	2302
				2322	2326	2329	2332	2341	2344	2347	2350	2507	2509	2522	2544
				2545	2606	2839	2841	2846	2848	2866	3145	3218	3220	3674	3683
				3686	3688	3689	3690	3724	3726	3729	3732	3738	3753	3754	3768
				3774	3787	3808	3897	3926	3992	4007	4099	4109	4111	4113	4115
				4126	4130	4163	4167	4169	4172	4174	4205	4214	4220	4290	4291
				4549	4587	4588	4598	4605	4652	4705	4732	4738	4832	5002	5147
				5150	5154	5174	5178	5184	5188	5218	5223	5257	5262	5269	5317
				5320	5419	5420	5423	5424	5449	5450	5454	5483	5484	5521	5525
				5545	5546	5641	5686	5688	5744	5745	5752	5769	5789	5790	5809
				5812	5841	5843	5882	5885	5888	5891	5949	5956	5957	6016	6018
				6020	6022	6024	6026	6028	6030	6032	6050	6052	6077	6094	6097
				6110	6137	6140	6163	6199	6205	6213	6224	6226	6245	6252	6271
				6285	6289	6296	6300	6301	6309	6313	6329	6371	6387	6388	6394
				6400	6420	6433	6436	6442	6447	6455	6457	6483	6510	6514	6528
				6530	6536	6548	6557	6562	6568	6585	6597	6600	6608	6620	6623
				6636	6640	6656	6697	6701	6717	6729	6734	6738	6740	6756	6762
				6777	6798	6804	6812	6815	6895	6916	6920	6924	6928	6932	6936
				6946	6952	7054	7064	7134	7140	7150	7151	7152	7156	7157	7158
				7159	7167	7168	7171	7172	7173	7174	7175	7176	7177	7178	7180
				7183	7188	7191	7199	7201	7203	7205	7207	7210	7212	7214	7225
				7235	7238	7242	7255	7259	7262	7263	7266	7327	7328	7329	7334
				7335	7336	7342	7350	7356	7502	7515	7542	7557	7609	7611	7612
				7613	7615	7617	7619	7620	7621	7622	7623	7625	7660	7666	7681
				7683	7714	7715	7716	7717	7718	7719	7720	7721	7722	7723	7724
				7725	7726	7727	7729	7733	7741	7750	7751	7762	7766	7780	7786
				7792	7794	7809	7874	7877	7885	7892	7898	7912	7913	7924	7930
				7944	7946	7960	8003	8093	8095	8097	8099	8101	8103	8105	8107
				8156	8157	8332	8354	8356	8370	8375	8380	8396	8397	8399	8407
				8437	8444	8448	8453	8454	8458	8462	8466	8470	8477	8479	8480
				8498	8501	8505	8508	8511	8514	8547	8556	8577	8579	8581	8583
				8585	8587	8591	8599	8603	8608	8609	8611	8612	8614	8615	8617
				8618	8620	8621	8623	8624	8626	8627
(U) DBUS			715 #
	DBM			721 #	2231	2233	2235	2237	2240	2243	2260	2261	2270	2273	2285
				2302	2322	2326	2329	2332	2341	2344	2347	2350	2352	2353	2424
				2424	2438	2439	2447	2448	2451	2452	2475	2479	2480	2490	2491
				2497	2498	2507	2509	2510	2511	2522	2544	2545	2606	2659	2810
				2812	2815	2818	2821	2824	2839	2841	2846	2848	2866	3144	3145
				3218	3220	3409	3414	3674	3683	3686	3688	3689	3690	3694	3695
				3718	3719	3724	3726	3729	3732	3733	3734	3738	3739	3753	3754
				3756	3760	3760	3764	3764	3768	3774	3787	3808	3810	3810	3848
				3849	3894	3895	3897	3926	3931	3931	3943	3992	4001	4007	4015
				4018	4019	4099	4109	4111	4113	4115	4126	4130	4140	4163	4167
				4169	4172	4174	4184	4185	4205	4214	4220	4290	4291	4549	4587
				4588	4598	4605	4652	4705	4732	4738	4832	4889	4895	4909	4931
				4964	4965	4970	4971	4992	4993	4994	4995	4996	5002	5012	5088
				5089	5090	5091	5092	5141	5147	5150	5154	5157	5174	5178	5184
				5188	5218	5223	5257	5260	5262	5269	5304	5313	5317	5320	5359
				5360	5378	5419	5420	5423	5424	5449	5450	5454	5483	5484	5521
				5525	5545	5546	5624	5639	5641	5686	5688	5744	5745	5752	5769
				5789	5790	5809	5812	5841	5843	5882	5885	5888	5891	5949	5956
				5957	5972	6016	6018	6020	6022	6024	6026	6028	6030	6032	6049
				6049	6050	6052	6068	6068	6077	6094	6097	6110	6137	6140	6163
				6172	6182	6199	6205	6213	6224	6226	6245	6252	6271	6285	6289
				6296	6300	6301	6309	6313	6329	6371	6387	6388	6394	6400	6420
				6433	6436	6442	6447	6455	6457	6482	6482	6483	6510	6514	6528
				6530	6531	6536	6548	6557	6562	6568	6585	6589	6594	6595	6597
				6600	6608	6620	6623	6636	6640	6656	6659	6697	6701	6717	6729
				6731	6731	6734	6738	6740	6756	6760	6760	6762	6777	6795	6798
				6804	6811	6812	6815	6895	6900	6916	6920	6924	6928	6932	6936
				6946	6952	6987	6990	7032	7034	7044	7044	7054	7058	7059	7064
				7106	7117	7125	7132	7132	7134	7140	7150	7151	7152	7153	7154
				7156	7157	7158	7159	7167	7168	7171	7172	7173	7174	7175	7176
				7177	7178	7180	7183	7188	7191	7199	7201	7203	7205	7207	7209
				7210	7212	7214	7225	7233	7235	7238	7241	7242	7253	7253	7255
				7259	7262	7263	7266	7327	7328	7329	7334	7335	7336	7342	7350
				7356	7469	7469	7477	7477	7502	7515	7541	7542	7552	7553	7557
				7567	7568	7569	7593	7593	7609	7611	7612	7613	7614	7615	7617
				7619	7620	7621	7622	7623	7625	7627	7637	7660	7666	7681	7683
				7714	7715	7716	7717	7718	7719	7720	7721	7722	7723	7724	7725
				7726	7727	7729	7732	7733	7736	7737	7741	7748	7748	7750	7751
				7762	7766	7780	7784	7785	7786	7790	7790	7792	7794	7809	7874
				7877	7882	7883	7885	7892	7898	7912	7913	7924	7930	7944	7946
				7960	7963	7963	7977	8003	8009	8009	8012	8012	8014	8014	8016
				8093	8095	8097	8099	8101	8103	8105	8107	8121	8122	8136	8156
				8157	8160	8161	8210	8221	8332	8342	8346	8351	8354	8356	8370
				8373	8375	8380	8389	8395	8396	8397	8399	8407	8436	8436	8437
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 220
; CROSS REFERENCE LISTING

				8440	8444	8448	8453	8454	8458	8462	8466	8470	8477	8479	8480
				8498	8501	8505	8508	8511	8514	8547	8556	8577	8579	8581	8583
				8585	8587	8591	8599	8603	8608	8609	8611	8612	8614	8615	8617
				8618	8620	8621	8623	8624	8626	8627
	DP			719 #	2255	2256	2577	2583	2610	2616	2622	2627	2630	2682	2867
				2882	3125	3146	3182	3216	3222	3440	3529	3531	3548	3572	3575
				3575	3578	3578	3581	3581	3584	3587	3587	3590	3590	3593	3593
				3814	3866	3872	3881	3883	3912	3918	3948	3953	3982	3991	4148
				4150	4155	4198	4202	4224	4289	4314	4337	4366	4374	4383	4385
				4396	4396	4397	4398	4400	4402	4630	4646	4647	4648	4650	4653
				4672	4674	4677	4807	4812	4817	4823	4824	4825	4905	4936	5095
				5272	5318	5337	5363	5381	5573	5579	5894	5902	5938	5939	5940
				5947	6101	6148	6169	6175	6185	6188	6212	6214	6216	6251	6258
				6293	6335	6352	6354	6389	6390	6390	6402	6403	6410	6412	6437
				6437	6440	6472	6478	6489	6494	6516	6517	6518	6681	6682	6728
				6743	6819	6836	6874	6964	6964	6993	7036	7075	7083	7090	7095
				7102	7416	7418	7421	7504	7583	7585	7649	7839	7916	7958	8026
				8028	8030	8141	8227	8228	8230	8231	8234	8235	8237	8238	8240
				8241	8243	8244	8246	8247	8249	8250	8252	8496	8567	8634	8638
	PC FLAGS		716 #	3775	3789	3860	3980	3986	4141	4166	4199	4403	7113	7752
				7764	8636
	PI NEW			717 #	7711
	RAM			720 #	2263	2374	2386	2401	2414	2443	2456	2457	2469	2470	2679
				2782	2784	2816	2822	2876	2910	2920	2952	2963	2983	2993	3003
				3035	3067	3070	3084	3090	3103	3106	3119	3192	3195	3263	3264
				3416	3431	3434	3439	3511	3616	3630	3645	3653	3702	3710	3850
				3889	3922	3945	4002	4014	4241	4255	4269	4272	4281	4283	4286
				4305	4333	4362	4364	4376	4381	4399	4401	4508	4517	4518	4601
				4603	4626	4633	4643	4806	4810	4811	4815	4816	4820	4821	4911
				4915	4949	4957	5172	5181	5182	5194	5198	5234	5241	5247	5255
				5303	5315	5379	5412	5446	5479	5544	5682	5683	5693	5774	5786
				5830	5838	6062	6065	6093	6096	6111	6114	6131	6135	6145	6152
				6162	6165	6180	6184	6208	6223	6225	6243	6256	6262	6269	6275
				6288	6291	6308	6311	6315	6319	6322	6324	6331	6333	6341	6343
				6346	6382	6384	6385	6397	6398	6418	6423	6424	6425	6446	6451
				6463	6469	6479	6487	6492	6498	6505	6511	6512	6513	6534	6554
				6559	6564	6566	6584	6643	6677	6688	6691	6716	6725	6727	6753
				6768	6833	6835	6879	6880	6888	6950	6955	6957	6962	6966	6968
				6984	6986	7014	7039	7041	7073	7077	7081	7086	7087	7092	7100
				7101	7104	7198	7232	7326	7388	7390	7392	7394	7408	7414	7417
				7419	7508	7520	7522	7531	7573	7574	7577	7599	7828	7842	7856
				7858	7950	7953	7955	7961	7967	7969	8129	8209	8214	8218	8233
				8251	8253	8254	8256	8385	8388	8390	8418	8420	8426	8428	8497
				8525	8526	8527	8533	8548	8558	8574
(U) DEST			648 #
	A			649 #	2475	2491	2577	2610	2659	2810	2812	2815	2818	2821	2824
				2867	3146	3182	3409	3414	3440	3529	3531	3572	3575	3578	3581
				3584	3587	3590	3593	3739	3881	3883	3943	3982	4001	4015	4140
				4289	4314	4337	4396	4647	4653	4825	4889	4895	4905	4909	4931
				4992	4993	4994	4995	4996	5012	5088	5089	5090	5091	5092	5141
				5157	5260	5304	5313	5318	5378	5381	5573	5579	5624	5639	5902
				5947	5972	6148	6169	6172	6182	6185	6214	6251	6258	6293	6352
				6354	6389	6390	6402	6403	6437	6440	6472	6478	6489	6494	6516
				6517	6518	6531	6589	6594	6595	6659	6682	6743	6811	6819	6874
				6900	6964	6987	6990	6993	7032	7034	7036	7075	7083	7090	7095
				7102	7106	7233	7504	7614	7627	7637	7839	8030	8440
	AD			651 #	2231	2233	2235	2237	2240	2243	2245	2248	2257	2260	2261
				2262	2263	2266	2273	2277	2285	2299	2302	2313	2315	2322	2326
				2329	2332	2341	2344	2347	2350	2353	2360	2374	2380	2386	2401
				2405	2414	2424	2439	2443	2448	2449	2452	2456	2457	2480	2486
				2498	2501	2504	2507	2509	2522	2544	2545	2606	2667	2679	2782
				2784	2816	2822	2832	2834	2839	2841	2846	2848	2853	2855	2866
				2876	2900	2910	2920	2935	2952	2963	2973	2983	2993	3003	3004
				3014	3025	3035	3045	3067	3070	3084	3119	3122	3145	3411	3416
				3428	3431	3434	3439	3479	3511	3546	3562	3597	3600	3616	3630
				3645	3653	3670	3671	3674	3683	3686	3688	3689	3690	3695	3698
				3710	3719	3724	3725	3726	3729	3732	3734	3740	3753	3760	3761
				3764	3768	3774	3775	3779	3782	3787	3789	3808	3810	3813	3849
				3850	3860	3878	3889	3895	3897	3922	3926	3931	3945	3980	3986
				3992	3999	4002	4004	4007	4014	4019	4099	4109	4111	4113	4115
				4126	4130	4132	4141	4151	4159	4163	4165	4166	4169	4174	4185
				4199	4205	4209	4214	4220	4225	4241	4255	4269	4272	4276	4277
				4281	4283	4286	4290	4291	4304	4310	4316	4318	4319	4332	4333
				4338	4341	4342	4357	4373	4387	4403	4411	4507	4510	4512	4516
				4517	4531	4537	4543	4549	4566	4587	4598	4599	4605	4616	4622
				4632	4640	4652	4659	4662	4712	4727	4729	4730	4732	4737	4738
				4751	4820	4821	4832	4833	4835	4837	4841	4842	4843	4915	4929
				4935	4965	4971	5014	5025	5112	5113	5114	5115	5150	5159	5172
				5174	5182	5184	5188	5191	5218	5231	5241	5245	5251	5262	5269
				5303	5309	5312	5315	5317	5320	5343	5345	5347	5352	5367	5369
				5370	5379	5409	5412	5415	5416	5417	5419	5420	5423	5424	5429
				5446	5449	5450	5456	5477	5479	5483	5484	5485	5486	5522	5544
				5545	5546	5577	5581	5582	5631	5633	5642	5645	5647	5648	5649
				5661	5679	5680	5693	5698	5699	5706	5707	5717	5742	5744	5745
				5749	5752	5770	5781	5793	5794	5824	5826	5827	5832	5833	5834
				5842	5853	5855	5869	5870	5908	5910	5912	5927	5929	5931	5933
				5936	5956	5957	5973	6016	6018	6020	6022	6024	6026	6028	6030
				6032	6049	6052	6054	6062	6063	6065	6068	6077	6089	6093	6096
				6097	6103	6105	6110	6111	6112	6114	6122	6131	6133	6135	6137
				6140	6145	6149	6152	6154	6155	6156	6162	6163	6165	6170	6179
				6180	6184	6186	6191	6198	6199	6203	6205	6208	6213	6217	6223
				6225	6228	6229	6230	6241	6243	6245	6252	6256	6260	6262	6263
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 221
; CROSS REFERENCE LISTING

				6264	6265	6270	6271	6275	6285	6288	6289	6291	6296	6300	6301
				6308	6311	6315	6319	6322	6324	6333	6341	6343	6346	6349	6360
				6362	6371	6372	6376	6377	6382	6384	6385	6387	6388	6392	6394
				6395	6397	6398	6400	6418	6420	6423	6424	6425	6431	6433	6436
				6441	6442	6446	6447	6451	6453	6457	6460	6463	6465	6466	6467
				6469	6477	6479	6480	6482	6483	6485	6487	6492	6498	6501	6505
				6510	6511	6512	6513	6515	6519	6520	6521	6525	6529	6532	6534
				6536	6548	6552	6554	6556	6557	6559	6562	6564	6566	6568	6570
				6582	6584	6588	6597	6600	6635	6636	6640	6643	6653	6655	6660
				6688	6691	6697	6701	6716	6717	6725	6727	6729	6731	6734	6738
				6740	6753	6756	6758	6760	6762	6768	6777	6798	6804	6809	6812
				6815	6817	6833	6835	6870	6879	6888	6897	6916	6920	6924	6928
				6932	6936	6946	6950	6952	6955	6957	6961	6962	6966	6968	6984
				6986	6989	6991	7013	7014	7033	7035	7044	7054	7059	7064	7073
				7077	7081	7086	7087	7091	7092	7094	7098	7100	7101	7104	7113
				7116	7124	7132	7140	7150	7151	7152	7153	7154	7156	7157	7158
				7159	7160	7161	7167	7168	7171	7172	7173	7174	7175	7176	7177
				7178	7180	7183	7188	7191	7198	7199	7201	7202	7203	7206	7208
				7209	7211	7213	7225	7232	7235	7238	7241	7242	7244	7253	7255
				7259	7263	7266	7268	7326	7327	7329	7333	7335	7336	7342	7343
				7349	7350	7355	7356	7388	7390	7392	7394	7408	7414	7417	7419
				7432	7469	7477	7479	7482	7502	7503	7508	7509	7511	7520	7522
				7526	7531	7541	7542	7553	7554	7557	7567	7568	7569	7572	7573
				7574	7577	7584	7593	7599	7606	7610	7612	7613	7616	7618	7620
				7622	7624	7626	7638	7639	7656	7660	7666	7670	7681	7683	7687
				7693	7714	7715	7716	7717	7718	7719	7720	7721	7722	7723	7724
				7725	7726	7727	7729	7733	7737	7739	7741	7743	7748	7752	7762
				7764	7766	7768	7778	7780	7782	7785	7786	7788	7790	7794	7796
				7809	7813	7828	7842	7852	7854	7856	7858	7861	7874	7877	7883
				7886	7892	7898	7913	7924	7930	7943	7950	7953	7955	7961	7963
				7967	7969	7970	7977	8003	8009	8012	8018	8020	8093	8095	8097
				8099	8101	8103	8105	8107	8122	8129	8139	8142	8156	8157	8161
				8209	8214	8218	8221	8229	8233	8236	8239	8242	8245	8248	8251
				8253	8254	8256	8332	8342	8351	8354	8356	8370	8373	8375	8379
				8385	8388	8390	8397	8399	8402	8407	8418	8420	8426	8428	8436
				8438	8444	8448	8458	8466	8470	8480	8497	8498	8501	8508	8511
				8514	8525	8526	8527	8533	8547	8548	8558	8563	8565	8573	8574
				8577	8579	8581	8583	8585	8587	8589	8590	8591	8603	8617	8618
				8620	8621	8623	8624	8626	8627	8631	8635	8636	8639
	AD*.5			658 #	2234	2511	2513	2514	3086	3090	3103	3106	3108	3109	3113
				3144	3198	3201	3281	3283	4355	4356	4362	4364	4374	4376	4381
				4413	4579	4601	4607	4740	4741	4742	4748	5005	5016	5094	5144
				5147	5154	5164	5492	5500	5502	5507	5508	5569	5619	5621	5637
				5638	5657	5658	5663	5682	5683	5686	5688	5774	5775	5782	5786
				5789	5790	5808	5830	5838	5841	5843	5966	5977	6596	6599	6603
				6605	6690	6795	6801	6808	6873	7339	7341	7792	7795	7814	7890
				7896	8405
	AD*2			656 #	2232	3074	3097	3111	3114	3141	3275	3277	4309	4336	4393
				4642	4784	4911	5257	5266	5487	5490	5495	5572	6331	6332	6590
				6781	6891	7321	7323	7740	7776	7922	7928	8022	8505
	PASS			653 #	2242	2250	2252	2253	2256	2258	2259	2265	2267	2312	2316
				2334	2392	2419	2428	2517	2583	2616	2622	2627	2630	2682	2882
				2883	3216	3467	3548	3596	3601	3677	3714	3777	3788	3817	3866
				3872	3902	3907	3912	3918	3948	3953	3988	3991	4016	4148	4150
				4155	4198	4202	4224	4312	4340	4383	4398	4400	4402	4405	4585
				4630	4650	4672	4674	4677	4807	4812	4817	4823	4824	4887	4890
				4900	4936	4953	4961	5095	5153	5167	5177	5187	5220	5305	5326
				5333	5894	5938	5939	5940	6059	6066	6072	6075	6101	6106	6123
				6201	6233	6249	6272	6286	6304	6335	6426	6428	6484	6490	6503
				6509	6587	6644	6714	6726	6728	6769	6836	6867	7040	7042	7060
				7078	7114	7181	7184	7220	7252	7331	7415	7416	7418	7421	7441
				7443	7445	7447	7470	7478	7481	7485	7506	7523	7529	7560	7563
				7570	7583	7585	7594	7595	7629	7648	7649	7654	7747	7812	7880
				7915	7916	7918	7947	7962	7981	7987	7989	8024	8026	8028	8118
				8126	8134	8141	8153	8207	8222	8227	8228	8230	8231	8232	8234
				8235	8237	8238	8240	8241	8243	8244	8246	8247	8249	8250	8252
				8255	8337	8340	8341	8343	8347	8349	8358	8360	8362	8369	8372
				8435	8492	8496	8503	8513	8528	8634	8638
	Q_AD			652 #	2469	3083	3192	3218	3220	3263	4305	4331	4371	4391	4399
				4401	4412	4508	4518	4578	4588	4590	4603	4626	4629	4631	4633
				4644	4657	4658	4661	4668	4676	4705	4710	4711	4728	4753	4806
				4810	4811	4815	4816	5020	5098	5105	5169	5178	5181	5198	5223
				5239	5247	5311	5360	5426	5451	5454	5499	5510	5523	5527	5529
				5530	5543	5557	5616	5618	5620	5622	5691	5700	5703	5708	5718
				5723	5764	5769	5779	5792	5798	5810	5813	5844	5849	5854	5856
				5867	5892	5906	5907	5925	6119	6269	6677	8014
	Q_Q*.5			657 #	2470	2471	3175	3195	3204	3249	3264	3265	3274	4306	4334
				4415	4436	4437	4450	4457	4465	4475	4483	4581	4583	4591	4595
				4611	4627	4634	4686	4735	5248	5428	5452	5457	5534	5536	5567
				5712	5737	5740	5748	5751	5753	5768	5803	5845	5859	5886	5889
				5921	5923	5969
	Q_Q*2			655 #	3093	3176	3179	3180	3181	3207	3211	3214	3250	3253	3254
				3278	3280	3284	4461	4469	4479	4487	4628	4638	4666	4669	4743
				4746	4747	4750	4752	4775	4778	4790	4795	5021	5024	5099	5102
				5107	5615	5627	5635	5714	5719	5721	5733	5735	5736	5766	5807
				5811	5861	5879	5899	5916	5944	6121
(U) DISP			893 #	4755
	ADISP			900 #
	AREAD			896 #	2406
	BDISP			901 #	2659	2665	2782	2784	2818	2824	2832	2834	2853	2855	2900
				2910	2920	2952	2963	2983	2993	3004	3014	3045	3411	3417	3511
				3531	3532	3616	3630	3645	3655	3867	3874	3913	4242	4256	4310
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 222
; CROSS REFERENCE LISTING

				4316	4339	4341	5569	5577	5581	5628	5639	5649	5657	6064	6107
				6242	6298	6506	6871	6944	6951	7828	7855	7873	7884	7911
	BYTE			906 #	4903	4920	6279	6997	7019
	CONSOLE			894 #
	DP			899 #	4619	4621	4639	4664	6606	6634	8567
	DP LEFT			897 #	6592	6898	7712	8348
	DROM			895 #	2440	2444	2453	2458	2466	2487	2493	2518	2523	6073	6076
	EAMODE			907 #	2363	2430	3700	4944	4947	6060	7037	7045	7952
	MUL			903 #	4457	4465	4475	4483	5715	5741	5743	5862
	NICOND			905 #	2312	2313	2315	2316	2377	2383	2611	3146	3194	3222	3467
				3479	3572	3596	3597	3600	3601	3670	3671	3698	3740	3882	3960
				3967	4405	4675	4678	4890	5573	5579	5941	7629	7918
	NORM			898 #	5429	5459	5538	5615	5617	5627	5631	5633	5635	5636	5661
				5814	5869	5870	5881	5883	5901	5911	5913	5918	5919	5946	5975
	PAGE FAIL		904 #
	RETURN			902 #	2544	2545	3705	3709	4207	4210	4418	4462	4470	4480	4488
				4686	4709	4710	4712	4797	4825	4930	4932	4936	4972	5006	5025
				5095	5660	5662	5663	5753	5949	5956	5957	5972	6355	6365	6370
				6373	6411	6412	6563	6569	6746	6770	6838	6870	6882	6914	6930
				6947	6956	6958	6985	7021	7055	7061	7066	7107	7359	7432	7530
				7564	7641	7701	7810	7813	7886	7893	7899	7956	7964	7968	7971
				7997	8010	8012	8014	8016	8018	8020	8022	8024	8026	8028	8030
				8219	8223	8257	8534
	SCAD0			908 #	4889	4895	4909	4988	5412	5559	5561	6119	6121	6173	6988
				7032	7983
(U) DISP HIGH			1358 #
(U) DISP LOW			1359 #
(U) DIVIDE			997 #	4746	4747	4792	4796
(U) DONT CACHE			1199 #
(U) DP FUNC			1217 #	7880	7915	8024	8503	8513	8529
(U) DT				965 #
	2T			968 #
	3T			969 #	2263	2457	2469	2470	2582	2615	2621	2626	2629	2681	2876
				2882	3090	3103	3106	3120	3192	3195	3263	3264	3473	3476	3485
				3488	3548	3578	3581	3590	3593	3738	3738	3754	3754	3865	3871
				3911	3917	3990	4147	4149	4154	4167	4172	4197	4201	4223	4269
				4281	4308	4313	4376	4381	4399	4401	4518	4520	4522	4526	4540
				4580	4586	4601	4603	4615	4626	4633	4646	4728	4806	4808	4810
				4811	4813	4815	4816	4818	4834	4841	4889	4895	4903	4909	4911
				4920	4936	5095	5168	5172	5181	5182	5197	5228	5241	5247	5315
				5336	5362	5379	5429	5459	5477	5497	5503	5505	5538	5580	5615
				5617	5623	5627	5631	5633	5635	5636	5641	5646	5661	5683	5786
				5805	5809	5812	5814	5827	5838	5857	5869	5870	5881	5882	5883
				5885	5888	5891	5898	5901	5907	5911	5913	5918	5919	5943	5946
				5949	5967	5975	6050	6093	6094	6111	6114	6131	6135	6145	6152
				6162	6165	6180	6184	6208	6223	6224	6226	6243	6256	6262	6266
				6269	6275	6279	6291	6308	6309	6311	6315	6319	6320	6322	6324
				6329	6331	6333	6341	6343	6346	6382	6384	6385	6396	6397	6398
				6399	6418	6424	6451	6455	6463	6468	6469	6479	6487	6492	6498
				6505	6511	6512	6513	6514	6528	6530	6534	6585	6620	6623	6643
				6677	6681	6688	6691	6695	6716	6725	6727	6728	6732	6753	6754
				6768	6833	6835	6879	6880	6881	6888	6895	6950	6955	6957	6962
				6966	6968	6984	6986	6997	7014	7019	7073	7077	7081	7086	7087
				7092	7100	7101	7104	7153	7154	7198	7205	7207	7209	7210	7212
				7214	7232	7241	7262	7326	7388	7390	7392	7394	7408	7414	7416
				7417	7418	7419	7421	7508	7515	7520	7522	7527	7531	7541	7571
				7573	7574	7577	7583	7585	7599	7609	7611	7615	7617	7619	7621
				7623	7625	7649	7880	7885	7912	7915	7916	7944	7946	7950	7953
				7955	7960	7967	7969	8024	8026	8028	8141	8209	8214	8215	8218
				8227	8228	8230	8231	8233	8234	8235	8237	8238	8240	8241	8243
				8244	8246	8247	8249	8250	8251	8252	8253	8254	8256	8380	8385
				8388	8390	8396	8418	8420	8426	8428	8437	8453	8454	8462	8477
				8479	8495	8497	8525	8526	8527	8533	8548	8556	8558	8574	8599
				8608	8609	8611	8612	8614	8615	8633	8637
	4T			970 #
	5T			971 #
(U) EXT ADR			1223 #	4138	4146	4159	4179	4209	7121	7129	7747	7789	7880	7915
				8024	8139	8142	8226	8229	8236	8239	8242	8245	8248	8435	8494
				8632	8635	8640
(U) FETCH			1188 #	2312	2313	2315	2316	2335	2361	2376	2382	2429	2491	2517
				3123	3467	3479	3596	3597	3600	3601	3670	3671	3698	3740	3880
				4405	4890	4900	7629	7918	8154	8556
(D) FL-B			1397 #
	AC			1398 #	5389	5392	5393	5397	5400	5401	5435	5439	5440	5465	5469
				5470	5516	5517	5552	5553
	BOTH			1400 #	5391	5395	5399	5403	5437	5442	5467	5472
	MEM			1399 #	5390	5394	5398	5402	5436	5441	5466	5471
(U) FLG.C			1347 #
(U) FLG.PI			1346 #	3769	8380	8462	8479	8603
(U) FLG.SN			1348 #	5641	5744	5745	5752	5882	5885	5888	5891	5949	5956	5957
(U) FLG.W			1345 #
(U) FMWRITE			992 #	2242	2250	2252	2253	2255	2256	2258	2259	2265	2267	2577
				2610	2867	3125	3146	3182	3216	3222	3440	3531	3572	3575	3578
				3581	3584	3587	3590	3593	3817	3881	3883	3948	3953	3982	4366
				4374	4383	4385	4396	4397	4398	4400	4402	4630	4646	4647	4648
				4650	4653	4672	4674	4677	4807	4812	4817	4823	4824	4825	4887
				4905	5153	5167	5177	5187	5220	5272	5318	5381	5573	5579	5894
				5902	5938	5939	5940	5947	6059	6072	6075	6101	6106	6123	6148
				6169	6175	6185	6188	6201	6212	6214	6216	6233	6249	6251	6258
				6272	6286	6293	6304	6335	6352	6354	6389	6390	6402	6403	6410
				6412	6426	6428	6437	6440	6472	6478	6484	6489	6490	6494	6503
				6509	6516	6517	6518	6682	6714	6743	6819	6836	6867	6964	6993
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 223
; CROSS REFERENCE LISTING

				7036	7060	7075	7078	7083	7090	7095	7102	7114	7220	7331	7441
				7443	7445	7447	7470	7478	7481	7485	7506	7523	7529	7560	7563
				7594	7595	7839	7947	7981	7987	7989	8030	8134	8207	8222	8232
				8337	8340	8341	8343	8349	8358	8360	8362	8369	8372
(U) FORCE EXEC			1186 #	4138	4146	4159	4179	4209	7121	7129	7733	7747	7749	7763
				7780	7789	7797	7874	7877	7913	7924	7930	8139	8142	8156	8226
				8229	8236	8239	8242	8245	8248	8435	8494	8632	8635	8640
(U) FORCE USER			1185 #	4138	4146	4159	4179	4209	7121	7129	7733	7747	7780	7789
				7874	7877	7913	7924	7930	8139	8142	8156	8226	8229	8236	8239
				8242	8245	8248	8376	8400	8435	8494	8632	8635	8640
(U) GENL			748 #	2313	2315	2360	2374	2375	2381	2386	2401	2402	2414	2425
				2449	2784	2816	2824	2846	2848	3479	3597	3600	3670	3671	3672
				3681	3684	3698	3710	3740	3765	3779	3932	3993	4005	4009	4159
				4171	4176	4209	4225	4278	4935	4966	5180	5240	5264	5317	5322
				5343	5347	5352	5367	5370	5380	5455	5723	6062	6065	6068	6110
				6137	6140	6156	6163	6191	6199	6205	6213	6217	6229	6241	6245
				6252	6271	6300	6377	6392	6431	6466	6483	6510	6521	6525	6582
				6588	6636	6697	6701	6736	6762	6805	6810	6870	6991	7035	7044
				7200	7226	7240	7327	7329	7432	7479	7482	7554	7559	7584	7620
				7622	7624	7626	7638	7714	7715	7716	7717	7718	7719	7720	7742
				7813	7940	7961	7961	8142	8158	8229	8236	8239	8242	8245	8248
				8445	8468	8482	8502	8512	8515	8563	8565	8573	8577	8579	8581
				8583	8585	8587	8589	8590	8591	8635
(U) GENR			755 #	2507	2509	2522	2544	2545	2782	2818	2822	2839	2841	2866
				3219	3221	3529	3674	3683	3686	3688	3689	3690	3724	3729	3732
				3753	3774	3787	3808	3944	4099	4109	4111	4113	4115	4128	4142
				4152	4206	4222	4289	4290	4291	4314	4337	4549	4589	4652	4707
				4832	5014	5152	5160	5225	5271	5310	5314	5419	5420	5423	5424
				5449	5450	5483	5484	5545	5546	5624	5639	5744	5745	5752	5769
				5893	5926	5956	5957	5972	6055	6077	6297	6302	6371	6387	6388
				6394	6434	6436	6443	6449	6458	6477	6529	6532	6537	6562	6568
				6641	6739	6741	6814	6818	6874	6917	6921	6925	6929	6933	6937
				6953	7054	7066	7140	7150	7151	7152	7156	7157	7158	7159	7167
				7168	7171	7172	7173	7174	7175	7176	7177	7178	7194	7234	7237
				7257	7261	7335	7336	7344	7352	7358	7504	7612	7614	7616	7618
				7766	7970	8018	8093	8095	8097	8099	8101	8103	8105	8107	8332
				8378	8398	8401	8449	8460	8472	8500	8603
(U) HALT			1324 #
	BW14			1334 #	2606
	CSL			1328 #	2332	2350
	HALT			1327 #	3726
	ILLII			1331 #	7762
	ILLINT			1332 #	7794
	IOPF			1330 #	8547
	MULERR			1336 #	2273
	NICOND 5		1335 #
	POWER			1326 #	2302
(U) HARDWARE OPTIONS		18 #
	HWOPT			19 #	7189
(U) HARDWARE SERIAL NUM		21 #
	HWSER			22 #	7190
(U) HOLD USER			1155 #	2300	2668	3546	3562	3630	3645	3704	3708	3744	3767	3861
				3873	3930	3961	3965	3981	3987	4188	4242	4256	4274	4284	4287
				4318	4319	4343	4394	4406	4417	4420	4530	4565	4597	4684	4836
				4838	4905	4922	4946	5203	5481	5493	5560	5852	6520	6521	7138
(D) I				1405 #	2638	2643	2648	2653	2693	2698	2703	2708	2713	2718	2723
				2728	2735	2740	2745	2750	2756	2761	2766	2771	2893	2894	2895
				2896	2904	2914	2924	2929	2939	2946	2957	2967	2977	2986	2987
				2988	2989	2997	3008	3019	3029	3038	3039	3040	3041	3054	3055
				3059	3313	3314	3315	3316	3317	3318	3319	3320	3322	3323	3331
				3332	3333	3334	3335	3336	3337	3338	3350	3351	3352	3353	3354
				3355	3356	3357	3367	3368	3369	3370	3371	3372	3373	3374	3491
				3492	3493	3494	3495	3496	3497	3498	3605	3606	3607	3608	3609
				3610	3611	3612	3619	3620	3621	3622	3623	3624	3625	3626	3634
				3635	3636	3637	3638	3639	3640	3641	3648	3649	3661	3663	3796
				3797	3840	3841	3842	3843	3939	3973	3974	3975	3976	4027	4028
				4029	4030	4031	4032	4033	4034	4038	4039	4040	4041	4042	4043
				4044	4045	4046	4047	4048	4049	4050	4051	4052	4053	4054	4055
				4056	4057	4058	4059	4060	4061	4062	4063	4064	4065	4066	4067
				4068	4069	4073	4074	4083	4084	4085	4086	4087	4088	4089	4090
				4091	4092	4235	4249	4299	4324	4495	4500	5299	5517	5987	5988
				5989	5990	5991	5992	5993	5995	5996	5997	5998	6000	6001	6002
				6003	6005	6006	6007	6008	6009	6010	6011	6012	6045	8036	8037
				8038	8040	8041	8043	8044	8046	8047	8048	8049	8050	8051	8052
				8053	8055	8056	8057	8058	8059	8060	8061	8062	8064	8065	8066
				8067	8068	8069	8070	8071	8073	8074	8075	8076	8077	8078	8079
				8080	8082	8083	8084	8085	8086	8087	8088	8089
(U) I.CO3			1251 #
(U) I.CO4			1252 #
(U) I.CO5			1253 #
(U) I.CO6			1254 #
(U) I.CO7			1255 #
(U) IO BYTE			1236 #	7875	7925	7931	8377
(U) IO CYCLE			1230 #	7733	7780	7874	7877	7913	7924	7930	8156	8377
(U) J				549 #	2406	2440	2444	2453	2458	2466	2487	2493	2518	2523	2544
				2545	3705	3709	4207	4210	4418	4462	4470	4480	4488	4686	4709
				4710	4712	4756	4797	4825	4930	4932	4936	4972	5006	5025	5095
				5660	5662	5663	5753	5949	5956	5957	5972	6073	6076	6355	6365
				6370	6373	6411	6412	6563	6569	6746	6770	6838	6870	6882	6914
				6930	6947	6956	6958	6985	7021	7055	7061	7066	7107	7359	7432
				7530	7564	7641	7701	7810	7813	7886	7893	7899	7956	7964	7968
				7971	7997	8010	8012	8014	8016	8018	8020	8022	8024	8026	8028
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 224
; CROSS REFERENCE LISTING

				8030	8150	8219	8223	8257	8534
	ABORT			4133	8016 #	8374
	AC_ARX			4006	7093	8030 #
	ADD			4234	4235	4236	4237	4241 #
	ADDCRY			6345	6351	6364	6370 #
	ADJBP			4888	5141 #
	ADJBP0			5144 #	5146
	ADJBP1			5164 #	5166
	ADJBP2			5171	5174 #
	ADJBP3			5202	5218 #
	ADJBP4			5230 #	5242
	ADJBP5			5238	5245 #
	ADJBP6			5266 #	5268
	ADJSP			3939	3943 #
	ADJSP1			3952	3960 #
	ADJSP2			3957	3965 #
	AND			2903	2904	2905	2906	2910 #	2935
	ANDCA			2913	2914	2915	2916	2920 #	2973
	ANDCB			2966	2967	2968	2969	2973 #
	ANDCM			2928	2929	2930	2931	2935 #
	AOBJ			3648	3649	3653 #
	AOJ			3619	3620	3621	3622	3623	3624	3625	3626	3630 #
	AOS			3535	3536	3537	3538	3539	3540	3541	3542	3546 #
	APRID			7188 #
	APRSO			7154	7180 #
	APRSZ			7153	7183 #
	ARSIGN			2485	2544 #
	ASH			3051	3083 #
	ASHC			3055	3189 #
	ASHC1			3193	3195 #
	ASHCL			3200	3211 #	3213
	ASHCQ1			3182	3219	3222 #
	ASHCR			3204 #	3206
	ASHCX			3208	3216 #
	ASHL			3093 #	3093
	ASHL0			3083	3090 #
	ASHR			3072	3086 #
	ASHX			3097 #	3111
	ASHXX			3111 #	3116
	BACKBP			7074	7082	7106 #
	BACKD			7081 #	8582	8590	8592
	BACKS			7073 #	8589
	BADDATA			8353	8368 #
	BDABT			6470	6534 #
	BDCFLG			6515	6536 #
	BDEC			6418 #
	BDEC0			6422	6424 #
	BDEC1			6431 #	6440
	BDEC2			6436 #	6444
	BDEC3			6432	6446 #	6454
	BDEC4			6446	6451 #
	BDEC5			6449	6459	6463 #
	BDECLP			6501 #	6520
	BDFILL			6485 #	6494
	BDSET			6509 #	6529	6532
	BDSUB			6452	6502	6548 #
	BDSUB1			6549	6552 #
	BDSUB2			6568 #	6571
	BDTBL			6508	6525 #
	BITCHK			6051	6095	6224	6226	6586	7054 #
	BIXUB			7845	7846	7847	7848	7852 #
	BIXUB1			7857	7859	7861 #
	BLT			5299	5303 #
	BLT-CLEANUP		5377 #	8575
	BLTCLR			5336 #	5351
	BLTGOT			5339	5364 #
	BLTGO			5329	5356	5362 #
	BLTLP			5359 #	5374
	BLTLP1			5326 #	5361
	BOTH			2414 #
	BWRITE			2556 #	2659	2665	2782	2784	2818	2824	2832	2834	2853	2855	2900
				2910	2920	2952	2963	2983	2993	3004	3014	3045	4242	4256	4310
				4316	4339	4341
	BYTEAS			4944 #	4968	6995
	BYTEA			4899	4918	4946 #
	BYTEA0			4945	4949 #
	BYTFET			4952	4956	4970 #	7039	7040
	BYTIND			4960	4964 #
	CAIM			3492	3493	3494	3495	3496	3497	3498	3500	3501	3502	3503	3504
				3505	3506	3507	3511 #
	CHKSN			5930	5949 #
	CIRC			3059	3263 #
	CIRCLA			3274 #	3277
	CIRCL			3270	3277 #
	CIRCRA			3280 #	3283
	CIRCR			3272	3283 #
	CLARXL			5308	7787	8018 #
	CLARX0			4836	4838	4842	4843	6292	6427	6553	6562 #
	CLDISP			7075	7083	7096	7102	8560	8567 #
	CLEANED			5382	8572 #
	CLEANUP			8567	8571 #
	CLRB1			6410	6412 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 225
; CROSS REFERENCE LISTING

	CLRBIN			6295	6391	6410 #
	CLRCSH			7660 #
	CLRFLG			6099	6464	7064 #
	CLRPTL			7670 #	7673
	CLRPT			7654 #
	CLRSN			5734	5826	5957 #
	CLTRP			8388	8548	8556 #
	CLTRP1			8557	8563 #
	CMPDST			6255	6275 #
	CMS			6223 #
	CMS2			6234	6264 #
	CMS3			6240 #	6266	6270
	CMS4			6243 #
	CMS5			6248	6269 #
	CMS6			6255 #	6272
	CMS7			6257	6260 #
	CMS8			6269	6271 #
	CMSDST			7077 #	8588
	COM0			4820	4821	4825 #
	COM0A			4820 #	4824
	COM1			4815	4824 #
	COM1A			4815 #	4823
	COM2			4810	4823 #
	COM2A			4810 #
	CONSO			7161	7181 #
	CONSZ			7160	7184 #
	CONT			8148	8153 #
	CONT1			4228	8160 #
	CPYSGN			4275	4285	4289 #
	DAC			2577 #	2584	2861	6534
	DADD			4264	4269 #
	DADD1			4272 #	4278
	DBABT			6312	6316	6376 #
	DBDN1			6387	6389 #
	DBDONE			6378	6384 #	6403
	DBFAST			6325	6329 #
	DBIN			6285 #
	DBIN1			6300 #	6303
	DBIN2			6300	6304 #
	DBINLP			6308 #	6326	6336
	DBLDBL			6348	6359	6360 #
	DBLDIV			4627	4637	4775 #	5854	5858
	DBLMUL			4382	4412 #
	DBLNEG			2876	4832 #
	DBLNGA			2866	4833 #
	DBLNG1			4550	4841 #	6436
	DBNEG			6383	6394 #
	DBSLOW			2264	6323	6341 #
	DBSLO			6322 #	6330
	DBXIT			6310	6382 #
	DDIV			4573	4578 #
	DDIV1			4582	4586	4595 #
	DDIV2			4596	4598 #
	DDIV3A			4603 #	4608
	DDIV3			4593	4599 #
	DDIV4			4604	4611 #
	DDIV5A			4616	4626 #
	DDIV5B			4641	4650 #
	DDIV5C			4647	4652 #
	DDIV5			4615	4619 #
	DDIV6			4648	4650	4655 #
	DDIV7			4657 #
	DDIV8A			4666 #
	DDIV8			4657	4664 #
	DDIV9			4667	4672 #
	DDIVS			4612	4631	4686 #	5850
	DFAD			5669	5682 #
	DFADJ			5698	5706	5733 #
	DFADJ1			5740 #	5741
	DFADJ2			5742 #
	DFADJ3			5744	5748 #	5748
	DFADJ4			5745	5749 #
	DFADJ5			5743	5751 #	5752
	DFADJ6			5751	5753 #
	DFAS1			5687	5689	5691 #
	DFAS2			5692	5698 #
	DFAS3			5694	5703 #
	DFAS5			5700	5708	5712 #
	DFAS6			5717 #	5718
	DFAS7			5717	5719 #
	DFDV			5821	5824 #
	DFDV1			5830 #	5837
	DFDV2			5831	5838 #
	DFDV3			5841	5849 #
	DFDV4A			5864 #	5867
	DFDV4B			5866	5869 #
	DFDV4			5847	5851 #
	DFMP			5759	5764 #
	DFMP1			5766 #	5767
	DFMP2			5789	5792 #
	DFPR1			2503	2509 #
	DFPR2			2508	2510 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 226
; CROSS REFERENCE LISTING

	DFSB			5670	5679 #
	DIV			4499	4500	4501	4502	4516 #
	DIV1			4511	4513	4525 #	4567
	DIV2			4528 #	4541
	DIVA			4523	4537 #
	DIVB			4538	4543 #
	DIVC			4548	4553	4556 #
	DIVHI			4776	4779	4782 #	4793
	DIVIDE			4746 #	4746
	DIVSET			4736	4740 #
	DIVSGN			4708	4726 #	5499
	DIVSUB			4529	4705 #	5176	5186	5221
	DMLINT			4384	4420 #
	DMOVNM			2871	2876 #
	DMOVN			2862	2866 #
	DMOVN1			2870	2878 #
	DMTRAP			4397	4403 #
	DMUL			4350	4355 #
	DMUL1			4365	4376 #
	DMUL2			4375	4381 #
	DMULGO			4363	4411 #
	DNEG			5882	5885	5888	5891	5906 #
	DNEG1			5906	5908 #
	DNEG2			5907	5910 #
	DNN1			5932	5936 #
	DNN2			5934	5938 #
	DNNORM			5870	5911	5913	5916 #	5918	5946
	DNNRM1			5926	5943 #
	DNORM			5815	5869	5879 #	5881	5901
	DNORM0			5723	5814 #
	DNORM1			5893	5898 #
	DNORM2			5938	5940 #
	DOCVT			6423 #	6473	6489
	DOCVT1			6423	6498 #
	DOCVT2			6499	6519 #
	DOCVT3			6516 #	6538
	DONE			2312 #	2617	2631	2938	2939	3125	3313	3314	3322	3323	3425	3470
				3473	3476	3491	3605	3884	4406	4922	5273	5344	5368	7184	7221
				7421	7470	7561	7585	7596	7649	7677	7693	7839
	DPB			4883	4911 #
	DPB1			4921	5087 #	7020
	DPB7			5088	5089	5090	5091	5092	5094 #	5116
	DPBSLO			5087	5098 #
	DRND1			5968	5972 #	5976	5979
	DROUND			5884	5887	5890	5920	5922	5924	5966 #	5970
	DSMS1			7809	7812 #	7814
	DSTEA			7039 #	7045
	DSTIND			7041	7042	7044 #
	DSUB			4265	4281 #
	DUMP			8210	8217	8226 #
	DVSUB1			4729	4732 #
	DVSUB2			4727	4733 #
	DVSUB3			4735 #	4739
	EACALC			2368 #	2431
	EDBYTE			6730	6759	6768 #
	EDEXMD			6645	6677 #
	EDFILL			6694 #
	EDFIL1			6696	6709 #
	EDFLT			6669	6715	6725 #
	EDFLT1			6739	6741	6743 #
	EDISP			6597	6603 #
	EDISP1			6605 #	6605
	EDIT			6582 #
	EDITLP			6587 #	6819
	EDMSG			6612	6753 #
	EDMSG1			6755	6762 #
	EDN1A			6801 #	6806
	EDNOP			6614	6616	6618	6633	6642	6670	6682	6704	6710	6764	6765	6780
				6790 #
	EDNOP1			6784	6791 #
	EDNOP2			6802	6808 #	6808
	EDOPR			6609	6633 #
	EDSEL			6637	6688 #
	EDSFLT			6698	6714 #
	EDSKP			6621	6624	6626	6777 #
	EDSKP1			6778	6781 #
	EDSPUT			6701 #	6709	6719
	EDSSIG			6639	6669 #
	EDSTOP			6635	6653 #	6699
	EDSTP1			6659 #	6662
	ENDSKP			6214	6392 #
	EQV			2976	2977	2978	2979	2983 #
	EXCH			2675	2679 #
	EXEC-DBR		8411	8425 #
	EXTDSP			6063 #
	EXTEA			6062 #
	EXTEA0			6057	6059 #
	EXTEA1			6060 #	6068
	EXTEND			6045	6049 #
	EXTEXT			6064	6072 #	6078
	EXTIND			6065	6068 #
	FAD			5389	5390	5391	5392	5393	5394	5395	5412 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 227
; CROSS REFERENCE LISTING

	FAS1			5414 #
	FAS2			5414	5423 #
	FAS3			5419	5420	5423	5424	5426 #
	FAS4			5428 #	5428
	FDV			5465	5466	5467	5469	5470	5471	5472	5477 #
	FDV0			5480	5483 #
	FDV1			5483	5485 #
	FDV2			5484	5486 #
	FDV3			5485	5486	5487 #
	FDV4			5489 #	5490
	FDV5			5489	5492 #
	FDV6			5492	5495 #
	FDV7			5499 #	5500
	FDV8			5502 #
	FDV9			5502	5507	5508	5510 #
	FETIND			2389	2394	2416	2424 #
	FIX			5552	5553	5557 #
	FIX++			4750 #	4751
	FIX1++			4750	4752 #
	FIXL			5562	5572 #	5572
	FIXPC			4420	6550	8565 #
	FIXR			5567 #	5568
	FIXT			5576	5579 #
	FIXX			5569	5576 #
	FIXX1			5577 #	5583
	FL-BWRITE		2604 #	5577	5581	5628	5649
	FLEX			5624	5628 #
	FLTR			5516	5521 #
	FLTR1A			5526	5529 #
	FLTR1			5522	5525 #
	FLTR2			5527	5529	5534 #
	FLTR3			5536 #	5537
	FMP			5435	5436	5437	5439	5440	5441	5442	5446 #
	FMP1			5449	5450	5451 #
	FP-LONG			4087	4088	4089	4090	4091	4092	4115 #
	FPR0			2476	2482 #
	FPR1			2486 #
	FSB			5397	5398	5399	5400	5401	5402	5403	5409 #
	FSC			5517	5542 #
	GETPCW			4157	7355 #
	GETSRC			6246	6689	6986 #
	GOEXEC			4184 #	8641
	GOTDBR			8419	8421	8427	8429	8435 #
	GRP700			7146	7187 #
	GRP701			7147	7659 #
	GRP702			7382	7387 #
	GSRC			6202	6869	6984 #
	GSRC1			6989	6993 #
	GTFILL			6092	6583	7058 #
	H1			8144 #	8211
	HALT			3675	3724 #
	HALTED			2273	2332	2350	2606	3726	7762	7794	8134 #	8547
	HALTLP			8144	8150 #
	HARD			8003	8355	8357	8372 #
	HLL			2692	2693	2736	2784 #	2810
	HLLE			2722	2723	2724	2725	2851 #
	HLLO			2712	2713	2714	2715	2855 #
	HLLZ			2702	2703	2704	2705	2853 #
	HLR			2739	2740	2812 #
	HLRE			2770	2771	2772	2773	2844 #
	HLRM			2741	2821 #
	HLRO			2760	2761	2762	2763	2848 #
	HLRS			2742	2824 #
	HLRZ			2749	2750	2751	2752	2846 #
	HRL			2697	2698	2810 #
	HRLE			2727	2728	2729	2730	2837 #
	HRLM			2699	2815 #
	HRLO			2717	2718	2719	2720	2841 #
	HRLS			2700	2818 #
	HRLZ			2707	2708	2709	2710	2839 #
	HRR			2694	2734	2735	2782 #	2812
	HRRE			2765	2766	2767	2768	2830 #
	HRRO			2755	2756	2757	2758	2834 #
	HRRZ			2744	2745	2746	2747	2832 #
	HSBDON			8253 #
	IBP			4879	4886 #
	IBPS			4889	4895	4909	4929 #
	IBPX			4003	4929	4936 #
	IDIV			4494	4495	4496	4497	4507 #
	IDPB			4882	4909 #
	IDST			6276	7015	7032 #
	IDSTX			7033	7036 #
	ILDB			4880	4895 #
	IMUL			4298	4299	4300	4301	4304 #
	IMUL1			4310 #	4532
	IMUL2			4309	4312 #
	IMUL3			4315	4318 #
	INCAR			6187	7767	8020 #
	INCPC			2355	2360 #
	INDEX			2401 #
	INDRCT			2419 #
	IOEA			7872	7910	7940 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 228
; CROSS REFERENCE LISTING

	IOEA1			7946 #	7948
	IOEA2			7946	7950 #
	IOEAI			7951	7958 #
	IOEAX			7954	7967 #
	IOR			2956	2957	2958	2959	2963 #	3025
	IORD			7827	7838	7853	7871 #
	IORD1			7876	7880 #
	IORD2			7885	7890 #
	IORD3			7891	7896 #	7897
	IOT700			8036	8037	8038	8093 #
	IOT710			8040	8041	8095 #
	IOT720			8043	8044	8097 #
	IOT730			8046	8047	8048	8049	8050	8051	8052	8053	8099 #
	IOT740			8055	8056	8057	8058	8059	8060	8061	8062	8101 #
	IOT750			8064	8065	8066	8067	8068	8069	8070	8071	8103 #
	IOT760			8073	8074	8075	8076	8077	8078	8079	8080	8105 #
	IOT770			8082	8083	8084	8085	8086	8087	8088	8089	8107 #
	IOW1			7980 #	7985
	IOW2			7982	7988	7992 #
	IOW3			7995 #	8002
	IOW4			7996	8000 #
	IOW5			7990	8003 #
	IOWAIT			7881	7917	7976 #
	IOWR			7842	7862	7909 #
	IOWR1			7915 #	7925	7931
	IOWR2			7912	7922 #
	IOWR3			7923	7928 #	7929
	ITRAP			6189	8340 #
	JEN			3685	3732 #
	JEN1			3738	3754	7809 #
	JEN2			3730	3738 #
	JFCL			3663	3744 #
	JFFO			3054	3119 #
	JFFO1			3124	3127 #
	JFFOL			3141 #	3143
	JMPA			3584 #	4020
	JRA			3976	4014 #
	JRST			3609	3661	3670 #
	JRST0			3697	3700 #	3721	3736
	JRST1			3713	3717	3718 #
	JRST10			3682	3729 #
	JRSTF			3673	3694 #
	JSA			3975	3999 #
	JSP			3974	3980 #
	JSR			3973	3986 #
	JSTAC			3868	3875	3878 #	3914
	JSTAC1			3881 #	3933
	JSYS			4084	4109 #
	JUMP			3606	3607	3608	3610	3611	3612	3616 #
	JUMP-TABLE		3569 #	3616	3630	3645	3655
	JUMP-			3575	3578	3581	3596 #	3747
	JUMPA			3584	3587	3590	3593	3600 #	3983	4190
	KIMUUO			4139	4197 #
	L-BDEC			5997	5998	6022 #
	L-CMS			5987	5988	5989	5991	5992	5993	6016 #
	L-DBIN			5995	5996	6020 #
	L-EDIT			5990	6018 #
	L-MVS			6000	6001	6002	6003	6024 #
	L-SPARE-A		6006	6028 #
	L-SPARE-B		6007	6030 #
	L-SPARE-C		6008	6009	6010	6011	6012	6032 #
	L-XBLT			6005	6026 #
	LDB			4881	4897 #
	LDB1			4904	4987 #	6279	6999
	LDB7			4992	4993	4994	4995	4996	5001 #
	LDBR1			7441 #
	LDBR2			7443 #
	LDBR3			7445 #
	LDBR4			7447 #
	LDBSH			5011	5016 #
	LDBSWP			4989	5010 #
	LDPI2			3739	7627	7638 #
	LOADAR			6527	6591	6678	7942	8009 #
	LOADARX			6894	7480	7483	7556	8012 #
	LOADPI			2277	7637 #
	LOADQ			5319	6232	8014 #
	LPMR			7476 #
	LSH			3053	3067 #
	LSHC			3057	3171 #
	LSHCL			3171	3179 #	3179
	LSHCR			3175 #	3175
	LSHCX			3176	3181 #	3250	3255	3278	3284
	LSHL			3069	3074 #
	LUUO			4027	4028	4029	4030	4031	4032	4033	4034	4214 #
	LUUO1			4217 #	6016	6018	6020	6022	6024	6026	6028	6030	6032
	MOVE			2639	2662	2665 #	2669	2695	2737	2923	2924	2925	2926	2940	2941
				4290	4291	4318	4319	4343	5172
	MOVELP			6110	6131 #	6140
	MOVF1			6833 #	6839
	MOVFIL			6164	6213	6839 #
	MOVLP0			6124	6140 #
	MOVM			2652	2654	2655	2662 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 229
; CROSS REFERENCE LISTING

	MOVN			2647	2648	2649	2650	2667 #
	MOVPAT			6594	6596	6599 #	6599
	MOVRJ			6116	6162 #
	MOVS			2642	2643	2644	2645	2659 #	2816	2822	2839	2841	2846	2848
	MOVSTX			6203 #
	MOVST0			6113	6198 #
	MOVST1			6166	6199 #	6209
	MOVST2			6134	6204	6212 #
	MOVST3			6212	6216 #
	MOVST4			6176	6208 #
	MSKPAT			6595	6600 #
	MUL			4323	4324	4325	4326	4331 #
	MUL+			4439	4452	4456 #	4458	4476
	MUL-			4466	4474 #	4484
	MULBY4			6342	6359 #
	MULSB1			4437 #	5775
	MULSUB			4307	4335	4436 #	5249	5453
	MULTIPLY		4416	4449 #	5780	5792	5799
	MUUO			4038	4039	4040	4041	4042	4043	4044	4045	4046	4047	4048	4049
				4050	4051	4052	4053	4054	4055	4056	4057	4058	4059	4060	4061
				4062	4063	4064	4065	4066	4067	4068	4069	4125 #
	MVABT			6136	6145 #
	MVABT1			6148 #	6150
	MVABT2			6148	6152 #
	MVEND			6155 #
	MVS			6089 #
	MVS1			6104	6106 #
	MVSK3			6181	6185 #
	MVSKP			6162	6169 #	6179	6192
	MVSKP1			6174	6179 #
	MVSKP2			6183	6191 #
	MVSO			6111	6118 #
	MVSO1			6121 #	6121
	NEXT			4148	4152	4198	4209 #	8227	8230	8232	8234	8237	8240	8243	8246
				8249	8251
	NICOND			2321 #	2611	3146	3194	3222	3572	3882	3960	3967	4675	4678	5573
				5579	5941
	NICOND-FETCH		2312	2313	2315	2316	2340 #	2377	2383	3467	3479	3596	3597	3600
				3601	3670	3671	3698	3740	4405	4890	7629	7918
	NIDISP			3194 #	3962	3966	4530	4565	4597	4684	4906	5203	5481	5493	5560
				5852
	NODDIV			4619	4621	4683 #
	NODIV			4559	4563	4565 #
	NOMOD			2405 #
	NXTWRD			4931	4935 #
	ORCA			2996	2997	2998	2999	3003 #
	ORCB			3028	3029	3030	3031	3035 #
	ORCM			3018	3019	3020	3021	3025 #
	PAGE-CONTINUE		8391	8518	8524 #
	PAGE-FAIL		8336 #
	PAGE-REFILL		8469	8483	8491 #
	PF-INT			8350	8384 #
	PFD			8346 #	8348
	PFDBIN			7100 #	8586
	PFGAC0			7102 #
	PFMAP			8359	8361	8363	8395 #
	PFMAP1			8405 #	8406
	PFT			8380	8462	8479	8547 #
	PFTD00			8615	8626 #
	PFTD01			8614	8623 #
	PFTD10			8612	8620 #
	PFTD11			8611	8617 #
	PFTDSP			8602	8608 #
	PFTDS0			8609	8614 #
	PFTDS1			8608	8611 #
	PFTRAP			8563	8573	8599 #
	PFTRAP1			8617	8618	8620	8621	8623	8624	8626	8627	8630 #
	PI			7711 #	7713	8603
	PI10			7721	7722	7723	7724	7725	7726	7727	7729 #
	PI40			7744	7747 #
	PI50			7748 #	7798
	PIEXIT			3769	7627 #
	PIJSR			7751	7762 #
	PIP1			7714	7721 #
	PIP2			7715	7722 #
	PIP3			7716	7723 #
	PIP4			7717	7724 #
	PIP5			7718	7725 #
	PIP6			7719	7726 #
	PIP7			7720	7727 #
	PISET			3768 #	7769
	PIXPCW			3777 #	7754
	POP			3842	3889 #
	POPJ			3843	3922 #
	POPX1			3905	3917 #
	PTWLH			8441	8448 #
	PTWRH			8439	8444 #
	PTWTST			8446	8450	8453 #
	PTWTS0			8453	8458 #
	PTWTS1			8454	8466 #
	PUSH			3841	3848 #
	PUSH1			3850 #	3862
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 230
; CROSS REFERENCE LISTING

	PUSHJ			3840	3860 #
	PUTDST			6138	6206	6491	6510	6702	6737	6763	6834	7013 #
	PWRON			2303	8139 #
	QDNEG			4606	4683	4806 #
	QMULT			4372	4392	4415 #
	RDAPR			7232 #
	RDEBR			7339 #
	RDEBR1			7341 #	7341
	RDERA			7156 #
	RDHSB			7408 #
	RDINT			7599 #
	RDIO			7831	7833	7838 #
	RDPI			7606 #
	RDTIME			7567 #	7581
	RDTIM1			7580	7583 #
	RDUBR			7349 #
	READ-ONLY		8461	8473	8476 #
	ROT			3052	3103 #
	ROTC			3056	3245 #
	ROTCL			3245	3253 #	3253
	ROTCR			3249 #	3249
	ROTL			3105	3113 #
	RTNREG			7195	7245	7345	7353	7388	7390	7392	7394	7408	7600	7606	7648 #
	SAVVMA			8135	8208	8221 #
	SBRL			5496	6334	8022 #
	SDBR1			7388 #
	SDBR2			7390 #
	SDBR3			7392 #
	SDBR4			7394 #
	SETCA			2986	2987	2988	2989	2993 #
	SETCM			3007	3008	3009	3010	3014 #	3035
	SETO			3038	3039	3040	3041	3045 #
	SETPDL			3873 #	3919
	SETSN			5504	5506	5806	5956 #
	SETZ			2893	2894	2895	2896	2900 #
	SFM			3687	3787 #
	SHIFT			2462 #	2472
	SKIP			2315 #	3482	3485	3488	6392	6521	7181
	SKIP-COMP-TABLE		3464 #	3511	3531	3532	6242
	SKIPE			3473 #	6217
	SKIPS			3518	3519	3520	3521	3522	3523	3524	3525	3529 #	3548
	SNNEG			5616	5618	5620	5622	5631 #
	SNNORM			5631	5633	5635 #	5635
	SNNOT			5641	5645 #
	SNNOT1			5643	5648 #
	SNNOT2			5645	5647	5648	5649 #
	SNORM			5429	5459	5538	5615 #	5615	5627
	SNORM0			5510	5523	5530	5538 #	5545	5546
	SNORM1			5623	5627 #
	SOJ			3634	3635	3636	3637	3638	3639	3640	3641	3645 #
	SOS			3551	3552	3553	3554	3555	3556	3557	3558	3562 #
	SPM			7414 #
	SPM-NEXT		7417	7419	7431 #
	SRCMOD			6132	6308	6867 #	6963	6967	6969
	SRND1			5657	5660 #
	SROUND			5617	5619	5621	5636	5637	5638	5657 #	5658
	SSWEEP			7682	7700 #
	STAC			2578	2610 #	2623	2628	2637	2638	2653	2683	2867	3075	3088	3097
				5895	5902	5947	6156	6659	8123
	STAC34			6397	6402 #
	START			2334 #	3995	4010
	STBOTH			2621 #
	STBTH1			2573	2626 #
	STDBTH			2582 #
	STMAC			3857	3865 #
	STMEM			2615 #	8130
	STOBR			3778	4160	7765	8026 #
	STOPC			3781	8028 #	8143
	STORE			2629 #	2887	3789
	STPF1A			7090	7098 #
	STRPF			7086 #	8578	8580
	STRPF0			7087 #	7104
	STRPF1			7090 #
	STRPF2			7098	7101 #
	STRPF3			7095 #
	STRPF4			7104 #	8584
	STRTIO			7735	7783	8024 #	8159
	STSELF			2572 #	2640
	SUB			4248	4249	4250	4251	4255 #
	SWEEPL			7687 #	7690
	SWEEP			7270	7335	7336	7441	7443	7445	7447	7485	7681 #
	TDONE			3431	3434	3440 #
	TDX			3317	3326	3331	3335	3340	3344	3350	3354	3359	3363	3367	3371
				3376	3380	3411 #
	TDXX			3315	3319	3324	3328	3333	3337	3342	3346	3352	3356	3361	3365
				3369	3373	3378	3382	3416 #
	TENLP			2262 #	2269
	TEST-TABLE		3411	3417	3422 #	7828
	TIOX			7820	7821	7822	7823	7827 #
	TOCK			7502 #	7578	8387
	TOCK1			7506 #	7512
	TOCK2			7507	7515 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 231
; CROSS REFERENCE LISTING

	TOCK3			7520 #	7524
	TOCK4			7521	7526 #
	TOCK5			7529 #	7545
	TRAP			2325	2328	2331	2343	2346	2349	7113 #
	TRNAR			6692	6889 #
	TRNFNC			6899	6911 #	6918	6922	6926	6938
	TRNNS1			6951	6961 #
	TRNNS2			6961	6964 #
	TRNRET			6912	6943 #
	TRNSIG			6924 #	6934
	TRNSS			6945	6950 #
	TRNSS1			6946 #	6954
	TRP1			7122	7130	7132 #
	TSX			3318	3327	3332	3336	3341	3345	3351	3355	3360	3364	3368	3372
				3377	3381	3409 #
	TSXX			3316	3320	3325	3329	3334	3338	3343	3347	3353	3357	3362	3366
				3370	3374	3379	3383	3414 #
	TXXX			3425 #	3440
	TXZX			3428	3439 #
	UMOVEM			8114	8126 #
	UMOVE			8113	8118 #
	USER-DBR		8413	8417 #
	UUO			4073	4083	4124 #
	UUO101			4074	4099 #
	UUO106			4085	4111 #
	UUO107			4086	4113 #
	UUO257			8328	8332 #
	UUOFLG			4143	4200	4205 #
	UUOGO			2522	3674	3683	3686	3688	3689	3690	3724	3729	3732	3753	3774
				3787	3808	4099	4109	4111	4113	4115	4130 #	7054	7140	7150	7151
				7152	7156	7157	7158	7159	7167	7168	7171	7172	7173	7174	7175
				7176	7177	7178	7612	8093	8095	8097	8099	8101	8103	8105	8107
				8332
	UUOPCW			4154 #	4203
	VECINT			7739	7776 #	7779
	VECIN1			7793	7795 #
	WRAPR			7198 #
	WRAPR1			7217 #	7229
	WRAPR2			7216	7223 #
	WREBR			7321 #
	WREBR1			7323 #	7323
	WRHSB			7468 #
	WRINT			7592 #
	WRIO			7832	7834	7842 #
	WRPI			7609 #
	WRTHSB			8137	8214 #
	WRTIME			7551 #
	WRTIM1			7510	7559	7563 #
	WRUBR			7252 #
	WRUBR1			7258	7262 #
	WRUBR2			7265	7268 #
	XCT			3799	3810	3813 #
	XCT1			3817 #	7139	8163
	XCT2			2428 #	3818
	XCTGO			2336	2352 #	8155
	XCTR			3797	3806 #
	XCTR1			3804	3806	3808 #
	XCTRI			3796	3804 #
	XJEN			3679	3753 #
	XJRSTF			3678	3760 #	3783
	XJRSTF0			3677 #	3757
	XLATE			6873	6888 #
	XLATE1			6897 #	6901
	XOR			2945	2946	2947	2948	2952 #
	XOS			3547 #	3562
	XPCW			3680	3774 #
(D) J				1402 #
(U) JFCLFLG			1175 #	3744
(U) LD FLAGS			1179 #	2301	3703	3707	3766	4187	7753	7768	8559
(U) LD PCU			1167 #	4189
(U) LDVMA			1219 #	2243	2262	2266	2312	2312	2313	2315	2316	2316	2334	2360
				2376	2382	2388	2392	2415	2419	2428	2449	2491	2502	2505	2517
				2879	2883	2884	3123	3467	3467	3479	3596	3596	3597	3600	3601
				3601	3670	3671	3672	3677	3681	3684	3698	3711	3714	3740	3756
				3762	3777	3779	3779	3788	3852	3879	3890	3902	3907	3923	3988
				4016	4137	4138	4138	4145	4146	4146	4159	4159	4178	4179	4209
				4209	4218	4225	4226	4405	4405	4890	4890	4900	4949	4953	4957
				4961	5305	5326	5333	5347	5348	5352	5353	5370	5371	6063	6065
				6066	6090	6229	6480	6507	6552	6558	6565	6582	6587	6644	6726
				6769	6889	7039	7040	7041	7042	7121	7129	7252	7415	7432	7479
				7482	7554	7579	7584	7584	7629	7629	7648	7654	7732	7747	7747
				7747	7748	7789	7789	7797	7880	7915	7918	7918	7940	7962	8016
				8024	8118	8126	8136	8139	8139	8142	8142	8153	8210	8226	8226
				8229	8229	8236	8236	8239	8239	8242	8242	8245	8245	8248	8248
				8255	8389	8395	8435	8435	8492	8494	8503	8513	8528	8632	8632
				8635	8635	8640	8640
(U) LOADFE			990 #	2465	2483	2499	3068	3071	3075	3085	3087	3104	3107	3110
				3115	3127	3142	3190	4898	4902	4914	5010	5015	5017	5019	5022
				5087	5100	5103	5104	5106	5108	5418	5447	5456	5458	5479	5485
				5486	5500	5523	5527	5529	5530	5544	5615	5619	5621	5627	5635
				5637	5638	5658	5663	5705	5720	5722	5787	5804	5815	5839	5865
				5880	5887	5890	5900	5917	5922	5924	5945	5970	5978	6118	6119
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 232
; CROSS REFERENCE LISTING

				6121	6278	6654	6655	6661	6791	6792	6793	6794	6995	6998	7018
				7037
(U) LOADSC			988 #	2257	2267	2464	2483	2499	2515	3091	3093	3171	3172	3173
				3175	3179	3190	3199	3202	3206	3213	3245	3246	3247	3249	3253
				3268	3270	3271	3272	3275	3281	4305	4333	4371	4391	4412	4438
				4451	4457	4465	4475	4483	4528	4627	4635	4743	4746	4787	5142
				5145	5158	5165	5170	5183	5199	5246	5261	5267	5412	5416	5417
				5426	5428	5451	5499	5534	5537	5542	5561	5562	5563	5565	5568
				5572	5684	5694	5704	5738	5741	5748	5764	5767	5775	5779	5782
				5792	5798	5854	5855	6425	6454	6594	6596	6599	6603	6605	6783
				6790	6796	6801	6808	7321	7323	7339	7341	7661	7672	7689	7700
				7890	7897	7922	7928	7976	7983	7992	7996	8403	8406
(U) LSRC			631 #
(U) MACRO%
	ABORT MEM CYCLE		2075 #	2243	3756	7732	8016	8136	8210	8389	8395
	AC			1920 #	4304	4331	4507	4599	5477	5543	5687	5689
	AC[]			1921 #	4676	5828	5836	6332	6396
	AC[]_Q			1818 #	3222	4366	4374	4385	4397
	AC[]_Q.AND.[]		1807 #	4630	4674	4807	4812	4817	4823	4824
	AC[]_[]			1794 #	2577	2867	3146	4647	4653	5902	5947	6148	6169	6185	6258
				6293	6352	6354	6389	6402	6403	6440	6472	6478	6489	6494	6517
				6518	6682	6993	7036	7075	7083	7090	7095
	AC[]_[] TEST		1795 #	6964
	AC[]_[] VIA AD		1792 #
	AC[]_[]*2		1797 #	4383
	AC[]_[]+1		1796 #	6836
	AC[]_[]+Q		1802 #
	AC[]_[]+[]		1804 #	4672	6335
	AC[]_[]-[]		1803 #	6101
	AC[]_[].AND.[]		1806 #	4650	5894	5940
	AC[]_[].EQV.Q		1808 #	4398	4400	4402	4677
	AC[]_-Q			1814 #
	AC[]_-[]		1809 #
	AC[]_.NOT.[]		1812 #
	AC[]_0			1816 #	2255	3125	4648	6175	6212	6410	6412
	AC[]_1			1817 #	2256
	AC_-[]			1810 #	5939
	AC_.NOT.[]		1813 #	5938
	AC_Q			1815 #	4646
	AC_[]			1798 #	2610	3182	3440	3531	3572	3584	3881	3883	3982	4825	4905
				5318	5381	5573	5579	6214	6251	6516	6743	6819	7102	7839	8030
	AC_[] TEST		1799 #	3575	3578	3581	3587	3590	3593	4396	6390	6437
	AC_[] VIA AD		1793 #
	AC_[]+1			1800 #	7078
	AC_[]+Q			1801 #
	AC_[]+[]		1805 #	3216	3948	3953
	AC_[].OR.[]		1811 #	5272	6188	6216
	AD FLAGS		2104 #	2668	3546	3562	3630	3645	4242	4256	4274	4284	4287	4417
				4836	4838
	AD FLAGS EXIT		2154 #	4242	4256
	AD PARITY		2027 #	2263	2443	2456	2457	2679	2782	2784	2816	2822	2876	3067
				3070	3084	3119	3616	3889	3922	3945	4002	4014	4333	4376	4517
				4915	5303	5412	5446	5479	5544	5693	6093	6096	6111	6114	6145
				6162	6223	6225	6243	6275	6288	6291	6319	6322	6324	6331	6341
				6382	6384	6385	6418	6423	6424	6425	6446	6451	6463	6498	6584
				6643	6688	6725	6727	6835	6950	6957	6984	6986	7014	7073	7081
				7087	7842	8129
	ADD .25			2060 #	2667	3045	3511	3562	3645	3672	3681	3684	4255	4273	4281
				4286	4464	4468	4512	4556	4590	4613	4614	4620	4642	4668	4710
				4711	4712	4728	4730	4737	4743	4775	4806	4811	4816	4821	4833
				4837	4841	4843	5181	5239	5257	5311	5323	5340	5364	5409	5486
				5489	5490	5497	5508	5522	5616	5618	5620	5622	5633	5648	5679
				5718	5833	5844	5851	5867	5907	5912	5933	5939	5973	6101	6135
				6149	6170	6227	6263	6264	6265	6313	6377	6395	6398	6467	6484
				6492	6511	6519	6520	6554	6556	6559	6608	6961	7086	7094	7100
				7526	7638	7670	7687	7940	8565
	ADL PARITY		2020 #
	ADR PARITY		2024 #
	AREAD			2149 #	2406
	ASH			2036 #	2512	3087
	ASH AROV		2089 #	3093	3212	3215
	ASH36 LEFT		3080 #	3093
	ASHC			2041 #	3093	3205	3208	3212	3215	4457	4465	4475	4483	4592	4596
				4666	4670	4686	5428	5534	5536	5567	5713	5715	5719	5721	5737
				5741	5748	5751	5753	5766	5807	5811	5847	5861	5880	5886	5889
				5900	5917	5921	5923	5945	5970
	B DISP			2150 #	2659	2665	2782	2784	2818	2824	2832	2834	2853	2855	2900
				2910	2920	2952	2963	2983	2993	3004	3014	3045	3411	3417	3511
				3531	3532	3616	3630	3645	3655	3867	3874	3913	4242	4256	4310
				4316	4339	4341	5569	5577	5581	5628	5639	5649	5657	6064	6107
				6242	6298	6506	6871	6944	6951	7828	7855	7873	7884	7911
	BAD PARITY		2029 #
	BASIC DIV STEP		4722 #	4743	4746
	BWRITE DISP		2151 #	2659	2665	2782	2784	2818	2824	2832	2834	2853	2855	2900
				2910	2920	2952	2963	2983	2993	3004	3014	3045	4242	4256	4310
				4316	4339	4341
	BYTE DISP		2168 #	4903	4920	6279	6997	7019
	BYTE STEP		4874 #	6119	6121
	CALL IBP		4868 #	4889	4895	4909
	CALL LOAD PI		2174 #	3739	7627
	CALL []			2061 #	2264	2277	2485	2866	2876	3697	3736	3738	3739	3754	3778
				3781	4003	4006	4133	4143	4148	4152	4157	4160	4198	4200	4307
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 233
; CROSS REFERENCE LISTING

				4335	4363	4372	4382	4392	4416	4529	4550	4606	4612	4627	4631
				4637	4683	4708	4889	4895	4899	4904	4909	4918	4921	5176	5186
				5221	5249	5308	5319	5453	5496	5499	5504	5506	5617	5619	5621
				5636	5637	5638	5698	5706	5734	5775	5780	5792	5799	5806	5826
				5850	5854	5858	5884	5887	5890	5920	5922	5924	5930	6051	6092
				6095	6099	6132	6138	6164	6187	6202	6206	6213	6224	6226	6232
				6246	6255	6276	6292	6295	6308	6323	6334	6342	6345	6348	6351
				6359	6364	6391	6427	6436	6452	6464	6491	6502	6510	6527	6553
				6583	6586	6591	6669	6678	6689	6692	6702	6715	6730	6737	6759
				6763	6834	6869	6894	6995	7015	7020	7074	7082	7093	7417	7419
				7480	7483	7510	7556	7559	7578	7627	7682	7735	7765	7767	7783
				7787	7827	7838	7853	7872	7881	7910	7917	7942	8135	8137	8143
				8159	8208	8210	8227	8230	8232	8234	8237	8240	8243	8246	8249
				8251	8374	8387
	CHANGE FLAGS		2082 #	2300	2301	2668	3546	3562	3630	3645	3703	3704	3707	3708
				3744	3766	3767	3861	3873	3930	3961	3965	3981	3987	4187	4188
				4189	4242	4256	4274	4284	4287	4318	4319	4343	4394	4406	4417
				4420	4530	4565	4597	4684	4836	4838	4905	4922	4946	5203	5481
				5493	5560	5852	6520	6521	7137	7753	7768	8559
	CHK PARITY		2028 #	2353	2424	2439	2448	2452	2469	2480	2491	2498	2511	2583
				2616	2622	2627	2630	2682	2882	3192	3263	3548	3695	3719	3734
				3760	3764	3810	3849	3866	3872	3895	3912	3918	3931	3991	4019
				4148	4150	4155	4185	4198	4202	4224	4305	4399	4401	4508	4518
				4603	4626	4633	4936	4965	4971	5095	5360	6049	6068	6482	6677
				6728	6731	6760	7044	7059	7132	7253	7416	7418	7421	7469	7477
				7553	7583	7585	7593	7649	7748	7790	7916	7963	8009	8012	8014
				8026	8028	8122	8141	8161	8227	8228	8230	8231	8234	8235	8237
				8238	8240	8241	8243	8244	8246	8247	8249	8250	8252	8436	8496
				8634	8638
	CHK PARITY L		2021 #
	CHK PARITY R		2025 #
	CLEANUP AND TRAP	8266 #	8388	8548
	CLEANUP DISP		2176 #
	CLEANUP DONE		8265 #	8563	8573
	CLEAR ARX0		1769 #	2866	4832	6394	6436	6562	6568
	CLEAR CONTINUE		2070 #
	CLEAR EXECUTE		2071 #
	CLEAR RUN		2072 #
	CLEAR []0		1768 #	2866	4549	4832	6371	6387	6394	6436	6562	6568
	CLR FPD			2091 #	3861	3981	3987	4394	4905	4922	6521
	CLR IO BUSY		2076 #	7871	7909
	CLR IO LATCH		2077 #	7956	7964	7968	7971	7980	7986	7995	8000
	CLRCSH			2067 #	7667	7668	7671
	DFADJ			5730 #	5741
	DISMISS			2173 #	3738	3754
	DIV			2044 #	4743	4746	4747	4795	5615	5627	5635	5733	5735	5736
	DIV DISP		2167 #
	DIV STEP		4723 #	4746
	DONE			2159 #	2312	2316	3467	3596	3601	4405	4890	7629	7918
	DPB SCAD		5083 #	5088	5089	5090	5091	5092
	EA MODE DISP		2148 #	2363	2430	3700	4944	4947	6060	7045	7952
	END BLT			2115 #	5343	5367
	END MAP			2116 #
	END STATE		2113 #	5343	5367	6156	6217	6241	6392	6521	6525	6588	6870	8563
				8573	8589	8590
	EXIT			2153 #	2659	2665	2782	2784	2818	2824	2832	2834	2853	2855	2900
				2910	2920	2952	2963	2983	2993	3004	3014	3045	4310	4316	4339
				4341
	EXP TEST		2103 #	5624	5639	5972
	FETCH			1875 #	2312	2313	2315	2316	2335	2376	2382	2491	2517	3123	3467
				3479	3596	3597	3600	3601	3670	3671	3698	3740	3880	4405	4890
				4900	7629	7918	8154
	FE_-1			1999 #
	FE_-12.			1997 #	3127
	FE_-2			1996 #
	FE_-FE			1983 #	5010	5106
	FE_-FE+200		2010 #	5485	5486
	FE_-FE+S#		1986 #	5015
	FE_-FE-1		1984 #	3068	3104
	FE_-S-10		1993 #	5019	5087
	FE_-S-20		1992 #
	FE_0			1998 #
	FE_EXP			2005 #	2483	2499	5418	5705
	FE_FE+1			2000 #	3071	3085	3107	5500	5619	5621	5637	5638	5658	5663	5887
				5890	5922	5924	5970	5978
	FE_FE+10		2002 #	5017	5022	5100	5108
	FE_FE+2			2001 #	5456
	FE_FE+4			2004 #	3142
	FE_FE+P			2008 #	6655
	FE_FE+S#		2011 #	5804	5815	6794
	FE_FE+SC		1987 #	6793
	FE_FE-1			2003 #	5615	5627	5635	5720	5722	5880	5900	5917	5945
	FE_FE-19		1985 #
	FE_FE-200		2009 #	5458
	FE_FE.AND.S#		1988 #	4902	5104	6278	6661	6792	6998
	FE_P			1989 #	4898	5103	6791	6995	7037
	FE_S			1990 #
	FE_S#			1994 #	3127	5523	5527	5529	5530	6654
	FE_S#-FE		1995 #	5865
	FE_S+2			1991 #	6118
	FE_SC+EXP		2006 #	5447	5544	5787
	FE_SC-EXP		2007 #	5479	5839
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 234
; CROSS REFERENCE LISTING

	FIRST DIV STEP		4724 #	4743
	FIX [] SIGN		1782 #	3529	4289	4314	4337	6874	7504
	FL NO DIVIDE		2107 #	5481	5493	5852
	FL-EXIT			2155 #	5577	5581	5628	5649
	FM WRITE		1790 #	2242	2250	2252	2253	2255	2256	2258	2259	2265	2267	2577
				2610	2867	3125	3146	3182	3216	3222	3440	3531	3572	3575	3578
				3581	3584	3587	3590	3593	3817	3881	3883	3948	3953	3982	4366
				4374	4383	4385	4396	4397	4398	4400	4402	4630	4646	4647	4648
				4650	4653	4672	4674	4677	4807	4812	4817	4823	4824	4825	4887
				4905	5153	5167	5177	5187	5220	5272	5318	5381	5573	5579	5894
				5902	5938	5939	5940	5947	6059	6072	6075	6101	6106	6123	6148
				6169	6175	6185	6188	6201	6212	6214	6216	6233	6249	6251	6258
				6272	6286	6293	6304	6335	6352	6354	6389	6390	6402	6403	6410
				6412	6426	6428	6437	6440	6472	6478	6484	6489	6490	6494	6503
				6509	6516	6517	6518	6682	6714	6743	6819	6836	6867	6964	6993
				7036	7060	7075	7078	7083	7090	7095	7102	7114	7220	7331	7441
				7443	7445	7447	7470	7478	7481	7485	7506	7523	7529	7560	7563
				7594	7595	7839	7947	7981	7987	7989	8030	8134	8207	8222	8232
				8337	8340	8341	8343	8349	8358	8360	8362	8369	8372
	FORCE EXEC		1855 #	7749	7763	7797
	GEN 17-FE		2014 #	4987
	GEN MSK []		1785 #	5021	5024	5099	5102	6121
	HALT []			2175 #	2273	2332	2350	2606	3726	7762	7794	8547
	HOLD LEFT		2019 #	2313	2315	2360	2374	2375	2381	2386	2401	2402	2414	2425
				2449	2784	2816	2824	2846	2848	3479	3597	3600	3670	3671	3672
				3681	3684	3698	3710	3740	3765	3779	3932	3993	4005	4009	4159
				4171	4176	4209	4225	4278	4935	4966	5180	5240	5264	5317	5322
				5343	5347	5352	5367	5370	5380	5455	5723	6062	6065	6068	6110
				6137	6140	6156	6163	6191	6199	6205	6213	6217	6229	6241	6245
				6252	6271	6300	6377	6392	6431	6466	6483	6510	6521	6525	6582
				6588	6636	6697	6701	6736	6762	6805	6810	6870	6991	7035	7044
				7200	7226	7240	7327	7329	7432	7479	7482	7554	7559	7584	7620
				7622	7624	7626	7638	7714	7715	7716	7717	7718	7719	7720	7742
				7813	7940	7961	7961	8142	8158	8229	8236	8239	8242	8245	8248
				8445	8468	8482	8502	8512	8515	8563	8565	8573	8577	8579	8581
				8583	8585	8587	8589	8590	8591	8635
	HOLD RIGHT		2023 #	2507	2509	2522	2544	2545	2782	2818	2822	2839	2841	2866
				3219	3221	3529	3674	3683	3686	3688	3689	3690	3724	3729	3732
				3753	3774	3787	3808	3944	4099	4109	4111	4113	4115	4128	4142
				4152	4206	4222	4289	4290	4291	4314	4337	4549	4589	4652	4707
				4832	5014	5152	5160	5225	5271	5310	5314	5419	5420	5423	5424
				5449	5450	5483	5484	5545	5546	5624	5639	5744	5745	5752	5769
				5893	5926	5956	5957	5972	6055	6077	6297	6302	6371	6387	6388
				6394	6434	6436	6443	6449	6458	6477	6529	6532	6537	6562	6568
				6641	6739	6741	6814	6818	6874	6917	6921	6925	6929	6933	6937
				6953	7054	7066	7140	7150	7151	7152	7156	7157	7158	7159	7167
				7168	7171	7172	7173	7174	7175	7176	7177	7178	7194	7234	7237
				7257	7261	7335	7336	7344	7352	7358	7504	7612	7614	7616	7618
				7766	7970	8018	8093	8095	8097	8099	8101	8103	8105	8107	8332
				8378	8398	8401	8449	8460	8472	8500	8603
	IBP DP			4865 #	4889	4895	4909	6172	6987	7032	7106
	IBP SCAD		4866 #	4889	4895	4909	6172	6987	7032
	IBP SPEC		4867 #	4889	4895	4909
	INH CRY18		2031 #	3654	3851	3899	3928	3949	3954	5236	5316
	INST DISP		2152 #	2440	2444	2453	2458	2466	2487	2493	2518	2523
	INTERRUPT TRAP		2165 #
	JFCL FLAGS		2100 #	3744
	JUMP DISP		2158 #	3616	3630	3645	3655
	JUMPA			2160 #	3597	3600	3670	3671	3698	3740
	LDB SCAD		4983 #	4992	4993	4994	4995	4996
	LEAVE USER		2098 #	2300	4188
	LOAD AC BLOCKS		2065 #	2245	7269
	LOAD BYTE EA		2056 #	4898	4917	4967	6056	6068	6994
	LOAD DST EA		2059 #	7033	7035	7044
	LOAD FE			1935 #	2465	2483	2499	3068	3071	3075	3085	3087	3104	3107	3110
				3115	3127	3142	3190	4898	4902	4914	5010	5015	5017	5019	5022
				5087	5100	5103	5104	5106	5108	5418	5447	5456	5458	5479	5485
				5486	5500	5523	5527	5529	5530	5544	5615	5619	5621	5627	5635
				5637	5638	5658	5663	5705	5720	5722	5787	5804	5815	5839	5865
				5880	5887	5890	5900	5917	5922	5924	5945	5970	5978	6118	6119
				6121	6278	6654	6655	6661	6791	6792	6793	6794	6995	6998	7018
				7037
	LOAD FLAGS		2102 #	2301	3703	3707	3766	4187	7753	7768	8559
	LOAD IND EA		2057 #	2426
	LOAD INST		2054 #	2354	3815	7133	8162
	LOAD INST EA		2055 #	3696	3720	3735	7959
	LOAD IR			2050 #	6055
	LOAD PAGE TABLE		2064 #	7655	8507	8516
	LOAD PCU		2096 #	4189
	LOAD PI			2068 #	3755	7640	7731	8216
	LOAD PXCT		2062 #	3809
	LOAD SC			1934 #	2257	2267	2464	2483	2499	2515	3091	3093	3171	3172	3173
				3175	3179	3190	3199	3202	3206	3213	3245	3246	3247	3249	3253
				3268	3270	3271	3272	3275	3281	4305	4333	4371	4391	4412	4438
				4451	4457	4465	4475	4483	4528	4627	4635	4743	4746	4787	5142
				5145	5158	5165	5170	5183	5199	5246	5261	5267	5412	5416	5417
				5426	5428	5451	5499	5534	5537	5542	5561	5562	5563	5565	5568
				5572	5684	5694	5704	5738	5741	5748	5764	5767	5775	5779	5782
				5792	5798	5854	5855	6425	6454	6594	6596	6599	6603	6605	6783
				6790	6796	6801	6808	7321	7323	7339	7341	7661	7672	7689	7700
				7890	7897	7922	7928	7976	7983	7992	7996	8403	8406
	LOAD SRC EA		2058 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 235
; CROSS REFERENCE LISTING

	LOAD VMA		1854 #	2243	2262	2266	2312	2312	2313	2315	2316	2316	2334	2360
				2376	2382	2388	2392	2415	2419	2428	2449	2491	2502	2505	2517
				2879	2883	2884	3123	3467	3467	3479	3596	3596	3597	3600	3601
				3601	3670	3671	3672	3677	3681	3684	3698	3711	3714	3740	3756
				3762	3777	3779	3779	3788	3852	3879	3890	3902	3907	3923	3988
				4016	4137	4138	4138	4145	4146	4146	4159	4159	4178	4179	4209
				4209	4218	4225	4226	4405	4405	4890	4890	4900	4949	4953	4957
				4961	5305	5326	5333	5347	5348	5352	5353	5370	5371	6063	6065
				6066	6090	6229	6480	6507	6552	6558	6565	6582	6587	6644	6726
				6769	6889	7039	7040	7041	7042	7121	7129	7252	7415	7432	7479
				7482	7554	7579	7584	7584	7629	7629	7648	7654	7732	7747	7747
				7747	7748	7789	7789	7797	7880	7915	7918	7918	7940	7962	8016
				8024	8118	8126	8136	8139	8139	8142	8142	8153	8210	8226	8226
				8229	8229	8236	8236	8239	8239	8242	8242	8245	8245	8248	8248
				8255	8389	8395	8435	8435	8492	8494	8503	8513	8528	8632	8632
				8635	8635	8640	8640
	LSH			2037 #
	LSHC			2040 #	3175	3179	4776	4779
	LUUO			2162 #	6016	6018	6020	6022	6024	6026	6028	6030	6032
	MEM CYCLE		1851 #	2243	2262	2266	2312	2312	2312	2313	2313	2315	2315	2316
				2316	2316	2334	2335	2352	2360	2376	2376	2382	2382	2387	2388
				2392	2393	2415	2416	2419	2420	2424	2428	2438	2447	2449	2450
				2451	2479	2490	2491	2491	2502	2503	2505	2506	2510	2517	2517
				2582	2615	2621	2626	2629	2680	2681	2879	2880	2882	2883	2884
				2886	3123	3123	3467	3467	3467	3479	3479	3547	3548	3596	3596
				3596	3597	3597	3600	3600	3601	3601	3601	3670	3670	3671	3671
				3672	3672	3677	3677	3681	3681	3684	3684	3694	3698	3698	3711
				3712	3714	3715	3718	3733	3740	3740	3756	3760	3762	3763	3764
				3777	3777	3779	3779	3780	3783	3788	3788	3809	3810	3848	3852
				3853	3865	3871	3879	3880	3890	3891	3894	3902	3904	3907	3909
				3911	3917	3923	3925	3931	3988	3989	3990	4000	4016	4017	4018
				4137	4138	4138	4145	4146	4146	4147	4149	4154	4159	4159	4159
				4178	4179	4180	4184	4197	4201	4209	4209	4209	4218	4219	4223
				4225	4226	4227	4405	4405	4405	4890	4890	4890	4900	4900	4929
				4935	4936	4949	4950	4953	4954	4957	4958	4961	4962	4964	4970
				5094	5095	5305	5306	5326	5327	5333	5334	5336	5347	5348	5350
				5352	5353	5355	5359	5362	5370	5371	5373	6049	6063	6065	6065
				6066	6066	6068	6090	6091	6229	6229	6480	6481	6482	6507	6508
				6552	6558	6565	6582	6582	6587	6587	6644	6644	6679	6681	6726
				6726	6728	6731	6760	6769	6769	6889	6890	7039	7039	7040	7040
				7041	7041	7042	7042	7044	7058	7117	7120	7121	7125	7128	7129
				7132	7252	7252	7253	7415	7415	7416	7418	7421	7432	7432	7468
				7469	7476	7477	7479	7479	7482	7482	7551	7552	7554	7555	7579
				7580	7583	7584	7584	7584	7585	7592	7593	7629	7629	7629	7648
				7648	7649	7654	7732	7736	7747	7747	7747	7748	7748	7763	7784
				7789	7789	7790	7797	7798	7880	7882	7915	7916	7918	7918	7918
				7940	7941	7962	7962	7963	8009	8012	8014	8016	8024	8026	8028
				8118	8119	8121	8126	8127	8136	8139	8139	8141	8142	8142	8142
				8153	8154	8160	8210	8226	8226	8227	8228	8229	8229	8229	8230
				8231	8234	8235	8236	8236	8236	8237	8238	8239	8239	8239	8240
				8241	8242	8242	8242	8243	8244	8245	8245	8245	8246	8247	8248
				8248	8248	8249	8250	8252	8255	8389	8395	8435	8435	8435	8436
				8492	8493	8494	8495	8503	8513	8528	8632	8632	8633	8635	8635
				8635	8637	8640	8640
	MEM READ		1879 #	2352	2424	2438	2447	2451	2479	2490	2510	3694	3718	3733
				3760	3764	3810	3848	3894	3931	4018	4184	4964	4970	5359	6049
				6068	6482	6731	6760	7044	7058	7117	7125	7132	7253	7469	7477
				7552	7593	7736	7748	7784	7790	7882	7963	8009	8012	8014	8121
				8160	8436
	MEM WAIT		1878 #	2352	2424	2438	2447	2451	2479	2490	2510	2582	2615	2621
				2626	2629	2681	2882	3548	3694	3718	3733	3760	3764	3810	3848
				3865	3871	3894	3911	3917	3931	3990	4018	4147	4149	4154	4184
				4197	4201	4223	4936	4964	4970	5095	5336	5359	5362	6049	6068
				6482	6681	6728	6731	6760	7044	7058	7117	7125	7132	7253	7416
				7418	7421	7469	7477	7552	7583	7585	7593	7649	7736	7748	7784
				7790	7882	7916	7963	8009	8012	8014	8026	8028	8121	8141	8160
				8227	8228	8230	8231	8234	8235	8237	8238	8240	8241	8243	8244
				8246	8247	8249	8250	8252	8436	8495	8633	8637
	MEM WRITE		1880 #	2582	2615	2621	2626	2629	2681	2882	3548	3865	3871	3911
				3917	3990	4147	4149	4154	4197	4201	4223	4936	5095	5336	5362
				6681	6728	7416	7418	7421	7583	7585	7649	7916	8026	8028	8141
				8227	8228	8230	8231	8234	8235	8237	8238	8240	8241	8243	8244
				8246	8247	8249	8250	8252	8495	8633	8637
	MEM_Q			1887 #	5337	5363	6681
	MEM_[]			1886 #	2583	2616	2622	2627	2630	2682	2882	3548	3866	3872	3912
				3918	3991	4148	4150	4155	4198	4202	4224	4936	5095	6728	7416
				7418	7421	7583	7585	7649	7916	8026	8028	8141	8227	8228	8230
				8231	8234	8235	8237	8238	8240	8241	8243	8244	8246	8247	8249
				8250	8252	8496	8634	8638
	MUL DISP		2166 #	4457	4465	4475	4483	5715	5741	5743	5862
	MUL FINAL		4434 #	4461	4469	4479	4487
	MUL STEP		4433 #	4457	4465	4475	4483
	NEXT INST		2146 #	2611	3146	3194	3222	3572	3882	3960	3967	4675	4678	5573
				5579	5941
	NEXT INST FETCH		2147 #	2312	2313	2315	2316	2377	2383	3467	3479	3596	3597	3600
				3601	3670	3671	3698	3740	4405	4890	7629	7918
	NEXT [] PHYSICAL WR	1910 #	4159	4209	8142	8229	8236	8239	8242	8245	8248	8635
	NO DIVIDE		2106 #	4530	4565	4597	4684	5203
	NORM DISP		2172 #	5429	5459	5538	5615	5617	5627	5631	5633	5635	5636	5661
				5814	5869	5870	5881	5883	5901	5911	5913	5918	5919	5946	5975
	ONES			2043 #	5021	5024	5099	5102	6121
	PAGE FAIL TRAP		2163 #	8380	8462	8479
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 236
; CROSS REFERENCE LISTING

	PI DISP			2171 #
	PXCT BLT DEST		1863 #	5328	5335	5349	5354
	PXCT BLT SRC		1867 #	5307	5372
	PXCT BYTE DATA		1865 #	4951	4955	7039	7040
	PXCT BYTE PTR EA	1864 #	4959	4963
	PXCT DATA		1862 #	2406	2449	2502	2505	2881	2885	3903	3908
	PXCT EA			1861 #	2415	2420	3716
	PXCT EXTEND EA		1868 #	6065	6066
	PXCT STACK WORD		1866 #	3854	3892	3924
	Q-[]			1732 #	4620
	Q.AND.NOT.[]		1733 #
	Q_#			1748 #	5178	5223
	Q_-1			1740 #
	Q_-AC[]			1741 #	4806	4811	4816
	Q_-Q			1742 #	4590	4668	4710	4711	4728	5616	5618	5620	5622	5907
	Q_-[]			1739 #	5844
	Q_.NOT.AC[]		1738 #	4810	4815
	Q_.NOT.Q		1747 #	5906
	Q_0			1749 #	3083	5020	5098	5426	5499	5510	5523	5527	5529	5530	5543
				5557	5854	6119
	Q_0 XWD []		1750 #
	Q_AC			1743 #	4305	4508
	Q_AC[]			1744 #	2469	3192	3263	4399	4401	4518	6677
	Q_AC[].AND.MASK		1745 #
	Q_AC[].AND.[]		1746 #	4603	4626	4633
	Q_MEM			1897 #	5360	8014
	Q_Q*.5			1755 #	4415	4450	4627	5768	5859
	Q_Q*2			1756 #
	Q_Q+.25			1751 #	5718	5867
	Q_Q+1			1752 #
	Q_Q+AC			1754 #	5198
	Q_Q+[]			1761 #	4629	4661	5700	5708	5810	5813
	Q_Q-1			1753 #	5239
	Q_Q-WORK[]		1843 #	5181
	Q_Q.AND.#		1758 #	3218	4705	5454	5769
	Q_Q.AND.NOT.[]		1760 #	5856
	Q_Q.AND.[]		1759 #	4676	5105
	Q_Q.OR.#		1757 #	3220	4588
	Q_WORK[]		1825 #	5247	6269
	Q_[]			1734 #	4331	4371	4391	4412	4631	4657	5169	5451	5691	5703	5764
				5779	5792	5798	5849
	Q_[]+[]			1736 #	4658
	Q_[]-[]			1735 #	5311
	Q_[].AND.Q		1762 #	4753	5892	5925
	Q_[].AND.[]		1737 #	4578
	Q_[].OR.Q		1763 #	5723
	RAM_[]			1846 #	2265	2267
	READ Q			1774 #	5580	5623	5646	5898	5943
	READ XR			1772 #	3702
	READ []			1773 #	2462	2482	2662	2830	2837	2844	2851	3172	3189	3246	3266
				3271	3425	3470	3473	3476	3482	3485	3488	3706	3755	3766	3809
				4134	4136	4144	4177	4186	4217	4308	4519	4525	4539	4544	4546
				4551	4619	4621	4639	4655	4664	4726	4733	4754	4897	4901	4916
				4919	5019	5087	5103	5227	5414	5418	5503	5505	5538	5542	5576
				5617	5636	5705	5805	5814	5864	5883	5919	6056	6074	6118	6153
				6244	6247	6253	6266	6277	6294	6471	6507	6558	6565	6592	6606
				6611	6634	6638	6694	6782	6791	6889	6911	6943	6994	6996	7019
				7215	7217	7218	7223	7227	7330	7543	7579	7668	7677	7685	7958
				8216	8226	8409	8410	8412	8517	8559	8567
	RETURN []		2170 #	2544	2545	3705	3709	4207	4210	4418	4462	4470	4480	4488
				4686	4709	4710	4712	4797	4825	4930	4932	4936	4972	5006	5025
				5095	5660	5662	5663	5753	5949	5956	5957	5972	6355	6365	6370
				6373	6411	6412	6563	6569	6746	6770	6838	6870	6882	6914	6930
				6947	6956	6958	6985	7021	7055	7061	7066	7107	7359	7432	7530
				7564	7641	7701	7810	7813	7886	7893	7899	7956	7964	7968	7971
				7997	8010	8012	8014	8016	8018	8020	8022	8024	8026	8028	8030
				8219	8223	8257	8534
	ROT			2039 #	3110	3115	3275	3277	3281	3283
	ROTC			2042 #	3249	3253	3274	3280
	SCAD DISP		2169 #	4889	4895	4909	4988	5412	5559	5561	6119	6121	6173	6988
				7032	7983
	SC_-1			1979 #
	SC_-2			1980 #
	SC_-SHIFT		1943 #
	SC_-SHIFT-1		1944 #	3172	3246	3271
	SC_-SHIFT-2		1945 #
	SC_0			1978 #	6790	6801
	SC_1			1977 #
	SC_11.			1968 #
	SC_14.			1967 #
	SC_19.			1966 #	2257
	SC_2			1976 #	6603
	SC_20.			1965 #	6425
	SC_22.			1964 #
	SC_24.			1963 #
	SC_26.			1962 #	5854
	SC_27.			1961 #	5451	5499
	SC_28.			1960 #
	SC_3			1975 #	5158
	SC_34.			1959 #	4528	4627	4635	5170	5183	5199
	SC_35.			1958 #	4305	4333	4371	4391	4412	5246	5775	5779	5792	5798	5855
	SC_36.			1957 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 237
; CROSS REFERENCE LISTING

	SC_4			1974 #
	SC_5			1973 #	7890	7922
	SC_6			1972 #	5534	5764	6596	7321	7339
	SC_7			1971 #	6594
	SC_8.			1970 #
	SC_9.			1969 #	5142	5261	8403
	SC_EXP			1950 #	2483	2499	5416	5694
	SC_FE			1953 #	2515	5782
	SC_FE+S#		1952 #	3199	5561
	SC_S#			1954 #	2257	4305	4333	4371	4391	4412	4528	4627	4635	5142	5158
				5170	5183	5199	5246	5261	5451	5499	5534	5764	5775	5779	5792
				5798	5854	5855	6425	6594	6596	6603	6790	6801	7321	7339	7661
				7700	7890	7922	7976	7992	8403
	SC_S#-FE		1951 #	3202	5563
	SC_SC-1			1939 #	7983
	SC_SC-EXP		1946 #
	SC_SC-EXP-1		1947 #	5412	5684
	SC_SC-FE		1949 #
	SC_SC-FE-1		1948 #	5417	5704
	SC_SHIFT		1940 #	3190	5542
	SC_SHIFT-1		1941 #	2464	3268
	SC_SHIFT-2		1942 #
	SET APR ENABLES		2074 #	2248	7219	7330
	SET AROV		2084 #	4318	4319	4343	4406	5560
	SET FL NO DIVIDE	2087 #	5481	5493	5852
	SET FOV			2085 #
	SET FPD			2090 #	4420	4946	6520
	SET HALT		2069 #	8144	8211
	SET NO DIVIDE		2086 #	4530	4565	4597	4684	5203	5481	5493	5852
	SET PDL OV		2093 #	3873	3930	3961	3965
	SET P TO 36-S		4870 #	4931	6182	6990	7034
	SET TRAP1		2094 #
	SHIFT			1937 #	3075	3087	3110	3115
	SKIP AC REF		2139 #
	SKIP AD.EQ.0		2124 #	3120	3473	3485	3578	3590	4308	4313	4520	4522	4526	4540
				4586	4615	4646	4728	4808	4813	4818	4834	4841	5168	5197	5477
				5503	5505	5580	5623	5646	5805	5857	5898	5943	6266	6320	6396
				6399	6695	6732	6754	6881	7571
	SKIP AD.LE.0		2125 #	3476	3488	3581	3593	4580	5228	5497	5827	6468	7527	8215
	SKIP ADL.EQ.0		2136 #	2270	4167	4172	5521	5526	5641	5809	5812	5882	5885	5888
				5891	5949	6050	6094	6224	6226	6309	6329	6514	6530	6585	6620
				6623	6657	7136	7262	7328	7334	7750	7751	7944	7946	7960	8380
				8396	8462	8477	8479	8556
	SKIP ADL.LE.0		2127 #	7953
	SKIP ADR.EQ.0		2137 #	3191	3738	3754	5324	6455	6528	6895	7181	7184	7205	7207
				7210	7212	7214	7515	7609	7611	7615	7617	7619	7621	7623	7625
				7738	7791	7812	7885	7912	8437	8453	8454	8599	8608	8609	8611
				8612	8614	8615
	SKIP CRY0		2132 #	3856	3900	3929	5489	5616	5618	5620	5622
	SKIP CRY1		2133 #	4270	4282	5934	6344	6350	6363	6555	6566
	SKIP CRY2		2134 #	5907	5967
	SKIP DP0		2122 #	2484	2500	2662	2844	2851	3143	3217	3470	3482	3575	3587
				3947	3950	3955	4135	4289	4315	4337	4340	4396	4404	4509	4545
				4547	4552	4557	4561	4584	4601	4613	4620	4636	4655	4673	4726
				4733	4748	5200	5342	5366	5414	5418	5448	5479	5487	5522	5544
				5576	5685	5788	5836	5840	5851	5864	6102	6115	6133	6146	6153
				6171	6202	6204	6227	6244	6247	6253	6294	6386	6391	6429	6438
				6471	6488	6560	6611	6638	6837	6868	6911	6965	7088	7254	7504
				8409	8450
	SKIP DP18		2123 #	2463	2830	2837	3267	6074	6314	6519	6609	6943	6944	7777
				8410	8412	8446
	SKIP EXECUTE		2140 #	8148
	SKIP FPD		2129 #	4358	4889	4895	4909	6419
	SKIP IF AC0		2121 #	2572	3530	4886
	SKIP IO LEGAL		2131 #	2521	3682	3685
	SKIP IRPT		2138 #	5346	6173	8344	8384	8563	8573
	SKIP JFCL		2135 #	3745
	SKIP KERNEL		2130 #	3675	3679	3680	3687	3804	3806	7115
	SKIP-COMP DISP		2157 #	3511	3531	3532	6242
	SPEC MEM READ		1881 #	2497
	SPEC MEM WRITE		1882 #
	START NO TEST WRITE	1874 #
	START READ		1872 #	2312	2313	2315	2316	2335	2376	2382	2387	2393	2416	2420
				2450	2491	2503	2506	2517	3123	3467	3479	3596	3597	3600	3601
				3670	3671	3672	3677	3681	3684	3698	3712	3715	3740	3763	3783
				3809	3880	3891	3925	4017	4180	4227	4405	4890	4900	4950	4954
				4958	4962	5306	5373	6065	6066	6091	6229	6481	6508	6582	6587
				6644	6769	6890	7039	7040	7041	7042	7120	7128	7252	7468	7476
				7479	7482	7551	7555	7592	7629	7798	7918	7941	7962	8119	8154
				8435
	START WRITE		1873 #	2680	2880	2886	3547	3777	3780	3788	3853	3904	3909	3989
				4000	4159	4209	4219	4929	4935	5094	5327	5334	5350	5355	6679
				6726	7415	7432	7580	7584	7648	7763	8127	8142	8229	8236	8239
				8242	8245	8248	8493	8635
	STATE_[]		2112 #	5317	6110	6137	6140	6163	6199	6205	6213	6245	6252	6271
				6300	6483	6510	6636	6697	6701	6762	8577	8579	8581	8583	8585
				8587	8591
	STEP SC			1936 #	2267	3091	3093	3171	3173	3175	3179	3206	3213	3245	3247
				3249	3253	3270	3272	3275	3281	4438	4451	4457	4465	4475	4483
				4743	4746	4787	5145	5165	5267	5426	5428	5537	5562	5565	5568
				5572	5738	5741	5748	5767	6454	6599	6605	6808	7323	7341	7672
				7689	7897	7928	7996	8406
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 238
; CROSS REFERENCE LISTING

	SWEEP			2066 #	7684	7685	7688
	TAKE INTERRUPT		2164 #	8603
	TEST DISP		2156 #	3411	3417	7828
	TL []			1778 #	4167	4172	5641	5809	5812	5882	5885	5888	5891	5949	6050
				6094	6224	6226	6309	6329	6514	6530	6585	6620	6623	7262	7944
				7946	7960	8380	8396	8462	8477	8479	8556
	TR []			1777 #	3738	3754	6455	6528	6895	7205	7207	7210	7212	7214	7515
				7609	7611	7615	7617	7619	7621	7623	7625	7885	7912	8437	8453
				8454	8599	8608	8609	8611	8612	8614	8615
	TURN OFF PXCT		2063 #	2324	2327	2330	2342	2345	2348	2362
	TXXX TEST		2141 #	3425
	UNHALT			2073 #	8147
	UPDATE USER		2097 #	3704	3708	3767
	UUO			2161 #	2522	3674	3683	3686	3688	3689	3690	3724	3729	3732	3753
				3774	3787	3808	4099	4109	4111	4113	4115	7054	7140	7150	7151
				7152	7156	7157	7158	7159	7167	7168	7171	7172	7173	7174	7175
				7176	7177	7178	7612	8093	8095	8097	8099	8101	8103	8105	8107
				8332
	VMA			1923 #
	VMA EXTENDED		1859 #
	VMA PHYSICAL		1856 #	4138	4146	4159	4179	4209	7121	7129	7747	7789	8139	8142
				8226	8229	8236	8239	8242	8245	8248	8435	8494	8632	8635	8640
	VMA PHYSICAL READ	1858 #	7747	7789	8640
	VMA PHYSICAL WRITE	1857 #	4138	4146	8139	8226	8632
	VMA_[]			1902 #	2312	2316	2334	2392	2419	2428	2517	2883	3467	3596	3601
				3677	3714	3777	3788	3902	3907	3988	4016	4405	4890	4900	4953
				4961	5305	5326	5333	6066	6587	6644	6726	6769	7040	7042	7252
				7415	7629	7648	7654	7747	7918	7962	8118	8126	8153	8255	8435
				8492	8503	8513	8528
	VMA_[] WITH FLAGS	1903 #	8024
	VMA_[]+1		1905 #	2313	2315	2360	2449	3479	3779	4225	5347	5352	5370	6229
				6582	7554	7584
	VMA_[]+XR		1907 #	4949	4957	7039	7041
	VMA_[]+[]		1908 #
	VMA_[]-1		1906 #	3672	3681	3684	7940
	VMA_[].OR.[] WITH F	1904 #	7880	7915
	WORK[]			1924 #	6261	6485	6690	6758	6839	6871	6874
	WORK[]_.NOT.[]		1831 #	6304
	WORK[]_0		1826 #	2259
	WORK[]_1		1827 #	2258
	WORK[]_Q		1824 #	5177	6233	6272
	WORK[]_[]		1828 #	2242	2250	2252	2253	4887	5153	5167	5187	5220	6059	6072
				6075	6106	6201	6249	6286	6426	6428	6490	6503	6509	6714	6867
				7060	7114	7220	7331	7441	7443	7445	7447	7470	7478	7481	7485
				7506	7523	7529	7560	7563	7594	7595	7981	7987	7989	8134	8207
				8222	8232	8337	8340	8341	8343	8349	8358	8360	8362	8369	8372
	WORK[]_[] CLR LH	1829 #	3817	7947
	WORK[]_[]-1		1830 #	6484
	WORK[]_[].AND.[]	1832 #	6123
	WRITE TEST		1871 #	2680	2880	2886	3547	3777	3780	3788	3853	3904	3909	3989
				4000	4159	4209	4219	4929	4935	5094	5327	5334	5350	5355	6679
				6726	7415	7432	7580	7584	7648	7763	8127	8142	8229	8236	8239
				8242	8245	8248	8493	8635
	XR			1922 #
	[] LEFT_-1		1717 #	2834
	[] LEFT_0		1715 #	2832
	[] RIGHT_-1		1718 #	2855
	[] RIGHT_0		1716 #	2853
	[]+[]			1580 #	2878	4417	4560
	[]-#			1582 #	6313	6608
	[]-[]			1581 #	4556	4613	4614	5323	5340	5364	5489	5497	5851	6227
	[].AND.#		1583 #	5521	5525	6656	7134	7328	7334
	[].AND.NOT.WORK[]	1833 #
	[].AND.NOT.[]		1586 #	4312
	[].AND.Q		1584 #	4585
	[].AND.WORK[]		1834 #	6880
	[].AND.[]		1585 #	4340	7181	7184	7812
	[].OR.[]		1587 #
	[].XOR.#		1588 #	2270	7750	7751
	[].XOR.[]		1589 #	7570
	[]_#			1591 #	2231	2235	2260	2261	2302	2839	2841	2846	2848	4732	5150
				5174	5184	5188	5218	5262	5317	6077	6110	6137	6140	6163	6199
				6205	6213	6245	6252	6271	6300	6483	6510	6636	6697	6701	6762
				7188	7191	7660	7666	7681	7683	7766	7809	8577	8579	8581	8583
				8585	8587	8591
	[]_#-[]			1590 #
	[]_(#-[])*2		1678 #	5257
	[]_(-[])*.5		1679 #
	[]_(-[]-.25)*.5 LON	1680 #	4591	5845
	[]_(-[]-.25)*2 LONG	1681 #	4669
	[]_(AC[].AND.[])*.5	1676 #	4362	4364	5682	5774	5830
	[]_(MEM.AND.[])*.5	1896 #	2511
	[]_(Q+1)*.5		1677 #	5966
	[]_([]+#)*2		1692 #
	[]_([]+1)*2		1693 #	6781
	[]_([]+[])*.5 LONG	1694 #	5712
	[]_([]+[])*2 LONG	1695 #	4778
	[]_([]+[]+.25)*.5 L	1698 #
	[]_([]-[])*.5 LONG	1696 #
	[]_([]-[])*2 LONG	1697 #	4775
	[]_([].AND.#)*.5	1684 #	5147	5154	7792
	[]_([].AND.#)*2		1685 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 239
; CROSS REFERENCE LISTING

	[]_([].AND.NOT.#)*.	1686 #
	[]_([].AND.NOT.#)*2	1687 #
	[]_([].AND.[])*.5	1688 #	4356
	[]_([].AND.[])*2	1689 #
	[]_([].OR.#)*.5		1690 #
	[]_([].OR.#)*2		1691 #	8505
	[]_+SIGN		1721 #	2509	2544	5419	5423	5449	5483	5545
	[]_+SIGN*.5		1726 #	5686	5789	5841
	[]_-1			1592 #	4512	6520	7638
	[]_-2			1593 #
	[]_-AC			1608 #	4821
	[]_-AC[]		1609 #	6398
	[]_-Q			1594 #
	[]_-Q*.5		1596 #	5508
	[]_-Q*2			1595 #	4642
	[]_-SIGN		1722 #	2507	2545	5420	5424	5450	5484	5546
	[]_-SIGN*.5		1727 #	5688	5790	5843
	[]_-WORK[]		1841 #	6135	7086	7100
	[]_-[]			1597 #	2667	3045	4712	4730	4737	4833	4837	4841	4843	5409	5486
				5522	5633	5648	5679	5833	5912	5933	6395
	[]_-[]*2		1599 #	5490
	[]_-[]-.25		1598 #	5680
	[]_.NOT.AC[]		1601 #	6397
	[]_.NOT.AC		1600 #	2993	3003	4820
	[]_.NOT.Q		1602 #	5112	6122
	[]_.NOT.WORK[]		1840 #	6152	6180	6184	6311	6315	7104
	[]_.NOT.[]		1603 #	2935	2973	3014	3025	3428	4276	4729	4835	4842	5582	5631
				5645	5647	5832	5842	5910	6103	6105	6653	7943
	[]_0			1604 #	2243	2245	2248	2257	2277	2299	2486	2900	3411	4151	4411
				4510	4727	5014	5159	5309	5343	5367	5649	5826	5908	5936	6156
				6217	6230	6241	6270	6392	6431	6465	6521	6525	6529	6532	6588
				6870	7343	7511	7610	7656	7693	7739	7970	8018	8139	8563	8573
				8589	8590
	[]_0 XWD []		1606 #	2237	2240	2285	2322	2326	2329	2341	2344	2347	4130	4163
				4214	4587	4598	6016	6018	6020	6022	6024	6026	6028	6030	6032
				6729	7502	7721	7722	7723	7724	7725	7726	7727	8617	8618	8620
				8621	8623	8624	8626	8627
	[]_0*.5 LONG		1605 #	4437
	[]_AC[]			1623 #	2263	2457	2876	6093	6111	6114	6145	6162	6223	6243	6275
				6291	6319	6322	6324	6341	6382	6384	6385	6418	6424	6451	6463
				6498	6643	6688	6725	6727	6835	6950	6957	6984	6986	7014	7073
				7081	7087
	[]_AC[]*.5		1625 #	4376
	[]_AC[]*2		1624 #	6331
	[]_AC[]-1		1620 #	6492	6511
	[]_AC[]-[]		1619 #	4281
	[]_AC[].AND.[]		1621 #
	[]_AC			1607 #	2443	2456	2679	2782	2784	2816	2822	3067	3084	3616	3889
				3922	3945	4002	4014	4333	4517	4915	5303	5412	5446	5479	5544
				5693	6096	6225	6288	6423	6425	6446	6584	7842	8129
	[]_AC*.5		1610 #	3090	3103	3106	4381	4601	5683	5786	5838
	[]_AC*.5 LONG		1611 #	2470	3195	3264
	[]_AC*2			1612 #	4911
	[]_AC+1			1613 #	3630
	[]_AC+1000001		1614 #	3653	3850
	[]_AC+[]		1615 #	5315
	[]_AC-1			1616 #	3645
	[]_AC-[]		1617 #	3511	4255	4286
	[]_AC-[]-.25		1618 #	4283
	[]_AC.AND.MASK		1622 #	3070	3119
	[]_APR			1626 #	7153	7154	7209	7241	7541
	[]_CURRENT AC []	1627 #
	[]_EA			1631 #	2405
	[]_EA FROM []		1628 #	6063
	[]_EXP			1632 #	5624	5639	5972
	[]_FE			1633 #	3144	6795
	[]_FLAGS		1634 #	3775	3789	4141	4166	7752
	[]_IO DATA		1891 #	7737	7785	7883	8351
	[]_MEM			1892 #	2353	2424	2439	2448	2452	2480	2498	3695	3719	3734	3760
				3764	3810	3849	3895	3931	4019	4185	4965	6049	6068	6482	6731
				6760	7044	7059	7132	7253	7469	7477	7553	7593	7748	7790	7963
				8009	8012	8122	8161	8436
	[]_MEM THEN FETCH	1893 #	2491
	[]_MEM*.5		1894 #
	[]_MEM.AND.MASK		1895 #	4971
	[]_P			1635 #	6659	6811
	[]_PC WITH FLAGS	1636 #	3860	3980	3986	4199	4403	7113	7764	8636
	[]_Q			1637 #	4310	4318	4543	4599	4616	4622	4632	5742	5749	5770	5793
				5853	5855
	[]_Q*.5			1638 #	4374	5502	5507	5782
	[]_Q*2			1639 #
	[]_Q*2 LONG		1640 #	4628	4638
	[]_Q+1			1641 #	5312
	[]_RAM			1642 #
	[]_TIME			1643 #	7567	7568	7569
	[]_VMA			1644 #	7977	8221	8342	8373
	[]_VMA FLAGS		1913 #	7733	7780	7874	7877	7913	7924	7930	8156
	[]_VMA IO READ		1914 #	7733	7780	7874	7877	8156
	[]_VMA IO WRITE		1915 #	7913	7924	7930
	[]_WORK[]		1839 #	5172	5182	5379	6256	6469	6479	6512	6513	6534	6716	6753
				6833	6955	6966	7077	7198	7232	7326	7388	7390	7392	7394	7408
				7414	7417	7419	7508	7520	7573	7577	7599	7950	7955	8209	8214
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 240
; CROSS REFERENCE LISTING

				8218	8233	8251	8253	8254	8256	8385	8388	8390	8497	8525	8526
				8527	8533	8548	8558	8574
	[]_WORK[]+1		1842 #	6131	6165	6208	6308	6487	6962	6968
	[]_XR			1645 #	7953
	[]_[]			1646 #	2380	3122	3597	3600	3670	3671	3698	3725	3740	3813	3878
				3999	4004	4304	4332	4357	4373	4507	4516	4531	4537	4566	4929
				5245	5415	5416	5417	5456	5477	5485	5698	5699	5706	5707	5781
				5824	5827	5869	5870	6112	6133	6179	6203	6466	6477	6485	6552
				6655	6897	6989	7013	7033	7091	7160	7161	7333	7349	7355	7572
				7606	7768	7852	7854	7861	7886	8402	8438
	[]_[] SWAP		1647 #	2475	2659	2810	2812	2815	2818	2821	2824	3409	3414	3739
				3943	4001	4015	4140	5012	5141	5157	5260	5304	5313	5378	6531
				6589	6594	6595	6900	7233	7614	7627	7637	8440
	[]_[] XWD 0		1648 #	6285	6400	8003	8354	8356	8370
	[]_[]*.5		1649 #	2234	2513	2514	3086	3108	3109	3113	3198	3201	3281	3283
				4355	4413	4579	4607	4740	4741	4742	4748	5016	5094	5144	5164
				5492	5500	5569	5619	5621	5637	5638	5657	5658	5663	5775	5808
				5977	6596	6599	6603	6605	6690	6801	6808	6873	7339	7341	7795
				7814	7890	7896	8405
	[]_[]*.5 LONG		1650 #	2471	3175	3204	3249	3265	3274	4306	4334	4415	4436	4450
				4581	4583	4595	4611	4627	4634	4686	4735	5248	5428	5452	5457
				5534	5536	5567	5737	5740	5748	5751	5753	5768	5803	5859	5886
				5889	5921	5923	5969
	[]_[]*2			1651 #	2232	3074	3097	3111	3114	3141	3275	3277	4309	4336	4393
				5266	5487	5495	5572	6332	6891	7321	7323	7740	7776	7922	7928
				8022
	[]_[]*2 LONG		1652 #	3093	3176	3179	3180	3181	3207	3211	3214	3250	3253	3254
				3278	3280	3284	4666	4747	4750	4752	5107	5615	5627	5635	5714
				5719	5721	5733	5735	5736	5766	5807	5811	5861	5879	5899	5916
				5944
	[]_[]*4			1653 #	6590
	[]_[]+#			1654 #	3897	3926	6548	6557	7741	7786
	[]_[]+.25		1655 #	5973
	[]_[]+0			1656 #
	[]_[]+1			1657 #	2262	2266	2501	2504	3546	3761	3782	4935	5345	5369	5581
				6089	6191	6198	6228	6372	6441	6453	6460	6480	6501	6515	6570
				6635	6660	6758	6991	7035	7432	7479	7482	7509	8020	8639
	[]_[]+1000001		1658 #	3992	4007	5320
	[]_[]+AC		1659 #	4241	4272
	[]_[]+AC[]		1660 #	4269	6333	6343	6346
	[]_[]+Q			1661 #	4640
	[]_[]+RAM		1662 #	6564	6566
	[]_[]+WORK[]		1835 #	5241	6505	6691	6768	6879	6888	7522	7531	7574	7967	7969
				8418	8420	8426	8428
	[]_[]+XR		1663 #	2374	2386	2401	2414	3710	6062	6065	7961
	[]_[]+[]		1664 #	4132	4165	4387	4659	4662	4751	5429	5577	5661	5794	6154
				6186	6349	6360	6362	6809	7098	7116	7124	7503	7743	7778	7788
				7796	8631
	[]_[]+[]+.25		1665 #
	[]_[]-#			1666 #
	[]_[]-1			1667 #	3562	6170	6264	6265	6377	6519	6556	6961	8565
	[]_[]-1000001		1668 #
	[]_[]-AC		1669 #
	[]_[]-RAM		1670 #	6554	6559
	[]_[]-WORK[]		1844 #
	[]_[]-[]		1671 #	6149	6467	7094	7526	7670	7687
	[]_[]-[] REV		1672 #	6263
	[]_[].AND.AC		1699 #	2910	3035	3416	3439	7828
	[]_[].AND.NOT.#		1700 #	3768	4205	5957	6536	6916	6932	7199	7225	7336	7622	8480
				8498	8501
	[]_[].AND.NOT.AC	1702 #	2920	7858
	[]_[].AND.NOT.WORK[	1837 #
	[]_[].AND.NOT.[]	1701 #	5717	7208	7211	7616	7626	7813
	[]_[].AND.Q		1703 #	4338	5025	5114
	[]_[].AND.WORK[]	1836 #	6262
	[]_[].AND.[]		1704 #	5113	5642	5927	5929	6260	7639
	[]_[].AND.#		1673 #	2509	2522	2544	3674	3683	3686	3688	3689	3690	3724	3729
				3732	3753	3774	3787	3808	4099	4109	4111	4113	4115	4126	4220
				4290	5269	5419	5423	5449	5483	5545	6296	6420	6597	6600	6640
				6777	6812	6815	7054	7064	7140	7150	7151	7152	7156	7157	7158
				7159	7167	7168	7171	7172	7173	7174	7175	7176	7177	7178	7201
				7203	7235	7238	7255	7259	7327	7342	7350	7356	7557	7612	7613
				7892	7898	8093	8095	8097	8099	8101	8103	8105	8107	8332	8375
				8399
	[]_[].AND.# CLR LH	1674 #	3145	6717	6756	6798	6946	7180	7183	7242	7729	8407	8508
	[]_[].AND.# CLR RH	1675 #	6052	6097	6289	7263	7266
	[]_[].EQV.AC		1705 #	2983
	[]_[].EQV.Q		1706 #	4316	4319	4341	4342
	[]_[].OR.#		1707 #	2233	2507	2545	4169	4174	4291	4652	4738	5420	5424	5450
				5484	5546	5744	5745	5752	5956	6301	6388	6433	6442	6447	6457
				6734	6738	6740	6804	6920	6924	6928	6936	6952	7329	7335	7542
				7620	7714	7715	7716	7717	7718	7719	7720	8157	8397	8444	8448
				8458	8466	8470	8511	8514	8603
	[]_[].OR.AC		1708 #	2963	3434	7856
	[]_[].OR.FLAGS		1709 #
	[]_[].OR.WORK[]		1838 #	7092	7101
	[]_[].OR.[]		1710 #	3004	4277	5115	6054	6155	6376	6817	7202	7206	7213	7244
				7268	7618	7624	7782	8379
	[]_[].XOR.AC		1712 #	2952	3431
	[]_[].XOR.[]		1713 #	5931
	[]_[].XOR.#		1711 #	4605
	.NOT.[]			1579 #	4521	7640	7731
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 241
; CROSS REFERENCE LISTING

	2T			1926 #	4601	4614	5418	5694	6262	6333	6397	6692	6833	6879	7577
				7954
	3T			1927 #	2270	2500	2510	2668	3216	3425	3511	3546	3562	3654	3746
				3855	3891	3899	3924	3928	3946	3951	3956	3994	4008	4242	4256
				4362	4364	4383	4418	4558	4562	4613	4619	4620	4621	4639	4643
				4664	4672	4754	4821	4838	4898	4913	4987	5005	5103	5148	5155
				5237	5254	5258	5321	5323	5341	5365	5412	5447	5489	5521	5522
				5525	5558	5561	5616	5618	5620	5622	5682	5683	5686	5688	5788
				5789	5790	5835	5839	5841	5843	5851	5933	5939	6101	6119	6121
				6170	6174	6227	6335	6349	6363	6395	6398	6484	6487	6519	6520
				6548	6554	6557	6566	6592	6606	6634	6655	6656	6783	6791	6836
				6897	6988	6995	7017	7032	7036	7039	7041	7078	7135	7254	7328
				7334	7712	7737	7741	7749	7750	7751	7786	7790	7792	7961	8503
				8506	8513	8529	8567
	4T			1928 #	3119	3630	3645	4269	4274	4281	4284	4286	5196	5201	6115
				6146	6314	6319	6344	6385	6559	6608	6754	6881	7087	8215	8347
	5T			1929 #	7983	8000
	7-BIT DPB		5084 #	5088	5089	5090	5091	5092
	7-BIT LDB		4984 #	4992	4993	4994	4995	4996
(D) MACRO%
	AC			2204 #	2637	2638	2642	2643	2647	2648	2652	2653	2675	2692	2693
				2697	2698	2702	2703	2707	2708	2712	2713	2717	2718	2722	2723
				2727	2728	2734	2735	2739	2740	2744	2745	2749	2750	2755	2756
				2760	2761	2765	2766	2770	2771	2862	2893	2894	2903	2904	2913
				2914	2923	2924	2928	2929	2945	2946	2956	2957	2966	2967	2976
				2977	2986	2987	2996	2997	3007	3008	3018	3019	3028	3029	3038
				3039	4234	4235	4248	4249	4298	4299	4879	8328
	AC DISP			2218 #	3661	7146	7147	7382
	B			2206 #	2896	2906	2916	2926	2931	2948	2959	2969	2979	2989	2999
				3010	3021	3031	3041	4237	4251	4301
	DAC			2208 #	2861	4264	4265	4323	4324	4350	4494	4495	4499	4500	4573
				5759	5821
	DBL AC			2193 #	2870
	DBL B			2209 #	4326	4497	4502
	DBL FL-R		2199 #	5669	5670	5759	5821
	DBL R			2192 #	2861	2862	4264	4265	4350	4573
	FL-AC			2210 #	5389	5392	5393	5397	5400	5401	5435	5439	5440	5465	5469
				5470	5516	5517	5552	5553
	FL-BOTH			2212 #	5391	5395	5399	5403	5437	5442	5467	5472
	FL-I			2198 #	5393	5401	5440	5470
	FL-MEM			2211 #	5390	5394	5398	5402	5436	5441	5466	5471
	FL-R			2196 #	5389	5392	5397	5400	5435	5439	5465	5469	5552	5553
	FL-RW			2197 #	5390	5391	5394	5395	5398	5399	5402	5403	5436	5437	5441
				5442	5466	5467	5471	5472
	I			2184 #	2939	3054	3059	3313	3314	3315	3316	3317	3318	3319	3320
				3322	3323	3331	3332	3333	3334	3335	3336	3337	3338	3350	3351
				3352	3353	3354	3355	3356	3357	3367	3368	3369	3370	3371	3372
				3373	3374	3491	3492	3493	3494	3495	3496	3497	3498	3605	3606
				3607	3608	3609	3610	3611	3612	3620	3621	3622	3623	3624	3625
				3626	3635	3636	3637	3638	3639	3640	3641	3648	3649	3661	3663
				3796	3797	3840	3842	3843	3973	3974	3975	3976	4027	4028	4029
				4030	4031	4032	4033	4034	4038	4039	4040	4041	4042	4043	4044
				4045	4046	4047	4048	4049	4050	4051	4052	4053	4054	4055	4056
				4057	4058	4059	4060	4061	4062	4063	4064	4065	4066	4067	4068
				4069	4073	4074	4083	4084	4085	4086	4087	4088	4089	4090	4091
				4092	5299	5517	5987	5988	5989	5990	5991	5992	5993	5995	5996
				5997	5998	6000	6001	6002	6003	6005	6006	6007	6008	6009	6010
				6011	6012	6045	8036	8037	8038	8040	8041	8043	8044	8046	8047
				8048	8049	8050	8051	8052	8053	8055	8056	8057	8058	8059	8060
				8061	8062	8064	8065	8066	8067	8068	8069	8070	8071	8073	8074
				8075	8076	8077	8078	8079	8080	8082	8083	8084	8085	8086	8087
				8088	8089
	I-PF			2185 #	2638	2643	2648	2653	2693	2698	2703	2708	2713	2718	2723
				2728	2735	2740	2745	2750	2756	2761	2766	2771	2893	2894	2904
				2914	2924	2929	2946	2957	2967	2977	2986	2987	2997	3008	3019
				3029	3038	3039	3055	3619	3634	3939	4235	4249	4299	4324	4495
				4500
	IOT			2200 #	7146	7147	7382	7820	7821	7822	7823	7831	7832	7833	7834
				7845	7846	7847	7848	8113	8114	8328
	IR			2191 #	3841
	IW			2190 #	2895	2896	2988	2989	3040	3041
	M			2205 #	2639	2644	2649	2654	2694	2699	2704	2709	2714	2719	2724
				2729	2736	2741	2746	2751	2757	2762	2767	2772	2895	2905	2915
				2925	2930	2940	2941	2947	2958	2968	2978	2988	2998	3009	3020
				3030	3040	4236	4250	4300	4325	4496	4501	7382
	R			2186 #	2675	2938	3324	3325	3326	3327	3328	3329	3340	3341	3342
				3343	3344	3345	3346	3347	3359	3360	3361	3362	3363	3364	3365
				3366	3376	3377	3378	3379	3380	3381	3382	3383	3500	3501	3502
				3503	3504	3505	3506	3507	3518	3519	3520	3521	3522	3523	3524
				3525	3799	4879	4880	4881	4882	4883	5516
	R-PF			2187 #	2637	2642	2647	2652	2692	2697	2702	2707	2712	2717	2722
				2727	2734	2739	2744	2749	2755	2760	2765	2770	2903	2913	2923
				2928	2945	2956	2966	2976	2996	3007	3018	3028	4234	4248	4298
				4323	4494	4499
	ROUND			2213 #	5392	5393	5394	5395	5400	5401	5402	5403	5439	5440	5441
				5442	5469	5470	5471	5472	5516	5553
	RW			2189 #	2640	2645	2650	2655	2694	2695	2699	2700	2705	2710	2715
				2720	2725	2730	2736	2737	2741	2742	2747	2752	2758	2763	2768
				2773	2905	2906	2915	2916	2925	2926	2930	2931	2947	2948	2958
				2959	2968	2969	2978	2979	2998	2999	3009	3010	3020	3021	3030
				3031	3535	3536	3537	3538	3539	3540	3541	3542	3551	3552	3553
				3554	3555	3556	3557	3558	4236	4237	4250	4251	4300	4301	4325
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 242
; CROSS REFERENCE LISTING

				4326	4496	4497	4501	4502
	S			2207 #	2640	2645	2650	2655	2695	2700	2705	2710	2715	2720	2725
				2730	2737	2742	2747	2752	2758	2763	2768	2773
	SH			2194 #	3051	3052	3053
	SHC			2195 #	3056	3057
	SJC-			3451 #	3491	3500	3518	3535	3551	3605	3619	3634
	SJCA			3455 #	3495	3504	3522	3539	3555	3609	3623	3638
	SJCE			3453 #	3493	3502	3520	3537	3553	3607	3621	3636	5988
	SJCG			3458 #	3498	3507	3525	3542	3558	3612	3626	3641	5993
	SJCGE			3456 #	3496	3505	3523	3540	3556	3610	3624	3639	3648	5991
	SJCL			3452 #	3492	3501	3519	3536	3552	3606	3620	3635	3649	5987
	SJCLE			3454 #	3494	3503	3521	3538	3554	3608	3622	3637	5989
	SJCN			3457 #	3497	3506	3524	3541	3557	3611	3625	3640	5992
	TC-			3304 #	3350	3351	3359	3360
	TCA			3306 #	3354	3355	3363	3364
	TCE			3305 #	3352	3353	3361	3362
	TCN			3307 #	3356	3357	3365	3366
	TN-			3294 #
	TNA			3297 #	3317	3318	3326	3327
	TNE			3295 #	3315	3316	3324	3325	7822
	TNN			3298 #	3319	3320	3328	3329	7823
	TO-			3308 #	3367	3368	3376	3377
	TOA			3310 #	3371	3372	3380	3381
	TOE			3309 #	3369	3370	3378	3379
	TON			3311 #	3373	3374	3382	3383
	TZ-			3300 #	3331	3332	3340	3341
	TZA			3302 #	3335	3336	3344	3345
	TZE			3301 #	3333	3334	3342	3343
	TZN			3303 #	3337	3338	3346	3347
	W			2188 #	2639	2644	2649	2654	2704	2709	2714	2719	2724	2729	2746
				2751	2757	2762	2767	2772	2871	2940	2941
	W TEST			2217 #	2675	4880	4882
	WORD-TNE		3296 #	7820
	WORD-TNN		3299 #	7821
(U) MEM				994 #	2243	2262	2266	2312	2312	2312	2313	2313	2315	2315	2316
				2316	2316	2334	2335	2352	2360	2376	2376	2382	2382	2387	2388
				2392	2393	2406	2415	2416	2419	2420	2424	2428	2438	2447	2449
				2450	2451	2479	2490	2491	2491	2502	2503	2505	2506	2510	2517
				2517	2582	2615	2621	2626	2629	2659	2665	2680	2681	2782	2784
				2818	2824	2832	2834	2853	2855	2879	2880	2882	2883	2884	2886
				2900	2910	2920	2952	2963	2983	2993	3004	3014	3045	3123	3123
				3467	3467	3467	3479	3479	3547	3548	3596	3596	3596	3597	3597
				3600	3600	3601	3601	3601	3670	3670	3671	3671	3672	3672	3677
				3677	3681	3681	3684	3684	3694	3698	3698	3711	3712	3714	3715
				3718	3733	3740	3740	3756	3760	3762	3763	3764	3777	3777	3779
				3779	3780	3783	3788	3788	3809	3810	3848	3852	3853	3865	3871
				3879	3880	3890	3891	3894	3902	3904	3907	3909	3911	3917	3923
				3925	3931	3988	3989	3990	4000	4016	4017	4018	4137	4138	4138
				4138	4145	4146	4146	4146	4147	4149	4154	4159	4159	4159	4178
				4179	4180	4184	4197	4201	4209	4209	4209	4218	4219	4223	4225
				4226	4227	4242	4256	4310	4316	4339	4341	4405	4405	4405	4890
				4890	4890	4900	4900	4929	4935	4936	4949	4950	4953	4954	4957
				4958	4961	4962	4964	4970	5094	5095	5305	5306	5326	5327	5333
				5334	5336	5347	5348	5350	5352	5353	5355	5359	5362	5370	5371
				5373	5577	5581	5628	5649	6049	6063	6065	6065	6066	6066	6068
				6090	6091	6229	6229	6480	6481	6482	6507	6508	6552	6558	6565
				6582	6582	6587	6587	6644	6644	6679	6681	6726	6726	6728	6731
				6760	6769	6769	6889	6890	7039	7039	7040	7040	7041	7041	7042
				7042	7044	7058	7117	7120	7121	7125	7128	7129	7132	7252	7252
				7253	7415	7415	7416	7418	7421	7432	7432	7468	7469	7476	7477
				7479	7479	7482	7482	7551	7552	7554	7555	7579	7580	7583	7584
				7584	7584	7585	7592	7593	7629	7629	7629	7648	7648	7649	7654
				7732	7736	7747	7747	7747	7747	7748	7748	7763	7784	7789	7789
				7789	7790	7797	7798	7880	7880	7882	7915	7915	7916	7918	7918
				7918	7940	7941	7962	7962	7963	8009	8012	8014	8016	8024	8024
				8026	8028	8118	8119	8121	8126	8127	8136	8139	8139	8139	8141
				8142	8142	8142	8153	8154	8160	8210	8226	8226	8226	8227	8228
				8229	8229	8229	8230	8231	8234	8235	8236	8236	8236	8237	8238
				8239	8239	8239	8240	8241	8242	8242	8242	8243	8244	8245	8245
				8245	8246	8247	8248	8248	8248	8249	8250	8252	8255	8389	8395
				8435	8435	8435	8436	8492	8493	8494	8495	8503	8513	8528	8632
				8632	8632	8633	8635	8635	8635	8637	8640	8640	8640
(U) MICROCODE OPTIONS		1304 #
	OPT			1306 #	7192
(U) MICROCODE VERSION		15 #
	UCV			16 #	7193
(D) MODE			1396 #
(U) MULTI PREC			999 #	4592	4645	4660	4663	4670	4786	5680	5713	5835	5846
(U) MULTI SHIFT			1001 #	3075	3087	3110	3115	5018	5023	5101	5109
(U) NONEXISTENT IO REGI		8289 #
(U) NONEXISTENT MEMORY		8291 #
(U) PAGE ACCESS			8300 #	8459	8471
(U) PHYSICAL			1200 #	4138	4146	4159	4179	4209	7121	7129	7667	7668	7671	7684
				7685	7688	7733	7747	7780	7789	7874	7877	7913	7924	7930	8139
				8142	8156	8226	8229	8236	8239	8242	8245	8248	8376	8400	8435
				8494	8632	8635	8640
(U) PI.CLR			1261 #	7609
(U) PI.CO1			1249 #
(U) PI.CO2			1250 #
(U) PI.DIR			1260 #	7615
(U) PI.IP1			1241 #	7515	7809	8600	8608	8611
(U) PI.IP2			1242 #	7516	8600	8608
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 243
; CROSS REFERENCE LISTING

(U) PI.IP3			1243 #	7516	8601	8612
(U) PI.IP4			1244 #	7517	8601
(U) PI.IP5			1245 #	7517	8609	8614
(U) PI.IP6			1246 #	7518	8609
(U) PI.IP7			1247 #	7518	8615
(U) PI.MBZ			1259 #	7611
(U) PI.ON			1248 #	7620	7622
(U) PI.REQ			1262 #	7617
(U) PI.SC1			1267 #
(U) PI.SC2			1268 #
(U) PI.SC3			1269 #
(U) PI.SC4			1270 #
(U) PI.SC5			1271 #
(U) PI.SC6			1272 #
(U) PI.SC7			1273 #
(U) PI.TCF			1264 #	7625
(U) PI.TCN			1263 #	7623
(U) PI.TSF			1265 #	7621
(U) PI.TSN			1266 #	7619
(U) PI.ZER			1240 #
(U) PT CACHE			8280 #	8510
(U) PT PAGE			8281 #
	ALL			8283 #
	EVEN			8282 #	8510
(U) PT VALID			8278 #	8509
(U) PT WRITE			8279 #	8509
(U) PTE AGE			8272 #	8445	8449
(U) PTE CACHE			8274 #
(U) PTE PAGE			8275 #
(U) PTE VALID			8271 #	8506
(U) PTE WRITE			8273 #	8467	8481
(U) PXCT			1205 #
	BIS-DST-EA		1211 #	7033	7035	7041	7042	7044
	BIS-SRC-EA		1209 #
	CURRENT			1206 #	2312	2313	2315	2316	2335	2376	2382	2491	2517	3123	3467
				3479	3596	3597	3600	3601	3670	3671	3696	3698	3720	3735	3740
				3880	4405	4890	4900	7629	7918	7959	8154
	D1			1208 #	2406	2449	2502	2505	2881	2885	3903	3908	5328	5335	5349
				5354
	D2			1212 #	3854	3892	3924	4951	4955	5307	5372	7039	7040
	E1			1207 #	2415	2420	2426	3716	3816
	E2			1210 #	4898	4917	4959	4963	4967	6056	6065	6066	6068	6994
(U) RAMADR			704 #
	AC#			705 #	2443	2456	2470	2610	2679	2782	2784	2816	2822	2910	2920
				2952	2963	2983	2993	3003	3035	3067	3070	3084	3090	3103	3106
				3119	3182	3195	3216	3264	3416	3431	3434	3439	3440	3511	3531
				3572	3575	3578	3581	3584	3587	3590	3593	3616	3630	3645	3653
				3850	3881	3883	3889	3922	3945	3948	3953	3982	4002	4014	4241
				4255	4272	4283	4286	4304	4305	4331	4333	4381	4396	4507	4508
				4517	4599	4601	4644	4646	4820	4821	4825	4905	4911	4915	5198
				5272	5303	5315	5318	5381	5412	5446	5477	5479	5543	5544	5573
				5579	5683	5687	5689	5693	5786	5838	5938	5939	6096	6188	6214
				6216	6225	6251	6288	6390	6423	6425	6437	6446	6516	6584	6743
				6819	7078	7102	7828	7839	7842	7856	7858	8030	8129
	AC*#			706 #	2255	2256	2263	2457	2469	2577	2867	2876	3125	3146	3192
				3222	3263	4269	4281	4362	4364	4366	4374	4376	4383	4385	4397
				4398	4399	4400	4401	4402	4518	4603	4626	4630	4633	4647	4648
				4650	4653	4672	4674	4676	4677	4806	4807	4810	4811	4812	4815
				4816	4817	4823	4824	5682	5774	5828	5830	5836	5894	5902	5940
				5947	6093	6101	6111	6114	6145	6148	6162	6169	6175	6185	6212
				6223	6243	6258	6275	6291	6293	6319	6322	6324	6331	6332	6333
				6335	6341	6343	6346	6352	6354	6382	6384	6385	6389	6396	6397
				6398	6402	6403	6410	6412	6418	6424	6440	6451	6463	6472	6478
				6489	6492	6494	6498	6511	6517	6518	6643	6677	6682	6688	6725
				6727	6835	6836	6950	6957	6964	6984	6986	6993	7014	7036	7073
				7075	7081	7083	7087	7090	7095
	RAM			709 #	2265	2267	6554	6559	6564	6566
	VMA			708 #	2243	2353	2424	2439	2448	2452	2480	2491	2498	2511	2583
				2616	2622	2627	2630	2682	2882	3548	3695	3719	3734	3756	3760
				3764	3810	3849	3866	3872	3895	3912	3918	3931	3991	4019	4148
				4150	4155	4185	4198	4202	4224	4936	4965	4971	5095	5337	5360
				5363	6049	6068	6482	6681	6728	6731	6760	7044	7059	7132	7253
				7416	7418	7421	7469	7477	7553	7583	7585	7593	7649	7732	7737
				7748	7785	7790	7883	7916	7963	8009	8012	8014	8016	8026	8028
				8122	8136	8141	8161	8210	8227	8228	8230	8231	8234	8235	8237
				8238	8240	8241	8243	8244	8246	8247	8249	8250	8252	8351	8389
				8395	8436	8496	8634	8638
	XR#			707 #	2363	2374	2386	2401	2414	2430	3700	3702	3710	4944	4947
				4949	4957	6060	6062	6065	7039	7041	7045	7952	7953	7961
	#			710 #	2242	2250	2252	2253	2258	2259	3817	4887	5153	5167	5172
				5177	5181	5182	5187	5193	5220	5233	5241	5247	5253	5379	6059
				6072	6075	6106	6123	6131	6135	6152	6165	6180	6184	6201	6208
				6233	6249	6256	6261	6262	6269	6272	6286	6304	6308	6311	6315
				6426	6428	6469	6479	6484	6485	6487	6490	6503	6505	6509	6512
				6513	6534	6690	6691	6714	6716	6753	6758	6768	6833	6839	6867
				6871	6874	6879	6880	6888	6955	6962	6966	6968	7060	7077	7086
				7092	7100	7101	7104	7114	7198	7220	7232	7326	7331	7388	7390
				7392	7394	7408	7414	7417	7419	7441	7443	7445	7447	7470	7478
				7481	7485	7506	7508	7520	7522	7523	7529	7531	7560	7563	7573
				7574	7577	7594	7595	7599	7947	7950	7955	7967	7969	7981	7987
				7989	8134	8207	8209	8214	8218	8222	8232	8233	8251	8253	8254
				8256	8337	8340	8341	8343	8349	8358	8360	8362	8369	8372	8385
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 244
; CROSS REFERENCE LISTING

				8388	8390	8418	8420	8426	8428	8497	8525	8526	8527	8533	8548
				8558	8574
(D) READ			1407 #	2637	2638	2640	2642	2643	2645	2647	2648	2650	2652	2653
				2655	2675	2692	2693	2694	2695	2697	2698	2699	2700	2702	2703
				2705	2707	2708	2710	2712	2713	2715	2717	2718	2720	2722	2723
				2725	2727	2728	2730	2734	2735	2736	2737	2739	2740	2741	2742
				2744	2745	2747	2749	2750	2752	2755	2756	2758	2760	2761	2763
				2765	2766	2768	2770	2771	2773	2861	2862	2893	2894	2903	2904
				2905	2906	2913	2914	2915	2916	2923	2924	2925	2926	2928	2929
				2930	2931	2938	2945	2946	2947	2948	2956	2957	2958	2959	2966
				2967	2968	2969	2976	2977	2978	2979	2986	2987	2996	2997	2998
				2999	3007	3008	3009	3010	3018	3019	3020	3021	3028	3029	3030
				3031	3038	3039	3051	3052	3053	3055	3056	3057	3324	3325	3326
				3327	3328	3329	3340	3341	3342	3343	3344	3345	3346	3347	3359
				3360	3361	3362	3363	3364	3365	3366	3376	3377	3378	3379	3380
				3381	3382	3383	3500	3501	3502	3503	3504	3505	3506	3507	3518
				3519	3520	3521	3522	3523	3524	3525	3535	3536	3537	3538	3539
				3540	3541	3542	3551	3552	3553	3554	3555	3556	3557	3558	3619
				3634	3799	3841	3939	4234	4235	4236	4237	4248	4249	4250	4251
				4264	4265	4298	4299	4300	4301	4323	4324	4325	4326	4350	4494
				4495	4496	4497	4499	4500	4501	4502	4573	4879	4880	4881	4882
				4883	5389	5390	5391	5392	5393	5394	5395	5397	5398	5399	5400
				5401	5402	5403	5435	5436	5437	5439	5440	5441	5442	5465	5466
				5467	5469	5470	5471	5472	5516	5552	5553	5669	5670	5759	5821
				6045
(U) READ CYCLE			1192 #	2312	2313	2315	2316	2335	2376	2382	2387	2393	2416	2420
				2450	2491	2503	2506	2517	3123	3467	3479	3596	3597	3600	3601
				3670	3671	3672	3677	3681	3684	3698	3712	3715	3740	3763	3783
				3809	3880	3891	3925	4017	4180	4227	4405	4890	4900	4950	4954
				4958	4962	5306	5373	6065	6066	6091	6229	6481	6508	6582	6587
				6644	6769	6890	7039	7040	7041	7042	7120	7128	7252	7468	7476
				7479	7482	7551	7555	7592	7629	7733	7747	7780	7789	7798	7874
				7877	7918	7941	7962	8119	8154	8156	8435	8499	8640
(D) ROUND			1395 #	5392	5393	5394	5395	5400	5401	5402	5403	5439	5440	5441
				5442	5469	5470	5471	5472	5516	5553
(U) RSRC			636 #
	AB			638 #	3817	7947
	AQ			637 #
	D0			644 #	2853	6285	6400	7733	7780	7874	7877	7913	7924	7930	8003
				8156	8354	8356	8370
	DA			642 #	2237	2240	2273	2285	2322	2326	2329	2332	2341	2344	2347
				2350	2606	3145	3726	4130	4163	4214	4587	4598	5001	6016	6018
				6020	6022	6024	6026	6028	6030	6032	6717	6729	6756	6798	6946
				7180	7183	7242	7502	7567	7568	7569	7721	7722	7723	7724	7725
				7726	7727	7729	7762	7794	8407	8508	8547	8617	8618	8620	8621
				8623	8624	8626	8627
	DQ			643 #
	0A			641 #	2405	2855	3860	3980	3986	4199	4403	5686	5688	5789	5790
				5841	5843	6063	7113	7764	8636
	0B			640 #	2832	2834
	0Q			639 #	3775	3789	4141	4166	6052	6097	6289	7263	7266	7752
(U) S#				1036 #	2257	2464	2483	2483	2499	2499	2515	3068	3071	3075	3085
				3087	3104	3107	3110	3115	3127	3142	3144	3172	3190	3199	3202
				3246	3268	3271	4305	4333	4371	4391	4412	4528	4627	4635	4902
				4987	5010	5015	5017	5019	5022	5087	5088	5089	5090	5091	5092
				5100	5104	5106	5108	5142	5158	5170	5183	5199	5246	5261	5416
				5418	5451	5456	5458	5485	5486	5499	5500	5523	5527	5529	5530
				5534	5542	5558	5561	5563	5615	5619	5621	5624	5627	5635	5637
				5638	5639	5658	5663	5694	5705	5720	5722	5764	5775	5779	5782
				5792	5798	5804	5815	5854	5855	5865	5880	5887	5890	5900	5917
				5922	5924	5945	5970	5972	5978	6118	6119	6121	6278	6425	6594
				6596	6603	6654	6659	6661	6790	6792	6794	6795	6801	6811	6998
				7321	7339	7661	7700	7890	7922	7976	7992	8403
(U) SCAD			1013 #
	A			1021 #	2257	3127	4305	4333	4371	4391	4412	4528	4627	4635	4898
				4912	4992	4993	4994	4995	4996	5103	5142	5158	5170	5183	5199
				5246	5261	5451	5499	5523	5527	5529	5530	5534	5764	5775	5779
				5792	5798	5854	5855	6425	6594	6596	6603	6654	6790	6791	6801
				6995	7017	7037	7321	7339	7661	7700	7890	7922	7976	7992	8403
	A*2			1014 #	6782
	A+B			1018 #	2464	2483	2483	2499	2499	3071	3075	3085	3087	3107	3110
				3115	3142	3144	3190	3199	3268	5017	5022	5088	5089	5090	5091
				5092	5100	5108	5416	5418	5447	5456	5458	5500	5542	5544	5557
				5561	5615	5619	5621	5624	5627	5635	5637	5638	5639	5658	5663
				5694	5705	5720	5722	5787	5804	5815	5880	5887	5890	5900	5917
				5922	5924	5945	5970	5972	5978	6118	6119	6121	6655	6659	6793
				6794	6795	6811	7106
	A-1			1020 #	2267	3091	3093	3171	3173	3175	3179	3206	3213	3245	3247
				3249	3253	3270	3272	3275	3281	4438	4451	4457	4465	4475	4483
				4743	4746	4787	5145	5165	5267	5426	5428	5537	5562	5565	5568
				5572	5738	5741	5748	5767	6454	6599	6605	6808	7323	7341	7672
				7689	7897	7928	7983	7996	8406
	A-B			1017 #	3068	3104	3172	3202	3246	3271	4889	4895	4909	4931	4987
				5010	5015	5019	5087	5106	5479	5485	5486	5563	5839	5865	6172
				6182	6987	6990	7032	7034
	A-B-1			1016 #	5412	5417	5684	5704
	A.AND.B			1019 #	4902	5104	6278	6661	6792	6998
	A.OR.B			1015 #	2515	5782
(U) SCADA			1022 #
	BYTE1			1026 #	4889	4895	4898	4909	4992	5103	6172	6655	6791	6987	6995
				7032	7037	7106
	BYTE2			1027 #	4993
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 245
; CROSS REFERENCE LISTING

	BYTE3			1028 #	4994
	BYTE4			1029 #	4995
	BYTE5			1030 #	4913	4996	6783	7018
	PTR44			1025 #	4931	6182	6990	7034
	S#			1024 #	2257	2464	2483	2483	2499	2499	2515	3068	3071	3075	3085
				3087	3104	3107	3110	3115	3127	3142	3144	3172	3190	3199	3202
				3246	3268	3271	4305	4333	4371	4391	4412	4528	4627	4635	4902
				4987	5010	5015	5017	5019	5022	5087	5088	5089	5090	5091	5092
				5100	5104	5106	5108	5142	5158	5170	5183	5199	5246	5261	5416
				5418	5451	5456	5458	5485	5486	5499	5500	5523	5527	5529	5530
				5534	5542	5557	5561	5563	5615	5619	5621	5624	5627	5635	5637
				5638	5639	5658	5663	5694	5705	5720	5722	5764	5775	5779	5782
				5792	5798	5804	5815	5854	5855	5865	5880	5887	5890	5900	5917
				5922	5924	5945	5970	5972	5978	6118	6119	6121	6278	6425	6594
				6596	6603	6654	6659	6661	6790	6792	6794	6795	6801	6811	6998
				7321	7339	7661	7700	7890	7922	7976	7992	8403
	SC			1023 #	2267	3091	3093	3171	3173	3175	3179	3206	3213	3245	3247
				3249	3253	3270	3272	3275	3281	4438	4451	4457	4465	4475	4483
				4743	4746	4787	5145	5165	5267	5412	5417	5426	5428	5447	5479
				5537	5544	5562	5565	5568	5572	5684	5704	5738	5741	5748	5767
				5787	5839	6454	6599	6605	6793	6808	7323	7341	7672	7689	7897
				7928	7983	7996	8406
(U) SCADB			1031 #
	EXP			1033 #	2483	2483	2499	2499	5412	5416	5418	5447	5479	5544	5684
				5694	5705	5787	5839
	FE			1032 #	2515	3068	3071	3075	3085	3087	3104	3107	3110	3115	3142
				3144	3199	3202	4902	4987	5010	5015	5017	5022	5088	5089	5090
				5091	5092	5100	5104	5106	5108	5417	5456	5458	5485	5486	5500
				5558	5561	5563	5615	5619	5621	5624	5627	5635	5637	5638	5639
				5658	5663	5704	5720	5722	5782	5804	5815	5865	5880	5887	5890
				5900	5917	5922	5924	5945	5970	5972	5978	6119	6121	6278	6655
				6659	6661	6792	6793	6794	6795	6811	6998
	SHIFT			1034 #	2464	3172	3190	3246	3268	3271	5542
	SIZE			1035 #	4889	4895	4909	4931	5019	5087	6118	6172	6182	6987	6990
				7032	7034	7106
(U) SETFOV			1148 #	5481	5493	5852
(U) SETFPD			1154 #	4420	4946	6520
(U) SETNDV			1149 #	4530	4565	4597	4684	5203	5481	5493	5852
(U) SETOV			1146 #	4318	4319	4343	4406	4530	4565	4597	4684	5203	5481	5493
				5560	5852
(U) SHSTYLE			855 #
	ASHC			860 #	3093	3205	3208	3212	3215	4457	4465	4475	4483	4592	4596
				4666	4670	4686	5428	5534	5536	5567	5713	5715	5719	5721	5737
				5741	5748	5751	5753	5766	5807	5811	5847	5861	5880	5886	5889
				5900	5917	5921	5923	5945	5970
	DIV			862 #	4743	4746	4747	4791	4795	5615	5627	5635	5733	5735	5736
	LSHC			861 #	3175	3179	4776	4779
	NORM			856 #	2512	3087	4415	4450	4627	4785	5768	5859
	ONES			858 #	5021	5024	5099	5102	6121
	ROT			859 #	3110	3115	3275	3277	3281	3283
	ROTC			863 #	3249	3253	3274	3280
	ZERO			857 #
(U) SKIP			935 #
	AC0			943 #	2572	3530	4886
	ADEQ0			955 #	3120	3473	3485	3578	3590	4308	4313	4520	4522	4526	4540
				4586	4615	4646	4728	4808	4813	4818	4834	4841	5168	5197	5477
				5503	5505	5580	5623	5646	5805	5857	5898	5943	6266	6320	6396
				6399	6695	6732	6754	6881	7571
	ADLEQ0			939 #	2270	4167	4172	5521	5526	5641	5809	5812	5882	5885	5888
				5891	5949	6050	6094	6224	6226	6309	6329	6514	6530	6585	6620
				6623	6657	7136	7262	7328	7334	7750	7751	7944	7946	7960	8380
				8396	8462	8477	8479	8556
	ADREQ0			940 #	3191	3738	3754	5324	6455	6528	6895	7181	7184	7205	7207
				7210	7212	7214	7515	7609	7611	7615	7617	7619	7621	7623	7625
				7738	7791	7812	7885	7912	8437	8453	8454	8599	8608	8609	8611
				8612	8614	8615
	CRY0			938 #	3856	3900	3929	5489	5616	5618	5620	5622
	CRY1			951 #	4270	4282	5934	6344	6350	6363	6555	6566
	CRY2			946 #	5907	5967
	DP0			947 #	2484	2500	2662	2844	2851	3143	3217	3470	3482	3575	3587
				3947	3950	3955	4135	4289	4315	4337	4340	4396	4404	4509	4545
				4547	4552	4557	4561	4584	4601	4613	4620	4636	4655	4673	4726
				4733	4748	5200	5342	5366	5414	5418	5448	5479	5487	5522	5544
				5576	5685	5788	5836	5840	5851	5864	6102	6115	6133	6146	6153
				6171	6202	6204	6227	6244	6247	6253	6294	6386	6391	6429	6438
				6471	6488	6560	6611	6638	6837	6868	6911	6965	7088	7254	7504
				8409	8450
	DP18			948 #	2463	2830	2837	3267	6074	6314	6519	6609	6943	6944	7777
				8410	8412	8446
	EXECUTE			957 #	8148
	FPD			942 #	4358	4889	4895	4909	6419
	INT			944 #	5346	6173	8344	8384	8563	8573
	IOLGL			936 #	2521	3682	3685
	IOT			949 #
	JFCL			950 #	3745
	KERNEL			941 #	3675	3679	3680	3687	3804	3806	7115
	LE			945 #	3476	3488	3581	3593	4580	5228	5497	5827	6468	7527	8215
	LLE			937 #	7953
	SC			956 #	2267	3091	3093	3171	3173	3175	3179	3197	3206	3213	3245
				3247	3249	3253	3270	3272	3275	3281	4438	4451	4457	4465	4475
				4483	4743	4746	4787	5145	5165	5267	5426	5428	5537	5562	5565
				5568	5572	5687	5689	5738	5741	5748	5767	6454	6599	6605	6799
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 246
; CROSS REFERENCE LISTING

				6808	7323	7341	7672	7689	7897	7928	7996	8406
	TRAP CYCLE		953 #	8388	8548
	TXXX			952 #	3425
	-1 MS			960 #	5338	7575
	-CONTINUE		959 #	8150
	-IO BUSY		958 #	7978	7984	7993	8001
(U) SKIP HIGH			1361 #
(U) SKIP LOW			1362 #
(U) SPEC			819 #	2659	2665	2782	2784	2818	2824	2832	2834	2853	2855	2900
				2910	2920	2952	2963	2983	2993	3004	3014	3045	4310	4316	4339
				4341
	APR EN			833 #	2248	7219	7330
	APR FLAGS		831 #	7224	7228	7544
	ASHOV			840 #	3093	3212	3215
	CLR IO BUSY		823 #	7871	7909
	CLR IO LATCH		822 #	7956	7964	7968	7971	7980	7986	7995	8000
	CLRCLK			821 #	7576	8386
	CLRCSH			832 #	7667	7668	7671
	EXPTST			841 #	5624	5639	5972
	FLAGS			842 #	2300	2301	2668	3546	3562	3630	3645	3703	3704	3707	3708
				3744	3766	3767	3861	3873	3930	3961	3965	3981	3987	4187	4188
				4189	4242	4256	4274	4284	4287	4318	4319	4343	4394	4406	4417
				4420	4530	4565	4597	4684	4836	4838	4905	4922	4946	5203	5481
				5493	5560	5852	6520	6521	7137	7753	7768	8559
	INHCRY18		837 #	3654	3851	3899	3928	3949	3954	5236	5316
	LDACBLK			843 #	2245	7269
	LDINST			844 #	2354	3815	7133	8162
	LDPAGE			824 #	7655	8507	8516
	LDPI			839 #	3755	7640	7731	8216
	LDPXCT			826 #	3809
	LOADIR			838 #	6055
	LOADXR			829 #	2426	3696	3720	3735	4898	4917	4967	6056	6068	6994	7033
				7035	7044	7959
	MEMCLR			834 #	2243	3756	7732	8016	8136	8210	8389	8395
	NICOND			825 #	2312	2313	2315	2316	2377	2383	2611	3146	3194	3222	3467
				3479	3572	3596	3597	3600	3601	3670	3671	3698	3740	3882	3960
				3967	4405	4675	4678	4890	5573	5579	5941	7629	7918
	PREV			828 #	8120	8128
	PXCT OFF		836 #	2324	2327	2330	2342	2345	2348	2362
	SWEEP			835 #	7684	7685	7688
	WAIT			827 #	2497
	#			820 #	8144	8147	8211
(U) SPEC HIGH			1355 #
(U) SPEC LOW			1356 #
(U) STATE			1039 #
	BLT			1041 #	5317
	COMP-DST		1050 #	6252
	CVTDB			1049 #	6300
	DST			1046 #	6213
	DSTF			1048 #	6163
	EDIT-DST		1052 #	6271	6483	6510	6735	6762	8579	8583
	EDIT-S+D		1053 #	6701
	EDIT-SRC		1051 #	6245	6636	6697	8577	8585	8587	8591
	SIMPLE			1040 #
	SRC			1045 #	6110	6140	6199	8581
	SRC+DST			1047 #	6137	6205
(U) SWITCH%
	CIRC			5	423	3058	3060	3260	3286	4093	4095	4116	4119
	FULL			420	1337	1339	2254	2274	2280	2284	4353	4422	4425	4576	4687
				4690	4760	4826	5120	5274	5278	7324	7332
	ITS			7	425	1042	1044	1060	1062	1070	1075	1080	1118	1121	1136
				1139	1305	1307	1309	3795	3798	3802	3819	3834	4075	4078	4101
				4106	7163	7166	7250	7272	7318	7347	7361	7376	7385	7395	7405
				7410	7412	7434	7437	7448	7465	7472	7474	7496	7514	7532	7540
				7657	7662	7665	7674	7676	7678	7692	7694	7698	8263	8643	8650
				9446
	JPC			9	428	1095	1098	7420	7422	7428	7484	7486	7494
	SIM			417	2293	2298	2305
	TEST			13	432
	1PROC			11	430
(U) T				974 #
	2T			977 #	4601	4614	5418	5694	6262	6333	6397	6692	6833	6879	7577
				7954
	3T			978 #	2270	2500	2510	2668	3216	3425	3511	3546	3562	3654	3746
				3855	3891	3899	3924	3928	3946	3951	3956	3994	4008	4242	4256
				4362	4364	4383	4418	4558	4562	4613	4619	4620	4621	4639	4643
				4664	4672	4754	4821	4838	4898	4913	4987	5005	5103	5148	5155
				5237	5254	5258	5321	5323	5341	5365	5412	5447	5489	5521	5522
				5525	5558	5561	5616	5618	5620	5622	5682	5683	5686	5688	5788
				5789	5790	5835	5839	5841	5843	5851	5933	5939	6101	6119	6121
				6170	6174	6227	6335	6349	6363	6395	6398	6484	6487	6519	6520
				6548	6554	6557	6566	6592	6606	6634	6655	6656	6783	6791	6836
				6897	6988	6995	7017	7032	7036	7039	7041	7078	7135	7254	7328
				7334	7712	7737	7741	7749	7750	7751	7786	7790	7792	7961	8503
				8506	8513	8529	8567
	4T			979 #	3119	3630	3645	4269	4274	4281	4284	4286	5196	5201	6115
				6146	6314	6319	6344	6385	6559	6608	6754	6881	7087	8215	8347
	5T			980 #	7983	8000
(D) TEST			1408 #	2639	2639	2640	2640	2644	2644	2645	2645	2649	2649	2650
				2650	2654	2654	2655	2655	2675	2694	2694	2695	2695	2699	2699
				2700	2700	2704	2704	2705	2705	2709	2709	2710	2710	2714	2714
				2715	2715	2719	2719	2720	2720	2724	2724	2725	2725	2729	2729
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 247
; CROSS REFERENCE LISTING

				2730	2730	2736	2736	2737	2737	2741	2741	2742	2742	2746	2746
				2747	2747	2751	2751	2752	2752	2757	2757	2758	2758	2762	2762
				2763	2763	2767	2767	2768	2768	2772	2772	2773	2773	2871	2895
				2895	2896	2896	2905	2905	2906	2906	2915	2915	2916	2916	2925
				2925	2926	2926	2930	2930	2931	2931	2940	2940	2941	2941	2947
				2947	2948	2948	2958	2958	2959	2959	2968	2968	2969	2969	2978
				2978	2979	2979	2988	2988	2989	2989	2998	2998	2999	2999	3009
				3009	3010	3010	3020	3020	3021	3021	3030	3030	3031	3031	3040
				3040	3041	3041	3535	3536	3537	3538	3539	3540	3541	3542	3551
				3552	3553	3554	3555	3556	3557	3558	4236	4236	4237	4237	4250
				4250	4251	4251	4300	4300	4301	4301	4325	4325	4326	4326	4496
				4496	4497	4497	4501	4501	4502	4502	4880	4882	5390	5390	5391
				5391	5394	5394	5395	5395	5398	5398	5399	5399	5402	5402	5403
				5403	5436	5436	5437	5437	5441	5441	5442	5442	5466	5466	5467
				5467	5471	5471	5472	5472	7382
(U) TRAP1			1163 #	4318	4319	4343	4406	4530	4565	4597	4684	5203	5481	5493
				5560	5852
(U) TRAP2			1162 #	3873	3930	3961	3965
(U) UNCORRECTABLE MEMOR		8293 #
(U) VECTOR CYCLE		1235 #	7781
(D) VMA				1410 #	2638	2643	2648	2653	2693	2698	2703	2708	2713	2718	2723
				2728	2735	2740	2745	2750	2756	2761	2766	2771	2893	2894	2904
				2914	2924	2929	2946	2957	2967	2977	2986	2987	2997	3008	3019
				3029	3038	3039	3051	3052	3053	3055	3056	3057	3619	3634	3661
				3939	4235	4249	4299	4324	4495	4500
(U) WAIT			1224 #	2312	2312	2313	2313	2315	2315	2316	2316	2335	2335	2352
				2376	2376	2382	2382	2387	2393	2406	2416	2420	2424	2438	2447
				2450	2451	2479	2490	2491	2491	2503	2506	2510	2517	2517	2582
				2615	2621	2626	2629	2680	2680	2681	2880	2880	2882	2886	2886
				3123	3123	3467	3467	3479	3479	3547	3547	3548	3596	3596	3597
				3597	3600	3600	3601	3601	3670	3670	3671	3671	3672	3677	3681
				3684	3694	3698	3698	3712	3715	3718	3733	3740	3740	3760	3763
				3764	3777	3777	3780	3780	3783	3788	3788	3809	3810	3848	3853
				3853	3865	3871	3880	3880	3891	3894	3904	3904	3909	3909	3911
				3917	3925	3931	3989	3989	3990	4000	4000	4017	4018	4138	4146
				4147	4149	4154	4159	4159	4180	4184	4197	4201	4209	4209	4219
				4219	4223	4227	4405	4405	4890	4890	4900	4900	4929	4929	4935
				4935	4936	4950	4954	4958	4962	4964	4970	5094	5094	5095	5306
				5327	5327	5334	5334	5336	5350	5350	5355	5355	5359	5362	5373
				6049	6065	6066	6068	6091	6229	6481	6482	6508	6582	6587	6644
				6679	6679	6681	6726	6726	6728	6731	6760	6769	6890	7039	7040
				7041	7042	7044	7058	7117	7120	7125	7128	7132	7252	7253	7415
				7415	7416	7418	7421	7432	7432	7468	7469	7476	7477	7479	7482
				7551	7552	7555	7580	7580	7583	7584	7584	7585	7592	7593	7629
				7629	7648	7648	7649	7736	7747	7748	7763	7763	7784	7789	7790
				7798	7880	7882	7915	7916	7918	7918	7941	7962	7963	8009	8012
				8014	8024	8026	8028	8119	8121	8127	8127	8139	8141	8142	8142
				8154	8154	8160	8226	8227	8228	8229	8229	8230	8231	8234	8235
				8236	8236	8237	8238	8239	8239	8240	8241	8242	8242	8243	8244
				8245	8245	8246	8247	8248	8248	8249	8250	8252	8435	8436	8493
				8493	8495	8530	8632	8633	8635	8635	8637	8640
(U) WORK			1058 #
	AC0			1124 #
	AC1			1125 #
	AC2			1126 #
	AC3			1127 #
	ADJBPW			1086 #	5220	5241
	ADJP			1081 #	5153	5181
	ADJPTR			1083 #	4887	5172	5235
	ADJQ1			1084 #	5177	5195
	ADJR2			1085 #	5187	5256
	ADJS			1082 #	5167	5182	5247
	APR			1088 #	2250	7198	7220	7232	7326	7331
	BADW0			1059 #	8369
	BDH			1109 #	6428	6503	6512	6534
	BDL			1110 #	6426	6469	6509	6513
	CMS			1106 #	6249	6261	6262	6272
	DBR1			1071 #	7388	7414	7441	7478	8418
	DBR2			1072 #	7390	7417	7443	7481	8420
	DBR3			1073 #	7392	7445	8428
	DBR4			1074 #	7394	7447	8426
	DDIV SGN		1128 #
	DECHI			1133 #	2259	2261	6557
	DECLO			1132 #	2258	2260	6548
	DIV			1064 #
	DVSOR H			1129 #
	DVSOR L			1130 #
	E0			1101 #	6059	6479	6758	6768
	E1			1102 #	6072	6075	6505	6690	6691	6871	6874	6879	6888
	FILL			1105 #	6233	6256	6269	6753	6833	6839	6955	7060
	FSIG			1107 #	6714	6716
	HSBADR			1087 #	2242	7408	7470	8209	8214
	MSK			1104 #	6123	6286	6880
	MUL			1063 #
	PERIOD			1116 #	7531	7594	7599
	QUAN			1119 #	7419	7485	7522	7523
	SLEN			1103 #	6106	6131	6135	6152	6165	6180	6184	6201	6208	6304	6308
				6311	6315	6484	6485	6487	6490	6867	6962	6966	6968	7086	7100
				7104
	SV.ARX			1067 #	8134	8207	8218	8233	8256	8340	8525	8574
	SV.AR			1066 #	8232	8253	8337	8533
	SV.AR1			1141 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 248
; CROSS REFERENCE LISTING

	SV.BRX			1069 #	5379	7077	7092	7101	8341	8527
	SV.BR			1068 #	8349	8358	8360	8362	8372	8526
	SV.VMA			1065 #	7981	7987	7989	8222	8251	8254	8343	8388	8390	8497	8548
	TIME0			1114 #	2252	7508	7563	7573
	TIME1			1115 #	2253	7506	7560	7574	7577	8385
	TRAPPC			1140 #	7114	8558
	TTG			1117 #	7520	7529	7595
	YSAVE			1135 #	3817	7947	7950	7955	7967	7969
(D) WRITE			1411 #
(U) WRITE CYCLE			1194 #	2659	2665	2680	2782	2784	2818	2824	2832	2834	2853	2855
				2880	2886	2900	2910	2920	2952	2963	2983	2993	3004	3014	3045
				3547	3777	3780	3788	3853	3904	3909	3989	4000	4138	4146	4159
				4209	4219	4242	4256	4310	4316	4339	4341	4929	4935	5094	5327
				5334	5350	5355	5577	5581	5628	5649	6679	6726	7415	7432	7580
				7584	7648	7763	7913	7924	7930	8127	8139	8142	8226	8229	8236
				8239	8242	8245	8248	8398	8400	8478	8493	8499	8632	8635
(U) WRITE TEST			1193 #	2659	2665	2680	2782	2784	2818	2824	2832	2834	2853	2855
				2880	2886	2900	2910	2920	2952	2963	2983	2993	3004	3014	3045
				3547	3777	3780	3788	3853	3904	3909	3989	4000	4138	4146	4159
				4209	4219	4242	4256	4310	4316	4339	4341	4929	4935	5094	5327
				5334	5350	5355	5577	5581	5628	5649	6679	6726	7415	7432	7580
				7584	7648	7733	7747	7763	7780	7789	7874	7877	7913	7924	7930
				8127	8139	8142	8156	8226	8229	8236	8239	8242	8245	8248	8396
				8493	8500	8632	8635	8640
(U) WRU CYCLE			1231 #	7734
(U) #				1010 #	2231	2233	2235	2237	2240	2270	2285	2322	2326	2329	2341
				2344	2347	2507	2509	2522	2544	2545	2839	2841	2846	2848	2866
				3145	3218	3220	3674	3683	3686	3688	3689	3690	3724	3729	3732
				3738	3753	3754	3774	3787	3808	3898	3927	3992	4007	4099	4109
				4111	4113	4115	4127	4130	4163	4168	4170	4173	4175	4206	4214
				4221	4290	4291	4549	4587	4588	4598	4606	4652	4706	4732	4739
				4832	5002	5149	5151	5156	5175	5179	5185	5189	5219	5224	5259
				5263	5270	5320	5419	5420	5423	5424	5449	5450	5454	5483	5484
				5521	5525	5545	5546	5686	5688	5769	5789	5790	5809	5812	5841
				5843	6016	6018	6020	6022	6024	6026	6028	6030	6032	6050	6053
				6077	6094	6098	6224	6226	6285	6290	6297	6302	6309	6313	6329
				6371	6387	6388	6394	6400	6421	6434	6436	6443	6448	6455	6458
				6514	6528	6530	6537	6562	6568	6585	6597	6600	6608	6620	6623
				6641	6657	6718	6729	6738	6740	6757	6777	6799	6804	6813	6816
				6895	6917	6921	6925	6929	6933	6937	6947	6953	7054	7065	7135
				7140	7150	7151	7152	7156	7157	7158	7159	7167	7168	7171	7172
				7173	7174	7175	7176	7177	7178	7180	7183	7200	7201	7204	7205
				7207	7210	7212	7214	7226	7236	7239	7243	7256	7260	7262	7264
				7267	7327	7328	7329	7334	7335	7336	7342	7351	7357	7502	7542
				7558	7612	7613	7660	7666	7681	7683	7714	7715	7716	7717	7718
				7719	7720	7721	7722	7723	7724	7725	7726	7727	7730	7741	7750
				7751	7766	7786	7793	7885	7893	7899	7912	7944	7946	7960	8003
				8093	8095	8097	8099	8101	8103	8105	8107	8144	8147	8158	8211
				8332	8354	8356	8370	8408	8437	8453	8454	8502	8512	8515	8617
				8618	8620	8621	8623	8624	8626	8627
(U) # HIGH			1364 #
(U) # LOW			1365 #
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 249
; LOCATION / LINE NUMBER INDEX
; DCODE LOC'N	0	1	2	3	4	5	6	7

D 0000		4083	5987	5988	5989	5990	5991	5992	5993
D 0010		5995	5996	5997	5998	6000	6001	6002	6003
D 0020		6005	6006	6007	6008	6009	6010	6011	6012
D 0030		4027	4028	4029	4030	4031	4032	4033	4034
D 0040		4038	4039	4040	4041	4042	4043	4044	4045
D 0050		4046	4047	4048	4049	4050	4051	4052	4053
D 0060		4054	4055	4056	4057	4058	4059	4060	4061
D 0070		4062	4063	4064	4065	4066	4067	4068	4069

D 0100		4073	4074	3796	3797	4084	3939	4085	4086
D 0110		5669	5670	5759	5821	4264	4265	4350	4573
D 0120		2861	2862	5552	6045	2870	2871	5553	5516
D 0130		4087	4088	5517	4879	4880	4881	4882	4883
D 0140		5389	4089	5390	5391	5392	5393	5394	5395
D 0150		5397	4090	5398	5399	5400	5401	5402	5403
D 0160		5435	4091	5436	5437	5439	5440	5441	5442
D 0170		5465	4092	5466	5467	5469	5470	5471	5472

D 0200		2637	2638	2639	2640	2642	2643	2644	2645
D 0210		2647	2648	2649	2650	2652	2653	2654	2655
D 0220		4298	4299	4300	4301	4323	4324	4325	4326
D 0230		4494	4495	4496	4497	4499	4500	4501	4502
D 0240		3051	3052	3053	3054	3055	3056	3057	3059
D 0250		2675	5299	3648	3649	3661	3663	3799	8328
D 0260		3840	3841	3842	3843	3973	3974	3975	3976
D 0270		4234	4235	4236	4237	4248	4249	4250	4251

D 0300		3491	3492	3493	3494	3495	3496	3497	3498
D 0310		3500	3501	3502	3503	3504	3505	3506	3507
D 0320		3605	3606	3607	3608	3609	3610	3611	3612
D 0330		3518	3519	3520	3521	3522	3523	3524	3525
D 0340		3619	3620	3621	3622	3623	3624	3625	3626
D 0350		3535	3536	3537	3538	3539	3540	3541	3542
D 0360		3634	3635	3636	3637	3638	3639	3640	3641
D 0370		3551	3552	3553	3554	3555	3556	3557	3558

D 0400		2893	2894	2895	2896	2903	2904	2905	2906
D 0410		2913	2914	2915	2916	2923	2924	2925	2926
D 0420		2928	2929	2930	2931	2938	2939	2940	2941
D 0430		2945	2946	2947	2948	2956	2957	2958	2959
D 0440		2966	2967	2968	2969	2976	2977	2978	2979
D 0450		2986	2987	2988	2989	2996	2997	2998	2999
D 0460		3007	3008	3009	3010	3018	3019	3020	3021
D 0470		3028	3029	3030	3031	3038	3039	3040	3041

D 0500		2692	2693	2694	2695	2697	2698	2699	2700
D 0510		2702	2703	2704	2705	2707	2708	2709	2710
D 0520		2712	2713	2714	2715	2717	2718	2719	2720
D 0530		2722	2723	2724	2725	2727	2728	2729	2730
D 0540		2734	2735	2736	2737	2739	2740	2741	2742
D 0550		2744	2745	2746	2747	2749	2750	2751	2752
D 0560		2755	2756	2757	2758	2760	2761	2762	2763
D 0570		2765	2766	2767	2768	2770	2771	2772	2773

D 0600		3313	3314	3315	3316	3317	3318	3319	3320
D 0610		3322	3323	3324	3325	3326	3327	3328	3329
D 0620		3331	3332	3333	3334	3335	3336	3337	3338
D 0630		3340	3341	3342	3343	3344	3345	3346	3347
D 0640		3350	3351	3352	3353	3354	3355	3356	3357
D 0650		3359	3360	3361	3362	3363	3364	3365	3366
D 0660		3367	3368	3369	3370	3371	3372	3373	3374
D 0670		3376	3377	3378	3379	3380	3381	3382	3383

D 0700		7146	7147	7382	8036	8113	8114	8037	8038
D 0710		7820	7821	7831	7832	7845	7846	8040	8041
D 0720		7822	7823	7833	7834	7847	7848	8043	8044
D 0730		8046	8047	8048	8049	8050	8051	8052	8053
D 0740		8055	8056	8057	8058	8059	8060	8061	8062
D 0750		8064	8065	8066	8067	8068	8069	8070	8071
D 0760		8073	8074	8075	8076	8077	8078	8079	8080
D 0770		8082	8083	8084	8085	8086	8087	8088	8089
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 250
; LOCATION / LINE NUMBER INDEX
; UCODE LOC'N	0	1	2	3	4	5	6	7

U 0000		2231:	8207:	2232 	2240:	8147:	8150:	2269=	2270=
U 0010		2263=	8209:	2265=	2233 	2315=	2316=	2482=	2486=
U 0020		2273=	2277=	2501=	2504=	2522=	2523=	2544=	2545=
U 0030		2234 	2285=	2626=	2629=	3093=	3097=	3122=	3125=
U 0040		2438:	2443:	2447:	2456:	2462:	2469:	2475:	2479:
U 0050		2490:	2497:	2521:	2235 	3141=	3144=	3175=	3176=
U 0060		2237 	2322=	2326=	2329=	3694=	2332=	3698=	2334=
U 0070		2242 	2341=	2344=	2347=	4147=	2350=	4149=	2352=

U 0100		4306=	2374=	4334=	2380=	4308=	2386=	4336=	2392=
U 0110		3702=	2401=	3706=	2405=	3710=	2414=	3714=	2419=
U 0120		3179=	3180=	3192=	3194=	3198=	3201=	3204=	3207=
U 0130		3211=	3214=	3218=	3220=	3249=	3250=	2243 	7191:
U 0140		3253=	3254=	3270=	3271=	3277=	3278=	3283=	3284=
U 0150		3531=	3532=	3596=	3597=	3425=	3428=	3431=	3434=
U 0160		3600=	3601=	3724=	3725=	3729=	3730=	3774=	3775=
U 0170		3467=	3470=	3473=	3476=	3479=	3482=	3485=	3488=

U 0200		3777=	2245 	3787=	3788=	3779=	3782=	3808=	3809=
U 0210		3572=	3575=	3578=	3581=	3584=	3587=	3590=	3593=
U 0220		3732=	3733=	4371=	3738=	3865=	3871=	4373=	3739=
U 0230		3878=	3881=	3883=	2248 	3902=	3907=	2250 	3740=
U 0240		3753=	3754=	3930=	3931=	2252 	3755=	3948=	3953=
U 0250		3960=	3961=	3965=	3967=	2253 	3756=	4132=	4134=
U 0260		4002=	2255 	4136=	4140=	4004=	4007=	4141=	4144=
U 0270		4151=	2256 	4154=	4159=	4169=	4172=	2257 	4163=

U 0300		4174=	4177=	4272=	4276=	4197=	2258 	4199=	4201=
U 0310		4283=	4286=	4290=	4291=	4309=	4310=	4314=	4316=
U 0320		4318=	4319=	4338=	4340=	4341=	4342 	4397=	4398=
U 0330		4362=	4364=	4381=	4383=	4366=	4627=	4385=	4628=
U 0340		4391=	4415=	4405=	4406=	4393=	4417=	4510=	4512=
U 0350		4537=	4539=	4456=	4460=	4556=	4560=	4464=	4468=
U 0360		4565=	4566=	4474=	4478=	4581=	4583=	4482=	4486=
U 0370		4521=	4525=	4585=	4587=	4528=	4530=	4531=	2259 

U 0400		4217:	2260 	4595=	4597=	4546=	4549=	2261 	4551=
U 0410		4611=	4613=	4614=	4616=	4603=	4605=	4619=	4620=
U 0420		4621=	4622=	4631=	4632=	4634=	4901=	4638=	4905=
U 0430		4647=	4648=	4657=	4658=	2262 	4607=	4640=	4642=
U 0440		4674=	4676=	4727=	4728=	4729=	4730=	4735=	4737=
U 0450		4746=	4747=	4750=	4751=	5174=	4666=	5177=	4668=
U 0460		4775=	4778=	4788=	4795=	4810=	4811=	4815=	4816=
U 0470		4820=	4821=	5248=	4683=	4835=	4837=	5250=	4684=

U 0500		4842=	4843=	5144=	5147=	4916=	4919=	2266 	4922=
U 0510		4705=	2267 	5164=	5167=	4709=	4710=	4711=	4712=
U 0520		4887=	4889=	5169=	5172=	5184=	4890=	5187=	2299 
U 0530		4929=	4930=	4931=	4932=	5010=	5414=	5012=	5415=
U 0540		4987=	4992=	4993=	5733=	4994=	4995=	2302 	4996=
U 0550		4949=	5775=	4953=	5452=	4957=	5779=	4961=	5454=
U 0560		5087=	5088=	5089=	5735=	5090=	5091=	2360 	5092=
U 0570		5198=	5203=	5230=	5239=	5218=	5220=	2424=	5223=

U 0600		5266=	5269=	5305=	5309=	5318=	5320=	5326=	5333=
U 0610		5339=	5340=	5343=	5345=	5347=	5352=	5367=	5369=
U 0620		5419=	5420=	5423=	5424=	5428=	5429=	5449=	5450=
U 0630		5479=	5481=	5483=	5484=	5489=	5490=	5492=	5493=
U 0640		5495=	5497=	5522=	5523=	5499=	5500=	5525=	5527=
U 0650		5529=	5530=	5536=	5538=	5502=	5503=	5505=	5507=
U 0660		5545=	5546=	5567=	5569 	5560=	5562=	5561=	5563=
U 0670		5572=	5573=	5579=	5580 	5581=	5582=	2428=	5508=

U 0700		5627=	5628=	5657=	5576=	5631=	5633=	5658=	5641=
U 0710		5645=	5646=	5662=	5577=	5647=	5648=	5663=	5642=
U 0720		5615=	5616=	5617=	5618=	5619=	5620=	5621=	5622=
U 0730		5623=	2449 	5686=	5688=	5691=	5693=	5624=	2451 
U 0740		5635=	5780=	5636=	2457 	5637=	5781=	5638=	5660=
U 0750		5698=	5699=	5706=	5707=	5748=	5749=	5639=	5661=
U 0760		5766=	5768=	5789=	5790=	5810=	5811 	5813=	5814=
U 0770		5792=	5798=	5966=	5717=	5793=	5803=	5969=	5718=

U 1000		5830=	5832=	2470 	5805=	5841=	5842=	5849=	5851=
U 1010		5852=	5853=	5740=	5742=	5869=	5870=	5744=	5745=
U 1020		5854=	2471 	5855=	5807=	5899=	5902=	5826=	5827=
U 1030		5856=	2507 	5859=	5751=	5906=	5907=	2509 	5752=
U 1040		5910=	5912=	5938=	5939=	5929=	2510 	5931=	5933=
U 1050		5944=	5947=	6050=	5864=	5956=	5957=	6052=	5867=
U 1060		5879=	5882=	5883=	5885=	5886=	5888=	5889=	5891=
U 1070		5892=	6062=	2513 	6063=	2514 	6065=	5894=	6066=

U 1100		5916=	6094=	5919=	6224=	5921=	6096=	5923=	6225=
U 1110		5925=	2517 	6075=	6077=	6097=	6101 	5927=	2681 
U 1120		6103=	6105=	5972=	5973=	2816 	6121=	5977=	6122=
U 1130		6148=	6149=	6154=	6155=	6172=	6175=	6072=	6074 
U 1140		6131=	6133=	6186=	6188=	6135=	6137=	2822 	6140=
U 1150		6162=	6163=	2882 	6165=	6110=	6111=	6112=	6114=
U 1160		6179=	6180=	6182=	6184=	6212=	6213=	2883 	6214=
U 1170		6201=	6203=	6205=	6226=	6228=	6229 	6208=	6227=

U 1200		6230=	6233=	6241=	6243=	6245=	6247=	6249=	3004 
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 251
; LOCATION / LINE NUMBER INDEX
; UCODE LOC'N	0	1	2	3	4	5	6	7

U 1210		6255=	6256=	6258=	3074 	6269=	6270=	6275=	6277=
U 1220		6291=	6426=	6293=	6428=	6294=	6296=	6315=	6319=
U 1230		6308=	6309=	6330=	6331=	6311=	6313 	6300=	6301=
U 1240		6322=	6324=	6326=	3086 	6333=	6335=	6370=	6371=
U 1250		6341=	6343=	6382=	6384=	3090 	6346=	6387=	6388=
U 1260		6348=	6349=	6390=	6392=	3108 	6352=	6397=	6398=
U 1270		6359=	6360=	6362=	6585=	6400=	6402=	6365=	6587=

U 1300		6410=	6411=	6420=	6423=	6431=	6433 	6440=	6441=
U 1310		6436=	6552=	6437=	6554=	6446=	6447=	6457=	6460=
U 1320		6688=	6451=	6690=	6453=	6463=	6465=	3109 	6455=
U 1330		6469=	6471=	6472=	6477=	6515=	6516=	6507=	6509=
U 1340		6489=	6490=	6520=	6521=	6525=	6528=	3111 	6492=
U 1350		3113 	6510=	6501=	3114 	6529=	6530=	6503=	6511=
U 1360		6531=	6532=	6548=	6550=	6556=	6557 	6562=	6564=
U 1370		6568=	6570=	6590=	6592=	6594=	6595=	6596=	6597=

U 1400		2312:	2313:	2659:	2662:	2665:	2667:	2679:	2782:
U 1410		2784:	2810:	2812:	2815:	2818:	2821:	2824:	2830:
U 1420		2832:	2834:	2837:	2844:	2839:	2841:	2846:	2848:
U 1430		2851:	3546:	2853:	2855:	2866:	3127 	2867:	3562:
U 1440		3616:	2900:	2910:	2920:	2935:	2952:	2963:	2973:
U 1450		2983:	2993:	3003:	3014:	3025:	3035:	3045:	4269:
U 1460		7838:	7842:	3119:	7839:	3171:	3172:	3189:	6049:
U 1470		3245:	3246:	3409:	3411:	3414:	3416:	3511:	3529:

U 1500		6599=	6600=	6605=	6606=	2572:	2577:	2582:	3145 
U 1510		6633=	6634=	6659=	6660=	2606:	2610:	2615:	2621:
U 1520		3670:	3671:	3672:	3674:	3675:	3677:	3679:	3680:
U 1530		3681:	3683:	3684:	3686:	3687:	3688:	3689:	3690:
U 1540		3744:	3813:	3645:	3848:	3860:	3889:	3922:	3653:
U 1550		3980:	3943:	3986:	8332:	3999:	4014:	4126:	4214:
U 1560		4241:	4255:	6677=	6679=	3146 	2876:	4355:	2878:
U 1570		5446:	4331:	6709=	6710=	5477:	3173 	5409:	5412:

U 1600		4507:	4516:	6729=	6731=	6753=	6756=	6669=	6670=
U 1610		4886:	3630:	3067:	3070:	7827:	4281:	5521:	7828:
U 1620		4895:	5542:	3083:	3084:	4897:	4900:	5557:	4578:
U 1630		4909:	5764:	3103:	3106:	4911:	5679:	5824:	5682:
U 1640		5303:	4304:	6758=	6760=	7852:	3181 	3182 	7854:
U 1650		8093:	8095:	8097:	8099:	8101:	8103:	8105:	8107:
U 1660		4115:	4099:	3804:	3806:	4109:	3263:	4111:	4113:
U 1670		6635=	6636=	6638=	6640=	6643=	6644=	6714=	6716=

U 1700		7188:	7150:	7151:	7152:	7198:	7232:	7153:	7154:
U 1710		7156:	7157:	7158:	7159:	7609:	7606:	7160:	7161:
U 1720		7660:	7349:	7654:	7252:	7321:	7339:	7167:	7168:
U 1730		7171:	7172:	7173:	7174:	7175:	7176:	7177:	7178:
U 1740		6016:	6018:	6020:	6022:	6024:	3195 	6026:	6028:
U 1750		6030:	6032:	6777=	6780=	8118:	8126:	6801=	6804=
U 1760		7388:	7390:	7392:	7394:	7567:	7599:	7408:	7414:
U 1770		7441:	7443:	7445:	7447:	7551:	7592:	7468:	7476:

U 2000		3216 	6608=	6833=	6611=	3222 	6614=	6835=	6616=
U 2010		7019=	6618=	7021=	6620=	7033=	6623=	7034=	6626=
U 2020		6691=	3247 	6694=	6697=	6699=	6701=	3264 	6704=
U 2030		6734=	6738=	6808=	6809=	6838=	6839=	6740=	3265 
U 2040		6762=	6764=	6891=	6895=	6897=	6900=	6765=	3266 
U 2050		6867=	6870=	6871=	3272 	6943=	6946=	6873=	6874=
U 2060		7509=	6911=	7511=	6914=	8210=	6916=	8211=	6920=
U 2070		7039=	6924=	7040=	6928=	7041=	6932=	7042=	6936=

U 2100		6966=	6968=	6984=	6986=	8227=	6989=	8228=	6990=
U 2110		6994=	6996=	7014=	7016=	6950=	6952=	6955=	6957=
U 2120		7073=	7075=	7081=	7083=	7090=	7091=	7092=	7094=
U 2130		7116=	7124=	3274 	6961=	7137=	7140=	3275 	6962=
U 2140		7206=	7207=	7208=	7209=	7211=	7212=	7213=	7214=
U 2150		7215=	7217=	7255=	7259=	7263=	7266=	7323=	7326=
U 2160		7329=	7330=	7335=	7336=	7341=	7342=	7417=	7418=
U 2170		7419=	7421=	7479=	7481=	7482=	7485=	7506=	7508=

U 2200		7520=	7522=	7529=	7531=	7554=	7557=	3280 	7560=
U 2210		7572=	7573=	7610=	7611=	7576=	7579=	7581=	3281 
U 2220		7612=	7613=	7616=	7617=	7618=	7619=	7620=	7621=
U 2230		7622=	7623=	7624=	7625=	7670=	7677=	7681=	7683=
U 2240		7626=	7627=	7687=	7693=	7733=	7736=	7739=	7740=
U 2250		3439 	7629=	7751=	7752=	7762=	7763=	7778=	7780=
U 2260		7764=	3440 	7782=	7784=	7766=	7768=	7786=	7788=
U 2270		7711=	7714=	7715=	7716=	7717=	7718=	7719=	7720=

U 2300		7792=	7794=	7809=	7810=	7813=	7814=	7871=	7873=
U 2310		7880=	7882=	3547 	7856=	7890=	7892=	3548 	7858=
U 2320		7896=	7898=	7909=	7911=	7916=	7918=	3700 	7874=
U 2330		7922=	7924=	7928=	7930=	7940=	7943=	3718 	7877=
U 2340		7946=	7947=	7950=	7952=	7961=	7962=	3726 	7885=
U 2350		7967=	7969=	7995=	7997=	8000=	8003=	3760 	7886=
U 2360		7980=	7983=	7986=	7989=	8134=	3761 	3764 	7912=
U 2370		8142=	8144=	8153=	8156=	8136=	3766 	8139=	7913=

U 2400		8157=	8160=	8216=	8218=	8230=	8232=	8231=	8233=
U 2410		8234=	8237=	8235=	8238=	8240=	7953=	8241=	7955=
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 252
; LOCATION / LINE NUMBER INDEX
; UCODE LOC'N	0	1	2	3	4	5	6	7

U 2420		8243=	8246=	8244=	8247=	8249=	8251=	8250=	8252=
U 2430		8373=	8375=	8397=	8399=	8385=	8388=	8389=	3768 
U 2440		8346=	8349=	3789 	8351=	3810 	8354=	3817 	8356=
U 2450		8358=	3850 	8360=	8362=	8405=	8407=	8410=	8412=
U 2460		8418=	8420=	8426=	8428=	8438=	8440=	8453=	8454=
U 2470		8458=	8462=	8466=	8470=	8479=	8480=	8547=	8548=

U 2500		8556=	8558=	8563=	8565=	8599=	8603=	8608=	8609=
U 2510		8611=	8612=	8614=	8615=	8617=	8618=	8620=	8621=
U 2520		8573=	8574=	3873 	8577=	8579=	8581=	8583=	8585=
U 2530		8587=	8589=	8590=	8591=	8623=	8624=	8626=	8627=
U 2540		3894 	3897 	3911 	3917 	3926 	3945 	3981 	3988 
U 2550		3990 	3992 	4001 	4015 	4016 	4018 	4130 	4165 
U 2560		4166 	4167 	4184 	4186 	4205 	4209 	4220 	4223 
U 2570		4225 	4277 	4289 	4305 	4312 	4332 	4333 	4337=

U 2600		4356 	4357 	4374=	4376=	4387 	4396 	4399 	4400 
U 2610		4401 	4402 	4403 	4411 	4412 	4413 	4420=	4436 
U 2620		4437 	4450 	4508 	4517 	4518 	4519 	4543 	4544 
U 2630		4579 	4588 	4590 	4591 	4598 	4599 	4601 	4626 
U 2640		4629=	4630 	4633 	4639 	4643 	4646 	4650 	4652 
U 2650		4653 	4655 	4659 	4661 	4662 	4664 	4669=	4672 
U 2660		4677 	4686=	4726 	4732 	4733 	4738 	4740 	4741 
U 2670		4742 	4743 	4748 	4752 	4753 	4754 	4782 	4806 

U 2700		4807 	4812 	4817 	4823 	4824 	4825 	4832 	4833 
U 2710		4841 	4912 	4915 	4935 	4936 	4944 	4946 	4964 
U 2720		4970 	5001 	5014 	5016 	5019 	5020 	5021 	5024 
U 2730		5025 	5094 	5095 	5098 	5099 	5102 	5103 	5104 
U 2740		5105 	5107 	5112 	5113 	5114 	5115 	5141 	5150 
U 2750		5153 	5154 	5157 	5159 	5178 	5181 	5182 	5183 
U 2760		5188 	5190 	5227 	5241 	5245 	5247 	5257=	5260 
U 2770		5262 	5272 	5304 	5311 	5312 	5313 	5315 	5317 

U 3000		5323 	5336 	5359 	5362 	5364 	5370 	5378 	5379 
U 3010		5381 	5416=	5417=	5418 	5426 	5451 	5456=	5457=
U 3020		5485 	5486 	5487 	5510 	5534 	5543 	5544 	5565=
U 3030		5649=	5680 	5683 	5700 	5703 	5705 	5708 	5712 
U 3040		5714 	5719=	5721=	5723=	5736=	5737 	5753=	5769 
U 3050		5770 	5774 	5782 	5786 	5794 	5808=	5809=	5812 
U 3060		5833 	5834 	5838 	5843 	5844 	5845 	5861 	5898 
U 3070		5908 	5936 	5940 	5943 	5949 	6054=	6056=	6059 

U 3100		6060 	6068=	6106 	6118 	6119 	6123=	6145 	6152 
U 3110		6153 	6156 	6169 	6170 	6185 	6191 	6198 	6199 
U 3120		6216 	6217 	6244 	6251 	6252 	6253 	6260 	6262 
U 3130		6263 	6264 	6265 	6266 	6271 	6272 	6286 	6288 
U 3140		6289 	6304 	6329 	6332 	6354 	6372 	6376 	6377 
U 3150		6385 	6389 	6394 	6395 	6403 	6412 	6424 	6425 
U 3160		6442 	6466 	6467 	6478 	6479 	6480 	6482 	6483 
U 3170		6484 	6485 	6487 	6494 	6498 	6505 	6512 	6513 

U 3200		6514 	6517 	6518 	6519 	6534 	6536 	6558 	6559 
U 3210		6565 	6566 	6588=	6589=	6603 	6653 	6655 	6656 
U 3220		6681 	6682 	6717 	6725 	6726 	6727 	6728 	6743 
U 3230		6768 	6769 	6781 	6782 	6790 	6791 	6792 	6793 
U 3240		6794 	6795 	6798 	6811 	6812 	6815 	6817 	6819 
U 3250		6836=	6879 	6880 	6888 	6889 	6964=	6987 	6991=
U 3260		6993 	7013 	7032 	7035 	7036 	7044 	7045 	7058 
U 3270		7060 	7064 	7077 	7078 	7086 	7087 	7095 	7098 

U 3300		7100 	7101 	7102 	7104 	7106 	7113 	7114 	7132 
U 3310		7134 	7180 	7181 	7183 	7184 	7199 	7201 	7202 
U 3320		7203 	7205 	7210 	7218 	7220 	7223 	7225 	7227 
U 3330		7233 	7235 	7238 	7241 	7242 	7244 	7253 	7262 
U 3340		7268 	7327 	7328 	7331 	7333 	7334 	7343 	7350 
U 3350		7355 	7356 	7415 	7416 	7432 	7469 	7470 	7477 
U 3360		7478 	7502 	7503 	7504 	7515 	7523 	7526 	7541 
U 3370		7542 	7543 	7552 	7563 	7568 	7569 	7570 	7574 

U 3400		7583 	7584 	7585 	7593 	7594 	7595 	7614 	7615 
U 3410		7637 	7638 	7639 	7640 	7648 	7649 	7656 	7661 
U 3420		7666 	7668 	7685 	7700 	7721 	7722 	7723 	7724 
U 3430		7725 	7726 	7727 	7729 	7731 	7732 	7741 	7743 
U 3440		7747 	7748 	7750 	7753 	7776 	7790 	7795 	7796 
U 3450		7812 	7861=	7915 	7944 	7958=	7960 	7963 	7970 
U 3460		7976 	7992 	8009 	8012 	8014 	8016 	8018 	8020 
U 3470		8022 	8024 	8026 	8028 	8030 	8121 	8129 	8141 

U 3500		8214 	8221 	8222 	8226 	8229 	8236 	8239=	8242 
U 3510		8245 	8248=	8253=	8254 	8255 	8256 	8340 	8341 
U 3520		8342 	8343 	8369 	8370 	8372 	8379 	8380 	8384 
U 3530		8390 	8395 	8396 	8402 	8409 	8435 	8436 	8437 
U 3540		8444 	8448 	8477 	8492 	8495 	8497 	8498 	8501 
U 3550		8503 	8505 	8508 	8511 	8513 	8514 	7054:	7055:
U 3560		8517 	8525 	8526 	8527 	8528 	8533 	8559 	8567 
U 3570		8631 	8633 	8635 	8636 	8637 	8639 		

U 3600									
U 3610									
U 3620									
; DSK: KSHACK; ITS MCR	04:12:43 25-NOV-84	MICRO 116	KS10 MICROCODE FOR ITS	PAGE 253
; LOCATION / LINE NUMBER INDEX
; UCODE LOC'N	0	1	2	3	4	5	6	7

U 3630									
U 3640									
U 3650									
U 3660									
U 3670									

U 3700									
U 3710									
U 3720									
U 3730									
U 3740		6223:	6582:	6285:	6418:	6089:			
U 3750			6584:			6093:			
U 3760									
U 3770									3503 

U 4000				2231 	2232

NO ERRORS DETECTED
END OF MICRO CODE ASSEMBLY
USED 85.71 SECONDS
