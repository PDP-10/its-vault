;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LCHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

;MOVE-OPINION HACKING

;BASIC DATA FACTORS..
;  NUMBER DEVELOPED PCS (SIDE)
;  HAS-FOOTHOLD-IN-CENTER (SIDE)
;  KING-CASTLED (SIDE)

;ORDER-OF-BATTLE (HA HA)
;  PREMATURE Q
;   PLAY TYPICAL GAME ..
;  MULTIPLE-MOVES OF SAME PC.

;STABILITY AT DEST SQUARE

;RELATIVE POSITIONALITY

;RELATIVE POSTING
;

;PAWN MOVES
;  PAWN BREAK
;    HE TAKES
;    WE TAKE
;    WE PUSH PAST
;  PASSED PAWN
;  WEAK PAWN
;  CENTER PAWN
;  HOME PAWN
;    K S ON SAME SIDE
;    K S ON OPPOSITE SIDES
;  RANGER PAWN

;OVERALL MOVE CLASSES

;  ROUTINE DEVELOPMENT
;  AGRESSIVE POSTING
;  LEVEL
;  RETREAT
;  UNSTABLE
;  TATICAL

(DEFUN C-FILL-IN-MO-KEYS (MOVE-LIST)
  (PROG (SIDE IDX LIM)
	(SETQ SIDE (MOVE-LIST-SIDE MOVE-LIST))
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
    L	(COND ((NOT (< IDX LIM))
	       (SETF (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)
		     (CONS 'MO-KEYS
			   (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)))
	       (RETURN T)))
    	(MO-COMPUTE-MOVE-OPINION MOVE-LIST IDX)
	(SETQ IDX (+ IDX C-MVL-NQS))
	(GO L)
))

;MOVE-OPINION KEYS AND DOCUMENTATION:
; VACATES-SQUARE <SQ> [<BOS SQ>]
; WILL-ATTACK-HIS-PIECES-DISCOVERED <LIST-OF-ATTACKS>
; WILL-ATTACK-VACANT-SQUARES-DISCOVERED <LIST-OF-ATTACKS>
; WILL-DEFEND-OUR-PIECES-DISCOVERED <L-O-A>
; WAS-ATTACKED-BY <HBOS SQ>
; WILL-BE-ATTACKED-BY <HBOS TO-SQ>
; CAPTURE <PC>
; WILL-ATTACK-HIS-PIECES <L-O-A>
; WILL-ATTACK-VACANT-SQUARES <L-O-A>
; WILL-DEFEND-OUR-PIECES <L-O-A>

;EACH ENTRY OF AN L-O-A IS:
; <SQ> [DIR] [MODE]

; THE VACANT-SQUARES HACK IS TOO EXPENSIVE IN CONSES TO DO ALL THE TIME, CURRENTLY.
;SO ITS SORT OF CONDITIONAL ED OUT FOR THE TIME BEING.
(DEFUN MO-COMPUTE-MOVE-OPINION (MOVE-LIST IDX)
  (PROG (CODE MOVING-PC TO-SQ TWN MO-KEYS BOS HBOS SIDE TEM L1 L2 L3 T1 T2 PIA)
        (SETQ MOVING-PC (AR-1 MOVE-LIST (+ IDX C-MVL-MOVING-PC)))
	(SETQ SIDE (LOGAND MOVING-PC #o20))
        (COND ((MEMQ (SETQ CODE (AR-1 MOVE-LIST (+ IDX C-MVL-CODE)))
                              '(CASTLES-KING CASTLES-QUEEN))
                   (SETQ MO-KEYS (CONS '(CASTLES) MO-KEYS))
                   (GO R)))
        (SETQ TO-SQ (AR-1 MOVE-LIST (+ IDX C-MVL-TO-SQ)))
	(SETQ TWN (AR-1 (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY)
			MOVING-PC))
	(COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	       (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
	(SETQ BOS (C-POS-BEARS-ON-SQUARE PIA))
	(SETQ HBOS (C-POS-HIS-BEARS-ON-SQUARE PIA))
	(SETQ T2 (AR-1 BOS (SETQ T1 (AR-1 PIECE-ARRAY MOVING-PC))))
	(SETQ MO-KEYS (CONS (COND ((NULL T2)
				   (LIST 'VACATES-SQUARE T1))
				  (T (LIST 'VACATES-SQUARE T1 T2)))
			    MO-KEYS))
	(COND ((SETQ TEM (AR-1 BOS T1))
	       (MULTIPLE-VALUE (L1 L2 L3)
			       (MO-UNBLOCK T1 TO-SQ TEM NIL))
	       (COND (L1 (SETQ MO-KEYS (CONS (LIST 'WILL-ATTACK-HIS-PIECES-DISCOVERED L1)
					     MO-KEYS))))
	       (COND (L2 (SETQ MO-KEYS (CONS (LIST 'WILL-ATTACK-VACANT-SQUARES-DISCOVERED L2)
					     MO-KEYS))))
	       (COND (L3 (SETQ MO-KEYS (CONS (LIST 'WILL-DEFEND-OUR-PIECES-DISCOVERED L3)
					     MO-KEYS))))
	       ))
	(COND ((SETQ TEM (AR-1 HBOS T1))
	       (SETQ MO-KEYS (CONS (LIST 'WAS-ATTACKED-BY TEM)
				   MO-KEYS))))
	(COND ((SETQ TEM (AR-1 HBOS TO-SQ))
	       (SETQ MO-KEYS (CONS (LIST 'WILL-BE-ATTACKED-BY TEM)
				   MO-KEYS))))
	(COND ((< (AR-1 BOARD-ARRAY TO-SQ)
		  PIECE-ARRAY-SIZE)
	       (SETQ MO-KEYS (CONS (LIST 'CAPTURE (AR-1 BOARD-ARRAY TO-SQ))
				   MO-KEYS))))
	(SETQ MO-KEYS 
	      (FUNCALL (AR-1 C-MO-DISPATCH TWN)
		       MOVING-PC 
		       TO-SQ
		       MO-KEYS))
	(MULTIPLE-VALUE (L1 L2 L3) (MO-ATTACKS MOVING-PC TWN TO-SQ NIL))
	(COND (L1 (SETQ MO-KEYS (CONS (LIST 'WILL-ATTACK-HIS-PIECES L1)
				      MO-KEYS))))
	(COND (L2 (SETQ MO-KEYS (CONS (LIST 'WILL-ATTACK-VACANT-SQUARES L2)
				      MO-KEYS))))
	(COND (L3 (SETQ MO-KEYS (CONS (LIST 'WILL-DEFEND-OUR-PIECES L3)
				      MO-KEYS))))
   R	(AS-1 MO-KEYS MOVE-LIST (+ IDX C-MVL-MO-KEYS))
	(RETURN MO-KEYS)
))

(DECLARE (SPECIAL SPECIAL-MO-ATTACKS-HIS-PIECES-LIST 
		  SPECIAL-MO-ATTACKS-VACANT-SQUARES-LIST
		  SPECIAL-MO-DEFENDS-OUR-PIECES-LIST 
		  SPECIAL-MO-TO-SQ 
		  SPECIAL-MO-RECORD-VACANT-SQUARES-P))

(DEFUN MO-ATTACKS (CURRENT-PIECE TWN NEW-LOCATION SPECIAL-MO-RECORD-VACANT-SQUARES-P)
  (PROG (SPECIAL-MO-ATTACKS-HIS-PIECES-LIST SPECIAL-MO-ATTACKS-VACANT-SQUARES-LIST
         SPECIAL-MO-DEFENDS-OUR-PIECES-LIST CURRENT-SIDE SPECIAL-MO-TO-SQ 
	 CURRENT-LOCATION)
	(SETQ CURRENT-SIDE (LOGAND CURRENT-PIECE #o20))
	(SETQ CURRENT-LOCATION (AR-1 PIECE-ARRAY CURRENT-PIECE))
	(FUNCALL (AR-1 C-A-DISPATCH TWN)
		 (FUNCTION MO-STORE-ATTACK)
		 NEW-LOCATION)
	(RETURN SPECIAL-MO-ATTACKS-HIS-PIECES-LIST 
		SPECIAL-MO-ATTACKS-VACANT-SQUARES-LIST
		SPECIAL-MO-DEFENDS-OUR-PIECES-LIST)))

(DEFUN MO-UNBLOCK (NEW-LOCATION SPECIAL-MO-TO-SQ UBL SPECIAL-MO-RECORD-VACANT-SQUARES-P)
  (PROG (CURRENT-SIDE CURRENT-PIECE DIR L1 L2 L3
	 SPECIAL-MO-ATTACKS-HIS-PIECES-LIST SPECIAL-MO-ATTACKS-VACANT-SQUARES-LIST
         SPECIAL-MO-DEFENDS-OUR-PIECES-LIST CURRENT-LOCATION)
	(SETQ CURRENT-LOCATION 0)	;WE RE STARTING OFF FROM THAT SQ, SO NOT POSSIBLE
					; TO LOSE BY HITTING ORIG PC LOCN.  SO FAKE OUT THAT
					; HACK.
    L   (COND ((NULL UBL) (GO X))
	      ((AND (SETQ DIR (CADAR UBL))
		    (NULL (CADDAR UBL)))    ;MAKE SURE NOT THRU
	       (SETQ CURRENT-PIECE (CAAR UBL))
	       (SETQ CURRENT-SIDE (LOGAND CURRENT-PIECE #o20))
	       (SETQ SPECIAL-MO-ATTACKS-HIS-PIECES-LIST NIL)
	       (SETQ SPECIAL-MO-ATTACKS-VACANT-SQUARES-LIST NIL)
	       (SETQ SPECIAL-MO-DEFENDS-OUR-PIECES-LIST NIL)
	       (COND ((DIAGONAL-P DIR)
		      (C-A-EXTEND-BISHOP-LINE (FUNCTION MO-STORE-ATTACK)
					      NEW-LOCATION 
					      DIR  
					      SPECIAL-MO-TO-SQ))
		     (T (C-A-EXTEND-ROOK-LINE (FUNCTION MO-STORE-ATTACK)
					      NEW-LOCATION 
					      DIR  
					      SPECIAL-MO-TO-SQ)))
	       (COND (SPECIAL-MO-ATTACKS-HIS-PIECES-LIST
		      (SETQ L1 (CONS (LIST CURRENT-PIECE SPECIAL-MO-ATTACKS-HIS-PIECES-LIST)
				     L1))))
	       (COND (SPECIAL-MO-ATTACKS-VACANT-SQUARES-LIST
		      (SETQ L2 (CONS (LIST CURRENT-PIECE SPECIAL-MO-ATTACKS-VACANT-SQUARES-LIST)
				     L2))))
	       (COND (SPECIAL-MO-DEFENDS-OUR-PIECES-LIST
		      (SETQ L3 (CONS (LIST CURRENT-PIECE SPECIAL-MO-DEFENDS-OUR-PIECES-LIST)
				     L3)))) ))
	(SETQ UBL (CDR UBL))
	(GO L)
    X   (RETURN L1 L2 L3)
))

;CURRENT-LOCATION MUST BE BOUND TO SQUARE GETTING VACATED.  IE IF IT
; DEFENDS THIS SQUARE, IT DOESNT COUNT SINCE PC IS NOT REALLY THERE.
;SPECIAL-MO-TO-SQ MUST BE BOUND TO SQUARE GETTING OCCUPIED. IF IF IT
; ATTACKS THIS SQUARE, IT IS REALLY DEFENDING OUR NO MATTER WHAT IS THERE
; NOW (HOPEFULLY, EMPTY OR HIS PC).  THIS CAN ONLY HAPPEN VIA DISCOVERIES.
(DEFUN MO-STORE-ATTACK (SQ &OPTIONAL DIR MODE &AUX SQC)
  (COND ((NOT (< (SETQ SQC (AR-1 BOARD-ARRAY SQ))
		 SQUARE-OFF-BOARD)))
	((EQ SQ SPECIAL-MO-TO-SQ)
	 (SETQ SPECIAL-MO-DEFENDS-OUR-PIECES-LIST 
	       (CONS (COND ((NULL MODE)		;DEFENDING PC MOVING.  MUST BE SLIDING PC.
			    (LIST SQ DIR))
			   (T (LIST SQ DIR MODE)))
		     SPECIAL-MO-DEFENDS-OUR-PIECES-LIST)))
	((= SQC SQUARE-VACANT)
	 (COND (SPECIAL-MO-RECORD-VACANT-SQUARES-P
		(SETQ SPECIAL-MO-ATTACKS-VACANT-SQUARES-LIST 
		      (CONS (COND ((NULL DIR)
				   (LIST SQ))
				  ((NULL MODE)
				   (LIST SQ DIR))
				  (T (LIST SQ DIR MODE)))
			    SPECIAL-MO-ATTACKS-VACANT-SQUARES-LIST)))))
	((ZEROP (LOGAND #o20 (LOGXOR CURRENT-SIDE SQC)))
	 (COND ((NOT (= SQ CURRENT-LOCATION))
		(SETQ SPECIAL-MO-DEFENDS-OUR-PIECES-LIST 
		      (CONS (COND ((NULL DIR)
				   (LIST SQ))
				  ((NULL MODE)
				   (LIST SQ DIR))
				  (T (LIST SQ DIR MODE)))
			    SPECIAL-MO-DEFENDS-OUR-PIECES-LIST)))))
	(T 
	 (SETQ SPECIAL-MO-ATTACKS-HIS-PIECES-LIST 
	       (CONS (COND ((NULL DIR)
			    (LIST SQ))
			   ((NULL MODE)
			    (LIST SQ DIR))
			   (T (LIST SQ DIR MODE)))
		     SPECIAL-MO-ATTACKS-HIS-PIECES-LIST))))
)

(DEFUN C-MO-W-PAWN (PC SQ MO-KEYS)
  (PROG (SQC1)
	(COND ((AND (< (SETQ SQC1 (AR-1 BOARD-ARRAY (1+ (+ SQ BOARD-WIDTH))))
		       PIECE-ARRAY-SIZE)
		    (EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
			      SQC1)
			'BLACK-PAWN))
	       (SETQ MO-KEYS (CONS (LIST 'PAWN-BREAK SQC1)
				   MO-KEYS))))
	(COND ((AND (< (SETQ SQC1 (AR-1 BOARD-ARRAY (1- (+ SQ BOARD-WIDTH))))
		       PIECE-ARRAY-SIZE)
		    (EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
			      SQC1)
			'BLACK-PAWN))
	       (SETQ MO-KEYS (CONS (LIST 'PAWN-BREAK SQC1)
				   MO-KEYS))))
	(RETURN MO-KEYS)))

(DEFUN C-MO-B-PAWN (PC SQ MO-KEYS)
  (PROG (SQC1)
	(COND ((AND (< (SETQ SQC1 (AR-1 BOARD-ARRAY (1+ (- SQ BOARD-WIDTH))))
		       PIECE-ARRAY-SIZE)
		    (EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
			      SQC1)
			'WHITE-PAWN))
	       (SETQ MO-KEYS (CONS (LIST 'PAWN-BREAK SQC1)
				   MO-KEYS))))
	(COND ((AND (< (SETQ SQC1 (AR-1 BOARD-ARRAY (1- (- SQ BOARD-WIDTH))))
		       PIECE-ARRAY-SIZE)
		    (EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
			      SQC1)
			'WHITE-PAWN))
	       (SETQ MO-KEYS (CONS (LIST 'PAWN-BREAK SQC1)
				   MO-KEYS))))
	(RETURN MO-KEYS)
))

(DEFUN C-MO-KING (PC SQ MO-KEYS)
  (PROG ()
	(RETURN MO-KEYS)))

(DEFUN C-MO-QUEEN (PC SQ MO-KEYS)
  (PROG ()
	(RETURN MO-KEYS)))

(DEFUN C-MO-ROOK (PC SQ MO-KEYS)
  (PROG ()
	(RETURN MO-KEYS)))

(DEFUN C-MO-KNIGHT (PC SQ MO-KEYS)
  (PROG ()
	(RETURN MO-KEYS)))

(DEFUN C-MO-BISHOP (PC SQ MO-KEYS)
  (PROG ()
	(RETURN MO-KEYS)))

