;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LCHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

(DEFUN C-PRINT-SQUARE-KEYS-ARRAY (&OPTIONAL (ARY (GET C-CURRENT-POSITION 'SQUARE-KEYS))
					    (STREAM STANDARD-OUTPUT)
				  &AUX SQ TEM MOVE-LIST)
   (COND (ARY 
    (SETQ MOVE-LIST (ARRAY-LEADER ARY 2))
    (DO RANK 0 (1+ RANK) (= RANK 8)
      (DO FILE 7 (1- FILE) (< FILE 0)
	  (COND ((SETQ TEM (AR-1 ARY (SETQ SQ (AR-1 C-RANK-FILE-TO-SQUARE-MAP 
						    (+ (LSH RANK 3) FILE)))))
		 (TERPRI STREAM)
		 (C-OUTPUT-SQUARE SQ STREAM)
		 (DO ITEM TEM (CDR ITEM) (NULL ITEM)
		     (PRIN1-THEN-SPACE (CAAR ITEM) STREAM)   ;KEY INDICATOR
		     (C-PRINT-MOVE-FROM-MOVE-LIST MOVE-LIST (CADAR ITEM) STREAM)
		     (COND ((CDDAR ITEM)
			    (PRIN1 (CDDAR ITEM) STREAM)))))))))))

(DEFUN C-PRINT-BEARS-ON-SQUARE-ARRAY (&OPTIONAL ARY
						(STREAM STANDARD-OUTPUT)
				  &AUX SQ TEM)
   (COND ((NULL ARY) (SETQ ARY (C-GET-OUR-SQUARE-BEARS))))
   (COND (ARY 
    (DO RANK 0 (1+ RANK) (= RANK 8)
      (DO FILE 7 (1- FILE) (< FILE 0)
	  (COND ((SETQ TEM (AR-1 ARY (SETQ SQ (AR-1 C-RANK-FILE-TO-SQUARE-MAP 
						    (+ (LSH RANK 3) FILE)))))
		 (TERPRI STREAM)
		 (C-OUTPUT-SQUARE SQ STREAM)
		 (PRIN1 TEM))))))))

(DEFUN C-OUTPUT-MO-LIST (MOL &OPTIONAL (STREAM STANDARD-OUTPUT))
  (PROG ()
	(COND ((NULL MOL)
	       (PRIN1 MOL STREAM)
	       (RETURN NIL)))
	(PRINC "(" STREAM)
    L   (COND ((MEMQ (CAAR MOL) '(WILL-ATTACK-HIS-PIECES
				  WILL-ATTACK-VACANT-SQUARES
				  WILL-DEFEND-OUR-PIECES))
	       (PRINC "(" STREAM)
	       (PRIN1-THEN-SPACE (CAAR MOL) STREAM)
	       (C-OUTPUT-SQUARE-AND-DIR-LIST (CADAR MOL) STREAM)
	       (PRINC ") " STREAM))
	      ((MEMQ (CAAR MOL) '(WILL-ATTACK-HIS-PIECES-DISCOVERED 
				  WILL-ATTACK-VACANT-SQUARES-DISCOVERED
				  WILL-DEFEND-OUR-PIECES-DISCOVERED))
	       (PRINC "(" STREAM)
	       (PRIN1-THEN-SPACE (CAAR MOL) STREAM)
	       (C-OUTPUT-SQUARE-AND-DIR-LIST-DISCOV (CADAR MOL) STREAM)
	       (PRINC ") " STREAM))
	      ((EQ (CAAR MOL) 'VACATES-SQUARE)
	       (PRINC "(" STREAM)
	       (PRIN1-THEN-SPACE (CAAR MOL) STREAM)
	       (C-OUTPUT-SQUARE (CADAR MOL) STREAM)
	       (COND ((CADDAR MOL)
		      (C-OUTPUT-PIECE-LIST (CADDAR MOL) STREAM)))
	       (PRINC ")" STREAM))
	      ((EQ (CAAR MOL) 'CAPTURE)
	       (PRINC "(" STREAM)
	       (PRIN1-THEN-SPACE (CAAR MOL) STREAM)
	       (C-OUTPUT-PIECE (CADAR MOL) STREAM)
	       (PRINC ")" STREAM))
	      ((EQ (CAAR MOL) 'WAS-ATTACKED-BY)
	       (PRINC "(" STREAM)
	       (PRIN1-THEN-SPACE (CAAR MOL) STREAM)
	       (C-OUTPUT-PIECE-LIST (CADAR MOL) STREAM)
	       (PRINC ")" STREAM))
	      (T (PRIN1 (CAR MOL) STREAM)))
        (COND ((SETQ MOL (CDR MOL))
	       (GO L)))
	(PRINC ")" STREAM)
	(RETURN T)))

(defun c-output-square-and-dir-list-discov (dsqdl &optional (stream standard-output))
  (do ((dsqdl-1 dsqdl (cdr dsqdl-1)))
      ((null dsqdl) NIL)
    (princ "(" stream)
    (c-output-piece (caar dsqdl-1) stream)
    (c-output-square-and-dir-list (cadar dsqdl-1) stream)
    (princ ")" stream)))


;(DEFUN C-OUTPUT-SQUARE-AND-DIR-LIST-DISCOV (DSQDL &OPTIONAL (STREAM STANDARD-OUTPUT))
;  (PROG ()
;    L   (COND ((NULL DSQDL) (RETURN NIL)))
;    	(PRINC "(" STREAM)
;	(C-OUTPUT-PIECE (CAAR DSQDL) STREAM)
;	(C-OUTPUT-SQUARE-AND-DIR-LIST (CADAR DSQDL) STREAM)
;	(PRINC ")" STREAM)
;	(SETQ DSQDL (CDR DSQDL))
;	(GO L)))

(defun c-output-square-and-dir-list (sqdl &optional (stream standard-output))
  (do ((sqdl-1 sqdl (cdr sqdl-1))(dir))
      ((null sqdl-1) T)
    (princ "(" stream)
    (c-output-square (caar sqdl-1) stream)
    (cond ((setq dir (cadar sqdl-1))
	   (c-output-direction-increment dir stream)))
    (cond ((caddar sqdl-1)
	   (princ " " stream)
	   (prin1 (caddar sqdl-1) stream)))
    (princ ")" stream)))


;(DEFUN C-OUTPUT-SQUARE-AND-DIR-LIST (SQDL &OPTIONAL (STREAM STANDARD-OUTPUT))
;  (PROG (DIR)
;    L	(COND ((NULL SQDL)
;	       (RETURN T)))
;	(PRINC "(" STREAM)
;	(C-OUTPUT-SQUARE (CAAR SQDL) STREAM)
;	(COND ((SETQ DIR (CADAR SQDL))
;	       (C-OUTPUT-DIRECTION-INCREMENT DIR STREAM)))
;	(COND ((CADDAR SQDL)
;	       (PRINC " " STREAM)
;	       (PRIN1 (CADDAR SQDL) STREAM)))
;	(PRINC ")" STREAM)
;	(SETQ SQDL (CDR SQDL))
;	(GO L)))

(DEFUN C-OUTPUT-PIECE-LISTS-OF-SQUARE (SQ &OPTIONAL (STREAM STANDARD-OUTPUT))
  (PROG (PIA)
	(COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	       (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
	(FORMAT STREAM '("BOS: " (PL) ",HBOS: " (PL) "~%")
		(AR-1 (C-POS-BEARS-ON-SQUARE PIA) SQ)
		(AR-1 (C-POS-HIS-BEARS-ON-SQUARE PIA) SQ))))

(DEFUN C-OUTPUT-PIECE-LIST (PL STREAM)
  (PROG (DIR)
    L   (COND ((NULL PL) (RETURN T)))
    	(PRINC "(" STREAM)
	(C-OUTPUT-PIECE (CAAR PL) STREAM)
	(COND ((SETQ DIR (CADAR PL))
	       (C-OUTPUT-DIRECTION-INCREMENT DIR STREAM)))
	(COND ((CADDAR PL)
	       (PRINC " " STREAM)
	       (PRIN1 (CADDAR PL) STREAM)))
	(PRINC ")" STREAM)
	(SETQ PL (CDR PL))
	(GO L)))

(DEFUN C-OUTPUT-DIRECTION-INCREMENT (DIR-INC STREAM)
  (C-OUTPUT-DIRECTION (C-FIND-DIRECTION-OF-INC DIR-INC) STREAM))

(DEFUN C-OUTPUT-DIRECTION (DIR STREAM)
  (PRINC (AR-1 C-DIRECTION-NAMES DIR) STREAM))

(DEFUN C-OUTPUT-LIST-OF-MOVES (LST STREAM)
  (PROG (MV)
    L	(COND ((NULL LST) (RETURN NIL))
	      ((NOT (EQ (CAAR LST) 'MOVE))
	       (GO L0)))
    	(SETQ MV (CDAR LST))
    	(C-OUTPUT-MOVE (CAR MV) (CADR MV) (CADDR MV) STREAM)
    L0	(SETQ LST (CDR LST))
	(GO L)))

(DEFUN C-OUTPUT-MOVE (MV-PC TO-SQ CODE STREAM)
  (PROG ()
       (COND ((EQ CODE 'CASTLES-KING)
	      (RETURN (PRINC "O-O" STREAM)))
	     ((EQ CODE 'CASTLES-QUEEN)
	      (RETURN (PRINC "O-O-O" STREAM))))
       (C-OUTPUT-PIECE MV-PC STREAM)
       (C-OUTPUT-SQUARE TO-SQ STREAM)
       (COND (CODE (PRINC CODE STREAM))) ))

(DEFUN C-OUTPUT-FILE (FILE STREAM)
       (PRINC (AR-1 C-FILE-NAMES FILE) STREAM))

(DEFUN C-OUTPUT-PIECE (PC STREAM)
       (PRINC (AR-1 C-PIECE-IDENTIFICATION-ARRAY PC) STREAM))

(DEFUN C-OUTPUT-SQUARE (SQ STREAM)
       (PRINC (AR-1 C-SQUARE-IDENTIFICATION-ARRAY SQ) STREAM))

(DEFUN C-OUTPUT-BOARD-SIZE-ARRAY (ARY &OPTIONAL (STREAM STANDARD-OUTPUT))
       (TERPRI STREAM)
       (DO RANK 0 (1+ RANK) (= RANK 8)
	   (DO FILE 7 (1- FILE) (< FILE 0)
	       (PRIN1-THEN-SPACE (AR-1 ARY (AR-1 C-RANK-FILE-TO-SQUARE-MAP
						 (+ (LSH RANK 3) FILE)))
				 STREAM))
	   (TERPRI STREAM)))

(DEFUN C-READ-GAME (&QUOTE &REST FLIST)    ;READ GAME, AS WRITTEN BY C-WRITE-GAME
  (PROG (STREAM GM GMLIST GAMP SIDE TEM)       ;(ACTUALLY, STUFF WRITTEN BY C-WRITE-GAME GETS
        (SETQ GM (CAR FLIST))		   ; READ BY LISP READ AND EVAL'ED)
	(PUTPROP GM (CADR FLIST) 'COMMENT)
	(SETQ FLIST (CDDR FLIST))
	(SETQ GAMP (VALUE-CELL-LOCATION 'GMLIST))
	(C-ALLOCATE-SCRATCH-BOARD-STRUCTURES (* (LENGTH FLIST) C-GAME-NQS))
	((LAMBDA (PIECE-ARRAY BOARD-ARRAY GAME-ARRAY ;BOARD-PAWN-DATA-ARRAY 
		   C-CURRENT-POSITION)
	  (PROG (MV AN-LIST) 
	     (INITIALIZE-BOARD-TO-INITIAL-POSITION)
      L	     (COND ((NULL FLIST) (RETURN NIL))		;RETURNS FROM INNER PROG ONLY
		   ((EQ (CAAR FLIST) 'INSERTION)
		    (RPLACD GAMP (SETQ GAMP (NCONS (CADAR FLIST))))
		    (GO E1)))
      	     (SETQ MV (C-READ-GAME-CONVERT-MOVE (CAAR FLIST)))
	     (C-READ-GAME-PLAY-MOVE MV)
      	     (RPLACD GAMP (SETQ GAMP (NCONS MV)))
	     (SETQ AN-LIST (CDAR FLIST))
      L2     (COND ((NULL AN-LIST) (GO E2))
		   ((EQ (CAAR AN-LIST) 'STATIC-ANNOTATION)
		    (C-COM-A-POS (CADAR AN-LIST) GM))
		   ((EQ (CAAR AN-LIST) 'DYNAMIC-ANNOTATION) 
		    (C-COM-A-MV (CDR (C-READ-GAME-CONVERT-MOVE (CADAR AN-LIST)))
				(CADDAR AN-LIST)
				GM))
		   (T (ERROR (CAR AN-LIST) "UNKNOWN-ANNOTATION")))
      	     (SETQ AN-LIST (CDR AN-LIST))
	     (GO L2)
      E2
      E1     (SETQ FLIST (CDR FLIST))
      	     (GO L)))
	 SCRATCH-PIECE-ARRAY SCRATCH-BOARD-ARRAY SCRATCH-GAME-ARRAY 
	 ;SCRATCH-BOARD-PAWN-DATA-ARRAY
	 C-CURRENT-POSITION)
	(PUTPROP GM GMLIST 'GAME-MOVES)
))

(DEFUN C-READ-GAME-PLAY-MOVE (MV)
       (C-STEP-MOVE (CDR MV)))

(DEFUN C-STEP-MOVE (MV)  ;TAKE 3 LIST SORT OF MOVE.  FIND IT IN MOVE-LIST 
       			 ; FOR C-CURRENT-POSITION (GENERATING THAT IF NECC). AND CALL
			 ; C-REACH-FOLLOWING-POSITION.  REASON FOR THIS IS TO ASSURE
			 ; C-CURRENT-POSITION GETS STEPPED APPROPRIATELY, ETC.
  (PROG (MOVE-LIST IDX)
	(COND ((NULL (SETQ MOVE-LIST (GET C-CURRENT-POSITION 'MOVE-LIST)))
	       (SETQ MOVE-LIST (C-CREATE-MOVE-LIST))))
	(COND ((NULL (SETQ IDX (C-FIND-MOVE-IN-MOVE-LIST MV MOVE-LIST)))
	       (ERROR MV "CANT FIND MOVE IN MOVE-LIST")))
	(C-REACH-FOLLOWING-POSITION MOVE-LIST IDX)
))

(DEFUN C-FIND-MOVE-IN-MOVE-LIST (MV MOVE-LIST)
   (PROG (MOVING-PC TO-SQ CODE IDX LIM MV-CODE)
	 (SETQ MOVING-PC (CAR MV))
	 (SETQ TO-SQ (CADR MV))
	 (SETQ CODE (CADDR MV))
	 (SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
    L    (COND ((NOT (< IDX LIM)) (RETURN NIL))
	       ((AND (= MOVING-PC (AR-1 MOVE-LIST (+ IDX C-MVL-MOVING-PC)))
		     (EQ TO-SQ (AR-1 MOVE-LIST (+ IDX C-MVL-TO-SQ))) ;Can be NIL if O-O
		     (OR (EQ CODE (SETQ MV-CODE (AR-1 MOVE-LIST (+ IDX C-MVL-CODE))))
		         (AND (EQ MV-CODE '=Q)
			      (NULL CODE))))		;NOT REALLY RIGHT...
		(RETURN IDX)))
    (SETQ IDX (+ IDX C-MVL-NQS))
    (GO L)))

(DEFUN C-READ-GAME-CONVERT-MOVE (IMV)
 (PROG (CODE RES)
   (COND ((EQ (CAR IMV) 'O-O)
	  (SETQ CODE 'CASTLES-KING)
	  (GO CASTLES))
	 ((EQ (CAR IMV) 'O-O-O)
	  (SETQ CODE 'CASTLES-QUEEN)
	  (GO CASTLES))
	 ((NULL (CDDR IMV))
	  (SETQ RES (LIST (EVAL (CAR IMV)) (C-ALGEBRADIC-CONVERT-SQUARE (CADR IMV)))))
         (T 
	  (SETQ RES (LIST (EVAL (CAR IMV)) 
			  (C-ALGEBRADIC-CONVERT-SQUARE (CADR IMV))
			  (CADDR IMV)))) )
 X (RETURN (CONS 'MOVE RES))
 CASTLES (SETQ RES (LIST (COND ((ZEROP (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY)))
				WK)
			       (T BK))
			 NIL 
			 CODE))
 	 (GO X)
))

(DEFUN C-ALGEBRADIC-CONVERT-SQUARE (ASQ &OPTIONAL (IDX 0))	  ;CONVERT ALGEBRADIC SQUARE
  (PROG (LET NUM)
	(SETQ LET (AR-1 (SETQ ASQ (STRING ASQ)) IDX))
	(SETQ NUM (AR-1 ASQ (1+ IDX)))
	(COND ((OR (< LET #/A)
		   (NOT (< LET #/I))
		   (< NUM #/1)
		   (NOT (< NUM #/9)))
	       (ERROR ASQ "BAD SQUARE")))
	(RETURN (+ BOARD-WIDTH  
		   (* BOARD-WIDTH (- NUM #/0))
		   1 
		   (- LET #/A))) ))

(DEFUN C-EVAL-SEXP-FROM-FILE (C-INPUT-FILE)
  (PROG (STREAM)
;	(FILE-OPEN C-INPUT-FILE 'READ)
;	(SETQ STREAM 'FILE-IO)				
;	(EVAL (SETQ C-LAST-INPUT (READ NIL 'FILE-IO)))
;	(FILE-CLOSE 'READ)
	(SETQ STREAM (OPEN C-INPUT-FILE '(READ)))
	(EVAL (SETQ C-LAST-INPUT (READ STREAM)))
	(CLOSE STREAM)
))

(DEFUN C-INPUT-OCM-GAME-FROM-FILE (C-INPUT-FILE)
  (PROG (STREAM STRING CH IDX MV-OUTPUT)
	(SETQ STREAM (OPEN C-INPUT-FILE '(READ)))
	(SETQ STRING (MAKE-ARRAY NIL 'ART-STRING #o50 NIL '(0)))
    L	(STORE-ARRAY-LEADER 0 STRING 0)
    L1	(COND ((NULL (SETQ CH (FUNCALL STREAM 'TYI)))
	       (GO X))
	      ((NOT (MEMQ CH '(#o40 #o215 #o211 #o212)))
	       (ARRAY-PUSH STRING CH)
	       (GO L1)))
    	(COND ((ZEROP (ARRAY-ACTIVE-LENGTH STRING))
	       (GO L1)))
	(COND ((NUMBERP (C-INPUT-FROM-STRING 'CHESS-MOVE STRING 0))
	       (GO L)))			;FLUSH MOVE NUMBERS
	(SETQ IDX 0)
	(MULTIPLE-VALUE (MV-OUTPUT IDX)
			(C-INPUT-MOVE 'DESCRIPTIVE 
				      STRING 
				      IDX))
	(COND ((NUMBERP MV-OUTPUT) (GO PLAY-MOVE))
	      (MV-OUTPUT (PRIN1 "Error ") (PRIN1 MV-OUTPUT) (GO X)))
PLAY-MOVE
	(C-REACH-FOLLOWING-POSITION (GET C-CURRENT-POSITION 'MOVE-LIST) MV-OUTPUT)
	(GO L)
   X	(CLOSE STREAM)
        (RETURN T)
))

(DEFUN C-INPUT-AGB-GAME-FROM-FILE (C-INPUT-FILE)
  (PROG (STREAM STRING CH IDX MV-OUTPUT LETTER-SEEN)
	(SETQ STREAM (OPEN C-INPUT-FILE '(READ)))
	(SETQ STRING (MAKE-ARRAY NIL 'ART-STRING #o50 NIL '(0)))
    L0  (COND ((NULL (SETQ CH (FUNCALL STREAM 'TYI)))
	       (GO X))
	      ((NOT (= CH #/1))    ;FLUSH HEADER, ETC
	       (GO L0)))
    L	(STORE-ARRAY-LEADER 0 STRING 0)
    	(SETQ LETTER-SEEN NIL)
    L1	(COND ((NULL (SETQ CH (FUNCALL STREAM 'TYI)))
	       (GO X))
	      ((NOT (MEMQ CH '(#o40 #o215 #o211 #o212)))
	       (COND ((AND (>= CH #/A)
			   (<= CH #/Z))
		      (SETQ LETTER-SEEN T)))
	       (ARRAY-PUSH STRING CH)
	       (GO L1)))
    	(COND ((OR (ZEROP (ARRAY-ACTIVE-LENGTH STRING))
		   (NULL LETTER-SEEN))     ;THIS FLUSHES MOVE NUMBERS, RANDOM TIMES, ETC
	       (GO L))
	      ((STRING-EQUAL STRING "TOTAL")  ;FLUSH ON TOTAL S LINE
	       (GO X)))
	(SETQ IDX 0)
	(MULTIPLE-VALUE (MV-OUTPUT IDX)
			(C-INPUT-MOVE 'ALGEBRADIC  
				      STRING 
				      IDX))
	(COND ((NUMBERP MV-OUTPUT) (GO PLAY-MOVE))
	      (MV-OUTPUT (PRIN1 "Error ") (PRIN1 MV-OUTPUT) (GO X)))
PLAY-MOVE
	(C-REACH-FOLLOWING-POSITION (GET C-CURRENT-POSITION 'MOVE-LIST) MV-OUTPUT)
	(GO L)
   X	(CLOSE STREAM)
        (RETURN T)
))

(DEFUN C-WRITE-GAME (GM C-OUTPUT-FILE)  ;WRITE GAME COMPLETE WITH ANNOTATIONS.
  (PROG (STREAM GMLIST SIDE TEM)  ;IF FILE = NIL, OUTPUT TO STANDARD-OUTPUT
	(COND ((NULL GM) (SETQ GM C-CURRENT-GAME-NAME)))
	(COND ((NULL (SETQ GMLIST (GET GM 'GAME-MOVES)))
	       (ERROR GM "NO MOVES")))
	(COND ((NULL C-OUTPUT-FILE)
	       (SETQ STREAM STANDARD-OUTPUT))
	      (T (SETQ STREAM (OPEN C-OUTPUT-FILE '(WRITE)))))
	(C-ALLOCATE-SCRATCH-BOARD-STRUCTURES (* (LENGTH GMLIST) C-GAME-NQS))
	((LAMBDA (PIECE-ARRAY BOARD-ARRAY GAME-ARRAY ;BOARD-PAWN-DATA-ARRAY 
		  C-CURRENT-POSITION)
	  (PROG NIL 
	     (INITIALIZE-BOARD-TO-INITIAL-POSITION)
	     (TERPRI STREAM)
	     (PRINC "(C-READ-GAME " STREAM)  ;)
	     (PRIN1 GM STREAM)
	     (PRINC " " STREAM)
	     (PRIN1 (GET GM 'COMMENT) STREAM)
      L	     (SETQ SIDE (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY)))
	     (TERPRI STREAM)
      	     (COND ((NULL GMLIST) (RETURN NIL))		;RETURNS FROM INNER PROG ONLY
		   ((NOT (EQ (CAAR GMLIST) 'MOVE))
		    (PRINC "(INSERTION " STREAM)  	;)
		    (PRIN1 (CAR GMLIST) STREAM)
;(
		    (PRINC ")" STREAM)
		    (GO E1)))
	     (PRINC "((" STREAM)  ;))
	     (C-OUTPUT-ANNOTATION-MOVE C-CURRENT-POSITION (CDAR GMLIST) STREAM)
;(
	     (PRINC ")" STREAM)
	     (C-READ-GAME-PLAY-MOVE (CAR GMLIST))
	     (COND ((AND (SETQ TEM (GET C-CURRENT-POSITION 'STATIC-ANNOTATIONS))
			 (SETQ TEM (ASSQ GM TEM)))
		    (C-WRITE-STATIC-ANNOTATIONS (CDR TEM) STREAM)))
	     (COND ((AND (SETQ TEM (GET C-CURRENT-POSITION 'DYNAMIC-ANNOTATIONS))
			 (SETQ TEM (ASSQ GM TEM)))
		    (C-WRITE-DYNAMIC-ANNOTATIONS (CDR TEM) C-CURRENT-POSITION STREAM)))
;(
	     (PRINC ")" STREAM)
      E1     (SETQ GMLIST (CDR GMLIST))
	     (GO L) ))
	 SCRATCH-PIECE-ARRAY SCRATCH-BOARD-ARRAY SCRATCH-GAME-ARRAY 
	 ;SCRATCH-BOARD-PAWN-DATA-ARRAY
	 C-CURRENT-POSITION)
;(
	(PRINC "  )" STREAM)
	(TERPRI STREAM)
	(COND (C-OUTPUT-FILE (CLOSE STREAM)))
))

(DEFUN C-PRINT-GAME (STREAM &OPTIONAL GM PLY &AUX GMLIST SIDE PPLYN)
	(COND ((NULL GM) (SETQ GM C-CURRENT-GAME-NAME)))
	(COND ((NULL (SETQ GMLIST (GET GM 'GAME-MOVES)))
	       (ERROR GM "NO MOVES")))
	(C-ALLOCATE-SCRATCH-BOARD-STRUCTURES (* (LENGTH GMLIST) C-GAME-NQS))
	((LAMBDA (PIECE-ARRAY BOARD-ARRAY GAME-ARRAY ;BOARD-PAWN-DATA-ARRAY 
		  C-CURRENT-POSITION)
	  (PROG NIL 
	     (INITIALIZE-BOARD-TO-INITIAL-POSITION)
	     (TERPRI STREAM)
	     (PRINC GM STREAM)
	   L (SETQ SIDE (LOGAND 1 (SETQ PPLYN (GAME-PLY-NUMBER GAME-ARRAY))))
	     (COND ((NULL GMLIST) (RETURN NIL))
		   ((NOT (EQ (CAAR GMLIST) 'MOVE))
		    (SETQ GMLIST (CDR GMLIST))
		    (GO L)))
	     (COND ((OR (NULL PLY)
			(>= PPLYN PLY))
		    (COND ((ZEROP SIDE)
			   (TERPRI STREAM)
			   (C-PRINT-DECIMAL (1+ (// PPLYN 2)) STREAM)
			   (PRINC "  " STREAM))
			  (T (PRINC "   " STREAM)))
		    (C-PRINT-MOVE (CDAR GMLIST) SIDE NIL STREAM)))
;	     (C-PLAY-MOVE (CADAR GMLIST) (CADDAR GMLIST) (CAR (CDDDAR GMLIST)))
	     (C-READ-GAME-PLAY-MOVE (CAR GMLIST))
	     (SETQ GMLIST (CDR GMLIST))
	     (GO L)))
	 SCRATCH-PIECE-ARRAY SCRATCH-BOARD-ARRAY SCRATCH-GAME-ARRAY 
	 ;SCRATCH-BOARD-PAWN-DATA-ARRAY
	 C-CURRENT-POSITION))

(DEFUN C-STEP-GAME (&OPTIONAL GM (PLY 0) &AUX GMLIST SIDE)
	(COND ((NULL GM) (SETQ GM C-CURRENT-GAME-NAME)))
	(COND ((NULL (SETQ GMLIST (GET GM 'GAME-MOVES)))
	       (ERROR GM "NO MOVES")))
	(C-ALLOCATE-SCRATCH-BOARD-STRUCTURES (* (LENGTH GMLIST) C-GAME-NQS))
	((LAMBDA (PIECE-ARRAY BOARD-ARRAY GAME-ARRAY ;BOARD-PAWN-DATA-ARRAY 
		  C-CURRENT-POSITION)
	  (PROG (CH) 
	     (INITIALIZE-BOARD-TO-INITIAL-POSITION)
	     (TERPRI)
        IL   (COND ((NOT (= (GAME-PLY-NUMBER GAME-ARRAY) PLY))
		    (COND ((C-STEP-GAME-NEXT GMLIST)
			   (GO IL)))))
	TOP (C-DISPLAY-BOARD WHITE-AT-TOP-P)
            (SETQ CH (KBD-TYI))
	     (COND ((= CH #o201)				;BREAK
		    (RETURN NIL))
		   ((= CH #o40)				;SPACE
		    (C-STEP-GAME-NEXT GMLIST))
		   ((= CH #/U)
		    (C-COM-U 1)))
	     (GO TOP)))
	 SCRATCH-PIECE-ARRAY SCRATCH-BOARD-ARRAY SCRATCH-GAME-ARRAY 
	 ;SCRATCH-BOARD-PAWN-DATA-ARRAY
	 C-CURRENT-POSITION))

(DEFUN C-STEP-GAME-NEXT (GMLIST)
  (PROG (CPLY)
	(SETQ CPLY (GAME-PLY-NUMBER GAME-ARRAY))
   L    (COND ((NULL GMLIST) (RETURN NIL))
   	      ((NOT (EQ (CAAR GMLIST) 'MOVE))
	       (SETQ GMLIST (CDR GMLIST))
	       (GO L))
	      ((ZEROP CPLY)
	       (GO P)))
	(SETQ CPLY (1- CPLY))
	(SETQ GMLIST (CDR GMLIST))
	(GO L)
   P    (C-READ-GAME-PLAY-MOVE (CAR GMLIST))
	(RETURN T)))

(defun c-print-variation (var-list-1 stream)   ;print variation list from current-position
  (do ((plys 0)
       (side (logand 1 (game-ply-number game-array))
	     (logand 1 (game-ply-number game-array)))
       (var-list var-list-1 (cdr var-list)))
      ((null var-list) 
       (c-com-u plys)
       nil)
    (cond ((not (eq (caar var-list) 'move)))
	  (t (c-print-move (cdar var-list) side nil stream)
	     (princ " " stream)
	     (c-read-game-play-move (car var-list))
	     (setq plys (1+ plys))))))



;(DEFUN C-PRINT-VARIATION (VAR-LIST STREAM)   ;PRINT VARIATION LIST FROM CURRENT-POSITION
; (PROG (PLYS SIDE)
;        (SETQ PLYS 0)
;   L 	(SETQ SIDE (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY)))
;	(COND ((NULL VAR-LIST) 
;	       (C-COM-U PLYS)
;	       (RETURN NIL))
;	      ((NOT (EQ (CAAR VAR-LIST) 'MOVE))
;	       (SETQ VAR-LIST (CDR VAR-LIST))
;	       (GO L)))
;	(C-PRINT-MOVE (CDAR VAR-LIST) SIDE NIL STREAM)
;	(PRINC " " STREAM)
;	(C-READ-GAME-PLAY-MOVE (CAR VAR-LIST))
;	(SETQ PLYS (1+ PLYS))
;	(SETQ VAR-LIST (CDR VAR-LIST))
;	(GO L)))

;CANT REALLY PLAY INTO VARIATION SINCE MOVES ARE FOR OTHER SIDE.  DO THE BEST
; YOU CAN.
(defun c-print-other-side-variation (var-list stream)
  (do ((side (logxor 1 (logand 1 (game-ply-number game-array)))
	     (logxor side 1))
       (var-list-1 var-list (cdr var-list-1)))
      ((null var-list-1) NIL)
    (c-print-move (cdar var-list-1) side nil stream)
    (princ " " stream)))

;(DEFUN C-PRINT-OTHER-SIDE-VARIATION (VAR-LIST STREAM)
;  (PROG (SIDE)
; 	(SETQ SIDE (LOGXOR 1 (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY))))
;   L	(COND ((NULL VAR-LIST) (RETURN NIL)))
;   	(C-PRINT-MOVE (CDAR VAR-LIST) SIDE NIL STREAM)
;	(PRINC " " STREAM)
;	(SETQ SIDE (LOGXOR SIDE 1))
;	(SETQ VAR-LIST (CDR VAR-LIST))
;	(GO L)))

(defun c-print-move (mv side mv-list stream)
 (prog (mv-pc to-sq code twn-array capt-pc)
       (setq twn-array (piece-type-wood-number-array piece-array))
       (cond ((numberp mv)
	      (setq mv-pc (ar-1 mv-list (+ mv c-mvl-moving-pc))
		    to-sq (ar-1 mv-list (+ mv c-mvl-to-sq))
		    code  (ar-1 mv-list (+ mv c-mvl-code))))
	     (t (setq mv-pc (car mv)
		      to-sq (cadr mv)
		      code (caddr mv))))
       (cond ((eq code 'castles-king)
	      (return (princ "o-o" stream)))
	     ((eq code 'castles-queen)
	      (return (princ "o-o-o" stream))))
       (princ (ar-1 type-wood-letter (ar-1 twn-array mv-pc)) stream)
       (princ "//" stream)
       (c-print-square (ar-1 piece-array mv-pc) side stream)
       (cond ((eq code 'en-passent)
	      (return (princ "xpep" stream)))
	      ((= (setq capt-pc (ar-1 board-array to-sq))
		 square-vacant)
	      (princ "-" stream))
	     ((< capt-pc piece-array-size)
	      (princ "x" stream)
	      (princ (ar-1 type-wood-letter (ar-1 twn-array capt-pc)) stream)
	      (princ "//" stream)))
       (c-print-square to-sq side stream)
))

(DEFUN C-PRINT-SQUARE (SQ SIDE STREAM)
 (PROG (RANK) 
       (PRINC (AR-1 C-FILE-NAMES (AR-1 C-BOARD-FILE-NUMBER SQ)) STREAM)
       (SETQ RANK (AR-1 C-BOARD-WHITE-RANK-NUMBER SQ))
       (COND ((NOT (ZEROP SIDE))
	      (SETQ RANK (- 9 RANK))))
       (C-PRINT-DECIMAL RANK STREAM)))

(DEFUN C-PRINT-DECIMAL (NUM STREAM)
       ((LAMBDA (BASE *NOPOINT)
	  (PRINC NUM STREAM))
	10. T))

(DEFUN C-PRINT-PIECE-ATTACKS (SQ &AUX PAA)
       (SETQ PAA (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ))
       (DO I 0 (1+ I) (= I PIECE-ARRAY-SIZE)
	   (COND ((NOT (ZEROP (AR-1 PAA I)))
		  (C-OUTPUT-PIECE I STANDARD-OUTPUT)))))

(DEFUN C-PRINT-LEGAL-MOVES (&OPTIONAL SIDE) 
   (PROG (MOVE-LIST IDX LIM PROP)
	 (COND ((NULL SIDE)
		(SETQ SIDE (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY)))))
	 (SETQ PROP (COND ((= SIDE (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY)))
			   'MOVE-LIST)
			  (T 'HIS-MOVE-LIST)))
	 (COND ((NULL (SETQ MOVE-LIST (GET C-CURRENT-POSITION PROP)))
		(RETURN NIL)))
	 (SETQ IDX 0 LIM (ARRAY-LEADER MOVE-LIST 0))
      L  (COND ((NOT (< IDX LIM)) (RETURN T)))
         (C-PRINT-MOVE-FROM-MOVE-LIST MOVE-LIST IDX)
	 (SETQ IDX (+ IDX C-MVL-NQS))
	 (GO L)))

(DEFUN C-PRINT-LIST-OF-MOVE-INDICES (MOVE-LIST LST &OPTIONAL (STREAM STANDARD-OUTPUT))
  (DO ITEM LST (CDR ITEM) (NULL ITEM)
      (C-PRINT-MOVE-FROM-MOVE-LIST MOVE-LIST (CAR ITEM) STREAM)))

(DEFUN C-PRINT-MOVE-FROM-MOVE-LIST (MOVE-LIST IDX &OPTIONAL (STREAM STANDARD-OUTPUT))
  (PROG (TEM CODE)
         (COND ((MEMQ (SETQ CODE (AR-1 MOVE-LIST (+ IDX C-MVL-CODE)))
		      '(CASTLES-KING CASTLES-QUEEN))
		(PRINC CODE STREAM)
		(GO X)))
	 (C-OUTPUT-PIECE (AR-1 MOVE-LIST (+ IDX C-MVL-MOVING-PC))
			STREAM)
	 (C-OUTPUT-SQUARE (AR-1 MOVE-LIST (+ IDX C-MVL-TO-SQ))
			 STREAM)
	 (COND ((SETQ TEM (AR-1 MOVE-LIST (+ IDX C-MVL-CODE)))
		(PRINC TEM STREAM)))
  X	 (PRINC "   " STREAM)))