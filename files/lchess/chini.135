;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LCHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

(DEFUN C-INITIALIZE-STATIC-DATA (&OPTIONAL REINITIALIZE-FLAG &AUX TEM)
       (SETQ BOARD-SIZE 120.)
       (SETQ BOARD-WIDTH 10.)
       (SETQ BOARD-WIDTH*2 20.)
       (SETQ BOARD-WIDTH*3 30.)
       (SETQ BOARD-WIDTH*8 80.)
       (SETQ BOARD-WIDTH*10 100.)
       (SETQ BOARD-WIDTH*16 160.)
       (SETQ BOARD-WIDTH*32 320.)
       (SETQ BOARD-WIDTH*64 640.)
       (SETQ BOARD-WIDTH*128 1280.)

       (SETQ PIECE-ARRAY-SIZE 32.)
       (SETQ SQUARE-OFF-BOARD 128.)		;200
       (SETQ SQUARE-VACANT 64.)			;100
       (SETQ C200-200 #o100200)

       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-RANK-FILE-TO-SQUARE-MAP)))
	      (SETQ C-RANK-FILE-TO-SQUARE-MAP (MAKE-ARRAY NIL 'ART-8B 64.))
	      (DO ((RANK 0 (1+ RANK))
		   (IDX 0))
		  ((= RANK 8))
		  (DO FILE 0 (1+ FILE) (= FILE 8)
		      (AS-1 (+ (* (+ RANK 2) BOARD-WIDTH) (1+ FILE))
			    C-RANK-FILE-TO-SQUARE-MAP 
			    IDX)
		      (SETQ IDX (1+ IDX))))))
       (COND ((NOT (BOUNDP 'C-ANNOTATER))
	      (SETQ C-ANNOTATER NIL)))
       (COND ((OR REINITIALIZE-FLAG
		  (NULL (BOUNDP 'C-BOARD-INC-IN-DIR)))
	      (SETQ C-BOARD-INC-IN-DIR 
		    (INITIALIZE-ARRAY NIL 'ART-Q NIL NIL 
		        '(-1 1 10. -10. 9. 11. -9. -11. ;ART-Q SO - NUMS WIN
			 21. 19. -19. -21. 12. 8. -8. -12.)))))
       (COND ((OR REINITIALIZE-FLAG
		  (NULL (BOUNDP 'C-DIRECTION-NAMES)))
	      (SETQ C-DIRECTION-NAMES
		    (INITIALIZE-ARRAY NIL 'ART-Q NIL NIL
		       '("LRANK" "RRANK" "BFILE" "TFILE" "BRDIAG" "BLDIAG" "TLDIAG" "TRDIAG"
			 "2U1R" "2U1L" "2D1R" "2D1L" "1U2R" "1U2L" "1D2L" "1D2R")))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-M-DISPATCH)))
	      (SETQ C-M-DISPATCH 
		    (INITIALIZE-ARRAY NIL 'ART-Q NIL NIL 
			   '(ERROR C-M-KING C-M-QUEEN C-M-ROOK 
			     C-M-BISHOP C-M-KNIGHT C-M-B-PAWN C-M-W-PAWN)))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-A-DISPATCH)))
	      (SETQ C-A-DISPATCH 
		    (INITIALIZE-ARRAY NIL 'ART-Q NIL NIL 
			   '(ERROR C-M-KING C-A-QUEEN C-A-ROOK 
			     C-A-BISHOP C-M-KNIGHT C-A-B-PAWN C-A-W-PAWN)))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-CAT-DISPATCH)))
	      (SETQ C-CAT-DISPATCH 
		    (INITIALIZE-ARRAY NIL 'ART-Q NIL NIL 
			  '(ERROR CAT-KING CAT-QUEEN CAT-ROOK 
			    CAT-BISHOP CAT-KNIGHT CAT-B-PAWN CAT-W-PAWN)))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-POST-DISPATCH)))
	      (SETQ C-POST-DISPATCH 
		    (INITIALIZE-ARRAY NIL 'ART-Q NIL NIL 
			  '(ERROR C-POST-KING C-POST-QUEEN C-POST-ROOK 
			    C-POST-BISHOP C-POST-KNIGHT C-POST-B-PAWN C-POST-W-PAWN)))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-MO-DISPATCH)))
	      (SETQ C-MO-DISPATCH 
		    (INITIALIZE-ARRAY NIL 'ART-Q NIL NIL 
			  '(ERROR C-MO-KING C-MO-QUEEN C-MO-ROOK 
			    C-MO-BISHOP C-MO-KNIGHT C-MO-B-PAWN C-MO-W-PAWN)))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-FILE-NAMES)))
	      (SETQ C-FILE-NAMES 
		    (INITIALIZE-ARRAY NIL 'ART-Q NIL NIL 
			  '(0 KR KN KB K Q QB QN QR 9)))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-HASH-SQUARE)))
	      (SETQ C-HASH-SQUARE 
		    (MAKE-ARRAY NIL 'ART-Q BOARD-SIZE))
	      (DO ((I 0 (1+ I)))
		  ((= I BOARD-SIZE))
		  (AS-1 (RANDOM) C-HASH-SQUARE I)) ))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-SQUARE-PIECE-ATTACKS-ARRAY)))
	      (SETQ C-SQUARE-PIECE-ATTACKS-ARRAY 
		    (MAKE-ARRAY NIL 'ART-Q BOARD-SIZE))
	      (SETQ C-SQUARE-SIDE-ATTACKS-ARRAY 
		    (MAKE-ARRAY NIL 'ART-Q BOARD-SIZE))
	      (DO I 0 (1+ I) (= I BOARD-SIZE)
		  (AS-1 (SETQ TEM (MAKE-ARRAY NIL 'ART-1B 32.))
			C-SQUARE-PIECE-ATTACKS-ARRAY 
			I)
		  (AS-1 (MAKE-ARRAY NIL 'ART-16B 2 TEM)
			C-SQUARE-SIDE-ATTACKS-ARRAY 
			I))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-BOARD-WHITE-RANK-NUMBER)))
	      (SETQ C-BOARD-WHITE-RANK-NUMBER 
		    (MAKE-ARRAY NIL 'ART-4B BOARD-SIZE))
	      (DO I 0 (1+ I) (= I BOARD-SIZE)
		  (COND ((AND (> I (* 2 BOARD-WIDTH))
			      (< I (* 10. BOARD-WIDTH)))
			 (AS-1 (- (// I BOARD-WIDTH) 1)
			       C-BOARD-WHITE-RANK-NUMBER 
			       I))))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-BOARD-FILE-NUMBER)))
	      (SETQ C-BOARD-FILE-NUMBER 
		    (MAKE-ARRAY NIL 'ART-4B BOARD-SIZE))
	      (DO I 0 (1+ I) (= I BOARD-SIZE)
		  (AS-1 (- 9 (\ I BOARD-WIDTH)) C-BOARD-FILE-NUMBER I)))) 
       (COND ((OR REINITIALIZE-FLAG
		  (NULL (BOUNDP 'C-BOARD-POS-DIAG-NUMBER)))
	      (SETQ C-BOARD-POS-DIAG-NUMBER     ;WKR1 ON DIAG 0,  WKN1 ON 1,  WKB1 ON 2
		    (MAKE-ARRAY NIL 'ART-4B BOARD-SIZE))
	      (DO I 0 (1+ I) (= I BOARD-SIZE)
		  (AS-1 (+ (AR-1 C-BOARD-WHITE-RANK-NUMBER I)
			   (AR-1 C-BOARD-FILE-NUMBER I)
			   -2)
			C-BOARD-POS-DIAG-NUMBER
			I))))
       (COND ((OR REINITIALIZE-FLAG
		  (NULL (BOUNDP 'C-BOARD-NEG-DIAG-NUMBER)))
	      (SETQ C-BOARD-NEG-DIAG-NUMBER	 ;WKR1 ON DIAG 0, WKN1 ON -1, WKR2 ON 1
		    (MAKE-ARRAY NIL 'ART-4B BOARD-SIZE))
	      (DO I 0 (1+ I) (= I BOARD-SIZE)
		  (AS-1 (- (AR-1 C-BOARD-WHITE-RANK-NUMBER I)
			   (AR-1 C-BOARD-FILE-NUMBER I))
			C-BOARD-NEG-DIAG-NUMBER
			I))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-BOARD-SQUARE-NUMBER)))
	      (SETQ C-BOARD-SQUARE-NUMBER 
		    (MAKE-ARRAY NIL 'ART-8B BOARD-SIZE))
	      (DO I 0 (1+ I) (= I BOARD-SIZE)
		  (AS-1 (+ (* (1- (AR-1 C-BOARD-WHITE-RANK-NUMBER I)) 8.)
			   (1- (AR-1 C-BOARD-FILE-NUMBER I)))
			C-BOARD-SQUARE-NUMBER 
			I))))
       (COND ((OR REINITIALIZE-FLAG
		  (NULL (BOUNDP 'SYMBOLIC-WOOD-TYPES)))
	      (SETQ SYMBOLIC-WOOD-TYPES (MAKE-ARRAY NIL 'ART-Q 8.))
	      (DO ((I 0 (1+ I))
		   (TW '(NULL KING QUEEN ROOK BISHOP KNIGHT BLACK-PAWN WHITE-PAWN) (CDR TW)))
		  ((NULL TW))
		(AS-1 (CAR TW) SYMBOLIC-WOOD-TYPES I)
		(PUTPROP (CAR TW) I 'TYPE-WOOD-NUMBER)) ))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'TYPE-WOOD-LETTER)))
	      (SETQ TYPE-WOOD-LETTER 
		    (INITIALIZE-ARRAY NIL 'ART-Q NIL NIL 
		         '(ERROR "K" "Q" "R" "B" "N" "P" "P")))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'INITIAL-TYPE-WOOD-VALUE-ARRAY)))
	      (SETQ INITIAL-TYPE-WOOD-VALUE-ARRAY 
		    (MAKE-ARRAY NIL 'ART-16B 8.))
	      (setq king-material-value (// #o3000 cheops-material-value-factor)
		    queen-material-value (// #o2140 cheops-material-value-factor)
		    rook-material-value (// #o1200 cheops-material-value-factor)
		    bishop-material-value (// #o700 cheops-material-value-factor)
		    knight-material-value (// #o640 cheops-material-value-factor)
		    pawn-material-value (// #o200 cheops-material-value-factor))
	      (DO ((I 0 (1+ I))
		   (VAL '(0 #o3000 #o2140 #o1200 #o700 #o640 #o200 #o200) (CDR VAL)))
		  ((NULL VAL))
	       (AS-1 (CAR VAL) INITIAL-TYPE-WOOD-VALUE-ARRAY I))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'TYPE-WOOD-CHEOPS-VALUE-ARRAY)))
	      (SETQ TYPE-WOOD-CHEOPS-VALUE-ARRAY 
		    (MAKE-ARRAY NIL 'ART-16B 8.))
	      (DO ((I 0 (1+ I))
		   (VAL '(0 254. 70. 40. 28. 26. 8. 8.) (CDR VAL)))
		  ((NULL VAL))
	       (AS-1 (CAR VAL) TYPE-WOOD-CHEOPS-VALUE-ARRAY I))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'INITIAL-TYPE-WOOD-POSITIONAL-FACTOR-ARRAY)))
	      (SETQ INITIAL-TYPE-WOOD-POSITIONAL-FACTOR-ARRAY 
		    (MAKE-ARRAY NIL 'ART-8B 8.))
	      (DO ((I 0 (1+ I))
		   (VAL '(0 1 1 2 3 3 6 6) (CDR VAL)))
		  ((NULL VAL))
	       (AS-1 (CAR VAL) INITIAL-TYPE-WOOD-POSITIONAL-FACTOR-ARRAY I))))
       (C-INITIALIZE-STATIC-DATA-1 REINITIALIZE-FLAG))

(DEFUN C-INITIALIZE-STATIC-DATA-1 (REINITIALIZE-FLAG &AUX TEM)
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-PIECE-IDENTIFICATION-ARRAY)))
	      (SETQ C-PIECE-IDENTIFICATION-ARRAY 
		    (MAKE-ARRAY NIL 'ART-Q 32.))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-PIECE-TEXT-ARRAY)))
	      (SETQ C-PIECE-TEXT-ARRAY 
		    (MAKE-ARRAY NIL 'ART-Q 32.))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'WK)))
	      (DO ((PC '(WQRP WQNP WQBP WQP WKP WKBP WKNP WKRP 
			 WQR WQN WQB WQ WK WKB WKN WKR) 
		       (CDR PC))
		   (TW '(WHITE-PAWN WHITE-PAWN WHITE-PAWN WHITE-PAWN 
			  WHITE-PAWN WHITE-PAWN WHITE-PAWN WHITE-PAWN 
			 ROOK KNIGHT BISHOP QUEEN KING BISHOP KNIGHT ROOK)
		       (CDR TW))
		   (N 0 (1+ N)))
		  ((NULL PC))
		(SET (CAR PC) N)
		(PUTPROP (CAR PC) (GET (CAR TW) 'TYPE-WOOD-NUMBER) 'INITIAL-TYPE-WOOD)
		(AS-1 (STRING-APPEND (SETQ TEM (STRING (CAR PC))) " ")
		      C-PIECE-IDENTIFICATION-ARRAY N)
		(AS-1 (STRING-APPEND (AR-1 TEM 0)
				     (AR-1 TEM (1- (ARRAY-ACTIVE-LENGTH TEM)))
				     32.)
		      C-PIECE-TEXT-ARRAY N) ) ))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'BK)))
	      (DO ((PC '(BQRP BQNP BQBP BQP BKP BKBP BKNP BKRP 
			 BQR BQN BQB BQ BK BKB BKN BKR) 
		       (CDR PC))
		   (TW '(BLACK-PAWN BLACK-PAWN BLACK-PAWN BLACK-PAWN 
			 BLACK-PAWN BLACK-PAWN BLACK-PAWN BLACK-PAWN 
			 ROOK KNIGHT BISHOP QUEEN KING BISHOP KNIGHT ROOK)
		       (CDR TW))
		   (N 16. (1+ N)))
		  ((NULL PC))
		(SET (CAR PC) N)
		(PUTPROP (CAR PC) (GET (CAR TW) 'TYPE-WOOD-NUMBER) 'INITIAL-TYPE-WOOD)
		(AS-1 (STRING-APPEND (SETQ TEM (STRING (CAR PC))) " ")
		      C-PIECE-IDENTIFICATION-ARRAY N)
		(AS-1 (STRING-APPEND (AR-1 TEM 0)
				     (AR-1 TEM (1- (ARRAY-ACTIVE-LENGTH TEM)))
				     32.)
		      C-PIECE-TEXT-ARRAY N) ) ))

       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-SQUARE-IDENTIFICATION-ARRAY)))
	      (SETQ C-SQUARE-IDENTIFICATION-ARRAY 
		    (MAKE-ARRAY NIL 'ART-Q BOARD-SIZE))
	      (DO I 0 (1+ I) (= I BOARD-SIZE)	;SO OFF BOARD SQUARES PRINT AS THEIR NUMBER
		  (AS-1 I C-SQUARE-IDENTIFICATION-ARRAY I))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'WQR1)))
	      (DO RANK 1 (1+ RANK) (= RANK 9)
	       (DO ((FILE '(WQR WQN WQB WQ WK WKB WKN WKR)
			  (CDR FILE))
		    (ALG-FILE '(A B C D E F G H) (CDR ALG-FILE))
		    (FILEN 1 (1+ FILEN))
		    (SQ))
		   ((NULL FILE))
		   (SET (IMPLODE (NCONC (EXPLODEN (CAR FILE)) (LIST (+ RANK 48.))))
			(SETQ SQ (+ (* (+ RANK 1) BOARD-WIDTH)
				    FILEN)))
		   (AS-1 (STRING-APPEND (STRING (CAR ALG-FILE)) (STRING (+ RANK 48.)) " ")
			 C-SQUARE-IDENTIFICATION-ARRAY 
			 SQ) )) ))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'BQR1)))
	      (DO RANK 1 (1+ RANK) (= RANK 9)
	       (DO ((FILE '(BQR BQN BQB BQ BK BKB BKN BKR)
			  (CDR FILE))
		    (FILEN 1 (1+ FILEN)))
		   ((NULL FILE))
		 (SET (IMPLODE (NCONC (EXPLODEN (CAR FILE)) (LIST (+ RANK 48.))))
		      (+ (* (- 10. RANK) BOARD-WIDTH)
			 FILEN)) )) ))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-MAP-TO-CHEOPS-SQUARE)))
	      (SETQ C-MAP-TO-CHEOPS-SQUARE (MAKE-ARRAY NIL 
			'ART-Q BOARD-SIZE))  ;SO OFF BOARD SQUARES WILL BE NIL
	      (DO FILE 0 (1+ FILE) (= FILE 8)
		  (DO RANK 0 (1+ RANK) (= RANK 8)
		      (AS-1 (+ FILE (* RANK 8))
			    C-MAP-TO-CHEOPS-SQUARE 
			    (+ (* (+ RANK 2) BOARD-WIDTH) (1+ FILE)))))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-SQUARE-CENTRALITY-FACTOR-ARRAY)))
	      (SETQ C-SQUARE-CENTRALITY-FACTOR-ARRAY (MAKE-ARRAY NIL 
		       'ART-8B BOARD-SIZE))
	      (DO ((RANK 0 (1+ RANK))
		   (L '( (2 3 4 4 4 4 3 2)
			 (3 6 8 8 8 8 6 3)
			 (4 8 12. 12. 12. 12. 8 4)
			 (4 8 12. 14. 14. 12. 8 4)
			 (4 8 12. 14. 14. 12. 8 4)
			 (4 8 12. 12. 12. 12. 8 4)
			 (3 6 8 8 8 8 6 3)
			 (2 3 4 4 4 4 3 2) ) (CDR L)))
		  ((= RANK 8))
		  (DO ((FILE 0 (1+ FILE))
		       (L1 (CAR L) (CDR L1)))
		      ((= FILE 8))
		      (AS-1 (CAR L1) 
			    C-SQUARE-CENTRALITY-FACTOR-ARRAY 
			    (+ (* (+ RANK 2) BOARD-WIDTH) (1+ FILE)))))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-MAP-TO-LISPM-SQUARE)))
	      (SETQ C-MAP-TO-LISPM-SQUARE (MAKE-ARRAY NIL 
		       'ART-8B #o100))
	      (DO FILE 0 (1+ FILE) (= FILE 8)
		  (DO RANK 0 (1+ RANK) (= RANK 8)
		      (AS-1 (+ (* (+ RANK 2) BOARD-WIDTH) (1+ FILE))
			    C-MAP-TO-LISPM-SQUARE 
			    (+ (* RANK #o10) FILE))))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-MAP-TO-CHEOPS-PIECE)))
	      (SETQ C-MAP-TO-CHEOPS-PIECE
		    (INITIALIZE-ARRAY NIL 'ART-8B NIL NIL 
				      '(#o27 #o25 #o23 #o21 #o20 #o22 #o24 #o26
					#o43 #o47 #o45 #o41 #o40 #o44 #o46 #o42
					#o37 #o35 #o33 #o31 #o30 #o32 #o34 #o36
					#o53 #o57 #o55 #o51 #o50 #o54 #o56 #o52) ))))
       (COND ((OR REINITIALIZE-FLAG 
		  (NULL (BOUNDP 'C-MAP-TO-LISPM-PIECE)))
	      (SETQ C-MAP-TO-LISPM-PIECE
		    (INITIALIZE-ARRAY
		      NIL 'ART-Q NIL NIL 
		      '( NIL NIL NIL NIL NIL NIL NIL NIL   ;WHITE NULLS
			NIL NIL NIL NIL NIL NIL NIL NIL   ;BLACK NULLS
			#o4   #o3   #o5   #o2   #o6   #o1   #o7   #o0    ;WHITE PS
			#o24  #o23  #o25  #o22  #o26  #o21  #o27  #o20    ;BLACK PS
			#o14  #o13  #o17  #o10  #o15  #o12  #o16  #o11    ;WHITE PCS
			#o34  #o33  #o37  #o30  #o35  #o32  #o36  #o31    ;BLACK PCS
			#o4   #o3   #o5   #o2   #o6   #o1   #o7   #o0    ;WHITE PCS
						;(ANOTHER COPY SINCE LISPM USES THE
			#o24  #o23  #o25  #o22  #o26  #o21  #o27  #o20    ;BLACK PCS
						;SAME PC NUMBERS FOR PROMOTED P S)
			) ))))
       (COND ((OR REINITIALIZE-FLAG
		  (NULL (BOUNDP 'C-PIECE-INITIAL-SQUARE)))
	      (SETQ C-PIECE-INITIAL-SQUARE
		    (MAKE-ARRAY NIL 'ART-Q PIECE-ARRAY-SIZE))
	      (DO ((PC '(WQR WQN WQB WQ WK WKB WKN WKR) (CDR PC))
		   (SQ WQR1 (1+ SQ)))
		  ((NULL PC))
		  (AS-1 SQ C-PIECE-INITIAL-SQUARE (SYMEVAL (CAR PC))))
	      (DO ((PC '(WQRP WQNP WQBP WQP WKP WKBP WKNP WKRP) (CDR PC))
		   (SQ WQR2 (1+ SQ)))
		  ((NULL PC))
		  (AS-1 SQ C-PIECE-INITIAL-SQUARE (SYMEVAL (CAR PC))))
	      (DO ((PC '(BQRP BQNP BQBP BQP BKP BKBP BKNP BKRP) (CDR PC))
		   (SQ BQR2 (1+ SQ)))
		  ((NULL PC))
		  (AS-1 SQ C-PIECE-INITIAL-SQUARE (SYMEVAL (CAR PC))))
	      (DO ((PC '(BQR BQN BQB BQ BK BKB BKN BKR) (CDR PC))
		   (SQ BQR1 (1+ SQ)))
		  ((NULL PC))
		  (AS-1 SQ C-PIECE-INITIAL-SQUARE (SYMEVAL (CAR PC))))))
)


(DEFUN C-FIND-DIRECTION-OF-INC (DIR-INC)
  (PROG (IDX)
	(SETQ IDX 0)
     L	(COND ((= DIR-INC (AR-1 C-BOARD-INC-IN-DIR IDX))
	       (RETURN IDX))
	      ((< IDX 16.)
	       (SETQ IDX (1+ IDX))
	       (GO L)))
        (RETURN NIL)
))

(DEFUN DIAGONAL-P (DIR)
   (NOT (OR (= (SETQ DIR (ABS DIR)) 1)
	    (= DIR BOARD-WIDTH))))

(DEFUN C-GET-SQUARE-TO-SQUARE-DIR (S1 S2)
   (COND ((< S1 S2)
	  (COND ((= (AR-1 C-BOARD-WHITE-RANK-NUMBER S1)
		    (AR-1 C-BOARD-WHITE-RANK-NUMBER S2))
		 1)
		((= (AR-1 C-BOARD-FILE-NUMBER S1)
		    (AR-1 C-BOARD-FILE-NUMBER S2))
		 BOARD-WIDTH)
		((= (AR-1 C-BOARD-POS-DIAG-NUMBER S1)
		    (AR-1 C-BOARD-POS-DIAG-NUMBER S2))
		 (1+ BOARD-WIDTH))
		((= (AR-1 C-BOARD-NEG-DIAG-NUMBER S1)
		    (AR-1 C-BOARD-NEG-DIAG-NUMBER S2))
		 (1- BOARD-WIDTH))))
	 (T 
	   (COND ((= (AR-1 C-BOARD-WHITE-RANK-NUMBER S1)
		    (AR-1 C-BOARD-WHITE-RANK-NUMBER S2))
		 -1)
		((= (AR-1 C-BOARD-FILE-NUMBER S1)
		    (AR-1 C-BOARD-FILE-NUMBER S2))
		 (MINUS BOARD-WIDTH))
		((= (AR-1 C-BOARD-POS-DIAG-NUMBER S1)
		    (AR-1 C-BOARD-POS-DIAG-NUMBER S2))
		 (MINUS (1+ BOARD-WIDTH)))
		((= (AR-1 C-BOARD-NEG-DIAG-NUMBER S1)
		    (AR-1 C-BOARD-NEG-DIAG-NUMBER S2))
		 (MINUS (1- BOARD-WIDTH)))))))

(DEFUN WHITE-P (PC-NUM) (ZEROP (LOGAND 16. PC-NUM)))

(DEFUN PAWN-P (PC-NUM)
       (> (AR-1 (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY) PC-NUM)
	  5))

(DEFUN WHITE-TO-MOVE-P NIL (ZEROP (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY))))

(DEFUN WHITE-KING-IN-CHECK-P NIL 
	(COND ((NULL (BOARD-CAT-DATA-VALID BOARD-ARRAY)) 
	       (C-CALCULATE-ATTACKS)))
	(NOT (ZEROP (AR-1 (BOARD-BLACK-ATTACKS-ARRAY BOARD-ARRAY)
			  (AR-1 PIECE-ARRAY WK)))))

(DEFUN BLACK-KING-IN-CHECK-P NIL 
       	(COND ((NULL (BOARD-CAT-DATA-VALID BOARD-ARRAY))
	       (C-CALCULATE-ATTACKS)))
	(NOT (ZEROP (AR-1 (BOARD-WHITE-ATTACKS-ARRAY BOARD-ARRAY)
			  (AR-1 PIECE-ARRAY BK)))))

(DEFUN CURRENT-MATERIAL NIL 
       (- (+ (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
	     (PIECE-WHITE-MAT-PCS PIECE-ARRAY))
	  (+ (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
	     (PIECE-BLACK-MAT-PCS PIECE-ARRAY))))

(DEFUN CURRENT-MATERIAL-CHEOPS-UNITS NIL 
       (// (- (+ (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
		 (PIECE-WHITE-MAT-PCS PIECE-ARRAY))
	      (+ (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
		 (PIECE-BLACK-MAT-PCS PIECE-ARRAY)))
	   CHEOPS-MATERIAL-VALUE-FACTOR))

(DEFUN C-ALLOCATE-SCRATCH-BOARD-STRUCTURES (&OPTIONAL GAME-LENGTH)
       (COND ((OR (NOT (BOUNDP 'SCRATCH-BOARD-ARRAY))
		  (NULL (ARRAYP SCRATCH-BOARD-ARRAY))
		  (AND GAME-LENGTH 
		       (< (ARRAY-LENGTH SCRATCH-BOARD-ARRAY) GAME-LENGTH)))
	      ((LAMBDA (PIECE-ARRAY BOARD-ARRAY GAME-ARRAY) ;BOARD-PAWN-DATA-ARRAY
		 (COND ((OR (NULL GAME-LENGTH)
			    (< GAME-LENGTH (* C-GAME-DEFAULT-LENGTH C-GAME-NQS)))
			(SETQ GAME-LENGTH (* C-GAME-DEFAULT-LENGTH C-GAME-NQS))))
		 (C-ALLOCATE-BOARD-STRUCTURES GAME-LENGTH)
		 (SETQ SCRATCH-PIECE-ARRAY PIECE-ARRAY)
		 (SETQ SCRATCH-BOARD-ARRAY BOARD-ARRAY)
		 (SETQ SCRATCH-GAME-ARRAY GAME-ARRAY) 
	         ;(SETQ SCRATCH-BOARD-PAWN-DATA-ARRAY BOARD-PAWN-DATA-ARRAY)
		 )
	       NIL NIL NIL))))

(DEFUN C-ALLOCATE-BOARD-STRUCTURES (&OPTIONAL GAME-LENGTH)
 (PROG NIL 
	(COND ((NULL GAME-LENGTH)
	       (SETQ GAME-LENGTH (* C-GAME-DEFAULT-LENGTH C-GAME-NQS))))
	(SETQ BOARD-ARRAY 
	      (MAKE-ARRAY NIL 'ART-8B BOARD-SIZE NIL 
		(BOARD-ARRAY-ARRAY-LEADER-SIZE) NIL 'BOARD-ARRAY))
	(SETQ GAME-ARRAY 
	      (MAKE-ARRAY NIL 'ART-Q GAME-LENGTH NIL 
		(GAME-ARRAY-ARRAY-LEADER-SIZE) NIL 'GAME-ARRAY))
	(SETQ PIECE-ARRAY 
	      (MAKE-ARRAY NIL 'ART-8B PIECE-ARRAY-SIZE NIL 
		(PIECE-ARRAY-ARRAY-LEADER-SIZE) NIL 'PIECE-ARRAY))
;	(SETQ BOARD-PAWN-DATA-ARRAY 
;	      (MAKE-ARRAY NIL 'ART-Q 8 NIL 
;		(BOARD-PAWN-DATA-ARRAY-ARRAY-LEADER-SIZE) NIL 'BOARD-PAWN-DATA))
	(SETF (BOARD-WHITE-ATTACKS-ARRAY BOARD-ARRAY)
	      (MAKE-ARRAY NIL 'ART-8B BOARD-SIZE))
	(SETF (BOARD-BLACK-ATTACKS-ARRAY BOARD-ARRAY)
	      (MAKE-ARRAY NIL 'ART-8B BOARD-SIZE))
	(SETF (BOARD-TYPE-WOOD-VALUE-ARRAY BOARD-ARRAY)
	      INITIAL-TYPE-WOOD-VALUE-ARRAY)
	(SETF (BOARD-HASH BOARD-ARRAY) 0)
;	(SETF (BOARD-SQUARE-CONTROL-ARRAY BOARD-ARRAY)
;	      (MAKE-ARRAY NIL 'ART-Q BOARD-SIZE))
;	(SETF (BOARD-WHITE-SWAPOUT-LIST-ARRAY BOARD-ARRAY)
;	      (C-ALLOCATE-SWAPOUT-LIST-ARRAY))
;	(SETF (BOARD-BLACK-SWAPOUT-LIST-ARRAY BOARD-ARRAY)
;	      (C-ALLOCATE-SWAPOUT-LIST-ARRAY))
;	(SETF (BOARD-CONTROL-WARNING-ARRAY BOARD-ARRAY)
;	      (MAKE-ARRAY NIL 'ART-Q BOARD-SIZE))
	(INITIALIZE-PIECE-ARRAY-STATIC-DATA)
;	(INITIALIZE-BOARD-PAWN-ARRAY-STATIC-DATA)
	(SETF (BOARD-CAT-DATA-VALID BOARD-ARRAY) NIL)
;	(SETF (BOARD-SQUARE-CONTROL-DATA-VALID BOARD-ARRAY) NIL)
	(SETF (BOARD-WHITE-IMPORTANCE-ARRAY BOARD-ARRAY)
	      (MAKE-ARRAY NIL 'ART-16B BOARD-SIZE))
	(SETF (BOARD-BLACK-IMPORTANCE-ARRAY BOARD-ARRAY)
	      (MAKE-ARRAY NIL 'ART-16B BOARD-SIZE))
	(RETURN T)
))

;(DEFUN C-ALLOCATE-SWAPOUT-LIST-ARRAY (&AUX ARY)
;       (SETQ ARY (MAKE-ARRAY NIL 'ART-Q BOARD-SIZE))
;       (DO I 0 (1+ I) (= I BOARD-SIZE)
;	   (AS-1 (MAKE-ARRAY NIL 'ART-Q-LIST 4 NIL 1)
;		 ARY 
;		 I))
;       ARY)

;(DEFUN INITIALIZE-BOARD-PAWN-ARRAY-STATIC-DATA NIL 
; (PROG NIL 
;       (SETF (BOARD-PAWN-DATA-WHITE-PAWNS-ON-FILE-ARRAY BOARD-PAWN-DATA-ARRAY)
;	     (MAKE-ARRAY NIL 'ART-4B 10.))
;       (SETF (BOARD-PAWN-DATA-BLACK-PAWNS-ON-FILE-ARRAY BOARD-PAWN-DATA-ARRAY)
;	     (MAKE-ARRAY NIL 'ART-4B 10.))
;       (SETF (BOARD-PAWN-DATA-WHITE-PAWN-GROUP-NUMBER-ARRAY BOARD-PAWN-DATA-ARRAY)
;	     (MAKE-ARRAY NIL 'ART-Q 9))
;       (SETF (BOARD-PAWN-DATA-BLACK-PAWN-GROUP-NUMBER-ARRAY BOARD-PAWN-DATA-ARRAY)
;	     (MAKE-ARRAY NIL 'ART-Q 9))
;       (DO I 0 (1+ I) (= I 8)
;	   (AS-1 (INITIALIZE-PAWN-GROUP-ARRAY)
;		 BOARD-PAWN-DATA-ARRAY 
;		 I))))

;(DEFUN INITIALIZE-PAWN-GROUP-ARRAY NIL 
;       (MAKE-ARRAY NIL 'ART-Q (PAWN-GROUP-ARRAY-ARRAY-SIZE)))

(DEFUN INITIALIZE-PIECE-ARRAY-STATIC-DATA NIL 
 (PROG NIL 
       (SETF (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
	     (MAKE-ARRAY NIL 'ART-Q PIECE-ARRAY-SIZE))
       (SETF (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY)
	     (MAKE-ARRAY NIL 'ART-4B PIECE-ARRAY-SIZE))
       (SETF (PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY)
	     (MAKE-ARRAY NIL 'ART-4B PIECE-ARRAY-SIZE))
;       (SETF (PIECE-TYPE-WOOD-LETTER-ARRAY PIECE-ARRAY)
;	     (MAKE-ARRAY NIL 'ART-Q PIECE-ARRAY-SIZE))
       (SETF (PIECE-VALUE-ARRAY PIECE-ARRAY)
	     (MAKE-ARRAY NIL 'ART-16B PIECE-ARRAY-SIZE))
       (SETF (PIECE-NMOVES-ARRAY PIECE-ARRAY)
	     (MAKE-ARRAY NIL 'ART-8B PIECE-ARRAY-SIZE))
       (SETF (PIECE-DEVELOPMENT-VALUE-ARRAY PIECE-ARRAY)
	     (MAKE-ARRAY NIL 'ART-32B PIECE-ARRAY-SIZE))
;       (SETF (PIECE-PAWN-DATA-ARRAY PIECE-ARRAY)
;	     (C-ALLOCATE-PAWN-DATA-ARRAYS))
;       (SETF (PIECE-KEY-SQUARES-ARRAY PIECE-ARRAY)
;	     (C-ALLOCATE-KEY-SQUARES-ARRAYS))
       (SETF (PIECE-POSITIONAL-WEIGHTING-FACTOR-ARRAY PIECE-ARRAY)
	     (MAKE-ARRAY NIL 'ART-8B PIECE-ARRAY-SIZE))
       (RETURN T)
))

;(DEFUN C-ALLOCATE-KEY-SQUARES-ARRAYS NIL 
; (PROG (KSQA)
;       (SETQ KSQA (MAKE-ARRAY NIL 'ART-Q PIECE-ARRAY-SIZE))
;       (DO I 0 (1+ I) (= I PIECE-ARRAY-SIZE)
;	   (AS-1 (MAKE-ARRAY NIL 'ART-Q-LIST 5 NIL 1)
;		 KSQA 
;		 I))
;       (RETURN KSQA)))

;(DEFUN C-ALLOCATE-PAWN-DATA-ARRAYS NIL  
; (PROG (PAWN-DATA-ARRAY)
;       (SETQ PAWN-DATA-ARRAY 
;	     (MAKE-ARRAY NIL 'ART-Q PIECE-ARRAY-SIZE))
;       (DO I 0 (1+ I) (= I #o10)
;	   (AS-1 (MAKE-ARRAY NIL 'ART-Q (PAWN-DATA-ARRAY-ARRAY-SIZE))
;		 PAWN-DATA-ARRAY 
;		 I))
;       (DO I #o20 (1+ I) (= I #o30)
;	   (AS-1 (MAKE-ARRAY NIL 'ART-Q (PAWN-DATA-ARRAY-ARRAY-SIZE))
;		 PAWN-DATA-ARRAY 
;		 I))
;       (RETURN PAWN-DATA-ARRAY)))


(DEFUN C-INITIALIZE (&OPTIONAL RE-INIT) 
 (PROG NIL 
       (C-INITIALIZE-STATIC-DATA RE-INIT)
       (C-HASH-INITIALIZE)
       (C-ALLOCATE-BOARD-STRUCTURES)
       (INITIALIZE-BOARD-TO-INITIAL-POSITION)
       (REMPROP 'CHESS-INITIAL-POSITION 'MOVE-LIST)
       (SETQ C-CURRENT-GAME-NAME NIL)
))


(DEFUN INITIALIZE-BOARD-TO-INITIAL-POSITION NIL 
 (WIPE-BOARD BOARD-ARRAY)
 (WIPE-PIECE-ARRAY PIECE-ARRAY)
 (DO ((PC '(WQR WQN WQB WQ WK WKB WKN WKR) (CDR PC))
      (SQ WQR1 (1+ SQ)))
     ((NULL PC))
   (C-PUT (CAR PC) SQ))
 (DO ((PC '(WQRP WQNP WQBP WQP WKP WKBP WKNP WKRP) (CDR PC))
      (SQ WQR2 (1+ SQ)))
     ((NULL PC))
   (C-PUT (CAR PC) SQ))
 (DO ((PC '(BQRP BQNP BQBP BQP BKP BKBP BKNP BKRP) (CDR PC))
      (SQ BQR2 (1+ SQ)))
     ((NULL PC))
   (C-PUT (CAR PC) SQ))
 (DO ((PC '(BQR BQN BQB BQ BK BKB BKN BKR) (CDR PC))
      (SQ BQR1 (1+ SQ)))
     ((NULL PC))
   (C-PUT (CAR PC) SQ))
 (SETF (BOARD-GHOST-LOCATION BOARD-ARRAY) 0)
 (SETQ C-CURRENT-POSITION 'CHESS-INITIAL-POSITION)
 (SETF (GAME-PLY-NUMBER GAME-ARRAY) 0)
 (SETF (GAME-FILL-POINTER GAME-ARRAY) 0)
 (SETF (BOARD-CAT-DATA-VALID BOARD-ARRAY) NIL)
;(SETF (BOARD-SQUARE-CONTROL-DATA-VALID BOARD-ARRAY) NIL)
 (C-SET-WHITE-SQUARE-IMPORTANCE)
 (C-SET-BLACK-SQUARE-IMPORTANCE)
 )

(DEFUN C-SET-WHITE-SQUARE-IMPORTANCE NIL 
  (DO ((IA (BOARD-WHITE-IMPORTANCE-ARRAY BOARD-ARRAY))
       (RANK 0 (1+ RANK)))
       ((= RANK 8))
	(DO ((FILE 0 (1+ FILE))
	     (SQ))
	    ((= FILE 8))
	    (SETQ SQ (+ (* (+ RANK 2) BOARD-WIDTH) (1+ FILE)))
	    (AS-1 (+ (LSH (AR-1 C-SQUARE-CENTRALITY-FACTOR-ARRAY SQ) 1)
		     (1+ RANK))
		  IA 
		  SQ))))

(DEFUN C-SET-BLACK-SQUARE-IMPORTANCE NIL 
  (DO ((IA (BOARD-BLACK-IMPORTANCE-ARRAY BOARD-ARRAY))
       (RANK 0 (1+ RANK)))
       ((= RANK 8))
	(DO ((FILE 0 (1+ FILE))
	     (SQ))
	    ((= FILE 8))
	    (SETQ SQ (+ (* (+ RANK 2) BOARD-WIDTH) (1+ FILE)))
	    (AS-1 (+ (LSH (AR-1 C-SQUARE-CENTRALITY-FACTOR-ARRAY SQ) 1)
		     (- 8 RANK))
		  IA 
		  SQ))))

(DEFUN WIPE-BOARD (BOARD-ARRAY &AUX (SQ 0))
 (DO I 0 (1+ I) (= I (* 2 BOARD-WIDTH))
     (AS-1 SQUARE-OFF-BOARD BOARD-ARRAY SQ)
     (SETQ SQ (1+ SQ)))
 (DO I 0 (1+ I) (= I 8)
     (AS-1 SQUARE-OFF-BOARD BOARD-ARRAY SQ)
     (SETQ SQ (1+ SQ))
     (DO J 0 (1+ J) (= J 8)
	 (AS-1 SQUARE-VACANT BOARD-ARRAY SQ)
	 (SETQ SQ (1+ SQ)))
     (AS-1 SQUARE-OFF-BOARD BOARD-ARRAY SQ)
     (SETQ SQ (1+ SQ)) )
 (DO I 0 (1+ I) (= I (* 2 BOARD-WIDTH))
     (AS-1 SQUARE-OFF-BOARD BOARD-ARRAY SQ)
     (SETQ SQ (1+ SQ)))
 (SETF (BOARD-HASH BOARD-ARRAY) 0) )


(DEFUN WIPE-PIECE-ARRAY (PIECE-ARRAY)
 (SETF (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY) 0)
 (SETF (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY) 0)
 (SETF (PIECE-WHITE-MAT-PCS PIECE-ARRAY) 0)
 (SETF (PIECE-BLACK-MAT-PCS PIECE-ARRAY) 0)
 (DO PC 0 (1+ PC) (= PC PIECE-ARRAY-SIZE)
     (AS-1 0 PIECE-ARRAY PC)
     (AS-1 0 (PIECE-NMOVES-ARRAY PIECE-ARRAY) PC)
) )


(DEFUN C-PUT (SYM-PC SQ)
   (C-PUT-I (SYMEVAL SYM-PC) 
	    SQ 
	    (GET SYM-PC 'INITIAL-TYPE-WOOD) ))


(DEFUN C-PUT-I (PC SQ TYPE-WOOD &AUX VAL)
  (COND ((NOT (= (AR-1 BOARD-ARRAY SQ) SQUARE-VACANT))
	 (ERROR SQ "PIECE ALREADY THIS SQUARE" 'BARF))
	((NOT (ZEROP (AR-1 PIECE-ARRAY PC)))
	 (ERROR PC "PIECE ALREADY LOCATED")))
  (SETQ VAL (AR-1 (BOARD-TYPE-WOOD-VALUE-ARRAY BOARD-ARRAY) TYPE-WOOD))
  (AS-1 VAL (PIECE-VALUE-ARRAY PIECE-ARRAY) PC)
  (AS-1 TYPE-WOOD (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY) PC)
  (AS-1 (+ (* TYPE-WOOD 2) (LDB #o0401 PC))
	(PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY)
	PC)
  (AS-1 (AR-1 SYMBOLIC-WOOD-TYPES TYPE-WOOD)
	(PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
	PC)
;  (AS-1 (AR-1 TYPE-WOOD-LETTER TYPE-WOOD)
;	(PIECE-TYPE-WOOD-LETTER-ARRAY PIECE-ARRAY)
;	PC)
  (AS-1 PC BOARD-ARRAY SQ)
  (AS-1 SQ PIECE-ARRAY PC)
  (AS-1 (AR-1 INITIAL-TYPE-WOOD-POSITIONAL-FACTOR-ARRAY 
	      (AR-1 (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY) PC))
	(PIECE-POSITIONAL-WEIGHTING-FACTOR-ARRAY PIECE-ARRAY)
	PC)
  (COND ((WHITE-P PC)        ;DO THIS AFTER TYPE WOOD SET UP!!
	 (COND ((PAWN-P PC)
		(SETF (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
		      (+ VAL (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY))))
	       (T (SETF (PIECE-WHITE-MAT-PCS PIECE-ARRAY)
			(+ VAL (PIECE-WHITE-MAT-PCS PIECE-ARRAY))))))
	(T (COND ((PAWN-P PC)
		  (SETF (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			(+ VAL (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY))))
		 (T (SETF (PIECE-BLACK-MAT-PCS PIECE-ARRAY)
			  (+ VAL (PIECE-BLACK-MAT-PCS PIECE-ARRAY)))))))
  (SETF (BOARD-HASH BOARD-ARRAY) 
	(LOGXOR (BOARD-HASH BOARD-ARRAY)
		(ROT (AR-1 C-HASH-SQUARE SQ) 
		     (AR-1 (PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY) PC))))
)

