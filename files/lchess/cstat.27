;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LCHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

(DEFUN C-BASIC-STATIC-EVALUATOR NIL 
  (PROG (PIA)
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (RETURN (C-POS-PIECE-MATERIAL-DIFFERENCE PIA)
	       (C-POS-PAWN-MATERIAL-DIFFERENCE PIA)
	       (C-POS-DEVELOPMENT-DIFFERENCE PIA))
))
;KING SAFETY HACKERY.
;  CONSISTS OF THREE COMPONENTS (<PRESENT KSF> <KSF IF O-O> <KSF IF O-O-O>)
;  CASTLING KSF'S ARE NIL IF NO CASTLING PRIVLEDGES.
;  OTHERWISE CAR OF CASTLING KSF IS LIST DESCRIBING DIFFICULTY
;     STOPPED IF CASTLING TEMPORARILY ILLEGAL
;     <N> APPARENT NUMBER OF MOVES IT WOULD TAKE TO CLEAR THINGS OUT
;	  (JUST # OF PIECES IN THE WAY FOR NOW)

; EACH KSF CONSISTS OF THE FOLLOWING COMPONENTS:
;  K PAWN PROTECTION
;    (A) GENERAL
;    (B) SPECIAL BONUS FOR  (P-B2,N2,R2) OR (P-B2,N3,R2 + FINCHETTOED B) OR
;		(K-R1 + P-N2 OR P-R2 OR R3)
;    (C) MINUS FOR WEAK P'S (ISO OR DOUBLED) NEAR K.
;    (D) MINUS FOR FAR ADVANCED P'S
;  ACCESSIBILITY TO OPP'S PCS
;    (A) NUMBER OF DISTINCT OPP'S PCS THAT ATTACK A SQ TWO OR LESS FROM K
;    (B) NUMBER OF SUCH SQS THAT ARE ATT'ED.
;    (C) NUMBER OF DISTINCT PCS NOT IN A THAT CAN ATT IN ONE SAFE MOVE.
;    (D) SQUARES IN K NEIGHBORHOOD OPP CONTROLS
;  DEFENDERS 
;    (A) NUMBER OF DISTINCT OWN PCS THAT ARE IN K NEIGHBORHOOD
;    (B) NUMBER OF DISTINCT OWN PCS THAT DEFEND SQS IN K NEIGHBORHOOD
;  OPPONENT'S P S IN POSITION TO BREAK.

; IN ADDITION, K SAFETY IS AFFECTED BY TOTAL LEVEL OF ADVERSE MATERIAL,
;   ESPECIALLY EXISTANCE OF ADVERSE Q.


;KING-STATE S  
; HAS-POTENTIAL-OPTION-TO-CASTLE
; CASTLED-KING   O-O AND K WITHIN ONE SQ OF KN1
; CASTLED-QUEEN  O-O-O AND K WITHIN ONE SQ ON QN1 (NOTE NOT QB1)
; OPEN           K RUNNING AROUND IN MIDDLE OF BOARD
; NO-CASTLING    NONE OF THE ABOVE

(DEFUN C-COMPUTE-K-STATE (SIDE)
  (PROG (NMOVES-ARRAY TEM CH KSQ)
	(SETQ NMOVES-ARRAY (PIECE-NMOVES-ARRAY PIECE-ARRAY))
	(COND ((ZEROP (AR-1 NMOVES-ARRAY (+ WK SIDE)))
	       (COND ((OR (AND (NOT (ZEROP (AR-1 PIECE-ARRAY (SETQ TEM (+ SIDE WKR)))))
			       (ZEROP (AR-1 NMOVES-ARRAY TEM)))
			  (AND (NOT (ZEROP (AR-1 PIECE-ARRAY (SETQ TEM (+ SIDE WQR)))))
			       (ZEROP (AR-1 NMOVES-ARRAY TEM))))
		      (RETURN 'HAS-POTENTIAL-OPTION-TO-CASTLE)))))
	(COND ((SETQ CH (C-RETRIEVE-CASTLE-HISTORY SIDE))
	       (SETQ KSQ (AR-1 PIECE-ARRAY (+ SIDE WK)))
	       (COND ((EQ CH 'CASTLES-KING)
		      (COND ((<= (C-COMPUTE-KING-STEPS-DISTANCE KSQ
				    (COND ((ZEROP SIDE) WKN1)
					  (T BKN1)))
				 1)
			     (RETURN 'CASTLES-KING))))
		     ((EQ CH 'CASTLES-QUEEN)
		      (COND ((<= (C-COMPUTE-KING-STEPS-DISTANCE KSQ 
				    (COND ((ZEROP SIDE) WQN1)
					  (T BQN1)))
				 1)
			     (RETURN 'CASTLED-QUEEN)))) )))
))


(DEFUN C-DETERMINE-K-FRONT-PAWNS (SIDE K-LOC)
  (PROG (L-PC L-RK L-OTHER C-PC C-RK C-OTHER R-PC R-RK R-OTHER PC K-FILE K-RANK LOC 
	 FILED P-RANK RANK-LESS-OPERATOR)
	(SETQ PC (COND ((ZEROP SIDE) WQRP)
		       (T BQRP)))
	(SETQ RANK-LESS-OPERATOR (COND ((ZEROP SIDE) (FUNCTION <))
				       (T (FUNCTION >))))
	(SETQ K-FILE (AR-1 C-BOARD-FILE-NUMBER K-LOC))
	(SETQ K-RANK (AR-1 C-BOARD-WHITE-RANK-NUMBER K-LOC))
   L	(COND ((OR (ZEROP (SETQ LOC (AR-1 PIECE-ARRAY PC)))
		   (> (ABS (SETQ FILED (- (AR-1 C-BOARD-FILE-NUMBER LOC)
					  K-FILE)))
		      1))
	       (GO E)))
   	(SETQ P-RANK (AR-1 C-BOARD-WHITE-RANK-NUMBER LOC))
	(COND ((FUNCALL RANK-LESS-OPERATOR P-RANK K-RANK)  ;P BEHIND K
	       (COND ((MINUSP FILED)
		      (SETQ L-OTHER (CONS PC L-OTHER)))
		     ((ZEROP FILED)
		      (SETQ C-OTHER (CONS PC C-OTHER)))
		     (T (SETQ R-OTHER (CONS PC R-OTHER)))))
	      ((MINUSP FILED)
	       (COND ((NULL L-PC)
		      (SETQ L-PC PC L-RK P-RANK))
		     ((FUNCALL RANK-LESS-OPERATOR P-RANK L-RK)
		      (SETQ L-OTHER (CONS L-PC L-OTHER))
		      (SETQ L-PC PC L-RK P-RANK))
		     (T (SETQ L-OTHER (CONS PC L-OTHER)))))
	      ((ZEROP FILED)
	       (COND ((NULL C-PC)
		      (SETQ C-PC PC C-RK P-RANK))
		     ((FUNCALL RANK-LESS-OPERATOR P-RANK C-RK)
		      (SETQ C-OTHER (CONS C-PC C-OTHER))
		      (SETQ C-PC PC C-RK P-RANK))
		     (T (SETQ C-OTHER (CONS PC C-OTHER)))))
	      (T
	       (COND ((NULL R-PC)
		      (SETQ R-PC PC R-RK P-RANK))
		     ((FUNCALL RANK-LESS-OPERATOR P-RANK R-RK)
		      (SETQ R-OTHER (CONS R-PC R-OTHER))
		      (SETQ R-PC PC R-RK P-RANK))
		     (T (SETQ R-OTHER (CONS PC R-OTHER))))))
   E	(COND ((NOT (ZEROP (LOGAND 7 (SETQ PC (1+ PC)))))
	       (GO L)))
	(RETURN L-PC C-PC R-PC L-OTHER C-OTHER R-OTHER)
))

;DETERMINE-K-FRONT-PAWNS, THEN RETURN VALUES AS FOLLOWS:
;			      P
;  PPP OR  |PP              PP
;   K      |K   -> ENCLOSED  K   ->      SLIGHTLY-WEAKENED-TO-EDGE OR 
;				    P	 SLIGHTLY-WEAKENED-TO-CENTRAL
;  PP  -> WEAKENED-TO-CENTRAL OR   P P
;   K     WEAKENED-TO-EDGE          K    SLIGHTLY-WEAKENED-IN-CENTER
;         |P   |P               |P
;  |P     | P  | P  P    P      | P
;  |K     |K   | K  K   K   K   |K P  |

(DEFUN C-DETERMINE-K-FRONT-PAWN-PATTERN (SIDE K-LOC)
  (PROG (L-PC L-RK C-PC C-RK R-PC R-RK PC K-FILE K-RANK LOC 
	 FILED P-RANK RANK-LESS-OPERATOR)
	(SETQ PC (COND ((ZEROP SIDE) WQRP)
		       (T BQRP)))
	(SETQ RANK-LESS-OPERATOR (COND ((ZEROP SIDE) (FUNCTION <))
				       (T (FUNCTION >))))
	(SETQ K-FILE (AR-1 C-BOARD-FILE-NUMBER K-LOC))
	(SETQ K-RANK (AR-1 C-BOARD-WHITE-RANK-NUMBER K-LOC))
   L	(COND ((OR (ZEROP (SETQ LOC (AR-1 PIECE-ARRAY PC)))
		   (> (ABS (SETQ FILED (- (AR-1 C-BOARD-FILE-NUMBER LOC)
					  K-FILE)))
		      1))
	       (GO E)))
   	(SETQ P-RANK (AR-1 C-BOARD-WHITE-RANK-NUMBER LOC))
	(COND ((FUNCALL RANK-LESS-OPERATOR P-RANK K-RANK))  ;P BEHIND K
	      ((MINUSP FILED)
	       (COND ((OR (NULL L-PC)
			  (FUNCALL RANK-LESS-OPERATOR P-RANK L-RK))
		      (SETQ L-PC PC L-RK P-RANK))))
	      ((ZEROP FILED)
	       (COND ((OR (NULL C-PC)
			  (FUNCALL RANK-LESS-OPERATOR P-RANK C-RK))
		      (SETQ C-PC PC C-RK P-RANK))))
	      (T
	       (COND ((OR (NULL R-PC)
			  (FUNCALL RANK-LESS-OPERATOR P-RANK R-RK))
		      (SETQ R-PC PC R-RK P-RANK)))))
   E	(COND ((NOT (ZEROP (LOGAND 7 (SETQ PC (1+ PC)))))
	       (GO L)))
	
))

;RETURNS TWO 8 BIT NUMBER WHERE BIT CORRESP TO EACH P.
; "RELAVENT" PAWNS ARE EITHER ON K FILE OR ADJOINING FILE,
; "PROTECTIVE" PAWNS ARE RELAVENT PAWNS WITHIN TWO ROOK STEPS OF K.
(DEFUN C-DETERMINE-K-FRONTAGE-PAWNS-ALT (SIDE K-LOC)
  (PROG (REL PROT PC FILED BIT LOC)
	(SETQ REL 0 PROT 0 BIT 1)
	(SETQ PC (COND ((ZEROP SIDE) WQRP)
		       (T BQRP)))
   L	(COND ((AND (NOT (ZEROP (SETQ LOC (AR-1 PIECE-ARRAY PC))))
		    (<= (SETQ FILED (ABS (- (AR-1 C-BOARD-FILE-NUMBER K-LOC)
					    (AR-1 C-BOARD-FILE-NUMBER LOC))))
			1))
	       (SETQ REL (LOGIOR REL BIT))   ;PAWN IS RELAVANT
	       (COND ((<= (+ FILED (ABS (- (AR-1 C-BOARD-WHITE-RANK-NUMBER K-LOC)
					   (AR-1 C-BOARD-WHITE-RANK-NUMBER LOC))))
			2)
		     (SETQ PROT (LOGIOR PROT BIT)))) ))  ;PAWN IS PROTECTIVE
	(COND ((NOT (ZEROP (LOGAND 7 (SETQ PC (1+ PC)))))
	       (SETQ BIT (LSH BIT 1))
	       (GO L)))
	(RETURN REL PROT)
))

(DEFUN C-RETRIEVE-CASTLE-HISTORY (SIDE)
  (PROG (PREV-POS TEM CODE PLIES-BACK)
	(COND ((SETQ TEM (GET C-CURRENT-POSITION 'GAME-STATE))
	       (GO E2)))
	(SETQ PLIES-BACK 
	      (COND ((= SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
				  #o0401 
				  0))
		     2)
		    (T 1)))
    L1	(COND ((NULL (SETQ PREV-POS (C-GET-PREVIOUS-POSITION-HEAD PLIES-BACK)))
	       (RETURN NIL)))
	(COND ((SETQ TEM (GET PREV-POS 'GAME-STATE))
	       (GO E2))
	      ((MEMQ (SETQ CODE (AR-1 GAME-ARRAY
				      (+ (- (GAME-FILL-POINTER GAME-ARRAY)
					    (* PLIES-BACK C-GAME-NQS))  ;NOT 1+ BECAUSE THEY RE
					 C-GAME-CODE)))    ;STORED ONE OFF.
		     '(CASTLES-KING CASTLES-QUEEN))
	       (RETURN CODE)))
	(SETQ PLIES-BACK (+ PLIES-BACK 2))
	(GO L1)
    E2	(RETURN (COND ((ZEROP SIDE)
		       (C-GAME-STATE-WHITE-CASTLING-HISTORY TEM))
		      (T (C-GAME-STATE-BLACK-CASTLING-HISTORY TEM))))
))

(DEFUN C-K-SAFETY (K-PC)
  (PROG (NMA K-LOC)
	(SETQ NMA (PIECE-NMOVES-ARRAY PIECE-ARRAY))
	(SETQ K-LOC (AR-1 PIECE-ARRAY K-PC))
	(COND ((OR (NOT (ZEROP (AR-1 NMA K-PC)))
		   (AND (NOT (ZEROP (AR-1 NMA (+ K-PC 2))))
			(NOT (ZEROP (AR-1 NMA (+ K-PC 3))))))
	       (RETURN (C-K-SAF-SQ K-PC K-LOC)))   ;NO CASTLING POSSIBLE
	      ((NOT (ZEROP (AR-1 NMA (+ K-PC 2))))
	       (RETURN (LIST (C-K-SAF-SQ K-PC K-LOC)  ;ONLY K SIDE
			     (CONS (C-K-K-CASTLE-PAIN K-PC)
				   (C-K-SAF-SQ K-PC (+ K-LOC 2))))))
	      (T (RETURN (LIST (C-K-SAF-SQ K-PC K-LOC)    ;BOTH POSSIBLE
			       (CONS (C-K-K-CASTLE-PAIN K-PC)
				     (C-K-SAF-SQ K-PC (+ K-LOC 2)))
			       (CONS (C-K-Q-CASTLE-PAIN K-PC)
				     (C-K-SAF-SQ K-PC (- K-LOC 3)))))))))

(DEFUN C-K-SAF-SQ (K-PC K-LOC)
  (PROG ()
))

(DEFUN C-K-K-CASTLE-PAIN (K-LOC)
  (PROG (STOPF CNT AT-ARY)
	(SETQ CNT 0)
	(SETQ AT-ARY (COND ((= K-LOC WK1) (BOARD-BLACK-ATTACKS-ARRAY BOARD-ARRAY))
			   (T (BOARD-WHITE-ATTACKS-ARRAY BOARD-ARRAY))))
	(COND ((NOT (ZEROP (AR-1 AT-ARY K-LOC)))
	       (SETQ STOPF 'STOPPED)))
	(COND ((NOT (= (AR-1 BOARD-ARRAY (1+ K-LOC)) SQUARE-VACANT))
	       (SETQ CNT (1+ CNT))))
	(COND ((NOT (ZEROP (AR-1 AT-ARY (1+ K-LOC))))
	       (SETQ STOPF 'STOPPED)))
	(COND ((NOT (= (AR-1 BOARD-ARRAY (+ K-LOC 2)) SQUARE-VACANT))
	       (SETQ CNT (1+ CNT))))
	(COND ((NOT (ZEROP (AR-1 AT-ARY (+ K-LOC 2))))
	       (SETQ STOPF 'STOPPED)))
	(COND (STOPF (RETURN (LIST STOPF CNT)))
	      (T (RETURN CNT)))))

(DEFUN C-K-Q-CASTLE-PAIN (K-LOC)
  (PROG (STOPF CNT AT-ARY)
	(SETQ CNT 0)
	(SETQ AT-ARY (COND ((= K-LOC WK1) (BOARD-BLACK-ATTACKS-ARRAY BOARD-ARRAY))
			   (T (BOARD-WHITE-ATTACKS-ARRAY BOARD-ARRAY))))
	(COND ((NOT (ZEROP (AR-1 AT-ARY K-LOC)))
	       (SETQ STOPF 'STOPPED)))
	(COND ((NOT (= (AR-1 BOARD-ARRAY (1- K-LOC)) SQUARE-VACANT))
	       (SETQ CNT (1+ CNT))))
	(COND ((NOT (ZEROP (AR-1 AT-ARY (1- K-LOC))))
	       (SETQ STOPF 'STOPPED)))
	(COND ((NOT (= (AR-1 BOARD-ARRAY (- K-LOC 2)) SQUARE-VACANT))
	       (SETQ CNT (1+ CNT))))
	(COND ((NOT (ZEROP (AR-1 AT-ARY (- K-LOC 2))))
	       (SETQ STOPF 'STOPPED)))
	(COND ((NOT (= (AR-1 BOARD-ARRAY (- K-LOC 3)) SQUARE-VACANT))
	       (SETQ CNT (1+ CNT))))
	(COND (STOPF (RETURN (LIST STOPF CNT)))
	      (T (RETURN CNT)))))

