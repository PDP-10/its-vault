;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LCHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

;ANNOTATION PACKAGE..
; ANNOTATIONS CAN ARISE EITHER BY FIGURING THINGS OUT, AS A RESULT
;OF SEARCHING, A RESULT FROM CHEOPS, OR BEING READ IN.  AN ANNOTATED VARIATION
;IS A SINGLE NON-BRANCHING SEQUENCE OF MOVES (FOR EXAMPLE, THE MOVES ACTUALLY
;PLAYED IN A GAME).  UNDER EACH OF THESE MOVES, HOWEVER, MAY BE STORED A VARIETY
;OF ADDITIONAL INFORMATION.  THIS INFO IS FURTHER CLASSIFIED AS "STATIC-ANNOTATION",
;MEANING A PERTAINING TO THE EXISTING POSITION AS A WHOLE, OR MOVE-RELATED MEANING
;PERTAINING TO SOME MOVE POSSIBLE IN THE CURRENT POSITION.  MOVE RELATED IS FURTHER
;DIVIDED INTO "MOVE-ANNOTATION" MEANING PERTAINING TO A MOVE WHICH WAS ACTUALLY PLAYED,
;AND "VARIATION-ANNOTATION" MEANING PERTAINING TO A MOVE WHICH COULD HAVE BEEN PLAYED.
;  A VARIATION IS A LIST OR ONE OR MORE ELEMENTS.  THE FIRST ELEMENT IS THE MOVE, IN 
;PIECE GOES TO SQUARE FORM.  THE REMAINING ELEMENTS ARE ANNOTATIONS.

;THE SYMBOL REPRESENTING THE CURRENT POSITION RESIDES IN C-CURRENT-POSITION.
;  POSITION SYMBOLS CAN HAVE VARIOUS PROPERTIES:
;    C-MOVE-LIST    THE LIST OF LEGAL MOVES IN THIS POSITION.
;    STATIC-ANNOTATIONS
;      (EA IS SOURCE . ANNOTATION)
;    DYNAMIC-ANNOTATIONS
;      (EA IS MOVE-LIST-IDX  SOURCE . ANNOTATION)
;SOURCE, IF SYMBOL, IS GAME ANNOTATION WAS INPUT FROM.

;  A STATIC-ANNOTATION IS A LIST WITH STATIC-ANNOTATION-OP S IN THE KEY POSITIONS.

;  A DYNAMIC-ANNOTATION IS A LIST WITH DYNAMIC-ANNOTATION-OP S IN THE
;	KEY POSITIONS.

;STATIC-ANNOTATION-OPS
(SETQ STATIC-ANNOTATION-OPS '( 
))

;DYNAMIC-ANNOTATION-OPS 
(SETQ DYNAMIC-ANNOTATION-OPS '(
      MOVE-ANNOTATION        ;ANNOTATION ON MOVED PLAYED.  1ST ARG IS 
      			     ; DYNAMIC-EVALUATIVE-COMMENT, 2ND, IF PRESENT, IS REASON.
      VARIATION-ANNOTATION   ;ANNOTATION ON MOVE THAT MIGHT HAVE BEEN PLAYED. OTHERWISE
      			     ; SIMILAR TO MOVE-ANNOTATION.
))

(SETQ DYNAMIC-EVALUATVE-COMMENTS '(
      !! 		;VERY GOOD MOVE
      !			;GOOD MOVE
      !?		;A MOVE DESERVING ATTENTION
      ?!		;A QUESTIONABLE MOVE
      ?			;A MISTAKE
      ??		;A BLUNDER
      BETTER-WAS 
      WORSE-WAS 
      NO-BETTER-WAS 
      IF-INSTEAD 	;SAME AS NO-BETTER-WAS
))
  ; (<JUDGEMENT> EXP)   <JUDGEMENT> CAN BE !!, !, !?, ?!, ?, ??
	;EXP MAY GIVE REASON FOR JUDGEMENT.  

  ; (BETTER-WAS <MOVE> EXP)
  ; (WORSE-WAS <MOVE> EXP)
  ; (NO-BETTER-WAS <MOVE> EXP)
  ; (IF-INSTEAD <MOVE> EXP)

  ; (POSITIVE-FEATURE ( ))
  ; (NEGATIVE-FEATURE ( ))

  ; (THREATENS  <VARIATION>  <RESULT>)

  ; (PREPARING <MOVE> EXP)
  ;	(IF-PLAYED-AT-ONCE  <EXP> <RESULT>)



;THE MOVE DATA BASE

;  INDEXED UNDER TYPE-OF-WOOD  TO-SQUARE
;    IN ADDITION TO SQUARE-NUMBER, SQUARE MAY BE 
;     SYMBOLIC SQUARE IE KB3
;     OR     C3   (C MEANING CENTER, IE K OR Q)
;     OR     <M OR H><R OR H><B, N OR R> <RANK>

;     STATIC INFO
;        (KEY  ARGS)


;  N-B3  TYPICAL MOVE DEVELOPING 
;  N-R3  AWKWARD, POOR POSITION FOR KNIGHT IF REMAINS THERE.
;  N-N5  ATTACKING THRUST. DESTABILIZING.
;  N-K5, N-Q5  STRONG CENTRALIZING
;  N-K6, N-Q6  VERY STRONG POSITION FOR N
;  P-K4
;  Q-R5
;  B-KB4


;DYNAMIC INFO
;   (POSITION  SUMMARY POINTER)

;HASH TABLE

;HASH KEY  48 BITS
;POSITION SYMBOL

;GAME
; LIST OF MOVES EA ELEMENT
; (MOVE <SPECIFIC-PC> <SPECIFIC-SQ> &OPTIONAL <CODE>)

(DECLARE (SPECIAL CHESS-ANNOTATION-PC-PPR))

(DEFUN C-DISPLAY-ANNOTATIONS NIL 
   (PROG (TEM) 
	(funcall chess-annotation-stream ':clear-screen)
	(COND (C-CURRENT-GAME-NAME 
		(PRINC C-CURRENT-GAME-NAME 'CHESS-ANNOTATION-STREAM)))
	(COND ((SETQ TEM (GET C-CURRENT-POSITION 'STATIC-ANNOTATIONS))
	       (TERPRI 'CHESS-ANNOTATION-STREAM)
	       (PRINC "STATIC ANNOTATIONS" 'CHESS-ANNOTATION-STREAM)
	       (C-OUTPUT-STATIC-ANNOTATIONS TEM 'CHESS-ANNOTATION-STREAM)))
	(COND ((SETQ TEM (GET C-CURRENT-POSITION 'DYNAMIC-ANNOTATIONS))
	       (TERPRI 'CHESS-ANNOTATION-STREAM)
	       (PRINC "DYNAMIC ANNOTATIONS" 'CHESS-ANNOTATION-STREAM)
	       (C-OUTPUT-DYNAMIC-ANNOTATIONS C-CURRENT-POSITION TEM 'CHESS-ANNOTATION-STREAM)))
))

(DEFUN C-OUTPUT-STATIC-ANNOTATIONS (ANOTE STREAM)
  (PROG ()
    L	(COND ((NULL ANOTE) (RETURN NIL)))
    	(PRINT (CAAR ANOTE) STREAM)	;ANNOTATOR
	(PRINC ":  " STREAM)
	(PRIN1 (CADAR ANOTE) STREAM)	;ANNOTATION
	(SETQ ANOTE (CDR ANOTE))
	(GO L)))

(DEFUN C-OUTPUT-DYNAMIC-ANNOTATIONS (POS ANOTE STREAM)
 (PROG (MVL)
   L	(COND ((NULL ANOTE) (RETURN NIL)))
   	(PRINT (CAAR ANOTE) STREAM)	;ANNOTATOR
	(PRINC ":  " STREAM)
	(SETQ MVL (CDAR ANOTE))
   L1	(COND ((NULL MVL) (GO X1)))
   	(C-OUTPUT-ANNOTATION-MOVE POS (CAAR MVL) STREAM)  ;MOVE
	(PRINC " -> " STREAM)
	(PRIN1 (CADAR MVL) STREAM)	;ANNOTATION
	(COND ((SETQ MVL (CDR MVL))
	       (TERPRI STREAM)
	       (PRINC "   " STREAM)
	       (GO L1)))
   X1	(SETQ ANOTE (CDR ANOTE))
	(GO L)))

(DEFUN C-OUTPUT-ANNOTATION-MOVE (POS MV STREAM &AUX MOVE-LIST)
       (COND ((NUMBERP MV)
	      (COND ((NULL (SETQ MOVE-LIST (GET POS 'MOVE-LIST)))
		     (ERROR "NO MOVE LIST")))
	      (C-OUTPUT-MOVE (AR-1 MOVE-LIST (+ MV C-MVL-MOVING-PC))
			     (AR-1 MOVE-LIST (+ MV C-MVL-TO-SQ))
			     (AR-1 MOVE-LIST (+ MV C-MVL-CODE))
			     STREAM))
	     (T 
	      (C-OUTPUT-MOVE (CAR MV) (CADR MV) (CADDR MV) STREAM))))

(DEFUN C-WRITE-STATIC-ANNOTATIONS (ANL STREAM)
  (PRINC "   (STATIC-ANNOTATION " STREAM)	;)
  (PRIN1 (CAR ANL) STREAM)
;(
  (PRINC ")" STREAM)
  (TERPRI STREAM)
)

(DEFUN C-WRITE-DYNAMIC-ANNOTATIONS (ANL POS STREAM)
  (PROG NIL 
    L	(PRINC "  (MOVE-ANNOTATION (" STREAM)		;))
	(C-OUTPUT-ANNOTATION-MOVE POS (CAAR ANL) STREAM)
;(
	(PRINC ")" STREAM)
	(PRIN1 (CADAR ANL) STREAM)
;(
	(PRINC ")" STREAM)
	(COND ((NULL (SETQ ANL (CDR ANL))) (RETURN NIL)))
	(TERPRI STREAM)
	(GO L)
))
