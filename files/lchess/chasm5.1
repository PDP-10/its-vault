;-*- mode: lisp; base: 8; package: user -*-
(DECLARE (SPECIAL CHASM-5-OP CHASM-5-PDL-REGISTER-COUNTER CHEOPS-CONTROL-MEMORY-LENGTH 
	CHASM-GENERATION-NUMBER	CHEOPS-FLAG-CONTROL-OPS CHASM-5-PDL-CONSTANT-LIST 
	CHEOPS-INDEX-ASSIGNMENT-POINTER CHASM-NUMBER-GENERATIONS CHASM-INPUT-FILE 
	CHASM-5-WORD))

(DEFUN CHASM (&OPTIONAL FILENAME) 
  (PROG ()
	(SETQ CHASM-INPUT-FILE 
		(COND ((NULL FILENAME) "AI:RG;CHUCOD >")
		      (T FILENAME)))
	(CHASM-READIN CHASM-INPUT-FILE)
	(CHASM-2)
	(CHASM-4)
;	(UWRITE DSK CHPROG)
;	(SETQ ^R T)
	(CHASM-5)))

(DEFUN CHASM-5-INIT NIL 
  (PROG ()
	(*ARRAY 'CHEOPS-CONTROL-MEMORY T CHEOPS-CONTROL-MEMORY-LENGTH)
	(SETQ CHASM-5-PDL-REGISTER-COUNTER 1)
	(SETQ CHASM-5-PDL-CONSTANT-LIST NIL)
	(RETURN NIL)))

(DEFUN CHASM-5 NIL 
  (PROG (IDX WD STG-L NUM-WD NUM-ADR TEM TO-STG-L TO-IDX)
	(SETQ IDX 0)
	(CHASM-5-INIT)
  L	(COND ((NOT (< IDX CHEOPS-INDEX-ASSIGNMENT-POINTER))
		(GO X))
	      ((NULL (SETQ STG-L (CHASM-STORAGE-LOCATIONS IDX)))
		(GO L1)))
	(SETQ CHASM-GENERATION-NUMBER (\ IDX CHASM-NUMBER-GENERATIONS))
	(SETQ WD (CHASM-5-CONVERT-WORD (SETQ CHASM-5-WORD (CHASM-STORAGE-WORD IDX))))
;(CHASM-5-PRINT-GENERATION-AND-TAG IDX)
;(PRIN1 WD)
;(GO L1)
	(COND ((SETQ NUM-ADR (CHASM-NAF IDX))
		(GO L3))	;ANYTHING HAIRY SHOULD HAVE BEEN ASSIGNED VIA NAF
	      ((SETQ TEM (CHASM-NEXT-ADDRESS-LINK IDX))
		(GO L4)))	;SIMPLE XFER OK
	(COND ((NULL (SETQ TEM (CHASM-NEXT-TEXTUAL-LINK IDX)))	;XFER TO NEXT STATEMENT
		(CHEOPS-BARF (CHASM-TAG-NAME (// IDX CHASM-NUMBER-GENERATIONS))
			     'DROPS-THRU-OFF-END-OF-PROG
			     'BARF)))
  L5	(SETQ TO-IDX (CHASM-4-GET-INDEX TEM))
	(COND ((NULL (SETQ TO-STG-L (CHASM-STORAGE-LOCATIONS TO-IDX)))
		(CHEOPS-BARF (LIST (CHASM-TAG-NAME (// IDX CHASM-NUMBER-GENERATIONS)) 
				    'TO 
				   (CHASM-TAG-NAME (// TO-IDX CHASM-NUMBER-GENERATIONS)))
			      'NO-STORAGE-LOCATIONS 'WARN)
		(SETQ NUM-ADR 0)
		(GO L3)))
	(SETQ NUM-ADR (CAR TO-STG-L))
  L3	(SETQ NUM-WD (PLUS (CHASM-5-ADDUP WD)
			    NUM-ADR))
	(COND ((AND (SETQ TEM (CHASM-NEXT-ADDRESS-LINK IDX))
		    (CAR TEM))		;ADD IN STUFF LIKE PUSHJ, INHIBIT-WRITE..
		(SETQ NUM-WD (PLUS (CHASM-5-ADDUP-XFER-LIST (CAR TEM))
				   NUM-WD))))
  L2	(COND ((NULL STG-L) (GO L1)))
	(STORE (CHEOPS-CONTROL-MEMORY (CAR STG-L)) NUM-WD)
	(SETQ STG-L (CDR STG-L))
	(GO L2)
  L1	(SETQ IDX (1+ IDX))
	(GO L)
  L4	(COND ((NULL (CADR TEM)) (SETQ NUM-ADR 0) (GO L3))
	      ((NOT (EQUAL (CADR TEM) '(TRANSFER)))
		(CHEOPS-BARF IDX 'NON-TRANSFER-NOT-ASSIGNED-IN-NAF 'BARF))
	      ((NOT (= 1 (LENGTH (CADDR TEM))))
		(CHEOPS-BARF IDX 'MULTI-WAY-BRANCH-NOT-ASSIGNED-IN-NAF 'BARF)))
	(SETQ TEM (CAADDR TEM))
	(GO L5)	
  X	(RETURN T)
))

(DEFUN CHASM-5-ADDUP-XFER-LIST (WORD)
  (PROG (NUM-WD TEM WD)
	(SETQ WD WORD)
	(SETQ NUM-WD 0)
   L	(COND ((NULL WD) (RETURN NUM-WD))
	      ((NOT (ATOM (CAR WD))))		;IGNORE (RETURN-TARGET .. ), ETC
	      ((SETQ TEM (GET (CAR WD) 'CHEOPS-UINST-CONST))
		(SETQ NUM-WD (PLUS NUM-WD TEM)))
	      (T (CHEOPS-BARF (LIST WD 'IN WORD) 'BAD-XFER-LIST 'WARN)))
	(SETQ WD (CDR WD))
	(GO L)))

;CHASM-5-ADDUP ACTUALLY NUMERICALLY EVALUATES WORD!!!
; IT "ADDS UP" A LIST WHICH MAY CONTAIN:
;	NUMBERS (ADDED IN)
;	SYMBOLS WITH CHEOPS-UINST-CONST PROP (ADD IN VALUE FROM PROP)
;	ALU INST FIELDS..
;	  (A-SOURCE N)
;	  (PDL-REG N)
;	  (IMMEDIATE-DATA N)
;	  (PDL-DEST N)
;	(<FIELD-NAME> DATA) WHERE <FIELD NAME> HAS A CHEOPS-VAR-FIELD PROPERTY
;		GIVING WIDTH AND SHIFT.
; IN THE CASE OF ALU INSTRUCTIONS, THE ASDEST-TYPE IS AUTOMATICALLY SELECTED
;  DEPENDING ON WHICH FIELDS ARE PRESENT AND THE FIELDS ARE SHIFTED TO THE
;  APPROPRIATE PLACES.
;AS A SPECIAL HACK, CHASM-5-ADDUP ATTEMPTS TO UNSCRAMBLE THE PAWN AND NOBLE
;  ENABLE FIELDS.  THEY HAVE DIFFERENT VALUES DEPENDING ON WHETHER ORIGIN
;  OR DESTINATION ARRAY IS BEING REFERENCED

(DEFUN CHASM-5-ADDUP (WORD)
  (PROG (NUM-WD NUM-TERM TEM ASDEST-TYPE WD)
	(SETQ NUM-WD 0)
	(SETQ WD WORD)
	(COND ((MEMQ 'ALU-OP WD) (GO AL-1))	;FIGURE OUT ASDEST TYPE
	      ((NULL (MEMQ 'ARRAY-OP WD)) (GO E1)))
    L	(COND ((NULL WD) (RETURN NUM-WD))
	      ((NUMBERP (CAR WD))
		(GO E1))
	      ((ATOM (CAR WD))
		(COND ((AND (EQ (CAR WD) 'ARRAY-PDL-SOURCE)
			    (MEMQ 'ARRAY-WRITE-AC WORD)) ;WHICH IMPLIES ARRAY-PDL-SOURCE
			(GO L1))		;OTHERWISE THEY WOULD ADD AND LOSE.
		      ((GET (CAR WD) 'CHEOPS-PIECE-ENABLE)
			(GO HACK1))
		      ((NULL (SETQ TEM (GET (CAR WD) 'CHEOPS-UINST-CONST)))
			(GO E1)))
		(SETQ NUM-TERM TEM))
	      ((NOT (ATOM (CAAR WD)))(GO E1))
	      ((EQ (CAAR WD) 'A-SOURCE)
		(COND ((= ASDEST-TYPE 0) 
			(SETQ NUM-TERM (TIMES (CADAR WD) 100000000000000)))
		      ((= ASDEST-TYPE 3)
			(SETQ NUM-TERM (TIMES (CADAR WD) 200000000000)))
		      (T (GO E1))))
	      ((EQ (CAAR WD) 'PDL-REG)
		(COND ((= ASDEST-TYPE 2)
			(SETQ NUM-TERM (TIMES (CADAR WD) 20000000000000)))
		      (T (GO E1))))
	      ((EQ (CAAR WD) 'IMMEDIATE-DATA)
		(COND ((= ASDEST-TYPE 1)
			(SETQ NUM-TERM (TIMES (CADAR WD) 20000000000000)))
		      (T (GO E1))))
	      ((EQ (CAAR WD) 'PDL-DEST)
		(COND ((= ASDEST-TYPE 3)
			(SETQ NUM-TERM (TIMES (CADAR WD) 20000000000000)))
		      (T (GO E1))))
	      ((EQ (CAAR WD) 'ODEST)
		(COND ((= ASDEST-TYPE 3) (GO E1))
		      (T (SETQ NUM-TERM (TIMES (CADAR WD) 200000000000)))))
	      ((SETQ TEM (GET (CAAR WD) 'CHEOPS-VAR-FIELD))
		(SETQ NUM-TERM (CHEOPS-MAKE-BIGNUM (CADAR WD) (CADR TEM))))
	      (T (GO E1)))
   L1A	(SETQ NUM-WD (PLUS NUM-WD NUM-TERM))
   L1	(SETQ WD (CDR WD))
	(GO L)
   E1	(CHEOPS-BARF (LIST WD 'IN WORD) 'ADDUP-ERR 'WARN)
	(GO L1)
   AL-1	(SETQ ASDEST-TYPE 0)
	(COND ((CHASM-5-MEMQ-CAR 'IMMEDIATE-DATA WD) (SETQ ASDEST-TYPE 1))
	      ((CHASM-5-MEMQ-CAR 'PDL-REG WD) (SETQ ASDEST-TYPE 2))
	      ((CHASM-5-MEMQ-CAR 'PDL-DEST WD) (SETQ ASDEST-TYPE 3)))
	(SETQ NUM-WD (* ASDEST-TYPE 40000000000))
	(GO L)
   HACK1(COND ((MEMQ 'ORIGIN-ARRAY WORD) (SETQ TEM 'ORIGIN-ARRAY-VALUE))
	      ((MEMQ 'DESTINATION-ARRAY WORD) (SETQ TEM 'DESTINATION-ARRAY-VALUE))
	      (T (GO E1)))
	(COND ((NULL (SETQ NUM-TERM (GET (CAR WD) TEM))) (GO E1)))
	(GO L1A)
))

(DEFUN CHASM-5-MEMQ-CAR (ITEM LST)
  (PROG NIL 
   L	(COND ((NULL LST) (RETURN NIL))
	      ((ATOM (CAR LST)))
	      ((EQ ITEM (CAAR LST)) (RETURN T)))
	(SETQ LST (CDR LST))
	(GO L)))

;FROM AND TO CAN BE EITHER ATOMIC REGISTER NAMES, (AC NAME), (AAC NAME), OR (PDL NAME)

;POSSIBLE SORTS OF ITEMS IN VALUE LIST:
;  FOR ALU-OP  (ASOURCE N) (B-BUS N) (ODEST N) (PDL-SOURCE N)
;	       (PDL-DEST N)
;  FOR ARRAY-OP ATOMIC-SELECTOR WITH CHEOPS-UINST-CONST PROPERTY OR
;	       (ARRAY-OP-AC N)    ARRAY-AC-SOURCE   ARRAY-WRITE-AC
;				  ARRAY-PDL-SOURCE  ARRAY-WRITE-PDL

(DEFUN CHASM-5-FROM (FROM TO)
  (PROG (F-L TO-ENT VAL TEM)
	(COND ((EQ CHASM-5-OP 'ALU-OP)
		(GO ALU-1))
	      ((EQ FROM 'PDL-POINTED-TO-BY-PAR)
		(SETQ VAL (CONS 'ARRAY-PDL-SOURCE VAL))
		(GO TO-A-BUS))
	      ((ATOM FROM) (GO AR1))
	      ((EQ (CAR FROM) 'AC)
		(SETQ VAL (CONS 'ARRAY-AC-SOURCE 
			    (CONS (LIST 'ARRAY-OP-AC 
					(CHASM-5-GET-AC (CAADR FROM)))
				  VAL)))
		(GO TO-A-BUS))
	      (T (GO E1)))
   TO-A-BUS 
	(COND ((EQ TO 'A-BUS) (GO X)))
	(SETQ VAL (NCONC VAL (CHASM-5-FROM 'A-BUS TO)))
	(GO X)
   AR1	(COND ((EQ TO 'PDL-POINTED-TO-BY-PAR)
		(SETQ VAL (CONS 'ARRAY-WRITE-PDL VAL))
		(GO FROM-PS-BUS))
	      ((ATOM TO) (GO AR2))
	      ((EQ (CAR TO) 'AC)
		(SETQ VAL (CONS 'ARRAY-WRITE-AC 
			        (CONS (LIST 'ARRAY-OP-AC 
					    (CHASM-5-GET-AC (CAADR FROM)))
				      VAL)))
		(GO FROM-PS-BUS))
	      (T (GO E1)))
   FROM-PS-BUS 
	(COND ((EQ FROM 'PS-BUS) (GO X)))
	(SETQ VAL (NCONC VAL (CHASM-5-FROM FROM 'PS-BUS)))
	(GO X)
   AR2	(COND ((NULL (SETQ F-L (GET TO 'CHEOPS-FROM-LIST)))
		(GO E1))
	      ((NULL (SETQ TO-ENT (ASSQ FROM F-L)))
		(GO E1)))
	(SETQ VAL (CONS (CDR TO-ENT) VAL))
   X	(RETURN VAL)
   E1	(CHEOPS-BARF (LIST FROM TO) 'BAD-FROM 'DATA)
	(RETURN NIL)
   ALU-1(COND ((EQ TO 'B-BUS) (GO B-B1))
	      ((EQ TO 'A-BUS) (GO A-B1))
	      ((EQ TO 'O-BUS) (GO O-B1))
	      (T (GO E1)))
   A-B1 (COND ((EQ FROM 'A-BUS) (GO A-SX))
	      ((EQ FROM 'PDL-POINTED-TO-BY-PAR) 
		(SETQ TEM 0))
	      ((ATOM FROM) (GO A-B-REG))
	      ((EQ (CAR FROM) 'AC)
		(SETQ TEM (+ 60 (CHASM-5-GET-AC (CAADR FROM)))))
	      ((EQ (CAR FROM) 'AAC)
		(SETQ TEM (+ 70 (CHASM-5-GET-AAC (CAADR FROM)))))
	      ((EQ (CAR FROM) 'PDL)
		(SETQ VAL (CONS (LIST 'PDL-REG (CHASM-5-PDL-REGISTER-REF (CADR FROM)))
				 VAL))
		(GO A-SX))
	      ((EQ (CAR FROM) 'IMMEDIATE-DATA)
		(SETQ VAL (CONS (LIST 'IMMEDIATE-DATA 
					(CHASM-5-EVALUATE-EXP (CADR FROM)))
				VAL))
		(GO A-SX))
	      (T (GO E1)))
   A-S-X(SETQ VAL (CONS (LIST 'A-SOURCE TEM) VAL))
   A-SX	(GO X)
   A-B-REG 
	(COND ((SETQ TEM (GET FROM 'A-SOURCE))
		(GO A-S-X))
	      (T (GO E1)))
   B-B1	(COND ((EQ FROM 'PAR)
		(SETQ VAL (LIST '(B-BUS 10)))
		(GO X))
	      ((EQ FROM 'B-BUS)
	       (GO X))			;THATS OK
	      ((ATOM FROM) (GO E1))	;B-BUS FROM ... IN ALU-INST
	      ((MEMQ (CAR FROM) '(AC AAC))
		(SETQ VAL (LIST (LIST 'B-BUS (CHASM-5-GET-AC-OR-AAC (CAADR FROM)))))
		(GO X))
	      (T (GO E1)))
   O-B1	(COND ((AND (ATOM FROM)	;O-BUS FROM ... IN ALU-INST
	      	    (SETQ VAL (GET FROM 'OUTPUT-SELECTOR))))
	      ((OR (EQ FROM 'B-BUS)
		   (AND (LISTP FROM)
			(LISTP (CAR FROM))		;??
			(EQ (CAAR FROM) 'AAC)))
	       (SETQ TEM (CHASM-5-FROM FROM 'B-BUS))
	       (COND ((AND TEM (ATOM TEM))
		      (SETQ TEM (LIST TEM))))
	       (SETQ VAL (NCONC TEM '(SET-B O-BUS-FM-ALU))))
	      (T (SETQ TEM (CHASM-5-FROM FROM 'A-BUS))
		 (COND ((AND TEM (ATOM TEM))
			 (SETQ TEM (LIST TEM))))
 		 (SETQ VAL (NCONC TEM '(SET-A O-BUS-FM-ALU)))))
	(GO X)
))

(DEFUN CHASM-5-WRITE-PULSE (REG)
  (PROG (TEM)
	(COND ((EQ CHASM-5-OP 'ARRAY-OP) 
		(COND ((ATOM REG) (SETQ TEM (GET REG 'CHEOPS-ARRAY-WRITE-PULSE)))
		      ((EQ (CAR REG) 'AC)
			(SETQ TEM (LIST (LIST 'ARRAY-OP-AC (CHASM-5-GET-AC (CAADR REG)))
					'ARRAY-WRITE-AC)))
		      (T (GO E1))))
	      ((ATOM REG)
		(COND ((SETQ TEM (GET REG 'ODEST))
			(SETQ TEM (LIST (LIST 'ODEST TEM))))))
							;EXTRA LVL OF LIST TO FAKE OUT
	      ((MEMQ (CAR REG) '(AC AAC))
		(SETQ TEM (LIST (LIST 'ODEST 
				      (+ 60 (CHASM-5-GET-AC-OR-AAC (CAADR REG)))))))
	      ((EQ (CAR REG) 'PDL)
		(SETQ TEM (LIST (LIST 'PDL-DEST 
				      (CHASM-5-PDL-REGISTER-REF (CADR REG)))))))
	(COND ((NULL TEM) (GO E1)))			;CHASM-5-CONVERT-DATA-LIST
	(RETURN TEM)
   E1	(CHEOPS-BARF REG 'BAD-WRITE-PULSE 'DATA)
	(RETURN NIL)))

;SOMEWHAT UNFORTUNATELY, + IS A SINGLE-CHARACTER-ATOM, WHILE - IS NOT.
; THUS +3 COMES IN AS TWO TOKENS WHILE -3 COMES IN AS ONE. SO...
(DEFUN CHASM-5-PAF (ARG)
  (PROG (TEM AAC ANS)
	(COND ((EQ (CAR ARG) '+) (GO P1))
	      ((NUMBERP (CAR ARG)) (GO M1))
	      ((EQ (CAR ARG) 'PAR) (GO STORE1)))
	(COND ((OR (NOT (EQ (CADR ARG) '->))
		   (NOT (EQ (CADDR ARG) 'PAR)))
		(GO E1)))
	(SETQ AAC (CAR ARG))
	(SETQ ANS 10)		;CODE FOR RESTORE PAR FROM AAC
  AAC	(COND ((ATOM AAC) (SETQ TEM (CHASM-5-GET-AAC AAC)))
	      ((EQ (CAR AAC) 'AAC) (SETQ TEM (CHASM-5-GET-AAC (CADR AAC))))
	      (T (GO E1)))
  	(SETQ TEM (- TEM 10))	;CHANGE B-BUS ADR BACK TO AAC ADR
	(SETQ ANS (+ ANS TEM))
   X1	(RETURN (LIST (LIST 'PAF ANS)))	;EXTRA LEVEL OF LIST TO 
					;FAKE OUT CHASM-5-CONVERT-DATA-LIST
  STORE1(COND ((NOT (EQ (CADR ARG) '->)) (GO E1)))
	(SETQ AAC (CADDR ARG))
	(SETQ ANS 0)		;CODE FOR STORE PAR INTO AAC
	(GO AAC)
   P1	(COND ((OR (NOT (NUMBERP (CADR ARG)))
		   (> (CADR ARG) 7)
		   (NOT (EQ (CADDR ARG) '->))
		   (NOT (EQ (CADDDR ARG) 'PAR)))
		(GO E1)))
	(SETQ ANS (+ 20 (CADR ARG)))
	(GO X1)
   M1	(COND ((OR (> (ABS (CAR ARG)) 10)
		   (NOT (EQ (CADR ARG) '->))
		   (NOT (EQ (CADDR ARG) 'PAR)))
		(GO E1)))
	(SETQ ANS (+ 20 (LOGAND 17 (CAR ARG))))
	(GO X1)
   E1	(CHEOPS-BARF ARG 'BAD-PAF 'DATA)
	(RETURN NIL) ))

;CALLED WITH DATA PORTION OF WD AS PRODUCED BY CHASM-2.  CONVERTS
;FROM S, WRITE PULSES, ETC INTO CORRESPONDING SINGLE ATOMS WITH
;CHEOPS-DEF-FLD PROPERTIES.  DOES NOT CHECK FOR CONFLICTS OR DEFAULT ANYTHING.

(DEFUN CHASM-5-CONVERT-DATA-LIST (WORD)
  (PROG (C-V-WD WD C-V-ITEM TEM)
	(SETQ WD WORD)
    L	(COND ((NULL WD) (RETURN C-V-WD))
	      ((ATOM (CAR WD))
		(SETQ C-V-ITEM (CAR WD)))
	      ((EQ (CAAR WD) 'FROM)
		(SETQ C-V-ITEM (CHASM-5-FROM (CADDAR WD) (CADAR WD))))
	      ((EQ (CAAR WD) '->)
		(SETQ C-V-ITEM (CHASM-5-WRITE-PULSE (CADAR WD))))
	      ((EQ (CAAR WD) 'FLAG-CONTROL)
		(COND ((NULL (SETQ TEM (FIND-POSITION-IN-LIST 
					(CAADAR WD)
					CHEOPS-FLAG-CONTROL-OPS)))
			(CHEOPS-BARF (CAADAR WD) 'BAD-FLAG-CONTROL-OP 'WARN)
			(SETQ TEM 0)))
		(SETQ C-V-ITEM (LIST (LIST 'FLAG-CONTROL TEM))))
	      ((MEMQ (CAAR WD) '(PDL IMMEDIATE-DATA))
				;EQUIVALENT TO A-BUS FROM PDL[...]
		(SETQ C-V-ITEM (CHASM-5-FROM (CAR WD) 'A-BUS)))
	      ((EQ (CAAR WD) 'PAF)
		(SETQ C-V-ITEM (CHASM-5-PAF (CADAR WD))))
	      ((EQ (CAAR WD) 'ALU-FCTN)
		(COND ((EQ (CAADAR WD) '+)
			(SETQ C-V-ITEM 'B-PLUS-A))
		      ((EQ (CAADAR WD) '-)
			(SETQ C-V-ITEM 'B-A))
		      (T (SETQ C-V-ITEM (CAADAR WD)))))
	      (T (GO E1)))
	(COND ((NULL C-V-ITEM))
	      ((ATOM C-V-ITEM) (SETQ C-V-WD (CONS C-V-ITEM C-V-WD)))
	      (T (SETQ C-V-WD (APPEND C-V-ITEM C-V-WD))))
  L1	(SETQ WD (CDR WD))
	(GO L)
  L2	(SETQ C-V-WD (CONS C-V-ITEM C-V-WD))	;JUST CONS IT IN, ATOMIC OR NOT
	(GO L1)
  E1	(CHEOPS-BARF (LIST WD 'IN WORD) 'UNKNOWN-DATA-OP 'DATA)
	(GO L1) ))

(DEFUN CHASM-5-CONVERT-WORD (WORD)
  (PROG (OP)
	(COND ((NULL WORD)(GO X))
	      ((ATOM WORD) (GO E1))
	      ((NULL (SETQ OP (GET (CAAR WORD) 'CHEOPS-OPERATION)))
		(GO E2)))
	(RETURN (FUNCALL OP WORD))		;DISPATCH ON MAIN OP
    E1	(CHEOPS-BARF WORD 'BAD-WORD 'DATA)	;ARG IS ENTIRE STORAGE WORD
    X	(RETURN NIL)
    E2	(CHEOPS-BARF WORD 'BAD-MAIN-OP 'DATA)
	(GO X) ))

;REG IS THE PDL ARG LIST WITH THE PDL CDR ED OFF
(DEFUN CHASM-5-PDL-REGISTER-REF (REG)
  (PROG (TEM)
	(COND ((EQ (CAR REG) 'CONSTANT)
		(RETURN (CHASM-5-ASSIGN-PDL-CONST (CHASM-5-EVALUATE-EXP (CADR REG)))))
	      ((EQ (CAR REG) 'HW-CONST)
		(RETURN (CHASM-5-ASSIGN-PDL-CONST 
			  (+ (LSH (LOGAND 377 (CHASM-5-EVALUATE-EXP (CADR REG))) 8)
			     (LOGAND 377 (CHASM-5-EVALUATE-EXP (CADDR REG)))))))
	      ((NULL (SETQ TEM (GET (CAR REG) 'CHASM-PDL-REGISTER-BINDING)))
		(GO E1)))
	(RETURN TEM)
    E1	(CHEOPS-BARF REG 'UNDEFINED-PDL-REGISTER 'DATA)
	(RETURN 0) ))

(DEFUN CHASM-5-ASSIGN-PDL-CONST (CON)
  (PROG (TEM) 
    L	(COND ((SETQ TEM (FIND-POSITION-IN-LIST-EQUAL CON CHASM-5-PDL-CONSTANT-LIST))
		(RETURN (- 200 TEM))))
	(STORE (CHASM-PDL (- 200 (LENGTH CHASM-5-PDL-CONSTANT-LIST))) CON)
	(SETQ CHASM-5-PDL-CONSTANT-LIST 
	     (NCONC CHASM-5-PDL-CONSTANT-LIST (LIST CON)))
	(GO L)))

;EVALUTE EXP TO GET NUMBER.  USES CHEOPS-VALUE TYPE VALUES.
; NOTE! THE FOLLOWING ROUTINE IS A COMPLETE CROCK!
;  THIS IS PARTIALLY EXPLAINED BY THE FACT IT TRIES TO PROCESS
;  BOTH THINGS READ IN BY THE LISP READER (WHEN CALLED FROM CHEOPS-PARAMETERS)
;  AND THINGS READ IN BY THE CHASM READER.
(DEFUN CHASM-5-EVALUATE-EXP (EXP)
  (PROG (ANS EX1)
	(COND ((ATOM EXP) (RETURN (CHASM-5-EV-AT EXP))))
	(SETQ ANS 0)
	(SETQ EX1 EXP)
   L	(COND ((NULL EX1) (RETURN ANS))
	      ((EQ (CAR EX1) '+) (GO L1))	;CROCK DUE TO SCO + LOSSAGE
	      ((EQ (CAR EX1) '-) (GO L2))	;CROCK FOR USE WHEN CALLED BY 
						; CHEOPS-PARAMETERS
	      ((NOT (ATOM (CAR EX1))) (GO E1)))
	(SETQ ANS (+ ANS (CHASM-5-EV-AT (CAR EX1))))
   L1	(COND ((NULL (CDDR EX1)) (GO L1A)))
	(SETQ ANS (+ ANS (+ (CHASM-5-EVALUATE-EXP (CADR EX1))
			    (CHASM-5-EVALUATE-EXP (CADDR EX1)))))
	(GO L2A)
   L1A	(SETQ EX1 (CDR EX1))
	(GO L)
   L2	(SETQ ANS (+ ANS (- (CHASM-5-EVALUATE-EXP (CADR EX1))
			    (CHASM-5-EVALUATE-EXP (CADDR EX1)))))
   L2A	(SETQ EX1 (CDDDR EX1))
	(GO L)
   E1	(CHEOPS-BARF EXP 'BAD-EXPRESSION 'DATA)
	(RETURN 0)))

(DEFUN CHASM-5-EV-AT (AT)
	(COND ((NUMBERP AT) AT)
	      ((GET AT 'CHASM-VALUE))
	      (T (CHEOPS-BARF AT 'NO-VALUE 'WARN) 0)))

(DEFUN CHASM-5-ALU-OP (WORD)
  (PROG ()
	(SETQ CHASM-5-OP 'ALU-OP)
	(RETURN (CONS 'ALU-OP (CHASM-5-CONVERT-DATA-LIST (CDR WORD))))))

(DEFUN CHASM-5-ARRAY-OP (WORD)
  (PROG ()
	(SETQ CHASM-5-OP 'ARRAY-OP)
	(RETURN (CONS 'ARRAY-OP (CHASM-5-CONVERT-DATA-LIST (CDR WORD))))))

(DEFUN CHASM-5-ARRAY-HOLD (WORD)
  (PROG (MAIN-LIST DEFAULT-LIST)
	(SETQ CHASM-5-OP 'ARRAY-OP)
	(SETQ MAIN-LIST (CHASM-5-CONVERT-DATA-LIST (CDR WORD)))
	(SETQ DEFAULT-LIST (CHASM-5-CONVERT-DATA-LIST 
				(CDR (CHASM-STORAGE-WORD 
				       (CHASM-4-GET-INDEX (CADAR WORD))))))
	(RETURN (CONS 'ARRAY-OP (CHASM-5-MERGE-ARRAY-LISTS MAIN-LIST DEFAULT-LIST)))))

(DEFUN CHASM-5-DUPLICATE-OP (WORD)
  (CHASM-5-CONVERT-WORD (CHASM-STORAGE-WORD (CHASM-4-GET-INDEX (CADAR WORD)))))

(DEFUN CHASM-5-GET-AC (REG)
  (PROG (TEM)
	(SETQ TEM (CHASM-5-GET-AC-OR-AAC REG))
	(COND ((NOT (< TEM 10))
		(CHEOPS-BARF REG 'AAC-IN-AC-CONTEXT 'DATA)))
	(RETURN TEM)))

(DEFUN CHASM-5-GET-AAC (REG)
  (PROG (TEM)
	(SETQ TEM (CHASM-5-GET-AC-OR-AAC REG))
	(COND ((< TEM 10)
		 (CHEOPS-BARF REG 'AC-IN-AAC-CONTEXT 'DATA)))
	(RETURN TEM)))

(DEFUN CHASM-5-GET-AC-OR-AAC (REG)
  (PROG (TEM)
	(COND ((NULL (SETQ TEM (GET REG 'CHASM-AC-BINDING)))
		(CHEOPS-BARF REG 'UNKNOWN-AC-OR-AAC 'DATA)
		(SETQ TEM 0)))
	(RETURN TEM)))

(DEFUN CHASM-5-MERGE-ARRAY-LISTS (MAIN-LIST DEFAULT-LIST)
  (PROG (ANS D-L)
	(SETQ D-L DEFAULT-LIST)
	(SETQ ANS MAIN-LIST)
  L	(COND ((NULL D-L) (RETURN ANS))
	      ((NULL (CHASM-5-CONFLICTS (CAR D-L) MAIN-LIST))
		(SETQ ANS (CONS (CAR D-L) ANS))))
	(SETQ D-L (CDR D-L))
	(GO L)))

;ITEM IS A ITEM FROM AN ADDUP LIST, AND LST IS AN ADDUP LIST.
;RETURNS T IF ITEM ATTEMPTS TO SPECIFY ANY OF THE UINST BITS
;ALREADY SPECIFIED BY MEMBERS OF LST.
;WRITE-PULSES PAF, AND FLAG-CONTROL ITEMS DONT CARRY OVER, THUS ALWAYS "CONFLICT".
;CHEOPS-TRANSFER-FIELD-VALUES ARE LIKE PUSHJ, POPJ, E-LONG, AND STATISTICS-BIT.
;THEY ALSO ALWAYS CONFLICT.
(DEFUN CHASM-5-CONFLICTS (ITEM LST)
  (PROG (F1 F2)
	(COND ((ATOM ITEM) (GO A1)))
	(SETQ F1 (CAR ITEM))
	(COND ((MEMQ F1 '(PAF FLAG-CONTROL)) (RETURN T)))
  L1	(COND ((NULL LST) (RETURN NIL))
	      ((ATOM (CAR LST)))
	      ((EQ (CAAR LST) F1) (RETURN T)))
	(SETQ LST (CDR LST))
	(GO L1)
  A1	(COND ((OR (GET ITEM 'CHEOPS-WRITE-PULSE-VALUE)
		   (GET ITEM 'CHEOPS-TRANSFER-FIELD-VALUE))
		 (RETURN T)))
	(COND ((NULL (SETQ F1 (GET ITEM 'CHEOPS-UINST-FIELD)))
		(CHEOPS-BARF ITEM 'NO-FIELD-PROP--CHASM-5-CONFICTS 'WARN)
		(RETURN NIL)))
  A2	(COND ((NULL LST) (RETURN NIL))
	      ((AND (ATOM (CAR LST))
		    (SETQ F2 (GET (CAR LST) 'CHEOPS-UINST-FIELD))
		    (CHASM-5-FIELDS-OVERLAP F1 F2))
		(RETURN T)))
	(SETQ LST (CDR LST))
	(GO A2)))

(DEFUN CHASM-5-FIELDS-OVERLAP (F1 F2)
  (COND ((< (CADDR F1) (CADDR F2))
	   (CHASM-5-FIELDS-OVERLAP F2 F1))	;ASSURE F1 "LEFTMOST"
        (T (> (+ (CADR F2) (CADDR F2))	;DOES F2 REACH UP INTO F1?
		   (CADDR F1)))))

;INTERPRET PARAMETER LIST
(DEFUN CHEOPS-PARAMETERS FEXPR (LST)
  (PROG (TEM VAL)
     L	(COND ((NULL LST) (RETURN T))
	      ((EQ (CAAR LST) 'DEFINE-AC)
		(PUTPROP (CADAR LST) (CADDAR LST) 'CHASM-AC-BINDING))
	      ((EQ (CAAR LST) 'DEFINE-AAC)
		(PUTPROP (CADAR LST) (+ 10 (CADDAR LST)) 'CHASM-AC-BINDING))
	      ((EQ (CAAR LST) 'DEFINE-PDL-REGISTER)
		(SETQ TEM (CADDAR LST))
		(PUTPROP (CADAR LST) TEM 'CHASM-PDL-REGISTER-BINDING)
		(SETQ VAL (CADDDR (CAR LST)))
		(COND ((SYMBOLP VAL)
		       (SETQ VAL (GET VAL 'CHASM-VALUE))))
		(COND ((NOT (NUMBERP VAL))
		       (PRINT (LIST (CAR LST) 'NOT-NUMBER))))
		(STORE (CHASM-PDL TEM) VAL))
	      ((EQ (CAAR LST) 'SET-CONSTANT)
		(PUTPROP (CADAR LST) (CHASM-5-EVALUATE-EXP (CADDAR LST)) 'CHASM-VALUE))
	      ((EQ (CAAR LST) 'SET-STARTING-ADDRESS)
		(PUTPROP 'STARTING-ADDRESS (CADAR LST) 'STARTING-ADDRESS))
	      (T (CHEOPS-BARF (CAR LST) 'UNKNOWN-ASSIGNMENT 'WARN)))
	(SETQ LST (CDR LST))
	(GO L)))

(DEFUN CHASM-5-PRINT-GENERATION-AND-TAG (IDX)
	(TERPRI)
	(PRIN1 (\ IDX CHASM-NUMBER-GENERATIONS))
	(PRINC '%)
	(PRIN1 (CHASM-TAG-NAME (// IDX CHASM-NUMBER-GENERATIONS))))