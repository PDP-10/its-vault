;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LCHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

;C-REACH-FOLLOWING-POSITION NOT ONLY DOES C-PLAY-MOVE-FROM-MOVE-LIST,
; BUT ALSO SETS UP C-CURRENT-POSITION.  THIS INVOLVES HACKING HASH TABLE
; AND ALL..

;returns t if hash match, otherwise nil

(DEFUN C-REACH-FOLLOWING-POSITION (MOVE-LIST IDX)
       (PROG (tem hash-match?)
	     (C-PLAY-MOVE (AR-1 MOVE-LIST (+ IDX C-MVL-MOVING-PC))
			  (AR-1 MOVE-LIST (+ IDX C-MVL-TO-SQ))
			  (AR-1 MOVE-LIST (+ IDX C-MVL-CODE)))
	     (COND ((SETQ TEM (AR-1 MOVE-LIST (+ IDX C-MVL-FOLLOWING-POSITION)))
		    (SETQ C-CURRENT-POSITION TEM)	;POSITION LINK ALREADY EXISTS
		    (RETURN T)))
	     (setq hash-match? (c-hash-lookup-position))
	     (cond ((not hash-match?)
		    (as-1 c-current-position
			  move-list
			  (+ idx c-mvl-following-position))))
	     (assign-position-var)
	     (return hash-match?)))

(defun assign-position-var nil
       (cond ((fboundp 'get-active-key)
              (setq move-list (c-get-my-move-list))
              (setq active-key (get-active-key))
              (setq active-key-struc (active-key-struc active-key))
              (setq key-temps (fetch-temps)))))

(defun c-hash-lookup-position nil
  (PROG (HASH HIDX LIM TEM) 
	(SETQ HASH (BOARD-HASH BOARD-ARRAY)) 
	(SETQ HIDX (LOGAND -2	;77777776 AVOID OVERFLOW DURING READ
			  (\ (LOGAND (logxor (c-get-current-side) HASH)
				     #o37777777)
			     (SETQ LIM (1- (ARRAY-DIMENSION-N 1 POSITION-HASH-ARRAY))))))
    L	(COND ((NULL (SETQ TEM (AR-1 POSITION-HASH-ARRAY HIDX)))
	       (GO NEW))
	      ((= TEM HASH)
	       (SETQ C-CURRENT-POSITION 
		     (AR-1 POSITION-HASH-ARRAY (1+ HIDX)))
	       (RETURN T)))
    	(COND ((< (SETQ HIDX (+ HIDX 2)) LIM)
	       (GO L))
	      (T (SETQ HIDX 0) (GO L)))
   NEW	(SETQ C-CURRENT-POSITION (GENSYM))
   	(AS-1 HASH POSITION-HASH-ARRAY HIDX)
	(AS-1 C-CURRENT-POSITION POSITION-HASH-ARRAY (1+ HIDX))
	(RETURN nil)
))

(defun c-hash-store-current-position nil
  (PROG (HASH HIDX LIM TEM) 
	(SETQ HASH (BOARD-HASH BOARD-ARRAY)) 
	(SETQ HIDX (LOGAND -2	;77777776 AVOID OVERFLOW DURING READ
			  (\ (LOGAND (logxor (c-get-current-side) HASH)
				     #o37777777)
			     (SETQ LIM (ARRAY-DIMENSION-N 1 POSITION-HASH-ARRAY)))))
    L	(COND ((NULL (SETQ TEM (AR-1 POSITION-HASH-ARRAY HIDX)))
	       (GO NEW))
	      ((= TEM HASH)
	       (SETQ C-CURRENT-POSITION 
		     (AR-1 POSITION-HASH-ARRAY (1+ HIDX)))
	       (RETURN T)))
    	(COND ((< (SETQ HIDX (+ HIDX 2)) LIM)
	       (GO L))
	      (T (SETQ HIDX 0) (GO L)))
   NEW  (AS-1 HASH POSITION-HASH-ARRAY HIDX)
	(AS-1 C-CURRENT-POSITION POSITION-HASH-ARRAY (1+ HIDX))
	(RETURN nil)
))
(declare (special c-root-position))

(DEFUN C-GET-PREVIOUS-POSITION-HEAD (&OPTIONAL (PLIES-BACK 1))
  (PROG (GAME-INDEX fp)
        (setq fp (game-fill-pointer game-array))
        (cond ((zerop fp)
               (error "there is no previous position" 'c-get-previous-position-head)))
	(SETQ GAME-INDEX (- fp (* PLIES-BACK C-GAME-NQS)))   ;NOT 1+ BECAUSE THEY ARE STORED
    	(COND ((NOT (>= GAME-INDEX 0))			  ; "ONE OFF"
	       (RETURN NIL)))		;WORLD DOESNT GO BACK THAT FAR
	(RETURN (AR-1 GAME-ARRAY (+ GAME-INDEX C-GAME-CURRENT-POSITION)))))

;JUST PLAY MOVE FROM MOVE-LIST.  MOVE-LIST CAN EVEN BE HIS-MOVE-LIST.
; SETS C-CURRENT-POSITION TO NIL.  RETURNS T UNLESS MOVE CAPTURES KING,
; IN WHICH CASE RETURNS NIL AND DOES NOTHING EXCEPT MARK MOVE AS
; CAPTURES-KING IN C-MVL-STATE.  (THIS CAN HAPPEN WITH HIS-MOVE-LIST).
(DEFUN C-PLAY-MOVE-FROM-MOVE-LIST (MOVE-LIST IDX)
  (PROG (TO-SQ SQUARE-CONTENTS)
	(SETQ TO-SQ (AR-1 MOVE-LIST (+ IDX C-MVL-TO-SQ)))
	(COND ((AND TO-SQ 			;CAN BE NIL IF O-O, ETC
		    (< (SETQ SQUARE-CONTENTS (AR-1 BOARD-ARRAY TO-SQ))
		       PIECE-ARRAY-SIZE)
		    (EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
			      SQUARE-CONTENTS)
			'KING))
	       (AS-1 'CAPTURES-KING MOVE-LIST (+ IDX C-MVL-STATE))
	       (RETURN NIL)))
    	(C-PLAY-MOVE (AR-1 MOVE-LIST (+ IDX C-MVL-MOVING-PC))
		     TO-SQ
		     (AR-1 MOVE-LIST (+ IDX C-MVL-CODE)))
	(SETQ C-CURRENT-POSITION NIL)
	(RETURN T)))

;NOTE THAT MOVING-PC DOES NOT NECESSARILY BELONG TO SIDE TO MOVE (IF WE ARE
; GETTING POSITION RESULTING FROM HIS POSSIBLE MOVE, ETC).
(DEFUN C-PLAY-MOVE (MOVING-PC TO-SQ CODE)
  (PROG (FROM-SQ CAPT-PC NMOVES-ARRAY EP-CAPT-SQ HASH PF-ARRAY VAL)
	(SETF (BOARD-CAT-DATA-VALID BOARD-ARRAY) NIL)
	(SETQ NMOVES-ARRAY (PIECE-NMOVES-ARRAY PIECE-ARRAY))
	(SETQ PF-ARRAY (PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY))
	(SETQ FROM-SQ (AR-1 PIECE-ARRAY MOVING-PC))
	(COND (CODE (GO M3)))
   M3R	(SETQ HASH (BOARD-HASH BOARD-ARRAY))   ;DO THIS AFTER C-QUEENIFY, ETC HAVE HAD
   					       ; A CHANCE TO HACK
	(COND ((< (SETQ CAPT-PC (AR-1 BOARD-ARRAY TO-SQ))
		  PIECE-ARRAY-SIZE)
	       (GO CAPT)))
   M1	(AS-1 TO-SQ PIECE-ARRAY MOVING-PC)
	(AS-1 SQUARE-VACANT BOARD-ARRAY FROM-SQ)
	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE FROM-SQ) 
		     (AR-1 PF-ARRAY MOVING-PC))))
	(AS-1 MOVING-PC BOARD-ARRAY TO-SQ)
	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE TO-SQ) 
		     (AR-1 PF-ARRAY MOVING-PC))))
	(SETF (BOARD-HASH BOARD-ARRAY) HASH)   ;FINISHED MOVING PCS, DONT DO THIS 
					       ; ON CASTLES.
   X1	(AS-1 (1+ (AR-1 NMOVES-ARRAY MOVING-PC)) NMOVES-ARRAY MOVING-PC)
	(ARRAY-PUSH GAME-ARRAY MOVING-PC)	;C-GAME-MOVING-PC
        (ARRAY-PUSH GAME-ARRAY FROM-SQ)		;C-GAME-FROM-SQ
	(ARRAY-PUSH GAME-ARRAY CAPT-PC)		;C-GAME-CAPT-PC
	(ARRAY-PUSH GAME-ARRAY TO-SQ)		;C-GAME-TO-SQ 
	(ARRAY-PUSH GAME-ARRAY (BOARD-GHOST-LOCATION BOARD-ARRAY))  ;C-GAME-GHOST-LOCATION
	(SETF (BOARD-GHOST-LOCATION BOARD-ARRAY) 0)
	(ARRAY-PUSH GAME-ARRAY CODE)		;C-GAME-CODE
	(ARRAY-PUSH GAME-ARRAY C-CURRENT-POSITION)   ;C-GAME-CURRENT-POSITION
	(SETF (GAME-PLY-NUMBER GAME-ARRAY) (1+ (GAME-PLY-NUMBER GAME-ARRAY)))
	(COND ((AND (PAWN-P MOVING-PC)			;GENERATE GHOST, IF NECC.
		    (= 1 (AR-1 NMOVES-ARRAY MOVING-PC))
		    (>= TO-SQ WQR4)
		    (<= TO-SQ BKR4))
	       (SETF (BOARD-GHOST-LOCATION BOARD-ARRAY)
		     (COND ((WHITE-P MOVING-PC) (- TO-SQ BOARD-WIDTH))
			   (T (+ TO-SQ BOARD-WIDTH))))))
	(RETURN T)
  EPCAPT(SETQ HASH (BOARD-HASH BOARD-ARRAY))
  	(SETQ EP-CAPT-SQ (COND ((WHITE-P MOVING-PC) (- TO-SQ BOARD-WIDTH))
			       (T (+ TO-SQ BOARD-WIDTH))))
 	(SETQ CAPT-PC (AR-1 BOARD-ARRAY EP-CAPT-SQ))
        (AS-1 SQUARE-VACANT BOARD-ARRAY EP-CAPT-SQ)	;NECC TO FLUSH PC EXPLICITLY SINCE
						; IT WONT GET STORED OVER.
	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE EP-CAPT-SQ) 
		     (AR-1 PF-ARRAY CAPT-PC))))
	(GO CAPT1)

  CAPT	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE TO-SQ) 
		     (AR-1 PF-ARRAY CAPT-PC))))
  CAPT1	(AS-1 0 PIECE-ARRAY CAPT-PC)
	(SETQ VAL (AR-1 (PIECE-VALUE-ARRAY PIECE-ARRAY) CAPT-PC))
	(COND ((ZEROP (LOGAND #o20 CAPT-PC))	;BUGGER MATERIALS, ETC
	       (COND ((EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY) CAPT-PC)
			  'WHITE-PAWN)
		      (SETF (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
			    (- (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
			       VAL)))
		     (T (SETF (PIECE-WHITE-MAT-PCS PIECE-ARRAY)
			      (- (PIECE-WHITE-MAT-PCS PIECE-ARRAY)
				 VAL)))))
	      (T
	       (COND ((EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY) CAPT-PC)
			  'BLACK-PAWN)
		      (SETF (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			    (- (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			       VAL)))
		     (T (SETF (PIECE-BLACK-MAT-PCS PIECE-ARRAY)
			      (- (PIECE-BLACK-MAT-PCS PIECE-ARRAY)
				 VAL))))))
	(GO M1)
  M3	(SELECTQ CODE 
	    (CASTLES-KING (C-PLAY-CASTLES MOVING-PC (+ MOVING-PC 3) 1)
			  (GO X1))
	    (CASTLES-QUEEN (C-PLAY-CASTLES MOVING-PC (- MOVING-PC 4) -1)
			   (GO X1))
	    (EN-PASSENT (GO EPCAPT))
	    (=Q (C-QUEENIFY-PAWN MOVING-PC 'QUEEN)
		(GO M3R))
	    (=R (C-QUEENIFY-PAWN MOVING-PC 'ROOK)
		(GO M3R))
	    (=B (C-QUEENIFY-PAWN MOVING-PC 'BISHOP)
		(GO M3R))
	    (=N (C-QUEENIFY-PAWN MOVING-PC 'KNIGHT)
		(GO M3R))
	    (pass (c-play-nothing)))
	(ERROR 'CODE-NOT-IMPLEMENTED CODE)
))

(DEFUN C-QUEENIFY-PAWN (PC SYM-TYPE-WOOD)
  (PROG (NUM-TYPE-WOOD VAL HASH PF-ARRAY)
	(SETQ PF-ARRAY (PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY))
	(SETQ HASH (BOARD-HASH BOARD-ARRAY))
	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE (AR-1 PIECE-ARRAY PC)) 
		     (AR-1 PF-ARRAY PC))))
	(SETQ VAL (AR-1 (PIECE-VALUE-ARRAY PIECE-ARRAY)  ;DECREMENT PIECE-<SIDE>-PAWNS
			PC))
	(COND ((ZEROP (LOGAND PC #o20))
	       (SETF (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
		     (- (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
			VAL)))
	      (T (SETF (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
		       (- (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			  VAL))))
	(AS-1 SYM-TYPE-WOOD 
	      (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
	      PC)
	(AS-1 (SETQ NUM-TYPE-WOOD (GET SYM-TYPE-WOOD 'TYPE-WOOD-NUMBER))
	      (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY)
	      PC)
	(AS-1 (+ (* NUM-TYPE-WOOD 2) (LDB #o0401 PC))
	      (PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY)
	      PC)
	(AS-1 (SETQ VAL (AR-1 (BOARD-TYPE-WOOD-VALUE-ARRAY BOARD-ARRAY)
			      NUM-TYPE-WOOD))
	      (PIECE-VALUE-ARRAY PIECE-ARRAY)
	      PC)
	(AS-1 (AR-1 INITIAL-TYPE-WOOD-POSITIONAL-FACTOR-ARRAY 
		    NUM-TYPE-WOOD)
	      (PIECE-POSITIONAL-WEIGHTING-FACTOR-ARRAY PIECE-ARRAY)
	      PC)
	(COND ((ZEROP (LOGAND #o20 PC))	;INCREMENT PIECE-<SIDE>-PCS
	       (SETF (PIECE-WHITE-MAT-PCS PIECE-ARRAY)
		     (+ (PIECE-WHITE-MAT-PCS PIECE-ARRAY)
			VAL)))
	      (T (SETF (PIECE-BLACK-MAT-PCS PIECE-ARRAY)
		       (+ (PIECE-BLACK-MAT-PCS PIECE-ARRAY)
			  VAL))))
	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE (AR-1 PIECE-ARRAY PC)) 
		     (AR-1 PF-ARRAY PC))))
	(SETF (BOARD-HASH BOARD-ARRAY) HASH)))

(DEFUN C-UNQUEENIFY-PAWN (PC OLD-SYM-TYPE-WOOD)
  (PROG (SYM-TYPE-WOOD NUM-TYPE-WOOD VAL HASH PF-ARRAY)
	(SETQ PF-ARRAY (PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY))
	(SETQ HASH (BOARD-HASH BOARD-ARRAY))
	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE (AR-1 PIECE-ARRAY PC)) 
		     (AR-1 PF-ARRAY PC))))
	(SETQ VAL (AR-1 (PIECE-VALUE-ARRAY PIECE-ARRAY)
			PC))
	(COND ((ZEROP (LOGAND PC #o20))		;DECREMENT PIECE-<SIDE>-PCS
	       (SETF (PIECE-WHITE-MAT-PCS PIECE-ARRAY)
		     (- (PIECE-WHITE-MAT-PCS PIECE-ARRAY)
			VAL)))
	      (T (SETF (PIECE-BLACK-MAT-PCS PIECE-ARRAY)
		       (- (PIECE-BLACK-MAT-PCS PIECE-ARRAY)
			  VAL))))
	(SETQ SYM-TYPE-WOOD (COND ((ZEROP (LOGAND PC #o20))
				   'WHITE-PAWN)
				  (T 'BLACK-PAWN)))
	(AS-1 SYM-TYPE-WOOD 
	      (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
	      PC)
	(AS-1 (SETQ NUM-TYPE-WOOD (GET SYM-TYPE-WOOD 'TYPE-WOOD-NUMBER))
	      (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY)
	      PC)
	(AS-1 (+ (* NUM-TYPE-WOOD 2) (LDB #o0401 PC))
	      (PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY)
	      PC)
	(AS-1 (SETQ VAL (AR-1 (BOARD-TYPE-WOOD-VALUE-ARRAY BOARD-ARRAY)
			      NUM-TYPE-WOOD))
	      (PIECE-VALUE-ARRAY PIECE-ARRAY)
	      PC)
	(AS-1 (AR-1 INITIAL-TYPE-WOOD-POSITIONAL-FACTOR-ARRAY 
		    NUM-TYPE-WOOD)
	      (PIECE-POSITIONAL-WEIGHTING-FACTOR-ARRAY PIECE-ARRAY)
	      PC)
	(COND ((ZEROP (LOGAND #o20 PC))	;INCREMENT PIECE-<SIDE>-MAT-PAWNS
	       (SETF (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
		     (+ (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
			VAL)))
	      (T (SETF (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
		       (+ (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			  VAL))))
	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE (AR-1 PIECE-ARRAY PC)) 
		     (AR-1 PF-ARRAY PC))))
	(SETF (BOARD-HASH BOARD-ARRAY) HASH)))

(DEFUN C-PLAY-CASTLES (K R INC)
  (PROG (KL TEM HASH PF-ARRAY)
	(SETQ HASH (BOARD-HASH BOARD-ARRAY))
	(SETQ PF-ARRAY (PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY))
	(SETQ KL (AR-1 PIECE-ARRAY K))
	(AS-1 SQUARE-VACANT BOARD-ARRAY KL)
	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE KL) 
		     (AR-1 PF-ARRAY K))))
	(AS-1 SQUARE-VACANT BOARD-ARRAY (SETQ TEM (AR-1 PIECE-ARRAY R)))
	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE TEM) 
		     (AR-1 PF-ARRAY R))))
	(AS-1 (SETQ TEM (+ KL INC INC)) PIECE-ARRAY K)
	(AS-1 K BOARD-ARRAY TEM)
	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE TEM) 
		     (AR-1 PF-ARRAY K))))
	(AS-1 (SETQ TEM (+ KL INC)) PIECE-ARRAY R)
	(AS-1 R BOARD-ARRAY TEM)
	(SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE TEM) 
		     (AR-1 PF-ARRAY R))))
	(SETF (BOARD-HASH BOARD-ARRAY) HASH)
))

(DEFUN C-REVERT-CASTLES (K R KI RI)
   (PROG (TEM HASH PF-ARRAY)
	 (SETQ HASH (BOARD-HASH BOARD-ARRAY))
	 (SETQ PF-ARRAY (PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY))
	 (SETQ TEM (AR-1 PIECE-ARRAY K))
	 (AS-1 SQUARE-VACANT BOARD-ARRAY TEM)
	 (SETQ HASH (LOGXOR HASH 
			    (ROT (AR-1 C-HASH-SQUARE TEM) 
				 (AR-1 PF-ARRAY K))))
	 (AS-1 K BOARD-ARRAY (SETQ TEM (+ TEM KI)))
	 (SETQ HASH (LOGXOR HASH 
			    (ROT (AR-1 C-HASH-SQUARE TEM) 
				 (AR-1 PF-ARRAY K))))
	 (AS-1 TEM PIECE-ARRAY K)
	 (SETQ TEM (AR-1 PIECE-ARRAY R))
	 (AS-1 SQUARE-VACANT BOARD-ARRAY TEM)
	 (SETQ HASH (LOGXOR HASH 
			    (ROT (AR-1 C-HASH-SQUARE TEM) 
				 (AR-1 PF-ARRAY R))))
	 (AS-1 R BOARD-ARRAY (SETQ TEM (+ TEM RI)))
	 (SETQ HASH (LOGXOR HASH 
			    (ROT (AR-1 C-HASH-SQUARE TEM) 
				 (AR-1 PF-ARRAY R))))
	 (AS-1 TEM PIECE-ARRAY R)
	 (SETF (BOARD-HASH BOARD-ARRAY) HASH)))

(DEFUN C-REVERT-MOVE NIL 
  (PROG (MOVING-PC TO-SQ CODE FROM-SQ CAPT-PC NMOVES-ARRAY EP-CAPT-SQ HASH PF-ARRAY VAL)
	(cond ((zerop (game-ply-number game-array))
	       (return 'cannot-revert-move)))
	(SETF (BOARD-CAT-DATA-VALID BOARD-ARRAY) NIL)
	(SETQ PF-ARRAY (PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY))
	(SETQ NMOVES-ARRAY (PIECE-NMOVES-ARRAY PIECE-ARRAY))
	(SETQ C-CURRENT-POSITION (ARRAY-POP GAME-ARRAY))
	(SETQ CODE (ARRAY-POP GAME-ARRAY))
	(SETF (BOARD-GHOST-LOCATION BOARD-ARRAY) (ARRAY-POP GAME-ARRAY))
	(SETQ TO-SQ (ARRAY-POP GAME-ARRAY))
	(SETQ CAPT-PC (ARRAY-POP GAME-ARRAY))
	(SETQ FROM-SQ (ARRAY-POP GAME-ARRAY))
	(SETQ MOVING-PC (ARRAY-POP GAME-ARRAY))
	(SETF (GAME-PLY-NUMBER GAME-ARRAY) (1- (GAME-PLY-NUMBER GAME-ARRAY)))
	(assign-position-var) 
	(COND (CODE (GO U2)))
   U2R	(SETQ HASH (BOARD-HASH BOARD-ARRAY))  ;DO THIS AFTER C-UNQUEENIFY, ETC
   	(COND ((< CAPT-PC PIECE-ARRAY-SIZE)
	       (GO UNCAPT)))
   U1  	(AS-1 CAPT-PC BOARD-ARRAY TO-SQ)	;SQUARE-VACANT IF NO CAPT.
   U1A	(SETQ HASH (LOGXOR HASH 
			   (ROT (AR-1 C-HASH-SQUARE TO-SQ) 
				(AR-1 PF-ARRAY MOVING-PC))))
   	(AS-1 MOVING-PC BOARD-ARRAY FROM-SQ)
	(SETQ HASH (LOGXOR HASH 
			   (ROT (AR-1 C-HASH-SQUARE FROM-SQ) 
				(AR-1 PF-ARRAY MOVING-PC))))
	(AS-1 FROM-SQ PIECE-ARRAY MOVING-PC)
	(SETF (BOARD-HASH BOARD-ARRAY) HASH)
   X1	(AS-1 (1- (AR-1 NMOVES-ARRAY MOVING-PC)) NMOVES-ARRAY MOVING-PC)
	(RETURN T)
  UNCAPT(AS-1 TO-SQ PIECE-ARRAY CAPT-PC)
	(SETQ HASH (LOGXOR HASH 
			   (ROT (AR-1 C-HASH-SQUARE TO-SQ) 
				(AR-1 PF-ARRAY CAPT-PC))))
	(SETQ VAL (AR-1 (PIECE-VALUE-ARRAY PIECE-ARRAY) CAPT-PC))  ;UNBUGGER MATERIALS, ETC
	(COND ((ZEROP (LOGAND #o20 CAPT-PC))
	       (COND ((EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY) CAPT-PC)
			  'WHITE-PAWN)
		      (SETF (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
			    (+ (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
			       VAL)))
		     (T (SETF (PIECE-WHITE-MAT-PCS PIECE-ARRAY)
			      (+ (PIECE-WHITE-MAT-PCS PIECE-ARRAY)
				 VAL)))))
	      (T
	       (COND ((EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY) CAPT-PC)
			  'BLACK-PAWN)
		      (SETF (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			    (+ (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			       VAL)))
		     (T (SETF (PIECE-BLACK-MAT-PCS PIECE-ARRAY)
			      (+ (PIECE-BLACK-MAT-PCS PIECE-ARRAY)
				 VAL))))))
	(GO U1)
   U2  	(SELECTQ CODE 
	    (EN-PASSENT (GO EPCAPT))
	    (CASTLES-KING (C-REVERT-CASTLES MOVING-PC (+ MOVING-PC 3) -2 2)
			  (GO X1))
	    (CASTLES-QUEEN (C-REVERT-CASTLES MOVING-PC (- MOVING-PC 4) 2 -3)
			  (GO X1))
	    (=Q (C-UNQUEENIFY-PAWN MOVING-PC 'QUEEN)
		(GO U2R))
	    (=R (C-UNQUEENIFY-PAWN MOVING-PC 'ROOK)
		(GO U2R))
	    (=B (C-UNQUEENIFY-PAWN MOVING-PC 'BISHOP)
		(GO U2R))
	    (=N (C-UNQUEENIFY-PAWN MOVING-PC 'KNIGHT)
		(GO U2R))
	    (pass (c-unplay-nothing)))
 	(ERROR CODE)
  EPCAPT(SETQ HASH (BOARD-HASH BOARD-ARRAY))
	(SETQ EP-CAPT-SQ (COND ((WHITE-P MOVING-PC) (- TO-SQ BOARD-WIDTH))
			       (T (+ TO-SQ BOARD-WIDTH))))
	(AS-1 CAPT-PC BOARD-ARRAY EP-CAPT-SQ)
	(SETQ HASH (LOGXOR HASH 
			   (ROT (AR-1 C-HASH-SQUARE EP-CAPT-SQ) 
				(AR-1 PF-ARRAY CAPT-PC))))
	(AS-1 EP-CAPT-SQ PIECE-ARRAY CAPT-PC)
	(SETQ VAL (AR-1 (PIECE-VALUE-ARRAY PIECE-ARRAY) CAPT-PC))  ;UNBUGGER
	(COND ((ZEROP (LOGAND #o20 CAPT-PC))		;CAPT-PC IS ALWAYS A PAWN
	       (SETF (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
		     (+ (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
			VAL)))
	      (T (SETF (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
		       (+ (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			  VAL))))
	(AS-1 SQUARE-VACANT BOARD-ARRAY TO-SQ)
	(GO U1A)
))

(DEFUN C-K-SIDE-CASTLE-LEGAL (SIDE)
  (PROG (KR KRL HIS-ATTS)
	(COND ((OR (ZEROP (SETQ KRL (AR-1 PIECE-ARRAY 
					  (SETQ KR (+ SIDE WKR)))))
		   (NOT (ZEROP (AR-1 (PIECE-NMOVES-ARRAY PIECE-ARRAY) KR)))
		   (NOT (= (AR-1 BOARD-ARRAY (1- KRL))
			   SQUARE-VACANT))
		   (NOT (= (AR-1 BOARD-ARRAY (- KRL 2))
			   SQUARE-VACANT)))
	       (RETURN NIL)))
	(SETQ HIS-ATTS (COND ((ZEROP SIDE) (BOARD-BLACK-ATTACKS-ARRAY BOARD-ARRAY))
			     (T (BOARD-WHITE-ATTACKS-ARRAY BOARD-ARRAY))))
	(COND ((OR (NOT (ZEROP (AR-1 HIS-ATTS (1- KRL))))
		   (NOT (ZEROP (AR-1 HIS-ATTS (- KRL 2))))
		   (NOT (ZEROP (AR-1 HIS-ATTS (- KRL 3)))))
	       (RETURN NIL)))
	(RETURN T)
))

(DEFUN C-Q-SIDE-CASTLE-LEGAL (SIDE)
  (PROG (QR QRL HIS-ATTS)
	(COND ((OR (ZEROP (SETQ QRL (AR-1 PIECE-ARRAY 
					  (SETQ QR (+ SIDE WQR)))))
		   (NOT (ZEROP (AR-1 (PIECE-NMOVES-ARRAY PIECE-ARRAY) QR)))
		   (NOT (= (AR-1 BOARD-ARRAY (1+ QRL))
			   SQUARE-VACANT))
		   (NOT (= (AR-1 BOARD-ARRAY (+ QRL 2))
			   SQUARE-VACANT))
		   (NOT (= (AR-1 BOARD-ARRAY (+ QRL 3))
			   SQUARE-VACANT)))
	       (RETURN NIL)))
	(SETQ HIS-ATTS (COND ((ZEROP SIDE) (BOARD-BLACK-ATTACKS-ARRAY BOARD-ARRAY))
			     (T (BOARD-WHITE-ATTACKS-ARRAY BOARD-ARRAY))))
	(COND ((OR (NOT (ZEROP (AR-1 HIS-ATTS (+ QRL 2))))
		   (NOT (ZEROP (AR-1 HIS-ATTS (+ QRL 3))))
		   (NOT (ZEROP (AR-1 HIS-ATTS (+ QRL 4)))))
	       (RETURN NIL)))
	(RETURN T)
))

(DEFUN C-HASH-INITIALIZE NIL 
  (PROG (LIM) 
	(COND ((NULL (BOUNDP 'POSITION-HASH-ARRAY))
	       (SETQ POSITION-HASH-ARRAY 
		     (MAKE-ARRAY NIL 'ART-Q (* 2 (1- #o1000)))))
	      (T (SETQ LIM (ARRAY-DIMENSION-N 1 POSITION-HASH-ARRAY))
	         (DO I 0 (1+ I) (>= I LIM)
		     (AS-1 NIL POSITION-HASH-ARRAY I)) ))))

(DEFUN C-HASH-LOOKUP NIL
       (c-hash-lookup-position)
;  (PROG (HASH IDX LIM TEM)
;	(SETQ HASH (BOARD-HASH BOARD-ARRAY))
;	(SETQ IDX (LOGAND -2	;77777776 AVOID OVERFLOW DURING READ
;			  (\ (LOGAND HASH #o37777777)
;			     (SETQ LIM (ARRAY-DIMENSION-N 1 POSITION-HASH-ARRAY)))))
;    L	(COND ((NULL (SETQ TEM (AR-1 POSITION-HASH-ARRAY IDX)))
;	       (RETURN NIL))
;	      ((= TEM HASH)
;	       (RETURN (AR-1 POSITION-HASH-ARRAY (1+ IDX)))))
;    	(COND ((< (SETQ IDX (+ IDX 2)) LIM)
;	       (GO L))
;	      (T (SETQ IDX 0) (GO L))))
       )

(DEFUN C-HASH-CHECK NIL 
  (DO ((PC 0 (1+ PC))
       (HASH 0)
       (LOC)
       (PF-ARRAY (PIECE-TYPE-WOOD-FLAVOR-ARRAY PIECE-ARRAY)))
      ((= PC #o40) HASH)
      (COND ((NOT (ZEROP (SETQ LOC (AR-1 PIECE-ARRAY PC))))
	     (SETQ HASH (LOGXOR HASH 
		(ROT (AR-1 C-HASH-SQUARE LOC) 
		     (AR-1 PF-ARRAY PC))))))))

(DEFUN C-GET-SQUARE-CONTROL (&AUX PIA SQA)
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (COND ((NULL (SETQ SQA (C-POS-SQUARE-CONTROL-ARRAY PIA)))
	      (SETF (C-POS-SQUARE-CONTROL-ARRAY PIA)
		    (SETQ SQA (C-CREATE-SQUARE-CONTROL-ARRAY)))))
       SQA)

(DEFUN C-GET-STOP-SQUARE (&AUX PIA SSA)
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (COND ((NULL (SETQ SSA (C-POS-STOP-SQUARE-ARRAY PIA)))
	      (SETF (C-POS-STOP-SQUARE-ARRAY PIA)
		    (SETQ SSA (C-CREATE-STOP-SQUARE-ARRAY)))))
       SSA)

(DEFUN C-GET-OUR-SQUARE-BEARS (&AUX PIA)
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (C-POS-BEARS-ON-SQUARE PIA))

(DEFUN C-GET-HIS-SQUARE-BEARS (&AUX PIA)
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (C-POS-HIS-BEARS-ON-SQUARE PIA))

(DEFUN C-CREATE-POSITION-INFO-ARRAY NIL 
  (PROG (SIDE PIA PDA WDVL BDVL TEM PWA)
	(COND ((NULL (BOUNDP 'SQUARE-BEARS-AREA))
	       (MAKE-AREA ':NAME 'SQUARE-BEARS-AREA)))
	(SETQ SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
			#o0401 
			0))
	(SETQ PIA (MAKE-ARRAY NIL 'ART-Q (C-POSITION-INFO-ARRAY-SIZE)))
	(SETF (C-POS-SIDE PIA) SIDE)
	(SETF (C-POS-MOVE-LIST PIA) (C-GET-MY-MOVE-LIST))
;	(SETF (C-POS-HIS-MOVE-LIST PIA) (C-GET-HIS-MOVE-LIST))
	(SETQ PDA (MAKE-ARRAY NIL 'ART-Q PIECE-ARRAY-SIZE))
	(SETF (C-POS-BEARS-ON-SQUARE PIA)
	      (C-CREATE-SQUARE-BEARS SIDE PDA))
	(SETF (C-POS-HIS-BEARS-ON-SQUARE PIA)
	      (C-CREATE-SQUARE-BEARS (LOGXOR SIDE #o20) PDA))
	(SETF (C-POS-PIECE-DEVELOPMENT-ARRAY PIA)
	      PDA)
	(SETF (C-POS-POSITION-SYMBOL PIA)
	      C-CURRENT-POSITION)

	(SETQ WDVL 0 BDVL 0)
	(SETQ PWA (PIECE-POSITIONAL-WEIGHTING-FACTOR-ARRAY PIECE-ARRAY))
	(DO PC 0 (1+ PC) (= PC #o20)
	    (COND ((NOT (ZEROP (SETQ TEM (AR-1 PDA PC))))
		   (SETQ WDVL (+ WDVL (* TEM (AR-1 PWA PC))))))
	    (COND ((NOT (ZEROP (SETQ TEM (AR-1 PDA (+ PC #o20)))))
		   (SETQ BDVL (+ BDVL (* TEM (AR-1 PWA (+ PC #o20))))))))
	(COND ((ZEROP SIDE)
	       (SETF (C-POS-OUR-PIECE-MATERIAL PIA) (PIECE-WHITE-MAT-PCS PIECE-ARRAY))
	       (SETF (C-POS-HIS-PIECE-MATERIAL PIA) (PIECE-BLACK-MAT-PCS PIECE-ARRAY))
	       (SETF (C-POS-OUR-PAWN-MATERIAL PIA) (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY))
	       (SETF (C-POS-HIS-PAWN-MATERIAL PIA) (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY))
	       (SETF (C-POS-OUR-TOTAL-DEVELOPMENT PIA) WDVL)
	       (SETF (C-POS-HIS-TOTAL-DEVELOPMENT PIA) BDVL))
	      (T
	       (SETF (C-POS-OUR-PIECE-MATERIAL PIA) (PIECE-BLACK-MAT-PCS PIECE-ARRAY))
	       (SETF (C-POS-HIS-PIECE-MATERIAL PIA) (PIECE-WHITE-MAT-PCS PIECE-ARRAY))
	       (SETF (C-POS-OUR-PAWN-MATERIAL PIA) (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY))
	       (SETF (C-POS-HIS-PAWN-MATERIAL PIA) (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY))
	       (SETF (C-POS-OUR-TOTAL-DEVELOPMENT PIA) BDVL)
	       (SETF (C-POS-HIS-TOTAL-DEVELOPMENT PIA) WDVL)))
	(SETF (C-POS-PIECE-MATERIAL-DIFFERENCE PIA)
	      (- (PIECE-WHITE-MAT-PCS PIECE-ARRAY)
		 (PIECE-BLACK-MAT-PCS PIECE-ARRAY)))
	(SETF (C-POS-PAWN-MATERIAL-DIFFERENCE PIA)
	      (- (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
		 (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)))
	(SETF (C-POS-DEVELOPMENT-DIFFERENCE PIA)
	      (- WDVL BDVL))
	(PUTPROP C-CURRENT-POSITION PIA 'C-POSITION-INFO)
	(RETURN PIA)
))

(DEFUN C-RESET-POSITION-INFO NIL 
       (COND ((BOUNDP 'SQUARE-BEARS-AREA)
	      (C-REMOVE-POSITION-INFO 'CHESS-INITIAL-POSITION)
;	      (AS-1 0 AREA-FREE-POINTER SQUARE-BEARS-AREA)
	      ))
)

(DEFUN C-REMOVE-POSITION-INFO (POS-HEADER)
  (PROG (MOVE-LIST IDX LIM F-POS)
	(REMPROP POS-HEADER 'C-POSITION-INFO)
	(COND ((NULL (SETQ MOVE-LIST (GET POS-HEADER 'MOVE-LIST)))
	       (RETURN NIL)))
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
    L	(COND ((NOT (< IDX LIM)) (RETURN T))
	      ((SETQ F-POS (AR-1 MOVE-LIST (+ IDX C-MVL-FOLLOWING-POSITION)))
	       (C-REMOVE-POSITION-INFO F-POS)))
    	(SETQ IDX (+ IDX C-MVL-NQS))
	(GO L)
))

;SIDE IS 0 FOR WHITE OR #o20 FOR BLACK.
(DEFUN C-CREATE-SQUARE-BEARS (CURRENT-SIDE PDA)   ;ALSO COMPUTE PIECE-DEVELOPMENT
  (PROG (C-BEARS-ON-SQUARE CURRENT-PIECE TWA CURRENT-LOCATION
      	 SPECIAL-IMP-ARRAY SPECIAL-ACCUM-POS)
	(SETQ SPECIAL-IMP-ARRAY
	      (COND ((ZEROP CURRENT-SIDE) (BOARD-WHITE-IMPORTANCE-ARRAY BOARD-ARRAY))
		    (T (BOARD-BLACK-IMPORTANCE-ARRAY BOARD-ARRAY))))
	(SETQ C-BEARS-ON-SQUARE 
	      (MAKE-ARRAY SQUARE-BEARS-AREA 'ART-Q BOARD-SIZE NIL 
			  (BEARS-ON-SQUARE-ARRAY-LEADER-SIZE) NIL 'BEARS-ON-SQUARE))
	(SETQ CURRENT-PIECE CURRENT-SIDE)
	(SETQ TWA (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY))
    L	(SETQ SPECIAL-ACCUM-POS 0)
	(COND ((NOT (ZEROP (SETQ CURRENT-LOCATION (AR-1 PIECE-ARRAY CURRENT-PIECE))))
	       (FUNCALL (AR-1 C-A-DISPATCH (AR-1 TWA CURRENT-PIECE))
			(FUNCTION C-STORE-BEARS-ON-SQUARE)
		 	CURRENT-LOCATION)))
	(AS-1 SPECIAL-ACCUM-POS PDA CURRENT-PIECE)   ;CLEARS IT OUT FOR NON EXISTANT PCS
	(COND ((NOT (= 0 (LOGAND (SETQ CURRENT-PIECE (1+ CURRENT-PIECE))
				 #o17)))
	 	(GO L)))
	(C-SORT-BEARS-ON-SQUARE C-BEARS-ON-SQUARE)
	(RETURN C-BEARS-ON-SQUARE)))

;PC CAN BE EITHER A NUMBER, OR A LIST WITH THE PIECE-NUMBER IN CAR.
(DEFUN C-DELETE-FROM-PL (PC PL)
  (PROG (PCN)
	(COND ((NULL PL) (RETURN NIL)))
	(SETQ PCN (COND ((ATOM PC) PC)
			(T (CAR PC))))
	(COND ((= PCN (CAAR PL))
	       (RETURN (CDR PL)))
	      ((C-PL-MEMQ PCN PL)
	       (RETURN (CONS (CAR PL)
			     (C-DELETE-FROM-PL PC (CDR PL)))))
	      (T (RETURN PL)))))

;PC MUST BE A LIST, WITH PC-NUMBER IN CAR.
;   IF PC IS A SLIDING PC, CADR IS DIRECTION AND CADDR MAY BE 'THRU.
(DEFUN C-ADD-TO-PL (PC PL)
  (PROG (PVA PCN PCN-V P2 V2)
	(COND ((NULL PL)
	       (RETURN (LIST PC))))
	(SETQ PCN (CAR PC))
	(COND ((C-PL-MEMQ PCN PL)
	       (RETURN PL)))
	(SETQ PVA (PIECE-VALUE-ARRAY PIECE-ARRAY))
	(SETQ PCN-V (AR-1 PVA PCN)
	      P2 (CAAR PL)
	      V2 (AR-1 PVA P2))
	(COND ((<= PCN-V V2)
	       (RETURN (CONS PC PL)))
	      (T (RETURN (CONS (CAR PL)
			       (C-ADD-TO-PL PC (CDR PL))))))
))

;RETURNS ATTACK COMMING FROM DIR IN PL.  NOTE THAT THERE CAN BE MORE THAN ONE
; OF THEM, AND THIS FROB ONLY RETURNS THE FIRST ONE.
(DEFUN C-SLIDING-ATTACK-FROM-DIR-IN-PL (DIR PL)
  (PROG NIL
    L	(COND ((NULL PL) (RETURN NIL))
	      ((AND (NOT (ATOM (CAR PL)))
		    (NUMBERP (CADAR PL))
		    (= (CADAR PL) DIR))
	       (RETURN (CAR PL))))
    	(SETQ PL (CDR PL))
	(GO L)))

(DEFUN C-PL-MEMQ (PCN PL)
  (PROG NIL 
    L	(COND ((NULL PL) (RETURN NIL))
	      ((= PCN (CAAR PL))
	       (RETURN PL)))
    	(SETQ PL (CDR PL))
	(GO L)))

(DEFUN C-SORT-BEARS-ON-SQUARE (BOS)
 (PROG (PVA PL L P1 P2 V1 V2 SWITCH)
       (SETQ PVA (PIECE-VALUE-ARRAY PIECE-ARRAY))
       (DO SQ BOARD-WIDTH*2 (1+ SQ) (= SQ BOARD-WIDTH*10)
	   (COND ((NOT (= (AR-1 BOARD-ARRAY SQ) SQUARE-OFF-BOARD))
		  (COND ((AND (SETQ PL (AR-1 BOS SQ))
			      (CDR PL))
			 (PROG NIL 
			   L0   (SETQ SWITCH NIL)
				(SETQ L PL)
			   L1   (SETQ V1 (AR-1 PVA (CAR (SETQ P1 (CAR L)))))
			        (SETQ V2 (AR-1 PVA (CAR (SETQ P2 (CADR L)))))
				(COND ((AND (< V2 V1)
					    (OR (NOT (EQ (CADDR P2) 'THRU))
						(NOT (EQ (CADR P1) (CADR P2)))))
				       (RPLACA L P2)
				       (RPLACA (CDR L) P1)
				       (SETQ SWITCH T)))
				(SETQ L (CDR L))
				(COND ((CDR L)
				       (GO L1))
				      (SWITCH
				       (GO L0))) ) )) )) ) ))

(DEFUN C-STORE-BEARS-ON-SQUARE (SQ &OPTIONAL DIR MODE)
 (PROG (ENT)
       (COND ((NOT (< (AR-1 BOARD-ARRAY SQ) SQUARE-OFF-BOARD))
	      (RETURN NIL)))		;OFF BOARD
       (SETQ SPECIAL-ACCUM-POS 
	     (+ SPECIAL-ACCUM-POS 
		(AR-1 SPECIAL-IMP-ARRAY SQ)))
       (SETQ ENT (COND ((NULL DIR)
			(LIST-IN-AREA SQUARE-BEARS-AREA CURRENT-PIECE))
		       ((NULL MODE)
			(LIST-IN-AREA SQUARE-BEARS-AREA CURRENT-PIECE DIR))
		       (T (LIST-IN-AREA SQUARE-BEARS-AREA CURRENT-PIECE DIR MODE))))
       (AS-1 (CONS-IN-AREA ENT (AR-1 C-BEARS-ON-SQUARE SQ) SQUARE-BEARS-AREA)
	     C-BEARS-ON-SQUARE 
	     SQ)
))

(DEFUN C-GET-CURRENT-SIDE NIL 
       (DPB (GAME-PLY-NUMBER GAME-ARRAY) #o0401 0))

(DEFUN C-GET-HIS-SIDE NIL 
       (LOGXOR #o20 (DPB (GAME-PLY-NUMBER GAME-ARRAY) #o0401 0)))

;SIDE IS 0 FOR WHITE OR #o20 FOR BLACK. 

(DEFUN C-GET-MY-MOVE-LIST NIL 
  (PROG (move-list)
	(COND ((SETQ MOVE-LIST (GET C-CURRENT-POSITION 'MOVE-LIST))
	       (RETURN MOVE-LIST)))
	(PUTPROP C-CURRENT-POSITION
		 (SETQ MOVE-LIST (C-CREATE-MOVE-LIST-1 
				   (DPB (GAME-PLY-NUMBER GAME-ARRAY) #o0401 0)))
		 'MOVE-LIST)
	(RETURN MOVE-LIST)))

(DEFUN C-GET-HIS-MOVE-LIST NIL 
  (PROG (HIS-MOVE-LIST)
	(COND ((SETQ HIS-MOVE-LIST (GET C-CURRENT-POSITION 'HIS-MOVE-LIST))
	       (RETURN HIS-MOVE-LIST)))
	(PUTPROP C-CURRENT-POSITION
		 (SETQ HIS-MOVE-LIST (C-CREATE-MOVE-LIST-1 
				       (LOGXOR #o20 (DPB (GAME-PLY-NUMBER GAME-ARRAY)
							 #o0401 0))))
		 'HIS-MOVE-LIST)
	(RETURN HIS-MOVE-LIST)))

(DEFUN C-GET-MOVE-LIST-OF-SIDE (SIDE)
  (PROG (SIDE-TO-MOVE)
	(SETQ SIDE-TO-MOVE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
				#o0401 
				0))
	(COND ((= SIDE SIDE-TO-MOVE)
	       (RETURN (COND ((GET C-CURRENT-POSITION 'MOVE-LIST))
			     (T (C-GET-MY-MOVE-LIST)))))
	      (T (RETURN (COND ((GET C-CURRENT-POSITION 'HIS-MOVE-LIST))
			       (T (C-GET-HIS-MOVE-LIST))))))))

(DEFUN C-CREATE-MOVE-LIST (&OPTIONAL SIDE &AUX MOVE-LIST)   ;RETURNS MOVE-LIST. PUTPROP'S IT
  (COND ((NULL SIDE)
	 (SETQ SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
			 #o0401 
			 0))))				   ;ON C-CURRENT-POSITION AS APPRO.
  (SETQ MOVE-LIST (C-CREATE-MOVE-LIST-1 SIDE))
  (COND ((= SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
			 #o0401 
			 0))
	 (PUTPROP C-CURRENT-POSITION MOVE-LIST 'MOVE-LIST))
	(T (PUTPROP C-CURRENT-POSITION MOVE-LIST 'HIS-MOVE-LIST)))
  MOVE-LIST)

(DEFUN C-CREATE-MOVE-LIST-1 (SIDE) 
  (PROG (C-MOVE-LIST)
        (SETQ C-MOVE-LIST 
		(MAKE-ARRAY NIL 'ART-Q 600. NIL (MOVE-LIST-ARRAY-LEADER-SIZE)
			    NIL 'MOVE-LIST))
	(SETF (MOVE-LIST-FILL-POINTER C-MOVE-LIST) 0)
	(SETF (MOVE-LIST-SIDE C-MOVE-LIST) SIDE)
	(C-MAP-SEMI-LEGAL-MOVES (FUNCTION C-STORE-SEMI-LEGAL-MOVE) SIDE)
	(ADJUST-ARRAY-SIZE C-MOVE-LIST (ARRAY-LEADER C-MOVE-LIST 0))
	(RETURN C-MOVE-LIST)))

(DEFUN C-MAP-SEMI-LEGAL-MOVES (FCTN CURRENT-SIDE)
  (PROG (CURRENT-PIECE TWA CURRENT-LOCATION)
	(COND ((NULL (BOARD-CAT-DATA-VALID BOARD-ARRAY))  ;NECC SO CASTLES STUFF WILL WIN
	       (C-CALCULATE-ATTACKS)))
	(SETQ CURRENT-PIECE CURRENT-SIDE)
	(SETQ TWA (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY))
    L	(COND ((NOT (ZEROP (SETQ CURRENT-LOCATION (AR-1 PIECE-ARRAY CURRENT-PIECE))))
		(FUNCALL (AR-1 C-M-DISPATCH (AR-1 TWA CURRENT-PIECE))
			FCTN 
		 	CURRENT-LOCATION)))
	(COND ((NOT (= 0 (LOGAND (SETQ CURRENT-PIECE (1+ CURRENT-PIECE))
				 #o17)))
	 	(GO L))
	      ((NOT (ZEROP (AR-1 (PIECE-NMOVES-ARRAY PIECE-ARRAY)
				 (SETQ CURRENT-PIECE (+ CURRENT-SIDE WK)))))
	       (GO X)))
	(COND ((C-K-SIDE-CASTLE-LEGAL CURRENT-SIDE)
	       (FUNCALL FCTN NIL NIL 'CASTLES-KING)))
	(COND ((C-Q-SIDE-CASTLE-LEGAL CURRENT-SIDE)
	       (FUNCALL FCTN NIL NIL 'CASTLES-QUEEN)))
   X
))

(DEFUN C-STORE-SEMI-LEGAL-MOVE (SQ &OPTIONAL DIR CODE)
  (PROG (SQUARE-CONTENTS) 
	(COND (CODE 
	       (SELECTQ CODE 
		 (CASTLES-KING (GO X))
		 (CASTLES-QUEEN (GO X)))))
    	(COND ((NOT (< (SETQ SQUARE-CONTENTS (AR-1 BOARD-ARRAY SQ)) SQUARE-OFF-BOARD))
		(RETURN NIL))		;SQUARE OFF BOARD
	      ((AND (< SQUARE-CONTENTS PIECE-ARRAY-SIZE)
		    (ZEROP (LOGAND #o20 (LOGXOR SQUARE-CONTENTS CURRENT-PIECE))))
		(RETURN NIL)))		;OUR GUY ALREADY THERE
   X	(COND ((NOT (> (- (ARRAY-LENGTH C-MOVE-LIST)
			  (ARRAY-ACTIVE-LENGTH C-MOVE-LIST))
		       C-MVL-NQS))
	       (ADJUST-ARRAY-SIZE C-MOVE-LIST (* 2 (ARRAY-LENGTH C-MOVE-LIST)))))
	(ARRAY-PUSH C-MOVE-LIST CURRENT-PIECE)
	(ARRAY-PUSH C-MOVE-LIST SQ)
	(ARRAY-PUSH C-MOVE-LIST DIR)
	(ARRAY-PUSH C-MOVE-LIST CODE)
	(ARRAY-PUSH C-MOVE-LIST NIL)	;EXTRA Q AVAILABLE FOR HACKING (C-MVL-MARKER)
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-FOLLOWING-POSITION
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-STATE
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-SEARCH-CHEOPS-VALUE
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-SEARCH-POSITIONAL-VALUE
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-SEARCH-RESULTS
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-SEARCH-KEYS-PASSED-DOWN
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-ASSOCIATED-KEYS
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-MO-KEYS
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-DIRECT-RESULTS
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-CH-RESULT-VALUE
	(ARRAY-PUSH C-MOVE-LIST NIL) 	;C-MVL-CH-RESULT-DELTA
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-CH-PV-LIST
	(ARRAY-PUSH C-MOVE-LIST NIL)	;C-MVL-MOVE-POSITIONALITY
	(ARRAY-PUSH C-MOVE-LIST NIL)    ;C-MVL-ATTACK-INSTANCES
	(array-push c-move-list nil)    ;c-mvl-rejected
))

;RETURNS SORTED GROSS-POSITIONALITY-LIST. NO NEED FOR CALC-DATA TO BE VALID.
; THIS ENTRY IS SEMI-OBSOLETE.
(DEFUN C-COMPUTE-GROSS-POSITIONALITY (MOVE-LIST) 
  (PROG (GPL LIM)
	(SETQ GPL (MAKE-ARRAY NIL 
			      'ART-Q-LIST 
			      (* (SETQ LIM (// (ARRAY-ACTIVE-LENGTH MOVE-LIST) C-MVL-NQS))
				 2)))
	(DO ((M-IDX 0 (+ M-IDX C-MVL-NQS))
	     (P-IDX 0 (+ P-IDX 2)))
	    ((= M-IDX LIM))
	    (AS-1 (C-MOVE-POSITIONALITY MOVE-LIST M-IDX) GPL P-IDX)
	    (AS-1 M-IDX GPL (1+ P-IDX)))
	(RETURN (SORT-GROUPED-ARRAY GPL 2 (FUNCTION >)))))

(DEFUN C-MOVE-POSITIONALITY (MOVE-LIST IDX)
  (PROG (PC IMP-ARY CODE)
	(COND ((MEMQ (SETQ CODE (AR-1 MOVE-LIST (+ IDX C-MVL-CODE)))
		     '(CASTLES-KING CASTLES-QUEEN))
	       (RETURN #o10000)))
	(SETQ PC (AR-1 MOVE-LIST (+ IDX C-MVL-MOVING-PC)))
	(SETQ IMP-ARY (COND ((WHITE-P PC) (BOARD-WHITE-IMPORTANCE-ARRAY BOARD-ARRAY))
			    (T (BOARD-BLACK-IMPORTANCE-ARRAY BOARD-ARRAY))))
	(RETURN (* (AR-1 (PIECE-POSITIONAL-WEIGHTING-FACTOR-ARRAY PIECE-ARRAY)
			 PC)
		   (- (C-PIECE-POSITIONALITY PC (AR-1 MOVE-LIST (+ IDX C-MVL-TO-SQ)) IMP-ARY)
		      (C-PIECE-POSITIONALITY PC (AR-1 PIECE-ARRAY PC) IMP-ARY))))
))

;CAN ALSO BE CALLED VIA C-FILL-IN-POSITIONALITIES
(DEFUN C-PIECE-POSITIONALITY (CURRENT-PIECE SQ SPECIAL-IMP-ARRAY)
  (PROG (TWN SPECIAL-ACCUM-POS)
	(SETQ TWN (AR-1 (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY) CURRENT-PIECE))
	(SETQ SPECIAL-ACCUM-POS 0)
	(FUNCALL (AR-1 C-A-DISPATCH TWN)
		 (FUNCTION C-POSITION-ADDUP)
		 SQ)
	(RETURN SPECIAL-ACCUM-POS)
))

(DEFUN C-POSITION-ADDUP (SQ &OPTIONAL DIR MODE)
       (COND ((< (AR-1 BOARD-ARRAY SQ)
		 SQUARE-OFF-BOARD)
	      (SETQ SPECIAL-ACCUM-POS 
		    (+ SPECIAL-ACCUM-POS 
		       (AR-1 SPECIAL-IMP-ARRAY SQ))))))

(DEFUN C-MAP-PIECE-ATTACKS-SQUARE (FCTN CURRENT-SIDE)
  (PROG (CURRENT-PIECE TWA CURRENT-LOCATION)
;	(COND ((NULL (BOARD-CAT-DATA-VALID BOARD-ARRAY))  ;NECC SO CASTLES STUFF WILL WIN
;	       (C-CALCULATE-ATTACKS)))
	(SETQ CURRENT-PIECE CURRENT-SIDE)
	(SETQ TWA (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY))
    L	(COND ((NOT (ZEROP (SETQ CURRENT-LOCATION (AR-1 PIECE-ARRAY CURRENT-PIECE))))
		(FUNCALL (AR-1 C-A-DISPATCH (AR-1 TWA CURRENT-PIECE))
			FCTN 
		 	CURRENT-LOCATION)))
	(COND ((NOT (= 0 (LOGAND (SETQ CURRENT-PIECE (1+ CURRENT-PIECE))
				 #o17)))
	 	(GO L)))
))

;PIECE MAPPING FCTNS COME IN TWO FLAVORS THE -A AND THE -M,
; WHICH MAP OVER THE SQUARES ATTACKED AND SQUARES WHICH COULD BE MOVED TO
; RESPECTIVELY.  FOR PAWNS, THE TWO ARE GROSSLY DIFFERENT. ALSO, FOR SLIDING
; PIECES, THE -A FLAVOR WILL MAP <THRU> LIKEWISE SLIDING PIECES OF THE SAME SIDE
; AND FOR DIAGONALLY SLIDING PCS, ONE SQUARE THRU OUR PAWN IN THE DIRECTION IT 
; ATTACKS.
;THE -A FCTNS ARE ACCESSED BY C-A-DISPATCH OFF TYPE-WOOD-NUMBER,
;THE -M FCTNS BY C-M-DISPATCH OFF T-W-N.
;  --NOTE-- ANYTHING WHICH CALLS EITHER C-A- OR C-M- ROUTINES MUST BIND THE 
;	    SPECIAL VARIABLE CURRENT-PIECE TO THE PIECE IN QUESTION.

(DEFUN C-A-W-PAWN (FCTN SQ)
       (SETQ SQ (+ SQ BOARD-WIDTH))
       (FUNCALL FCTN (1+ SQ))
       (FUNCALL FCTN (1- SQ)))

(DEFUN C-M-QUEENING-MOVE (FCTN SQ)
       (FUNCALL FCTN SQ NIL '=Q)
       (FUNCALL FCTN SQ NIL '=N)
       (FUNCALL FCTN SQ NIL '=R)
       (FUNCALL FCTN SQ NIL '=B))

(DEFUN C-M-W-PAWN (FCTN SQ)
   (PROG NIL 
	(COND ((= (AR-1 C-BOARD-WHITE-RANK-NUMBER SQ) 7)
	       (COND ((= (AR-1 BOARD-ARRAY (SETQ SQ (+ SQ BOARD-WIDTH)))
			 SQUARE-VACANT)
		      (C-M-QUEENING-MOVE FCTN SQ)))
	       (COND ((< (AR-1 BOARD-ARRAY (SETQ SQ (1+ SQ)))
			 PIECE-ARRAY-SIZE)
		      (C-M-QUEENING-MOVE FCTN SQ)))
	       (COND ((< (AR-1 BOARD-ARRAY (SETQ SQ (- SQ 2)))
			 PIECE-ARRAY-SIZE)
		      (C-M-QUEENING-MOVE FCTN SQ)))
	       (RETURN NIL)))
	(SETQ SQ (+ SQ BOARD-WIDTH*2))
	(COND ((AND (< SQ WQR5)
		    (= (AR-1 BOARD-ARRAY SQ) SQUARE-VACANT)
		    (= (AR-1 BOARD-ARRAY (- SQ BOARD-WIDTH)) SQUARE-VACANT))
	       (FUNCALL FCTN SQ)))		;DOUBLE ADVANCE
	(SETQ SQ (- SQ BOARD-WIDTH))
	(COND ((= (AR-1 BOARD-ARRAY SQ) SQUARE-VACANT)
	       (FUNCALL FCTN SQ)))		;SINGLE ADVANCE
	(COND ((< (AR-1 BOARD-ARRAY (SETQ SQ (1+ SQ))) PIECE-ARRAY-SIZE)
	       (FUNCALL FCTN SQ))		;CAPTURE TO KING SIDE
	      ((AND (= SQ (BOARD-GHOST-LOCATION BOARD-ARRAY))
		    (= CURRENT-SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
					 #o0401 
					 0)))
	       (FUNCALL FCTN SQ NIL 'EN-PASSENT)))
	(COND ((< (AR-1 BOARD-ARRAY (SETQ SQ (- SQ 2))) PIECE-ARRAY-SIZE)
	       (FUNCALL FCTN SQ))		;CAPTURE TO QUEEN SIDE
	      ((AND (= SQ (BOARD-GHOST-LOCATION BOARD-ARRAY))
		    (= CURRENT-SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
					 #o0401 
					 0)))
	       (FUNCALL FCTN SQ NIL 'EN-PASSENT)))
))

(DEFUN C-A-B-PAWN (FCTN SQ)
       (SETQ SQ (- SQ BOARD-WIDTH))
       (FUNCALL FCTN (1+ SQ))
       (FUNCALL FCTN (1- SQ)))

(DEFUN C-M-B-PAWN (FCTN SQ)
  (PROG NIL 
	(COND ((= (AR-1 C-BOARD-WHITE-RANK-NUMBER SQ) 2)
	       (COND ((= (AR-1 BOARD-ARRAY (SETQ SQ (- SQ BOARD-WIDTH)))
			 SQUARE-VACANT)
		      (C-M-QUEENING-MOVE FCTN SQ)))
	       (COND ((< (AR-1 BOARD-ARRAY (SETQ SQ (1+ SQ)))
			 PIECE-ARRAY-SIZE)
		      (C-M-QUEENING-MOVE FCTN SQ)))
	       (COND ((< (AR-1 BOARD-ARRAY (SETQ SQ (- SQ 2)))
			 PIECE-ARRAY-SIZE)
		      (C-M-QUEENING-MOVE FCTN SQ)))
	       (RETURN NIL)))
	(SETQ SQ (- SQ BOARD-WIDTH*2))
	(COND ((AND (> SQ BKR5)
		    (= (AR-1 BOARD-ARRAY SQ) SQUARE-VACANT)
		    (= (AR-1 BOARD-ARRAY (+ SQ BOARD-WIDTH)) SQUARE-VACANT))
	       (FUNCALL FCTN SQ)))		;DOUBLE ADVANCE
	(SETQ SQ (+ SQ BOARD-WIDTH))
	(COND ((= (AR-1 BOARD-ARRAY SQ) SQUARE-VACANT)
	       (FUNCALL FCTN SQ)))		;SINGLE ADVANCE
	(COND ((< (AR-1 BOARD-ARRAY (SETQ SQ (1+ SQ))) PIECE-ARRAY-SIZE)
	       (FUNCALL FCTN SQ))		;CAPTURE TO KING SIDE
	      ((AND (= SQ (BOARD-GHOST-LOCATION BOARD-ARRAY))
		    (= CURRENT-SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
					 #o0401 
					 0)))
	       (FUNCALL FCTN SQ NIL 'EN-PASSENT)))
	(COND ((< (AR-1 BOARD-ARRAY (SETQ SQ (- SQ 2))) PIECE-ARRAY-SIZE)
	       (FUNCALL FCTN SQ))		;CAPTURE TO QUEEN SIDE
	      ((AND (= SQ (BOARD-GHOST-LOCATION BOARD-ARRAY))
		    (= CURRENT-SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
					 #o0401 
					 0)))
	       (FUNCALL FCTN SQ NIL 'EN-PASSENT)))
))

;ALSO SERVES FOR C-A-KNIGHT
(DEFUN C-M-KNIGHT (FCTN SQ)
       (FUNCALL FCTN (+ SQ 21.))	;BOARD-WIDTH*2+1
       (FUNCALL FCTN (+ SQ 19.))	;BOARD-WIDTH*2-1
       (FUNCALL FCTN (+ SQ -19.))	;BOARD-WIDTH*-2+1
       (FUNCALL FCTN (+ SQ -21.))	;BOARD-WIDTH*-2-1
       (FUNCALL FCTN (+ SQ 12.))	;BOARD-WIDTH*BW+2
       (FUNCALL FCTN (+ SQ 8.))		;BOARD-WIDTH*BW-2
       (FUNCALL FCTN (+ SQ -8.))	;BOARD-WIDTH*-BW+2
       (FUNCALL FCTN (+ SQ -12.))	;BOARD-WIDTH*-BW-2
)

;ALSO SERVES FOR C-A-KING
(DEFUN C-M-KING (FCTN SQ)	;DOES NOT LOOK TO SEE IF K MOVING INTO CHECK
       (FUNCALL FCTN (+ SQ 10.))	;BOARD-WIDTH
       (FUNCALL FCTN (+ SQ 11.))	;BOARD-WIDTH+1
       (FUNCALL FCTN (+ SQ  9.))	;BOARD-WIDTH-1
       (FUNCALL FCTN (1+ SQ))		;+1
       (FUNCALL FCTN (1- SQ))		;-1
       (FUNCALL FCTN (+ SQ -10.))	;- BOARD-WIDTH
       (FUNCALL FCTN (+ SQ -11.))	;- BOARD-WIDTH -1
       (FUNCALL FCTN (+ SQ -9.))	;- BOARD-WIDTH +1
)

(DEFUN C-A-ROOK (FCTN SQ)
  (PROG (DIRL DIR CSQ MODE TEM)
	(SETQ DIRL '(1 -1 10. -10.))
    L1	(SETQ CSQ SQ)
	(SETQ DIR (CAR DIRL))
	(SETQ MODE NIL)		;REAL ATTACK
    L4	(FUNCALL FCTN (SETQ CSQ (+ CSQ DIR)) DIR MODE)
    	(COND ((OR (= (SETQ TEM (AR-1 BOARD-ARRAY CSQ)) SQUARE-VACANT)
		   (= TEM CURRENT-PIECE))
	       (GO L4))
	      ((AND (< TEM PIECE-ARRAY-SIZE)
		    (ZEROP (LOGAND #o20 (LOGXOR TEM CURRENT-PIECE)))
		    (MEMQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY) TEM)
			  '(QUEEN ROOK)))
	       (SETQ MODE 'THRU)
	       (GO L4)))
	(COND ((SETQ DIRL (CDR DIRL))
	       (GO L1)))))

;CURRENT-PIECE MUST BE BOUND..
(DEFUN C-A-EXTEND-ROOK-LINE (FCTN SQ DIR &OPTIONAL STOP-SQUARE)
  (PROG (MODE TEM)
    L4	(FUNCALL FCTN (SETQ SQ (+ SQ DIR)) DIR MODE)
    	(COND ((EQ SQ STOP-SQUARE)
	       (RETURN NIL))
	      ((OR (= (SETQ TEM (AR-1 BOARD-ARRAY SQ)) SQUARE-VACANT)
		   (= TEM CURRENT-PIECE))
	       (GO L4))
	      ((AND (< TEM PIECE-ARRAY-SIZE)
		    (ZEROP (LOGAND #o20 (LOGXOR TEM CURRENT-PIECE)))
		    (MEMQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY) TEM)
			  '(QUEEN ROOK)))
	       (SETQ MODE 'THRU)
	       (GO L4)))))

(DEFUN C-M-ROOK (FCTN SQ)
  (PROG (DIRL DIR CSQ TEM)
	(SETQ DIRL '(1 -1 10. -10.))	;CROCK
    L1	(SETQ CSQ SQ)
        (SETQ DIR (CAR DIRL))
    L4  (FUNCALL FCTN (SETQ CSQ (+ CSQ DIR)) DIR)
        (COND ((OR (= (SETQ TEM (AR-1 BOARD-ARRAY CSQ)) SQUARE-VACANT)
		   (= TEM CURRENT-PIECE))
	       (GO L4)))
	(COND ((SETQ DIRL (CDR DIRL))
	       (GO L1)))))

(DEFUN C-A-QUEEN (FCTN SQ)
       (C-A-ROOK FCTN SQ)
       (C-A-BISHOP FCTN SQ))

(DEFUN C-M-QUEEN (FCTN SQ)
       (C-M-ROOK FCTN SQ)
       (C-M-BISHOP FCTN SQ))

(DEFUN C-A-BISHOP (FCTN SQ)
  (PROG (DIRL DIR CSQ MODE TEM TW)
	(SETQ DIRL '(11. 9. -11. -9.))
    L1	(SETQ CSQ SQ)
	(SETQ DIR (CAR DIRL))
	(SETQ MODE NIL)		;REAL ATTACK
    L4	(FUNCALL FCTN (SETQ CSQ (+ CSQ DIR)) DIR MODE)
    	(COND ((OR (= (SETQ TEM (AR-1 BOARD-ARRAY CSQ)) SQUARE-VACANT)
		   (= TEM CURRENT-PIECE))
	       (GO L4))
	      ((AND (< TEM PIECE-ARRAY-SIZE)
		    (ZEROP (LOGAND #o20 (LOGXOR TEM CURRENT-PIECE))))
	       (COND ((MEMQ (SETQ TW (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY) TEM))
			  '(QUEEN BISHOP))
		      (SETQ MODE 'THRU)
		      (GO L4))
		     ((EQ TW 'WHITE-PAWN)
		      (COND ((MEMQ DIR '(11. 9.))
			     (FUNCALL FCTN (+ CSQ DIR) DIR 'THRU))))
		     ((EQ TW 'BLACK-PAWN)
		      (COND ((MEMQ DIR '(-11. -9.))
			     (FUNCALL FCTN (+ CSQ DIR) DIR 'THRU)))))))
	(COND ((SETQ DIRL (CDR DIRL))
	       (GO L1)))))

(DEFUN C-A-EXTEND-BISHOP-LINE (FCTN SQ DIR &OPTIONAL STOP-SQUARE)
  (PROG (MODE TEM TW)
    L4	(FUNCALL FCTN (SETQ SQ (+ SQ DIR)) DIR MODE)
    	(COND ((EQ SQ STOP-SQUARE)
	       (RETURN NIL))
	      ((OR (= (SETQ TEM (AR-1 BOARD-ARRAY SQ)) SQUARE-VACANT)
		   (= TEM CURRENT-PIECE))
	       (GO L4))
	      ((AND (< TEM PIECE-ARRAY-SIZE)
		    (ZEROP (LOGAND #o20 (LOGXOR TEM CURRENT-PIECE))))
	       (COND ((MEMQ (SETQ TW (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY) TEM))
			  '(QUEEN BISHOP))
		      (SETQ MODE 'THRU)
		      (GO L4))
		     ((EQ TW 'WHITE-PAWN)
		      (COND ((MEMQ DIR '(11. 9.))
			     (FUNCALL FCTN (+ SQ DIR) DIR 'THRU))))
		     ((EQ TW 'BLACK-PAWN)
		      (COND ((MEMQ DIR '(-11. -9.))
			     (FUNCALL FCTN (+ SQ DIR) DIR 'THRU)))))))
))

(DEFUN C-M-BISHOP (FCTN SQ)
  (PROG (DIRL DIR CSQ TEM)
	(SETQ DIRL '(11. 9. -11. -9.))
    L1	(SETQ CSQ SQ)
    	(SETQ DIR (CAR DIRL))
    L4	(FUNCALL FCTN (SETQ CSQ (+ CSQ DIR)) DIR)
        (COND ((OR (= (SETQ TEM (AR-1 BOARD-ARRAY CSQ)) SQUARE-VACANT)
		   (= TEM CURRENT-PIECE))
	       (GO L4)))
	(COND ((SETQ DIRL (CDR DIRL))
	       (GO L1))) ))
 
(DECLARE (SPECIAL CAT-ATTS CAT-SQC CAT-PC CAT-LOC)) 

(DEFUN C-CALCULATE-ATTACKS NIL  
  (PROG (CAT-ATTS CAT-SQC CAT-PC CAT-LOC TWA TEM)
	(SETQ TWA (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY))
	(WIPE-ARRAY (SETQ CAT-ATTS (BOARD-WHITE-ATTACKS-ARRAY BOARD-ARRAY)) 
		BOARD-WIDTH*2 BOARD-WIDTH*8 0 0) 
	(DO SQ BOARD-WIDTH*2 (1+ SQ) (= SQ BOARD-WIDTH*10)	;CLEAR PIECE AND SIDE ATTS
	    (AS-1 0 (SETQ TEM (AR-1 C-SQUARE-SIDE-ATTACKS-ARRAY SQ)) 0)  ;ARRAYS
	    (AS-1 0 TEM 1) )
	(SETQ CAT-PC 0)
    L	(COND ((NOT (ZEROP (SETQ CAT-LOC (AR-1 PIECE-ARRAY CAT-PC))))
		(FUNCALL (AR-1 C-CAT-DISPATCH (AR-1 TWA CAT-PC))) ))
	(COND ((NOT (= (SETQ CAT-PC (1+ CAT-PC)) #o20))
		(GO L)))
	(WIPE-ARRAY (SETQ CAT-ATTS (BOARD-BLACK-ATTACKS-ARRAY BOARD-ARRAY)) 
		BOARD-WIDTH*2 BOARD-WIDTH*8 0 0) 
   L1	(COND ((NOT (ZEROP (SETQ CAT-LOC (AR-1 PIECE-ARRAY CAT-PC))))
		(FUNCALL (AR-1 C-CAT-DISPATCH (AR-1 TWA CAT-PC))) ))
	(COND ((NOT (= (SETQ CAT-PC (1+ CAT-PC)) #o40))
		(GO L1)))
;	(C-CALCULATE-ASSIGN-PAWN-GROUPS)
;	(C-CALCULATE-WIPE-PAWN-DATA)
;	(C-CALCULATE-GROUP-DATA)
	(SETF (BOARD-CAT-DATA-VALID BOARD-ARRAY) T)
))

(DEFUN CAT-W-PAWN NIL 
  (PROG (SQ)
	(SETQ SQ (+ CAT-LOC 11.))
	(AS-1 (1+ (AR-1 CAT-ATTS SQ)) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(SETQ SQ (- SQ 2))
	(AS-1 (1+ (AR-1 CAT-ATTS SQ)) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
))

(DEFUN CAT-B-PAWN NIL 
  (PROG (SQ)
	(SETQ SQ (- CAT-LOC 9.))
	(AS-1 (1+ (AR-1 CAT-ATTS SQ)) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(SETQ SQ (- SQ 2))
	(AS-1 (1+ (AR-1 CAT-ATTS SQ)) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
))

(DEFUN CAT-ROOK NIL 
  (PROG (SQ DIR DIRI) 
	(SETQ DIR 0)
   L1	(SETQ SQ CAT-LOC)
	(SETQ DIRI (AR-1 C-BOARD-INC-IN-DIR DIR))
   L4	(SETQ SQ (+ SQ DIRI))
	(AS-1 (1+ (AR-1 CAT-ATTS SQ)) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(COND ((= (AR-1 BOARD-ARRAY SQ) SQUARE-VACANT)
		(GO L4)))
	(COND ((< (SETQ DIR (1+ DIR)) 4)
		(GO L1)))
))

(DEFUN CAT-BISHOP NIL 
  (PROG (SQ DIR DIRI) 
	(SETQ DIR 4)
   L1	(SETQ SQ CAT-LOC)
	(SETQ DIRI (AR-1 C-BOARD-INC-IN-DIR DIR))
   L4	(SETQ SQ (+ SQ DIRI))
	(AS-1 (1+ (AR-1 CAT-ATTS SQ)) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(COND ((= (AR-1 BOARD-ARRAY SQ) SQUARE-VACANT)
		(GO L4)))
	(COND ((< (SETQ DIR (1+ DIR)) #o10)
		(GO L1)))
))

(DEFUN CAT-QUEEN NIL (CAT-ROOK) (CAT-BISHOP))

(DEFUN CAT-KING NIL 
  (PROG (SQ)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (1- CAT-LOC)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (1+ CAT-LOC)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (+ CAT-LOC 10.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (- CAT-LOC 10.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (+ CAT-LOC 9.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (+ CAT-LOC 11.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (- CAT-LOC 9.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (- CAT-LOC 11.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
))

(DEFUN CAT-KNIGHT NIL 
  (PROG (SQ)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (+ CAT-LOC 21.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (+ CAT-LOC 19.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (- CAT-LOC 19.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (- CAT-LOC 21.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (+ CAT-LOC 12.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (+ CAT-LOC 8.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (- CAT-LOC 8.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
	(AS-1 (1+ (AR-1 CAT-ATTS (SETQ SQ (- CAT-LOC 12.)))) CAT-ATTS SQ)
	(AS-1 1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CAT-PC)
))	
