;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LCHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

;EVIDENT-THREAT HACKING

; PIECES-THAT-CAN-BE-TAKEN
; PIECES-THAT-ARE-ATTACKED-BY-LESS
;

;SLIDING PC RELATIONS
;  <HIS SLIDER> <OUR PC> <OUR PC>   POTENTIAL PIN ON US
;  <OUR SLIDER> <HIS PC> <HIS PC>   POTENTIAL PIN ON HIM

;32-BIT ARRAY, PC MAY BE PINNED
;32-BIT ARRAY, PC MAY BE BASE PC

;PINS
;CONSTRAINTS


;(DEFUN C-PRINT-POSSIBLE-PINS NIL 
;  (PROG (SIDE BOS HBOS V1 PIA)
;	(SETQ SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
;			 #o0401 
;			 0))
;	(COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
;	       (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
;	(SETQ BOS (C-POS-BEARS-ON-SQUARE PIA))
;	(SETQ HBOS (C-POS-HIS-BEARS-ON-SQUARE PIA))
;	(SETQ V1 (C-FIND-POSSIBLE-PINS SIDE HBOS BOS))             ;OUR PINS
;	(FORMAT T "OUR POS PINS ~S," V1)
;	(SETQ V1 (C-FIND-POSSIBLE-PINS (LOGXOR SIDE #o20) BOS HBOS))  ;HIS
;	(FORMAT T "HIS POS PINS ~S~%" V1)
;))

;KEY IS ((PIN)) OR ((DISCOVERY)) AS APPRO.
(DEFUN C-FIND-POSSIBLE-PINS (CENTER-INDEX-ARRAY SIDE BOS-ARRAY HBOS-ARRAY KEY)
  (PROG (PPINS PC UBL DIR PIN-SQ SQ SQC 3R)
	(SETQ PC SIDE)
    L0	(COND ((OR (ZEROP (SETQ PIN-SQ (AR-1 PIECE-ARRAY PC)))
                   (NULL (SETQ UBL (AR-1 BOS-ARRAY PIN-SQ))))
	       (GO E0)))
    L1	(COND ((NOT (AND (SETQ DIR (CADAR UBL))
			 (NULL (CADDAR UBL))))
	       (GO E1)))
    	(SETQ SQ (+ PIN-SQ DIR))
    L2 	(COND ((= (SETQ SQC (AR-1 BOARD-ARRAY SQ))
		  SQUARE-VACANT)
               (SETQ SQ (+ SQ DIR))
	       (GO L2))
	      ((= SQC SQUARE-OFF-BOARD)
	       (GO E1))
	      ((NOT (ZEROP (LOGAND #o20 (LOGXOR SQC (CAAR UBL))))) ;ATTACKING AND BASE 
								 ; OF OPPOSITE SIDES
	       (SETQ 3R (MAKE-ARRAY NIL 'ART-Q (THREE-RELATION-ARRAY-SIZE)
				    NIL NIL NIL 'THREE-RELATION))
	       (SETF (THREE-RELATION-CENTER-SQUARE 3R) PIN-SQ)
	       (SETF (THREE-RELATION-ATTACK-DESCRIPTION 3R) (CAR UBL))
	       (SETF (THREE-RELATION-BASE-SQUARE 3R) SQ)
	       (SETF (THREE-RELATION-KEYS 3R) KEY)
	       (SETQ PPINS (CONS 3R PPINS))
	       (AS-1 (CONS 3R (AR-1 CENTER-INDEX-ARRAY PC))
		     CENTER-INDEX-ARRAY
		     PC)
))
    E1	(COND ((SETQ UBL (CDR UBL))
               (GO L1)))
    E0	(COND ((NOT (ZEROP (LOGAND #o17 (SETQ PC (1+ PC)))))
	       (GO L0)))
	(RETURN PPINS)))

(DEFUN C-COMPUTE-THREE-RELATION-VALUE (CENTER-INDEX-ARRAY 3R)
  (PROG (BASE-SQ BASE-PC APL DPL VAL KEYS APLE)
	(SETQ KEYS (THREE-RELATION-KEYS 3R))
	(SETQ BASE-SQ (THREE-RELATION-BASE-SQUARE 3R))
	(SETQ BASE-PC (AR-1 BOARD-ARRAY BASE-SQ))
	(COND ((ZEROP (LOGAND BASE-PC #o20))
	       (SETQ APL (AR-1 (CENTER-INDEX-BBOS CENTER-INDEX-ARRAY) BASE-SQ))
	       (SETQ DPL (AR-1 (CENTER-INDEX-WBOS CENTER-INDEX-ARRAY) BASE-SQ)))
	      (T (SETQ APL (AR-1 (CENTER-INDEX-WBOS CENTER-INDEX-ARRAY) BASE-SQ))
		 (SETQ DPL (AR-1 (CENTER-INDEX-BBOS CENTER-INDEX-ARRAY) BASE-SQ))))
	(SETQ APLE (THREE-RELATION-ATTACK-DESCRIPTION 3R))
	(MULTIPLE-VALUE (VAL KEYS)
	   (C-EVALUATE-ATTACK BASE-PC (C-ADD-TO-PL APLE APL) DPL CENTER-INDEX-ARRAY KEYS))
	(SETF (THREE-RELATION-VALUE 3R) VAL)
	(SETF (THREE-RELATION-KEYS 3R) KEYS)
	(RETURN VAL)
))

(DEFUN C-CREATE-GAME-STATE NIL 
  (PROG (GS)
	(SETQ GS (MAKE-ARRAY NIL 'ART-Q (C-GAME-STATE-ARRAY-SIZE)))

	(RETURN GS)
))
