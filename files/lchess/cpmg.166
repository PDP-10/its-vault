;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LCHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

;(C-LINK-PIN <PIN> MOVE-LIST)  LINK TO ALL MOVES THAT MAY BE AFFECTED BY PIN
;(C-APPLY-PIN <PIN> VALUE) 
; FINDING MOVES POSSIBLY AFFECTED BY A PIN
;  PIN ON US  
;   DIRECT-EFFECT  -> MOVES BY PINNED PC   AT BASE SQUARE
;   EFFECT ON OUR ASSUMED DEFENSES         AT CURRENT PIECE SQUARE
;   EFFECT ON DIRECT GAIN OF OUR MOVES     AT SQUARE DEFENDED BY PINNED PC
;  PIN ON HIM
;   EP ESTIMATES ON OUR PCS		   AT CURRENT PIECE SQUARE
;   EFFECT ON DIRECT GAIN OF OUR MOVES     AT SQUARE DEFENDED BY PINNED PC

(DEFUN C-CREATE-MOVE-SUMMARY (SIDE &OPTIONAL (CHEOPS-SETD 3)) 
  (PROG (MSA MOVE-LIST CHEOPS-IN-PROGRESS BCR)
	(SETQ MOVE-LIST (C-GET-MOVE-LIST-OF-SIDE SIDE))
	(SETQ BCR (C-GET-BASE-CHEOPS-RESULTS))
	(SETQ CHEOPS-IN-PROGRESS (CHEOPS-FIND-RESULTS-START MOVE-LIST CHEOPS-SETD))
	(SETQ MSA (MAKE-ARRAY NIL ART-Q (MOVE-SUMMARY-ARRAY-SIZE)
			      NIL NIL NIL 'MOVE-SUMMARY))
	(SETF (MOVE-SUMMARY-MOVE-LIST MSA) MOVE-LIST)
	(SETF (MOVE-SUMMARY-DIRECT-GAIN-MOVES MSA)
	      (C-FIND-DIRECT-GAIN-MOVES MOVE-LIST))
	(SETF (MOVE-SUMMARY-DEFENDING-MOVES MSA)
	      (C-FIND-DEFENDING-MOVES MOVE-LIST))
	(COND (CHEOPS-IN-PROGRESS
	       (CHEOPS-FIND-RESULTS-FINISH CHEOPS-IN-PROGRESS)))
	(SETF (MOVE-SUMMARY-CHEOPS-DIRECT-GAIN-MOVES MSA)
	      (C-FIND-CHEOPS-DIRECT-GAIN-MOVES MOVE-LIST))
	(RETURN MSA)
))

(DEFUN C-FIND-CHEOPS-DIRECT-GAIN-MOVES (MOVE-LIST)
  (do ((SIDE (MOVE-LIST-SIDE MOVE-LIST))
       (ANS)
       (IDX 0 (+ idx c-mvl-nqs))
       (LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
       (MAT (CURRENT-MATERIAL-CHEOPS-UNITS)))
      ((NOT (< IDX LIM)) ANS)
    (cond ((= SIDE 0)
	   (COND ((> (AR-1 MOVE-LIST (+ IDX C-MVL-CH-RESULT-VALUE))
		     MAT)
		  (SETQ ANS (CONS IDX ANS)))))
	  (T
	   (COND ((< (AR-1 MOVE-LIST (+ IDX C-MVL-CH-RESULT-VALUE))
		     MAT)
		  (SETQ ANS (CONS IDX ANS))))))))


;(DEFUN C-FIND-CHEOPS-DIRECT-GAIN-MOVES (MOVE-LIST)
;  (PROG (SIDE ANS IDX LIM MAT)
;	(SETQ SIDE (MOVE-LIST-SIDE MOVE-LIST))
;	(SETQ MAT (CURRENT-MATERIAL-CHEOPS-UNITS))
;	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
;   L	(COND ((NOT (< IDX LIM)) (RETURN ANS))
;	      ((= SIDE 0)
;	       (COND ((> (AR-1 MOVE-LIST (+ IDX C-MVL-CH-RESULT-VALUE))
;			 MAT)
;		      (SETQ ANS (CONS IDX ANS)))))
;	      (T
;	       (COND ((< (AR-1 MOVE-LIST (+ IDX C-MVL-CH-RESULT-VALUE))
;			 MAT)
;		      (SETQ ANS (CONS IDX ANS))))))
;   	(SETQ IDX (+ IDX C-MVL-NQS))
;	(GO L)
;))

;RETURNS 3 VALUES, <CAPTURE-GAIN>, <DISCOVERY-GAIN>, <PIN-LOSS>
(DEFUN C-COMPUTE-DIRECT-GAIN-NUMBERS (CENTER-INDEX-ARRAY DR-LIST-1)
  (do ((dr-list dr-list-1 (cdr dr-list))
       (TYP)
       (CGAIN 0)
       (DGAIN 0)
       (PLOSS 0)
       (TEM))
      ((NULL DR-LIST) (return CGAIN DGAIN PLOSS))
    (cond ((EQ (SETQ TYP (TYPEP (CAR DR-LIST)))
	       'CAPTURE-LIST-ITEM)
	   (SETQ CGAIN (- CGAIN (CAPTURE-LIST-ITEM-VALUE (CAR DR-LIST)))))
	  ((EQ TYP 'THREE-RELATION)
	   (COND ((NULL (THREE-RELATION-VALUE (CAR DR-LIST)))
		  (C-COMPUTE-THREE-RELATION-VALUE CENTER-INDEX-ARRAY (CAR DR-LIST))))
	   (COND ((MEMQ 'PIN (SETQ TEM (THREE-RELATION-KEYS (CAR DR-LIST))))
		  (SETQ PLOSS (+ PLOSS (THREE-RELATION-VALUE (CAR DR-LIST)))))
		 ((MEMQ 'DISCOVERY TEM) 
		  (SETQ DGAIN (+ DGAIN (THREE-RELATION-VALUE (CAR DR-LIST)))) )
		 (T (ERROR "UNKNOWN THREE-RELATION" TEM))) )
	  (T (ERROR "BAD ITEM IN DIRECT-RESULTS LIST" (CAR DR-LIST))))))


;(DEFUN C-COMPUTE-DIRECT-GAIN-NUMBERS (CENTER-INDEX-ARRAY DR-LIST)
;  (PROG (TYP CGAIN DGAIN PLOSS TEM)
;	(SETQ CGAIN 0 DGAIN 0 PLOSS 0)
;    L	(COND ((NULL DR-LIST) (RETURN CGAIN DGAIN PLOSS))
;	      ((EQ (SETQ TYP (TYPEP (CAR DR-LIST)))
;		   'CAPTURE-LIST-ITEM)
;	       (SETQ CGAIN (- CGAIN (CAPTURE-LIST-ITEM-VALUE (CAR DR-LIST)))))
;	      ((EQ TYP 'THREE-RELATION)
;	       (COND ((NULL (THREE-RELATION-VALUE (CAR DR-LIST)))
;		      (C-COMPUTE-THREE-RELATION-VALUE CENTER-INDEX-ARRAY (CAR DR-LIST))))
;	       (COND ((MEMQ 'PIN (SETQ TEM (THREE-RELATION-KEYS (CAR DR-LIST))))
;		      (SETQ PLOSS (+ PLOSS (THREE-RELATION-VALUE (CAR DR-LIST)))))
;		     ((MEMQ 'DISCOVERY TEM) 
;		      (SETQ DGAIN (+ DGAIN (THREE-RELATION-VALUE (CAR DR-LIST)))) )
;		     (T (ERROR "UNKNOWN THREE-RELATION" TEM))) )
;	      (T (ERROR "BAD ITEM IN DIRECT-RESULTS LIST" (CAR DR-LIST))))
;    	(SETQ DR-LIST (CDR DR-LIST))
;	(GO L)
;))

(DEFUN C-FIND-DEFENDING-MOVES (MOVE-LIST)
  (PROG (SIDE PIA CSA CBCL CBC ANS IDX LIM PC MO DEFS DSQ)
	(SETQ SIDE (MOVE-LIST-SIDE MOVE-LIST))
	(COND ((NULL (BOARD-CAT-DATA-VALID BOARD-ARRAY))
	       (C-CALCULATE-ATTACKS)))
	(COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	       (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
;	(COND ((NULL (SETQ DRA (C-POS-DEFENSE-RELATIONS PIA)))
;	       (SETQ DRA (C-CREATE-DEFENSE-RELATIONS))))
	(COND ((NULL (SETQ CSA (C-POS-CAPTURE-SUMMARY PIA)))
	       (SETQ CSA (C-CREATE-CAPTURE-SUMMARY))))
	(SETQ CBCL (CAPTURE-SUMMARY-OUR-CAN-BE-CAPT-LIST CSA))
	(COND ((OR (NULL CBCL)
		   (NOT (> (CAPTURE-LIST-ITEM-VALUE (CAR CBCL)) 0)))
	       (RETURN NIL)))		;NOTHING NEEDS DEFENDING
	(COND ((NOT (MEMQ 'MO-KEYS (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)))
	       (C-FILL-IN-MO-KEYS MOVE-LIST)))
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
    L	(COND ((NOT (< IDX LIM)) (RETURN ANS)))
    	(SETQ PC (AR-1 MOVE-LIST (+ IDX C-MVL-MOVING-PC)))
    	(SETQ MO (AR-1 MOVE-LIST (+ IDX C-MVL-MO-KEYS)))
	(COND ((NULL (SETQ DEFS (ASSQ 'WILL-DEFEND-OUR-PIECES MO)))
	       (GO T1)))
	(SETQ DEFS (CADR DEFS))
;FOR EACH SQUARE THAT WE DEFEND..
    L1	(COND ((NULL DEFS) (GO E1)))	;NONE OF THOSE HELP.
;SEE IF THAT ONE IS IMPORTANT
    	(SETQ DSQ (CAAR DEFS))
	(COND ((NOT (ZEROP (AR-1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY DSQ)
				 PC)))
	       (GO R1)))	;ALREADY HITTING THAT SQUARE (IE JUST HOLDING DEF)
	(SETQ CBC CBCL)					
    L2	(COND ((= DSQ (AR-1 PIECE-ARRAY (CAPTURE-LIST-ITEM-CAPTURED-PIECE (CAR CBC))))
	       (SETQ ANS (CONS IDX ANS))
	       (GO T1))
	      ((AND (SETQ CBC (CDR CBC))
		    (> (CAPTURE-LIST-ITEM-VALUE (CAR CBC)) 0))
	       (GO L2)))
    R1 	(SETQ DEFS (CDR DEFS))
	(GO L1)
    E1 
    T1	(SETQ IDX (+ IDX C-MVL-NQS))
	(GO L)
))

(DEFUN C-FIND-DIRECT-GAIN-MOVES (MOVE-LIST)
  (PROG (SIDE ANS IDX LIM DG PIA CSA CENTER-INDEX-ARRAY CGAIN DGAIN PLOSS)
	(COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	       (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
	(COND ((NULL (SETQ CSA (C-POS-CAPTURE-SUMMARY PIA)))
	       (SETQ CSA (C-CREATE-CAPTURE-SUMMARY))))
	(SETQ CENTER-INDEX-ARRAY (CAPTURE-SUMMARY-3R-CENTER-INDEX-ARRAY CSA))
	(SETQ SIDE (MOVE-LIST-SIDE MOVE-LIST))
	(COND ((NOT (MEMQ 'DIRECT-GAIN (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)))
	       (C-FILL-IN-DIRECT-GAINS MOVE-LIST)))
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
    L	(COND ((NOT (< IDX LIM)) (RETURN ANS)))
;	(SETQ DG (AR-1 MOVE-LIST (+ IDX C-MVL-DIRECT-RESULTS)))
    	(MULTIPLE-VALUE (CGAIN DGAIN PLOSS)
	      (C-COMPUTE-DIRECT-GAIN-NUMBERS 
	           CENTER-INDEX-ARRAY
		   (AR-1 MOVE-LIST (+ IDX C-MVL-DIRECT-RESULTS))))
	(SETQ DG (+ CGAIN DGAIN))		;**TEMPORARY**
	(COND ((> DG 0)
	       (SETQ ANS (CONS IDX ANS))))
	(SETQ IDX (+ IDX C-MVL-NQS))
	(GO L)))

(DEFUN C-FILL-IN-DIRECT-GAINS (MOVE-LIST)
  (PROG (SIDE IDX LIM VAL PLY)
	(SETQ SIDE (MOVE-LIST-SIDE MOVE-LIST))
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
   L	(COND ((NOT (< IDX LIM))
	       (SETF (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)
		     (CONS 'DIRECT-GAIN
			   (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)))
	       (RETURN T)))
;   	(MULTIPLE-VALUE (VAL PLY)
;			(C-GET-DIRECT-RESULTS-OF-MOVE MOVE-LIST IDX))   ;SHOULD DEPEND ON SIDE
	(AS-1 (C-GET-DIRECT-RESULTS-OF-MOVE MOVE-LIST IDX)
	      MOVE-LIST 
	      (+ IDX C-MVL-DIRECT-RESULTS))
	(SETQ IDX (+ IDX C-MVL-NQS))
	(GO L)))

;WHAT IS TO BE DONE?       PDATA
;WHO IS CURRENTLY DOING WHAT?  POSTING
;WHO CAN DO MORE THAN NOW?

;POINTS:
; A "POINT" is when something turns out differently that at first appears.
;For example, it looks like the KNIGHT is EN PRISE, but if he takes it
;then ... .  It is important to realize that there is a "POINT" involved
;beyond simply realizing the knight cannot be taken, for two reasons:
; First, although there may have been sufficient search capability available
;to uncover the point in the current position, at deeper levels of the tree
;this may not be the case (The familiar postponing the inevitable problem
;of chess programs).
; Second, points may contain information as to what "ALMOST" works or "SHOULD 
;WORK", Thus
;motovating further search AND/OR preparatory moves.
; Third, this may eventually lead to some sort of positional judgment,
;as to which positions are difficult (for humans and/or for machines).

; Discovery of a point involves comparison of two basic pieces of data
;which we call the base result and the deeper result.  The following sources
;of these results are possible.
;   BASE:  C-EVALUATE-SWAPOUT-MAIN-VARIATION  DEEPER: C-EVALUATE-SWAPOUT
;   BASE:  PMG    DEEPER: CHEOPS LOCAL SEARCH
;   BASE:  PMG+CHEOPS LOCAL   DEEPER: LCHESS SEARCH
;   BASE:  LCHESS SEARCH    DEEPER:  LCHESS TYPICAL GAME

;SWAPOUT HACKER
; RECURSIVELY EXPAND SWAPOUT ALTERNATIVES TREE

;SQ IS SWAPOUT SQUARE
;VAL IS SIGNED SUM OF PIECES REMOVED SO FAR (+ GOOD FOR SIDE TO MOVE AT THIS LEVEL)
; IT IS NEGATED BETWEEN LEVELS OF RECURSION.
;PC IS "CURRENT" OCCUPANT OF THAT SQUARE.
;APL IS ATTACKING PIECE LIST (IE BELONGS TO SIDE TO MOVE AT THIS STAGE)
;DPL IS DEFENDING PIECE LIST (IE BELONGS TO OTHER SIDE)
;ACP DCP ATTACKER, DEFENDER PIECES CAPTURED ALREADY

(DEFUN C-EVALUATE-SWAPOUT (SQ VAL PC APL DPL)
  (PROG ()
))

;JUST FOR MANUAL TEST.
(DEFUN C-TEST-EP (SQ)
 (PROG (PIA BOS HBOS BSF-VALUE BSF-PLYN BSF-KEYS CSA CENTER-INDEX-ARRAY)
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (COND ((NULL (SETQ CSA (C-POS-CAPTURE-SUMMARY PIA)))
	      (SETQ CSA (C-CREATE-CAPTURE-SUMMARY))))
       (SETQ CENTER-INDEX-ARRAY (CAPTURE-SUMMARY-3R-CENTER-INDEX-ARRAY CSA))
       (SETQ BOS (C-POS-BEARS-ON-SQUARE PIA))
       (SETQ HBOS (C-POS-HIS-BEARS-ON-SQUARE PIA))
       (MULTIPLE-VALUE (BSF-VALUE BSF-PLYN BSF-KEYS)
	   (C-EVALUATE-SWAPOUT-MAIN-VARIATION 0 SQ 0 (AR-1 BOARD-ARRAY SQ) 
                                              (AR-1 HBOS SQ)
                                              (AR-1 BOS SQ)
                                              0 NIL
					      CENTER-INDEX-ARRAY 'ATTACK NIL))
       (RETURN BSF-VALUE BSF-PLYN BSF-KEYS)))

(DEFUN C-CREATE-CAPTURE-SUMMARY NIL 
 (PROG (SIDE CSA EPS PIA BOS HBOS LIM LOC PL CL PLYN CLI CENTER-INDEX-ARRAY)
       (SETQ SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
		       #o0401 
		       0))
       (SETQ CSA (MAKE-ARRAY NIL ART-Q (CAPTURE-SUMMARY-ARRAY-SIZE)
			     NIL NIL NIL 'CAPTURE-SUMMARY))
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (SETF (CAPTURE-SUMMARY-PIECE-EN-PRISE-STATUS CSA)
	     (SETQ EPS (MAKE-ARRAY NIL ART-Q PIECE-ARRAY-SIZE)))
       (SETF (CAPTURE-SUMMARY-3R-CENTER-INDEX-ARRAY CSA)
	     (SETQ CENTER-INDEX-ARRAY
		   (MAKE-ARRAY NIL ART-Q PIECE-ARRAY-SIZE
			    NIL (CENTER-INDEX-ARRAY-ARRAY-LEADER-SIZE))))
       (SETQ BOS (C-POS-BEARS-ON-SQUARE PIA))
       (SETQ HBOS (C-POS-HIS-BEARS-ON-SQUARE PIA))
       (COND ((ZEROP SIDE)
	      (SETF (CENTER-INDEX-WBOS CENTER-INDEX-ARRAY) BOS)
	      (SETF (CENTER-INDEX-BBOS CENTER-INDEX-ARRAY) HBOS))
	     (T (SETF (CENTER-INDEX-WBOS CENTER-INDEX-ARRAY) HBOS)
		(SETF (CENTER-INDEX-BBOS CENTER-INDEX-ARRAY) BOS)))
       (SETQ LIM (+ SIDE #o17))
       (DO PC SIDE (1+ PC) (= PC LIM)
	   (COND ((AND (NOT (ZEROP (SETQ LOC (AR-1 PIECE-ARRAY PC))))
		       (SETQ PL (AR-1 HBOS LOC)))
		  (SETQ CL (CONS (C-CREATE-CAPTURE-LIST-ITEM
				     LOC PC PL (AR-1 BOS LOC) 0 CENTER-INDEX-ARRAY 'ATTACK)
				 CL)) )))
       (SETF (CAPTURE-SUMMARY-OUR-CAN-BE-CAPT-LIST CSA)
	     (SORT-SHORT-LIST CL (FUNCTION CAPTURE-LIST-COMPARE->)))
       (SETF (CAPTURE-SUMMARY-OUR-POSSIBLE-PINS CSA)	  ;PIECES OF OURS THAT MAY BE PINNED
	     (C-FIND-POSSIBLE-PINS CENTER-INDEX-ARRAY SIDE HBOS BOS '(PIN)))
       (SETF (CAPTURE-SUMMARY-OUR-POSSIBLE-DISCOVERIES CSA)   ;OUR PIECES WHICH IF MOVED, ETC.
	     (C-FIND-POSSIBLE-PINS CENTER-INDEX-ARRAY SIDE BOS HBOS '(DISCOVERY)))
       (SETQ CL NIL)
       (SETQ LIM (+ (SETQ SIDE (LOGXOR #o20 SIDE)) #o17))
       (DO PC SIDE (1+ PC) (= PC LIM)
	   (COND ((AND (NOT (ZEROP (SETQ LOC (AR-1 PIECE-ARRAY PC))))
		       (SETQ PL (AR-1 BOS LOC)))
		  (SETQ CL (CONS (C-CREATE-CAPTURE-LIST-ITEM
				     LOC PC PL (AR-1 HBOS LOC) 0 CENTER-INDEX-ARRAY 'ATTACK)
				 CL)) )))
       (SETF (CAPTURE-SUMMARY-HIS-CAN-BE-CAPT-LIST CSA)
	     (SORT-SHORT-LIST CL (FUNCTION CAPTURE-LIST-COMPARE->)))
       (SETF (CAPTURE-SUMMARY-HIS-POSSIBLE-PINS CSA)
	     (C-FIND-POSSIBLE-PINS CENTER-INDEX-ARRAY SIDE BOS HBOS '(PIN)))
       (SETF (CAPTURE-SUMMARY-HIS-POSSIBLE-DISCOVERIES CSA)
	     (C-FIND-POSSIBLE-PINS CENTER-INDEX-ARRAY SIDE HBOS BOS '(DISCOVERY)))
       (SETF (C-POS-CAPTURE-SUMMARY PIA)
	     CSA)
       (RETURN CSA)
))

;A SUMMARY OF WHAT PIECE IS CURRENT DEFENDING.
;  COULD-BE-CAPTED   ->   CAPTURE ANALYSIS FOR HIM CAPTING THIS PC.
;  EXPENDED-DEFENSE  ->   THIS PIECE DEFENDS THAT PIECE AND WAS "USED" IN THE 
;			 CAPTURE-ANALYSIS FOR THAT PIECE.
;  UNEXPENDED-DEFENSE ->  AS ABOVE, BUT IT WAS NOT USED.
;  PIN		      ->  THIS PIECE MAY BE PINNED.

(DEFUN C-CREATE-DEFENSE-RELATIONS NIL 
 (PROG (PIA DRA CSA BOS HBOS PC SQ LIM)
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (SETQ BOS (C-POS-BEARS-ON-SQUARE PIA))
       (SETQ HBOS (C-POS-HIS-BEARS-ON-SQUARE PIA))
       (SETQ DRA (MAKE-ARRAY NIL 'ART-Q PIECE-ARRAY-SIZE
		       NIL (DEFENSE-RELATIONS-ARRAY-LEADER-SIZE) NIL 'DEFENSE-RELATIONS))
       (COND ((NULL (SETQ CSA (C-POS-CAPTURE-SUMMARY PIA)))
	      (SETQ CSA (C-CREATE-CAPTURE-SUMMARY))))
       (DO CAPT (CAPTURE-SUMMARY-OUR-CAN-BE-CAPT-LIST CSA) (CDR CAPT) (NULL CAPT)
	   (SETQ PC (CAPTURE-LIST-ITEM-CAPTURED-PIECE (CAR CAPT)))
	   (AS-1 (CONS (LIST 'COULD-BE-CAPTED (CAR CAPT))
		       (AR-1 DRA PC))
		 DRA
		 PC)
	   (SETQ SQ (AR-1 PIECE-ARRAY PC))
	   (SETQ LIM (CAPTURE-LIST-ITEM-PLYN (CAR CAPT)))
	   (DO ((PLYN -1 (+ PLYN 2))
		(DPL (AR-1 BOS SQ) (CDR DPL)))
	       ((NULL DPL))
	       (AS-1 (CONS (LIST (COND ((< PLYN LIM) 'EXPENDED-DEFENSE)
				       (T 'UNEXPENDED-DEFENSE))
				 (CAR CAPT))
			   (AR-1 DRA (CAAR DPL)))
		     DRA
		     (CAAR DPL))))
       (DO CAPT (CAPTURE-SUMMARY-HIS-CAN-BE-CAPT-LIST CSA) (CDR CAPT) (NULL CAPT)
	   (SETQ PC (CAPTURE-LIST-ITEM-CAPTURED-PIECE (CAR CAPT)))
	   (AS-1 (CONS (LIST 'COULD-BE-CAPTED (CAR CAPT))
		       (AR-1 DRA PC))
		 DRA
		 PC)
	   (SETQ SQ (AR-1 PIECE-ARRAY PC))
	   (SETQ LIM (CAPTURE-LIST-ITEM-PLYN (CAR CAPT)))
	   (DO ((PLYN -1 (+ PLYN 2))
		(DPL (AR-1 HBOS SQ) (CDR DPL)))
	       ((NULL DPL))
	       (AS-1 (CONS (LIST (COND ((< PLYN LIM) 'EXPENDED-DEFENSE)
				       (T 'UNEXPENDED-DEFENSE))
				 (CAR CAPT))
			   (AR-1 DRA (CAAR DPL)))
		     DRA
		     (CAAR DPL))))
;       (DO PIN (CAPTURE-SUMMARY-OUR-POSSIBLE-PINS CSA) (CDR PIN) (NULL PIN)
;	   (SETQ PC (AR-1 BOARD-ARRAY (CAR (CAR PIN))))
;	   (AS-1 (CONS (LIST 'PIN (CAR PIN))
;		       (AR-1 DRA PC))
;		 DRA
;		 PC))
;       (DO PIN (CAPTURE-SUMMARY-HIS-POSSIBLE-PINS CSA) (CDR PIN) (NULL PIN)
;	   (SETQ PC (AR-1 BOARD-ARRAY (CAR (CAR PIN))))
;	   (AS-1 (CONS (LIST 'PIN (CAR PIN))
;		       (AR-1 DRA PC))
;		 DRA
;		 PC))
       (SETF (C-POS-DEFENSE-RELATIONS-ARRAY PIA) DRA)
       (RETURN DRA)
))

;SCAN THRU MOVE LIST.  FOR EACH MOVE, GET ITS MO-KEYS.  IF IT ATTACKS SOMETHING,
; ATTEMPT, INDEX IT UNDER THE PIECE ATTACKED,
(DEFUN C-CREATE-ATTACK-RELATIONS (SIDE)
 (PROG (PIA PIA-SIDE MOVE-LIST ARA CSA HCBCL CENTER-INDEX-ARRAY
        IDX LIM BOS HBOS MOVING-PC MO
        DATTS ATTS APC ASQ ATI APLE OPL
	DISCOV-PC PREV-ARA ATI-KEYS MOVE-ATI-LIST)
;      (SETQ SIDE (MOVE-LIST-SIDE MOVE-LIST))
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (COND ((NULL (SETQ CSA (C-POS-CAPTURE-SUMMARY PIA)))
	      (SETQ CSA (C-CREATE-CAPTURE-SUMMARY))))
       (SETQ PIA-SIDE (C-POS-SIDE PIA))
       (COND ((= SIDE PIA-SIDE)
	      (SETQ MOVE-LIST (C-POS-MOVE-LIST PIA))
	      (SETQ BOS (C-POS-BEARS-ON-SQUARE PIA))
	      (SETQ HBOS (C-POS-HIS-BEARS-ON-SQUARE PIA))
	      (SETQ HCBCL (CAPTURE-SUMMARY-HIS-CAN-BE-CAPT-LIST CSA)))
	     (T (COND ((NULL (SETQ MOVE-LIST (C-POS-HIS-MOVE-LIST PIA)))
		       (SETF (C-POS-HIS-MOVE-LIST PIA)
			     (SETQ MOVE-LIST (C-GET-HIS-MOVE-LIST)))))
		(SETQ BOS (C-POS-HIS-BEARS-ON-SQUARE PIA))
		(SETQ HBOS (C-POS-BEARS-ON-SQUARE PIA))
		(SETQ HCBCL (CAPTURE-SUMMARY-OUR-CAN-BE-CAPT-LIST CSA))))
       (SETQ CENTER-INDEX-ARRAY (CAPTURE-SUMMARY-3R-CENTER-INDEX-ARRAY CSA))
       (COND ((NULL (SETQ ARA (C-POS-ATTACK-RELATIONS-ARRAY PIA)))
	      (SETQ ARA (MAKE-ARRAY NIL 'ART-Q PIECE-ARRAY-SIZE 
			      NIL (ATTACK-RELATIONS-ARRAY-LEADER-SIZE)
			      NIL 'ATTACK-RELATIONS))
	      (SETF (C-POS-ATTACK-RELATIONS-ARRAY PIA) ARA)))
       (COND ((MEMQ 'ATTACK-RELATIONS (MOVE-LIST-COMPUTED-KEYS MOVE-LIST))
	      (RETURN ARA)))   ;ALREADY DONE.
       (COND ((NOT (MEMQ 'MO-KEYS (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)))
	      (C-FILL-IN-MO-KEYS MOVE-LIST)))
       (SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
   L   (COND ((NOT (< IDX LIM))
	      (SETF (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)
		    (CONS 'ATTACK-RELATIONS
			  (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)))
	      (RETURN ARA)))
       (SETQ MOVE-ATI-LIST NIL)
       (SETQ MOVING-PC (AR-1 MOVE-LIST (+ IDX C-MVL-MOVING-PC)))
       (SETQ MO (AR-1 MOVE-LIST (+ IDX C-MVL-MO-KEYS)))
       (COND ((NULL (SETQ ATTS (ASSQ 'WILL-ATTACK-HIS-PIECES MO)))
	      (GO L2)))
       (SETQ ATTS (CADR ATTS))
   L1  (SETQ ASQ (CAAR ATTS))
       (SETQ APC (AR-1 BOARD-ARRAY ASQ))
;      (SETQ APLE (COND ((NULL (CDAR ATTS)) (LIST MOVING-PC))   ;MAKES NEW LIST STRUCTURE
;                       ((NULL (CDDAR ATTS)) (LIST MOVING-PC (CADAR ATTS)))
;                       (T (LIST MOVING-PC (CADAR ATTS) (CADDAR ATTS)))))
       (SETQ APLE (CONS MOVING-PC (CDAR ATTS)))       ;SHARES LIST STRUCTURE
       (SETQ OPL (AR-1 BOS ASQ))
  E3   (SETQ ATI (C-CREATE-ATTACK-INSTANCE 
		     IDX		;MOVE-INDEX GIVING RISE TO THIS
		     ASQ
		     (C-ADD-TO-PL APLE OPL)
		     (AR-1 HBOS ASQ)
		     HCBCL
		     CENTER-INDEX-ARRAY))
       (COND ((NOT (ZEROP (AR-1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY ASQ)
				MOVING-PC)))
	      (SETF (ATTACK-INSTANCE-KEYS ATI)     ;ALREADY HITTING THAT SQUARE 
		    (CONS '(JUST-HOLDING)          ; (IE JUST HOLDING ATTACK)
			  (ATTACK-INSTANCE-KEYS ATI)))))
       (SETQ MOVE-ATI-LIST (CONS ATI MOVE-ATI-LIST))
       (AS-1 (CONS ATI (AR-1 ARA APC))
	     ARA
	     APC)
       (COND ((SETQ ATTS (CDR ATTS))
	      (GO L1)))
   L2  (COND ((NULL (SETQ DATTS (CADR (ASSQ 'WILL-ATTACK-HIS-PIECES-DISCOVERED MO))))
	      (GO E4)))
   L4  (SETQ DISCOV-PC (CAAR DATTS))
       (SETQ ATTS (CADAR DATTS))
   L5  (SETQ ASQ (CAAR ATTS))
       (SETQ APC (AR-1 BOARD-ARRAY ASQ))
       (SETQ APLE (CONS DISCOV-PC (CDAR ATTS)))		;SHARES LIST STRUCTURE
;LOOK IN CURRENT ARA ENTRY TO SEE IF THERE IS ALSO A DIRECT ATTACK.
       (COND ((AND (SETQ PREV-ARA (AR-1 ARA APC))
		   (= IDX (ATTACK-INSTANCE-MOVE-IDX (CAR PREV-ARA))))
  ;THIS A DOUBLE HIT.  ENTRY MUST BE AT HEAD OF PREV-ARA LIST 
  ; SINCE IT WAS JUST PUT THERE ABOVE.
	      (SETQ ATI (C-CREATE-ATTACK-INSTANCE
			   IDX
			   ASQ
			   (C-ADD-TO-PL APLE (ATTACK-INSTANCE-ATTACKING-PIECE-LIST
					         (CAR PREV-ARA)))
			   (ATTACK-INSTANCE-DEFENDING-PIECE-LIST (CAR PREV-ARA))
			   HCBCL
			   CENTER-INDEX-ARRAY))
	      (SETQ ATI-KEYS (CONS '(DOUBLE-HIT)
				   (CONS '(DISCOVERED) (ATTACK-INSTANCE-KEYS ATI))))
	      (SETF (ATTACK-INSTANCE-KEYS ATI)
		    (CONS (LIST 'DIRECT-ATTACK (CAR PREV-ARA))
			  ATI-KEYS))
	      (REPLACE-IN-LIST (CAR PREV-ARA) ATI MOVE-ATI-LIST)
	      (RPLACA PREV-ARA ATI))
	     (T
	      (SETQ ATI (C-CREATE-ATTACK-INSTANCE
			    IDX
			    ASQ
			    (C-ADD-TO-PL APLE OPL)
			    (AR-1 HBOS ASQ)
			    HCBCL
			    CENTER-INDEX-ARRAY))
	      (SETF (ATTACK-INSTANCE-KEYS ATI)
		    (CONS '(DISCOVERED)
			  (ATTACK-INSTANCE-KEYS ATI)))
	      (SETQ MOVE-ATI-LIST (CONS ATI MOVE-ATI-LIST))
	      (AS-1 (CONS ATI PREV-ARA)
		    ARA
		    APC)))
       (COND ((SETQ ATTS (CDR ATTS))
	      (GO L5)))
       (COND ((SETQ DATTS (CDR DATTS))
	      (GO L4)))
   E4  (AS-1 MOVE-ATI-LIST MOVE-LIST (+ IDX C-MVL-ATTACK-INSTANCES))
       (SETQ IDX (+ IDX C-MVL-NQS))
       (GO L)
))

(DEFUN C-CREATE-ATTACK-INSTANCE (MOVE-IDX SQ APL DPL HCBCL CENTER-INDEX-ARRAY)
 (PROG (ATI VAL PC CLI ATI-KEYS)
       (SETQ PC (AR-1 BOARD-ARRAY SQ))
       (SETQ ATI (MAKE-ARRAY NIL ART-Q (ATTACK-INSTANCE-ARRAY-SIZE)
			     NIL NIL NIL 'ATTACK-INSTANCE))
       (SETF (ATTACK-INSTANCE-SQUARE ATI) SQ)
       (SETF (ATTACK-INSTANCE-PIECE ATI) PC)
       (SETF (ATTACK-INSTANCE-ATTACKING-PIECE-LIST ATI) APL)
       (SETF (ATTACK-INSTANCE-DEFENDING-PIECE-LIST ATI) DPL)
       (SETF (ATTACK-INSTANCE-MOVE-IDX ATI) MOVE-IDX)
       (MULTIPLE-VALUE (VAL ATI-KEYS)
	   (C-EVALUATE-ATTACK PC APL DPL CENTER-INDEX-ARRAY ATI-KEYS))
       (SETF (ATTACK-INSTANCE-VALUE ATI) VAL)
       (COND ((SETQ CLI (CAPTURE-LIST-MEMQ PC HCBCL))
	      (SETQ ATI-KEYS 
		    (CONS (LIST 'CAN-NOW-BE-CAPTED (CAR CLI))
			  ATI-KEYS))))
       (SETF (ATTACK-INSTANCE-KEYS ATI) ATI-KEYS)
       (RETURN ATI)
))

;  PRESSURE-POINTS. If more than two pieces for each side bear on a square,
;it starts getting complicated to figure out what is going on.  What is more,
;the chance of the answer being "Right" declines greatly. (Because of the
;possibility of relationships with other things, etc).  Fortunately, the situation
;is fairly rare.  So, any such square is declared a "PRESSURE-POINT".  Moves
;attacking it, etc, directly get credit for attacking a pressure point, and
;no extended attempt is made to figure out whats actually going on.  (However,
;the move also gets credit for a tempo attack, etc, if thats clearly deserved, etc)

;   TEMPO-MOVE?  PINING-HIM?  APPARENT-VALUE TEMPO-VALUE

;RETURNS <PROBABLE-VALUE> <KEYS>
; INDICATOR CAN BE:  ATTACKED-BY-LESS  PC IS DIRECTLY EP.
;		     PRESSURE-POINT   TOO COMPLICATED TO REALLY FIGURE OUT.
;				      VALUE IS "MOST OPTIMISTIC".
(DEFUN C-EVALUATE-ATTACK (PC APL DPL CENTER-INDEX-ARRAY KEYS)
 (PROG (PVA PCV APC APCV DPC DPCV R1 C2 R2 PINVL TEM)
       (COND ((NULL APL) (RETURN NIL 0)))
       (SETQ PVA (PIECE-VALUE-ARRAY PIECE-ARRAY))
       (SETQ PCV (AR-1 PVA PC))
       (SETQ APC (CAAR APL)
	     APCV (AR-1 PVA APC))
       (COND ((> (SETQ R1 (- PCV APCV)) 0)	     ;AS OF FIRST RECAPTURE BY DEFENSE
	      (SETQ KEYS (CONS '(ATTACKED-BY-LESS)	     ;DEFENDING COULD HELP.
			       KEYS))))
       (COND ((NULL DPL) (RETURN PCV KEYS)))       ;NOT DEFENDED
  DP1  (SETQ DPC (CAAR DPL)
	     DPCV (AR-1 PVA DPC))
       (COND ((AR-1 CENTER-INDEX-ARRAY DPC)
	      (MULTIPLE-VALUE (PINVL KEYS)
		   (C-EVALUATE-PIN-STRENGTH CENTER-INDEX-ARRAY DPC KEYS))
	      (COND ((> PINVL 0)
		     (COND ((NULL (SETQ DPL (CDR DPL)))
			    (RETURN PCV KEYS))  ;ALL DEFENDERS PINNED
			   (T (GO DP1)))))))	;DEFENDER PINNED
       (COND ((NULL (CDR APL))
	      (RETURN R1 KEYS)))
       (SETQ C2 (+ R1 DPCV))			     ;AS OF FIRST RECAPTURE BY OFFENSE
       (COND ((NULL (CDR DPL))
	      (RETURN (MIN C2 PCV) KEYS)))  ;ONLY DEFENDER CAN RECAPT OR NOT.
       (SETQ APC (CAADR APL)
	     APCV (AR-1 PVA APC))
       (SETQ R2 (- C2 APCV))
       (COND ((> (SETQ TEM (MAX R2 (MIN R1 PCV))) 0)
	      (RETURN TEM KEYS)))
       (RETURN (MIN C2 PCV) (CONS '(PRESSURE-POINT) KEYS))
))

;RETURNS T IF C-I-LIST CONTAINS AT LEAST ONE POSSIBLE PIN (AS OPPOSED TO
; POSSIBLE DISCOVERY ON HIM).
(DEFUN C-CONTAINS-PIN (CENTER-PIECE C-I-LIST)
  (PROG ()
   L	(COND ((NULL C-I-LIST) (RETURN NIL))
	      ((NOT (ZEROP (LOGAND #o20
				   (LOGXOR CENTER-PIECE 
					   (CAR (THREE-RELATION-ATTACK-DESCRIPTION
						   (CAR C-I-LIST)))))))
	       (RETURN T)))
   	(SETQ C-I-LIST (CDR C-I-LIST))
	(GO L)
))

(DEFUN C-EVALUATE-PIN-STRENGTH (CENTER-INDEX-ARRAY CENTER-PC KEYS)
  (PROG (3RV PINVL C-I-LIST)
	(COND ((NULL (SETQ C-I-LIST (AR-1 CENTER-INDEX-ARRAY CENTER-PC)))
	       (RETURN 0 KEYS)))
	(SETQ PINVL 0)
    L   (COND ((NULL (SETQ 3RV (THREE-RELATION-VALUE (CAR C-I-LIST))))
	       (SETQ 3RV (C-COMPUTE-THREE-RELATION-VALUE CENTER-INDEX-ARRAY (CAR C-I-LIST)))))
	(COND ((NOT (ZEROP (LOGAND #o20
				   (LOGXOR CENTER-PC
					   (CAR (THREE-RELATION-ATTACK-DESCRIPTION
						   (CAR C-I-LIST)))))))
	       (COND ((> 3RV 0)
		      (SETQ PINVL (+ PINVL 3RV))
		      (SETQ KEYS (CONS (LIST 'PIN-IN (CAR C-I-LIST))
					   KEYS)))
		     (T (SETQ KEYS (CONS (LIST 'PIN-OUT (CAR C-I-LIST))
					     KEYS)))))
	      (T (SETQ KEYS (CONS (LIST 'DISCOVERY-OUT (CAR C-I-LIST))
				      KEYS))))
	(COND ((SETQ C-I-LIST (CDR C-I-LIST))
	       (GO L)))
	(RETURN PINVL KEYS)))

;MAYBE SHOULD TRY FINDING APPRO ENTRY IN CAPTURE SUMMARY??
;  WHY NOT: OPPOSITE CONSERVATISM.
(DEFUN C-GET-DIRECT-RESULTS-OF-MOVE (MOVE-LIST IDX)
 (PROG (PIA BOS HBOS PC FROM-SQ TO-SQ CPC APL DPL DIR CSA CENTER-INDEX-ARRAY 
	ANS)
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (COND ((NULL (SETQ CSA (C-POS-CAPTURE-SUMMARY PIA)))
	      (SETQ CSA (C-CREATE-CAPTURE-SUMMARY))))
       (SETQ CENTER-INDEX-ARRAY (CAPTURE-SUMMARY-3R-CENTER-INDEX-ARRAY CSA))
       (SETQ BOS (C-POS-BEARS-ON-SQUARE PIA))
       (SETQ HBOS (C-POS-HIS-BEARS-ON-SQUARE PIA))
       (SETQ PC (AR-1 MOVE-LIST (+ IDX C-MVL-MOVING-PC)))
       (SETQ TO-SQ (AR-1 MOVE-LIST (+ IDX C-MVL-TO-SQ)))
       (SETQ FROM-SQ (AR-1 PIECE-ARRAY PC))
       (SETQ ANS (AR-1 CENTER-INDEX-ARRAY PC))
       (SETQ DPL (AR-1 HBOS TO-SQ))
       (COND ((AND (= (SETQ CPC (AR-1 BOARD-ARRAY TO-SQ))
		      SQUARE-VACANT)
                   (NULL DPL))
	      (RETURN ANS)))   ;NOT ATTACKED AND NOT CAPTURE.
       (SETQ APL (C-DELETE-FROM-PL PC (AR-1 BOS TO-SQ)))
;SEE IF SLIDING PIECES (FOR EITHER SIDE) "FOLLOWING" MOVE.  IE THEY WERE ATTACKING
;FROM-SQ ALONG THE SAME LINE TO-SQ IS FROM FROM-SQ.
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (COND ((NULL (SETQ CSA (C-POS-CAPTURE-SUMMARY PIA)))
	      (SETQ CSA (C-CREATE-CAPTURE-SUMMARY))))
       (SETQ CENTER-INDEX-ARRAY (CAPTURE-SUMMARY-3R-CENTER-INDEX-ARRAY CSA))
       (COND ((SETQ DIR (C-GET-SQUARE-TO-SQUARE-DIR FROM-SQ TO-SQ))
	      (DO PLE (AR-1 HBOS FROM-SQ) (CDR PLE) (NULL PLE)
		  (COND ((AND (NOT (ATOM (CAR PLE)))
			      (NUMBERP (CADAR PLE))
			      (= (CADAR PLE) DIR))
			 (SETQ DPL (C-ADD-TO-PL (CAR PLE) DPL)))))
	      (DO PLE (AR-1 BOS FROM-SQ) (CDR PLE) (NULL PLE)
		  (COND ((AND (NOT (ATOM (CAR PLE)))
			      (NUMBERP (CADAR PLE))
			      (= (CADAR PLE) DIR))
			 (SETQ APL (C-ADD-TO-PL (CAR PLE) APL)))))))
       (RETURN (CONS (C-CREATE-CAPTURE-LIST-ITEM TO-SQ PC DPL APL
			 (COND ((= CPC SQUARE-VACANT)
				0)
			       (T (MINUS (AR-1 (PIECE-VALUE-ARRAY PIECE-ARRAY)
					       CPC))))
			 CENTER-INDEX-ARRAY
			 'ATTACK)
		     ANS))
	       
))

(DEFUN C-CREATE-CAPTURE-LIST-ITEM (SQ PC APL DPL IVAL CENTER-INDEX-ARRAY DESIRED-BIAS)
  (PROG (VAL PLYN CLI KEYS)
	(MULTIPLE-VALUE (VAL PLYN KEYS)
	   (C-EVALUATE-SWAPOUT-MAIN-VARIATION 0 SQ IVAL PC APL DPL NIL NIL
					      CENTER-INDEX-ARRAY DESIRED-BIAS KEYS))
	(SETQ CLI (MAKE-ARRAY NIL 'ART-Q (CAPTURE-LIST-ITEM-ARRAY-SIZE)
			      NIL NIL NIL 'CAPTURE-LIST-ITEM))
	(SETF (CAPTURE-LIST-ITEM-VALUE CLI) VAL)
	(SETF (CAPTURE-LIST-ITEM-PLYN CLI) PLYN)
	(SETF (CAPTURE-LIST-ITEM-SQUARE CLI) SQ)
	(SETF (CAPTURE-LIST-ITEM-CAPTURED-PIECE CLI) PC)
	(SETF (CAPTURE-LIST-ITEM-ATTACKING-PIECE-LIST CLI) APL)
	(SETF (CAPTURE-LIST-ITEM-DEFENDING-PIECE-LIST CLI) DPL)
	(SETF (CAPTURE-LIST-ITEM-BIAS CLI)
	      (COND ((ASSQ 'BIAS-PINS-OUT KEYS) DESIRED-BIAS)))
	(SETF (CAPTURE-LIST-ITEM-KEYS CLI) KEYS)
	(RETURN CLI)
))

(DEFUN CAPTURE-LIST-MEMQ (PC CBCL)
  (PROG ()
    L	(COND ((NULL CBCL)
	       (RETURN NIL))
	      ((= PC (CAPTURE-LIST-ITEM-CAPTURED-PIECE (CAR CBCL)))
	       (RETURN CBCL)))
    	(SETQ CBCL (CDR CBCL))
	(GO L)))

(DEFUN CAPTURE-LIST-COMPARE-> (X Y)
       (> (CAPTURE-LIST-ITEM-VALUE X) (CAPTURE-LIST-ITEM-VALUE Y)))

;RETURNS 3 VALUES.
; VALUE PLYN KEYS
; ON EVEN NUMBERED PLIES, IGNORE PINNED PIECES IF DESIRED-BIAS = ATTACK
; ON ODD NUMBERED PLIES, DO SO IF DESIRED-BIAS = DEFENSE
;   A PIN ENCOUNTERED ON SUCH A PLY PUTS IN A PIN-IN KEY IF HONORED,
;     OR A PIN-OUT KEY IF DECIDED TO BE WORTHLESS.
;   A PIN ENCOUNTERED OTHER THAN ON ABOVE PLIES PUTS IN A BIAS-PIN-OUT KEY.
(DEFUN C-EVALUATE-SWAPOUT-MAIN-VARIATION (PLYN SQ VAL PC APL DPL 
					  MY-ASSURED-WORST HIS-ASSURED-WORST
					  CENTER-INDEX-ARRAY DESIRED-BIAS KEYS)
  (PROG (BSF-VALUE T-VALUE T-PLYN T-KEYS PINVL TEM)
	(SETQ BSF-VALUE VAL)   ;SIDE ON MOVE CAN TAKE THAT
	(COND ((OR (NULL MY-ASSURED-WORST)
		   (> BSF-VALUE MY-ASSURED-WORST))
	       (SETQ MY-ASSURED-WORST BSF-VALUE)
	       (COND ((AND HIS-ASSURED-WORST
			   (> BSF-VALUE HIS-ASSURED-WORST))
		      (RETURN BSF-VALUE PLYN KEYS)))))  ;A B CUT
  DP1	(COND ((NULL APL) (RETURN BSF-VALUE PLYN KEYS)))
;FIRST PC ON APL PINNED?
	(COND ((AND (SETQ TEM (AR-1 CENTER-INDEX-ARRAY (CAAR APL)))
		    (C-CONTAINS-PIN (CAAR APL) TEM))
	       (COND ((COND ((EQ DESIRED-BIAS 'ATTACK)
			     (ZEROP (LOGAND PLYN 1)))
			    ((EQ DESIRED-BIAS 'DEFENSE)
			     (NOT (ZEROP (LOGAND PLYN 1)))))
		      (MULTIPLE-VALUE (PINVL KEYS)
			   (C-EVALUATE-PIN-STRENGTH CENTER-INDEX-ARRAY (CAAR APL) KEYS))
		      (COND ((> PINVL 0)
			     (SETQ APL (CDR APL))
			     (GO DP1))))
		     (T (SETQ KEYS (CONS (LIST 'BIAS-PINS-OUT TEM)  ;FLUSH THIS DUE TO BIAS
					 KEYS))))))
;EXPEND FIRST PC ON APL.
	(SETQ VAL (+ VAL (AR-1 (PIECE-VALUE-ARRAY PIECE-ARRAY) PC)))
	(SETQ PC (CAAR APL))
	(SETQ APL (CDR APL))

	(MULTIPLE-VALUE (T-VALUE T-PLYN T-KEYS)
	       (C-EVALUATE-SWAPOUT-MAIN-VARIATION (1+ PLYN) SQ (MINUS VAL) PC DPL APL
		       HIS-ASSURED-WORST MY-ASSURED-WORST
		       CENTER-INDEX-ARRAY DESIRED-BIAS KEYS))
        (SETQ T-VALUE (MINUS T-VALUE))
	(COND ((>= T-VALUE BSF-VALUE) (RETURN T-VALUE T-PLYN T-KEYS))
	      (T (RETURN BSF-VALUE PLYN KEYS)))
))

(DECLARE (SPECIAL C-FS-N-POSITIONS C-FS-N-AB-CUT))

(DEFUN C-FULL-SEARCH-TEST (SETD &OPTIONAL MY-ASSURED-WORST HIS-ASSURED-WORST)
  (PROG (BSF-VALUE BSF-PV (C-FS-N-POSITIONS 0) (C-FS-N-AB-CUT 0))
        (MULTIPLE-VALUE (BSF-VALUE BSF-PV)
	  (C-FULL-WIDTH-SEARCH-1 SETD 
				 'C-FS-TEST-STABLE-P
				 'C-FS-TEST-STATEV
				 'C-FS-TEST-COMPARE
				 MY-ASSURED-WORST
				 HIS-ASSURED-WORST))
	(RETURN BSF-VALUE BSF-PV C-FS-N-POSITIONS C-FS-N-AB-CUT)))

(DEFUN C-FS-TEST-STABLE-P NIL T)
(DEFUN C-FS-TEST-STATEV NIL (MULTIPLE-VALUE-LIST (C-BASIC-STATIC-EVALUATOR)))

(DEFUN C-FS-TEST-COMPARE (SIDE V1 V2 &AUX M1 M2)  ;RETURN T IF V1 BETTER THAN V2
    (SETQ M1 (+ (CAR V1) (CADR V1)))
    (SETQ M2 (+ (CAR V2) (CADR V2)))
    (COND ((ZEROP SIDE)
	   (COND ((= M1 M2)
		  (> (CADDR V1) (CADDR V2)))
		 (T (> M1 M2))))
	  (T
	   (COND ((= M1 M2)
		  (< (CADDR V1) (CADDR V2)))
		 (T (< M1 M2))))))

;setd is used to determine a depth cutoff
;statev is the static evaluator
;my-assured-worst is alpha
;his-assured-worst is beta

(DEFUN C-FULL-WIDTH-SEARCH-1 (SETD STABILITY-PRED STATEV RESULTS-COMPARE-FCTN
			      MY-ASSURED-WORST HIS-ASSURED-WORST)
  (PROG (SIDE BSF-VALUE BSF-MOVE BSF-PV R-VALUE R-PV 
	 MOVE-LIST IDX LIM)
	(SETQ C-FS-N-POSITIONS (1+ C-FS-N-POSITIONS))
	(SETQ SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
			#o0401 
			0))
	(COND ((AND (<= SETD 0)
		    (FUNCALL STABILITY-PRED))
	       (RETURN (FUNCALL STATEV) NIL)))
	(COND ((NULL (SETQ MOVE-LIST (GET C-CURRENT-POSITION 'MOVE-LIST)))
	       (PUTPROP C-CURRENT-POSITION 
			(SETQ MOVE-LIST (C-CREATE-MOVE-LIST SIDE))
			'MOVE-LIST)))
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
    L	(COND ((NOT (< IDX LIM))
	       (RETURN BSF-VALUE (CONS (LIST BSF-MOVE)
				       BSF-PV))))
    	(C-REACH-FOLLOWING-POSITION MOVE-LIST IDX)
	(COND ((COND ((ZEROP SIDE)
		      (WHITE-KING-IN-CHECK-P))
		     (T (BLACK-KING-IN-CHECK-P)))
	       (GO E)))
	(MULTIPLE-VALUE (R-VALUE R-PV)
	   (C-FULL-WIDTH-SEARCH-1 (1- SETD) STABILITY-PRED STATEV RESULTS-COMPARE-FCTN
				   HIS-ASSURED-WORST MY-ASSURED-WORST))
	(COND ((OR (NULL BSF-MOVE)
		   (FUNCALL RESULTS-COMPARE-FCTN SIDE R-VALUE BSF-VALUE))
	       (SETQ BSF-VALUE R-VALUE BSF-PV R-PV BSF-MOVE IDX)
	       (COND ((OR (NULL MY-ASSURED-WORST)
			  (FUNCALL RESULTS-COMPARE-FCTN SIDE R-VALUE MY-ASSURED-WORST))
		      (SETQ MY-ASSURED-WORST R-VALUE)
		      (COND ((AND HIS-ASSURED-WORST
				  (FUNCALL RESULTS-COMPARE-FCTN SIDE
					   		        MY-ASSURED-WORST
								HIS-ASSURED-WORST))
			     (SETQ C-FS-N-AB-CUT (1+ C-FS-N-AB-CUT))
			     (C-REVERT-MOVE)
			     (RETURN MY-ASSURED-WORST (CONS (LIST BSF-MOVE 'A-B-CUT)
							    BSF-PV))))))))
   E   	(C-REVERT-MOVE)
	(SETQ IDX (+ IDX C-MVL-NQS))
	(GO L)
))
    
;OPERATION OF THE PLAUSIBLE MOVE GENERATOR (PMG).
;AVAILABLE at start are the BOARD, PIECE-ARRAY, and CALCULATE-ATTACKS DATA.

;MOVE-STATES
;  DIRECT-GAIN MOVE-ATTACKS 2ND-LVL-ATTS REPLY-KNOWN 
;A MOVE BEING MOTOVATED.
;  If a strong feature has been associated with a move which almost assures
;that move will get looked at eventually, the move is said to be motivated.
;The simplest and very common case is a positive direct capture.  Once found,
;such a move should usually be looked at immediately.  If it causes an ALPHA-BETA
;cutoff, SUPER WIN.  Even if not, it was going to have to be looked at anyway,
;and the information returned from the search can be helpful in evaluating the
;other possible moves.

;FEATURE-KEYS  ARE THINGS LIKE BACK-RANK-MATE, CRADLE-TRAP, 3-MOVE N FORK CHECK, ETC
;  
;COMPUTE PIN-DATA..  CLEAR-PIN  POSSIBLE-PIN  HARMLESS-PIN

;SET TACTICS-REQUIRED SWITCH IF PCSATS MUCH LESS THAN NEED FOR BSF.
;SET HOLD-REQUIRED SWITCH IF PCSATS MORE THAN NEEDED FOR BSF.

;COMPUTE CURRENT EN-PRISE STATUS AND CONSTRAINTS.
;	CLEARLY E.P.  POSSIBLY E.P.  APPARENTLY-SUFFICIENTLY-DEFENDED  NOT-ATTACKED

;GENERATE SEMI-LEGAL-MOVES.
; MAP-SEMI-LEGAL-MOVES FOR BOTH SIDES, STORING THE MOVES IN
;A MOVE-LIST. During this step is also calculated a bit vector of all squares
;each piece attacks.  Captures are entered on a CAPTURES LIST.  The apparent safety
;of each move is noted.  For each piece which is apparently EN-PRISE, 
;THE THREATENED MOVE AND APPARENT GAIN ARE CROSS INDEXED.
;  CAPTURES  -- CLEAR-GAIN  EVEN   APPARENT-LOSS
;  MOVES	DEVELOPING  EVEN   RETREATING

;CAN-TAKE.  IF PIECES-AS-THE-STAND GOOD ENUF FOR A-B CUT, AND HE HAS NO THREATS.

;EARLY-LOOK  CAPTURE LOOKS SUPER WINNING AND IS CLEARLY GOING TO WANT TO BE LOOKED
;  AT.  THEREFORE, LOOK AT IT RIGHT AWAY, WITHOUT FURTHER ADO.

;BLOCKAGES AND UNBLOCKAGES

; NEXT, THE ARRAY GENERATED ABOVE IS MAPPED OVER, COMPUTING FOR EACH OF THOSE MOVES
;FOR EACH SQUARE IT ATTACKS:   
;	IS THIS MOVE JUST HOLDING PREVIOUS ATTACK?
;	IS SQUARE SPECIALLY SIGNIFICANT
;	IF ATTS PIECE..   DETERMINE APPARENT GAIN INDEX UNDER PC
;		IS PIECE NOW PINNED OR CONSTRAINED
;		WILL PIECE BE PINNED

(DEFUN C-PMG NIL NIL)


(DEFUN C-COMPUTE-TATICAL-POINTS NIL 
  (PROG (RA MOVE-LIST IDX LIM STATE POINT-LIST TOTAL-VALUE)
	(SETQ MOVE-LIST (GET C-CURRENT-POSITION 'MOVE-LIST))
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
	(SETQ RA (MAKE-ARRAY NIL 'ART-Q-LIST (* (// LIM C-MVL-NQS)
							       C-TAT-NQS) NIL '(NIL 0)))
	(STORE-ARRAY-LEADER MOVE-LIST RA 1)
   L	(COND ((NOT (< IDX LIM)) (RETURN RA))
	      ((EQ (SETQ STATE (AR-1 MOVE-LIST (+ IDX C-MVL-STATE)))
		   'ILLEGAL)
	       (GO E0)))
	(MULTIPLE-VALUE (POINT-LIST TOTAL-VALUE)
			(C-COMPUTE-POINTS-FROM-MOVE-LIST MOVE-LIST IDX))
	(ARRAY-PUSH RA TOTAL-VALUE)
	(ARRAY-PUSH RA IDX)
	(ARRAY-PUSH RA POINT-LIST)
   E0	(SETQ IDX (+ IDX C-MVL-NQS))
	(GO L)
))

(DEFUN C-COMPUTE-POINTS-FROM-MOVE-LIST (MOVE-LIST IDX)
  (PROG (POINTS-LIST TOTAL-VALUE CODE)
	(COND ((MEMQ (SETQ CODE (AR-1 MOVE-LIST (+ IDX C-MVL-CODE)))
		     '(CASTLES-KING CASTLES-QUEEN))
	       (GO X)))
	(MULTIPLE-VALUE (POINTS-LIST TOTAL-VALUE)
			(C-COMPUTE-POINTS-FOR-PIECE-ON-SQUARE 
			     (AR-1 MOVE-LIST (+ IDX C-MVL-MOVING-PC))
			     (AR-1 MOVE-LIST (+ IDX C-MVL-TO-SQ))))
   X	(RETURN POINTS-LIST TOTAL-VALUE)))

(DECLARE (SPECIAL C-POINTS-LIST))

(DEFUN C-COMPUTE-POINTS-FOR-PIECE-ON-SQUARE (CURRENT-PIECE SQ)
  (PROG (C-POINTS-LIST C-POINTS-VALUE TWN)
	(SETQ TWN (AR-1 (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY) CURRENT-PIECE))
	(SETQ C-POINTS-VALUE 0)
	(FUNCALL (AR-1 C-A-DISPATCH TWN)
		 (FUNCTION C-COMPUTE-POINTS-FOR-ATTACK-ON-SQUARE)
		 SQ)
	(RETURN C-POINTS-LIST C-POINTS-VALUE)))

(DEFUN C-COMPUTE-POINTS-FOR-ATTACK-ON-SQUARE (SQ &OPTIONAL DIR MODE)
  (PROG (SQUARE-CONTENTS)
	(COND ((OR (NOT (< (SETQ SQUARE-CONTENTS (AR-1 BOARD-ARRAY SQ))
			   SQUARE-OFF-BOARD))
		   (= SQUARE-CONTENTS CURRENT-PIECE))
	       (RETURN NIL))
	      ((NOT (< SQUARE-CONTENTS PIECE-ARRAY-SIZE))
	       (RETURN NIL))		;FOR NOW, VACANT SQUARE
	      ((ZEROP (LOGAND #o20 (LOGXOR SQUARE-CONTENTS CURRENT-PIECE)))
	       (SETQ C-POINTS-LIST      ;DEFENCE
		     (CONS (LIST 'DEFENDS-PIECE SQUARE-CONTENTS)
			   C-POINTS-LIST))
	       (RETURN NIL))
	      (T 
	       (SETQ C-POINTS-LIST 
		     (CONS (LIST 'ATTACKS-PIECE SQUARE-CONTENTS)
			   C-POINTS-LIST))
	       (RETURN NIL)))
))

;----

;SQUARE-KEYS AND HIS-SQUARE-KEYS ARE BOARD SIZE ARRAYS.  
;  FOR EACH SQUARE, THE ENTRY IS A LIST (<KEY> <MOVE-INDEX> ..)
;   KEYS ARE:  
;     MOVES-TO-SQUARE .. THAT MOVE MOVES TO INDICATED SQUARE.
;     ATTACKS-SQUARE  .. MOVE ATTACKS INDICATED SQUARE.
;     HOLDS-ATTACK-ON-SQUARE .. MOVE HOLDS ATTACK ON SQUARE (IT IS CURRENTLY ATTACKED,
;				AND STILL IS AFTER MOVE).
;  TO COMPUTE THIS, THE MOVE-LIST MUST EXIST, AND THE CAT-DATA BE VALID (SO IT
;CAN TELL BETWEEN ATTACKS AND HOLDS-ATTACK BY LOOKING AT C-SQUARE-PIECE-ATTACKS-ARRAY).
;THESE ARE COMPUTED BY C-CREATE-SQUARE-KEYS-ARRAY IF NECESSARY.

;WARNING-- THIS DATA IS COMPUTED FROM THE MOVE-LIST, SO ONLY HAS DATA ABOUT SEMI-LEGAL
;MOVES (NOT DEFENCES OF OUR PIECES, FOR EXAMPLE).

;CALL THIS IF C-CURRENT-POSITION DOES NOT HAVE RIGHT FLAVOR SQUARE-KEYS PROPERTY.
(DEFUN C-CREATE-SQUARE-KEYS-ARRAY (&OPTIONAL SIDE)
  (PROG (SQUARE-KEYS-ARRAY MOVE-LIST MOVING-SIDE)
	(COND ((NULL SIDE) (SETQ SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
					   #o0401
					   0))))
   L	(COND ((NULL (SETQ MOVE-LIST 
		       (GET C-CURRENT-POSITION 
			    (COND ((= SIDE (SETQ MOVING-SIDE 
						 (DPB (GAME-PLY-NUMBER GAME-ARRAY)
						      #o0401
						      0)))
				   'MOVE-LIST)
				  (T 'HIS-MOVE-LIST)))))
	       (C-CREATE-MOVE-LIST SIDE)
	       (GO L)))
	(SETQ SQUARE-KEYS-ARRAY (C-GENERATE-SQUARE-KEYS SIDE MOVE-LIST))
	(COND ((= SIDE MOVING-SIDE)
	       (PUTPROP C-CURRENT-POSITION SQUARE-KEYS-ARRAY 'SQUARE-KEYS))
	      (T (PUTPROP C-CURRENT-POSITION SQUARE-KEYS-ARRAY 'HIS-SQUARE-KEYS)))
	(RETURN SQUARE-KEYS-ARRAY)
))

(DEFUN C-GENERATE-SQUARE-KEYS (CURRENT-SIDE MOVE-LIST)
  (PROG (SPECIAL-BOARD-KEYS-ARRAY SPECIAL-MOVE-INDEX LIM CODE
	 CURRENT-PIECE TWA TWN CURRENT-LOCATION P-BASE)
	(COND ((NULL (BOARD-CAT-DATA-VALID BOARD-ARRAY))
	       (C-CALCULATE-ATTACKS)))
	(SETQ SPECIAL-BOARD-KEYS-ARRAY 
	      (MAKE-ARRAY NIL 'ART-Q BOARD-SIZE NIL 3))
	(STORE-ARRAY-LEADER MOVE-LIST SPECIAL-BOARD-KEYS-ARRAY 2)
	(SETQ P-BASE (* CURRENT-SIDE #o20))
	(SETQ TWA (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY))
	(SETQ SPECIAL-MOVE-INDEX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
    L	(COND ((NOT (< SPECIAL-MOVE-INDEX LIM))
	       (RETURN SPECIAL-BOARD-KEYS-ARRAY)))
    	(SETQ CURRENT-PIECE (AR-1 MOVE-LIST (+ SPECIAL-MOVE-INDEX C-MVL-MOVING-PC)))
	(SETQ CURRENT-LOCATION (AR-1 MOVE-LIST (+ SPECIAL-MOVE-INDEX C-MVL-TO-SQ)))
	(COND ((OR (NULL (SETQ CODE (AR-1 MOVE-LIST (+ SPECIAL-MOVE-INDEX C-MVL-CODE))))
		   (EQ CODE 'EN-PASSENT))
	       (SETQ TWN (AR-1 TWA CURRENT-PIECE))) 
	      ((MEMQ CODE '(CASTLES-KING CASTLES-QUEEN))
	       (GO L))		;NOTHING WITH CASTLES FOR THE TIME BEING
	      ((EQ CODE '=Q)
	       (SETQ TWN (GET 'QUEEN 'TYPE-WOOD-NUMBER)))
	      ((EQ CODE '=R)
	       (SETQ TWN (GET 'ROOK 'TYPE-WOOD-NUMBER)))
	      ((EQ CODE '=B)
	       (SETQ TWN (GET 'BISHOP 'TYPE-WOOD-NUMBER)))
	      ((EQ CODE '=N)
	       (SETQ TWN (GET 'KNIGHT 'TYPE-WOOD-NUMBER)))
	      (T (ERROR CODE "BAD CODE")))
	(AS-1 (CONS (LIST 'MOVES-TO-SQUARE SPECIAL-MOVE-INDEX)
		    (AR-1 SPECIAL-BOARD-KEYS-ARRAY CURRENT-LOCATION))
	      SPECIAL-BOARD-KEYS-ARRAY 
	      CURRENT-LOCATION)
	(FUNCALL (AR-1 C-A-DISPATCH TWN)
		 (FUNCTION C-STORE-ATTACK-KEY)
		 CURRENT-LOCATION)
	(SETQ SPECIAL-MOVE-INDEX (+ SPECIAL-MOVE-INDEX C-MVL-NQS))
	(GO L)
))

(DEFUN C-STORE-ATTACK-KEY (SQ &OPTIONAL DIR MODE)
       (COND ((NOT (ZEROP (AR-1 (AR-1 C-SQUARE-PIECE-ATTACKS-ARRAY SQ) CURRENT-PIECE)))
	      (AS-1 (CONS (LIST 'HOLDS-ATTACK-ON-SQUARE SPECIAL-MOVE-INDEX)  ;HOLDING ATTACK
			  (AR-1 SPECIAL-BOARD-KEYS-ARRAY SQ))
		    SPECIAL-BOARD-KEYS-ARRAY 
		    SQ))
	     (T (AS-1 (CONS (LIST 'ATTACKS-SQUARE SPECIAL-MOVE-INDEX)     ;FRESH ATTACK
			    (AR-1 SPECIAL-BOARD-KEYS-ARRAY SQ))
		      SPECIAL-BOARD-KEYS-ARRAY 
		      SQ))))
