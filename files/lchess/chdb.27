;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LCHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

(DECLARE (SPECIAL KING-SAFETY-DATA-BASE CENTER-KEY-DATA-BASE))

;A CHESS DATA BASE CONSISTS OF A LOCATING KEY, 
; AND SOME NUMBER OF PAIRS (PATTERN -> RESULT).
;  THE LOCATING-KEY IS A FUNCTION THAT IS TAKES AS ARGUMENT A SIDE
; (BLACK OR WHITE),
; ALTHO IT MAY REFERENCE THE BOARD AND/OR OTHER AVAILABLE SYSTEM WIDE
; DATA BASES.  THE LOCATING-KEY RETURNS A BASE SQUARE.
; A TYPICAL LOCATING-KEY FUNCTION MIGHT BE "THE SQUARE MY KING IS ON".
;  A PATTERN IS A TWO-DIMENSIONAL GROUP OF PREDICATES, EACH OF WHICH IS DEFINED
; GIVEN A SQUARE AND A SIDE AS ARGUMENT (THEY ALSO MAY REFERENCE SYSTEM DATA BASES).
; THE PATTERN IS SAID TO MATCH IF ALL OF ITS PREDICATES RETURN TRUE,
; WHEN EVALUATED RELATIVE TO THE CURRENT VALUE OF THE LOCATING-KEY.
; RANKS ARE FIDDLED TO REFLECT THE SIDE TO MOVE.  IN SOME CASES, IT MAY
; BE DESIRABLE TO ALLOW AUTOMATIC REFLECTION FILEWISE, HOWEVER THIS IS NOT
; PROVIDED INITIALLY.  (ACTUALLY, ITS PROBABLY BETTER JUST TO ENTER THE
; FROB TWICE, IF DESIRED).
;  PATTERNS CAN EXIST IN ANY OF SEVERAL PROGRAM-CONVERTIBLE-BETWEEN
; FORMS.  THE BASIC FORM IS A LIST OF LISTS.  THE OUTERMOST LIST REPRESENTS
; RANKS, AND THE INNER LIST FILES WITHIN THE RANK.  EACH ELEMENT CAN BE A
; SYMBOL OR A LIST, IN WHICH CASE THE AND OF ALL THE PREDICATES IS
; REQUIRED.  IF A SYMBOL HAS A CHDB-PREDICATE PROPERTY, THAT FUNCTION IS
; CALLED, OTHERWISE THE SYMBOL ITSELF.  THE SPECIAL SYMBOL KK INDICATES THE
; POSITION OF THE KEY, AND IS USED TO ORIENT THE OTHER SYMBOLS.

;
;  (  ( OP OP OP)     -> TO THE KING-SIDE   DOWN IS TOWARD OUR SIDE OF BOARD
;     ( CS KK --) )   
;

(DEFSTRUCT (CHDB :ARRAY-LEADER :NAMED (:SIZE-MACRO CHDB-ARRAY-LEADER-SIZE))
           CHDB-FILL-POINTER 
           CHDB-NAME 
           CHDB-KEY-FUNCTION 
)

(DEFUN CHDB-CREATE-DATA-BASE (NAME KEY-FUNCTION INITIAL-SIZE &AUX CHDB)
       (SETQ CHDB (MAKE-ARRAY NIL ART-Q INITIAL-SIZE NIL 
                              (CHDB-ARRAY-LEADER-SIZE) NIL 'CHDB))
       (SETF (CHDB-FILL-POINTER CHDB) 0)
       (SETF (CHDB-NAME CHDB) NAME)
       (SETF (CHDB-KEY-FUNCTION CHDB) KEY-FUNCTION)
       CHDB
)

(DEFUN CHDB-MATCH (CHDB SIDE &OPTIONAL BASE-SQUARE)
  (PROG (IDX LIM RANK-DIR 
         ENT LOCAL-BASE-SQUARE ENT-VALUE RANK-LIST RANK-DIST FILE-LIST FILE-DIST 
         SQ-ENT)
        (SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH CHDB))
	(SETQ RANK-DIR (COND ((ZEROP SIDE) (MINUS BOARD-WIDTH))  ;FOR WHITE, AS WE STEP DOWN,
			     (T BOARD-WIDTH)))    ;WE ARE STEPPING BACK
	(SETQ BASE-SQUARE (FUNCALL (CHDB-KEY-FUNCTION CHDB) SIDE BASE-SQUARE))
    L1  (COND ((NOT (< IDX LIM))
               (RETURN NIL)))
        (SETQ ENT (AR-1 CHDB IDX) 
	      LOCAL-BASE-SQUARE (+ BASE-SQUARE 
                                   (* (CAR ENT) RANK-DIR)
                                   (CADR ENT)))
        (SETQ ENT-VALUE (CADDR ENT))
        (SETQ RANK-LIST (CADDDR ENT) RANK-DIST 0)
    L2  (COND ((NULL RANK-LIST)
               (RETURN ENT-VALUE)))      ;MATCHED!
        (SETQ FILE-LIST (CAR RANK-LIST) FILE-DIST 0)
    L3  (COND ((NULL FILE-LIST) (GO E2))      ;THAT RANK OK
              ((NULL (SETQ SQ-ENT (CAR FILE-LIST)))
               (GO E3))
              ((ATOM SQ-ENT)
               (COND ((NULL (FUNCALL (COND ((GET SQ-ENT 'CHDB-PREDICATE)) (T SQ-ENT))
                                     (+ LOCAL-BASE-SQUARE (* RANK-DIST RANK-DIR) FILE-DIST)
                                     SIDE))
                      (GO E1))         ;THAT ONE FAILED
                     (T (GO E3)))))     ;THAT ONE OK
    L4  (COND ((NULL (FUNCALL (COND ((GET (CAR SQ-ENT) 'CHDB-PREDICATE)) (T SQ-ENT))
                              (+ LOCAL-BASE-SQUARE (* RANK-DIST RANK-DIR) FILE-DIST)
                              SIDE))
               (GO E1))         ;THAT ONE FAILED
              ((SETQ SQ-ENT (CDR SQ-ENT))
                (GO L4)))
    E3  (SETQ FILE-LIST (CDR FILE-LIST))
        (SETQ FILE-DIST (1+ FILE-DIST))
        (GO L3)
    E2  (SETQ RANK-LIST (CDR RANK-LIST))
        (SETQ RANK-DIST (1+ RANK-DIST))
        (GO L2)
    E1  (SETQ IDX (1+ IDX))
        (GO L1)
))

(DEFUN CHDB-ENTER (CHDB PATTERN VALUE)
  (PROG (RANK-LIST RANK-DIST FILE-LIST FILE-DIST 
         SQ-ENT ENT)
        (SETQ RANK-LIST PATTERN RANK-DIST 0)
    L1  (COND ((NULL RANK-LIST)
               (ERROR PATTERN "CANT FIND KK")))
        (SETQ FILE-LIST (CAR RANK-LIST) FILE-DIST 0)
    L2  (COND ((NULL FILE-LIST) (GO E1))     ;NOT ON THAT RANK
              ((ATOM (SETQ SQ-ENT (CAR FILE-LIST)))
               (COND ((EQ SQ-ENT 'KK)
                      (GO E0))               ;FOUND IT
                     (T (GO E2)))))
    L3  (COND ((EQ (CAR SQ-ENT) 'KK)
               (GO E0))
              ((SETQ SQ-ENT (CDR SQ-ENT))
               (GO L3)))
    E2  (SETQ FILE-LIST (CDR FILE-LIST))
        (SETQ FILE-DIST (1+ FILE-DIST))
        (GO L2)
    E1  (SETQ RANK-LIST (CDR RANK-LIST))
        (SETQ RANK-DIST (1+ RANK-DIST))
        (GO L1)
    E0  (SETQ ENT (LIST (MINUS RANK-DIST)
                        (MINUS FILE-DIST)
                        VALUE 
                        PATTERN))
    LX  (ARRAY-PUSH-AND-EXPAND CHDB ENT)
        (RETURN T)
))

(DEFUN CHDB-DUMP (CHDB)
  (PROG (IDX LIM ENT)
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH CHDB))
     L	(COND ((NOT (< IDX LIM)) (RETURN T)))
     	(SETQ ENT (AR-1 CHDB IDX))
	(FORMAT T "VALUE ~S KEY-RANK ~S KEY-FILE ~S ~%"
		(CADDR ENT) (CAR ENT) (CADR ENT))
	(DO LS (CADDDR ENT) (CDR LS) (NULL LS)
	    (FORMAT T "    ~S~%" (CAR LS)))
	(SETQ IDX (1+ IDX))
	(GO L)
))

(DEFUN CHDB-KEY-OUR-KING (SIDE SQ)
  (COND (SQ)
	(T (AR-1 PIECE-ARRAY (+ SIDE WK)))))

(DEFUN CHDB-KEY-WK4 (SIDE SQ)
       WK4)

(DEFPROP WP CHDBP-WP CHDB-PREDICATE)

(DEFUN CHDBP-WP (SQ SIDE &AUX SQC)
   (AND (< (SETQ SQC (AR-1 BOARD-ARRAY SQ))
	   PIECE-ARRAY-SIZE)
	(EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
		  SQC)
	    'WHITE-PAWN)))

(DEFPROP BP CHDBP-BP CHDB-PREDICATE)

(DEFUN CHDBP-BP (SQ SIDE &AUX SQC)
   (AND (< (SETQ SQC (AR-1 BOARD-ARRAY SQ))
	   PIECE-ARRAY-SIZE)
	(EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
		  SQC)
	    'BLACK-PAWN)))

(DEFPROP OP CHDBP-OP CHDB-PREDICATE)

(DEFUN CHDBP-OP (SQ SIDE &AUX SQC)
   (AND (< (SETQ SQC (AR-1 BOARD-ARRAY SQ))
	   PIECE-ARRAY-SIZE)
	(COND ((ZEROP SIDE)
	       (EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
			 SQC)
		   'WHITE-PAWN))
	      (T (EQ (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
			   SQC)
		     'BLACK-PAWN)))))

(DEFPROP EB CHDBP-EB CHDB-PREDICATE)

(DEFUN CHDBP-EB (SQ SIDE)
       (= (AR-1 BOARD-ARRAY SQ)
	  SQUARE-OFF-BOARD))

(DEFPROP -- CHDBP--- CHDB-PREDICATE)

(DEFUN CHDBP--- (SQ SIDE)
       (= (AR-1 BOARD-ARRAY SQ)
	  SQUARE-VACANT))

(DEFPROP XX CHDBP-XX CHDB-PREDICATE)
(DEFPROP KK CHDBP-XX CHDB-PREDICATE)

(DEFUN CHDBP-XX (SQ SIDE)
       T)




(DEFUN CHDB-TEST NIL 
       (SETQ KING-SAFETY-DATA-BASE 
	     (CHDB-CREATE-DATA-BASE 'KING-SAFETY (FUNCTION CHDB-KEY-OUR-KING) #o40))
       (CHDB-ENTER KING-SAFETY-DATA-BASE 
		   '(  (OP OP OP EB)
		       (XX KK) ) 'PRISTINE-K-CASTLED)
       (CHDB-ENTER KING-SAFETY-DATA-BASE 
		   '(  (OP OP OP)
		       (XX KK) ) 'THREE-RIGHT-IN-FRONT)
       (CHDB-ENTER KING-SAFETY-DATA-BASE 
		   '(  (OP OP)
		       (KK)  )   'TWO-RIGHT-IN-FRONT)
       
)

(SETQ CENTER-KEY-LIST '(
  (    (BP)
       (WP KK)  )    Q-PAWN-RAM 
  (    (BP)
       (XX BP)
       (XX (WP KK) ) )  SICILIAN-RAM 
  (    (BP)
       (WP KK)   )    K-PAWN-RAM 
  (    (BP)
     ()
       (XX  (WP KK) ) )  SPANISH-JUMP 
  ((BP)
   ()
   (XX WP KK) )  CARO-KANN-JUMP

	))