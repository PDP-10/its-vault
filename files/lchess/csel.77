;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

;INFO-REQUIREMENTS IN A POSITION:
;  When presented with a position to examine, we usually require less than
;the ultimate chess truth about the position (even could this be produced).
;Alpha-beta is the most direct example;  we only need to show the value is
;more (or less) than a certain amount, etc.  The presence of finite resources
;supplies an additional strong reason for info-requirements.  It is quite
;unrealistic to demand ultimate chess truth from a SETD 2, etc!
;  In order to ultimately form a "WELL-ROUNDED" search, (not to mention confront
;realistically what will happen anyway), the info-requirements should be highest
;at the base of the tree, tapering off toward the leaves, etc.  In practice, we
;distinguish the following levels of info-requirement:
; TATICAL-MATERIAL  (CHEOPS SETD)
; TATICAL-POSITIONAL (OCM)
; TATICAL-FORCING    (CM, TYPE)
; STRATEGIC-FOLLOWING
; STRATEGIC-ORIGINATING

;OPTIONS-STACK
;  The options-stack is a dynamically ordered list.  An option basically consists
;of a MOVE and an "IDEA".  The selector compares the info-requirements,
;the options, and the results-in-hand to determine whether to pursue the next
;option, etc.

; N-PLIES FORCING
; N-PLIES POSITIONAL
; N-PLIES TATICAL

;THE SELECTOR ...

;  The basic purpose of the selector is to propose moves to be included in the
;lchess search tree.  In the past, this has been done by assigning each move a
;"PLAUSIBILITY", sorting on those, and taking the highest, etc.  However, this
;is not ideal for the following reasons:
;   (1) ARBITRARY JUDGEMENTS MUST BE MADE WHEN COMBINING FACTORS OF BASICALLY
;	DIFFERENT SORTS. (APPLES AND ORANGES ETC).
;   (2) THE INFORMATION AS TO WHY THE MOVE IS GOOD (IE WHAT IT MIGHT DO) IS BASICALLY
;	LOST.  THERE IS NO GOOD WAY TO LATER ANSWER QUESTIONS AS "DOES THIS MOVE
;	THREATEN TO WIN A PIECE?"
;   (3) IT DOES NOT LEND ITSELF TO INFORMATION PASSING BETWEEN LEVELS OF THE TREE.
;	(SEE BELOW..)

;To help solve these problems, the selector in lchess works by KEYS.
;    A KEY is a group of related functionals which can be called upon to propose
;moves having a specific feature or purpose.  In addition to returning such
;moves, the information can returned saying how "STRONG" a feature
;has been found for the given move, whether there are any other moves with
;similar "STRENGTH", or that there are no more moves with such a feature.
;A KEY operates through three levels of routines,  the INITIATOR, the CLOSURE,
;and one or more MESSAGE-SERVERS.  
;   The INITIATOR is found in the function cell of the key-name symbol.
;The INITIATOR is a function of one argument, the C-SEARCH-STATUS STRUCTURE.
;During the PRESCAN PHASE, the SELECTOR maps down C-ALL-KEYS-LIST, invoking the
;INITIATOR for each key.  The INITIATOR usually performs checks to see whether
;this key is applicable to the current position, if not, it returns nil and thats
;all.  If the key is applicable, the INITIATOR creates a CLOSURE, and (usually)
;initializes it by calling it with an initializing message.  This CLOSURE is
;then returned to the SELECTOR.  The SELECTOR conses it with the key-name symbol
;and makes the result an element on C-ACTIVE-KEYS-ALIST.
;   The CLOSURES on C-ACTIVE-KEYS-ALIST are called in message passing style.
;Usually, after decoding the message, the CLOSURE calls an appropriate message
;server routine (this is just for modularity and debugging convenence.  The required
;action can be performed entirely within the closure if it is short, etc.).
;   CLOSURES on C-ACTIVE-KEYS-ALIST are expected to respond to several kinds
;of messages: some of which are system-wide conventions and others of which may be
;specific to that particular key.  An important feature is the ability to
;pass messages to a closure from "ELSEWHERE" on the mini-max tree.  Ie a CLOSURE
;can determine if its same key was evoked 2 PLIES back, and if so, send that 
;CLOSURE a message, etc.
;  BRIEFLY THE SYSTEM-WIDE MESSAGES TO KEY-CLOSURES ARE:

;   PRESCAN 
;     RETURNS BID.
;   SELECT <URGENCY> <GENERAL-OBJECTIVE>
;     RETURNS MOVE-SELECTED AND LEVEL-OF-ENTHUSIASM
;   NOW-INVESTIGATING <MOVE-LIST-INDEX>
;     RETURNS KEYS TO BE PASSED DOWN
;   ANALYSE-RESULTS 

;   The KEY-ROUTINE  may well called several times within the selection at
;a single ply level.   Thus, it is normally a closure, closed freshly at
;each board position.  As well as a move, the key routine can return
;other keys to be used at lower levels after this move has been played.
;Thus we have C-KEY-CRADLE-TRAP, C-KEY-CRADLE-REPLY-1, C-KEY-CRADLE-TRAP-2, ETC.
;As well as saving computation at the lower level, doing things this way
;helps assure that the "THREAD" will be followed to its logical conclusion.

;  THE BASIC OPERATION OF SELECT IS AS FOLLOWS:

;  First a C-ACTIVE-KEYS-ALIST is formed.  This is done by proceeding down
;C-ALL-KEYS-LIST, funcalling each, thus invoking the KEY-INITIATOR. 
;The KEY-INITIATOR either returns
;nil if the key is clearly not applicable to the current situation,
;or a functional object (usually a closure) for inclusion on C-ACTIVE-KEYS-ALIST.
;C-ACTIVE-KEYS-ALIST is actually an association list (<KEY-SYMBOL> . <KEY-CLOSURE>).
;<KEY-SYMBOL> is never "USED" again, but it serves as a "NAME" in locating
;the desired closure.
;  One "PROBLEM" is that the same move may be proposed by two or more key-routines.
;The problem is that since the action at the lower level is dependant, to some extent,
;on which key-routine(s) were matched at the current level, the correct action might
;not take place at the lower level, even though the move was selected and investigated.
;  To help reduce the incidence of this problem, at least, a preselect phase is
;gone thru. This consists of going down the ACTIVE-KEYS-LIST and giving each key
;routine an opportunity to associate itself with a move or move(s), if it wants to.
;Whenever that move is later selected to be investigated for any reason,
;the key closure will receive a now-investigating message just before
;the move is played and the main mini-max recursion takes place.
;  Also, during the preselect, the selector collects information as to the "BIDS"
;of the key-routines.  The selector is then responsible for activating a
;particular key-routine, investigating what it proposes, etc, or deciding enough
;searching has been done and returning.  Since, however, we may wish to do
;additional searching at a later time, the selector is itself a closure which
;can be re-entered in that case.

;MAKE SELECTOR-CLOSURE FOR CURRENT POSITION
(DEFUN C-INITIATE-SELECTOR (&AUX SS MOVE-LIST LIM)
  (COND ((SETQ SS (GET C-CURRENT-POSITION 'C-SEARCH-STATUS))  ;REUSE PREVIOUS C-SEARCH-STATUS
	 (SETF (C-SEARCH-BSF SS) NIL)			    ;BLOCK
	 (SETF (C-SEARCH-BSF-VALUE SS) NIL))
	(T 
	 (SETQ SS (MAKE-ARRAY NIL 'ART-Q 0 NIL 
			      (C-SEARCH-STATUS-ARRAY-LEADER-SIZE)
			      NIL 'C-SEARCH-STATUS))
	 (SETF (C-SEARCH-POSITION SS) C-CURRENT-POSITION)
	 (SETF (C-SEARCH-SIDE SS) (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY)))
	 (PUTPROP C-CURRENT-POSITION SS 'C-SEARCH-STATUS)))
  (COND ((NULL (SETQ MOVE-LIST (GET C-CURRENT-POSITION 'MOVE-LIST)))
	 (SETQ MOVE-LIST (C-CREATE-MOVE-LIST))))
  (SETQ LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
  (DO IDX 0 (+ IDX C-MVL-NQS) (>= IDX LIM)  ;CLEAR OUT STATUS OF CURRENT SEARCH
      (AS-1 NIL MOVE-LIST (+ IDX C-MVL-SEARCH-CHEOPS-VALUE))
      (AS-1 NIL MOVE-LIST (+ IDX C-MVL-SEARCH-POSITIONAL-VALUE))
      (AS-1 NIL MOVE-LIST (+ IDX C-MVL-SEARCH-RESULTS))
      (AS-1 NIL MOVE-LIST (+ IDX C-MVL-SEARCH-KEYS-PASSED-DOWN))
      (AS-1 NIL MOVE-LIST (+ IDX C-MVL-ASSOCIATED-KEYS)))
  (SETF (C-SEARCH-SELECTOR-CLOSURE SS)
	(CLOSED-FUNCTIONAL NIL 
			   (C-SELECT-BEST-BID C-SELECT-BEST-BIDDER 
			    C-ACTIVE-KEYS-ALIST)
			   ('TRIGGER-PRESCAN SS)
			   (FUNCTION C-SELECTOR-FUNCTION))))

;MESSAGES TO C-SELECTOR-FUNCTION:
;  PRESCAN  COMPUTE C-ACTIVE-KEYS-ALIST. SET UP C-SELECT-BEST-BID AND C-SELECT-BEST-BIDDER.
;  SELECT <URGENCY> <GENERAL-OBJECTIVE>
;	    <URGENCY> CAN BE ONE OF  URGENT STRONG NORMAL MATERIALLY-STABLE 
;				     POSITIONALLY-STABLE NEAR-DESPERATION DESPERATION
;		    IF NO MOVE IS AVAILABLE WITH <URGENCY> SORT OF STRENGTH, A NULL
;		    SELECTION WILL BE RETURNNED.
;	    <GENERAL-OBJECTIVE> CAN BE ONE OF  DEVELOPING-MOVE, ATTACKING-MOVE, 
;					       POSITIONAL-MOVE, MATERIALISTIC-MOVE
;		    THE <GENERAL-OBJECTIVE> WILL BE TAKEN INTO ACCOUNT BY THE SELECTOR
;		    IF CONVENIENT AND AS IT SEES FIT.
(DEFUN C-SELECTOR-FUNCTION (MSG &REST REST)
       (COND ((EQ MSG 'TRIGGER-PRESCAN)
	      (C-SEL-SERVE-PRESCAN (CAR REST)))  ;<C-SEARCH-STATUS STRUCTURE>
	     ((EQ MSG 'PERFORM-SELECT)
	      (C-SEL-SERVE-SELECT (CAR REST) (CADR REST)))  ;<URGENCY> <GENERAL-OBJECTIVE>
))

(DEFUN C-SEL-SERVE-SELECT (URG GOBJ)
)

(DEFUN C-SEL-SERVE-PRESCAN (SS &AUX KEY BID)
  (DO KEYL C-ALL-KEYS-LIST (CDR KEYL) (NULL KEYL)
      (COND ((FBOUNDP (CAR KEYL))
	     (MULTIPLE-VALUE (KEY BID) (FUNCALL (CAR KEYL) SS))
	     (COND (KEY
		    (SETQ C-ACTIVE-KEYS-ALIST (CONS (CONS (CAR KEYL) KEY)
						    C-ACTIVE-KEYS-ALIST))
		    (COND ((C-BETTER-BID-P BID C-SELECT-BEST-BID)
			   (SETQ C-SELECT-BEST-BID BID)
			   (SETQ C-SELECT-BEST-BIDDER KEY))))))))
  (SETF (C-SEARCH-ACTIVE-KEYS-ALIST SS)
	C-ACTIVE-KEYS-ALIST))

(DEFUN C-BETTER-BID-P (NEW-BID OLD-BEST)
       (COND ((NULL OLD-BEST) T)
	     ((NULL NEW-BID) NIL)
	     ((EQ NEW-BID OLD-BEST) NIL)
	     (T NIL)))	  ;UNFINISHED ...

(DEFUN C-INVOKE-KEY-CLOSURE (KEY-SYMBOL PLIES-BACK MESSAGE)
  (PROG (POSITION-SYMBOL GAME-INDEX SS TEM)
	(COND ((ZEROP PLIES-BACK)
	       (SETQ POSITION-SYMBOL C-CURRENT-POSITION)
	       (GO T1)))
	(SETQ GAME-INDEX (- (GAME-FILL-POINTER GAME-ARRAY)
			    (* (1+ PLIES-BACK) C-GAME-NQS)))
    	(COND ((NOT (> GAME-INDEX 0))
	       (RETURN NIL)))		;WORLD DOESNT GO BACK THAT FAR
	(SETQ POSITION-SYMBOL (AR-1 GAME-ARRAY (+ GAME-INDEX C-GAME-CURRENT-POSITION)))
    T1	(COND ((OR (NULL (SETQ SS (GET POSITION-SYMBOL 'C-SEARCH-STATUS)))
		   (NULL (SETQ TEM (ASSQ KEY-SYMBOL (C-SEARCH-ACTIVE-KEYS-ALIST SS)))))
	       (RETURN NIL)))
    	(RETURN (APPLY (CDR TEM) MESSAGE))
))

;FOR EFFICIENCY, KEY S ALL OF WHICH REQUIRE A SINGLE FEATURE TO ACTIVATE MAY
; BE GROUPPED ON A SEPARATE KEY-LIST.  FOR EXAMPLE C-I-HAVE-QUEEN-KEY-LIST,
; C-OPENING-KEY-LIST, ETC.  ALSO, KEY-LISTS MAY BE ASSOCIATED WITH MEDIUM RANGE
; GOALS OR PROTOCOL S.  FOR EXAMPLE C-SICILYON-OPENING-KEY-LIST, C-K-AND-P-ENDGAME-KEY-LIST,
; ETC.

(SETQ C-ALL-KEYS-LIST '( C-KEY-CHEOPS C-KEY-SIMPLE-POSITIONALITY C-KEY-CASTLE 
     C-KEY-TATICAL-ATTACK  C-KEY-STOP-CHEOPS-THREAT 

     C-KEY-DEVELOP-PROBLEM-PIECE 

     C-KEY-FORK-TRICK 

     C-KEY-CRADLE-TRAP 

     C-KEY-TRAP-B-AT-R2 

     C-KEY-SMOTHERED-MATE 

     C-KEY-SAC-CAPTURE-DEFENDED-ONLY-BY-K   ;K TAKES, MUMBLE-MUMBLE CHECK, K-MOVES,
					    ; MUMBLE TAKES SOMETHING.
        ;UNCASTLED-K
           ;BXKBP/B7
              ;Q-OUT
	      ;N-N5+
     		;ANALYSE-CHEOPS-RESULTS
;HIS-K-WALKING-IN-CENTER
  ;COMPENSATE-CHEOPS-VALUE
))

;C-KEY- CLOSURE S CAN COMMUNICATE WITH OTHER C-KEY- CLOSURES AT THE SAME OR
; (MOST LIKELY) DIFFERENT LEVELS OF THE GAME TREE.  TO DO THIS, THE GIVEN CLOSURE
; MUST FIRST DETERMINE IF THE INTENDED TARGET CLOSURE IN FACT EXISTS.
; THIS IS DONE AS FOLLOWS:
;  (C-FIND-KEY-CLOSURE <N> NAME)  RETURNS THE CLOSURE GENERATED FOR NAME <N> PLIES
;    BACK IN THE TREE, OR NIL IF THERE IS NONE.

;KEEPING TRACK OF THE PROGRESS OF THE SEARCH ITSELF.
;  A DATA STRUCTURE IS REQUIRED TO REMEMBER WHICH MOVES HAVE BEEN LOOKED AT
;(INCLUDING WHICH KEYS WERE PASSED DOWN), WHICH IS THE BEST-SO-FAR, ETC.
;THIS STRUCTURE ALSO HOLDS THE SELECT-CLOSURE FOR THIS LEVEL, ETC.

(DEFUN C-KEY-CHEOPS (C-KEY-SEARCH-STATUS) 
  (CLOSED-FUNCTIONAL (C-KEY-SEARCH-STATUS)
		     (C-KEY-CHEOPS-RESULTS C-KEY-CHEOPS-SELECT-INDEX C-KEY-CHEOPS-HISTOGRAM 
		      C-KEY-CHEOPS-MOVE-LIST C-KEY-CHEOPS-MOVE-INDEX)
		     ('INITIALIZE)
		     (FUNCTION C-KEY-CHEOPS-CF)))

;THIS FUNCTION RUNS AS PART OF A CLOSURE CREATED ABOVE
(DEFUN C-KEY-CHEOPS-CF (MSG &REST REST)
   (COND ((EQ MSG 'SELECT)
	  (C-KEY-CHEOPS-SERVE-SELECT (CAR REST)))  ;IGNORE OBJECTIVE
	 ((EQ MSG 'NOW-INVESTIGATING)		   ;MOVE SELECTED, REMOVE FROM HISTOGRAM
	  (C-KEY-CHEOPS-SERVE-NI (CAR REST)))	   ;MOVE-INDEX ABOUT TO LOOK AT
	 ((EQ MSG 'INITIALIZE)
	  (C-KEY-CHEOPS-SERVE-INITIALIZE))
	 ((EQ MSG 'CHEOPS-HISTOGRAM)
	  C-KEY-CHEOPS-HISTOGRAM))

)

;(DEFUN C-KEY-CHEOPS-SERVE-NI (NI-MOVE-INDEX)
;  (PROG (TEM HG LP IDX LIM)
;	(COND ((NULL C-KEY-CHEOPS-HISTOGRAM)
;	       (ERROR "HISTOGRAM-EXHAUSTED"))
;	      ((NOT (= NI-MOVE-INDEX C-KEY-CHEOPS-MOVE-INDEX))
;	       (GO S1))	;NOT THE ONE I PROPOSED, SEARCH FOR IT IN CHEOPS-RESULTS
;	;TAKING THEM IN ORDER SO JUST DECREMENT HEAD OF THE LIST.
;	      ((= 1 (SETQ TEM (CADAR C-KEY-CHEOPS-HISTOGRAM)))
;	       (SETQ C-KEY-CHEOPS-HISTOGRAM (CDR C-KEY-CHEOPS-HISTOGRAM))) ;LAST IN CATEGORY
;	      (T (RPLACA (CDAR C-KEY-CHEOPS-HISTOGRAM)
;			 (1- TEM))))
;	(RETURN T)
;    S1	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH C-KEY-CHEOPS-RESULTS))
;    L0  (COND ((NOT (< IDX LIM))
;	       (ERROR "FAILED-TO-FIND-CHEOPS-RESULTS" NI-MOVE-INDEX))
;	      ((= NI-MOVE-INDEX 
;		  (AR-1 C-KEY-CHEOPS-RESULTS (+ IDX C-CH-MOVE-IDX)))
;	       (SETQ HG (AR-1 C-KEY-CHEOPS-RESULTS (+ IDX C-CH-RESULT-VALUE)))
;	       (GO E0)))
;    	(SETQ IDX (+ IDX C-CH-NQS))
;	(GO L0)
;    E0	(SETQ LP C-KEY-CHEOPS-HISTOGRAM)
;    L1  (COND ((NULL LP)
;	       (ERROR "FAILED-TO-FIND-HISTOGRAM-GROUP" NI-MOVE-INDEX))
;	      ((= HG (CAAR LP))
;	       (COND ((= 1 (SETQ TEM (CADAR LP)))
;		      (SETQ C-KEY-CHEOPS-HISTOGRAM 
;			    (DELQ (CAR LP) C-KEY-CHEOPS-HISTOGRAM 1)))
;		     (T (RPLACA (CDAR LP) (1- TEM))))
;	       (GO E1)))
;	(SETQ LP (CDR LP))
;	(GO L1)
;  E1	(RETURN NIL)
;))

;(DEFUN C-KEY-CHEOPS-SERVE-SELECT (URG)
;  (PROG ()
;    L	(COND ((NOT (< C-KEY-CHEOPS-SELECT-INDEX
;		       (ARRAY-ACTIVE-LENGTH C-KEY-CHEOPS-RESULTS)))
;	       (RETURN NIL)))
;    	(SETQ C-KEY-CHEOPS-MOVE-INDEX (AR-1 C-KEY-CHEOPS-RESULTS (+ C-KEY-CHEOPS-SELECT-INDEX 
;								    C-CH-MOVE-IDX)))
;	(SETQ C-KEY-CHEOPS-SELECT-INDEX (+ C-KEY-CHEOPS-SELECT-INDEX 
;					   C-CH-NQS))
;	(COND ((NULL (AR-1 C-KEY-CHEOPS-MOVE-LIST C-KEY-CHEOPS-MOVE-INDEX))
;	       (RETURN C-KEY-CHEOPS-MOVE-INDEX)))	;THAT MOVE NOT LOOKED AT YET
;	(GO L)))

;(DEFUN C-KEY-CHEOPS-SERVE-INITIALIZE NIL 
;  (PROG (IDX LIM N-POS N-NON-NEG TEM 
;	     VAL VALC V P 
;	     N-ASSOC)
;	(SETQ C-KEY-CHEOPS-MOVE-LIST (GET C-CURRENT-POSITION 'MOVE-LIST))
;	(SETQ C-KEY-CHEOPS-RESULTS (CHEOPS-COMPUTE-RESULTS 3))
;	(SETQ C-KEY-CHEOPS-SELECT-INDEX 0)	;INITIALIZE THAT..
;	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH C-KEY-CHEOPS-RESULTS))
;	(SETQ P (VALUE-CELL-LOCATION 'V))
;     L0	(COND ((NOT (< IDX LIM))
;	       (GO E0)))
;	(SETQ VAL (AR-1 C-KEY-CHEOPS-RESULTS (+ IDX C-CH-RESULT-VALUE)))
;	(SETQ VALC 1)
;     L1 (SETQ IDX (+ IDX C-CH-NQS))
;	(COND ((OR (NOT (< IDX LIM))
;		   (NOT (= VAL (AR-1 C-KEY-CHEOPS-RESULTS (+ IDX C-CH-RESULT-VALUE)))))
;	       (GO E1)))
;	(SETQ VALC (1+ VALC))
;	(GO L1)
;     E1 (RPLACD P (SETQ P (NCONS (LIST VALC VAL))))
;	(GO L0)
;     E0 (SETQ C-KEY-CHEOPS-HISTOGRAM V)		;USE C-KEY-CHEOPS-HISTOGRAM DIRECTLY
;						;WHEN EXTERNAL-VALUE-CELL-LOCATION EXISTS.
;	(SETQ N-POS 0 N-NON-NEG 0)
;	(SETQ TEM C-KEY-CHEOPS-HISTOGRAM)
;     L2 (COND ((NULL TEM) (GO E2))
;	      ((> (CADAR TEM) 0)
;	       (SETQ N-POS (+ N-POS (CAAR TEM)))
;	       (SETQ N-NON-NEG (+ N-NON-NEG (CAAR TEM))))
;	      ((>= (CADAR TEM) 0)
;	       (SETQ N-NON-NEG (+ N-NON-NEG (CAAR TEM))))
;	      (T (GO E2)))
;	(SETQ TEM (CDR TEM))
;	(GO L2)
;     E2	(SETF (C-SEARCH-CHEOPS-POS-DELTA C-KEY-SEARCH-STATUS)
;	      N-POS)
;	(SETF (C-SEARCH-CHEOPS-NON-NEG-DELTA C-KEY-SEARCH-STATUS)
;	      N-NON-NEG)
;	(SETF (C-SEARCH-MOVE-TYPE C-KEY-SEARCH-STATUS)
;	      (COND ((> N-POS 3) 'AGRESSIVE)		;WE EVIDENTLY HAVE SOME MOVES TO
;							  ; WIN STUFF
;		    ((> N-NON-NEG 5) 'POSITIONAL)	;AT LEAST WE HAVE A FAIR RANGE
;							; THAT HOLD STUFF
;			    (T 'DEFENSIVE)))		  ;NEITHER OF THE ABOVE, EVIDENTLY
;							; THIS MOVE WILL BE LARGELY DICTATED
;							  ; BY TATICAL CONSIDERATIONS.
;;ASSOCIATE SELF WITH "OUTSTANDING" MOVES.
;; A MOVE IS "OUTSTANDING" IF (A) CHEOPS-DELTA IS POSITIVE OR (B) IT IS A MEMBER OF A 
;;HISTOGRAM-GROUP, SUCH THAT THE CUMULATIVE SUM OF HISTOGRAM-GROUP S, INCLUDING THE
;;GROUP THE MOVE IS A MEMBER, IS LESS THAN 6.
;	(SETQ N-ASSOC 0 TEM C-KEY-CHEOPS-HISTOGRAM)
;     L3	(COND ((OR (NULL TEM)
;		   (AND (NOT (> (CADAR TEM) 0))		;THIS GROUP NOT >
;			(NOT (< (+ N-ASSOC (CAAR TEM))  ;AND INCLUDING IT MAKES TOO MANY
;				6))))
;	       (GO E3)))
;     	(SETQ N-ASSOC (+ N-ASSOC (CADAR TEM)))  ;ASSOCIATE WITH THAT GROUP
;	(SETQ TEM (CDR TEM))
;	(GO L3)
;     E3	(SETQ IDX 0)
;     L4 (COND ((OR (NOT (< IDX LIM))
;		   (ZEROP N-ASSOC))
;	       (GO E4)))
;     	(AS-1 (CONS SELF (AR-1 C-KEY-CHEOPS-MOVE-LIST 
;			       (SETQ TEM (+ (AR-1 C-KEY-CHEOPS-RESULTS 
;						  (+ IDX C-CH-MOVE-IDX))
;					    C-MVL-ASSOCIATED-KEYS))))
;	      C-KEY-CHEOPS-MOVE-LIST 
;	      TEM)
;	(SETQ N-ASSOC (1- N-ASSOC))
;	(SETQ IDX (+ IDX C-CH-NQS))
;	(GO L4)
;    E4
;))  

;MOVE-SELECTION
;  CHEOPS  GENERAL-POSITIONALITY  KEYS
;GAME-OBJECTIVE
;SEARCH-OBJECTIVES  GET-REPRESENTATIVE-MATERIAL-VALUE
;		    GET-REPRESENTATIVE-POSITIONAL-VALUE (AS WELL)
;		    EVALUATE-CHANCES
;		    PLAY-MOVE

;SEARCH-RESOURCES  DEPTH-IN-TREE  AMOUNT-OF-BRANCHING-TO-NOW  ALLOCATION

;MANDATORY-KEY S
;ALTERNATING-CHARACTER OF OBJECTIVES..  IE
;  "WHITE" PLAYS JUST HIS MOVE,  "BLACK" TRIES EVERYTHING TO GET OUT OF IT.

;MATCHING "LANGUAGE"
;  COMPENSATING FOR SIDE
;  LAMBDA-BINDING

;"COMPREHENSION" OF CHEOPS RESULTS
; CHEOPS EVALUATION OF THREATS BY GIVING SAME SIDE ANOTHER MOVE.

(DEFUN C-SELECTOR-PROCEDURE (SEARCH-STRUCTURE 
			     COMPARISON-FUNCTION 
			     MIN-TO-BE-INTERESTING 
			     MIN-NEEDED-FOR-AB-CUT
			     PIECES-AS-THEY-STAND 
			     CHEOPS-HISTOGRAM 
			     HIS-CHEOPS-HISTOGRAM)
  (PROG (ATS-MAX ATS-MIN HAVE-MIN HAVE-MAX C-H-MAX)
	(COND ((NULL CHEOPS-HISTOGRAM))
	      (T (SETQ C-H-MAX (CADAR CHEOPS-HISTOGRAM))
		 (COND ((FUNCALL COMPARISON-FUNCTION C-H-MAX MIN-TO-BE-INTERESTING)
			(SETQ HAVE-MIN T)))
		 (COND ((FUNCALL COMPARISON-FUNCTION C-H-MAX MIN-NEEDED-FOR-AB-CUT)
			(SETQ HAVE-MAX T)))))
	(COND ((FUNCALL COMPARISON-FUNCTION PIECES-AS-THEY-STAND MIN-TO-BE-INTERESTING)
	       (SETQ ATS-MIN T)))
	(COND ((FUNCALL COMPARISON-FUNCTION PIECES-AS-THEY-STAND MIN-NEEDED-FOR-AB-CUT)
	       (SETQ ATS-MAX T)))
;A QUICK CHEOPS MOVE?
	(COND (HAVE-MAX (C-SELECT-CHEOPS)))
;SETUP KEY-CLOSURES
  ;POSITION-STRENGTHS
  ;POSITION-WEAKNESSES
	 ;MATERIAL-BASE-ESTABLISHED -> NIL
	 ;MATERIAL-BASE-ESTABLISHED-WITH-OK-MOVE -> NIL
   L     ;CHEOPS-MOVE OUTSTANDING? 
	 ;	-> SELECT-CHEOPS 
	 ;NEED ACTIVE MOVE? ->  CHEOPS-MOVE  ACTIVE-MOVE-FROM-KEYS
	 ;ATTACKING-MOVE? 
	 ;  -> INDICATED-IN-DATABASE?
	 ;  -> REPLY-TO-HIS-LAST? THAT INDICATED-IN-DATABASE?

))

;SUPER-BASICS
	 ;CHECK-HIM
	 ;  CHECKMATE
	 ;CHECK-US
	 ;CAPTURE-MATERIAL
	 ;DEFEND-ATTACKED-PCS
	 ;MOVE-ATTACKED-PCS
	 ;ATTACK
	 ;PLAY-PROMOTION

	 ;REPLY-TO-THREAT
	 ;  PIECE-ATTACKED
	 ;    MOVE-IT
	 ;    DEFEND-IT
	 ;    INTERPOSE
	 ;    CAPTURE ATTACKER

;PAWN-ADVANCING
	 ;ADVANCE-CENTER-PAWN
	 ;PAWN-TENSION?
	 ;   LIQUIDATE TENSION   RECORD RESULTS IN DATABASE
	 ;      EXCHANGE-PAWNS
	 ;      PUSH-PAST
	 ;PLAY-PAWN-BREAK  -> PAWN-TENSION T
	 ; PLAY-CENTER-PAWN-BREAK   -> TENSION-IN-CENTER-KEY T
	 ;PREPARE-PAWN-BREAK
	 ;CLEAR-WAY-FOR-PAWN-ADVANCE (IE MOVE OUR PCS FROM IN FRONT OF P)
	 ;CENTER-TENSION-LIQUIDATED?
	 ;  REGAIN-FOOTHOLD-IN-CENTER-WITH-P  (IE ADVANCE BP,ETC)
	 ;REINFORCE-CENTER
	 ;  WITH PIECE
	 ;  WITH PAWN-DEFENSE
	 ;RANGER-EXPANSION-WITH-P-R4

;POSTING-GENERAL
	 ;SIMPLE-DEVELOPING-MOVE
	 ;  TO A SAFE SQUARE?
	 ;  TO A SQUARE FREE OF HARASSMENT?
	 ;PREPARE DEVELOPMENT OF PROBLEM PIECE
	 ;  UNDEVELOPED B
	 ;    UNBLOCK-B-AT-B1-BY-REMOVING-PC-FROM-K2-OR-Q2

;POSTING-SPECIFIC
 ;  N
	 ;    IN HOLE
   	 ;OCCUPY-NEAR-CENTER-WITH-N
	 ;OCCUPY-CENTER-WITH-N
	 ;THREATEN-TO-OCCUPY-DEEP-CENTER-WITH-N
	 ;OCCUPY-DEEP-CENTER-WITH-N
	 ;RETREIVE-N-FROM-EDGE-OF-BOARD
	 ;  N-ESCAPE-FROM-R8
 ;  B
	 ;    BITING ON ROCK
	 ;FINACHETTO B
	 ;  RANGER-SIDE
	 ;  HOME-SIDE
	 ;DEFENSIVE-POSTURE-WITH-B
	 ;  K2-Q2
	 ;  K3-Q3
	 ;REDEPLOY-B-TO-EDGE-AFTER-ROOK-CENTRALIZED
	 ;  SEAL-CASTLED-K-POSITION-AT-KB1
	 ;ATTACKING-POSTURE-WITH-B
	 ;  N5
	 ;  B4
 ;  R
	 ;OCCUPY-OPEN-FILE-WITH-R
	 ;  HE-CAN-NOT-OPPOSE-WITH-HIS-R
	 ;OCCUPY-CENTRAL-FILE-WITH-R
	 ;OCCUPY-FILE-OPPOSING-HIS-K-WITH-R
	 ;DOUBLE-ROOKS
	 ;ROOK-LIFT
	 ;POST-ROOK-ON-7TH
	 ;ATTACK-P-FROM-REAR-WITH-R
 ;  Q
	 ;  POST-IN-OPENING
	 ;  Q-EXPEDITION
	 ;        ALONE
	 ;        WITH-HELP
	 ;    CHECKING-K
	 ;    ATTACKING-NP
	 ;      THREATENING TO TRAP ROOK
	 ;    GENERAL-HARRASMENT

;CONTROL-CENTER
	 ;TENSION-IN-CENTER?
	 ;   LIQUIDATE TENSION   RECORD RESULTS IN DATABASE

;KING-SAFETY
	 ;MOVE-KING
	 ;  CASTLE-MANUALLY
	 ;  OFF OPEN LINES
	 ;  K-FLEES
	 ;  POSITION-FOR-ENDGAME
	 ;  ENDGAME
	 ;CONTROL-SQUARE-NEAR-HIS-K

;ATTACK-KING-POSITION-WITH-PAWNS
	 ;INITIATE-PAWN-ATTACK-ON-CASTLED-K
	 ;	  OUR-HOME-PAWNS
	 ;	  OUR-RANGER-PAWNS
	 ;	  BEFORE-WE-CASTLE
	 ;  HIS-K-POSITION-WEAKENED
	 ;  CENTER-BLOCKADED 
	 ;  CENTER-SAFE?
	 ;  WE-HAVE-PREPONDERENCE-OF-PCS-ON-K-SIDE

;CASTLING
	 ;  MOVE-PIECES-IN-WAY
	 ;  HIS-ATTACKS-SQUARE-MAKING-IT-ILLEGAL
	 ;    INTERPOSE
	 ;    EXCHANGE-HIS-PC
	 ;CHECK-CAUSING-LOSS-OF-CASTLING-PRIVILEGE
	 ;EXCHANGE-CAUSING-LOSS-OF-CASTLING-PRIVILEGE
	 ;GENERAL POSITIONAL-MOVE LOOKED AT?
	 ;  -> WAS GENERAL-POSITIONAL GOAL ACHIEVED
	 ;       ->NO, WHY NOT OR TRY ANOTHER
	 ;

;INVITING-TARGETS
	 ;ATTACK-WEAK-PAWN
	 ;ATTACK-PINNED-PIECE
	 ;ATTACK-CONSTRAINED-PIECE
	 ;CHASE-EXPOSED-PIECE
	 ;  WITH-LESSOR-PIECE
	 ;  WITH-PAWN

;CREATE-WEAKNESS-IN-HIS-POSITION
	 ;FORCE-UNWANTED-ADVANCE-OF-P
	 ;  DISTURBING-CASTLED-K-POSITION
	 ;    CREATES-WEAKNESS
	 ;  BREAKING-UP-DUO
	 ;  NO-LONGER-PROTECTING-PC
	 ;  CREATES-WEAKNESS
	 ;    BACKWARD-P
	 ;    HANGING-P
	 ;BLOCKADE-HIS-PAWN-GROUP
	 ;REMOVE-BLOCKADER-FROM-OUR-PAWN-GROUP

	 ;CONSOLIDATE-POSITION-OF-ADVANCED-PIECE-WHICH-IS-EXPOSED-TO-P-CHASING
	 ;  BY-ATTACKING-CHASE-SQ-WITH-OUR-P, SO AS TO TRADE HIS.

	 ;PREVENT-MOVE (IE DENY SQUARE)
	 ;  PARTICULARILY-WITH-PAWN

;TATICAL-SHOTS
  ;CAPTURES

  ;OTHER
	 ;TATICAL-SHOTS
	 ;  PINS
	 ;  CONSTRAINTS
	 ;  RECAPTING-PC-HAS-STRONG-THREAT
	 ;  DISCOVERED-ATTACK
	 ;THREATEN-DISCOVERY
	 ;  THRU-PIECE
	 ;  THRU-PAWN-WHICH-MAY-ADVANCE
	 ;  THRU-PAWN-WHICH-MAY-BE-TRADED
	 ;PIN-HIS-PIECE
	 ;  ON EXPOSED-SQUARE
	 ;  CAN-NOT-BE-DEFENDED-BY-PAWN
	 ;  CAN-BE-ATTACKED-BY-PAWN
	 ;  HIS-PC-CONSTRAINED
	 ;RELEAVE-PIN-ON-US
	 ;  MOVE-BASE-PIECE
	 ;  INTERPOSE
	 ;  CHASE-PINNING-PC
	 ;  EXCHANGE-PINNING-PC
	 ;  BUST-PIN
	 ;    MOVE-PINNED-PC-WITH-THREAT
	 ;    MOVE-BASE-PC-WITH-THREAT
	 ;PREPARE-RELEAVE-PIN
	 ;  BASE-PIECE-NEEDED-TO-DEFEND-PINNED-PC (DIRECTLY OR TO AVOID RUINED PAWN STRUCTURE)
	 ;    OTHERWISE-DEFEND-BASE-PIECE
	 ;    MAKE-OTHER-SQUARE-FOR-BASE-PIECE, FROM WHICH IT WILL STILL DEFEND
	 ;CUTOFF-RETREAT-OF-ADVANCED-PIECE
	 ;  P-N3 TRAPPING B

  ;DEFENSIVE
	 ;MAKE-ROOM-FOR
	 ;  OUR-K
	 ;    BACKRANK

;DIRECTORS (IE MEDIUM-RANGE INDICATIONS)
	 ;OUR-DEVELOPMENT-ADVANCED-AND-HIS-K-STILL-IN-CENTER
	 ;  LIQUIDATE-CENTER (INCLUDING SAC S)

	 ;EXCHANGE
	 ;  WE ARE AHEAD
	 ;  WE ARE CONSTRICTED
	 ;  RE-RECAPTURING-PC-WILL-BE-ON-A-STRONG-SQUARE
	 ;  RECAPTURING-PC-WILL-BE-ON-A-WEAK-SQUARE
	 ;    K
	 ;  HIS-PIECE-IS-STRONGLY-POSTED
	 ;  OUR-PIECE-IS-WEAK 
	 ;  OPEN-FILE 
	 ;  OPEN-KING-POSITION
	 ;  DISTURB-P-STRUCTURE
	 ;  DIVERT-RECAPTURING-PC
	 ;  MAINTAINS-TEMPO IE HAS TO TAKE US INSTEAD OF OTHER THING HE COULD DO
	 ;OFFER-EXCHANGE
	 ;  SAME AS ABOVE

	 ;K-TRAPPED-AGAINST-EDGE-OF-BOARD (BY R OR Q)


