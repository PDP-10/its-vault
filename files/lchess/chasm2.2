;-*- mode: lisp; base: 8; package: user -*-

(DECLARE (SPECIAL CHASM-UCODE-POINTER CHEOPS-UCODE-STATEMENTS 
		CHEOPS-LAST-TAG CHEOPS-WDS-SINCE-LAST-TAG 
		CHASM-DEFINED-SUBOPS CHASM-SUBOP-KEYS 
		CHASM-GENERATION-NUMBER CHASM-NUMBER-GENERATIONS 
		CHEOPS-UCODE CHEOPS-LAST-STORAGE-HEAD 
		CHEOPS-LAST-NATURAL-STORAGE-HEAD 
		CHEOPS-LAST-STORAGE-HEAD-OCCUPIED CHEOPS-STORAGE-HEAD-INDEX 
		CHEOPS-INDEX-ASSIGNMENT-POINTER CHEOPS-WORD-ADDRESS-FIELD 
		CHASM-DATA-VECTOR-LENGTH))

(SETQ CHEOPS-LAST-TAG NIL)

(SETQ CHASM-DATA-VECTOR-LENGTH 1224.)	;LENGTH OF CHASM-STORAGE-WD, ETC, ARRAYS
					; # TAGS * # GENERATIONS MUST FIT

;THESE FORM THEIR OWN SUBOP FIELD
(SETQ CHASM-DEFINED-SUBOPS '(DESTINATION-ARRAY ORIGIN-ARRAY ORIG-ALL-SQUARES 
				ORIG-FROM-SIR DEST-FROM-SIR DEST-ALL-SQUARES 
				ENABLE-ALL-PIECES ENABLE-NOBLES-ONLY 
				ENABLE-PAWNS-ONLY CAPTURE-MODE MOVE-MODE 
				ZERO-PIECE-EXISTS-BIT SET-PIECE-EXISTS-BIT 
				CLEAR-PIECE-HERE SET-PIECE-HERE 
				NO-OP PDL-POINTED-TO-BY-PAR 
				INITIATE-UNIBUS-READ-CYCLE 
				INITIATE-UNIBUS-WRITE-CYCLE 
				INITIATE-UNIBUS-INTERRUPT-CYCLE ))

;THESE TAKE ARG LIST IN BRACKETS
(SETQ CHASM-SUBOP-KEYS '(PDL AC AAC FLAG-CONTROL PAF ALU-FCTN IMMEDIATE-DATA))

(LOCAL-DECLARE ((SPECIAL *SPECIAL-PROP*))
(DEFUN ALLREMPROP (*SPECIAL-PROP* &OPTIONAL (PKG SI:PKG-USER-PACKAGE))
  (MAPATOMS (FUNCTION (LAMBDA (X) (REMPROP X *SPECIAL-PROP*))) PKG)) )

(DEFUN CHASM-2-INIT NIL 
  (PROG ()
	(ALLREMPROP 'CHASM-TAG-BASE)
	(ALLREMPROP 'CHASM-AC-BINDING)
	(ALLREMPROP 'CHASM-PDL-BINDING)
	(ALLREMPROP 'CHASM-VALUE)
	(*ARRAY 'CHASM-STORAGE-WORD T CHASM-DATA-VECTOR-LENGTH)
	(*ARRAY 'CHASM-NEXT-TEXTUAL-LINK T CHASM-DATA-VECTOR-LENGTH)
	(*ARRAY 'CHASM-REAL-TAG-NAME T CHASM-DATA-VECTOR-LENGTH)
	(*ARRAY 'CHASM-NEXT-ADDRESS-LINK T CHASM-DATA-VECTOR-LENGTH)
	(*ARRAY 'CHASM-STORAGE-LOCATIONS T CHASM-DATA-VECTOR-LENGTH)
	(*ARRAY 'CHASM-TAG-NAME T 
		(// CHASM-DATA-VECTOR-LENGTH 2))  ;BETTER BE AT LEAST 2 GENERATIONS
	(*ARRAY 'CHASM-ACS T 20)
	(*ARRAY 'CHASM-PDL T 2000)
))

(DEFUN CHASM-2 NIL
  (PROG (CHASM-UCODE-POINTER CHASM-GENERATION-NUMBER 
	 CHEOPS-LAST-TAG CHEOPS-LAST-STORAGE-HEAD 
	 CHEOPS-LAST-NATURAL-STORAGE-HEAD 
	 CHEOPS-LAST-STORAGE-HEAD-OCCUPIED CHEOPS-STORAGE-HEAD-INDEX 
	 CHEOPS-WORD-ADDRESS-FIELD TEM)
	(CHASM-2-INIT)
	(SETQ CHEOPS-INDEX-ASSIGNMENT-POINTER 0)	;USED TO ASSIGN BASES TO NEW
							;TAGS.
	(SETQ CHASM-NUMBER-GENERATIONS 2)		;DEFAULT
	(SETQ CHASM-GENERATION-NUMBER 0)
	(CHASM-2-LINK-STORAGE-HEAD 'CHEOPS-PRGM-BEG)
   L0	(SETQ CHEOPS-LAST-TAG NIL)
	(SETQ CHEOPS-LAST-STORAGE-HEAD 
	   (SETQ CHEOPS-LAST-NATURAL-STORAGE-HEAD 'CHEOPS-PRGM-BEG))
	(SETQ CHEOPS-STORAGE-HEAD-INDEX CHASM-GENERATION-NUMBER)  ;INDEX OF CURRENT
								  ; STORAGE HEAD
	(SETQ CHEOPS-WDS-SINCE-LAST-TAG 0)
   	(SETQ CHASM-UCODE-POINTER CHEOPS-UCODE)
   L	(COND ((NULL CHASM-UCODE-POINTER)
		(GO X)))
	(SETQ CHEOPS-WORD-ADDRESS-FIELD NIL)	;RECEIVE NEXT ADR FIELD OF WD BACK
						;IN THIS VAR.
	(COND ((SETQ TEM (CHASM-2-GET-STATEMENT))
		(CHASM-2-STORE-STATEMENT TEM)))
	(GO L)
   X	(COND ((< (SETQ CHASM-GENERATION-NUMBER (1+ CHASM-GENERATION-NUMBER))
		      CHASM-NUMBER-GENERATIONS)
		(GO L0)))
	(RETURN T)))

(DEFUN CHASM-2-STORE-STATEMENT (WD)
  (PROG ()
	(COND ((ATOM WD)
		(CHASM-2-STORE-STORAGE-HEAD WD)  ;STORE STORAGE-HEAD
		(SETQ CHEOPS-LAST-NATURAL-STORAGE-HEAD WD)
		(RETURN T))
	      (CHEOPS-LAST-STORAGE-HEAD-OCCUPIED (CHASM-2-GENERATE-STORAGE-HEAD)))
	(CHASM-2-SET-STORAGE-HEAD-INDEX)
	(SETQ CHEOPS-LAST-STORAGE-HEAD-OCCUPIED T)
	(STORE (CHASM-NEXT-ADDRESS-LINK CHEOPS-STORAGE-HEAD-INDEX)
		CHEOPS-WORD-ADDRESS-FIELD)
	(STORE (CHASM-STORAGE-WORD CHEOPS-STORAGE-HEAD-INDEX)
		(CHASM-3-CONVERT-WORD WD))
	(RETURN T)))

(DEFUN CHASM-2-GENERATE-STORAGE-HEAD NIL 
  (PROG (NEW-HD)
	(SETQ NEW-HD (READLIST (NCONC (EXPLODE CHEOPS-LAST-NATURAL-STORAGE-HEAD)
				      (LIST '+)
				      (EXPLODE CHEOPS-WDS-SINCE-LAST-TAG))))
	(CHASM-2-STORE-STORAGE-HEAD NEW-HD)))

(DEFUN CHASM-3-CONVERT-WORD (WD)		;DUMMY
  (PROG ()
	(RETURN WD)))

(DEFUN CHASM-2-SET-STORAGE-HEAD-INDEX NIL 
  (PROG (TEM)
	(COND ((SETQ TEM (GET CHEOPS-LAST-STORAGE-HEAD 'CHASM-TAG-BASE))
		(GO X)))
	(SETQ TEM CHEOPS-INDEX-ASSIGNMENT-POINTER)
	(CHASM-2-LINK-STORAGE-HEAD CHEOPS-LAST-STORAGE-HEAD)
   X	(SETQ CHEOPS-STORAGE-HEAD-INDEX (+ TEM CHASM-GENERATION-NUMBER))
	(RETURN T)))

(DEFUN CHASM-2-LINK-STORAGE-HEAD (HEAD)
	(PUTPROP HEAD CHEOPS-INDEX-ASSIGNMENT-POINTER 'CHASM-TAG-BASE)
	(STORE (CHASM-TAG-NAME (// CHEOPS-INDEX-ASSIGNMENT-POINTER
				   CHASM-NUMBER-GENERATIONS)) HEAD)
	(COND ((NOT (< (SETQ CHEOPS-INDEX-ASSIGNMENT-POINTER 
			     (+ CHASM-NUMBER-GENERATIONS 
				CHEOPS-INDEX-ASSIGNMENT-POINTER))
		       CHASM-DATA-VECTOR-LENGTH))
		(CHEOPS-BARF 'FOO 'DATA-VECTOR-OVERFLOW 'BARF))))

(DEFUN CHASM-2-STORE-STORAGE-HEAD (HEAD)
  (PROG ()
	(STORE (CHASM-NEXT-TEXTUAL-LINK CHEOPS-STORAGE-HEAD-INDEX)
	       HEAD)
	(COND ((NULL CHEOPS-LAST-STORAGE-HEAD-OCCUPIED)
		(STORE (CHASM-REAL-TAG-NAME CHEOPS-STORAGE-HEAD-INDEX)
			HEAD)))
   X1	(SETQ CHEOPS-LAST-STORAGE-HEAD HEAD)
	(SETQ CHEOPS-LAST-STORAGE-HEAD-OCCUPIED NIL)
	(CHASM-2-SET-STORAGE-HEAD-INDEX)
	(RETURN T) ))

(DEFUN CHASM-2-GET-STATEMENT NIL 
  (PROG (I1 I2 STATEMENT-LIST)
    L	(SETQ I1 (CHASM-2-READ-TOKEN))		;GOBBLE ONE TOKEN
	(COND ((EQ I1 '*EOF*) 
		(COND (STATEMENT-LIST (GO E1))
		      (T (GO X)))))
	(SETQ I2 (CHASM-2-PEEK-TOKEN))		;PEEK AT NEXT
	(COND ((EQ I1 '$) (GO X))
	      ((EQ I2 '/:) (GO S1))
	      ((NOT (EQ I1 '/,))
		(GO E1)))
    L1	(GO L)
    S1	(COND ((MEMQ I1 '(ARRAY ALU))
		(GO S2))
	      ((MEMQ I1 '(ARRAY-HOLD DUPLICATE-OP))
		(GO S2A)))
    TAG	(SETQ CHASM-UCODE-POINTER (CDR CHASM-UCODE-POINTER))
	(SETQ CHEOPS-LAST-TAG I1)
	(SETQ CHEOPS-WDS-SINCE-LAST-TAG 0)
	(RETURN I1)
    S2A	(SETQ CHASM-UCODE-POINTER (CDR CHASM-UCODE-POINTER))
	(SETQ STATEMENT-LIST (LIST (LIST I1 (CHASM-2-GET-TAG))))
	(GO S2B)
    S2	(SETQ STATEMENT-LIST (LIST (LIST I1)))
	(SETQ CHASM-UCODE-POINTER (CDR CHASM-UCODE-POINTER))
    S2B (SETQ I1 (CHASM-2-GET-SUBOP-LIST))
	(COND ((NULL I1) (GO S2B))
	      ((EQ I1 'END-OF-STATEMENT)
		(SETQ CHEOPS-WDS-SINCE-LAST-TAG (1+ CHEOPS-WDS-SINCE-LAST-TAG))
		(RETURN (NREVERSE STATEMENT-LIST))))
	(SETQ STATEMENT-LIST (CONS I1 STATEMENT-LIST))
	(GO S2B)
    E1	(CHEOPS-BARF STATEMENT-LIST 'BAD-STATEMENT 'WARN)
    X	(RETURN (NREVERSE STATEMENT-LIST))
))

(DEFUN CHASM-2-GET-TAG NIL 
  (PROG (TEM)
	(SETQ TEM (CHASM-2-GET-TOKEN))
	(COND ((MEMQ TEM '(WHITE-TAG BLACK-TAG SAME-SIDE-TAG OTHER-SIDE-TAG))
		(RETURN (LIST TEM (CHASM-2-GET-TOKEN))))
	      ((EQ TEM 'TAG-IN-GENERATION)
		(RETURN (LIST TEM (CHASM-2-GET-TOKEN) (CHASM-2-GET-TOKEN))))
	      (T (RETURN TEM)))))

(DEFUN CHASM-2-GET-TOKEN NIL 
  (PROG (TOK)
    L	(SETQ TOK (CHASM-2-READ-TOKEN))
	(COND ((EQ TOK '*EOF*)
		(GO E1))
	      ((EQ TOK '/,)
		(GO L))) 
	(RETURN TOK)
   E1	(CHEOPS-BARF NIL 'REACHED-END-OF-PROG-GET-TOKEN 'WARN)
	(RETURN '$)))

(DEFUN CHASM-2-GET-SUBOP-LIST NIL 
  (PROG (T1 T2)
	(SETQ T1 (CHASM-2-GET-TOKEN))
	(COND ((MEMQ T1 CHASM-DEFINED-SUBOPS)
		(RETURN T1))
	      ((EQ T1 '/@)
		(RETURN (CHASM-2-GET-TRANSFER-LIST)))
	      ((EQ T1 '->)
		(RETURN (CHASM-2-GET-ONE-ARG T1)))
	      ((EQ T1 '$)
		(RETURN 'END-OF-STATEMENT)))
	(COND ((CHASM-2-END-SUBOP-P) (GO E1)))
	(SETQ T2 (CHASM-2-GET-TOKEN))
	(COND ((EQ T2 'FROM)
		(RETURN (CHASM-2-GET-FROM T1)))
	      ((EQ T2 '/[)
		(GO BRAK)))
   E1	(CHEOPS-BARF (LIST T1 T2) 'BAD-SUBOP-FIELD 'WARN)
	(RETURN NIL)
   BRAK	(COND ((MEMQ T1 CHASM-SUBOP-KEYS)
		(RETURN (CHASM-2-GET-BRAK-SUBOP T1)))
	      (T (GO E1)))
))

(DEFUN CHASM-2-GET-BRAK-SUBOP (TYPE)
  (PROG (TEM ARG-LIST)
    L	(COND ((CHASM-2-END-STATEMENT-P) (GO X)))
	(SETQ TEM (CHASM-2-GET-TOKEN))
	(COND ((EQ TEM  '/])
		(GO X)))
	(SETQ ARG-LIST (CONS TEM ARG-LIST))
	(GO L)
   X	(RETURN (LIST TYPE (NREVERSE ARG-LIST)))
))


(DEFUN CHASM-2-GET-ONE-ARG (TYPE) 
  (PROG (TOK)
	(SETQ TOK (CHASM-2-GET-TOKEN))
	(COND ((AND (MEMQ TOK CHASM-SUBOP-KEYS)
		    (EQ (CHASM-2-PEEK-TOKEN) '/[))
		(CHASM-2-GET-TOKEN)
		(SETQ TOK (CHASM-2-GET-BRAK-SUBOP TOK))))
  	(RETURN (LIST TYPE TOK))
))

(DEFUN CHASM-2-GET-FROM (ARG1)
  (PROG (TOK)
	(SETQ TOK (CHASM-2-GET-TOKEN))
	(COND ((AND (MEMQ TOK CHASM-SUBOP-KEYS)
		    (EQ (CHASM-2-PEEK-TOKEN) '/[))
		(CHASM-2-GET-TOKEN)			;FLUSH [
		(SETQ TOK (CHASM-2-GET-BRAK-SUBOP TOK))))
	(RETURN (LIST 'FROM ARG1 TOK))
	))

(DEFUN CHASM-2-GET-TRANSFER-LIST NIL 
  (PROG (BIT-LIST DISPATCH-FIELD-LIST TAG-LIST TOK COUNT)
    L	(COND ((CHASM-2-END-STATEMENT-P)
		(GO X)))
	(SETQ TOK (CHASM-2-GET-TOKEN))
	(COND ((MEMQ TOK '(PUSHJ POPJ INHIBIT-WRITE-IF-BRANCH STATISTICS-BIT 
				E-LONG POP-USP))
		(SETQ BIT-LIST (CONS TOK BIT-LIST))
		(GO L))
	      ((EQ TOK 'RETURN-TARGET)
		(SETQ BIT-LIST (CONS (LIST 'RETURN-TARGET (CHASM-2-GET-TOKEN))
				     BIT-LIST))
		(GO L))
	      ((MEMQ TOK '(BLACK-TAG WHITE-TAG OTHER-SIDE-TAG SAME-SIDE-TAG))
		(SETQ TOK (LIST TOK (CHASM-2-GET-TOKEN)))
		(GO U-C-XFER))
	      ((EQ TOK 'TAG-IN-GENERATION)
		(SETQ TOK (LIST TOK (CHASM-2-GET-TOKEN) (CHASM-2-GET-TOKEN)))
		(GO U-C-XFER)))
	(COND ((CHASM-2-END-STATEMENT-P)
		(GO U-C-XFER)))
   DL	(SETQ DISPATCH-FIELD-LIST (CONS TOK DISPATCH-FIELD-LIST))
	(COND ((EQ (CHASM-2-PEEK-TOKEN) '+)
		(CHASM-2-GET-TOKEN)
		(SETQ TOK (CHASM-2-GET-TOKEN))
		(GO DL)))
    RL	(COND ((CHASM-2-END-STATEMENT-P) (GO X)))
	(SETQ TOK (CHASM-2-GET-TAG))
	(COND ((EQ TOK '<)
		(GO RL-MULT)))
	(SETQ TAG-LIST (CONS TOK TAG-LIST))
    RLR	(COND ((OR (CHASM-2-END-STATEMENT-P)
		   (NOT (EQ (CHASM-2-PEEK-TOKEN) '/|)))
		(GO X)))
	(CHASM-2-GET-TOKEN)
	(GO RL)
    X	(SETQ CHEOPS-WORD-ADDRESS-FIELD 
		(LIST BIT-LIST DISPATCH-FIELD-LIST (NREVERSE TAG-LIST)))
	(RETURN NIL)
    U-C-XFER
	(SETQ TAG-LIST (LIST TOK))
	(SETQ DISPATCH-FIELD-LIST '(TRANSFER))
	(GO X)

    RL-MULT
	(SETQ COUNT (CHASM-2-GET-TOKEN))
	(COND ((OR (NOT (NUMBERP COUNT))
		   (NOT (EQ (CHASM-2-GET-TOKEN) '>)))
		(CHEOPS-BARF 'FOO 'BAD-TAG-REPEAT-COUNT 'WARN)
		(GO X)))
	(SETQ TOK (CHASM-2-GET-TAG))
    RL-1
	(COND ((= COUNT 0) (GO RLR)))
	(SETQ TAG-LIST (CONS TOK TAG-LIST))
	(SETQ COUNT (1- COUNT))
	(GO RL-1)
))

(DEFUN CHASM-2-END-STATEMENT-P NIL 
      (OR (NULL CHASM-UCODE-POINTER)
	  (MEMQ (CHASM-2-PEEK-TOKEN) '($ *EOF*))))

(DEFUN CHASM-2-END-SUBOP-P NIL 
  (PROG (TOK)
	(COND ((OR (NULL CHASM-UCODE-POINTER)
	  	   (MEMQ (SETQ TOK (CHASM-2-PEEK-TOKEN)) '($ -> @))
	  	   (MEMQ TOK CHASM-DEFINED-SUBOPS)
	  	   (MEMQ TOK CHASM-SUBOP-KEYS))
		(RETURN T))) ))

(DEFUN CHEOPS-BARF (ITEM REASON SEVERITY)
   (PROG NIL 
	(TERPRI)
	(PRIN1 (LIST CHEOPS-LAST-TAG CHEOPS-WDS-SINCE-LAST-TAG))
	(PRIN1 (LIST ITEM REASON SEVERITY))
	(COND ((NOT (EQ SEVERITY 'WARN))
		(BREAK 'BARF 'T)))))

(DEFUN CHASM-2-READ-TOKEN NIL 
 (PROG (TOK)
	(SETQ TOK (CHASM-2-PEEK-TOKEN))
	(SETQ CHASM-UCODE-POINTER (CDR CHASM-UCODE-POINTER))
	(RETURN TOK)))

(DEFUN CHASM-2-PEEK-TOKEN NIL 
 (PROG (TOK)
   L	(COND ((NULL CHASM-UCODE-POINTER)
		(RETURN '*EOF*))
	      ((EQ (SETQ TOK (CAR CHASM-UCODE-POINTER))
		    '&)
		(GO COND1)))
	(RETURN TOK)
  COND1	(SETQ CHASM-UCODE-POINTER (CDR CHASM-UCODE-POINTER))
	(COND ((NULL CHASM-UCODE-POINTER)
		(RETURN '*EOF*))
	      ((EVAL (CAR CHASM-UCODE-POINTER))
		(SETQ CHASM-UCODE-POINTER (CDR CHASM-UCODE-POINTER))
		(GO L)))		;COND TRUE, CONTINUE GOBBLING
  COND2	(SETQ CHASM-UCODE-POINTER (CDR CHASM-UCODE-POINTER))
	(COND ((NULL CHASM-UCODE-POINTER)
		(RETURN '*EOF*))
	      ((EQ (CAR CHASM-UCODE-POINTER) '&)
		(GO COND1)))		;SEE IF THAT COND WINS
	(GO COND2)			;CONTINUE FLUSHING UNTIL FIND COND THAT WINS
))

(DECLARE (SPECIAL CHASM-GENERATION-NUMBER))

(DEFUN WHITE-TO-PLAY NIL
	(= 0 (LOGAND 1 CHASM-GENERATION-NUMBER)))

(DEFUN BLACK-TO-PLAY NIL
	(NOT (= 0 (LOGAND 1 CHASM-GENERATION-NUMBER))))