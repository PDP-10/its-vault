;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LCHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

(DECLARE (SPECIAL CHEOPS-BUFFER-MEMORY CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR 
		  CHEOPS-BUFFER-MEMORY-PRIORITY-BLOCK-POINTER 
		  CHEOPS-BUFFER-MEMORY-PRIORITY-BLOCK 
		  CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER 
		  CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK 
		  CHEOPS-DOORBELL-UNIBUS-ADDRESS CHEOPS-ARG-BLOCK-LENGTH 
		  CHEOPS-BUFFER-MEMORY-LENGTH))

(SETQ CHEOPS-BUFFER-MEMORY-LENGTH #o10000)
(SETQ CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR #o20000)

(SETQ CHEOPS-BUFFER-MEMORY 	;DISPLACED ARRAY POINTER TO 4K CHEOPS BUFFER MEMORY
      (MAKE-ARRAY NIL 
		  'ART-32B 
		  CHEOPS-BUFFER-MEMORY-LENGTH 
  ;Note! this has to be a direct pointer, not a BIGNUM!     ;= UNIBUS ADR #o40000
		  (%logdpb (ldb #o1020 (+ #o77400000 CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR))
			   #o1020
			   0)))

(SETQ CHEOPS-DOORBELL-UNIBUS-ADDRESS #o776002)

(SETQ CHEOPS-BUFFER-MEMORY-PRIORITY-BLOCK-POINTER  7)	  ;DOORBELL OP 0 MUST BE GIVEN
							  ; TO MAKE CHEOPS LOOK AT THIS.
(SETQ CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER #o13)   ;CHEOPS LOOPS LOOKING AT THIS
							  ; WHEN IDLE.
(SETQ CHEOPS-BUFFER-MEMORY-PRIORITY-BLOCK #o100)	;LOCN OF BLOCK RELATIVE TO  BUFFER MEM ORG
						; (UNIBUS WDS, OR EQUIVILANTLY, ARY ELEMENTS
						; OF CHEOP-BUFFER-MEMORY)

(SETQ CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK #o200) ;AND ABOVE..

(SETQ CHEOPS-ARG-BLOCK-LENGTH #o100)

(DECLARE (SPECIAL CHEOPS-ARG-QS 
		  CHEOPS-ARG-FLAG CHEOPS-ARG-UNUSED CHEOPS-ARG-MODES 
		  CHEOPS-ARG-SETD CHEOPS-ARG-ALPHA CHEOPS-ARG-BETA 
		  CHEOPS-ARG-FLAGWORD CHEOPS-ARG-CHAIN-POINTER))

(SETQ CHEOPS-ARG-QS '(
      		  CHEOPS-ARG-FLAG CHEOPS-ARG-UNUSED CHEOPS-ARG-MODES 
		  CHEOPS-ARG-SETD CHEOPS-ARG-ALPHA CHEOPS-ARG-BETA 
		  CHEOPS-ARG-FLAGWORD CHEOPS-ARG-CHAIN-POINTER))
(ASSIGN-POSITION-IN-LIST CHEOPS-ARG-QS)

(DECLARE (SPECIAL CHEOPS-WAIT-BADR))

(DEFUN CHEOPS-FLAGWORD ()    ;COMPUTE CHEOPS FLAGWORD FOR CURRENT POSITION
  (PROG (WD NMA SIDE TEM)
	(SETQ WD 0 NMA (PIECE-NMOVES-ARRAY PIECE-ARRAY))
	(SETQ SIDE (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY)))
	(COND ((NOT (ZEROP (AR-1 NMA WK)))
	       (SETQ WD (+ WD #o14))	;NO CASTLING FOR WHITE
	       (GO F1)))
	(COND ((OR (ZEROP (AR-1 PIECE-ARRAY WKR))
		   (NOT (ZEROP (AR-1 NMA WKR))))
	       (SETQ WD (+ WD 4))))	;NO O-O FOR WHITE
	(COND ((OR (ZEROP (AR-1 PIECE-ARRAY WQR))
		   (NOT (ZEROP (AR-1 NMA WQR))))
	       (SETQ WD (+ WD #o10))))	;NO O-O-O FOR WHITE
  F1	(COND ((NOT (ZEROP (AR-1 NMA BK)))
	       (SETQ WD (+ WD 3))
	       (GO F2)))		;NO CASTLING FOR BLACK
  	(COND ((OR (ZEROP (AR-1 PIECE-ARRAY BKR))
		   (NOT (ZEROP (AR-1 NMA BKR))))
	       (SETQ WD (+ WD 1))))	;NO O-O FOR BLACK
	(COND ((OR (ZEROP (AR-1 PIECE-ARRAY BQR))
		   (NOT (ZEROP (AR-1 NMA BQR))))
	       (SETQ WD (+ WD 2))))
  F2 ;	(COND ((NULL (BOARD-CAT-DATA-VALID BOARD-ARRAY))        ;CHEOPS TAKES CARE OF THIS NOW.
     ;	       (C-CALCULATE-ATTACKS)))
     ; 	(COND ((ZEROP SIDE)
     ;         (COND ((NOT (ZEROP (AR-1 (BOARD-BLACK-ATTACKS-ARRAY BOARD-ARRAY)
     ;					(AR-1 PIECE-ARRAY WK))))
     ;		      (SETQ WD (+ WD #o100)))))
     ;	      (T 
     ;	       (COND ((NOT (ZEROP (AR-1 (BOARD-WHITE-ATTACKS-ARRAY BOARD-ARRAY)
     ;					(AR-1 PIECE-ARRAY BK))))
     ;		      (SETQ WD (+ WD #o100))))))
	(COND ((NOT (ZEROP (SETQ TEM (BOARD-GHOST-LOCATION BOARD-ARRAY))))
	       (SETQ WD (DPB (LOGIOR #o10 (LOGAND 7 (AR-1 C-MAP-TO-CHEOPS-SQUARE TEM)))
			     #o1004 
			     WD))))
	(RETURN WD)
))

(DEFUN CHEOPS-TRANSFER-POSITION (BADR SIDE MODES SETD ALPHA BETA &AUX BPNTR LSQ CPC PTWN)
  (SETQ PTWN (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY))
  (SETQ BPNTR (+ BADR #o37))
  (DO LPC 0 (1+ LPC) (= LPC PIECE-ARRAY-SIZE)
   (COND ((NOT (ZEROP (SETQ LSQ (AR-1 PIECE-ARRAY LPC))))
	  (SETQ CPC (AR-1 C-MAP-TO-CHEOPS-PIECE LPC))
	  (COND ((AND (ZEROP (LOGAND LPC #o10))  ;THIS IDX WAS ORIGINALLY A P..
		      (NOT (> (AR-1 PTWN LPC) 5)))  ;AND ITS NOT A P NOW
		 (SETQ CPC (+ CPC #o40))		;ITS PROMOTED
		 (AS-1 (+ (LSH CPC 8)
			  (LSH (- (AR-1 PTWN LPC) 2) 6)  ;TYPE WOOD PROMOTED TO
			  (AR-1 C-MAP-TO-CHEOPS-SQUARE LSQ))
		       CHEOPS-BUFFER-MEMORY 
		       BPNTR))
		(T (AS-1 (+ (LSH CPC 8) (AR-1 C-MAP-TO-CHEOPS-SQUARE LSQ))
			 CHEOPS-BUFFER-MEMORY 
			 BPNTR)))
	  (SETQ BPNTR (1+ BPNTR)))))
  (AS-1 0 CHEOPS-BUFFER-MEMORY BPNTR)  ;TERMINATE LIST
  (COND ((NOT (ZEROP SIDE)) (SETQ MODES (+ MODES #o100000))))	;BLACK TO MOVE
  (AS-1 MODES CHEOPS-BUFFER-MEMORY (+ BADR CHEOPS-ARG-MODES))
  (AS-1 SETD CHEOPS-BUFFER-MEMORY (+ BADR CHEOPS-ARG-SETD))
  (AS-1 ALPHA CHEOPS-BUFFER-MEMORY (+ BADR CHEOPS-ARG-ALPHA))
  (AS-1 BETA CHEOPS-BUFFER-MEMORY (+ BADR CHEOPS-ARG-BETA))
  (AS-1 (CHEOPS-FLAGWORD)
	CHEOPS-BUFFER-MEMORY (+ BADR CHEOPS-ARG-FLAGWORD))
)

(DEFUN CHEOPS-START-PRIORITY (MODES SETD &OPTIONAL (ALPHA #o-20000) (BETA #o20000)
			   (BADR CHEOPS-BUFFER-MEMORY-PRIORITY-BLOCK) NOWAIT)
  (PROG ()
	(AS-1 #o177777 CHEOPS-BUFFER-MEMORY CHEOPS-BUFFER-MEMORY-PRIORITY-BLOCK-POINTER)
	(COND (NOWAIT (GO LX)))
    L   (COND ((= (AR-1 CHEOPS-BUFFER-MEMORY BADR)
		  #o177777)
	       (GO L)))			;WAIT FOR CHEOPS TO FINISH PREVIOUS STUFF
    LX	(CHEOPS-TRANSFER-POSITION BADR 
				  (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY))
				  MODES SETD ALPHA BETA)
    	(AS-1 #o177777 CHEOPS-BUFFER-MEMORY BADR)
	(AS-1 (+ CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR BADR)
	      CHEOPS-BUFFER-MEMORY 
	      CHEOPS-BUFFER-MEMORY-PRIORITY-BLOCK-POINTER)
	(CHEOPS-WRITE-DOORBELL 3)
	(RETURN T)
))

(DEFUN CHEOPS-ABORT-PRIORITY NIL 
       (CHEOPS-WRITE-DOORBELL 7))

(DEFUN CHEOPS-ABORT-BACKGROUND NIL 
       (CHEOPS-WRITE-DOORBELL #o13))

(DEFUN CHEOPS-ABORT-BACKGROUND-AND-CONFIRM NIL 
  (PROG NIL 
       (AS-1 0 CHEOPS-BUFFER-MEMORY (1- CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER))
       (AS-1 #o177777
	     CHEOPS-BUFFER-MEMORY 
	     CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER)
       (CHEOPS-ABORT-BACKGROUND)	       
   A   (COND ((ZEROP     ;WAIT FOR CHEOPS TO ACKNOWLEDGE IT IS LOOKING AT THAT.
	       (AR-1 CHEOPS-BUFFER-MEMORY 
	       		   (1- CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER)))
	       	    (GO A)))))

(DEFUN CHEOPS-WRITE-DOORBELL (N)
   (%UNIBUS-WRITE CHEOPS-DOORBELL-UNIBUS-ADDRESS (LSH N 6)))

(DEFUN CHEOPS-READ-DOORBELL NIL 
   (LOGAND #o17 (LSH (%UNIBUS-READ CHEOPS-DOORBELL-UNIBUS-ADDRESS) -6)))

;STARTS BACKGROUND SEARCH ON A SINGLE POSITION
(DEFUN CHEOPS-START-BACKGROUND (MODES SETD &OPTIONAL (ALPHA #o-20000) (BETA #o20000) 
			   (BADR CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK) NOWAIT)
  (PROG ()
	(AS-1 #o177777 CHEOPS-BUFFER-MEMORY CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER)
	(COND (NOWAIT (GO LX)))
    L   (COND ((= (AR-1 CHEOPS-BUFFER-MEMORY BADR)
		  #o177777)
	       (GO L)))			;WAIT FOR CHEOPS TO FINISH PREVIOUS STUFF
    LX 	(CHEOPS-TRANSFER-POSITION BADR 
				  (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY))
				  MODES SETD ALPHA BETA)
	(AS-1 #o177777 CHEOPS-BUFFER-MEMORY BADR)	;SIGNAL DATA FOR CHEOPS IN BUFFER
    	(AS-1 (+ CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR BADR)
	      CHEOPS-BUFFER-MEMORY 
	      CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER)
	(RETURN T)
))

(DEFUN CHEOPS-FETCH-VALUE (BADR)
  (PROG ()
       L   (COND ((NOT (= (AR-1 CHEOPS-BUFFER-MEMORY BADR)
			  1))
                  (SETQ CHEOPS-WAIT-BADR BADR)  ;DONT USE LAMBDA BINDING HERE!
                  (PROCESS-WAIT "CHEOPS-WAIT" 
                                (FUNCTION 
                                 (LAMBDA NIL 
                                         (= (AR-1 CHEOPS-BUFFER-MEMORY CHEOPS-WAIT-BADR)
                                            1))))
		  (GO L)))			;WAIT FOR CHEOPS TO FINISH
           (RETURN (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR #o20))	;RETURNED VALUE
		   (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR #o21)))	;INITIAL MATERIAL
))

(DEFUN CHEOPS-FETCH-RESULTS (BADR)
  (PROG (V M)
       L   (COND ((NOT (= (AR-1 CHEOPS-BUFFER-MEMORY BADR)
			  1))
                  (SETQ CHEOPS-WAIT-BADR BADR)
                  (PROCESS-WAIT "CHEOPS-WAIT" 
                                (FUNCTION 
                                 (LAMBDA NIL 
                                         (= (AR-1 CHEOPS-BUFFER-MEMORY CHEOPS-WAIT-BADR)
                                            1))))
		  (GO L)))			;WAIT FOR CHEOPS TO FINISH
	   (COND ((NOT (ZEROP (LOGAND (SETQ M (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR #o21)))
				      #o100000)))
		  (SETQ M (LOGIOR M #o-200000)))) ;#o77600000
	   (COND ((= (SETQ V (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR #o20)))
		     #o100000)
		  (RETURN (COND ((NOT (ZEROP (LOGAND (AR-1 CHEOPS-BUFFER-MEMORY 
                                                           (+ BADR CHEOPS-ARG-MODES))
                                                     #o100000)))
                                 (MINUS V))
                                (T V))
                          M 0 0)))   ;POSITION SHIPPED OVER WAS ILLEGAL
       	   (COND ((NOT (ZEROP (LOGAND V #o100000)))
		  (SETQ V (LOGIOR V #o-200000))))	;#o77600000
           (RETURN V						;RETURNED VALUE
		   M						;INITIAL MATERIAL
		   (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR #o17))	;STATB (HIGH ORDER)
		   (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR #o16))	;STATA (LOW ORDER)
		   (CHEOPS-CONVERT-PV BADR))
))

;CALL THIS AFTER CHEOPS-FETCH-RESULTS TO GET OTHER-SIDE-RESULTS IF THAT OPTION WAS
; SELECTED.
(DEFUN CHEOPS-FETCH-OTHER-SIDE-RESULTS (BADR)
  (PROG (V)
	(COND ((= (SETQ V (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR #o36)))
		  #o100000)
	       (RETURN V)))   ;POSITION SHIPPED OVER WAS ILLEGAL
	(COND ((NOT (ZEROP (LOGAND V #o100000)))
	       (SETQ V (LOGIOR V #o-200000))))	;#o77600000
	(RETURN V 
		(CHEOPS-CONVERT-OS-PV BADR))
))

(DEFUN CHEOPS-CONVERT-OS-PV (BADR)
  (PROG (SETD M1 M2 M3)
       (SETQ SETD (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR 3)))
       (COND ((NULL (SETQ M1 (CHEOPS-CONVERT-PV-MOVE (+ BADR #o30))))
	      (RETURN NIL))
	     ((OR (= SETD 1)
		  (NULL (SETQ M2 (CHEOPS-CONVERT-PV-MOVE (+ BADR #o32)))))
	      (RETURN (LIST M1)))
	     ((OR (= SETD 2)
		  (NULL (SETQ M3 (CHEOPS-CONVERT-PV-MOVE (+ BADR #o34)))))
	      (RETURN (LIST M1 M2)))
	     (T (RETURN (LIST M1 M2 M3))))))

(DEFUN CHEOPS-CONVERT-PV (BADR)
  (PROG (SETD M1 M2 M3)
       (SETQ SETD (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR 3)))
       (COND ((NULL (SETQ M1 (CHEOPS-CONVERT-PV-MOVE (+ BADR #o22))))
	      (RETURN NIL))
	     ((OR (= SETD 1)
		  (NULL (SETQ M2 (CHEOPS-CONVERT-PV-MOVE (+ BADR #o24)))))
	      (RETURN (LIST M1)))
	     ((OR (= SETD 2)
		  (NULL (SETQ M3 (CHEOPS-CONVERT-PV-MOVE (+ BADR #o26)))))
	      (RETURN (LIST M1 M2)))
	     (T (RETURN (LIST M1 M2 M3))))))

(DEFUN CHEOPS-CONVERT-PV-MOVE (B-REL-ADR &AUX WD1 WD2 MOVING-PC CPN TO-SQ TW TEM)
  (PROG NIL 
       (COND ((ZEROP (SETQ WD1 (AR-1 CHEOPS-BUFFER-MEMORY B-REL-ADR)))
	      (RETURN NIL)))	;MATE OR STALEMATE IN THIS POSITION
       (SETQ WD2 (AR-1 CHEOPS-BUFFER-MEMORY (1+ B-REL-ADR)))
       (SETQ MOVING-PC (AR-1 C-MAP-TO-LISPM-PIECE (SETQ CPN (LSH WD1 -8))))
       (SETQ TO-SQ (AR-1 C-MAP-TO-LISPM-SQUARE (LOGAND WD2 #o377)))
       (COND ((AND (EQ (SETQ TW (AR-1 (PIECE-TYPE-WOOD-ARRAY PIECE-ARRAY)
				      MOVING-PC))
		       'KING)
		   (= 2 (ABS (SETQ TEM (- TO-SQ 
					  (AR-1 C-MAP-TO-LISPM-SQUARE   ;FROM SQUARE
						(LOGAND WD1 #o377)))))))
	      (RETURN (LIST 'MOVE MOVING-PC NIL (COND ((MINUSP TEM) 'CASTLES-QUEEN)
						      (T 'CASTLES-KING)))))
	     ((< CPN #o30)	;WHITE P, NOT PROMOTED
	      (COND ((= 1 (ABS (- TO-SQ (AR-1 C-MAP-TO-LISPM-SQUARE     ;FROM SQUARE
					      (LOGAND WD1 #o377)))))
		     (RETURN (LIST 'MOVE 
				   MOVING-PC       ;ON E-P, CHEOPS RETURNS
				   (+ TO-SQ BOARD-WIDTH)  ; P(B5)-N5 FOR EXAMPLE
				   'EN-PASSENT)))))
	     ((< CPN #o40)	;BLACK P, NOT PROMOTED
	      (COND ((= 1 (ABS (- TO-SQ (AR-1 C-MAP-TO-LISPM-SQUARE     ;FROM SQUARE
					      (LOGAND WD1 #o377)))))
		     (RETURN (LIST 'MOVE MOVING-PC (- TO-SQ BOARD-WIDTH) 'EN-PASSENT))))))
       (RETURN (LIST 'MOVE MOVING-PC TO-SQ))
))

;NOTE:  MODES SHOULD NORMALLY HAVE #o2000 BIT (INCR DEPTH) AND #o1000 BIT (PROCESS CHAIN
;       BLOCK) SET.  DUE TO THE INCREMENT-FIRST FEATURE OF #o2000 BIT, SETD SHOULD BE
;       ONE LESS THAN THE FIRST SETD WHICH IT IS DESIRED TO PERFORM.
(DEFUN CHEOPS-START-BACKGROUND-RING-FROM-MOVE-LIST (MOVE-LIST MODES SETD 
   &OPTIONAL (ALPHA #o-20000) (BETA #o20000) 
   	     (BADR CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK) 
             OPEN-RING-P)     ;IF NON-NIL, TERMINATE RING AT BOTTOM INSTEAD OF
                              ; CIRCULARIZING IT.
  (PROG (SIDE IDX LIM IBADR LBADR OTHER-SIDE MAT)
	(SETQ SIDE (MOVE-LIST-SIDE MOVE-LIST))
	(AS-1 #o177777 CHEOPS-BUFFER-MEMORY CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER)
	(SETQ OTHER-SIDE (LOGXOR #o20 SIDE))  ;A MOVE WILL BE PLAYED BEFORE 
					    ; CHEOPS SEES THE POSITION.
	(MAKUNBOUND 'CHEOPS-BACKGROUND-RESULTS-ARRAY)
	(SETQ CHEOPS-BACKGROUND-RING-POSITION C-CURRENT-POSITION)
	(SETQ CHEOPS-BACKGROUND-MOVE-LIST MOVE-LIST)
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
	(COND ((ZEROP LIM) (RETURN NIL)))   ;MATED OR SOMETHING, NO DICE
	(SETQ IBADR BADR)
	(SETQ MAT (- (+ (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
			(PIECE-WHITE-MAT-PCS PIECE-ARRAY))
		     (+ (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			(PIECE-BLACK-MAT-PCS PIECE-ARRAY))))
   L	(COND ((NOT (< BADR CHEOPS-BUFFER-MEMORY-LENGTH))
	       (PRINC "CHEOPS BUFFER MEMORY OVERFLOW")
	       (GO X)))
   	(COND ((EQ (AR-1 MOVE-LIST (+ IDX C-MVL-STATE))
		  'ILLEGAL)
	       (GO E0)))
   	(COND ((NULL (C-PLAY-MOVE-FROM-MOVE-LIST MOVE-LIST IDX))
	       (GO E0)))    ;EVIDENTLY, HE S IN CHECK. (BETTER BE FOR-HIM...)
;	(COND ((COND ((WHITE-TO-MOVE-P)		  ;THIS SLOWS THINGS DOWN TOO MUCH
;		      (BLACK-KING-IN-CHECK-P))    ;JUST GO AHEAD AND SEND OVER ILLEGAL
;		     (T (WHITE-KING-IN-CHECK-P))) ;POSITIONS -HA HA.
;	       (C-REVERT-MOVE)
;	       (AS-1 'ILLEGAL MOVE-LIST (+ IDX C-MVL-STATE))
;	       (GO E0)))
;STORE THE RIGHT THING IN C-MVL-CH-RESULT-DELTA TO REFLECT THE CAPTURE, IF ANY,
; IN THE PLAYED MOVE.  THUS, C-MVL-CH-RESULT-DELTA WINDS UP BEING THE TOTAL
; DELTA FROM C-CURRENT-POSITION.
	(AS-1 (// (- (- (+ (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
			   (PIECE-WHITE-MAT-PCS PIECE-ARRAY))
			(+ (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			   (PIECE-BLACK-MAT-PCS PIECE-ARRAY)))
		     MAT)
		  CHEOPS-MATERIAL-VALUE-FACTOR)
	      MOVE-LIST
	      (+ IDX C-MVL-CH-RESULT-DELTA))
   	(CHEOPS-TRANSFER-POSITION BADR OTHER-SIDE MODES SETD ALPHA BETA)
	(AS-1 #o177777 CHEOPS-BUFFER-MEMORY BADR)	;SIGNAL DATA FOR CHEOPS IN BUFFER
	(C-REVERT-MOVE)
	(COND (LBADR (AS-1 (+ BADR CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR)
			   CHEOPS-BUFFER-MEMORY 
			   (+ LBADR CHEOPS-ARG-CHAIN-POINTER))))
	(SETQ LBADR BADR)
	(SETQ BADR (+ BADR CHEOPS-ARG-BLOCK-LENGTH))
   E0	(SETQ IDX (+ IDX C-MVL-NQS))
	(COND ((< IDX LIM) (GO L)))
   X	(COND ((NULL OPEN-RING-P)
               (AS-1 (+ IBADR CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR)	;CLOSE CHAIN
                     CHEOPS-BUFFER-MEMORY 
                     (+ LBADR CHEOPS-ARG-CHAIN-POINTER)))
              (T (AS-1 (- (AR-1 CHEOPS-BUFFER-MEMORY (+ LBADR CHEOPS-ARG-MODES))
                          #o1000)                 ;JUST TERMINATE CHAIN
                          CHEOPS-BUFFER-MEMORY 
                          (+ LBADR CHEOPS-ARG-MODES))))
    	(AS-1 (+ CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR IBADR)
	      CHEOPS-BUFFER-MEMORY 
	      CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER)
   	(RETURN T)
))

;NOTE:  MODES SHOULD NORMALLY HAVE #o2000 BIT (INCR DEPTH) AND #o1000 BIT (PROCESS CHAIN
;       BLOCK) SET.  DUE TO THE INCREMENT-FIRST FEATURE OF #o2000 BIT, SETD SHOULD BE
;       ONE LESS THAN THE FIRST SETD WHICH IT IS DESIRED TO PERFORM.
(DEFUN CHEOPS-START-BACKGROUND-RING-FROM-RESULTS-ARRAY (RA MODES SETD 
   &OPTIONAL (ALPHA #o-20000) (BETA #o20000) 
   	     (BADR CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK) 
             OPEN-RING-P)     ;IF NON-NIL, TERMINATE RING AT BOTTOM INSTEAD OF
                              ; CIRCULARIZING IT.
  (PROG (IDX LIM SIDE OTHER-SIDE MOVE-LIST MOVE-LIST-IDX IBADR LBADR MAT)
	(SETQ MOVE-LIST (CHEOPS-RESULTS-MOVE-LIST-POINTER RA))
	(SETQ SIDE (MOVE-LIST-SIDE MOVE-LIST))
	(SETQ OTHER-SIDE (LOGXOR SIDE #o20))
	(AS-1 #o177777 CHEOPS-BUFFER-MEMORY CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER)
	(SETQ CHEOPS-BACKGROUND-RING-POSITION C-CURRENT-POSITION)
	(SETQ CHEOPS-BACKGROUND-MOVE-LIST MOVE-LIST)
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH RA))
	(COND ((ZEROP LIM) (RETURN NIL)))   ;MATED OR SOMETHING, NO DICE
	(SETQ IBADR BADR)
	(SETQ MAT (- (+ (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
			(PIECE-WHITE-MAT-PCS PIECE-ARRAY))
		     (+ (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			(PIECE-BLACK-MAT-PCS PIECE-ARRAY))))
   L	(SETQ MOVE-LIST-IDX (AR-1 RA IDX))
	(COND ((NOT (< BADR CHEOPS-BUFFER-MEMORY-LENGTH))
	       (PRINC "CHEOPS BUFFER MEMORY OVERFLOW")
	       (GO X)))
   	(COND ((MEMQ (AR-1 MOVE-LIST (+ MOVE-LIST-IDX C-MVL-STATE))
		     '(ILLEGAL CAPTURES-KING))
	       (GO E0)))
   	(COND ((NULL (C-PLAY-MOVE-FROM-MOVE-LIST MOVE-LIST MOVE-LIST-IDX))
	       (GO E0)))    ;EVIDENTLY, HE S IN CHECK. (BETTER BE FOR-HIM...)
;	(COND ((COND ((WHITE-TO-MOVE-P)		  ;THIS SLOWS THINGS DOWN TOO MUCH
;		      (BLACK-KING-IN-CHECK-P))    ;JUST GO AHEAD AND SEND OVER ILLEGAL
;		     (T (WHITE-KING-IN-CHECK-P))) ;POSITIONS -HA HA.
;	       (C-REVERT-MOVE)
;	       (AS-1 'ILLEGAL MOVE-LIST (+ MOVE-LIST-IDX C-MVL-STATE))
;	       (GO E0)))
;STORE THE RIGHT THING IN C-MVL-CH-RESULT-DELTA TO REFLECT THE CAPTURE, IF ANY,
; IN THE PLAYED MOVE.  THUS, C-MVL-CH-RESULT-DELTA WINDS UP BEING THE TOTAL
; DELTA FROM C-CURRENT-POSITION.
	(AS-1 (// (- (- (+ (PIECE-WHITE-MAT-PAWNS PIECE-ARRAY)
			   (PIECE-WHITE-MAT-PCS PIECE-ARRAY))
			(+ (PIECE-BLACK-MAT-PAWNS PIECE-ARRAY)
			   (PIECE-BLACK-MAT-PCS PIECE-ARRAY)))
		     MAT)
		  CHEOPS-MATERIAL-VALUE-FACTOR)
	      MOVE-LIST
	      (+ MOVE-LIST-IDX C-MVL-CH-RESULT-DELTA))
   	(CHEOPS-TRANSFER-POSITION BADR OTHER-SIDE MODES SETD ALPHA BETA)
	(AS-1 #o177777 CHEOPS-BUFFER-MEMORY BADR)	;SIGNAL DATA FOR CHEOPS IN BUFFER
	(C-REVERT-MOVE)
	(COND (LBADR (AS-1 (+ BADR CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR)
			   CHEOPS-BUFFER-MEMORY 
			   (+ LBADR CHEOPS-ARG-CHAIN-POINTER))))
	(SETQ LBADR BADR)
	(SETQ BADR (+ BADR CHEOPS-ARG-BLOCK-LENGTH))
   E0	(SETQ IDX (+ IDX C-CH-NQS))
	(COND ((< IDX LIM) (GO L)))
   X	(COND ((NULL OPEN-RING-P)
               (AS-1 (+ IBADR CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR)	;CLOSE CHAIN
                     CHEOPS-BUFFER-MEMORY 
                     (+ LBADR CHEOPS-ARG-CHAIN-POINTER)))
              (T (AS-1 (- (AR-1 CHEOPS-BUFFER-MEMORY (+ LBADR CHEOPS-ARG-MODES))
                          #o1000)                 ;JUST TERMINATE CHAIN
                          CHEOPS-BUFFER-MEMORY 
                          (+ LBADR CHEOPS-ARG-MODES))))
    	(AS-1 (+ CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR IBADR)
	      CHEOPS-BUFFER-MEMORY 
	      CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER)
   	(RETURN T)
))

(DEFUN C-GET-BASE-CHEOPS-RESULTS NIL 
       (COND ((GET C-CURRENT-POSITION 'BASE-CHEOPS-RESULTS))
	     (T (PUTPROP C-CURRENT-POSITION
			 (C-CREATE-BASE-CHEOPS-RESULTS)
			 'BASE-CHEOPS-RESULTS))))

(DEFUN C-CREATE-BASE-CHEOPS-RESULTS (&OPTIONAL (CHEOPS-SETD 3))
  (PROG (BCR V M STATA STATB VAR-LIST)
	(CHEOPS-START-PRIORITY #o400   ;BOTH-SIDES MODE
			       CHEOPS-SETD)
	(SETQ BCR (MAKE-ARRAY NIL ART-Q (BASE-CHEOPS-RESULTS-ARRAY-SIZE)
			      NIL NIL NIL 'BASE-CHEOPS-RESULTS))
	(MULTIPLE-VALUE (V M STATB STATA VAR-LIST) 
			(CHEOPS-FETCH-RESULTS CHEOPS-BUFFER-MEMORY-PRIORITY-BLOCK))
	(SETF (BASE-CHEOPS-RESULTS-VALUE BCR) V)
	(SETF (BASE-CHEOPS-RESULTS-CURRENT-MATERIAL BCR) M)
	(SETF (BASE-CHEOPS-RESULTS-DELTA BCR) (- V M))
	(SETF (BASE-CHEOPS-RESULTS-PV-LIST BCR) VAR-LIST)
	(MULTIPLE-VALUE (V VAR-LIST)
	   (CHEOPS-FETCH-OTHER-SIDE-RESULTS CHEOPS-BUFFER-MEMORY-PRIORITY-BLOCK))
	(SETF (BASE-CHEOPS-RESULTS-VALUE-WHTM BCR) V)
	(SETF (BASE-CHEOPS-RESULTS-PV-LIST-WHTM BCR) VAR-LIST)
	(RETURN BCR)
))

;RETURNS NIL IF DESIRED RESULTS EXIST ALREADY, NON-NIL IF REALLY STARTED CHEOPS.
; VALUE IF NON NIL, SHOULD BE FED TO CHEOPS-FIND-RESULTS-FINISH.
(DEFUN CHEOPS-FIND-RESULTS-START (MOVE-LIST SETD &OPTIONAL (ALPHA #o-20000) (BETA #o20000))
  (PROG (SIDE TEM PROP)
	(SETQ SIDE (MOVE-LIST-SIDE MOVE-LIST))
	(SETQ PROP (LIST SETD ALPHA BETA))
	(COND ((AND (SETQ TEM (ASSQM 'CHEOPS-RESULTS (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)))
		    (EQUAL PROP (CDR TEM)))
	       (RETURN NIL)))	;DESIRED RESULTS ALREADY THERE.
	(CHEOPS-ABORT-BACKGROUND-AND-CONFIRM)
	(CHEOPS-START-BACKGROUND-RING-FROM-MOVE-LIST 
	   MOVE-LIST
	   #o1000	   ;PROCESS CHAIN BLOCK, BUT NO INCR
	   SETD
	   ALPHA
	   BETA
	   CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK
	   T)	   ;MAKE IT AN OPEN RING
	(RETURN PROP)))

;CALL THIS ONLY IF CHEOPS WAS STARTED BY CHEOPS-FIND-RESULTS-START 
;ARG IS VALUE OF CHEOPS-RESULTS-START.
(DEFUN CHEOPS-FIND-RESULTS-FINISH (PROP) 
  (PROG (TEM)
       (CHEOPS-RETURN-RESULTS-INTO-MOVE-LIST)
       (COND ((SETQ TEM (ASSQM 'CHEOPS-RESULTS
			       (MOVE-LIST-COMPUTED-KEYS CHEOPS-BACKGROUND-MOVE-LIST)))
	      (RPLACD TEM PROP))
	     (T (SETF (MOVE-LIST-COMPUTED-KEYS CHEOPS-BACKGROUND-MOVE-LIST)
		      (CONS (CONS 'CHEOPS-RESULTS PROP)
			    (MOVE-LIST-COMPUTED-KEYS CHEOPS-BACKGROUND-MOVE-LIST)))))
))

(DEFUN CHEOPS-COMPUTE-RESULTS (SETD &OPTIONAL SIDE (ALPHA #o-20000) (BETA #o20000))
  (PROG (CHEOPS-BACKGROUND-RESULTS-ARRAY MOVE-LIST TEM)
	(CHEOPS-ABORT-BACKGROUND-AND-CONFIRM)
	(COND ((NULL SIDE) 
	       (SETQ SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
			       #o0401
			       0))))
	(SETQ MOVE-LIST (C-GET-MOVE-LIST-OF-SIDE SIDE))
	(SETQ CHEOPS-BACKGROUND-RESULTS-ARRAY (CHEOPS-ALLOCATE-RESULTS-ARRAY MOVE-LIST))
	(CHEOPS-START-BACKGROUND-RING-FROM-RESULTS-ARRAY
	    CHEOPS-BACKGROUND-RESULTS-ARRAY 
	    #o1000  ;PROCESS CHAIN BLOCK, BUT NO INCR
	    SETD 
	    ALPHA 
	    BETA
	    CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK 
	    T)    ;MAKE IT AN OPEN RING
	(COND ((NOT (MEMQ 'POSITIONALITIES (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)))
	       (C-FILL-IN-POSITIONALITIES MOVE-LIST)))
	(COND ((= SIDE (LOGAND 1 (GAME-PLY-NUMBER GAME-ARRAY)))
	       (PUTPROP CHEOPS-BACKGROUND-RING-POSITION 
			(CHEOPS-RETURN-RESULTS-ARRAY)
			'CHEOPS-RESULTS))
	      (T (PUTPROP CHEOPS-BACKGROUND-RING-POSITION 
			  (CHEOPS-RETURN-RESULTS-ARRAY)
			  'HIS-CHEOPS-RESULTS)))
	(COND ((SETQ TEM (ASSQM 'CHEOPS-RESULTS (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)))
	       (RPLACD TEM (LIST SETD ALPHA BETA)))
	      (T (SETF (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)
		       (CONS (LIST 'CHEOPS-RESULTS SETD ALPHA BETA)
			     (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)))))
	(SORT CHEOPS-BACKGROUND-RESULTS-ARRAY
	      (COND ((ZEROP SIDE) (FUNCTION CHEOPS-LESSP-WHITE))
		    (T (FUNCTION CHEOPS-LESSP-BLACK))))
	(RETURN CHEOPS-BACKGROUND-RESULTS-ARRAY)))

(DEFUN CHEOPS-LESSP-WHITE (MOVE-IDX1 MOVE-IDX2 &AUX V1 V2)
  (COND ((> (SETQ V1 (AR-1 CHEOPS-BACKGROUND-MOVE-LIST
			   (+ MOVE-IDX1 C-MVL-CH-RESULT-VALUE)))
	    (SETQ V2 (AR-1 CHEOPS-BACKGROUND-MOVE-LIST
			   (+ MOVE-IDX2 C-MVL-CH-RESULT-VALUE))))
	 T)
	((< V1 V2)
	 NIL)
	(T (> (AR-1 CHEOPS-BACKGROUND-MOVE-LIST (+ MOVE-IDX1 C-MVL-MOVE-POSITIONALITY))
	      (AR-1 CHEOPS-BACKGROUND-MOVE-LIST (+ MOVE-IDX2 C-MVL-MOVE-POSITIONALITY))))))

(DEFUN CHEOPS-LESSP-BLACK (MOVE-IDX1 MOVE-IDX2 &AUX V1 V2)
  (COND ((< (SETQ V1 (AR-1 CHEOPS-BACKGROUND-MOVE-LIST
			   (+ MOVE-IDX1 C-MVL-CH-RESULT-VALUE)))
	    (SETQ V2 (AR-1 CHEOPS-BACKGROUND-MOVE-LIST
			   (+ MOVE-IDX2 C-MVL-CH-RESULT-VALUE))))
	 T)
	((> V1 V2)
	 NIL)
	(T (> (AR-1 CHEOPS-BACKGROUND-MOVE-LIST (+ MOVE-IDX1 C-MVL-MOVE-POSITIONALITY))
	      (AR-1 CHEOPS-BACKGROUND-MOVE-LIST (+ MOVE-IDX2 C-MVL-MOVE-POSITIONALITY))))))

(DEFUN CHEOPS-ALLOCATE-RESULTS-ARRAY (MOVE-LIST) 
  (PROG (SIDE IDX LIM RA)
	(SETQ SIDE (MOVE-LIST-SIDE MOVE-LIST))
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
	(SETQ RA (MAKE-ARRAY NIL 'ART-Q (// LIM C-MVL-NQS)
			 NIL (CHEOPS-RESULTS-ARRAY-LEADER-SIZE)
			 NIL 'CHEOPS-RESULTS))
	(SETF (CHEOPS-RESULTS-FILL-POINTER RA) 0)
	(SETF (CHEOPS-RESULTS-MOVE-LIST-POINTER RA)
	      MOVE-LIST)
   L	(COND ((NOT (< IDX LIM)) (GO X))
	      ((MEMQ (AR-1 MOVE-LIST (+ IDX C-MVL-STATE))
		     '(CAPTURES-KING ILLEGAL))
	       (GO E0)))
;STORE THE RIGHT THING IN C-MVL-CH-RESULT-DELTA TO REFLECT THE CAPTURE, IF ANY,
; IN THE PLAYED MOVE.  THUS, C-MVL-CH-RESULT-DELTA WINDS UP BEING THE TOTAL
; DELTA FROM C-CURRENT-POSITION.
;   	(AS-1 (COND ((EQ (SETQ CODE (AR-1 MOVE-LIST (+ IDX C-MVL-CODE)))
;			 'EN-PASSENT)
;		     (COND ((ZEROP SIDE) 8.)
;			   (T -8)))
;		    ((OR (MEMQ CODE 
;			       '(CASTLES-KING CASTLES-QUEEN))
;			 (= (SETQ SQC (AR-1 BOARD-ARRAY (AR-1 MOVE-LIST (+ IDX C-MVL-TO-SQ))))
;			    SQUARE-VACANT))
;		     '0)
;		    ((ZEROP SIDE)
;		     (AR-1 TYPE-WOOD-CHEOPS-VALUE-ARRAY 
;			   (AR-1 (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY)
;				 SQC)))
;		    (T
;		     (MINUS (AR-1 TYPE-WOOD-CHEOPS-VALUE-ARRAY 
;				  (AR-1 (PIECE-TYPE-WOOD-NUMBER-ARRAY PIECE-ARRAY)
;					SQC)))))
;	      MOVE-LIST
;	      (+ IDX C-MVL-CH-RESULT-DELTA))
   	(ARRAY-PUSH RA IDX)
   E0	(SETQ IDX (+ IDX C-MVL-NQS))
	(GO L)
   X	(ADJUST-ARRAY-SIZE RA (CHEOPS-RESULTS-FILL-POINTER RA))  ;TO PREVENT SORT FROM 
  	(RETURN RA)))						 ; LOSING EVENTUALLY

(DECLARE (SPECIAL SPECIAL-IMP-ARRAY SPECIAL-ACCUM-POS))

(DEFUN C-FILL-IN-POSITIONALITIES (MOVE-LIST)
  (PROG (SIDE IDX LIM POS BOS SQUARE-VACATED TEM CURRENT-PIECE 
	 SPECIAL-IMP-ARRAY SPECIAL-ACCUM-POS MOVING-PIECE)
	(SETQ SIDE (MOVE-LIST-SIDE MOVE-LIST))
;	(COND ((NULL (BOARD-CAT-DATA-VALID BOARD-ARRAY))  ;THERE APPEARS TO BE NO NEED
;	       (C-CALCULATE-ATTACKS)))			  ; FOR THIS.
	(SETQ BOS (C-GET-OUR-SQUARE-BEARS))	;*** SHOULD WIN WITH SIDE***
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
	(SETQ SPECIAL-IMP-ARRAY (COND ((WHITE-TO-MOVE-P) 
				       (BOARD-WHITE-IMPORTANCE-ARRAY BOARD-ARRAY))
				      (T (BOARD-BLACK-IMPORTANCE-ARRAY BOARD-ARRAY))))
    L   (COND ((NOT (< IDX LIM))
	       (SETF (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)
		     (CONS 'POSITIONALITIES
			   (MOVE-LIST-COMPUTED-KEYS MOVE-LIST)))
	       (RETURN MOVE-LIST)))
    	(SETQ POS (C-MOVE-POSITIONALITY MOVE-LIST IDX))
	(SETQ SQUARE-VACATED 
	      (AR-1 PIECE-ARRAY 
		    (SETQ MOVING-PIECE (AR-1 MOVE-LIST (+ IDX C-MVL-MOVING-PC)))))
	(DO ((UBL (AR-1 BOS SQUARE-VACATED) (CDR UBL))
	     (TO-SQ (AR-1 MOVE-LIST (+ IDX C-MVL-TO-SQ))))
	    ((NULL UBL))
	    (COND ((AND (SETQ TEM (CADAR UBL))		;DIR
			(NULL (CADDAR UBL)))		;MAKE SURE NOT THRU
		   (SETQ SPECIAL-ACCUM-POS 0)
		   (SETQ CURRENT-PIECE (CAAR UBL))
		   (COND ((DIAGONAL-P TEM)
			  (C-A-EXTEND-BISHOP-LINE (FUNCTION C-POSITION-ADDUP)
						  SQUARE-VACATED 
						  TEM 
						  TO-SQ))
			 (T (C-A-EXTEND-ROOK-LINE (FUNCTION C-POSITION-ADDUP)
						  SQUARE-VACATED 
						  TEM 
						  TO-SQ)))
		   (SETQ POS (+ POS (* (AR-1 (PIECE-POSITIONAL-WEIGHTING-FACTOR-ARRAY 
					         PIECE-ARRAY)
					     CURRENT-PIECE)
				       SPECIAL-ACCUM-POS))) )))
    	(AS-1 POS MOVE-LIST (+ IDX C-MVL-MOVE-POSITIONALITY))
	(SETQ IDX (+ IDX C-MVL-NQS))
	(GO L)))

;CALL THIS IFF BACKGROUND RING STARTED BY CHEOPS-START-BACKGROUND-RING-FROM-RESULTS-ARRAY
(DEFUN CHEOPS-RETURN-RESULTS-ARRAY NIL  
  (PROG (RA IDX LIM MOVE-LIST MOVE-LIST-IDX BADR V M STATB STATA VAR-LIST SETD1)
	(SETQ RA CHEOPS-BACKGROUND-RESULTS-ARRAY)
	(SETQ MOVE-LIST CHEOPS-BACKGROUND-MOVE-LIST)
	(SETQ IDX 0 LIM (ARRAY-ACTIVE-LENGTH RA))
	(SETQ BADR (- (AR-1 CHEOPS-BUFFER-MEMORY 
			    CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER)
		      CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR))
    L	(COND ((NOT (< IDX LIM)) (RETURN RA)))
    	(SETQ MOVE-LIST-IDX (AR-1 RA IDX))
    L0	(SETQ SETD1 (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR CHEOPS-ARG-SETD)))
	(MULTIPLE-VALUE (V M STATB STATA VAR-LIST)
			 (CHEOPS-FETCH-RESULTS BADR))
	(COND ((NOT (= (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR CHEOPS-ARG-SETD))
		       SETD1))
	       (GO L0)))	;CHEOPS COMPLETED NEW PLY, RESULTS MAY BE INVALID
	(AS-1 V MOVE-LIST (+ MOVE-LIST-IDX C-MVL-CH-RESULT-VALUE))
	(AS-1 (+ (- V M)
		 (AR-1 MOVE-LIST (+ MOVE-LIST-IDX C-MVL-CH-RESULT-DELTA)))
	      MOVE-LIST
	      (+ MOVE-LIST-IDX C-MVL-CH-RESULT-DELTA))
	(AS-1 VAR-LIST MOVE-LIST (+ MOVE-LIST-IDX C-MVL-CH-PV-LIST))
;	(AS-1 SETD1 RA (+ IDX C-CH-SETD))
	(SETQ BADR (+ BADR CHEOPS-ARG-BLOCK-LENGTH))
	(SETQ IDX (+ IDX C-CH-NQS))
 	(GO L)
 ))

;CALL THIS IFF BACKGROUND RING STARTED BY CHEOPS-START-BACKGROUND-RING-FROM-MOVE-LIST.
(DEFUN CHEOPS-RETURN-RESULTS-INTO-MOVE-LIST NIL  
  (PROG (LIM MOVE-LIST MOVE-LIST-IDX BADR V M STATB STATA VAR-LIST SETD1)
	(SETQ MOVE-LIST CHEOPS-BACKGROUND-MOVE-LIST)
	(SETQ MOVE-LIST-IDX 0 LIM (ARRAY-ACTIVE-LENGTH MOVE-LIST))
	(SETQ BADR (- (AR-1 CHEOPS-BUFFER-MEMORY 
			    CHEOPS-BUFFER-MEMORY-BACKGROUND-BLOCK-POINTER)
		      CHEOPS-BUFFER-MEMORY-UNIBUS-WD-ADR))
    L	(COND ((NOT (< MOVE-LIST-IDX LIM)) (RETURN NIL)))
    L0	(SETQ SETD1 (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR CHEOPS-ARG-SETD)))
	(MULTIPLE-VALUE (V M STATB STATA VAR-LIST)
			 (CHEOPS-FETCH-RESULTS BADR))
	(COND ((NOT (= (AR-1 CHEOPS-BUFFER-MEMORY (+ BADR CHEOPS-ARG-SETD))
		       SETD1))
	       (GO L0)))	;CHEOPS COMPLETED NEW PLY, RESULTS MAY BE INVALID
	(AS-1 V MOVE-LIST (+ MOVE-LIST-IDX C-MVL-CH-RESULT-VALUE))
	(AS-1 (+ (- V M)
		 (AR-1 MOVE-LIST (+ MOVE-LIST-IDX C-MVL-CH-RESULT-DELTA)))
	      MOVE-LIST
	      (+ MOVE-LIST-IDX C-MVL-CH-RESULT-DELTA))
	(AS-1 VAR-LIST MOVE-LIST (+ MOVE-LIST-IDX C-MVL-CH-PV-LIST))
	(SETQ BADR (+ BADR CHEOPS-ARG-BLOCK-LENGTH))
	(SETQ MOVE-LIST-IDX (+ MOVE-LIST-IDX C-MVL-NQS))
 	(GO L)
 ))