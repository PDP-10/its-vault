;;; -*-Mode:LISP; Package:USER; Base: 10. -*-
;READ IN LCHESS;CHDEFS > BEFORE RUNNING THIS INTERPRETED..

(DEFUN C-CREATE-SQUARE-CONTROL-ARRAY NIL 
 (PROG (PIA SIDE WBOS BBOS SQA)
       (SETQ SIDE (DPB (GAME-PLY-NUMBER GAME-ARRAY)
		       #o0401
		       0))
       (COND ((NULL (SETQ PIA (GET C-CURRENT-POSITION 'C-POSITION-INFO)))
	      (SETQ PIA (C-CREATE-POSITION-INFO-ARRAY))))
       (COND ((ZEROP SIDE)
	      (SETQ WBOS (C-POS-BEARS-ON-SQUARE PIA))
	      (SETQ BBOS (C-POS-HIS-BEARS-ON-SQUARE PIA)))
	     (T
	      (SETQ WBOS (C-POS-HIS-BEARS-ON-SQUARE PIA))
	      (SETQ BBOS (C-POS-BEARS-ON-SQUARE PIA))))
       (SETQ SQA (MAKE-ARRAY NIL 'ART-Q BOARD-SIZE NIL 
			     (SQUARE-CONTROL-ARRAY-LEADER-SIZE) NIL 'SQUARE-CONTROL))
       (DO SQ BOARD-WIDTH*2 (1+ SQ) (= SQ BOARD-WIDTH*10)
	    (COND ((NOT (= (AR-1 BOARD-ARRAY SQ)
			   SQUARE-OFF-BOARD))
		   (AS-1 (C-SQC-SWAPOUT SQ 
					(AR-1 WBOS SQ)
					(AR-1 BBOS SQ))
			 SQA
			 SQ))))
       (RETURN SQA)
))

;C-CREATE-SQUARE-BEARS DOES THIS NOW.
(DEFUN C-SQC-SORT (PL)
 (PROG (PVA L P1 P2 V1 V2 SWITCH)
       (COND ((NULL PL) (RETURN NIL))
	     ((NULL (CDR PL)) (RETURN PL)))
       (SETQ PVA (PIECE-VALUE-ARRAY PIECE-ARRAY))
  L0   (SETQ L PL)
  L1   (SETQ V1 (AR-1 PVA (CAR (SETQ P1 (CAR L)))))
       (SETQ V2 (AR-1 PVA (CAR (SETQ P2 (CADR L)))))
       (COND ((AND (< V2 V1)
		   (OR (NOT (EQ (CADDR P2) 'THRU))
		       (NOT (EQ (CADR P1) (CADR P2)))))
	      (RPLACA L P2)
	      (RPLACA (CDR L) P1)
	      (SETQ SWITCH T)))
       (SETQ L (CDR L))
       (COND ((CDR L)
	      (GO L1))
	     (SWITCH
	      (SETQ SWITCH NIL)
	      (GO L0)))
       (RETURN PL)
))

; GIVEN THE SORTED BEARS-ON-SQUARE LIST FOR THE TWO SIDES, ASSIGN
;SQUARE-CONTROL FOR SQUARE.
; A NOTE RE STRONG-CONTROL (AND ABOVE).  A SQUARE-CONTROL OF XXX-STRONG-CONTROL 
;IMPLIES A THREAT TO MOVE INTO THE SQUARE.  THUS, YOU CANNOT HAVE STRONG-CONTROL OR
;MORE IF (1) THE SQUARE IS OCCUPIED BY OWN SIDE.
;     OR (2) THE SQUARE IS ATTACKED ONLY BY PAWNS AND NO PAWN THREATENS TO PUSH-IN.

(DEFUN C-SQC-SWAPOUT (SQ WL BL)
 (PROG (WPC BPC WPV BPV PVA ANS PC)
       (SETQ PVA (PIECE-VALUE-ARRAY PIECE-ARRAY))
       (SETQ PC (AR-1 BOARD-ARRAY SQ))
       (COND ((NULL WL) (GO MSQC1))		;NOT CONTESTED BY WHITE
	     ((NULL BL) (GO MSQC2)))		;NOT CONTESTED BY BLACK
       (SETQ WPC (CAR WL) BPC (CAR BL))
       (COND ((= (SETQ BPV (AR-1 PVA (CAR BPC)))
		 (SETQ WPV (AR-1 PVA (CAR WPC))))
	      (GO MSQC4))		        ;LEST VAL PCS EVEN
	     ((< BPV WPV)
	      (GO MSQC5)))			;BLACK HAS THE SMALLEST
;GET HERE IF WHITE HAS THE SMALLEST
       (COND ((CDR BL)
	      (GO MSQC8A))			;BLACK HAS MORE THAN 1
	     ((CDR WL)				;WHITE HAS 2 AGAINST ONE
	      (SETQ ANS 'WHITE-STRONG-CONTROL)) ; UNLESS WHITE HAS ONLY PAWNS ...
	     (T 
	      (SETQ ANS 'WHITE-DEFENDED)
	      (GO MSQC2A)))
;GET HERE IF WHITE HAS THE SMALLEST, BUT BLACK HAS MORE THAN ONE.
 MSQC8A	(COND ((> (LENGTH WL) (LENGTH BL))
	       (SETQ ANS 'WHITE-CONTROL)
	       (GO WE))
	      (T (SETQ ANS 'WHITE-DEFENDED)
		 (GO MSQC2A)))
;GET HERE IF BLACK HAS THE SMALLEST
  MSQC5	(COND ((CDR WL)
	       (GO MSQC5A))
	      ((CDR BL)
	       (SETQ ANS 'BLACK-STRONG-CONTROL)
	       (GO BE))
	      (T (SETQ ANS 'BLACK-DEFENDED)
		 (GO MSQC1A)))   ;UNLESS HE CAN PUSH IN ...
;GET HERE IF BLACK HAS THE SMALLEST, BUT WHITE HAS MORE THAN ONE
  MSQC5A (COND ((> (LENGTH BL) (LENGTH WL))
		(SETQ ANS 'BLACK-CONTROL)
		(GO BE))
	       (T (SETQ ANS 'BLACK-DEFENDED)
		  (GO MSQC1A)))
;GET HERE IF NOT CONTESTED BY WHITE
 MSQC1	(COND ((NULL BL)
	       (SETQ ANS 'UNCONTESTED)
	       (GO X))
	      (T (SETQ ANS 'BLACK-UNCONTESTED)))
        (SETQ BPC (CAR BL))
;ABOUT TO GIVE BLACK A GOOD CONTROL, SEE IF REALLY WANT TO DO IT.
 BE	(COND ((AND (NOT (= PC SQUARE-VACANT))
		    (NOT (ZEROP (LOGAND PC #o20))))
	       (SETQ ANS 'BLACK-DEFENDED)	;BLACK GUY ALREADY THERE
	       (GO X)))
;NOW VERIFY BLACK HAS AT LEAST ONE NON-PAWN BEARING ON SQUARE.
 	(COND ((NOT (PAWN-P (CAR BPC)))
	       (GO X)))				;OK, HE GETS IT
	(SETQ BL (CDR BL))
 BE1	(COND ((NULL BL) (GO BE2))		;NO HE DOESNT
	      ((NOT (PAWN-P (CAAR BL)))
	       (GO X)))				;OK FOUND ONE
 	(SETQ BL (CDR BL))
	(GO BE1)
;GEE, NOTHING BUT PAWNS.  HE DOESNT GET HIS BANANA UNLESS A PAWN THREATENS TO PUSH IN.
 BE2	(COND ((CAT-BLACK-PAWN-PUSHABLE-IN-P SQ) (GO X)))
 	(SETQ ANS 'BLACK-DEFENDED)
	(GO X)
 MSQC2	(SETQ ANS 'WHITE-UNCONTESTED)
        (SETQ WPC (CAR WL))
;ABOUT TO GIVE WHITE A GOOD CONTROL, SIMILAR TO BE
 WE	(COND ((AND (NOT (= PC SQUARE-VACANT))
		    (ZEROP (LOGAND PC #o20)))
	       (SETQ ANS 'WHITE-DEFENDED)
	       (GO X)))
;NOW VERIFY WHITE HAS AT LEAST ONE NON-P
 	(COND ((NOT (PAWN-P (CAR WPC)))
	       (GO X)))
	(SETQ WL (CDR WL))
 WE1	(COND ((NULL WL) (GO WE2))
	      ((NOT (PAWN-P (CAAR WL)))
	       (GO X)))
	(SETQ WL (CDR WL))
	(GO WE1)
;NOTHING BUT PAWNS
 WE2	(COND ((CAT-WHITE-PAWN-PUSHABLE-IN-P SQ) (GO X)))
 	(SETQ ANS 'WHITE-DEFENDED)
	(GO X)
;LEAST VAL EVEN
 MSQC4	(COND ((OR (PAWN-P (CAR WPC))
		   (= (SETQ WPV (LENGTH WL)) (SETQ BPV (LENGTH BL))))
	       (SETQ ANS 'EVEN)
	       (GO X))
	      ((< BPV WPV)
	       (SETQ ANS 'WHITE-CONTROL)
	       (GO X))
	      (T (SETQ ANS 'BLACK-CONTROL)
		 (GO X)))
   X	(RETURN ANS)
 MSQC1A (COND ((AND (= SQ SQUARE-VACANT)   ;BLACK HAS SMALLEST, BUT DOESNT QUITE MAKE IT..
		    (CAT-BLACK-PAWN-PUSHABLE-IN-P SQ))
	       (SETQ ANS 'BLACK-STRONG-CONTROL)))
 	(GO X)
 MSQC2A	(COND ((AND (= SQ SQUARE-VACANT)   ;WHITE HAS SMALLEST, BUT..
		    (CAT-WHITE-PAWN-PUSHABLE-IN-P SQ))
	       (SETQ ANS 'WHITE-STRONG-CONTROL)))
 	(GO X)
))

(DEFUN CAT-WHITE-PAWN-PUSHABLE-IN-P (SQ &AUX PC)
       (COND ((NOT (= (AR-1 BOARD-ARRAY SQ) SQUARE-VACANT))
	      NIL)
	     ((AND (NOT (= (SETQ PC (AR-1 BOARD-ARRAY (SETQ SQ (- SQ BOARD-WIDTH))))
			   SQUARE-VACANT))
		   (WHITE-P PC)
		   (PAWN-P PC))
	      T)
	     ((OR (NOT (= (AR-1 C-BOARD-WHITE-RANK-NUMBER SQ) 3))
		  (NOT (= PC SQUARE-VACANT)))
	      NIL)
	     ((AND (NOT (= (SETQ PC (AR-1 BOARD-ARRAY (- SQ BOARD-WIDTH)))
			   SQUARE-VACANT))
		   (WHITE-P PC)
		   (PAWN-P PC))
	      T)))

(DEFUN CAT-BLACK-PAWN-PUSHABLE-IN-P (SQ &AUX PC)
       (COND ((NOT (= (AR-1 BOARD-ARRAY SQ) SQUARE-VACANT))
	      NIL)
	     ((AND (NOT (= (SETQ PC (AR-1 BOARD-ARRAY (SETQ SQ (+ SQ BOARD-WIDTH))))
			   SQUARE-VACANT))
		   (NOT (WHITE-P PC))
		   (PAWN-P PC))
	      T)
	     ((OR (NOT (= (AR-1 C-BOARD-WHITE-RANK-NUMBER SQ) 6))
		  (NOT (= PC SQUARE-VACANT)))
	      NIL)
	     ((AND (NOT (= (SETQ PC (AR-1 BOARD-ARRAY (+ SQ BOARD-WIDTH)))
			   SQUARE-VACANT))
		   (NOT (WHITE-P PC))
		   (PAWN-P PC))
	      T)))

;THIS FILE HAS VARIOUS CALCULATE ATTACKS TYPE ROUTINES.  HOPEFULLY, THEY WILL EVENTUALLY
; MOSTLY BE MICROCODED.
;(DEFUN CAT-SETUP-SWAPOUT-LISTS (SQ)
;  (PROG (WSOL BSOL LIM BDAA PVA BCWA IDX PC I1 WARN)
;	(SETQ PVA (PIECE-VALUE-ARRAY PIECE-ARRAY))
;	(SETQ WSOL (AR-1 (BOARD-WHITE-SWAPOUT-LIST-ARRAY BOARD-ARRAY) SQ))
;	(SETQ BSOL (AR-1 (BOARD-BLACK-SWAPOUT-LIST-ARRAY BOARD-ARRAY) SQ))
;	(SETQ BDAA (BOARD-BDA-ARRAY BOARD-ARRAY))
;	(STORE-ARRAY-LEADER 0 WSOL 0)	;RESET FILL POINTERS.
;	(STORE-ARRAY-LEADER 0 BSOL 0)
;	(AS-1 NIL (SETQ BCWA (BOARD-CONTROL-WARNING-ARRAY BOARD-ARRAY)) SQ)
;	(SETQ LIM (LSH (1+ SQ) 4))
;	(SETQ IDX (LSH SQ 4))
;   L    (COND ((= (SETQ PC (AR-1 BDAA IDX))
;		  #o200)
;	       (GO E))
;	      ((WHITE-P PC)
;	       (GO WP)))
;   	(COND ((NULL (SETQ I1 (ARRAY-PUSH BSOL PC)))
;	       (SETQ WARN 'BLACK-OVERFLOW)
;	       (GO WARN)))	;SWAPOUT LIST ARRAY FULL
;   L1   (COND ((OR (ZEROP I1)
;		   (NOT (< (AR-1 PVA PC)
;			   (AR-1 PVA (AR-1 BSOL (1- I1))))))
;	       (GO E)))
;  	(AS-1 (AR-1 BSOL (1- I1))
;	      BSOL 
;	      I1)
;	(AS-1 PC BSOL (SETQ I1 (1- I1)))
;	(GO L1)
;  WARN	(AS-1 WARN BCWA SQ)
;  E	(COND ((NOT (= (SETQ IDX (1+ IDX))
;		       LIM))
;	       (GO L)))
;  	(RETURN T)
;  WP	(COND ((NULL (SETQ I1 (ARRAY-PUSH WSOL PC)))
;	       (SETQ WARN 'WHITE-OVERFLOW)
;	       (GO WARN)))
;  L2	(COND ((OR (ZEROP I1)
;		   (NOT (< (AR-1 PVA PC)
;			   (AR-1 PVA (AR-1 WSOL (1- I1))))))
;	       (GO E)))
;  	(AS-1 (AR-1 WSOL (1- I1))
;	      WSOL 
;	      I1)
;	(AS-1 PC WSOL (SETQ I1 (1- I1)))
;	(GO L2)
;))
;
;
;(DEFUN CAT-CALCULATE-SQUARE-CONTROLS NIL 
;  (PROG (PKSA) 
;	(DO SQ BOARD-WIDTH*2 (1+ SQ) (= SQ BOARD-WIDTH*10)
;	    (COND ((NOT (= (AR-1 BOARD-ARRAY SQ)
;			   SQUARE-OFF-BOARD))
;		   (CAT-SETUP-SWAPOUT-LISTS SQ))))
;	(SETQ PKSA (PIECE-KEY-SQUARES-ARRAY PIECE-ARRAY))
;	(DO PC 0 (1+ PC) (= PC PIECE-ARRAY-SIZE)
;	    (STORE-ARRAY-LEADER 0 (AR-1 PKSA PC) 0))	;RESET KEY SQUARES FILL POINTERS
;	(DO SQ BOARD-WIDTH*2 (1+ SQ) (= SQ BOARD-WIDTH*10)
;	    (COND ((NOT (= (AR-1 BOARD-ARRAY SQ)
;			   SQUARE-OFF-BOARD))
;		   (CAT-CALCULATE-SQUARE-CONTROL SQ))))
;	(SETF (BOARD-SQUARE-CONTROL-DATA-VALID BOARD-ARRAY) T)
;))

; GIVEN A SQUARE WITH FILLED IN SWAPOUT-LIST-ARRAY-ENTRIES,  ASSIGN ITS SQUARE CONTROL.
;STORE THE SQUARE IN THE PC-KEY-SQUARES-ARRAY FOR PIECES WHICH WERE CRITICAL IN
;DETERMINING THE SQUARE CONTROL.
;MORE IF (1) THE SQUARE IS OCCUPIED BY OWN SIDE.
;     OR (2) THE SQUARE IS ATTACKED ONLY BY PAWNS AND NO PAWN THREATENS TO PUSH-IN.
;(DEFUN CAT-CALCULATE-SQUARE-CONTROL (SQ)
;  (PROG (PKSA WSOL BSOL WSOL-LIM BSOL-LIM WPC BPC WPV BPV 
;	 PVA PC TEM)
;	(SETQ PKSA (PIECE-KEY-SQUARES-ARRAY PIECE-ARRAY))
;	(SETQ WSOL (AR-1 (BOARD-WHITE-SWAPOUT-LIST-ARRAY BOARD-ARRAY) SQ))
;	(SETQ BSOL (AR-1 (BOARD-BLACK-SWAPOUT-LIST-ARRAY BOARD-ARRAY) SQ))
;	(SETQ PVA (PIECE-VALUE-ARRAY PIECE-ARRAY))
;	(SETQ WSOL-LIM (ARRAY-LEADER WSOL 0))
;	(SETQ BSOL-LIM (ARRAY-LEADER BSOL 0))
;	(SETQ PC (AR-1 BOARD SQ))
;	(COND ((ZEROP WSOL-LIM) (GO MSQC1))	;NOT CONTESTED BY WHITE
;	      ((ZEROP BSOL-LIM) (GO MSQC2)))	;NOT CONTESTED BY BLACK
;	(SETQ WPC (AR-1 WSOL 0))
;	(ARRAY-PUSH (AR-1 PKSA WPC) SQ)		;THIS PC CLEARLY KEY ON THIS SQ
;	(SETQ BPC (AR-1 BSOL 0))
;	(ARRAY-PUSH (AR-1 PKSA BPC) SQ)
;	(COND ((= (SETQ BPV (AR-1 PVA BPC))
;		  (SETQ WPV (AR-1 PVA WPC)))
;	       (GO MSQC4))			;LEAST VAL PCS EVEN
;	      ((< BPV WPV)
;	       (GO MSQC5)))			;BLACK HAS THE SMALLEST
;;GET HERE IF WHITE HAS THE SMALLEST
;	(COND ((NOT (= BSOL-LIM 1))
;	       (GO MSQC8A))			;BLACK HAS MORE THAN 1
;	      ((NOT (= WSOL-LIM 1))		;WHITE ALSO HAS 2 AGAINST ONE
;	       (SETQ ANS 'WHITE-STRONG-CONTROL) ;UNLESS WHITE HAS ONLY PAWNS ...
;	       (GO MSQC7))
;	      (T (SETQ ANS 'WHITE-DEFENDED)
;		 (GO MSQC2A)))
;;GET HERE IF BLACK HAS THE SMALLEST
;  MSQC5	(COND ((NOT (= WSOL-LIM 1))
;	       (GO MSQC5A))
;	      ((NOT (= BSOL-LIM 1))
;	       (SETQ ANS 'BLACK-STRONG-CONTROL)
;	       (GO BE))
;	      (T (SETQ ANS 'BLACK-DEFENDED)
;		 (GO MSQC1A)))
;;GET HERE IF BLACK HAS THE SMALLEST, BUT WHITE HAS MORE THAN 1.
; MSQC5A	(COND ((> BSOL-LIM WSOL-LIM)
;	       (SETQ ANS 'BLACK-CONTROL)
;	       (GO BE))
;	      (T (SETQ ANS 'BLACK-DEFENDED)
;		 (GO X)))
;;GET HERE IF NOT CONTESTED BY WHITE
; MSQC1	(COND ((ZEROP BSOL-LIM)
;	       (SETQ ANS 'UNCONTESTED)
;	       (GO X))
;	      (T (SETQ ANS 'BLACK-UNCONTESTED)))
;;ABOUT TO GIVE BLACK A GOOD CONTROL, SEE IF REALLY WANT TO DO IT
; BE	(SETQ BPC (AR-1 BSOL 0))
;	(ARRAY-PUSH (AR-1 PKSA BPC) SQ)
;	(COND ((AND (NOT (= PC SQUARE-VACANT))
;		    (NOT (WHITE-P PC)))
;	       (SETQ ANS 'BLACK-DEFENDED)	;BLACK GUY ALREADY THERE
;	       (GO X)))
;;NOW VERIFY BLACK HAS AT LEAST ONE NON-PAWN BEARING ON SQUARE.
;	(COND ((NOT (PAWN-P BPC))
;	       (GO X)))				;OK, HE GETS IT
;	(SETQ TEM 1)
; BE1	(COND ((= TEM BSOL) (GO BE2))		;NO HE DOESNT ..
;	      ((NOT (PAWN-P (AR-1 BSOL TEM)))
;	       (GO X)))				;OK FOUND ONE
;	(SETQ TEM (1+ TEM))
; 	(GO BE1)
;;GEE, NOTHING BUT PAWNS.  HE DOESNT GET HIS BANANA UNLESS A PAWN THREATENS TO PUSH IN.
; BE2	(COND ((CAT-BLACK-PAWN-PUSHABLE-IN-P SQ) (GO X)))
; 	(SETQ ANS 'BLACK-DEFENDED)
;	(GO X)
;
; MSQC2	(SETQ ANS 'WHITE-UNCONTESTED)
;;ABOUT TO GIVE WHITE A GOOD CONTROL, SIMILAR TO BE
; WE	(SETQ WPC (AR-1 WSOL 0))
;	(ARRAY-PUSH (AR-1 PKSA WPC) SQ)		;THIS PC CLEARLY KEY ON THIS SQ
;	(COND ((ANT (NOT (= PC SQUARE-VACANT))
;		    (WHITE-P PC))
;	       (SETQ ANS 'WHITE-DEFENDED)
;	       (GO X)))
;	(COND ((NOT (PAWN-P WPC))
;	       (GO X)))
;	(SETQ TEM 1)
; WE1	(COND ((= TEM WSOL) (GO WE2))
;	      ((NOT (PAWN-P (AR-1 WSOL TEM)))
;	       (GO X)))
; 	(SETQ TEM (1+ TEM))
;	(GO WE1)
; WE2	(COND ((CAT-WHITE-PAWN-PUSHABLE-IN-P SQ) (GO X)))
;	(SETQ ANS 'WHITE-DEFENDED)
;	(GO X)
; MSQC4	(COND ((OR (PAWN-P WPC)
;		   (= WSOL-LIM BSOL-LIM))
;	       (SETQ ANS 'EVEN)
;	       (GO X))
;	      ((< BSOL-LIM WSOL-LIM)
;	       (SETQ ANS 'WHITE-CONTROL)
;	       (GO X))
;	      (T (SETQ ANS 'BLACK-CONTROL)
;		 (GO X)))
;  X	(AS-1 ANS (BOARD-SQUARE-CONTROL-ARRAY BOARD-ARRAY) SQ)
;  	(RETURN ANS)
;))

