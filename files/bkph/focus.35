XCN:	8200.0	;CENTRE OF VIDI IN FLOATING
YCN:	8220.0
XRAD:	6500.0	;X 'RADIUS OF FIELD OF VIEW
YRAD:	7000.0

DISFLX:	0	;NON-ZERO TO HACK DISTORTION

ROOT3:	1.7320508

IFN UNDIST,[

;VIDISECTOR DISTORTION HANDLING

;	UNDISTORTING DATA -COMES FROM DISK VIA REDDAT

DSDTSZ==256.

XCORD:	BLOCK DSDTSZ	;X COORDINATES OF GRID
YCORD:	BLOCK DSDTSZ	;Y COORDINATES OF GRID
BSCRD:	BLOCK DSDTSZ	;SENSITIVITY AT GRID POINTS

SCLX:	194.0	;VIDI UNITS PER XD MM
SCLXY:	0.0
CNTX:	8192.0	;HORIZ CENTRE OF VIDI
SCLYX:	0.0
SCLY:	-216.0	;VIDI UNITS PER YD MM
CNTY:	8192.0	;VERTIC CENTRE OF VIDI
DELD:	1.0	;SCLX*SCLY-SCLXY*SCLYX 

DELX:	5.5037190	;HORIZONTAL SPACING OF GRID IN MM'S
DELY:	5.5037190	;VERTICAL SPACING OF GRID IN MM'S

XNT:	-24.767063	;CORNER X COORDINATE OF GRID
YNT:	-24.767063	;CORNER Y COORDINATE OF GRID

NNX:	10.	;NUMBER OF POINTS HORIZONTALLY IN GRID
NNY:	10.	;NUMBER OF POINTS VERTICALLY IN GRID
NARSZ:	0	;NNX*NNY

DATIOB:	XCORD-.,,XCORD	;IO POINTER

;		UNDISTORTION AND OTHER COORDINATE HANDLING CRUFT

LIMCRD:	SKIPGE A
	SETZM A
	CAMLE A,[16383.0]
	MOVE A,[16383.0]
	SKIPGE B
	SETZM B
	CAMLE B,[16383.0]
	MOVE B,[16383.0]
	POPJ P,

COMFIX:	;COMBINE A AND B AND FIX
	PUSH P,C
	FIX B
	FIX A
	HRL C,B
	MOVE A,C
	POP P,C
	POPJ P,

SEPFLT:	;SEPERATE AND FLOAT
	HRRZ B,A
	HLRZ A,A
	FLOAT A
	FLOAT B
	POPJ P,

QAL:	0
QBL:	0

LINMTV:	;LINEAR COORDINATE GETTER INPUT IN MM'S
;		OUTPUT IN FLOAT VIDI COORDS
	PUSH P,C
.F QAL=,QBL=
.F QAL*SCLX+QBL*SCLXY+CNTX,$
.F QAL*SCLYX+QBL*SCLY+CNTY
	PUSHJ P,LIMCRD
	POP P,C
	POPJ P,

LINVTM:	;INVERSE OF LINMTV INPUT IN FLOAT VIDI COORDS
;		OUTPUT IN MM'S
	PUSH P,C
	PUSHJ P,LIMCRD
.F QAL=,QBL=
.F QAL=QAL-CNTX,QBL=QBL-CNTY
.F (QAL*SCLY-QBL*SCLXY)/DELD,$
.F -(QAL*SCLYX-QBL*SCLX)/DELD
	POP P,C
	POPJ P,
DISMTV:	PUSH P,A	;INTERPOLATE - X,Y	- SKIPS IF IN VIEW
	PUSH P,B
	PUSH P,C
	PUSH P,D
	PUSH P,E
	PUSH P,F
	FSBR A,XNT
	FSBR B,YNT
	FDVR A,DELX
	FDVR B,DELY	;I
	FMPR A,ROOT3
	FSBR A,B
	FSC A,-1	;K
	MOVE E,A
	MOVE D,B
	FIX E
	SKIPL F		;FIXED K IN F
	CAML F,NNY
	JRST OUTRAN
	FIX D
	SKIPL E		;FIXED I IN E
	CAML E,NNY
	JRST OUTRAN
	MOVE D,E
	MOVE C,F
	FLOAT C
	FLOAT D
	FSBRM A,C	;DELTA K
	FSBRM B,D	;DELTA I
	IMUL E,NNY	;?
	ADD E,F		;DOUBLE SUBSCRIPTING F,K
	MOVE F,E
	ADD F,NNY	;I+1,K
	SKIPE XCORD(E)
	SKIPN XCORD(F)
	JRST OUTRAN
	SKIPN XCORD+1(E)
	JRST OUTRAN
;.F BSCRD(E)*(1.0-C-D)+BSCRD(F)*D+BSCRD(E+1)*C
;	PUSH P,A
.F YCORD(E)*(1.0-C-D)+YCORD(F)*D+YCORD(E+1)*C
	PUSH P,A
.F XCORD(E)*(1.0-C-D)+XCORD(F)*D+XCORD(E+1)*C
;	POP P,C
	POP P,B
	POP P,F
	POP P,E
	POP P,D
	POP P,C
	SUB P,[2,,2]
	AOS (P)
	POPJ P,

OUTRAN:	POP P,F
	POP P,E
	POP P,D
	POP P,C
	POP P,B
	POP P,A
	JRST LINMTV
UNVDST:	;DISTORT (USE PRE SCAN) FLOAT VIDI IN, FLOAT VIDI OUT
	PUSHJ P,LINVTM	;CONVERT TO MM'S
	PUSHJ P,DISMTV	;CONVERT BACK
	SKIP
	POPJ P,

UNMDST:	;UNDISTORT (USE POST SCAN) FLOAT VIDI IN FLOAT VIDI OUT
	PUSHJ P,DISVTM	;SLOW, INACCURATE
	JRST LINMTV	;CONVERT BACK TO VIDI COORDS

DAMP:	0.8	;DAMPING FACTOR IN ITERATION LOOP

ITRVRM:	PUSHJ P,UNVDST	;GO FORWARD ONCE
	FSBR A,XNOT	;FORM ERROR
	FSBR B,YNOT
	MOVNS A
	MOVNS B
	FMPR A,DAMP
	FMPR B,DAMP
	FADRB A,XNAT	;UPDATE GUESSES - THIS COULD BE DONE MORE CLEVERLY
	FADRB B,YNAT
	POPJ P,


DISVTM:	;INVERSE INTERPOLATOR FLOAT VIDI IN, MM'S OUT
;	SLOW AND MAY NOT BE ACCURATE, COULD BE IMPROVED NO DOUBT
.F XNOT'=XNAT'=,YNOT'=YNAT'=
	PUSHJ P,ITRVRM
	PUSHJ P,ITRVRM
	PUSHJ P,ITRVRM	;3 ITERATIONS ARE PROBABLY ENOUGH
	JRST LINVTM	;TO MM'S


;	GETTING DISTORTION DATA OFF THE DISK

DATCHN==6

DATOPN:	3,,(SIXBIT/DSK/)
	SIXBIT/DISTORCOORDS/

DATIPN:	2,,(SIXBIT/DSK/)
	SIXBIT/DISTORCOORDS/

WRTDAT:	.OPEN DATCHN,DATOPN	;WRITE OUT MEMORY
	STOP _DSKC WONT OPEN-WRTDAT
	MOVE A,DATIOB
	.IOT DATCHN,A
	.CLOSE DATCHN,
	POPJ P,

REDDAT:	.OPEN DATCHN,DATIPN
	STOP _DSKC WONT OPEN-REDDAT
	MOVE A,DATIOB
	.IOT DATCHN,A
	.CLOSE DATCHN,
	POPJ P,
]


;	TEST OUT OF VIEW CONDITION

QAD:	0
QBD:	0
QCD:	0

MAG:	1.0	;MAGNIFICATION

OUTVIW:	;X Y MAG - SKIPS IF IN VIEW
	FMPR C,MAG	;USE CURRENT MAGNIFICATION DUE TO LENS POSITION
.F QAD=,QBD=,QCD=
IFN UNDIST,[
	SKIPE DISFLX	;DISTORTION FLAG
	JRST DISMTV
]
.F ((QAD-XCN)*QCD/XRAD)^2 +((QBD-YCN)*QCD/YRAD)^2 -1.0
	SKIPGE A
	AOS (P)
	POPJ P,


IFN FOCUSL,[

;VARIOUS I/O HACKS FOR FOCUS ROUTINES


SERVL:	MOVEM A,FOCCM	;SAVE LAST VALUE OUT
	ADD A,OFXS	;ADD OFFSET
	LSH A,2		;MAKE UP TO 14 BITS
	HRL A,FOCCHN
	.IOT OMPC,A
	SKIPN SHWFCS
	POPJ P,
POSFCS:	HRRZ A,FICCHN
	.IOT IMPC,A
	MOVEM A,FCPOS	;SAVE LAST VALUE IN
	HRL A,FOCCM	;VALUE SEND OUT
	.RBTC A,	;OUT,,IN
.I FFLOAT<FCPOS-LFXS>,FFLOAT<HFXS-LFXS>
.F A/B*(HHFXS-LLFXS)+LLFXS
	POPJ P,

SHWFCS:	-1	;TO PUT STUFF ON RBTC FOR OUTPUT AS WELL

OFXS:	24	;OFFSET ADD THIS TO IN TO GET OUT

LFXS:	570	;LOWER LIMIT IN POT UNITS
LIRS:	0

LLFXS:	180.0	;LOWER LIMIT IN MM'S
LLIRS:	10.0

HFXS:	3270	;UPPER LIMITS IN POT UNITS
HIRS:	4000.

HHFXS:	60.0	;UPPER LIMIT IN MM'S
HHIRS:	50.0


MAGNIF:	FSBR A,XCN
	FSBR B,YCN
	FMPR A,MAG
	FMPR B,MAG
	FADR A,XCN
	FADR B,YCN
	POPJ P,

REDUCE:	FSBR A,XCN
	FSBR B,YCN
	FDVR A,MAG
	FDVR B,MAG
	FADR A,XCN
	FADR B,YCN
	POPJ P,

LIMFXS:	CAMGE A,LFXS	;LIMIT A TO REASONABLE FOCUS COMMAND
	MOVE A,LFXS
	CAMLE A,HFXS
	MOVE A,HFXS
	POPJ P,

LIMIRS:	CAMGE A,LIRS	;LIMIT A TO REASONABLE IRIS COMMAND
	MOVE A,LIRS
	CAMLE A,HIRS
	MOVE A,HIRS
	POPJ P,


FMAGNI:	PUSH P,C
	MOVEI C,MAGNIF
FCOGS:	FLOAT A
	FLOAT B
	PUSHJ P,(C)
	FIX B
	FIX A
	MOVE A,B
	MOVE B,C
	POP P,C
	POPJ P,

FREDUC:	PUSH P,C
	MOVEI C,REDUCE
	JRST FCOGS

OPNIMX:	.OPEN IMPC,IMCOP
	STOP IMX WONT OPEN
	POPJ P,

OPNIOX:	PUSHJ P,OPNIMX
OPNOMX:	.OPEN OMPC,OMCOP
	STOP OMX WONT OPEN
	POPJ P,

IMCOP:	0,,(SIXBIT /IMX/)
	0
	0

OMCOP:	1,,(SIXBIT /OMX/)
	0
	0

CLOIOX:	.CLOSE IMPC,
	.CLOSE OMPC,
	POPJ P,

;THESE SHOULD BE PROTECTED IF THE ARRAYS EVER BECOME DYNAMIC

ABTRVT:	0	;ADD OF BIT-REVERSE TABLE

WR3:	(C)
WR4:	(D)
WI3:	(C)	;ADD OF COS & SIN TABLES
WI4:	(D)

XR1:	(A)
XR2:	(B)
XI1:	(A)	;ADDR OF VECTOR ACS
XI2:	(B)
;TITLE BKPFFT


MNN==200	;MAX PTS AROUND CIRCLE
MNPTS==20	;MAX NUMBER OF FOCUS LENS STOPS

FCEVP:	PUSH P,FXSTSW
	SETOM FXSTSW
	PUSHJ P,IRNGE1
	MOVE A,FOCCM
	PUSHJ P,SETMAG	;?
	SETZM FXSRI
	PUSHJ P,VRFXS	;EVAL FOCUS FUNCTION
IFN GPHFLG,[
.F FPDIS<,1000,1000>	;? OUTPUTS NUMBER
.F OCTDS<FCPOS,1000,1040>
]
	POP P,FXSTSW
	PUSHJ P,CLOIOX
	JRST TVCCLS


ARNG1:
.F RA20=12.0
ARNG1A:	PUSHJ P,IRNGE	;ONE PHASE AROUND CURRENT POS
.F SETVAL<11.,.9,6,14.0>
	PUSHJ P,POSFCS
.I FCPOS-FCRAT,FCPOS+FCRAT	;12. MM EACH WAY
	JRST ARNG3

ARANGE:	PUSHJ P,IRNGE	;FULL RANGE FOCUS TWO STEPS
;N200;LVL;XS;INCR
.F SETVAL<13.,.75,5,17.0>
.F RSCH1<FLWX,FUPX>

ARNG2:	HRRZM A,FCTEM
.F SETVAL<11.,.9,6,14.0>
.I FCTEM-FSRAN,FCTEM+FSRAN

ARNG3:	PUSHJ P,RSCH1
	HRRZM A,FXSBST	;STORE FINAL BEST POSITION
	HRRZM A,FOCCM
	PUSHJ P,CLOIOX	;CLOSE A/D & D/A
	JRST TVCCLS


RSCH1:
.I LIMFF1=LIMFXS<>,LIMFF2=LIMFXS<>
	PUSHJ P,POSFCS
.I ABS<LIMFF1-FCPOS>,ABS<LIMFF2-FCPOS>
	CAMGE A,B
	JRST RSCH1A
.I LIMFF2,LIMFF1
	JRST RSCH1B

RSCH1A:
.I LIMFF1,LIMFF2
RSCH1B:
.I LIMFF1=,LIMFF2=

	PUSHJ P,FXSGR	;EVAL FOCUS FUNCTION FOR MANY SERVO SETTINGS

.I SERVL<(LIMFF1+LIMFF2)/2.>	;SEND TO CENTRE OF RANGE MEANTIME
.I FRNG=LIMFF2-LIMFF1		;RANGE
.F FFIX<LVLX<#AXSV,N200,MINR>*FFLOAT<FRNG>>
.I SERVL<FXSV=A/(N200-1)+LIMFF1>	;SERVO TO THERE
.I FDIF=SANFC<>		;SIZE OF PEAK
.I FFLOAT<ABS<FRNG>*(FDIF+2)/(N200-1)>
.F FTMP=FFIX<A*CNTFAC>
.F FSRAN=CLAMP<90.,FTMP,325.>
	MOVE A,FDIF
	CAIL A,4	;PEAK SHOULD BE NARROWER THAN THIS
	PRINT BAD OBJECT %1I2
	PUSHJ P,FCPOS	;? MORE RECENT PERHAPS
	MOVE A,FXSV
	POPJ P,

FLWX:	600	;LOWER LIMIT RANGE TO INVESTIGATE
FUPX:	3200	;UPPER LIMIT RANGE TO INVESTIGATE

CNTFAC:	.7	;NEW HALF RANGE AS FRACTION OF LAST PEAK WIDTH
FRNG:	0	;RANGE CURRENTLY LOOKED AT
RA20:	15.0	;DISPLACEMENT BETWEEN TWO CIRCLES / INCR

FXSBST:	0	;BEST FOCUS POSITION
FXSTSW:	-1	;-1 TRACE FOCUS HACK 1 ALSO HANG FOR TTY
FXSTAR:	-1	;FOCUS TRACE ARRY OR -1 IF NONE
SPNTSW:	0	;SINGLE POINT SWITCH
FFLST:	0	;FOCUS FUNCTN LAST

FXSGR:
.I FLW=FXS=,FUP=
	PUSHJ P,SERVL	;SERVO TO LOWER END
	WIPE AXSV,N200	;SET FOCUS ARRAY TO EMPTY
.I FFLOAT<FUP-FLW>,FFLOAT<N200-1>
	FDV A,B
	MOVEM A,STP	;STEP SIZE

	CLEARM FXSRI	;
.F MAXR=-MINR=100000.0
.I IPNT=JPNT=N200
	SETZM IJPNT
LOOPF:
.I MVFXS<FXS>	;MOVE THERE
.I FXS=FFIX<STP>+FXS	;CALC NEW VALUE FOR VRFXS TO OUTPUT AFTER ITS READ VIDI

	PUSHJ P,VRFXS	;EVAL FOCUS FUNCTION - 0 IF OUT OF VIEW

	MOVE B,FXSRI
	MOVEM A,AXSV(B)	;SAVE AWAY VALUE OF FOCUS FUNCTION HERE
IFN GPHFLG,[
	SKIPE FXSTSW
	PUSHJ P,FXSTR1	;DISPLAY THE FOCUS CURVE
]
	CAMGE A,MAXR	;? UPDATE MAXIMUM
	JRST LOOPF1
	MOVEM A,MAXR
	JUMPE A,LOOPF2	;ZERO MEANS WAS OUT OF RANGE
	MOVEM B,IPNT	;MAX INDEX
	MOVE C,JPNT	;MIN INDEX
	CAML B,C
	MOVEM C,IJPNT	;MIN BEFORE MAX
LOOPF1:	CAMLE A,MINR	;? UPDATE MINIMUM
	JRST LOOPF2
	MOVEM A,MINR
	MOVEM B,JPNT	;MIN INDEX
LOOPF2:	MOVEI C,-1(B)
	CAMG C,IPNT	;MORE THAN ON PAST MAX
	JRST LOOPF3	;NO
	MOVE C,MAXR
	FMP C,[.5]
	CAMGE A,C
	JRST FSPPL	;MORE THAN ONE PAST MAX AND LESS THAN HALF OF MAX - SO EXIT
LOOPF3:	AOS B,FXSRI
	CAMGE B,N200
	JRST LOOPF

FSPPL:
;	MOVE A,JPNT	;COMPLETE DATA ARRAY
;	CAML A,IPNT
;	JRST XSVCLR	;MIN AFTER MAX
.I IJPNT-1,MINR
	JUMPL A,XSVCLR
	MOVEM B,AXSV(A)	;FILL IN PRE-MINIMU PART OF ARRAY
	SOJGE A,.-1

XSVCLR:			;FILL EMPTIES WITH MINR (MOSTLY THOSE PAST MAX)
.I N200-1,MINR
	SKIPN AXSV(A)
	MOVEM B,AXSV(A)
	SOJGE A,.-2
	POPJ P,

;LENS AND SERVO RELATIONS

SETMAG:		;CALCULATE MAGNIFICATION AND OTHER LENS PARAMETERS
.F FDIST=FRWFCS<LNNN<>>	;FRONT OF VIDISECTOR TO OBJECT
.F MAG=MAGN<LNNNA>	;MAGNIFICATION WRT IMAGE PLANE AT FOCAL DISTANCE
	POPJ P,

MAGN:	PUSH P,B	;CALCULATE MAGNIFICATION FROM (P.C. TO BACK PRINCIPAL PLANE)
	PUSH P,C
.F A/FCLN,BART=(DEST+DEPTH-THICK)/FCLN
.F A*((BART-1.0)/(BART-A))		;CORRECTION FACTOR (F1+F2-FCLN)/F2
	POP P,C
	POP P,B
	POPJ P,

LNNN:		; - GIVES (P.C. TO BACK PRINCIPAL PLANE) IN MM'S
.F (LNNNA=POSFCS<>)+DEPTH+P2TOLM
	POPJ P,

FRWFCS:	PUSH P,B	;(VIDISECTOR TO OBJECT) FROM (P.C. TO BACK PRINCIPAL PLANE)
.F LENNA=
.F LENNA^2 /(LENNA-FCLN)+THICK-DEPTH
	POP P,B
	POPJ P,

INVFCS:			;(P.C. TO BACK PRINCIPALm PLANE) FROM (VIDISECTOR TO OBJECT)
.F LUNNI=A+DEPTH-THICK
.F (-SQRT<1.0-FCLN*4.0/LUNNI>+1.0)/2.0*LUNNI
	POPJ P,
FLW:	0	;LOW LIMIT IN RSCH
FXS:	0	;PRESENT SERVO POSITION
FUP:	0	;UPPER LIMIT IN RSCH
STP:	0	;STEPSIZE TO INCREMENT FXS BY
FXSRI:	0	;INDEX INTO AXSV
FCSX:	20000	;POINT TO FOCUS AT X
FCSY:	20000	; SAME             Y
FXST1:	0	;TEM AT FXSGR
MAXR:	0	;MAX OF FOCUS FUNCTION
MINR:	0	;MIN OF FOCUS FUNCTION
IPNT:	0	;POSITION OF MAX
JPNT:	0	;POSITION OF MIN
FDIST:	0	;FOCUS DIST IN MM
FCRAT:	250.	;RANGE FOR SECOND TRY

FSRAN:	275.	;RANGE AROUND FIRST PEAK FOR SECOND TRY
FCTEM:	0	;TEMP AT FOCUS
N200:	0	;# POSITIONS TO TRY
LVL:	0	;LEVEL AS FRACTION OF 1.0 TO CUT PEAK AT
XS:	5	;LOWER FREQUENCY LIMIT OF SUM
XF:	MNN/2	;UPPER FREQUENCY LIMIT OF SUM
INCR:	16.0	;INCR  BETWEEN POINTS ON CIRCLE

PARL:	0
FRAD:	0
DCEN:	0
LLL:	0
FIPNT:	0
FAPNT:	0
MNNV:	MNN	;NUMBER OF POINTS AROUND A CIRCLE
LIMFF1:	0	;LIMITS OF RANGE
LIMFF2:	0	; SAME
FXSV:	0	;SAVED FOCUS POSITION
FDIF:	0	;WIDTH OF PEAK
FTMP:	0	;TEMP LOCATION
LNNNA:	0	;SAVED IN LNNN
BART:	0
LENNA:	0	;TEMP ARG STORE IN FRWFCS
LUNNI:	0	;TEMP ARG STORE IN INVFCS
FOCCHN:	32	;FOCUS SERVO OUT
FICCHN:	132	;FOCUS SERVO IN
FDSMAX:	0	;LIMIT ON GRAPH OF FFT
FOCCM:	0	;LAST FOCUS COMMAND
FCSXX:	0	;POISITION TO FOCUS ON X
FCSYY:	0	;
FCTOPS:	0
IJPNT:	0	;MIN BEFOR E MAX
INCRR:	0
TOTLEN:	0	;TOTAL ENERGY
PRLA1:	0
PRTA1:	0
LALXT:	0
PARTF:	0
LVLXT:	0
SANPR:	0
;LENS PARAMETERS
DEPTH:	135.0	;105.0 DISTANCE FORM FRONT OF VIDI TO P.C. - ADJUSTABLE UNFORTUNATLY

FCLN:	254.0	;164.0 FOCAL LENGTH - MM
P2TOLM:	21.0	;4.0 BACK PRINCIPAL PLANE TO LENS MOUNT - MM
THICK:	-24.3	;1.5 DISTANCE BETWEEN PRINCIPAL PLANES OF LENS - MM


DEST:	1500.0	;ESTIMATED DISTANCE TO OBJECT


FCPOS:	0	;FOCUS POSITION IMPX 34
IRPOS:	0	;IRIS POSITION IMPX 33


AXSV:	BLOCK MNPTS	;FINAL FOCUS FUNCTION

;NEXT COULD COULD BE MADE TO BE DYNAMIC

AXR:	BLOCK MNN	;INPUT AREA FOR LEFT CIRCLE
AXI:	BLOCK MNN	;INPUT AREA FOR RIGHT CIRCLE
ABTR:	BLOCK MNN	;BIT REVERSE TABLE
AWR:	BLOCK MNN	;COSINE TABLE
AWI:	BLOCK MNN	;SINE TABLE



SETVAL:	CAILE A,MNPTS	;SET PARAMETERS USED BY FOCUS FUNCTION
	MOVEI A,MNPTS
.I N200=,LVL=,XS=,INCR=
	POPJ P,


MVFXS:	SETOM MVFI	;MOVE FOCUS SERVO
.I SERVL<FCTOPS=LIMFXS<>>	;OUTPUT COMMAND

MVFF:;ALL THIS DECIDES IF IT HAS SETTLED DOWN
	AOS MVFI
	PUSHJ P,MUFFLD
	MOVEI A,3
	.SLEEP A,
	PUSHJ P,MUFFLD
	MOVEI A,3
	.SLEEP A,
	PUSHJ P,MUFFLD
	MOVE A,MVFI
	CAMGE A,SRVSTK	;DID IT TAKE TOO LONG
	JRST MVFF3
	PRINT SERVO STICKY %1I3 
MVFF3:	MOVE A,FCPOS
	JRST SETMAG	;CALCULATE THINGS ABOUT LENS

MUFFLD:	PUSHJ P,POSFCS
.I ABS<FCPOS-FCTOPS>-MVFI
	JUMPL A,POPJP
	SUB P,[1,,1]
	MOVEI A,6
	.SLEEP A,
	JRST MVFF

SRVSTK:	12.	;TIMES ROUND LOOP BEFORE WE ANNOUNCE SERVO STICKY
MVFI:	0	;CURRENTLY ACCEPTABLE ERROR IN FOCUS POSITION


;MVIRS:	PUSHJ P,LIMIRS	;MOVE IRIS - SHOULD REALLY BE MORE LIKE THE ABOVE 
;MVIR1:	MOVE B,IRPOS
;	SUB B,A
;	MOVMS B
;	CAIGE B,20
;	POPJ P,
;	IDIVI B,15.
;	.SLEEP B,
;	JRST MVIR1

IRNGE:	TDZA A,A	;INITIALISE FOR RANGE
IRNGE1:	MOVNI A,1
	MOVEM A,SPNTSW	;SINGLE POINT SWITCH
	PUSHJ P,OPNIOX	;OPEN A/D & D/A
	PUSHJ P,TVCOP	;OPEN TVC
.I RSETUP<#ABTR,#AWR,#AWI>	;TELL ABOUT WORK VECTOR ACS
.I SETXY<#AXR,#AXI>
	MOVE A,MNNV
	JRST INITS

VRFXS:
.F OUTVIW<FFLOAT<FCSX>,FFLOAT<FCSY>,1.1>	;FOCUS FUNCTION
	JRST RESURN	;OUT OF VIEW - RETURN ZERO
	PUSHJ P,CIRSET	;SETUP THE TWO CIRCLES
.F VIDOT<XR1,MNNV>	;READ VIDI FOR LEFT
.F VIDOT<XI1,MNNV>	;READ VIDI FOR RIGHT
IFN GPHFLG,[
	SKIPE FXSTSW
	PUSHJ P,FXSTR	;DISPLAY VIDI DATA
]
.I LIMFXS<FXS>
	SKIPL SPNTSW	;DONT MOVE IN SINGLE PNT MODE
	PUSHJ P,SERVL	;
	PUSHJ P,DTRAN	;TRANSFORM THE TWO FUNCTIONS
.F SUMXV<XS,XF,1>	;SUM LOWER PART (LEFT CIRCLE)
	MOVEM A,PRLA1
	MOVEM B,PRTA1
.F SUMYV<XS,XF,1>	;SUM UPPER PART (RIGHT CIRCLE)
	FADR A,PRLA1
	FADR B,PRTA1
	FDVR A,B
	MOVEM A,FFLST	;SAVE VALUE 
	MOVEM B,TOTLEN	;SAVE TOATL ENERGY
IFN GPHFLG,[
	SKIPE FXSTSW
	PUSHJ P,FDSFFT	;DISPLAY FFT
]
	POPJ P,

LVLXX:	PUSH P,G	;ARRAY,N,MIN
	MOVE G,A
	MOVNS B
	HRL G,B
	CLEARM SUMF
	CLEARM SUMXF	;LOCATE PEAK AS CENTRE OF GRAVITY-SORT OF
	CLEARM FCONP
LVLXD:
.F SUMF=(LALXT=ZR(G)-C)+SUMF
.F SUMXF=FCONP*LALXT+SUMXF
.F FCONP=FCONP+1.0
	AOBJN G,LVLXD

.F SUMXF/SUMF	;CG
	POP P,G
	POPJ P,

LVLX:
.F ABS<FAPNT=(LVLXT=LVLXX<>)-(FIPNT=FFLOAT<IPNT>)>
	CAML A,[1.0]
	PRINT NEAR END OF RANGE %1F2.2
.F LVLXA=FAPNT/SQRT<FAPNT^2 +1.0>+FIPNT	;EFFORT TO COMPROMISE BETWEEN ANSWERS OF TWO METHODS
	POPJ P,

LVLXA:	0	;RESULT RETN BY LVLX
;LVLXI:	0	;INDEX
SUMXF:	0	;SUM OF X(I)*Y(I)
SUMF:	0	;SUM OF Y(I)
FCONP:	0	;COUNT


SANFC:		;FINDS 'WIDTH' OF PEAK
.F LLL=(MAXR-MINR)*LVL+MINR
.I HALFL<#AXSV,N200,LLL>	;PEAK HIT FROM LEFT
	MOVEM A,SANPR
.I HALFU<#AXSV,N200,LLL>	;PEAK HIT FROM RIGHT
	SUB A,SANPR		;SHOULD COME OUT POSITIVE
	POPJ P,

HALFL:	MOVE D,A	;LEFT HILL-SIDE ARRAY,N,LEVEL
	MOVEI A,0
HALFL1:	CAMGE C,(D)
	POPJ P,
	AOS D
	AOJA A,HALFL1

HALFU:	MOVE D,A	;RIGHT HILL-SIDE ARRAY,N,LEVEL
	ADDI D,-1(B)
	MOVEI A,-1(B)
HALFU1:	CAMGE C,(D)
	POPJ P,
	SOS D
	SOJA A,HALFU1

DTRAN:	PUSHJ P,REVBS	;TRANSFROM TWO REAL FUNCTIONS AT ONCE
	PUSHJ P,TRANS
	PUSHJ P,SEPER
	MOVEI A,0
	JRST ABSVS
INITS:	SETZM E	;INITIALISE FFT TABLES
LOGNLP: AOS E
	ASH A,-1
	JUMPN A,LOGNLP	;FIND LOG<N>
	SOS E
	MOVEM E,LN;     GET LN
	MOVEI A,1
	ASH A,(E);     N=2**LN

	PUSHJ P,SETNP	;GET N/2, N/4, N/8 ETC.
	HRLI F,C
	HRLI G,E
	HRR F,ABTRVT
	HRR G,ABTRVT

;GENERATE BIT-REVERSE TABLE
	MOVEI B,1
OUTER:	CLEAR C,
	MOVE E,B

LOOPX:	MOVE D,F@
	ASH D,1
	MOVEM D,F@
	AOS D
	MOVEM D,G@
	AOS E
	AOS C
	CAMGE C,B
	JRST LOOPX

	ASH B,1
	CAMGE B,RN
	JRST OUTER

;GENERATE COS AND SIN TABLES
.F TPN=TWPI/FLT

	HRRZ F,WR4
	HRRZ G,WI4
	SETZB C,D

;FIRST EIGHT OF IT
SSINT:
.I WI4@=SIN<C>
.I WR4@=COS<C>
	FAD C,TPN
	AOS D
	CAMG D,NO8
	JRST SSINT

	MOVE D,NO8
	PUSHJ P,SETWIR
NO8AD:
.I ZR(C)=WR4@
.I ZR(B)=WI4@
	AOS B
	AOS C
	SOJGE D,NO8AD
;COPY ONCE TO MAKE A QUADRANT

	MOVE D,NO4
	PUSHJ P,SETWIR
NO4AD:	
.I ZR(B)=-WR4@
.I ZR(C)=WI4@
	AOS B
	AOS C
	SOJGE D,NO4AD
;COPY TO MAKE SEMI-CIRCLE

	MOVE D,NO2
	PUSHJ P,SETWIR
NO2AD:	
.I ZR(B)=WR4@
.I ZR(C)=-WI4@
	AOS B
	AOS C
	SOJG D,NO2AD
;COPY TO MAKE FULL CYCLE

.I RN+1
	POPJ P,

SETWIR:	HRRZ B,WR4
	HRRZ C,WI4
	ADD B,D;     WRS
	ADD C,D;     WIS
	POPJ P,
TRANS:	PUSH P,G
	PUSH P,T
	PUSH P,U
	PUSH P,V
	PUSH P,W

	MOVE G,XR1;             FAST FOURIER TRANSFORM-DESTROYS MOST ACS
	MOVE T,XR2
	MOVE U,XI1
	MOVE V,XI2

.I IS=1,IGA=2
.I LN,ITN=IGR=NO2

DO1R:	MOVEM A,RI	;SET F TO LN
	SETZM A

DO2R:	MOVEM A,IST;	START OF GROUP
.I ,IST+IS,ISTP=B-1
	SETZM C
	MOVE D,ITN

DO3R:	MOVE W,@T	;XR(2)
	MOVE X,@V	;XI(2)

	MOVE Y,AWR(D)
	MOVE Z,AWI(D)

	MOVE E,W
	FMPR E,Y
	MOVE F,X
	FMPR F,Z
	FSBR E,F
	FADR E,@G
	MOVEM E,@T	;XR(2)

	FMPR Y,X
	FMPR Z,W
	FADR Y,Z
	FADR Y,@U
	MOVEM Y,@V	;XI(2)

	MOVE Y,AWR(C)
	MOVE Z,AWI(C)

	MOVE E,W
	FMPR E,Y
	MOVE F,X
	FMPR F,Z
	FSBR E,F
	FADRM E,@G	;XR(1)

	FMPR Y,X
	FMPR Z,W
	FADR Y,Z
	FADRM Y,@U	;XI(1)

	AOS A
	CAMLE A,ISTP
	JRST FINDO3

	ADD C,IGR
	ADD D,IGR
	AOJA B,DO3R

FINDO3:	MOVE A,IST
	ADD A,IGA
	CAMGE A,RN
	JRST DO2R

.I IGR=IGR/2
.I IGA=(IS=IGA)+IGA

	MOVE A,RI
	SOJG A,DO1R

	POP P,W
	POP P,V
	POP P,U
	POP P,T
	POP P,G
	POPJ P,

;               COMPLEX VECTOR ABS VALUE

ABSVS:	MOVE E,A	;PARAM=0 => NO SQRT
	MOVE A,NN
ABSET:
.F ,,XR1@^2 +XI1@^2
	JUMPE E,NOSQR
	EXCH A,C
	PUSHJ P,SQRT
	EXCH A,C

NOSQR:	MOVEM C,XR1@
	SOJGE A,ABSET

RESURN:	MOVEI A,0
	POPJ P,
;               BIT REVERSE COMPLEX VECTOR
REVBS:	MOVE A,NN
	HRLI G,A
	HRR G,ABTRVT
REVB:	MOVE B,G@
	CAML B,A
	JRST CONT
	MOVE C,XR2@
	EXCH C,XR1@
	MOVEM C,XR2@
	MOVE C,XI2@
	EXCH C,XI1@
	MOVEM C,XI2@
CONT:	SOJGE A,REVB

	JRST RESURN


;NEXT SETS UP NUMEROUS PARAMETERS DEPENDING ON G
SETNP:
.I RN=
.I NN=RN-1
.I NO8=(NO4=(NO2=RN/2)/2)/2
.I FLT=FFLOAT<RN>
	POPJ P,

;               SEPERATE REAL TRANSFORMS

SEPER:	MOVE A,NO2
	MOVE B,A
	SOS A
SSPRS:	AOS B
	MOVE F,XR1@
	MOVE G,XR2@
	FAD F,G
	FSB G,XR1@
	FSC F,-1
	FSC G,-1

	MOVE E,XI1@
	MOVE C,XI2@
	FAD C,E
	FSB E,XI2@
	FSC C,-1
	FSC E,-1

	MOVEM F,XR1@	;(XR(I)+XR(N-I))/2 => XR(I)
	SOS B
	MOVEM G,XI2@	;(-XR(I)+XR(N-I))/2 => XI(N-I-1)
	MOVEM C,XR2@	;(XI(I)+XI(N-I))/2 => XR(N-I-1)
	AOS B
	MOVEM E,XI1@	;(XI(I)-XI(N-I))/2 => XI(I)

	SOJG A,SSPRS

	CLEARM XI2@	;XI(N-1)=0
	MOVE C,XI1@
	MOVEM C,XR2@	;XR(N-1)=XI(0)
	CLEARM XI1@	;XI(0)=0
	JRST RESURN
CIRSET:		;SET UP TWO CIRCLES IN AXR1,AXI1
.F FXST1=FFIX<INCR*RA20*MAG>	;?MAG? OFFSET OF ONE CIRCLE
.I FMAGNI<FCSX,FCSY>
	MOVEM A,FCSXX
	MOVEM B,FCSYY	;CENTRE IN VIDI COORDS
.F INCRR=INCR*MAG
.I LOOKC<XR1,FCSXX-FXST1,FCSYY,INCRR>
	MOVSS FXST1

	MOVE A,RN
	SOS A
LOPAEO:
.I ,XI1@=XR1@+FXST1+FXST1
	SOJGE A,LOPAEO
	POPJ P,

;               SETUP FOR VIDOT OF CIRCLE

LOOKC:	MOVE G,A	;ARRAY,X,Y,INCR
.F FRAD=HFLOAT<NVSCL>*D*FLT/TWPI	;CALCULAT RADIUS
	HRLI G,C
	IMUL B,NVSCL
	IMUL C,NVSCL
	HLR B,C
	MOVEM B,DCEN	;CENTRE X,,Y

	MOVE C,RN	;POINTS AROUND CIRCUMFERENCE
	SOS C

LCRTC:	MOVE A,WI3@
	FMP A,FRAD
	FIX A
	HRL E,B
	MOVE A,WR3@
	FMP A,FRAD
	FIX A
	HRR E,B
	ADD E,DCEN	;FIXX<COS(T)*FRAD,,SIN(T)*FRAD)>+(XCEN,,YCEN)
	MOVEM E,G@
	SOJGE C,LCRTC

	JRST RESURN
;		SUM BOTTOM PART OF VECTOR

SUMXV:	CAMGE A,XFLW		;XS,XF
	MOVE A,XFLW
.I XLW=,XUP=
.I PARL=SUMVEC<XR1,XFLW,XLW>
.I SUMVEC<XR1,XUP,NO2>
	FADRM A,PARL
.I PARTF=SUMVEC<XR1,XLW,XUP>
.F ,A+PARL
	POPJ P,




;               SUM TOP PART OF VECTOR

SUMYV:	CAMGE A,XFLW
	MOVE A,XFLW
.I XLW=,XUP=
.I PARL=SUMVEC<XR1,RN-XLW,RN-XFLW>
.I SUMVEC<XR1,NO2,RN-XUP>
	FADRM A,PARL
.I PARTF=SUMVEC<XR1,RN-XUP,RN-XLW>
.F ,A+PARL
	POPJ P,

XFLW:	1	;LOWEST FREQUENCY USED IN NORMALISATION

;               TELL ABOUT WORKTABLES

RSETUP:	HRLI C,3
	MOVEM C,WI3
	HRLI C,4
	MOVEM C,WI4
	HRLI B,3
	MOVEM B,WR3
	HRLI B,4
	MOVEM B,WR4
	HRRZM A,ABTRVT
	JRST RESURN


;               TELL ABOUT VECTOR ACS

SETXY:	HRLI B,1
	MOVEM B,XI1
	HRLI B,2
	MOVEM B,XI2
	HRLI A,1
	MOVEM A,XR1
	HRLI A,2
	MOVEM A,XR2
	JRST RESURN
RN:	8	;NN
NN:	7	;ABOVE LESS 1
LN:	3	;LOG N
NO2:	4		;N OVER 2
NO4:	2
NO8:	1
FLT:	8.0	;FLOATED N
TPN:	0.1	;2 PI /N

TWPI:	6.283185307

XLW:	0
IGA:	0
XUP:	0
IS:	0
IGR:	0
ITN:	0
RI:	0
IST:	0
ISTP:	0

NVSCL:	1,,

IFN GPHFLG,[

FXITNW:	SKIPL A,FXSTAR
	PUSHJ P,ARYDEL	;FLUSH PREV DISPLAY IF ANY
	PUSHJ P,DISIN
	HRRZM A,FXSTAR
	JRST DISAAD

;DISPLAY HACKS FOR FOCUS

FXSTR:	PUSH P,A
	PUSH P,T
	PUSHJ P,FXITNW
	MOVE A,XR1
	HRRM A,FASNA1

	JSP T,GPHMK	;MAKE GRAPH OF VIDI DATA
	400000+<-400&3777>,,400000+<-700&3777>
	100000,,1740	;IMMEDIATE, OCTAL, MAX =1740
	20000,,1740	;DIRECT, F.P. , MAX =1740
	-MNN*2,,0
FASNA1:	-MNN*2,,0	;GET BOTH AXR AND AXI
	0		;NO HORZ LIM LABELING
	200000,,	;NORM VERT LIM LABELING
	[ASCIZ /VIDI POSITION/]
	[ASCIZ /VIDI VALUE/]
	0	;NO HOR TRANSFER FUNC
	0	;NO VRT TRANSFER FUNC

FXSTRX:	POP P,T
	POP P,A
	POPJ P,

FDSFFT:	PUSH P,A
	PUSH P,T
	PUSHJ P,FDSMXX
	MOVE A,XR1
	HRRM A,FASNA2

	JSP T,GPHMK
	400000+<-400&3777>,,400000+<-700&3777>
	100000,,1740
	20000,,1100
	-MNN,,0
FASNA2:	-MNN,,0
	0
	200000,,
	[ASCIZ /FREQUENCY/]
	[ASCIZ /POWER/]
	0
	FDSFF1
	
	JRST FXSTRX

FDSMXX:	PUSH P,B
	MOVEI A,4
.F FDSMAX=TOTLEN/FFLOAT<MNNV>*TOTFRC
	POP P,B
	POPJ P,

TOTFRC:	0.02

FDSFF1:	CAML A,FDSMAX
	MOVE A,FDSMAX
	POPJ P,

FXSTR1:	PUSH P,A
	PUSH P,T
	MOVN A,FXSRI	;INDEX INTO AXSV
	HRLM A,FSTRX2	;STORE # PTS
	MOVN A,N200
	HRLM A,FSTRX1

	JSP T,GPHMK	;MAKE GRAPH OF AXSV
	200000+100,,300	;CONNECT LINES ORG AT 100,100
	304000,,400	;X MAX 400 REL TO ORG IMMED, USE MIN OF DATA
	220000,,400	;Y MAX 400 REL TO ORG FLT. PT.,
FSTRX1:	0		;AOBJN WD X # PTS IN FULL RANGE
FSTRX2:	AXSV		;AOBJN WD Y # PTS SO FAR
	400000,,FXSXLB	;GO TO ROUTINE TO GET X LIMS
	200000,,	;USE MIN ,MAX FOR Y
	[ASCIZ /FOCUS COMM/]
	[ASCIZ /FOCUS FUNCTION/]
	0	;NO HORZ TRANS FUNCT
	0	;NO VERT TRANS FUNCT

	CLEARM TYPIN
	SKIPLE FXSTSW	;SKIP ON DONT HANG FOR TTY
FXSTR2:	SKIPGE TYPIN
	JRST FXSTRX
	MOVEI A,4
	.SLEEP A
	JRST FXSTR2

FXSXLB:	MOVE A,FLW	;RETURN MIN,MAX OF FOCUS COMM
	MOVE B,FUP
	CAMN A,B
	AOS B
	POPJ P,


]
]
O2R

.I IGR=IGR/2
.I IGA=(IS=IGA)+IGA

	MOVE A,RI
	SOJG A,DO1R

	POP P,W
	POP P,V
	POP P,U
	POP P,T
	POP P,G
	POPJ P,

;               COMPLEX VECTOR ABS VALUE

ABSVS:	MOVE E,A	;PARAM=0 => NO SQRT
	MOVE A,NN
ABSET:
.F ,,XR1@^2 +XI1@^2
	JUMPE E,NOSQR
	EXCH A,C
	PUSHJ P,SQRT
	EXCH A,C

NOSQR:	MOVEM C,XR1@
	SOJGE A,ABSET

RESURN:	MOVEI A,0
	POPJ P,
;               BIT REVERSE COMPLEX VECTOR
REVBS:	MOVE A,NN
	HRLI G,A
	HRR G,ABTRVT
REVB:	MOVE B,G@
	CAML B,A
	JRST CONT
	MOVE C,XR2@
	EXCH C,XR1@
	MOVEM C,XR2@
	MOVE C,XI2@
	EXCH C,XI1@
	MOVEM C,XI2@
CONT:	SOJGE A,REVB

	JRST RESURN


;NEXT SETS UP NUMEROUS PARAMETERS DEPENDING ON G
SETNP:
.I RN=
.I NN=RN-1
.I NO8=(NO4=(NO2=RN/2)/2)/2
.I FLT=FFLOAT<RN>
	POPJ P,

;               SEPERATE REAL TRANSFORMS

SEPER:	MOVE A,NO2
	MOVE B,A
	SOS A
SSPRS:	AOS B
	MOVE F,XR1@
	MOVE G,XR2@
	FAD F,G
	FSB G,XR1@
	FSC F,-1
	FSC G,-1

	MOVE E,XI1@
	MOVE C,XI2@
	FAD C,E
	FSB E,XI2@
	FSC C,-1
	FSC E,-1

	MOVEM F,XR1@	;(XR(I)+XR(N-I))/2 => XR(I)
	SOS B
	MOVEM G,XI2@	;(-XR(I)+XR(N-I))/2 => XI(N-I-1)
	MOVEM C,XR2@	;(XI(I)+XI(N-I))/2 => XR(N-I-1)
	AOS B
	MOVEM E,XI1@	;(XI(I)-XI(N-I))/2 => XI(I)

	SOJG A,SSPRS

	CLEARM XI2@	;XI(N-1)=0
	MOVE C,XI1@
	MOVEM C,XR2@	;XR(N-1)=XI(0)
	CLEARM XI1@	;XI(0)=0
	JRST RESURN
CIRSET:		;SET UP TWO CIRCLES IN AXR1,AXI1
.F FXST1=FFIX<INCR*RA20*MAG>	;?MAG? OFFSET OF ONE CIRCLE
.I FMAGNI<FCSX,FCSY>
	MOVEM A,FCSXX
	MOVEM B,FCSYY	;CENTRE IN VIDI COORDS
.F INCRR=INCR*MAG
.I LOOKC<XR1,FCSXX-FXST1,FCSYY,INCRR>
	MOVSS FXST1

	MOVE A,RN
	SOS A
LOPAEO:
.I ,XI1@=XR1@+FXST1+FXST1
	SOJGE A,LOPAEO
	POPJ P,

;               SETUP FOR VIDOT OF CIRCLE

LOOKC:	MOVE G,A	;ARRAY,X,Y,INCR
.F FRAD=HFLOAT<NVSCL>*D*FLT/TWPI	;CALCULAT RADIUS
	HRLI G,C
	IMUL B,NVSCL
	IMUL C,NVSCL
	HLR B,C
	MOVEM B,DCEN	;CENTRE X,,Y

	MOVE C,RN	;POINTS AROUND CIRCUMFERENCE
	SOS C

LCRTC:	MOVE A,WI3@
	FMP A,FRAD
	FIX A
	HRL E,B
	MOVE A,WR3@
	FMP A,FRAD
	FIX A
	HRR E,B
	ADD E,DCEN	;FIXX<COS(T)*FRAD,,SIN(T)*FRAD)>+(XCEN,,YCEN)
	MOVEM E,G@
	SOJGE C,LCRTC

	JRST RESURN
;		SUM BOTTOM PART OF VECTOR

SUMXV:	CAMGE A,XFLW		;XS,XF
	MOVE A,XFLW
.I XLW=,XUP=
.I PARL=SUMVEC<XR1,XFLW,XLW>
.I SUMVEC<XR1,XUP,NO2>
	FADRM A,PARL
.I PARTF=SUMVEC<XR1,XLW,XUP>
.F ,A+PARL
	POPJ P,




;               SUM TOP PART OF VECTOR

SUMYV:	CAMGE A,XFLW
	MOVE A,XFLW
.I XLW=,XUP=
.I PARL=SUMVEC<XR1,RN-XLW,RN-XFLW>
.I SUMVEC<XR1,NO2,RN-XUP>
	FADRM A,PARL
.I PARTF=SUMVEC<XR1,RN-XUP,RN-XLW>
.F ,A+PARL
	POPJ P,

XFLW:	1	;LOWEST FREQUENCY USED IN NORMALISATION

;               TELL ABOUT WORKTABLES

RSETUP:	HRLI C,3
	MOVEM C,WI3
	HRLI C,4
	MOVEM C,WI4
	HR