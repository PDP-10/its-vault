;; ; TVDRVR
;; ;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;            GRAPHICS PACKAGE FOR PDP11 TV TERMINALS.		    ;;;
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;
;; TV'S HAVE 455. HORIZONTAL LINES OF 576.  DOTS EACH 
;; (262080.  BITS OUT 'O 262144). 
;; MEMORY IS ORGANIZED AS 9 64.-BIT WORDS 
;; (EQUIV TO 18.  32.-BIT WORDS) PER LINE. 
;; THE PDP10 ACCESSES HALF OF SUCH A WORD (OR TWO 16.-BIT CHUNKS) AT ONCE. 
;; THESE 32.  BITS ARE PACKED LEFT JUSTIFIED INTO THE 36.  BITS. 
;; TVEND (OR THE LAST WORD OF THE TV-MEMORY) HAS TWO FUNCTIONS: 
;; BIT 200000 WHEN ON, COMPLEMENTS THE BLACK/WHITE OUTPUT.  
;; BITS 177760 ARE COUNTER FOR WHICH 64.-BIT WORD THE FRAME IS TO START ON.  
;; FOR WINNAGE THE NUMBER OUGHT TO BE A MULTIPLE OF 9.  
;; CHARACTERS ARE 10.  LINES HIGH AND 5 POINTS WIDE (RIGHT AND TOP JUSTIFIED). 
;; LINE-PITCH IS 12.  TV-LINES, CHARACTER-PITCH IS 6 TV-POINTS.  
;; THATS 96.  CHRS/LINE EXACTLY AND 37. AND 11./12.  LINES (3552.  CHRS).
;; [NOTE THE LAST, BOTTOM-MOST LINE IS HIDDEN, NOT VISIBLE ON SCREEN].

;; SYMBOLS MUST BE LOADED TO CALL GETCOR, SACONS.

(VALRET ':SYMLOD/
P)

;; *PAGE

;; ;
;; ;                                LAP ROUTINES
;; ;
;; THE FOLLOWING LAP SUBROUTINE INITIALIZES THE TV BUFFER, 
;; BY PERFORMING THE SYSTEM CALL TO MAP THE 11'S MEMORY INTO 
;; LISP'S ADDRESS SPACE AND CONNING LISP INTO
;; THINKING THAT AREA OF MEMORY IS REALLY A FIXNUM ARRAY.

(LAP TVINIT SUBR)
(ARGS TVINIT (NIL . 0))
(DEFSYM TTSAR-DATA 200107)
(DEFSYM FIXNUM-ARRAY 200)
(DEFSYM IMMEDIATE 1000)
(DEFSYM READ-WRITE-ACCESS 600000)
	(HLLOS 0 NOQUIT)
	(PUSH FXP 10)
	(PUSH FXP 12)
	(PUSH FXP 7)
	(MOVEI 7 12)
	(PUSHJ P GETCOR)
	(SKIPN 0 7)
	(*VALUE)
	(MOVEI 7 2000 7)
	(MOVEI 12 -6 7)
	(HRLI 12 TV-ARRAY-HEADER)
	(BLT 12 -1 7)
	(HRRM 7 -6 7)
	(PUSH FXP 7)
	(JSP 6 SACONS)
	(POP FXP 7)
	(MOVEM A -3 7)
	(HRLI 12 FIXNUM-ARRAY)
	(HLLM 12 0 A)
	(MOVEI 12 -5 7)
	(HRRM 12 0 A)
	(HRLI 12 TTSAR-DATA)
	(HLLM 12 1 A)
	(HRRM 7 1 A)
	(MOVEM A (SPECIAL TV))
	(LSH 7 -12)
	(HRLI 7 -11)
	(SETZ 10)
	(*CALL 0 MAP-11-MEMORY-TO-10-ADDRESS-SPACE)
	(*VALUE)
	(MOVE 7 @ (SPECIAL TTY))
	(MOVEI A 'T)
	(CAIN 7 5)
	(MOVEI A 'NIL)
	(MOVEM A (SPECIAL TV-DISABLE))
	(POP FXP 7)
	(POP FXP 12)
	(POP FXP 10)
	(HLLZS 0 NOQUIT)
	(JRST 0 CHECKI)
TV-ARRAY-HEADER
	(0 0 0 -17776)
	(PUSH P CFIX1)
	(JSP 7 2DIMF)
ASAR-ADDRESS
	(0)
	(710)
	(22)
MAP-11-MEMORY-TO-10-ADDRESS-SPACE
	(SETZ)
	(SIXBIT CORBLK)
	(0 0 READ-WRITE-ACCESS IMMEDIATE)
	(0 0 -1 IMMEDIATE)
	(7)
	(0 0 -2 IMMEDIATE)
	(SETZ 0 10)
NIL 

;;; MODFLG = +1 -> IOR onto screen, 0 -> XOR and -1, -> ANDCAM.
;;; TV-DISABLE = T -> don't try to modify screen.
;;; TV-PENFLG = T -> pen is up, CONNECT will draw point, not line.

(declare (special modlfg tv-disable tv-penflg))

(SETQ MODFLG +1 TV-DISABLE NIL tv-penflg t)

(TVINIT) 

;; THIS ARRAY IS REALLY YOUR TV BUFFER! 
;; DOING (STORE (TV <LINE> <COLUMN>) <BITS>)
;; ACTUALLY CAUSES THE BITS TO APPEAR ON YOUR SCREEN.  
;; THINGS TO REMEMBER: KEEP THE LAST 4 LOW ORDER BITS CLEAR, 
;; AND COORDINATES RUN TOP TO BOTTOM, LEFT TO RIGHT.

(DECLARE (ARRAY* (FIXNUM TV 2.))
	 (ARRAY* (FIXNUM TV-SAVED 2.)))

(PUTPROP 'TV TV 'ARRAY) 

;; If there isn't a TV, may be fun to play in core (?)

(defun make-fake-tv ()
	(setq tv-disable nil)
	(array tv fixnum 454. 18.)))

;; Now come the "useful" functions for graphic output.
;;
;; THIS FUNCTION RAPIDLY CLEARS THE SCREEN

(LAP CLEAR SUBR)
(ARGS CLEAR (NIL . 0))
	(SKIPE 0 (SPECIAL TV-DISABLE))
	(JRST 0 G0000)
	(MOVEI 6 G0001)
	(PUSH P 6)
	(PUSH P (% 0 0 '0))
	(PUSH P (% 0 0 '0))
	(MOVNI 6 2)
	(JCALL 16 'CURSORPOS)
G0001	(MOVSI 7 -17776)
G0002	(SETZM 0 @ (ARRAY TV))
	(AOBJN 7 G0002)
G0000	(MOVEI A 'NIL)
	(POPJ P)
NIL 
 
;; THIS FUNCTION RAPIDLY COMPLEMENTS ALL BITS ON YOUR SCREEN

(LAP COMPLEM SUBR)
(ARGS COMPLEM (NIL . 0))
	(SKIPE 0 (SPECIAL TV-DISABLE))
	(JRST 0 G0000)
	(MOVNI 10 20)
	(MOVSI 7 -17776)
G0002	(XORM 10 @ (ARRAY TV))
	(AOBJN 7 G0002)
G0000	(MOVEI A 'NIL)
	(POPJ P)
NIL

;; THIS FUNCTION FLIPS THE BIT WHICH DECIDES WHETHER ONES ARE WHITE OR NOT.
;; IF THE ARGUMENT IS NIL, THEN ONES APPEAR AS WHITE DOTS.
;; IF THE ARGUMENT IS non-NIL, THEN ZEROS APPEAR AS WHITE DOTS.

(LAP TVFLIP SUBR)
(ARGS TVFLIP (NIL . 1))
	(SKIPE 0 (SPECIAL TV-DISABLE))
	(JRST 0 G0000)
	(MOVEI 7 17777)
	(MOVEI 10 200000)
	(CAIN 1 'NIL)
	(JRST 0 TRNONN)
	(CAIN 1 'T)
	(JRST 0 TRNOFF)
	(XORM 10 @ (ARRAY TV))
G0000	(MOVEI A 'NIL)
	(POPJ P)
TRNOFF	(ANDCAM 10 @ (ARRAY TV))
	(POPJ P)
TRNONN	(IORM 10 @ (ARRAY TV))
	(POPJ P)
NIL 

;; THIS FUNCTION SETS THE STARTING POINT OF TV-SCREEN AT LINE
;; NUMBER GIVEN AS ARGUMENT

(LAP TVSCROLL SUBR)
(ARGS TVSCROLL (NIL . 1))
	(SKIPE 0 (SPECIAL TV-DISABLE))
	(JRST 0 G0000)
	(MOVEI 7 17777)
	(MOVE 10 0 1)
	(IMULI 10 9)
	(ANDI 10 7777)
	(LSH 10 4)
	(MOVE 11 @ (ARRAY TV))
	(ANDI 11 200000)
	(IOR 10 11)
	(MOVEM 10 @ (ARRAY TV))
G0000	(POPJ P)
NIL

;; THIS FUNCTION WRITES YOUR SCREEN AS AN 8 BLOCK FILE ONTO DISK
;; IN A FORMAT SUITABLE FOR READING IN WITH TVREAD.

(LAP TVWRITE SUBR) 
(ARGS TVWRITE (NIL . 0)) 
	(MOVEI T G0001) 
	(PUSH P T) 
	(PUSH P (% 0 0 '/:BKPH/;TVWRIT/
:VP/
)) 
	(MOVNI T 1) 
	(JCALL 16 'VALRET) 
G0001 	(movei a 't)
	(POPJ P) 
NIL 

;; THIS FUNCTION WRITES YOUR screen OUT TO DISK IN A FORMAT
;; SUITABLE FOR XGP OUTPUT.

(LAP ZAP SUBR) 
(ARGS ZAP (NIL . 0)) 
	(MOVEI T G0001) 
	(PUSH P T) 
	(PUSH P (% 0 0 '/:BKPH/;ZAP/
:VP/
)) 
	(MOVNI T 1) 
	(JCALL 16 'VALRET) 
G0001 	(movei a 't)
	(POPJ P) 
NIL 


;; THIS FUNCTION WRITES A POINT ON THE SCREEN AT (X,Y) 
;; (X,Y)=(0,0) IS LOWER-LEFT HAND-SIDE OF SCREEN. OFF THE SCREEN IS IGNORED
;; RETURNS T IF ON THE SCREEN, NIL OTHERWISE.
;; X RANGES FROM 0 TO 575., Y FROM 0 TO 453. (INCLUSIVE)
;; RESETS THE PEN-UP FLAG (TO DOWN - nil).

(LAP POINT SUBR)
(ARGS POINT (NIL . 2))
	(SETZM  0 (special tv-PENFLG))
	(MOVE 7 0 A)
	(movem 7 xoldpt)
	(MOVE 10 0 B)
	(movem 10 yoldpt)
(ENTRY TV-DOTPUT SUBR)
(ARGS TV-DOTPUT (NIL . 0))
	(SKIPE 0 (SPECIAL TV-DISABLE))
	(JRST 0 G0002)
	(SKIPL 0 7)
	(SKIPGE 0 10)
	(JRST 0 G0002)
	(CAIGE 7 1100)
	(CAIL 10 706)
	(JRST 0 G0002)
	(SUBI 10 705)
	(IMULI 10 -22)
	(MOVE 11 7)
	(LSH 7 -5)
	(ADD 10 7)
	(LSH 7 5)
	(SUB 7 11)
	(HRLZI 11 400000)
	(LSH 11 0 7)
	(MOVE 7 10)
(ENTRY TV-QCKVRT SUBR)
(ARGS TV-QCKVRT (NIL . 0))
	(SKIPLE 12 @ (SPECIAL MODFLG))
	(IORM 11 @ (ARRAY TV))
	(SKIPN 0 12)
	(XORM 11 @ (ARRAY TV))
	(SKIPGE 0 12)
	(ANDCAM 11 @ (ARRAY TV))
	(MOVEI A 'T)
	(POPJ P)
G0002	(MOVEI A 'NIL)
	(POPJ P)
;;; Draw a dot for vector or circle algorithm.
;;; Take into account coordinate transformations in force now.
(entry TV-DOTFLT SUBR)
(ARGS TV-DOTFLT (NIL . 2))
	(MOVE 7 0 A)
	(MOVE 10 0 B)
	(SKIPE 3 SWPFLG)
	(EXCH 7 10)
	(SKIPE 4 NEGATY)
	(MOVN 10 10)
	(SKIPE 5 NEGATX)
	(MOVN 7 7)
	(ADD 7 XORIGIN)
	(ADD 10 YORIGIN)
	(JCALL 0 'TV-DOTPUT)
;; THIS FUNCTION CHECKS IF THE POINT AT (X,Y) ON YOUR SCREEN IS ON.
;; IT RETURNS T IF SO -- NIL OTHERWISE.
;; X RANGES FROM 0 TO 575., Y FROM 0 TO 453. (INCLUSIVE)
;; RETURNS NIL OF POINT IS OFF THE SCREEN.
(entry TESTP SUBR)
(ARGS TESTP (NIL . 2))
	(MOVE 7 0 A)
	(MOVE 10 0 B)
	(SKIPL 0 7)
	(SKIPGE 0 10)
	(JRST 0 H0002)
	(CAIGE 7 1100)
	(CAIL 10 706)
	(JRST 0 H0002)
	(SUBI 10 705)
	(IMULI 10 -22)
	(MOVE 11 7)
	(LSH 7 -5)
	(ADD 10 7)
	(LSH 7 5)
	(SUB 7 11)
	(HRLZI 11 400000)
	(LSH 11 0 7)
	(MOVE 7 10)
	(MOVEI A 'T)
	(TDNN 11 @ (ARRAY TV))
H0002	(MOVEI A 'NIL)
	(POPJ P)
;; THIS DRAWS A VECTOR IN ONE OCTANT -- USED BY LINE.
(entry tv-VCTOCT SUBR)
(ARGS TV-VCTOCT (NIL . 2))
	(PUSH FXP 0 B)
	(PUSH FXP 0 A)
	(MOVEI 7 0)
	(MOVEI 10 0)
	(MOVN 11 0 A)
	(ASH 11 -1)
	(PUSH FXP 11)
	(PUSH FXP 10)
	(PUSH FXP 7)
I0001	(MOVEI B -1 FXP)
	(MOVEI A 0 FXP)
	(CALL 2 'TV-DOTFLT)
	(MOVE 7 0 FXP)
	(CAML 7 -3 FXP)
	(JRST 0 I0002)
	(MOVE 10 -4 FXP)
	(ADDB 10 -2 FXP)
	(AOS 0 0 FXP)
	(JUMPL 10 I0001)
	(MOVN 7 -3 FXP)
	(ADDB 7 -2 FXP)
	(AOS 0 -1 FXP)
	(JRST 0 I0001)
I0002	(SUB FXP (% 0 0 5 5))
	(MOVEI A 'T)
	(POPJ P)
;; THIS DRAWS A LINE BETWEEN (XL,YL) AND (XH,YH)
;; RESETS PEN-UP FLAG (TO DOWN).
(entry LINE SUBR)
(ARGS LINE (NIL . 4))
	(SETZM  0 (special tv-PENFLG))
	(MOVE 7 0 1)
	(movem 7 xorigin)
	(MOVE 10 0 2)
	(movem 10 yorigin)
	(MOVE 7 0 3)
	(movem 7 xoldpt)
	(SUB 7 XORIGIN)
	(MOVE 10 0 4)
	(movem 10 yoldpt)
	(SUB 10 YORIGIN)
	(SKIPE 0 (SPECIAL TV-DISABLE))
	(jrst 0 J0009)
	(JUMPE 7 J0004)
	(JUMPE 10 J0006)
	(SETZM 0 NEGATX)
	(SETZM 0 NEGATY)
	(SETZM 0 SWPFLG)
	(JUMPGE 7 J0001)
	(MOVN 7 7)
	(setom 0 NEGATX)
J0001	(JUMPGE 10 J0002)
	(MOVN 10 10)
	(setom 0 NEGATY)
J0002	(CAML 7 10)
	(JRST 0 J0003)
	(EXCH 7 10)
	(setom 0 SWPFLG)
J0003	(PUSH FXP 10)
	(PUSH FXP 7)
	(MOVEI B -1 FXP)
	(MOVEI A 0 FXP)
	(CALL 2 'TV-VCTOCT)
	(SUB FXP (% 0 0 2 2))
	(POPJ P) 
J0004	(MOVE 7 0 1)
	(SKIPL 0 7)
	(CAIL 7 1100)
	(jrst 0 J0009)
	(MOVE 10 0 2)
	(CAMLE 10 0 4)
	(MOVE 10 0 4)
	(SKIPGE 0 10)
	(MOVEI 10 0)
	(MOVEM 10 LOWERY)
	(CAIL 10 706)
	(jrst 0 J0009)
	(MOVE 10 0 2)
	(CAMGE 10 0 4)
	(MOVE 10 0 4)
	(CAIL 10 706)
	(MOVEI 10 705)
	(MOVEM 10 UPPERY)
	(SKIPGE 0 10)
	(jrst 0 J0009)
	(CALL 0 'TV-DOTPUT)
	(MOVE 10 UPPERY)
	(SUB 10 LOWERY)
	(SKIPA 0 0)
J0005	(CALL 0 'TV-QCKVRT)
	(MOVEI 7 22 7)
	(SOJGE 10 J0005)
J0008	(movei a 't)
	(POPJ P)
J0009	(movei a 'nil)
	(popj p)
xoldpt	(0)
yoldpt 	(0)
xorigin	(0)
yorigin (0)
negatx	(0)
negaty	(0)
swpflg	(0)
LOWERY	(0)
UPPERY	(0)
LOWERX	(0)
UPPERX	(0)
WRDMIN	(0)
WRDMAX	(0)
MINMSK	(0)
MAXMSK	(0)
J0006	(MOVE 7 0 2)
	(SKIPL 0 7)
	(CAIL 7 706)
	(jrst 0 J0009)
	(MOVE 7 0 1)
	(CAMLE 7 0 3)
	(MOVE 7 0 3)
	(SKIPGE 0 7)
	(MOVEI 7 0)
	(MOVEM 7 LOWERX)
	(CAIL 7 1100)
	(jrst 0 J0009)
	(MOVE 10 0 1)
	(CAMGE 10 0 3)
	(MOVE 10 0 3)
	(CAIL 10 1100)
	(MOVEI 10 1077)
	(MOVEM 10 UPPERX)
	(SKIPGE 0 10)
	(jrst 0 J0009)
	(LSH 7 -5)
	(MOVEM 7 WRDMIN)
	(LSH 7 5)
	(SUB 7 LOWERX)
	(MOVNI 11 1)
	(LSH 11 0 7)
	(ANDCMI 11 17)
	(MOVEM 11 MINMSK)
	(LSH 10 -5)
	(MOVEM 10 WRDMAX)
	(LSH 10 5)
	(SUB 10 UPPERX)
	(MOVNI 11 1)
	(SUBI 10 1)
	(LSH 11 0 10)
	(SETCAM 11 MAXMSK)
	(MOVE 7 WRDMIN)
	(MOVE 11 MINMSK)
	(CAML 7 WRDMAX)
	(AND 11 MAXMSK)
	(MOVE 10 0 2)
	(SUBI 10 705)
	(IMULI 10 -22)
	(ADD 7 10)
	(CALL 0 'TV-QCKVRT)
	(MOVNI 11 1)
	(ANDCMI 11 17)
	(AOJ 7 0)
J0007	(AOS 10 WRDMIN)
	(CAMLE 10 WRDMAX)
	(jrst 0 J0008)
	(CAML 10 WRDMAX)
	(AND 11 MAXMSK)
	(CALL 0 'TV-QCKVRT)
	(AOJA 7 J0007)
;; THIS DRAWS A LINE BETWEEN PREVIOUS POINT AND (X,Y)
;; UNLESS PEN IS UP -- IN WHICH CASE IT JUST DRAWS A POINT AT (X,Y).
(entry CONNECT SUBR)
(ARGS CONNECT (NIL . 2))
	(SKIPE 0 (special tv-PENFLG))
	(JCALL 2 'POINT)
	(MOVE 3  A)
	(MOVE 4  B)
	(push fxp xoldpt)
	(push fxp yoldpt)
	(movei a -1 fxp)
	(movei b 0 fxp)
	(CALL 4 'LINE)
	(sub fxp (% 0 0 2 2))
	(popj p)
(entry PENUP SUBR)
(ARGS PENUP (NIL . 0))
	(MOVEI A 'T)
	(movem A (special tv-PENFLG))
	(POPJ P)
;; THIS DRAWS AN OCTANT OF A CIRCLE -- USED BY CIRCLE.
(entry TV-CIROCT SUBR)
(ARGS TV-CIROCT (NIL . 1))
	(MOVE 7 0 A)
	(MOVEI 10 0)
	(MOVN 11 7)
	(PUSH FXP 11)
	(PUSH FXP 10)
	(PUSH FXP 7)
	(MOVE 10 SWPFLG)
	(XOR 10 NEGATY)
	(XOR 10 NEGATX)
	(JUMPN 10 K0003)
K0001	(MOVE 10 -1 FXP)
	(CAMGE 10 0 FXP)
	(JRST 0 K0004)
	(CAME 10 0 FXP)
	(JRST 0 K0002)
	(MOVE 10 SWPFLG)
	(XOR 10 NEGATY)
	(XOR 10 NEGATX)
	(JUMPE 10 K0002)
K0004	(MOVEI B -1 FXP)
	(MOVEI A 0 FXP)
	(CALL 2 'TV-DOTFLT)
K0003	(MOVE 10 -1 FXP)
	(ASH 10 1)
	(MOVEI 10 1 10)
	(ADDB 10 -2 FXP)
	(AOS 0 -1 FXP)
	(JUMPL 10 K0001)
	(MOVN 7 0 FXP)
	(ASH 7 1)
	(ADDI 7 2)
	(ADDB 7 -2 FXP)
	(SOS 0 0 FXP)
	(JRST 0 K0001)
K0002	(SUB FXP (% 0 0 3 3))
	(MOVEI A 'T)
	(POPJ P)
;; THIS DRAWS A CIRCLE AROUND POINT (X,Y) WITH RADIUS R.
(entry CIRCLE SUBR)
(ARGS CIRCLE (NIL . 3))
	(MOVE 7 0 1)
	(movem 7 xorigin)
	(MOVE 10 0 2)
	(movem 10 yorigin)
	(SKIPE 0 (SPECIAL TV-DISABLE))
	(jrst 0 L0009)
	(PUSH FXP 0 C)
	(PUSHJ P L0004)
	(SUB FXP (% 0 0 1 1))
L0008	(movei a 't)
	(popj p)
L0009	(movei a 'nil)
	(popj p)
L0004	(SETZM 0 NEGATX)
	(PUSHJ P L0003)
	(setom 0 NEGATX)
L0003	(SETZM 0 NEGATY)
	(PUSHJ P L0002)
	(setom 0 NEGATY)
L0002	(SETZM 0 SWPFLG)
	(PUSHJ P L0001)
	(setom 0 SWPFLG)
L0001	(MOVEI A 0 FXP)
	(JCALL 1 'TV-CIROCT)
NIL

;; THIS PAINTS A 3 BY 3 BLOCK OF DOTS AT (X,Y) WITH (I/2) DOTS ON.
;; INPUT RANGES FROM 0 TO 18.

(LAP GREY9 SUBR)
(ARGS GREY9 (NIL . 3))
	(SKIPE 0 (SPECIAL TV-DISABLE))
	(POPJ P)
	(MOVE 7 0 A)
	(MOVE 10 0 B)
	(MOVE 11 7)
	(ADD 11 10)
	(ANDI 11 1)
	(ADD 11 0 C)
	(ASH 11 -1)
	(JUMPLE 11 G0002)
	(SKIPL 0 7)
	(SKIPGE 0 10)
	(JRST 0 G0002)
	(MOVEI 7 1 7)
	(MOVEI 10 1 10)
	(CAIGE 7 1077)
	(CAIL 10 705)
	(JRST 0 G0002)
	(PUSH FXP 7)
	(PUSH FXP 10)
	(PUSH FXP 11)

	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(SOS 0 -1 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(AOS 0 -1 FXP)
	(AOS 0 -2 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(AOS 0 -1 FXP)
	(SOS 0 -2 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(SOS 0 -1 FXP)
	(SOS 0 -2 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(SOS 0 -1 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(AOS 0 -2 FXP)
	(AOS 0 -2 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(AOS 0  -1 FXP)
	(AOS 0  -1 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(SOS 0 -2 FXP)
	(SOS 0 -2 FXP)
	(CALL 2 'TV-GREYDOT)
G0001	(SUB FXP (% 0 0 3 3))
G0002	(POPJ P)
NIL

;; THIS DRAWS A 12 BIT BLOCK OF DOTS AT (X,Y) WITH (I/2) DOTS ON
;; INPUT RANGES FROM 0 TO 24.

(LAP GREY12 SUBR)
(ARGS GREY12 (NIL . 3))
	(SKIPE 0 (SPECIAL TV-DISABLE))
	(POPJ P)
	(MOVE 7 0 A)
	(MOVE 10 0 B)
	(MOVE 11 7)
	(ADD 11 10)
	(ANDI 11 1)
	(ADD 11 0 C)
	(ASH 11 -1)
	(JUMPLE 11 G0002)
	(SKIPL 0 7)
	(SKIPGE 0 10)
	(JRST 0 G0002)
	(MOVEI 7 1 7)
	(MOVEI 10 1 10)
	(CAIGE 7 1077)
	(CAIL 10 705)
	(JRST 0 G0002)
	(PUSH FXP 7)
	(PUSH FXP 10)
	(PUSH FXP 11)

	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(AOS 0 -2 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(SOS 0 -1 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(SOS 0 -2 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(AOS 0 -1 FXP)
	(AOS 0 -1 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(AOS 0 -2 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(SOS 0 -1 FXP)
	(SOS 0 -1 FXP)
	(SOS 0 -1 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(SOS 0  -2 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(SOS 0 -2 FXP)
	(AOS 0 -1 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(AOS 0 -1 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(AOS 0 -2 FXP)
	(AOS 0 -2 FXP)
	(AOS 0 -2 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

	(SOS 0 -1 FXP)
	(CALL 2 'TV-GREYDOT)
	(SOSG 0 0 FXP)
	(JRST 0 G0001)

G0001	(SUB FXP (% 0 0 3 3))
G0002	(POPJ P)
NIL

;; THIS PLACES A DOT ON THE SCREEN -- USED BY GREY9 AND GREY12

(LAP TV-GREYDOT SUBR)
(ARGS TV-GREYDOT (NIL . 2))
	(MOVE 7 -2 FXP)
	(MOVE 10 -1 FXP)
	(SUBI 10 705)
	(IMULI 10 -22)
	(MOVE 11 7)
	(LSH 7 -5)
	(ADD 10 7)
	(LSH 7 5)
	(SUB 7 11)
	(HRLZI 11 400000)
	(LSH 11 0 7)
	(MOVE 7 10)
	(IORM 11 @ (ARRAY TV))
	(POPJ P)
NIL  


;; THIS PAINTS A 4 BY 4 BLOCK OF DOTS AT (X,Y) WITH (I/2) DOTS ON.
;; INPUT RANGES FROM 0 TO 32.

(LAP GREY16 SUBR)
(ARGS GREY16 (NIL . 3))
	(SKIPE 0 (SPECIAL TV-DISABLE))
	(POPJ P)
	(MOVE 7 0 A)
	(MOVE 10 0 B)
	(SKIPL 0 7)
	(SKIPGE 0 10)
	(JRST 0 G0002)
	(CAIGE 7 1077)
	(CAIL 10 705)
	(JRST 0 G0002)

	(LSH 7 -2)
	(LSH 10 -2)

	(MOVE 12 7)
	(ADD 12 10)

	(LSH 10 2)
	(SUBI 10 700)
	(IMULI 10 -22)
	(MOVE 11 7)
	(LSH 7 -3)
	(ADD 10 7)
	(ADD 10 (ARRAY TV))

	(LSH 7 3)
	(SUB 11 7)
	(MOVE 7 MASKS 11)

	(SKIPG 11 0 C)
	(JRST 0 G0002)

	(ANDI 12 1)
	(ADD 11 12)
	(LSH 11 -1)

	(JUMPLE 11 G0002)
	(CAILE 11 16.)
	(MOVEI 11 16.)

	(LSH 11 2)

	(TRNE 12 1)
	(JRST 0 ODDBAL)

	(MOVE 12 PATTS 11) 
	(AND 12 7)
	(IORM 12 0. 10)

	(MOVE 12 (+ PATTS 1) 11) 
	(AND 12 7)
	(IORM 12 18. 10)

	(MOVE 12 (+ PATTS 2) 11) 
	(AND 12 7)
	(IORM 12 36. 10)

	(MOVE 12 (+ PATTS 3) 11) 
	(AND 12 7)
	(IORM 12 54. 10)

	(POPJ P)

ODDBAL	(MOVE 12 (+ PATTS 3) 11) 
	(AND 12 7)
	(IORM 12 0. 10)

	(MOVE 12 (+ PATTS 2) 11) 
	(AND 12 7)
	(IORM 12 18. 10)

	(MOVE 12 (+ PATTS 1) 11) 
	(AND 12 7)
	(IORM 12 36. 10)

	(MOVE 12 PATTS 11) 
	(AND 12 7)
	(IORM 12 54. 10)

G0002	(POPJ P)

PATTS	(0)
	(0)
	(0)
	(0)

	(0 0 104200 421042)
	(0)
	(0)
	(0)

	(0 0 104200 421042)
	(0)
	(0)
	(0 0 210420 042104)

	(0 0 146300 631463)
	(0)
	(0)
	(0 0 210420 042104)

	(0 0 146300 631463)
	(0)
	(0 0 210420 042104)
	(0 0 210420 042104)

	(0 0 146300 631463)
	(0 0 104200 421042)
	(0 0 210420 042104)
	(0 0 210420 042104)

	(0 0 146300 631463)
	(0 0 104200 421042)
	(0 0 210420 042104)
	(0 0 631460 146314)

	(0 0 146300 631463)
	(0 0 146300 631463)
	(0 0 210420 042104)
	(0 0 631460 146314)

	(0 0 146300 631463)
	(0 0 146300 631463)
	(0 0 631460 146314)
	(0 0 631460 146314)

	(0 0 146300 631463)
	(0 0 567340 735673)
	(0 0 631460 146314)
	(0 0 631460 146314)

	(0 0 146300 631463)
	(0 0 567340 735673)
	(0 0 673560 356735)
	(0 0 631460 146314)

	(0 0 567340 735673)
	(0 0 567340 735673)
	(0 0 673560 356735)
	(0 0 631460 146314)

	(0 0 567340 735673)
	(0 0 567340 735673)
	(0 0 777760 777777)
	(0 0 631460 146314)

	(0 0 567340 735673)
	(0 0 777760 777777)
	(0 0 777760 777777)
	(0 0 631460 146314)

	(0 0 567340 735673)
	(0 0 777760 777777)
	(0 0 777760 777777)
	(0 0 673560 356735)

	(0 0 777760 777777)
	(0 0 777760 777777)
	(0 0 777760 777777)
	(0 0 673560 356735)

	(0 0 777760 777777)
	(0 0 777760 777777)
	(0 0 777760 777777)
	(0 0 777760 777777)

MASKS	(0 0 000000 740000)
	(0 0 000000 036000)
	(0 0 000000 001700)
	(0 0 000000 000074)
	(0 0 600000 000003)
	(0 0 170000 000000)
	(0 0 007400 000000)
	(0 0 000360 000000)
NIL

;; CIRCULATE INSTRUCTION FOR BIT REVERSEING

(LAP CIRCULATE SUBR)
(ARGS CIRCULATE (NIL . 2))
	(SKIPA F CFIX1)
	(MOVEI F EXITED)
	(MOVE 7 0 1)
	(SETZ 10 0 0)
	(MOVE 11 0 2)
	(CIRC 7 0 11)
	(MOVE 7 10)
	(JRST 0 0 F)
EXITED	(POPJ P EXITED)
NIL

;; A MORE WINNING RANDOM GENERATOR THAN THE ONE IN LISP

(LAP RANDOM1 SUBR) 
(ARGS RANDOM1 (NIL . 0))
	(SKIPA F CFIX1)
	(MOVEI F LEAVE)
	(MOVE D SEEDEL)
	(MULI D 3125.)
	(DIV D PRIMEL)
	(MOVEM R SEEDEL)
	(MOVE TT R)
	(LSH TT 1)
	(JRST 0 0 F)
LEAVE	(POPJ P LEAVE)
SEEDEL	(171622221402)
PRIMEL	(377777777741)
NIL  

(LAP RANDOM2 SUBR)
(ARGS RANDOM2 (NIL . 0))
	(SKIPA F CFIX1)
	(MOVEI F CPOPJA)
	(SKIPN 0 SBLOCK)
	(JRST 0 RSTART)
	(SOSGE T SBACK)
	(MOVEI T 70.)
	(MOVEM T SBACK)
	(SOSGE D SNOWS)
	(MOVEI D 70.)
	(MOVEM D SNOWS)
	(MOVE TT SBLOCK T)
	(ADDB TT SBLOCK D)
	(JRST 0 0 F)
CPOPJA	(POPJ P CPOPJA)
RSTART	(PUSH P F)
	(MOVEI T 70.)
RLOOPS	(PUSH FXP T)
	(NCALL 0 'RANDOM1)
	(POP FXP T)
	(MOVEM TT SBLOCK T)
	(SOJGE T RLOOPS)
	(POPJ P 0)
SNOWS	(36.)
SBACK	(71.)
SBLOCK	(BLOCK 71.)
NIL 


;; HANG UP UNTIL LUSERS TYPES CHARACTER -- IF RUBOUT, WRITE SCREEN

(DEFUN QUESTION NIL (COND ((EQUAL (READCH) (ASCII 127.)) (TVWRITE))))))      

;;; Save TV-screen in an array for later retrival

(defun save-screen ()
  (prog (cursor)
    (setq cursor (cursorpos))
    (array tv-saved fixnum 706 22)
    (fillarray 'tv-saved 'tv)
    (store (tv-saved 705 20) (car cursor))
    (store (tv-saved 705 21) (cdr cursor))
    (return cursor)))

;;; Retrieve TV-screen from an array

(defun restore-screen ()
    (fillarray 'tv 'tv-saved)
    (cursorpos (tv-saved 705 20) (tv-saved 705 21)))

;; Take packed binary array and display it on TV screen.
;; Aligned with top left corner of TV.
;; If array too large for TV will truncate at top and on right.
;; Does not erase screen first.

(LAP display-binary SUBR)
(ARGS display-binary (NIL . 1))
	(SKIPE 0 (SPECIAL TV-DISABLE))
	(JRST 0 EXITED)
	(movem a arrpnt)
	(call 1 (function typep))
	(cain a 'array)
	(jrst 0 gotarr)
	(caie a 'symbol)
	(jrst 0 loser)
	(move a arrpnt)
	(movei b 'array)
	(call 2 (function get))
	(cain a 'nil)
	(jrst 0 loser)
	(movem a arrpnt)
gotarr	(call 1 (function arraydims))
	(hlrz b 0 a)
	(hrrz a 0 a)
	(hrrz c 0 a)
	(cain c 'nil)
	(jrst 0 loser)
	(hlrz b 0 a)
	(move 7 0 b)
	(movem 7 idimot)
	(caile 7 706)
	(movei 7 706)
	(movem 7 lineco)

	(hrrz a 0 a)
	(hlrz b 0 a)
	(move 7 0 b)
	(movem 7 jdimot)
	(caile 7 20)
	(movei 7 20)
	(movem 7 wrdsin)
	(imuli 7 11)
	(movei 7 -1 7)
	(idivi 7 10)
	(movei 7 +1 7)
	(movem 7 wrdout)

	(hrrz a 0 a)
	(caie a 'nil)
	(jrst 0 loser)

	(setzm 0 linbuf)
	(movei 7(+ linbuf 1))
	(hrli 7 linbuf)
	(blt 7 (+ linbuf 17))

	(move 7 lineco)
	(movei 7 -1 7)
	(imul 7 jdimot)
	(move a arrpnt)
	(movei 10 @ 1 a)
	(movem 10 arrlin)
	(move 11 (array tv))

readlp	(hrl 7 10)
	(hrri 7 linbuf)
	(movei 10 (- linbuf 1))
	(add 10 wrdsin)
	(blt 7 0 10)	
	(movei 12 linbuf)
	(move 13 wrdout)
	(pushj p blknup)
	(addi 11 11)
	(addi 12 10)
	(pushj p blknup)
	(addi 11 11)

	(move 10 arrlin)
	(sub 10 jdimot)
	(movem 10 arrlin)
	(sosle 0 lineco)
	(jrst 0 readlp)

exited	(MOVEI A 'NIL)
	(POPJ P)

blknup	(jumple 13 cpopjs)
	(move 7 0 12)
	(lshc 7 -4)
	(lsh 7 4)
	(movem 7 0 11)
	(sojle 13 cpopjs)
	(lshc 7 4)
	(move 10 1 12)
	(lshc 7 34)
	(lsh 7 4)
	(movem 7 1 11)
	(sojle 13 cpopjs)
	(lshc 7 10)
	(move 10 2 12)
	(lshc 7 30)
	(lsh 7 4)
	(movem 7 2 11)
	(sojle 13 cpopjs)
	(lshc 7 14)
	(move 10 3 12)
	(lshc 7 24)
	(lsh 7 4)
	(movem 7 3 11)
	(sojle 13 cpopjs)
	(lshc 7 20)
	(move 10 4 12)
	(lshc 7 20)
	(lsh 7 4)
	(movem 7 4 11)
	(sojle 13 cpopjs)
	(lshc 7 24)
	(move 10 5 12)
	(lshc 7 14)
	(lsh 7 4)
	(movem 7 5 11)
	(sojle 13 cpopjs)
	(lshc 7 30)
	(move 10 6 12)
	(lshc 7 10)
	(lsh 7 4)
	(movem 7 6 11)
	(sojle 13 cpopjs)
	(lshc 7 34)
	(move 10 7 12)
	(lshc 7 4)
	(lsh 7 4)
	(movem 7 7 11)
	(sojle 13 cpopjs)
	(movem 10 10 11)
	(soj 13 0)
cpopjs	(popj p)

loser	(movei a 'ERROR-IN-BINARY-DISPLAY)
	(popj p)

arrpnt	(0)
arrlin	(0)
idimot	(0)
jdimot	(0)
wrdsin	(0)
wrdout	(0)
lineco	(0)

linbuf	(block 20)

NIL

