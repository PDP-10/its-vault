;;; -*-MIDAS-*-
	.TITLE CHAOS NET TEST PROGRAM
.IF1
	.MACRO SETF TEXT,FLG
	.PRINT "TEXT
FLG'="
	.TTYMAC FLAG
	FLG==FLAG
	.ENDM
	.ENDM

SETF ^/DDT AVAILABLE? 0=> CARPET 1=> DDT 2=> NOTHING/,DDTFLG
.ENDC

A=%0
B=%1
C=%2
D=%3
E=%4
F=%5
P=%6
PC=%7

.INSRT MAINT;CHS DEFS

PS==177776

MAXHST==400			;THE MAXIMUM HOST NUMBER

DEBUGS==30000			;SIZE OF SPACE TO LEAVE AT THE TOP OF MEMORY

.=4
	NXMBRK
	340

.=CAIBRV
	CAIBRK
	240

.IFNZ DDTFLG-1			;DDT NOT AVAILABLE
.=14
	ERRBRK
	340
.ENDC

.MACRO LCK
	MOV #340,PS
.ENDM

.MACRO UNL
	CLR PS
.ENDM

.=1000

PDL::
START:	JMP BEG			;STARTING ADDRESS

CLRSRT==.	;RESTART STARTS CLEARING HERE

;;; HOST TABLES WORD ORIENTED

HSTSTS:	.BLKW MAXHST		;THIS IS THE STATUS OF THE HOST
%HSTUP==1			;THE HOST IS UP
%HSTCK==2			;WE ARE CHECKING TO SEE IF HE IS UP CURRENTLY
%HSTGD==4			;WE HAVE TOLD HIM WE ARE GOING DOWN
%HSTWD==10			;WE HAVE RECEIVED A MESSAGE ON INTERRUPT LEVEL
				;SAYING THIS GUY IS GOING DOWN
%HSTIR==20			;SAYING THIS GUY HAS SENT AN INITIALINIZE TO US
				;WE WILL RETURN ACK WHEN WE ARE DONE
HSTABT:	.BLKW MAXHST		;THE NUMBER OF ABORTS WE GOT SENDING TO THIS GUY
HSTLOS:	.BLKW MAXHST		;THE NUMBER OF PACKETS THAT SEEM TO HAVE BEEN
				;COMPLETELY LOST TRANSMITTING TO HIM
HSTNUM:	.BLKW MAXHST		;THE NEXT SEQUENCE HOST NUMBER FOR THIS GUY
HSTPCK:	.BLKW MAXHST		;THE LINKED LIST OF PACKETS WAITING FOR HIM TO ECHO

;;; INFORMATION ABOUT ME

NLOST:	0			;NUMBER OF PACKETS I HAVE LOST BY BEING TOO SLOW
CRCERR:	0			;NUMBER OF PACKETS THAT I GOT WITH CRC ERRORS
INTLOS:	0			;NUMBER OF TIMES INTERRUPT LEVEL RAN OUT OF PACKETS

;;; LISTS OF PACKETS

INTLST:	0			;THE LIST OF PACKETS FROM THE INTERRUPT LEVEL TO BE
				;TRANSMITTED ON MAIN LEVEL

;; RANDOM
SLWCLK:	0			;THIS IS LOOP COUNTER FOR THE SLOW CLOCK
INTFRS:	0			;POINTER TO THE FIRST PACKET THAT WE TRANSMITTED THIS
				;ITERATION (KEEPS THE MAIN LOOP FROM LOOPING SOLID ON
				;AN INTERRUPT PACKET TO A HOST THAT DIED
GDOWN:	0			;MEANS THAT WE ARE GOING DOWN, AND THAT THE INTERRUPT
				; LEVEL SHOULD RESPOND APPROPRIATELY
CLKDUR==25.			;EVERY 25 ITERATIONS DO ANOTHER NUMBER

CLREND==.			;END OF THE INITIAL CLEAR

;;; LISTS OF PACKETS

FRELST:	0			;THE FREE LIST FOR PACKETS ON MAIN PGM LEVEL
IFRELS:	0			;THE FREE LIST FOR PACKETS ON INTERRUPT LEVEL

;; RANDOM

VERPTR:	0			;POINTER FOR THE UP VERIFICATION PROGRAM
SEED:	259.+69.		;THE SEED FOR THE "RANDOM" NUMBER GENERATOR
DWNCNT:	0			;NUMBER OF PASSES WE HAVE MADE, TRYING TO GO DOWN
DWNMAX==100.			;TRY 100 PASSES EFORE GIVING UP

;;; THE LOS TYPE DISPATCH TABLE ON INTERRUPT LEVEL
LOSDIS:	LOSBPT
	LOSINI
	LOSRIN
	LOSCHK
	LOSRCK
	LOSGDN
	LOSRGD


;;; A PACKET LOOKS LIKE THIS:

;;; WD    0: LINK TO NEXT PACKET ON THIS LIST
;;; WD    1: LENGTH OF THE REST OF THIS PACKET (NOT COUNTING DESTINATION)
;;; WD    2: OPCODE OF THE PACKET
;;; WD    3: CMD OR SEQUENCE NUMBER OF THE PACKET
;;; WD 4-62: VARIABLE NUMBER OF DATA WORDS
;;; WD   63: DESTINATION FOR THIS PACKET


%PCKLN==2
%PCKOP==4
%PCKCM==6
%PCKSQ==%PCKCM
%PCKDS==176

;;; THE MEANING OF THE VARIOUS COMMANDS OF LOS PACKETS ARE AS FOLLOWS:
;;; LOS 0: NO MEANING
;;; LOS 1: CHECKING FOR INITIAL RESPONSE
;;; LOS 2: RESPONSE FOR ABOVE
;;; LOS 3: CHECKING FOR STILL UP
;;; LOS 4: RESPONSE FOR ABOVE
;;; LOS 5: I AM GOING TO LEAVE NETWORK
;;; LOS 6: RESPONSE FOR ABOVE

;;; ON DATA PACKETS AN OPCODE OF 200 MEANS THAT THE PACKET HAS NOT BEEN ECHOED
;;; AND 201 MEANS THAT IT HAS.

BEG:	RESET
	MOV #PDL,P
	MOV #MEMSIZ,4
	CLR A
1$:	TST (A)+
	BR 1$
MEMSIZ:	CLR PS			;POP OFF THE TRAP
	CMP (P)+,(P)+
	MOV #NXMBRK,4		;RESTORE VECTOR
	SUB #2,A		;BACK UP TO LAST LOCATION NON-EXISTANT
	SUB #DEBUGS,A		;LEAVE ROOM FOR THE DEBUGGER
	MOV #PGMEND,B		;POINTER TO THE END OF THE PROGRAM
	MOV B,FRELST		;ALLOCATE A FREE LIST
ALLOOP:	ADD #128.,B		;POINT TO THE NEXT PACKET
	CMP B,A			;ARE WE PAST THE END?
	BHI 1$			;YES, STOP ALLOCATING
	MOV B,-128.(B)		;SET POINTER INTO THE PREVIOUS ONE
	BR ALLOOP		;AND GO BACK
1$:	CLR -256.(B)		;HERE B POINTS TO "NXM" THUS THE LAST PACKET
				;IS NOT COMPLETE SO MUST BE SPLICE OUT ALSO
	MOV FRELST,A		;GET THE START OF THE LIST
	MOV A,IFRELS		;AND SET IT ONTO THE INTERRUPT FREE LIST
	MOV #10.*128.,B		;ALLOCATE 10. PACKETS FOR THE IFRELS
	ADD #PGMEND,B		;MAKE B POINT TO THE 11TH PACKET
	MOV B,FRELST		;MAKE IT THE NEW FREEE LIST
	CLR -128.(B)		;AND CLEAR THE END OF THE IFRELS
	MOV #CLRSRT,A		;CLEAR BLOCK OF STORAGE
CLRLOP:	CLR (A)+
	CMP A,#CLREND
	BLO CLRLOP
	MOV #2,VERPTR		;THE VERIFY POINTER
	ADD CAIMYN,SEED		;SET UP A LITTLE RANDOMNESS ACTION
	MOV #%CAREN+%CARCL,CAICSR	;SETUP INTERRUPTS ON RECEIVE DONE

;;; AND FALL INTO THE MAIN LOOP

;;; HERE IS THE MAIN LOOP:
;;; THE FIRST PART IS A SLOW CLOCK THAT TRIES TO VERIFY PEOPLE WHO WE THINK
;;; ARE UP, ARE REALLY, AND SEE IF PEOPLE WHO ARE NOT UP, BECAME THAT WAY.

MAINL1:	MOV #2,F		;POINTER TO THE MAIN ROUTINES HSTLST TABLE
MAINLP:	TST 177570		;TEST TO SEE IF TOP BIT IS UP ON SWITCH REGISTER
	BEQ 1$			;NOPE, CONTINUE
	JMP GODOWN		;GO DOWN
1$:	CLR INTFRS		;THE FIRST PACKET WE TRANSMITED THIS PASS
	DEC SLWCLK		;CHECK THE CLOCK
	BGT MNINTR		;STILL OKAY, CHECK THE INTERRUPT ROUTINE LIST
	MOV #CLKDUR,SLWCLK	;RESET THE CLOCK
	JSR PC,VERIFY		;VERIFY A CABLE ADDRESS
MNINTR:	TST INTLST		;ANY PACKETS TO BE TRANSMITTED FROM INTERRUPT LEVEL?
	BEQ MNSND		;NO, JUST MAKE A PACKET AND SEND IT
	CMP INTLST,INTFRS	;HAVE WE WRAPPED BACK AROUND?
	BEQ MNSND		;YES, GIVE UP ON INTERRUPT FOR A BIT
	JSR PC,INTSND		;SEND THE INTERRUPT PACKET
	BR MNINTR		;GO BACK AND TRY AGAIN
MNSND:	MOV F,INTFRS		;SAVE THE FIRST INDEX WE TRY
MNSND1:	MOV HSTSTS(F),D		;IS THIS HOST UP?
	BNE 1$			;YES OR SOMETHING IS HAPPENING
	ADD #2,F		;POINT TO NEXT GUY
	CMP F,INTFRS		;HAVE WE LOOPED ALL THE WAY AROUND?
	BEQ MAINLP		;YES, GIVE SOMEONE ELSE A CHANCE
	CMP F,#MAXHST*2		;STILL GOOD INDEX?
	BLO MNSND1		;YES
	MOV #2,F		;RESET IT
	CMP #2,INTFRS		;WAS THIS INTFRS ALSO?
	BEQ MAINLP		;GO BACK AND TRY AGAIN
	BR MNSND1
1$:	BIT #<-%HSTUP>-1,D	;IS THERE ANYTHING OTHER THAN UP?
	BEQ 2$			;NO, JUST DO UP A PACKET FOR HIM
	JSR PC,HSTCHK		;CHECK OUT THIS HOST
	BR MNSND1		;AND GO BACK FOR ANOTHER ONE
2$:	JSR PC,MAKPCK		;MAKE UP A PACKET AND LEAVE POINTER IN A
	BEQ MAINLP		;FAILED TO GET IT
	JSR PC,TRNSPC		;TRANSMIT THE PACKET
	ADD #2,F		;NEXT INDEX
	CMP F,#MAXHST*2		;ARE WE DONE YET?
	BLO MAINLP		;GO BACK TO NEXT ONE
	BR MAINL1		;RESET POINTER AND CONTINUE


INTSND:	MOV INTLST,A		;GET FIRST PACKET
	MOV (A),INTLST		;LINK IT OUT
	TST INTFRS		;ARE WE THE FIRST?
	BNE 1$			;NOPE
	MOV A,INTFRS		;SET UP POINTER
1$:	JSR PC,SNDPCK		;SEND THE PACKET, RETURNS WITH Z SET IF SUCCESS
	BNE 2$			;FAILED, PUT IT BACK ONTO THE END OF INTLST
	MOV #IFRELS,E		;POINTER TO FREE LIST
	JMP LINK		;LINK IT ON AND RETURN
2$:	MOV #INTLST,E		;POINTER TO USED LIST
	JMP SPLICE		;SPLICE IT ONTO THE END, AND RETURN

;TRANSMIT THE PACKET POINTED TO BY A
TRNSPC:	JSR PC,SNDPCK		;SEND THE PACKET
	BNE 1$			;FAILED, JUST FREE IT
	INC HSTNUM(F)		;HIS HOST NUMBER IS 1 HIGHER NOW
	RTS PC
;;; HERE WE HAVE TO SPLICE THE PACKET OUT OF THE TABLE, AND PUT IT BACK ONTO THE
;;; FREE LIST
1$:	MOV F,E			;COPY HOST NUMBER
	ADD #HSTPCK,E		;GENERATE A POINTER TO THE PACKET TABLE
	LCK
2$:	CMP (E),A		;IS IT OUR PACKET?
	BEQ 3$			;YES
	MOV (E),E		;LINK DOWN THE LIST
	BNE 2$			;KEEP GOING IF NON-ZERO
	BPT			;IT DISAPPEARED OFF THE LIST?, I JUST PUT IT THERE
3$:	MOV (A),(E)		;SPLICE THIS ONE OUT
	UNL			;NOW WE ARE SAFE
	JMP FREPCK		;FREE THIS PACKET

;;; CHECKS A HOST IN F (STATUS IN D) FOR ITS STATE. IF JUST CHECKING, IGNORE HIM.
;;; IF WE GOT A DOWN MESSAGE FROM HIM, CLOSE HIM AND FLUSH HIS PACKETS
HSTCHK:	BIT #%HSTWD,D		;DID HE SAY HE WAS GOING DOWN?
	BEQ HSTVRF		;NOPE, CHECK HIS VERIFICATION BIT
	JSR PC,HSTFLS		;FLUSH HIS PACKETS
HSTRET:	RTS PC
HSTVRF:	BIT #%HSTCK,D		;ARE WE CHECKING HIM OUT?
	BNE HSTRET		;YES, JUST IGNORE HIM
HSTINI:	BIT #%HSTIR,D		;ARE WE TRYING TO REINITIALIZE?
	BEQ HSTRET		;HERE MAYBE SOME OTHER STUFF WILL GO
	JSR PC,HSTFLS		;FLUSH THE PACKETS WE HAVE FOR HIM
	JSR PC,ALLPCK		;GET A PACKET
	BNE 1$			;GOT ONE
	RTS PC
1$:	MOV A,B			;COPY POINTER
	TST (B)+		;SKIP LINK
	MOV #2,(B)+		;ONLY DATA IS LOS AND THE CMD TYPE
	MOV #11*400,(B)+	;PUT IN TYPE
	MOV #2,(B)		;RESPONSE TO LOS INIT
	ASR F			;GET CABLE NUMBER
	MOV F,%PCKDS(B)		;SET IN DESTINATION
	ASL F			;BACK TO INDEX
	JSR PC,SNDPCK		;SEND THE PACKET
	BNE 2$			;IT FAILED
	MOV #1,HSTSTS(F)	;THE CONNECTION IS RESET NOW
2$:	JMP FREPCK		;FREE UP THE PACKET


HSTFLS:	LCK
	MOV HSTPCK(F),E		;ARE THERE ANY PACKETS FOR HIM?
	BEQ 3$			;NO, IGNORE THIS STUFF
1$:	TST (E)			;MORE LIST?
	BEQ 2$			;NOPE
	MOV (E),E		;LINK THROUGH AND GO BACK
	BR 1$
2$:	MOV FRELST,(E)		;RPLACD THE PACKET LIST WITH THE FREE LIST
	MOV HSTPCK(F),FRELST	;AND MAKE IT THE FREE LIST
	CLR HSTPCK(F)		;CLEAR THE PACKET LIST FOR THIS GUY
3$:	CLR HSTSTS(F)		;HE IS NOW NO LONGER UP TO US
	UNL
	RTS PC


;;; MAKES A PACKET FOR INDEX IN F, POINTER RETURNED IN A

MAKPCK:	JSR PC,ALLPCK		;ALLOCATE A PACKET
	BNE 1$			;GOT IT
	RTS PC			;FAILED
1$:	MOV A,B			;GET COPY OF POINTER
	TST (B)+		;SKIP LINK
	JSR PC,RANLEN		;GET LENGTH IN D
	MOV D,(B)		;SET IN LENGTH
	ADD #2,(B)+		;ADD FOR HEADER, AND SEQUENCE NUMBER
	MOV #100000,(B)+	;SET UP ORIGINATE HEADER
	MOV HSTNUM(F),(B)+	;SET IN SEQUENCE NUMBER
	MOV D,C			;COPY NUMBER OF DATA WORDS
	BEQ 3$			;NONE
2$:	JSR PC,RANDOM		;GET RANDOM NUMBER
	MOV D,(B)+		;AND PUT IN PACKET
	DEC C			;DECREMENT THE COUNT
	BNE 2$
3$:	ASR F			;GET THE REAL DESTINATION NUMBER
	MOV F,%PCKDS(A)		;SET THE DESTINATION AT THE END
	ASL F			;BACK TO INDEX
	MOV F,E			;GET POINTER TO THE LIST
	ADD #HSTPCK,E		;POINT TO THE TABLE
	JSR PC,SPLICE		;SPLICE IT IN
	RTS PC

RANLEN:	JSR PC,RANDOM		;GET RANDOM NUMBER
	BIC #177700,D		;GET NUMBER 0<=X<=59.
	CMP D,#59.		;MAXIMUM DATA SIZE
	BGT RANLEN		;TRY AGAIN
	RTS PC

RANDOM:	MOV SEED,D		;GET RANDOM NUMBER TO RETURN
	MOV D,-(P)		;SAVE IT
.REPT 7
	CLC
	ROL D
	ADC D
.ENDR
	MOV D,-(P)		;XOR D,SEED
	BIC SEED,(P)
	BIC D,SEED
	BIS (P)+,SEED
	MOV (P)+,D
	RTS PC

;;; HERE WE VERIFY IF ONE HOST IS UP
VERIFY:	MOV F,-(P)		;SAVE F
	MOV VERPTR,F		;WE WILL HACK THIS GUY
	MOV HSTSTS(F),D		;GET THE STATUS FOR THIS GUY
	BEQ VERINI		;HE IS DOWN, TRY INITING HIM
	BIT #%HSTCK,D		;HAVE WE TRIED THIS BEFORE
	BNE VERCLS		;YES, TRY CLOSING HIM OUT
	BIT #%HSTIR!%HSTWD,D	;SHOULD WE LEAVE HIM ALONE
	BEQ VERCHK		;NOPE, CHECK HIM OUT
VERRET:	ADD #2,F		;GO TO NEXT PERSON
	CMP F,#MAXHST*2		;TOO HIGH?
	BLO 1$			;NOPE
	MOV #2,F			;RECYCLE POINTER
1$:	MOV F,VERPTR		;RESTORE POINTER FOR NEXT TIME
	MOV (P)+,F
	RTS PC
VERCLS:	JSR PC,HSTFLS		;FLUSH ANY PACKETS WE HAVE FOR HIM
	CLR HSTSTS(F)		;CLEAR HIS STATUS, AND WE WILL TRY LATER
	BR VERRET		;AND RETURN
VERCHK:	MOV #3,C		;TYPE OF PACKET TO SEND TO HIM
	BIS #%HSTCK,HSTSTS(F)	;SAY WE ARE CHECKING HIM
	JSR PC,VERSND		;AND SEND IT
	BNE VERRET		;WON, JUST RETURN
	BIC #%HSTCK,HSTSTS(F)	;SINCE WE FAILED CLEAR THIS BIT
	BR VERRET		;AND RETURN
VERINI:	MOV #1,C		;SEND AN INIT PACKET
	JSR PC,VERSND		;SEND IT
	BR VERRET		;AND RETURN

VERSND:	JSR PC,ALLPCK		;ALLOCATE A PACKET
	BEQ VERFL1		;IT FAILED
	MOV A,B			;GET ANOTHER POINTER TO THE PACKET
	TST (B)+		;SKIP THE LINK
	MOV #2,(B)+		;THE LENGTH IS 2
	MOV #11*400,(B)+	;THE TYPE CODE
	MOV C,(B)+		;THE TYPE OF LOS THIS IS
	ASR F
	MOV F,%PCKDS(A)		;SET IN THE DESTINATION ADDRESS
	ASL F
	JSR PC,SNDPCK		;SEND THE PACKET
	BNE VERFAL		;IT FAILED
	JSR PC,FREPCK		;FREE THE PACKET
	CLZ
	RTS PC
VERFAL:	JSR PC,FREPCK		;FREE THE PACKET
VERFL1:	SEZ
	RTS PC


;;; RETURNS A PACKET IN A, SEZ IF FAILS
ALLPCK:	LCK
	MOV FRELST,A		;TRY TO ALLOCATE
	BEQ 1$			;FAILED TO GET ONE
	MOV (A),FRELST		;LINK IT OUT
	UNL
	CLZ
	RTS PC
1$:	UNL
	SEZ
	RTS PC

;;; RETURNS A PACKET IN A TO FRELST CLOBBERING E
FREPCK:	MOV #FRELST,E
	JMP LINK

;;; THIS TAKES A LIST POINTER IN E, PACKET IN A, AND SPICES A ONTO THE END OF E
SPLICE:	LCK
SPLIC1:	TST (E)			;AT END OF LIST?
	BEQ 1$			;YES
	MOV (E),E		;LINK ONE MORE
	BR SPLIC1
1$:	MOV A,(E)		;SPLICE IT IN
	CLR (A)			;MAKE A NOT POINT TO ANYTHING
	UNL
	RTS PC

;;; THIS LINKS A PACKET IN A ONTO A LIST IN E
LINK:	LCK
	MOV (E),(A)		;MAKE THE PACKET POINT TO THE REST OF THE LIST
	MOV A,(E)		;AND PUT THE LIST BACK
	UNL
	RTS PC

;;; THIS TAKES A POINTER TO THE PACKET IN A, THE HOST IN F
;;; TRANSMITS A PACKET TO THAT HOST. IF THE TRANSMISSION IS ABORTED,
;;; HSTABT FOR THAT HOST IS INCREMENTED, AND Z BIT CLEAR
SNDPCK:	MOV A,B			;COPY POINTER TO PACKET
	TST (B)+		;SKIP THE LINK
	MOV (B)+,C		;THE COUNT OF WORDS IN THIS PACKET
SNDLP:	MOV (B)+,CAIWBF		;WRITE THE PACKET INTO THE BUFFER
	DEC C
	BNE SNDLP
	MOV %PCKDS(A),CAIWBF	;THE DESTINATION NUMBER
	TST CAIXMT		;CAUSE THE TRANSMISSION
WATLP:	TSTB CAICSR		;IS TRANSMITTER DONE?
	BPL WATLP
	BIT #%CATAB,CAICSR	;WAS IT ABORTED
	BNE 1$			;YES, HACK A LITTLE BIT
	RTS PC			;OTHERWISE RETURN WITH Z SET
1$:	INC HSTABT(F)		;INCREMENT HIS ABORT COUNT
	CLZ			;CLEAR THE Z BIT
	RTS PC

;;; IT COMES HERE, WHEN WE WANT TO SHUT DOWN...
GODOWN:	MOV #-1,GDOWN		;TELL THE INTERRUPT ROUTINE ABOUT IT
	MOV #DWNMAX,DWNCNT	;SET UP COUNTER
	JSR PC,ALLPCK		;GET A PACKET
	MOV A,B			;COPY POINTER
	TST (B)+		;SKIP THE LINK
	MOV #2,(B)+		;LENGTH OF THIS PACKET
	MOV #11*400,(B)+	;ITS A LOSS!!
	MOV #5,(B)+		;GOING DOWN
DWNRST:	MOV #2,F		;START TELLING THE WORLD
	CLR -(P)		;FLAG SAYING WE SAW SOMEONE UP
DWNLP:	TST HSTSTS(F)		;IS HE UP?
	BNE DWNLP1		;MAYBE
DWNLP3:	ADD #2,F		;NEXT PERSON
DWNLP2:	CMP F,#MAXHST*2		;DONE WITH THIS PASS?
	BLO DWNLP		;NO, GO BACK
	DEC DWNCNT		;DEC COUNTER
	BEQ DOWN		;IF ZERO, GO DOWN ANYWAY, SCREW HIM THE LOSER
	TST (P)+		;DID WE SEE ANYONE WHO WAS STILL UP?
	BNE DWNRST		;YES, MAKE ANOTHER PASS
DOWN:	BPT
DWNLP1:	BIT #%HSTGD,HSTSTS(F)	;HAVE WE MADE HIM GO DOWN YET?
	BNE DWNLP3		;GO BACK AND LOOP SOME MORE
	INC (P)			;SET FLAG
	MOV F,E			;COPY POINTER
	ASR E			;TURN INTO HOST INDEX
	MOV E,176(A)		;SET IN HOST NUMBER
	BIS #%HSTGD,HSTSTS(F)	;SAY WE SENT HIM A GOING DOWN
	JSR PC,SNDPCK		;SEND THIS PACKET
	BEQ DWNLP3		;IT WON, WAIT FOR HIM TO RESPOND
	BIC #%HSTGD,HSTSTS(F)	;IT LOST, TRY THIS TURKEY AGAIN LATER...
	BR DWNLP3		;AND TRY SOMEONE ELSE

;;; INTERRUPT ROUTINES
NXMBRK:	BPT
	RTI

;;; THIS IS THE CHAOS INTERRUPT ROUTINE FOR RECIEVE

CAIBRK:	MOV A,-(P)
	MOV B,-(P)
	MOV C,-(P)
	MOV D,-(P)
	MOV CAICSR,A		;GET THE CONTROL STATUS REGISTER
	BIT #17000,A		;ANY LOST MESSAGES?
	BEQ CAINLS		;NO LOST
	MOV A,B			;COPY IT
	SWAB B			;EXTRACT THE FIELD
	ASR B
	BIC #177760,B		;ONLY 4 BITS
	ADD B,NLOST		;ADD IT TO THE LOST COUNT
CAINLS:	BIT #%CAERR,A		;DID IT GET A CRC ERROR?
	BEQ CAINER		;NO ERROR
	INC CRCERR		;INCREMENT COUNT
	BR CAIBDN		;RETURN
CAINER:	MOV IFRELS,A		;GET A PACKET
	BNE 1$			;GOT ONE
	INC INTLOS		;INCREMENT COUNTER
	BR CAIBDN
1$:	MOV (A),IFRELS		;LINK IT OUT
CAIALL:	MOV A,B			;COPY POINTER
	MOV CAIRBC,C		;GET THE COUNT OF BITS
	INC C			;ROUND IT UP
.REPT 4
	ASR C
.ENDR
	MOV #CAIRBF,D		;GET POINTER TO THE READ REG
	TST (B)+		;SKIP THE LINK FIELD
	SUB #3,C		;SUBTRACT THE SOURCE,DESTINATION AND CRC WORDS
	MOV C,(B)+		;PUT IN THE COUNT
	BEQ CARBDN		;NO WORDS?
CARBLP:	MOV (D),(B)+		;COPY THE BYTES OUT
	DEC C
	BNE CARBLP
CARBDN:	TST (D)			;SKIP MY ADDRESS
	MOV (D),%PCKDS(A)	;SET IN THE SENDER
	TST (D)			;SKIP THE CRC
	BIS #%CARCL,CAICSR	;CLEAR THE RECEIVER AGAIN
	UNL			;ALLOW INTERRUPTS NOW
	MOV %PCKDS(A),C		;GET THE SENDER
	ASL C			;INTO INDEX (ALMOST EVERYONE WANTS THIS)
	MOV %PCKOP(A),D		;GET THE TYPE
	BMI CARDAT		;IT WAS A DATA PACKET
	CMP D,#11*400		;WAS IT A LOS?
	BEQ CARLOS		;YES
CAIBN1:	JSR PC,INTFRE		;FREE AN INTERRUPT PACKET
CAIBDN:	MOV (P)+,D
	MOV (P)+,C
	MOV (P)+,B
	MOV (P)+,A
	RTI			;RETURN

;;; HERE WE COME WHEN WE HAVE A DATA PACKET
CARDAT:	CMP D,#100000		;WAS IT A PACKET WE SHOULD REFLECT?
	BEQ CARRFL		;REFLECT THIS PACKET
	CMP D,#100400		;WAS IT A REFLECTED PACKET?
	BNE CAIBN1		;NO, JUST DEALLOCATE IT
	JSR PC,CMPPCK		;COMPARE THE PACKETS
	BR CAIBDN		;JUST RETURN, IT FREES THEM

CARRFL:	BIS #400,%PCKOP(A)	;SET IN NEW OP CODE
	JSR PC,INTTRN		;TRANSMIT IT TO MAIN LEVEL
	BR CAIBDN		;AND RETURN

CARLOS:	MOV %PCKCM(A),B		;GET COMMAND
	CMP B,#6
	BHI CAIBN1		;TOO BIG, JUST RETURN
	ASL B			;SHIFT THE OPCODE
	JSR PC,@LOSDIS(B)	;HANDLE THIS PACKET
	BEQ CAIBN1		;SEZ MEANS FREE PACKET
	BR CAIBDN		;OTHERWISE JUST RETURN


LOSBPT:	BPT
	SEZ
	RTS PC

LOSINI:	BIS #%HSTIR,HSTSTS(C)	;SET THE INIT RECEIVED BIT
	SEZ
	RTS PC

LOSRIN:	BIS #%HSTUP,HSTSTS(C)	;SAY THIS HOST IS UP NOW
	SEZ
	RTS PC

LOSCHK:	MOV #4,%PCKCM(A)	;CHANGE TYPE TO RESPONSE
LOSCH1:	JSR PC,INTTRN		;SEND THE PACKET
	CLZ
	RTS PC

LOSRCK:	BIC #%HSTCK,HSTSTS(C)	;CLEAR THE CHECKING STATUS BIT
	SEZ
	RTS PC

LOSGDN:	BIS #%HSTWD,HSTSTS(C)	;SAY WE HAVE SEEN THAT HE IS GOING DOWN
	MOV #6,%PCKCM(A)	;AND SEND BACK AND ACK
	BR LOSCH1		;SEND AND RETURN
	
LOSRGD:	BIC #%HSTGD,HSTSTS(C)	;SAY WE HAVE BEEN ACKED FOR THE GOING DOWN
	SEZ
	RTS PC

;;; THIS COMPARES AN INCOMING DATA PACKET WITH A PACKET ON HSTPCK IF IT CAN
;;; FIND ONE. C HAS THE INDEX INTO THE HSTPCK TABLE, A POINTS TO THE PACKET
CMPPCK:	LCK
	MOV HSTPCK(C),B		;POINTER TO START OF THE LIST OF PACKETS TO SEARCH
	MOV A,D			;MOVE THE POINTERS AROUND
	MOV %PCKSQ(D),A		;THE SEQUENCE NUMBER RECEIVED
CMPSLP:	TST B			;ANY MORE PACKETS TO LOOK THROUGH?
	BEQ CMPFLS		;ASSUME RANDOM PACKET IF WE CAN'T FIND IT
	CMP A,%PCKSQ(B)		;IS IT THE SAME SEQUENCE NUMBER?
	BEQ CMPFND		;YES, WE FOUND THE PACKET
	MOV (B),B		;LINK THROUGH
	BR CMPSLP
CMPFND:	CMP HSTPCK(C),B		;DOES IT POINT TO B DIRECTLY
	BEQ CMPFN1		;YES, DONT DO ANYTHING, EXCEPT SPLICE IT OUT
	MOV HSTPCK(C),A		;GET POINTER TO THE FIRST NODE
	MOV E,-(P)		;FOR THE LINK
	TST -(P)		;MAKE A TEMPORARY
CMFLLP:	MOV (A),(P)		;SAVE THE NEXT LINK
	BNE 1$			;ERROR CHECK
	BPT
1$:	MOV FRELST,(A)		;LINK ONTO THE FREE LIST
	MOV A,FRELST
	MOV (P),A		;GET BACK POINTER TO NEXT
	INC HSTLOS(C)		;SEEM TO HAVE LOST SOME
	CMP A,B			;DOES IT POINT TO THE PACKET?
	BNE CMFLLP		;NOPE, CONTINUE ALONG
	TST (P)+		;POP RANDOMNESS
	MOV (P)+,E		;AND GET BACK E
CMPFN1:	MOV (B),HSTPCK(C)	;SPLICE ON REST OF HSTPCK
	UNL
	MOV D,-(P)		;SAVE OLD POINTERS TO THINGS (INTERRUPT ROUTINES COPY)
	MOV B,-(P)		;POINTER TO THE MAIN ROUTINES COPY
	MOV B,A
	MOV %PCKLN(D),B		;COUNTER
	SUB #2,B		;SKIPPING HEADER AND SEQUENCE NUMBER
	BEQ CMPDON		;NO MORE TO COMPARE, WE WIN
	ADD #10,A		;SKIP HEADER LINKS AND LENGTH AND SQ
	ADD #10,D
CMPLOP:	CMP (A)+,(D)+		;COMPARE DATA WORDS
	BEQ 1$
	BPT
1$:	DEC B
	BNE CMPLOP
CMPDON:	MOV (P)+,D
	MOV (P)+,A		;GET BACK PACKETS
	MOV E,-(P)		;SAVE E
	JSR PC,INTFRE		;FREE THE INTERRUPT ONE
	MOV D,A			;COPY MAIN PROGRAM
	JSR PC,FREPCK		;AND FREE THE MAIN PROGRAM ONE
	MOV (P)+,E
	RTS PC

CMPFLS:	MOV IFRELS,(D)		;SPLICE INTO IFRELS
	MOV D,IFRELS
	UNL
	RTS PC

;;; FREES PACKET (A) ON THE INTERRUPT LIST
INTFRE:	LCK
	MOV IFRELS,(A)		;LINK IN PACKET
	MOV A,IFRELS
	UNL
	RTS PC

;;; ALLOCATES A PACKET OFF THE INTERRUPT FREE LIST
INTALL:	LCK
	MOV IFRELS,A		;TRY TO ALLOCATE
	BEQ 1$			;FAILED TO GET ONE
	MOV (A),IFRELS		;LINK IT OUT
	UNL
	CLZ
	RTS PC
1$:	UNL
	SEZ
	RTS PC

;;; SENDS A PACKET BY PUTTING IT ON THE LIST FOR THE NON INTERRUPT ROUTINES
INTTRN:	MOV E,-(P)
	MOV #INTLST,E
	JSR PC,SPLICE
	MOV (P)+,E
	RTS PC

.IFZ DDTFLG			;CARPET VERSION
ERRBRK:	MOV (P),ERRPC		;SAVE THE ERROR PC
	MOV P,ERRP		;AND P
	MOV A,ERRA		;SAVE A
	MOV #ERRB,A		;POINTER TO SAVED REGISTERS
.IRP REG,<B,C,D,E,F>
	MOV REG,(A)+		;STORE IT AWAY
.ENDR

ERRSTP:	BR .
ERRA:	0
ERRB:	0
ERRC:	0
ERRD:	0
ERRE:	0
ERRF:	0
ERRP:	0
ERRPC:	0
.ENDC

.IFZ DDTFLG-2			;NOTHING VERSION
ERRBRK:	HALT
	RTI
.ENDC

PATCH:	.BLKW 100
PGMEND==.
.END START
