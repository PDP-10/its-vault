;;; CADR Disk formatting microcode		-*-Fundamental-*- (you betcha)

;;; This version is for the 2nd version of the PROMs (v. 31)
;;; The changes are 32 more bits in the VFO relock field
;;; and a total increase in sector length of 12. bytes (to 1164.)
;;; In addition, after formatting a cylinder we write zero
;;; over the entire cylinder, to get good ECC in sector 19. and
;;; to test that all the headers win.

(SETQ DCFU '(

;(ASSIGN MD WRITE-MEMORY-DATA)	  THESE IN CADSYM NOW.
;(ASSIGN MD-WRITE-MAP WRITE-MEMORY-DATA-WRITE-MAP)
;(ASSIGN MD-START-WRITE WRITE-MEMORY-DATA-START-WRITE)

(LOCALITY M-MEM)

M-GARBAGE	(0)
M-PAD		(0)
M-ZERO		(0) ;Must be loc 2
M-ONES		(-1)

M-A		(0)
M-B		(0)
M-C		(0)
M-D		(0)
M-E		(0)

M-CYL		(0)
M-HEAD		(0)

M-NCYLS		(815.)
M-NHEADS	(5)
M-NBLKS		(17.)
M-BLKSIZ	(1152.) ;BYTES

M-DISK-ADR	(20374) ;VIRTUAL ADDRESS OF DISK REGS (P. 32.)

M-TEM		(0)

(LOCALITY A-MEM)

A-GARBAGE	(0)
A-PAD		(0)
A-ZERO		(0) ;Must be loc 2
A-ONES		(-1)

A-A		(0)
A-B		(0)
A-C		(0)
A-D		(0)
A-E		(0)

A-CYL		(0)
A-HEAD		(0)

A-NCYLS		(815.)
A-NHEADS	(5)
A-NBLKS		(17.)
A-BLKSIZ	(1152.) ;BYTES

A-DISK-ADR	(20374) ;VIRTUAL ADDRESS OF DISK REGS (P. 32.)

A-TEM		(0)

(LOC 40)

A-ECC-WD (0)
A-ECC-LOGOUT-PNTR (0)
A-ECC-COUNT (0)
A-ECC-MASK (0)
A-ECC-ACTUAL-WD (0)
A-ECC-ACTUAL-MASK (0)

(LOCALITY I-MEM)

START	(JUMP GO)
	(NO-OP)

;Error halts

PAGE-FAULT	(JUMP PAGE-FAULT HALT-CONS)
	(NO-OP)

NRDY	(JUMP NRDY HALT-CONS)
	(NO-OP)

FAULT	(JUMP FAULT HALT-CONS)
	(NO-OP)

DONE	(JUMP DONE HALT-CONS)
	(NO-OP)

;Program starts here
GO	((M-ZERO) SETZ)
	((M-ONES) SETO)

;Load the map.  Straight map for 32. pages, then a page which addresses the disk.
	((MD) SETZ)	;0@1/0
	((VMA-WRITE-MAP) DPB M-ONES (BYTE-FIELD 1 26.) A-ZERO)
	(NO-OP)
	((VMA) DPB M-ONES (BYTE-FIELD 4 22.) A-ZERO) ;WRITE, ACCESS, BIT24, W-MAP-2
INMP1	((MD-WRITE-MAP) MD)
	(NO-OP)
	((VMA) ADD VMA (A-CONSTANT 1))
	((MD) ADD MD (A-CONSTANT 400))	;Next Page
	(JUMP-LESS-THAN MD (A-CONSTANT 20000) INMP1)
	;((MD) (A-CONSTANT 20000))	;1@1/1
	((M-A) (A-CONSTANT 3))
	((VMA-WRITE-MAP) DPB M-A (BYTE-FIELD 6 26.) A-ZERO)
	(NO-OP)
	((VMA-WRITE-MAP) DPB M-ONES (BYTE-FIELD 4 22.)
		(A-CONSTANT (EVAL (LSH 17377774 -8))))  ;ADDRESS OF DISK

;Make sure the disk is present
	((VMA-START-READ) M-DISK-ADR)  ;STATUS REGISTER
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	(CALL-IF-BIT-CLEAR (BYTE-FIELD 1 0) MD NRDY)  ;CONTROLLER NOT READY
	((M-A) AND MD (A-CONSTANT 3560)) ;SELECT ERRORS, FAULT, RD ONLY, OFF CYL, OFF LINE
	(CALL-NOT-EQUAL M-A A-ZERO FAULT)

;Build a command list in core.  Starts at location 0 and goes for 19. pages.
	((VMA) A-ZERO)
	((M-B) (A-CONSTANT 1)) ;CHAIN
MCLIST	((MD-START-WRITE M-B) ADD M-B (A-CONSTANT 400))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	(JUMP-EQUAL VMA (A-CONSTANT 18.) MCLISTX) ;Done
	(JUMP-NOT-EQUAL VMA (A-CONSTANT 17.) MCLIST1)
	((M-B) SUB M-B (A-CONSTANT 1))	;Last location, no chain
MCLIST1	((VMA) ADD VMA (A-CONSTANT 1))
	(JUMP MCLIST)

MCLISTX	

;Pages 30. and 31. are used to contain a command list and a zero page
;for zeroing out an entire cylinder.
	((MD) (A-CONSTANT (EVAL (1+ (LSH 31. 8)))))
	((VMA) (A-CONSTANT (EVAL (1- 30._8))))
ZER1	((VMA-START-WRITE) ADD VMA (A-CONSTANT 1))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	(JUMP-LESS-THAN VMA (A-CONSTANT (EVAL (+ 30._8 84.))) ZER1)
	((MD-START-WRITE) SUB MD (A-CONSTANT 1))	;END OF CCW LIST
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((MD) (A-CONSTANT 0))
	((VMA) (A-CONSTANT (EVAL (1- 31._8))))
ZER2	((VMA-START-WRITE) ADD VMA (A-CONSTANT 1))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	(JUMP-LESS-THAN VMA (A-CONSTANT (EVAL (+ 31._8 377))) ZER2)

;Build the image of a track in core, headers to be filled in later.
;A track is a sequence of blocks, each block has:
;	61. bytes of 1's (preamble)
;	Sync (a 177 byte)
;	Header word, header ecc word
;	20. bytes of 1's (VFO relock)
;	Sync (177) and Pad (377)
;	1024. bytes of zero data
;	4 bytes of zero ecc
;	44. bytes of 1's (postamble)
;Note that the header would split across word boundaries, we put 2 extra
;bytes of 1's at the front of a track to prevent this.
BUILD0	((PDL-BUFFER-POINTER) M-ONES)	;Will push header addresses onto the pdl
	((VMA) (A-CONSTANT 400))	;Address of next word to write
	((M-B) SETZ)			;Block counter, counts up to M-NBLKS
BUILD1	((MD) SETO)			;Store 60. bytes of 1's
	(CALL-XCT-NEXT STORE)
       ((M-C) (A-CONSTANT 15.))
	((MD-START-WRITE) DPB M-ZERO (BYTE-FIELD 1 31.) A-ONES) ;Store 3 bytes of 1's and Sync
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((VMA) ADD VMA (A-CONSTANT 1))
	((C-PDL-BUFFER-POINTER-PUSH) VMA)	;Save address of header
	((VMA) ADD VMA (A-CONSTANT 2))	;Space over header and ecc
	((MD) SETO)			;Store 20. bytes of 1's
	(CALL-XCT-NEXT STORE)
       ((M-C) (A-CONSTANT 5))
	((MD-START-WRITE) (A-CONSTANT 177577))  ;Sync, Pad, 0, 0
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((VMA) ADD VMA (A-CONSTANT 1))
	((MD) SETZ)			;Store 1024. bytes of zeros
	(CALL-XCT-NEXT STORE)
       ((M-C) (A-CONSTANT 256.))
	((MD-START-WRITE) DPB M-ONES (BYTE-FIELD 16. 16.) A-ZERO) ;2 zeros, 2 ones
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((VMA) ADD VMA (A-CONSTANT 1))
	((MD) SETO)			;Store 40. bytes of ones
	(CALL-XCT-NEXT STORE)
       ((M-C) (A-CONSTANT 10.))
	((M-B) ADD M-B (A-CONSTANT 1))
	(JUMP-LESS-THAN M-B A-NBLKS BUILD1)

;Now we've got the command list and the prototype track.  Loop over all cylinders
;and all tracks.  For each, store suitable headers then run the disk.
	((M-CYL) SETZ)			;Start with cylinder 0
NXCYL	((M-HEAD) SETZ)			;Head 0
NXHEAD	(CALL FORMAT-1-TRACK)
	(CALL RUN)			;Track done, run the disk
	((M-HEAD) ADD M-HEAD (A-CONSTANT 1))	;Next head
	(JUMP-LESS-THAN M-HEAD A-NHEADS NXHEAD)	;Jump if not end of cylinder
	((M-CYL) ADD M-CYL (A-CONSTANT 1))	;Next cylinder
;END OF CYLINDER, FILL IT WITH ZEROS
	((MD) SELECTIVE-DEPOSIT M-C (BYTE-FIELD 12. 16.) A-ZERO) ;DA (START OF CYL)
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 2))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((MD) (A-CONSTANT 30._8))	;CLP
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 1))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((MD) (A-CONSTANT 11))		;Command is write
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 0))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 3))	;Start
WWAIT	((M-A) (A-CONSTANT 100))	;Delay so as not to tie up bus totally?
WWAIT1	(JUMP-NOT-EQUAL-XCT-NEXT M-A A-ZERO WWAIT1)
       ((M-A) SUB M-A (A-CONSTANT 1))
	((VMA-START-READ) M-DISK-ADR)	;Check status
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	(JUMP-IF-BIT-CLEAR (BYTE-FIELD 1 0) MD WWAIT)	;Wait until idle sets
	((M-A) AND MD (A-CONSTANT 7777760))  ;Check all errors
	(CALL-NOT-EQUAL M-A A-ZERO FAULT)
;END OF FILLING WITH ZEROS
	(JUMP-LESS-THAN M-CYL A-NCYLS NXCYL)
	(JUMP DONE)

;ECC code for word in M-A to MD, bashes M-A, M-E, M-D
ECC	((MD M-E) SETZ)			;M-E counts
ECC1	((M-D) XOR MD A-A)		;Get next bit in
	((M-A) (BYTE-FIELD 31. 1) M-A)	;Shift both words right
	((MD) (BYTE-FIELD 31. 1) MD)
	(JUMP-IF-BIT-CLEAR (BYTE-FIELD 1 0) M-D ECC2)
	((MD) XOR MD (A-CONSTANT 24004002400)) ;1's in bits 8, 10, 20, 29, 31
ECC2	(JUMP-LESS-THAN-XCT-NEXT M-E (A-CONSTANT 37) ECC1)
       ((M-E) ADD M-E (A-CONSTANT 1))
	(POPJ)

;Store stuff, data in MD, count in M-C, address in VMA
STORE	((MD-START-WRITE) MD)
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	(POPJ-EQUAL-XCT-NEXT M-C (A-CONSTANT 1))
       ((VMA) ADD VMA (A-CONSTANT 1))
	(JUMP-XCT-NEXT STORE)
       ((M-C) SUB M-C (A-CONSTANT 1))

;Run the disk, address in M-C
RUN	((MD) M-C)			;DA
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 2))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((MD) SETZ)			;CLP is zero
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 1))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((MD) (A-CONSTANT 13))		;Command is write-all
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 0))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 3))	;Start
WAIT	((M-A) (A-CONSTANT 100))	;Delay so as not to tie up bus totally?
WAIT1	(JUMP-NOT-EQUAL-XCT-NEXT M-A A-ZERO WAIT1)
       ((M-A) SUB M-A (A-CONSTANT 1))
	((VMA-START-READ) M-DISK-ADR)	;Check status
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	(JUMP-IF-BIT-CLEAR (BYTE-FIELD 1 0) MD WAIT)	;Wait until idle sets
	((M-A) AND MD (A-CONSTANT 6077760))
	(CALL-NOT-EQUAL M-A A-ZERO FAULT)
	(POPJ)

;;; SUBROUTINE TO FORMAT 1 TRACK
;;; THIS STORES THE TRACK IMAGE IN CORE, DOESN'T WRITE ON THE DISK.
FORMAT-1-TRACK 
	((PDL-BUFFER-INDEX M-B) SETZ)	;Get out header pointers
	((M-C) DPB M-HEAD (BYTE-FIELD 8 8) A-ZERO)	;Save disk address for later
	((M-C) DPB M-CYL (BYTE-FIELD 12. 16.) A-C)
NXBLK	((M-A) M-B)			;Low 8 bits of header are block number
	((M-A) DPB M-HEAD (BYTE-FIELD 8 8) A-A)	;Next 8 bits are head number
	((M-A) DPB M-CYL (BYTE-FIELD 12. 16.) A-A)	;Next 12 bits are cylinder number
	((M-B) ADD M-B (A-CONSTANT 1))	;Next block
	(JUMP-LESS-THAN M-B A-NBLKS CODE0)	;Jump if not end of track
	((M-TEM) ADD M-HEAD (A-CONSTANT 1))	;Next head
	(JUMP-LESS-THAN M-TEM A-NHEADS CODE1)	;Jump if not end of cylinder
	((M-TEM) ADD M-CYL (A-CONSTANT 1))	;Next cylinder
	(JUMP-LESS-THAN M-TEM A-NCYLS CODE2)	;Jump if not end of disk
CODE3	(JUMP-XCT-NEXT CODE0)
       ((M-A) DPB M-ONES (BYTE-FIELD 2 30.) A-A)

CODE2	(JUMP-XCT-NEXT CODE0)
       ((M-A) DPB M-ONES (BYTE-FIELD 1 31.) A-A)

CODE1	((M-A) DPB M-ONES (BYTE-FIELD 1 30.) A-A)
CODE0	((MD) M-A)
	((VMA-START-WRITE) C-PDL-BUFFER-INDEX)	;Write header
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	(CALL ECC)			;MD gets ECC code for word in M-A
	((VMA-START-WRITE) ADD VMA (A-CONSTANT 1)) ;Write ECC
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((PDL-BUFFER-INDEX) ADD PDL-BUFFER-INDEX (A-CONSTANT 1)) ;-> next header
	(JUMP-LESS-THAN M-B A-NBLKS NXBLK)
	(POPJ)

; ECC DIAGNOSTIC.
;
; DON'T CALL THIS WITHOUT RUNNING THE REGULAR THING FIRST
; TO INITIALIZE VARIOUS FROBS (UGH, BLETCH!) FOR FORMAT-1-TRACK.
;
; WE FORMAT A TRACK IN M-CYL AND M-HEAD WITH ZEROS EXCEPT
; FOR EACH SINGLE BIT IN TURN IN WORD A-ECC-WD, THEN READ IT
; BACK AND STORE IN THE ECC LOGOUT PAGE (PAGE 28.)
; THE FOLLOWING FOR EACH ATTEMPT:
; STATUS REG, ECC REG, BIT MASK, 3 WORDS SURROUNDING A-ECC-WD
; THE PDP10 CAN DO WHAT IT FEELS LIKE WITH THIS
;
; THE TRACK IMAGE USED BY THE FORMAT PROGRAM STARTS AT LOCATION
; 400 .  THERE ARE 23.5 WORDS OF OVERHEAD BEFORE THE FIRST
; DATA BIT OF BLOCK 0, WHICH IS THEREFORE IN BIT 16 OF 427

ECC-TEST
	((A-ECC-LOGOUT-PNTR) (A-CONSTANT (EVAL (* 28. 400))))
	((A-ECC-COUNT) (A-CONSTANT 40))
	((A-ECC-MASK) (A-CONSTANT 1))
	(CALL FORMAT-1-TRACK)			;TRACK IMAGE TO CORE
ECC-TEST-1
	;; Bugger one bit in block 0 of track image
	((M-TEM) A-ECC-WD)
	((A-ECC-ACTUAL-WD) ADD M-TEM (A-CONSTANT 427))
	((M-TEM) A-ECC-COUNT)
	(JUMP-GREATER-THAN M-TEM (A-CONSTANT 20) ECC-TEST-2)
	;; Bit is in left half, i.e. RH of next word
	((A-ECC-ACTUAL-WD) M+A+1 M-ZERO A-ECC-ACTUAL-WD)
	((M-TEM) A-ECC-MASK)
	((A-ECC-ACTUAL-MASK) (BYTE-FIELD 20 20) M-TEM)
	(JUMP ECC-TEST-3)

ECC-TEST-2
	((M-TEM) A-ECC-MASK)
	((A-ECC-ACTUAL-MASK) DPB M-TEM (BYTE-FIELD 20 20) A-ZERO)
ECC-TEST-3
	((VMA-START-READ) A-ECC-ACTUAL-WD)
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((WRITE-MEMORY-DATA-START-WRITE) XOR READ-MEMORY-DATA A-ECC-ACTUAL-MASK)
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	;; Now write this corrupted track out on the disk
	(CALL RUN)
	((VMA-START-READ) A-ECC-ACTUAL-WD)
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((WRITE-MEMORY-DATA-START-WRITE) XOR READ-MEMORY-DATA A-ECC-ACTUAL-MASK)
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	;; Now, read it back and log the result
	((WRITE-MEMORY-DATA) (A-CONSTANT (EVAL (* 29. 400))))
	((VMA-START-WRITE) WRITE-MEMORY-DATA)	;CLP -> SELF
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 1))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)		;GIVE CLP TO DISK
	((MD) M-C)			;DA  (LEFT IN M-C FROM PREVIOUS RUN)
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 2))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((MD) (A-CONSTANT 0))		;Command is read
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 0))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((VMA-START-WRITE) ADD M-DISK-ADR (A-CONSTANT 3))	;Start
	(CALL WAIT)
	;; Log the results
	((VMA-START-READ) ADD M-DISK-ADR (A-CONSTANT 0))	;Status
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((WRITE-MEMORY-DATA) READ-MEMORY-DATA)
	((VMA-START-WRITE M-TEM) A-ECC-LOGOUT-PNTR)
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((VMA-START-READ) ADD M-DISK-ADR (A-CONSTANT 3))	;ECC pos/pat
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((WRITE-MEMORY-DATA) READ-MEMORY-DATA)
	((VMA-START-WRITE M-TEM) ADD M-TEM (A-CONSTANT 1))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((WRITE-MEMORY-DATA) A-ECC-MASK)			;BIT MASK
	((VMA-START-WRITE M-TEM) ADD M-TEM (A-CONSTANT 1))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((M-A) A-ECC-WD)
	((M-A) ADD M-A (A-CONSTANT (EVAL (* 29. 400))))
	((VMA-START-READ) ADD M-ONES A-A)		;PRECEDING WD
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((WRITE-MEMORY-DATA) READ-MEMORY-DATA)
	((VMA-START-WRITE M-TEM) ADD M-TEM (A-CONSTANT 1))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((VMA-START-READ) M-A)				;ERROR WD
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((WRITE-MEMORY-DATA) READ-MEMORY-DATA)
	((VMA-START-WRITE M-TEM) ADD M-TEM (A-CONSTANT 1))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((VMA-START-READ) M+A+1 M-ZERO A-A)		;FOLLOWING WD
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((WRITE-MEMORY-DATA) READ-MEMORY-DATA)
	((VMA-START-WRITE M-TEM) ADD M-TEM (A-CONSTANT 1))
	(CALL-IF-PAGE-FAULT PAGE-FAULT)
	((A-ECC-LOGOUT-PNTR) ADD M-TEM (A-CONSTANT 1))
	((M-TEM) A-ECC-MASK)
	((A-ECC-MASK) ADD M-TEM A-TEM)
	((A-ECC-COUNT) ADD M-ONES A-ECC-COUNT)
	(JUMP-NOT-EQUAL A-ECC-COUNT M-ZERO ECC-TEST-1)
	(JUMP DONE)
))