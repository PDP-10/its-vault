A SYSTEM WIDE MESSAGE REGISTRY.

  A BIT OF TERMINOLOGY:  THE FIRST COMPONENT OF THE MESSAGE WHICH GIVES THE
     MESSAGE TYPE IS REFERRED TO AS THE MESSAGE KEY.  FOR EXAMPLE THE
  TYO IN (FUNCALL STREAM 'TYO 101).

  FOLLOWING SMALLTALK, IT SEEMS LIKE A GOOD IDEA TO HAVE A
SYSTEM WIDE DATA BASE WHERE THE CHARACTISTICS OF ALL ACTOR
TYPE "MESSAGES" ARE STORED.  IN ADDITION TO SERVING AS A HANDY
REFERENCE FOR HUMANS, THIS COULD ALSO LEAD TO USEFUL ERROR CHECKING
IN THE COMPILER, ETC.  SYSTEM "CONSISTANCY" WOULD HOPEFULLY BE IMPROVED.
BETTER YET, THIS COULD LEAD TO AN "AUTOMATIC" MESSAGE DECOMPOSITION SYSTEM.
IE INSTEAD OF

  (SELECTQ MSG (PLUS (+ (CADR ARG) (CADDR ARG))))  TYPE OF THING YOU COULD WRITE

  (RECEIVE-MESSAGE MSG (PLUS (+ OP1 OP2))) WHERE

  (SPECIFIY-MESSAGE-FORM (PLUS OP1 OP2))  HAD BEEN ENTERED IN THE DATA BASE PREVIOUSLY, ETC.

  AS AN IMPROVEMENT ON JUST HAVING THE RECEIVE-MESSAGE MACRO-EXPAND INTO THE SELECTQ,
WE COULD ACTUALLY HAVE THE OP1 AND OP2 BECOME LOCALLY LAMBDA-BOUND (SORT OF) TO
THE APPROPRIATE ARGUMENT POSITIONS.  THIS WOULD CONSIDERABLY IMPROVE EFFICIENCY
BY FLUSHING CDR'ING DOWN, ETC.  THE MESSAGE COULD BE RECEIVED WITH OPTIONAL ARGS
INSTEAD OF REST ARGS, WHICH WOULD FURTHER IMPROVE EFFICIENCY.

  ANOTHER IDEA THAT OCCURRED TO ME WHILE THINKING ABOUT THIS, IS THAT WE REALLY
SHOULD HAVE &REST-STACK AND &REST-SAFE AS TWO SEPARATE FORMS OF A REST ARG.
THE &REST-STACK WOULD ALLOW DIRECT ARG POSITION BINDING, WHILE &REST-SAFE
WOULD FIX A CURRENT SCREW, WHILE NOT REQUIRING EXTRA CONSING WHEN THE ARG
IS REALLY SAFE ALREADY.

IN ADDITION TO JUST NAMING THE COMPONENTS OF A MESSAGE, YOU COULD SPECIFY INFO
ABOUT THEIR REQUIRED DATA TYPE (EITHER GENERIC OR LOGICAL), ETC.

ALSO, SOME FORM LIKE
  (SEND-MESSAGE <FUNCTIONAL-OBJECT> <MESSAGE-KEY> ( (OP1 3) (OP2 (+ A B))))

MIGHT BE A WIN.

UNIFORMLY USING FROBS LIKE RECEIVE-MESSAGE, ETC, MAY MAKE SOME EFFICIENCY HACKS
PRACTICAL WHICH OTHERWISE WOULD BE TOO BLECHEROUS.  FOR EXAMPLE, INSTEAD OF
SENDING A SYMBOL AS THE MESSAGE, WE COULD HAVE THE ACTUAL MESSAGE TRANSMITTED BE
AN INTEGER (WHICH WOULD BE ASSOCIATED WITH THE SYMBOL IN THE MESSAGE-REGISTRY). 
THIS WOULD SIMPLIFY A LOG-SEARCH DISPATCH HACK INSTEAD OF THE
LINEAR SELECTQ.  BUT IT COULD BE FIXED UP TO STILL LOOK THE SAME TO THE USER,
INCLUDING ERROR PRINTOUTS, ETC.  (THE PROBLEM WITH DOING A LOG SEARCH ON THE SYMBOL
POINTERS IS THAT THEY MAY GET RESHUFFLED BY A GARBAGE COLLECTION, ETC.).

BETTER YET (MAYBE), BY ASSIGNING A SINGLE FUNCTION-INSTANCE-CODE, THE ENTIRE
MESSAGE DISPATCH COULD BE PERFORMED BY REFERENCING A SINGLE HASH ADDRESSED
SYSTEM-WIDE TABLE.  (IE, IF MESSAGE N IS RECEIVED BY FUNCTION M, ...).
ALTHO THIS WOULD GIVE BETTER LIMITING PREFORMANCE, IT IS SOMEWHAT QUESTIONABLE
IF THE AVERAGE FUNCTION REALLY RECEIVES ENUF DIFFERENT MESSAGES TO PASS
THE BREAK-EVEN POINT.  FURTHERMORE, IF THIS TABLE EVER GOT TOO BIG TO FIT IN
REAL PRIMARY MEMORY, DISASTER WOULD STRIKE EFFICIENCY WISE.

A (MAJOR?) RESTRICTION IN ALL OF THIS IS THAT THE MESSAGE KEY
IS ALWAYS QUOTED AT BOTH THE SENDING AND RECEIVING ENDS.


THE MESSAGE REGISTRY ITSELF:  
  INITIALLY, THE REGISTRY WOULD BE MAINLY FOR HUMAN DOCUMENTATION PURPOSES.
HOWEVER, SOME ATTEMPT WOULD BE MADE TO INCLUDE INFORMATION THAT MIGHT EVENTUALLY
BE USEFUL FOR ERROR CHECKING BY THE COMPILER/EXPANDER/(PROGRAM-CHECKER!).

  THE FOLLOWING KINDS OF INFO WOULD LIKELY BE STORED IN THE MESSAGE REGISTRY:

FOR THE MESSAGE AS A WHOLE:
   THE MESSAGE-KEY.  THIS OF COURSE IS WHAT EVERYTHING ELSE IS INDEXED OFF OF.
   THE LENGTH OF THE MESSAGE (WHICH WOULD PROBABLY, HOWEVER, INCLUDE PROVISION FOR MAKING THIS
VARIABLE, EITHER WITHIN A RANGE OR COMPLETELY UNCONSTRAINED).

FOR EACH COMPONENT OF THE MESSAGE (IN ALL CASES, THE SPECIFICATION IS OPTIONAL)
   THE COMPONENT-NAME.  THIS IS JUST FOR EASE OF HUMAN REFERENCE.  HOWEVER,
IT SEEMS LIKE A GOOD AID TO DEVELOPING CONSISTANT NAMING
TERMINOLOGY ACROSS THE SYSTEM.
   COMPONENT-GENERIC-TYPE.  ONE OF Q-DATA-TYPES, OR A STRUCTURE-NAME, OR A LIST WHOSE ELEMENTS
ARE THOSE.
   COMPONENT-LOGICAL-TYPE.  SPECIFIES ELEMENT MUST BE A MEMBER OF THE GIVEN HIGHER LEVEL CLASS,
SUCH AS STREAM, FUNCTION, PROCESS, ETC.
