;;;-*-LISP-*- MACHINE COLD LOAD BUILDER (COMPILED PORTION)

;	** (c) Copyright 1980 Massachusetts Institute of Technology **

(DECLARE (COND ((NULL (MEMQ 'NEWIO (STATUS FEATURES)))
		(BREAK 'YOU-HAVE-TO-COMPILE-THIS-WITH-QCOMPL T))
	       ((NULL (GET 'IF-FOR-MACLISP 'MACRO))
		(LOAD '(MACROS > DSK LISPM))
		(LOAD '(DEFMAC FASL DSK LISPM2))
		(LOAD '(LMMAC > DSK LISPM2))
		(MACROS T))))	;SEND OVER THE REST OF THE MACROS IN THIS FILE

(DEFMACRO **STRING** (X) `',X) ;SO STRINGS CAN BE USED IN MACLISP CODE

(DECLARE (EXPR-HASH T))
(DECLARE (GENPREFIX *COLD*))

(DECLARE (FIXNUM (Q-CHAR-LENGTH NOTYPE)
		 (Q-CHAR-CHOMP NOTYPE)))

(DECLARE (SPECIAL OFFICIALLY-APPROVED-Q-SYMBOLS))

(SETQ OFFICIALLY-APPROVED-Q-SYMBOLS	;FOO
      (APPEND '(HEADER-TYPE-ARRAY-LEADER)
	      ARRAY-MISC-VALUES ARRAY-TYPES))

(DECLARE (SPECIAL COLD-OP-EOF COLD-OP-DATA COLD-OP-HALFWORDS COLD-OP-INIT-AREA))

(DECLARE (SPECIAL COLD-BUFFER-ARRAY COLD-FILE))

;COLD-BUFFER-ARRAY.  0 IS BUFFERED HALFWORD, -1 IF NONE.  1 IS COUNT FOR STORE-HALFWORDS

(DEFUN COLD-NIBBLE (X)
  (DECLARE (FIXNUM X))
  (SETQ X (BOOLE 1 177777 X))
  (LET ((TEM 0))
    (DECLARE (FIXNUM TEM))
    (STORE (ARRAYCALL FIXNUM COLD-BUFFER-ARRAY 0)
	   (COND ((MINUSP (SETQ TEM (ARRAYCALL FIXNUM COLD-BUFFER-ARRAY 0)))	;FIRST HALFWORD
		  X)
		 (T (OUT COLD-FILE	;SECOND HALFWORD
			 (LSH (+ (LSH TEM 16.) X) 4))
		    -1))))
  NIL)
			 
(DEFUN COLD-CLOSE (FINAL-NAME)
  (AND (PLUSP (ARRAYCALL FIXNUM COLD-BUFFER-ARRAY 0))
       (COLD-NIBBLE 0))		;FORCE
  (AND FINAL-NAME (RENAMEF COLD-FILE FINAL-NAME))
  (CLOSE COLD-FILE))

(DEFUN COLD-OPEN (FILE)
  (SETQ FILE (MERGEF '((* *) _COLD_ OUTPUT) FILE))
  (SETQ COLD-FILE (OPEN FILE '(OUT FIXNUM BLOCK)))
  (OR (BOUNDP 'COLD-BUFFER-ARRAY)
      (SETQ COLD-BUFFER-ARRAY (*ARRAY NIL 'FIXNUM 2)))	;TO AVOID NUMBER CONSING
  (STORE (ARRAYCALL FIXNUM COLD-BUFFER-ARRAY 0) -1)	;RESET BUFFERED BACK HALFWORD
  (COLD-NIBBLE 107313)					;MAGIC
  (COLD-NIBBLE 160620)					;MORE MAGIC - SIXBIT/CLOAD/
  T)

(DEFUN BEGIN-STORE-HALFWORDS (AREA N-WORDS)
  (OR (GET AREA 'IMMEDIATE-WRITE-AREA)
      (ERROR "BEGIN-STORE-HALFWORDS ON NON-IMMEDIATE-WRITE AREA" AREA 'FAIL-ACT))
  (LET ((ARRAYP (GET AREA 'ARRAY)))
    (OR ARRAYP (ERROR "NOT AN AREA" AREA 'FAIL-ACT))
    (COND ((> (ARRAYCALL T ARRAYP 0) 2)			;IF THERE'S A BUFFERED-BACK WORD
	   (OUTPUT-Q AREA (ARRAYCALL T ARRAYP 2))))	;STORE IT
    (STORE (ARRAYCALL T ARRAYP 0)			;ADVANCE THE FREE POINTER
	   (- 0 (+ (ABS (ARRAYCALL T ARRAYP 0))		;AND FLAG NO BUFFERED-BACK WORD
		   N-WORDS)))
    (OR (< N-WORDS 200000) (ERROR "TOO BIG - BEGIN-STORE-HALFWORDS" N-WORDS 'FAIL-ACT))
    (STORE (ARRAYCALL FIXNUM COLD-BUFFER-ARRAY 1) (* 2 N-WORDS))
    (COLD-NIBBLE (+ COLD-OP-HALFWORDS (SYMEVAL AREA)))
    (COLD-NIBBLE N-WORDS)))

(DEFUN STORE-HALFWORD (HWD)
  (DECLARE (FIXNUM HWD))
  (STORE (ARRAYCALL FIXNUM COLD-BUFFER-ARRAY 1)
	 (1- (ARRAYCALL FIXNUM COLD-BUFFER-ARRAY 1)))
  (COLD-NIBBLE HWD))  

(DEFUN END-STORE-HALFWORDS ()
  (OR (ZEROP (ARRAYCALL FIXNUM COLD-BUFFER-ARRAY 1))
      (ERROR "STORE-HALF-WORDS COUNT MESSED UP" (ARRAYCALL FIXNUM COLD-BUFFER-ARRAY 1)
	     'FAIL-ACT)))

(DEFMACRO PREVENT-CRETINISM (ARRAY-REFERENCE)  ;CRETINOUS NCHOMPLR
  `(+ 0 ,ARRAY-REFERENCE))  

(DECLARE (SPECIAL SYMBOL-CREATION-TRACE-LIST))
(COND ((NOT (BOUNDP 'SYMBOL-CREATION-TRACE-LIST))
       (SETQ SYMBOL-CREATION-TRACE-LIST NIL)))

(DECLARE (UNSPECIAL ADR))
(DECLARE (SPECIAL DATA-TYPE CDR-CODE LOCN-POINTER NUMERIC-DATA
		 ADDITIVE-CONSTANTS LAP-DEBUG HOLDPROG QCMP-OUTPUT AREA-LIST 
		AREA-SIZES DATA-TYPES CDR-CODES ARRAY-TYPES
	       COLD-LOAD-OPS PAGE-SIZE SIZE-OF-OB-TBL SIZE-OF-AREA-ARRAYS 
		SCRATCH-PAD-POINTERS SCRATCH-PAD-PARAMETER-OFFSET 
		SCRATCH-PAD-PARAMETERS SCRATCH-PAD-TEMP-OFFSET SCRATCH-PAD-TEMPS 
		INDICATOR NEXT-AREA QNIL QTRUTH Q-FCTNS Q-LISP-CONSTANTS 
		MICRO-CODE-POINTER-VECTOR COLD-LOAD-RELOCATE-BY-MEM 
		COLD-LOAD-RELOCATE-BY-POINT AREAS-WITH-FILL-POINTERS 
	       LIST-REFERENCED-AREAS ARRAY-ELEMENTS-PER-Q ARRAY-DIM-MULT 
	       LIST-STRUCTURED-AREAS
	       AREA-CORRESPONDING-ARRAYS ARRAY-REFERENCED-AREAS
	       ARRAY-LONG-LENGTH-FLAG %ARRAY-MAX-SHORT-INDEX-LENGTH))

(DECLARE (SPECIAL RESIDENT-SYMBOL-AREA CONSTANTS-AREA SCRATCH-PAD-INIT-AREA AREA-NAME 
	WORKING-STORAGE-AREA 
	MICRO-CODE-ENTRY-AREA MICRO-CODE-ENTRY-NAME-AREA MICRO-CODE-ENTRY-ARGS-INFO-AREA
	MICRO-CODE-ENTRY-ARGLIST-AREA
	MICRO-CODE-EXIT-AREA 
	MICRO-CODE-SYMBOL-AREA MICRO-COMPILED-PROGRAM P-N-STRING CONTROL-TABLES 
	OBT-TAILS NR-SYM MACRO-COMPILED-PROGRAM 
	INIT-LIST-AREA LINEAR-PDL-AREA LINEAR-BIND-PDL-AREA ))

;(DECLARE (SPECIAL INITIAL-READ-TABLE RTS-TEST-SHIFT RTS-SET-SHIFT RTB-RTS-BITS 
;	 SIZE-OF-READ-TBL))

(DEFUN COLD-LOAD-INITIALIZE-ARRAY (NAME AREA TYPE DIMLIST DISPLACED-P LEADER INIT-DATA)
  (AND (MEMQ AREA LIST-STRUCTURED-AREAS)
       (BARF AREA '|COLD-LOAD-INITIALIZE-ARRAY IN LIST-STRUCTURED AREA| 'BARF))
  (PROG (OFFSET DATA-LENGTH Q-SO-FAR ELEMENTS-PER-Q BITS-PER-ELEMENT ELEMENT-MASK COUNT)
	(COND ((EQUAL DIMLIST '(**)) (SETQ DIMLIST (LIST (LENGTH INIT-DATA)))))
	(COND ((ATOM NAME) (SETQ OFFSET 2))
	      ((EQ (CAR NAME) 'VALUE-CELL)
		(SETQ NAME (CADR NAME))
		(SETQ OFFSET 1))
	      (T (BARF NAME 'BAD-NAME-INITIALIZE-ARRAY 'BARF)))
	(COND (DISPLACED-P (BARF 'CANT-HANDLE-DISPLACED-ARRAY 
				 'COLD-LOAD-INITIALIZE-ARRAY  'BARF)))
	(SETQ DATA-LENGTH 
		(INIT-Q-ARRAY AREA NAME OFFSET TYPE DIMLIST NIL	
		  (COND ((ATOM LEADER) LEADER)
			(T (MAPCAR (FUNCTION (LAMBDA (X) (MAKE-Q-LIST 'INIT-LIST-AREA X)))
				   LEADER)))))
	(SETQ ELEMENTS-PER-Q (CDR (ASSQ TYPE ARRAY-ELEMENTS-PER-Q)))
	(COND ((NULL INIT-DATA) 
		(STORE-NILS AREA DATA-LENGTH)
		(RETURN NIL))
	      ((NOT (= (LENGTH INIT-DATA) (LIST-PRODUCT DIMLIST)))
		(BARF NAME 'INIT-DATA-WRONG-LENGTH 'BARF))
	      ((= ELEMENTS-PER-Q 1) 
		(STORE-LIST AREA INIT-DATA)
		(RETURN NIL)))
	(SETQ BITS-PER-ELEMENT (// 32. ELEMENTS-PER-Q))
	(SETQ ELEMENT-MASK (1- (LSH 1 BITS-PER-ELEMENT)))
   L	(SETQ Q-SO-FAR 0)
	(SETQ COUNT ELEMENTS-PER-Q)
   L1	(COND ((NOT (NUMBERP (CAR INIT-DATA)))
		(BARF INIT-DATA 'CAN-ONLY-INITIALIZE-NON-Q-ARRAYS-TO-NUMBERS 'BARF)))
	(SETQ Q-SO-FAR (+ Q-SO-FAR (LSH (BOOLE 1 ELEMENT-MASK (CAR INIT-DATA))
					(* (- ELEMENTS-PER-Q COUNT) BITS-PER-ELEMENT))))
	(SETQ INIT-DATA (CDR INIT-DATA))
	(COND ((AND INIT-DATA 
		    (NOT (= 0 (SETQ COUNT (1- COUNT)))))
		(GO L1)))
	(STOREQ AREA Q-SO-FAR)
	(COND (INIT-DATA (GO L)))
	(RETURN T)))

(DEFUN INIT-Q-ARRAY (AREA NAME OFFSET TYPE DIMLIST DISPLACED-P LEADER)
  (INIT-Q-ARRAY-NAMED-STR AREA NAME OFFSET TYPE DIMLIST DISPLACED-P LEADER NIL))

;NOTE!! LEADER IS STOREQ ED DIRECTLY SO IT MUST ALREADY BE MAKE-Q-LIST IFIED
(DEFUN INIT-Q-ARRAY-NAMED-STR (AREA NAME OFFSET TYPE DIMLIST DISPLACED-P LEADER NAMED-STR)
	;  LEADER IS CONTENTS OF ARRAY LEADER, IF DESIRED.  IT IS IN "STORAGE ORDER"
	;WHICH IS REVERSED FROM INDEX ORDER.
	;  IF LEADER IS NUMERIC, IT MEANS MAKE LEADER CONSISTING OF THAT MANY Q'S
	;INITIALIZED TO NIL.
	;  IF NAME -> NIL, RETURN (LIST <ARRAY-ADR> <DATA-LENGTH>) AND DONT TRY
	;TO STORE IN FUNCTION OR VALUE CELL.
							;OFFSET 1 FOR STORING POINTER
  (AND (MEMQ AREA LIST-STRUCTURED-AREAS)
       (BARF AREA '|INIT-Q-ARRAY IN LIST-STRUCTURED AREA| 'BARF))
  (PROG (TEM NDIMS INDEX-LENGTH DATA-LENGTH TEM1 LEADER-LENGTH 
		HEADER-Q LONG-ARRAY-FLAG)		;TO ARRAY IN VALUE CELL, 2 FOR
	(AND (NUMBERP DIMLIST) (SETQ DIMLIST (LIST DIMLIST)))
	(SETQ NDIMS (LENGTH DIMLIST))			;FUNCTION CELL
	(SETQ INDEX-LENGTH (LIST-PRODUCT DIMLIST))
	(COND ((AND (> INDEX-LENGTH %ARRAY-MAX-SHORT-INDEX-LENGTH)
		    (NULL DISPLACED-P))
		(SETQ LONG-ARRAY-FLAG T)))
	(SETQ LEADER-LENGTH (COND ((NULL LEADER) 0)
				  ((NUMBERP LEADER) (+ 2 LEADER))
				  (T (+ 2 (LENGTH LEADER)))))
	(COND ((NULL (SETQ TEM (ASSQ TYPE ARRAY-ELEMENTS-PER-Q)))
		(BARF TYPE 'BAD-ARRAY-TYPE 'BARF)))
	(SETQ TEM (CDR TEM))
	(COND ((NULL LEADER)(GO A)))
	(STOREQ AREA (LIST 'QZHDR 'HEADER-TYPE-ARRAY-LEADER LEADER-LENGTH))
	(SETQ TEM1 LEADER)
	(COND ((NOT (NUMBERP LEADER)) (GO LD-1)))
LDN1	(COND ((= TEM1 0) (GO LD-2))		;STORE LEADER SPEC'ED BY NUMBER
	      ((AND (= TEM1 1) NAMED-STR)
	       (STOREQ AREA (QINTERN NAMED-STR)))
	      (T (STOREQ AREA QNIL)))
	(SETQ TEM1 (1- TEM1))
	(GO LDN1)
LD-1	(COND ((NULL TEM1) (GO LD-2)))		;STORE LEADER INITIALIZED FROM LIST
	(STOREQ AREA (CAR TEM1))
	(SETQ TEM1 (CDR TEM1))
	(GO LD-1)
LD-2	(STORE-NXTNIL-CDR-CODE AREA)
	(STOREQ AREA (LIST 'QZFIX (- LEADER-LENGTH 2)))
A	(SETQ DATA-LENGTH (// (+ INDEX-LENGTH (1- TEM)) TEM))
	(SETQ HEADER-Q (LIST 'QZARYH 
			(* ARRAY-DIM-MULT NDIMS)
			TYPE))
	(COND (LEADER (NCONC HEADER-Q (LIST 'ARRAY-LEADER-BIT))))
	(COND (NAMED-STR (NCONC HEADER-Q (LIST 'ARRAY-NAMED-STRUCTURE-FLAG))))
	(COND (DISPLACED-P   ;Note, no index-offset arrays in cold-load
		(SETQ TEM (STOREQ AREA (NCONC HEADER-Q (LIST 'ARRAY-DISPLACED-BIT 2)))))
	      ((NULL LONG-ARRAY-FLAG)
		(SETQ TEM (STOREQ AREA (NCONC HEADER-Q (LIST INDEX-LENGTH)))))
	      (T (SETQ TEM (STOREQ AREA (NCONC 
					  HEADER-Q 
					 (LIST 'ARRAY-LONG-LENGTH-FLAG))))
		 (STOREQ AREA (LIST 'QZFIX INDEX-LENGTH))))
L	(COND ((= (LENGTH DIMLIST) 1) (GO X1)))	;DONT STORE LAST DIM SINCE INFO IS
	(STOREQ AREA (MAKE-Q-LIST 'INIT-LIST-AREA 
				  (ATOMEVAL (CAR DIMLIST))))	;IN TOTAL LENGTH
	(SETQ DIMLIST (CDR DIMLIST))
	(GO L)
X1	(COND ((NULL NAME) (RETURN (LIST TEM DATA-LENGTH))))
	(STOREPROP NAME OFFSET (LIST 'QZARYP TEM))
	(RETURN DATA-LENGTH)
))

(DEFUN STORE-SUPPORT-VECTOR (ITEM)
      (STOREQ 'SUPPORT-ENTRY-VECTOR
	(COND ((EQ (CAR ITEM) 'FUNCTION) (GET-Q-FCTN-CELL (CADR ITEM)))
						;FCTN CELL HAS CDR CODE OF NXTCDR
	      ((EQ (CAR ITEM) 'QUOTE) (CONS 'NXTCDR (MAKE-Q-LIST 'INIT-LIST-AREA 
								(CADR ITEM))))
	      (T (BARF ITEM 'BAD-SUPPORT-CODE 'BARF) NIL))))

(DEFUN GET-Q-FCTN-CELL (FCTN)
  (PROG (TEM)
	(COND ((NULL (SETQ TEM (GET FCTN 'Q-ATOM-HEAD)))
		(RETURN NIL))
	      (T (RETURN (CONTENTS (LIST (CAADR TEM) (+ 2 (CADADR TEM)))))))))

(DEFUN STORE-DISPLACED-ARRAY-POINTER (AREA)
 (PROG (ARRAYP FILLP AREA-ARRAY-TYPE DATA-LENGTH) 
	(SETQ FILLP (MEMQ AREA AREAS-WITH-FILL-POINTERS))
	(SETQ AREA-ARRAY-TYPE 
	    (COND ((MEMQ AREA LIST-REFERENCED-AREAS) 'ART-Q-LIST)
		  ((MEMQ AREA ARRAY-REFERENCED-AREAS) 'ART-Q)
		  (T 'ART-32B)))
	(SETQ DATA-LENGTH 
         (INIT-Q-ARRAY 'CONTROL-TABLES 
		AREA  
		2 
		AREA-ARRAY-TYPE  
		(LIST (MAX (* PAGE-SIZE (GET-AREA-SIZE AREA))
			   (- (ARRAYCALL T (SETQ ARRAYP (GET AREA 'ARRAY)) 1) 2))) 
		T 
		(COND (FILLP (LIST (LIST 'QZFIX 
					(COND ((MEMQ AREA AREA-CORRESPONDING-ARRAYS)
						(LENGTH AREA-LIST))	;SOME OF THESE 
									;NOT LOADED AT
									;COLD LOAD TIME
					      (T (- (ARRAYCALL T ARRAYP 0) 2))))))
		      (T NIL))))
			;STORE CURRENT FILL POINTER IN LOCN 0 OF ARRAY LEADER
	(STOREQ 'CONTROL-TABLES (LIST 'QZFIX (LIST AREA 0)))
	(STOREQ 'CONTROL-TABLES (LIST 'QZFIX DATA-LENGTH))
	(RETURN NIL)))

;X IS A SYMBOL OR CONS FUNCTION-NAME INSTRUCTION-NAME
(DEFUN STORE-MISC-LINK (X)
  (COND ((ATOM X)
	 (MISC-STORE-MICRO-ENTRY X X))
	((MISC-STORE-MICRO-ENTRY (CAR X) (CDR X)))))

;SPECIAL KLUDGE WHICH FILTERS OUT *CATCH 
(DEFUN STORE-MISC-LINK-1 (X)
  (OR (EQ X '*CATCH)
      (STORE-MISC-LINK X)))

(DEFUN STORE-MICRO-CODE-SYMBOL-NAME (NAME)
  ((LAMBDA (OPCODE)
     (OR OPCODE (ERROR '|NO QLVAL PROPERTY IN STORE-MICRO-CODE-SYMBOL-NAME| NAME 'FAIL-ACT))
     (STORE-DATA-CONTENTS (LIST 'MICRO-CODE-SYMBOL-NAME-AREA (- OPCODE 200)) (QINTERN NAME)))
   (GET NAME 'QLVAL)))

(DEFUN STORE-LISP-VALUE-LIST (X)
	(MAPC (FUNCTION STORE-LISP-VALUE) (SYMEVAL X)))

;Store cdr-coded list of 1000 NIL's.
(DEFUN INIT-MICRO-CODE-SYMBOL-NAME-AREA ()
  (DO I 777 (1- I) (= I 0)
    (STOREQ 'MICRO-CODE-SYMBOL-NAME-AREA (CONS 'NXTCDR QNIL)))
  (STOREQ 'MICRO-CODE-SYMBOL-NAME-AREA (CONS 'NXTNIL QNIL)))

(DEFUN GETPROP (SYM OFFSET)
  (PROG (ADR)
	(SETQ ADR (CADR (QINTERN SYM)))
	(RETURN (CONTENTS (LIST (CAR ADR) (+ OFFSET (CADR ADR)))))))

(DEFUN STOREPROP (SYM OFFSET PROP)
  (PROG (ADR)
	(SETQ ADR (CADR (QINTERN SYM)))
	(STORE-DATA-CONTENTS (LIST (CAR ADR) (+ OFFSET (CADR ADR)))
			     PROP)))

(DEFUN GET-LIST-POINTER-INTO-Q-ARRAY (Q-ARRAY-POINTER) ;ONLY WORKS FOR ONE DIMENSIONAL
   (PROG (HAPPY ADR TEM)			       ;SMALL ARRAYS
	(SETQ TEM Q-ARRAY-POINTER)
     L	(COND ((NULL TEM)
		(COND ((NULL HAPPY) 
			(BARF Q-ARRAY-POINTER 'GET-LIST-POINTER-INTO-Q-ARRAY 'WARN)))
		(RETURN (LIST 'QZLIST (LIST (CAR ADR) (1+ (CADR ADR))))))
	      ((EQ (CAR TEM) 'QZARYP) (SETQ HAPPY T))
	      ((NOT (ATOM (CAR TEM))) (SETQ ADR (CAR TEM))))
	(SETQ TEM (CDR TEM))
	(GO L)))

(DEFUN STORE-LISP-VALUE (SYM)
	(STOREIN-Q-VALUE-CELL SYM (MAKE-Q-LIST 'INIT-LIST-AREA (SYMEVAL SYM))))

(DEFUN COLD-LOAD-TIME-SETQ (PAIR-LIST)
  (PROG (VAR VALUE)
   L	(COND ((NULL PAIR-LIST) (RETURN T)))
	(SETQ VAR (CAR PAIR-LIST) VALUE (CADR PAIR-LIST))
	(COND ((AND (ATOM VALUE) (OR (NUMBERP VALUE)
				     (MEMQ VALUE '(T NIL)))))
	      ((EQ (CAR VALUE) 'QUOTE)
		(SETQ VALUE (CADR VALUE)))
	      ((EQ (CAR VALUE) '**STRING**) )
	      (T (BARF PAIR-LIST 'BAD-LOAD-TIME-SETQ 'BARF)))
	(STOREIN-Q-VALUE-CELL VAR (MAKE-Q-LIST 'INIT-LIST-AREA VALUE))
	(SETQ PAIR-LIST (CDDR PAIR-LIST))
	(GO L)))

(DEFUN STOREIN-Q-VALUE-CELL (SYM DATA)
  (PROG (ADR)
	(SETQ ADR (CADR (QINTERN SYM)))
	(STORE-DATA-CONTENTS (LIST (CAR ADR) (1+ (CADR ADR))) DATA)))

(DEFUN STORE-CONSTANT (C)
  (STOREQ 'CONSTANTS-AREA (CONS 'NXTCDR (MAKE-Q-LIST 'INIT-LIST-AREA C))))

(DEFUN MAKE-Q-LIST (AREA S-EXP)
  (PROG (ADR BSIZE C-CODE VALUE)
	(COND ((NUMBERP S-EXP)
	       (RETURN (LIST 'QZFIX (BOOLE 1 77777777 S-EXP))))
	      ((ATOM S-EXP)
	       (RETURN (QINTERN S-EXP)))
	      ((EQ (CAR S-EXP) '**STRING**)
	       (RETURN (STORE-STRING 'P-N-STRING (CADR S-EXP))))
	      ((EQ (CAR S-EXP) '**STRING-CHLIST**)
	       (RETURN (STORE-CHLIST 'P-N-STRING '(FOO) (CADR S-EXP)))))
	(OR (MEMQ AREA LIST-STRUCTURED-AREAS)
	    (BARF AREA '|MAKE-Q-LIST IN NON-LIST-STRUCTURED AREA| 'BARF))
	(SETQ BSIZE (LENGTH-TERM-BY-ATOM S-EXP))
	(COND ((CDR (LAST-TERM-BY-ATOM S-EXP)) (SETQ BSIZE (1+ BSIZE))))
								;ENDS IN DOTTED PAIR
	(SETQ VALUE (APPEND (SETQ ADR (ALLOCATE-BLOCK AREA BSIZE)) NIL))
L	(SETQ C-CODE (COND ((NULL (CDR S-EXP)) 'NXTNIL)
			   ((ATOM (CDR S-EXP)) 'FULL-NODE)
			   (T 'NXTCDR)))
	(STORE-CONTENTS ADR (CONS C-CODE (MAKE-Q-LIST AREA (CAR S-EXP))))
	(RPLACA (CDR ADR) (1+ (CADR ADR)))
	(COND ((NOT (ATOM (SETQ S-EXP (CDR S-EXP))))
		(GO L))
		(S-EXP (STORE-CONTENTS ADR (CONS 'NXTNOT (MAKE-Q-LIST AREA S-EXP)))))
	(RETURN (LIST 'QZLIST VALUE))
))

(DEFUN ALLOCATE-BLOCK (AREA SIZE)
  (PROG (VAL)
	(COND ((= 0 SIZE) (RETURN QNIL)))
	(SETQ VAL (STOREQ AREA NIL))
        L (COND ((= 0 (SETQ SIZE (1- SIZE))) (RETURN VAL)))
	  (STOREQ AREA NIL)
	  (GO L)))
	      
(DEFUN STORE-SYMBOL-VECTOR (ATOM-NAME AREA)
  (AND (MEMQ AREA LIST-STRUCTURED-AREAS)
       (BARF AREA '|STORE-SYMBOL-VECTOR IN LIST-STRUCTURED AREA| 'BARF))
  (AND (EQ ATOM-NAME '**SCREW**)
       (BARF ATOM-NAME '|You've probably encountered a bug in FROID| 'BARF))
  (PROG (TEM PATH REAL-ATOM-NAME PACKAGE-NAME)
   (COND ((SETQ PATH (GET ATOM-NAME 'PACKAGE-PATH))
	  (OR (= (LENGTH PATH) 2)
	      (ERROR PATH '|Package path not 2 long - code not hairy enough| 'FAIL-ACT))
	  (SETQ PACKAGE-NAME (QINTERN (CAR PATH))
		REAL-ATOM-NAME (CAR (LAST PATH))))
	 (T (SETQ PACKAGE-NAME QNIL REAL-ATOM-NAME ATOM-NAME)))
   (COND (SYMBOL-CREATION-TRACE-LIST  ;Debugging tool to track down appears twice in 
	  (DO ((L SYMBOL-CREATION-TRACE-LIST (CDR L)))  ;cold load messages.
	      ((NULL L))
	    (COND ((SAMEPNAMEP REAL-ATOM-NAME (CAR L))
		   (PRINT (LIST 'A-FLAVOR-OF REAL-ATOM-NAME 'BEING-CREATED
				'ATOM-NAME ATOM-NAME 'PATH PATH
				'PACKAGE-NAME PACKAGE-NAME)))))))
   (SETQ TEM
    (LIST 'QZSYM 
	  (STOREQ AREA 
		 (CONS 'NXTCDR 
			(CONS 'QZSYMH 		;FLUSH QZARYP AND SUBSTITUTE DTP-SYMBOL-HEADER
			      (CDR (STORE-STRING 'P-N-STRING REAL-ATOM-NAME)))))))
   (PUTPROP ATOM-NAME TEM 'Q-ATOM-HEAD)
   (STOREQ AREA (CONS 'NXTCDR (CONS 'QZNULL (CDR TEM))))
   (STOREQ AREA (CONS 'NXTCDR (CONS 'QZNULL (CDR TEM))))
   (STOREQ AREA (CONS 'NXTCDR QNIL))
   (STOREQ AREA (CONS 'NXTNIL PACKAGE-NAME))
   (RETURN TEM)))

(DEFUN STORE-LIST-OF-ATOMS (AREA LOA)
  (PROG NIL
    A	(COND ((NULL LOA) (STORE-NXTNIL-CDR-CODE AREA) (RETURN NIL)))
	(STOREQ AREA (CONS 'NXTCDR (Q-CONVERT-ATOM (CAR LOA))))
	(SETQ LOA (CDR LOA))
	(GO A) ))

(DEFUN Q-CONVERT-ATOM (ATM)
	(COND ((NUMBERP ATM)
		(LIST 'QZFIX (BOOLE 1 77777777 ATM)))
	      (T (QINTERN ATM))))

(DEFUN STORE-LIST (AREA LST)
  (PROG NIL 
	(COND ((NULL LST) (RETURN NIL)))
   A	(COND ((NULL LST) (STORE-NXTNIL-CDR-CODE AREA) (RETURN NIL)))
	(STOREQ AREA (CONS 'NXTCDR (MAKE-Q-LIST 'INIT-LIST-AREA (CAR LST))))
	(SETQ LST (CDR LST))
	(GO A)))

(DEFUN STORE-NILS (AREA NUMBER)
  (PROG NIL 
   A	(COND ((= NUMBER 0) (STORE-NXTNIL-CDR-CODE AREA) (RETURN NIL)))
	(STOREQ AREA (CONS 'NXTCDR QNIL))
	(SETQ NUMBER (1- NUMBER))
	(GO A) ))

;EACH AREA IS A MACLISP ARRAY.
; NORMAL AREA (ARRAY 0) -> FILL POINTER (IN FORM OF ARRAY INDEX) STARTS OFF AT 2
;	      (ARRAY 1) -> CURRENT SIZE OF MACLISP ARRAY
;	      2 .. N  AREA-CONTENTS WHICH ARE HELD IN MACLISP UNTIL COLD-LOAD GENERATION
;		      COMPLETE.
; IMMEDIATE-WRITE-AREA  ARRAY ALWAYS 3 ELEMENTS LONG
;	      (ARRAY 0) -> FILL POINTER (SIMULATED)  (NEGATIVE IF NO BUFFERED ELEMENT)
;	      (ARRAY 1) -> SIZE (NOT REALLY USED)
;	      (ARRAY 2) -> LAST BUFFERED ELEMENT.  EACH TIME A NEW Q IS STORED
;			    THE PREVIOUS ELEMENT IS WRITTEN INTO THE OUTPUT FILE.
; BUFFERED-AREA
;	      (ARRAY 0) -> FILL POINTER (SIMULATED)
;	      (ARRAY 1) -> FILL-POINTER DELTA (STARTS OFF AT 0)
;	      2 ... N BUFFERED DATA.  COMBINES ELEMENTS OF OTHER TWO.  LIKE NORMAL ARRAY
;			    BUT DATA STORED AT (FILL-POINTER - FILL-POINTER-DELTA) INSTEAD
;			    OF FILL POINTER.  WHEN (UNBUFFER-AREA <AREA>) IS CALLED,
;			    THE BUFFERED CONTENTS ARE WRITTEN INTO THE OUTPUT FILE AND
;			    THE FILL-POINTER-DELTA SET EQUAL TO THE FILL POINTER.
;			THE AMOUNT OF CRUFT WRITTEN BETWEEN UNBUFFERING S HAD BETTER
;			NOT EXCEED A PRESET CONSTANT (CURRENTLY 200).

(DEFUN INIT-AREA (NAME)
	(PROG (SIZE ARRAYP)
		(*ARRAY NAME T 
		  (SETQ SIZE 
		   (COND ((GET NAME 'IMMEDIATE-WRITE-AREA) 3)
			 ((GET NAME 'BUFFERED-AREA) 202)
			 ((GET NAME 'COLD-LOAD-ARRAY-SIZE))
			 (T (+ 2 (* PAGE-SIZE 
			         (GET-AREA-SIZE NAME)))))))

		(STORE (ARRAYCALL T (SETQ ARRAYP (GET NAME 'ARRAY)) 0) 2)
		(STORE (ARRAYCALL T ARRAYP 1) (COND ((GET NAME 'BUFFERED-AREA) 0)
						    (T SIZE)))
  ))

(DEFUN STOREQ (AREA DATA)
   (PROG (TEM TEM1 TEM2 ARRAYP)
	(DECLARE (FIXNUM TEM TEM1 TEM2))
	(SETQ TEM (PREVENT-CRETINISM (ARRAYCALL T (SETQ ARRAYP (GET AREA 'ARRAY)) 0)))
	(COND ((GET AREA 'IMMEDIATE-WRITE-AREA) (GO IWA))
	      ((GET AREA 'BUFFERED-AREA) (GO BUF)))
	(STORE (ARRAYCALL T ARRAYP TEM) DATA)
	(STORE (ARRAYCALL T ARRAYP 0) (SETQ TEM1 (1+ TEM)))
	(COND ((NOT (< TEM1 (SETQ TEM2
				  (PREVENT-CRETINISM (ARRAYCALL T ARRAYP 1)))))
	       (*REARRAY AREA T (SETQ TEM2 (+ TEM2 1000)))
	       (STORE (ARRAYCALL T (SETQ ARRAYP (GET AREA 'ARRAY)) 1) TEM2)))
X	(RETURN (LIST AREA (- TEM 2)))
IWA	(COND ((= TEM 2))	;AREA EMPTY SO FAR
	      ((MINUSP TEM)	;NO BUFFERED-BACK WORD
	       (SETQ TEM (- 0 TEM)))
	      (T
	       (OUTPUT-Q AREA (ARRAYCALL T ARRAYP 2))))  ;OUTPUT PREVIOUS Q
	(STORE (ARRAYCALL T ARRAYP 2) DATA)
X1	(STORE (ARRAYCALL T ARRAYP 0) (1+ TEM))
	(GO X)
BUF	(SETQ TEM1 (PREVENT-CRETINISM (ARRAYCALL T ARRAYP 1)))
	(COND ((OR (> (SETQ TEM1 (- TEM TEM1))
		      202) 
		   (< TEM1 2))
		(BARF AREA 'BUFFERED-AREA-OVERFLOW 'BARF)))
	(STORE (ARRAYCALL T ARRAYP TEM1) DATA)
	(GO X1)
))

(DEFUN STORE-NXTNIL-CDR-CODE (AREA)
  (PROG (LOCN ARRAYP TEM)
	(DECLARE (FIXNUM LOCN))
	(COND ((= 1 (SETQ LOCN (1- (ARRAYCALL T (SETQ ARRAYP (GET AREA 'ARRAY)) 0))))
		(RETURN NIL))
	      ((GET AREA 'IMMEDIATE-WRITE-AREA) (SETQ LOCN 2))
	      ((GET AREA 'BUFFERED-AREA)
		(SETQ LOCN (- LOCN (ARRAYCALL T ARRAYP 1)))
		(COND ((< LOCN 2) (BARF AREA 'REF-TO-UNBUFFERED-LOCN 'BARF))) ))
	(SETQ TEM (ARRAYCALL T ARRAYP LOCN))
	(COND ((AND TEM (MEMQ (CAR TEM) '(NXTNOT NXTNIL NXTCDR FULL-NODE)))
		(SETQ TEM (CDR TEM))))
	(STORE (ARRAYCALL T ARRAYP LOCN)
	       (CONS 'NXTNIL TEM))))

(DEFUN STORE-STRING (AREA STRING)
   (STORE-CHLIST AREA STRING (EXPLODEN STRING)))

;STRING GETS Q-SXHASH PROP, IF SYMBOL.  MAKE IT BE A RANDOM LIST IF NOT DESIRED
; TO STORE Q-SXHASH PROP.
(DEFUN STORE-CHLIST (AREA STRING CHLIST)
   (AND (MEMQ AREA LIST-STRUCTURED-AREAS)
	(BARF AREA '|STORE-STRING IN LIST-STRUCTURED AREA| 'BARF))
   (PROG (VAL COUNT TEM OUTPUT-H HSH INDEX-LENGTH HEADER-Q LONG-ARRAY-FLAG WHICH-HWD)
	(DECLARE (FIXNUM COUNT OUTPUT-H HSH INDEX-LENGTH))
	(SETQ HSH 0)
	(SETQ HEADER-Q (LIST 'QZARYH 'ARRAY-DIM-MULT 'ART-STRING))
	(SETQ INDEX-LENGTH (Q-CHAR-LENGTH CHLIST))
	(COND ((> INDEX-LENGTH %ARRAY-MAX-SHORT-INDEX-LENGTH)
		(SETQ LONG-ARRAY-FLAG T)))
	(COND ((NULL LONG-ARRAY-FLAG)
		(SETQ VAL (STOREQ AREA (NCONC HEADER-Q (LIST INDEX-LENGTH)))))
	      (T (SETQ VAL (STOREQ AREA (NCONC 
					  HEADER-Q 
					  (LIST ARRAY-LONG-LENGTH-FLAG))))
		 (STOREQ AREA (LIST 'QZFIX INDEX-LENGTH))))
	(BEGIN-STORE-HALFWORDS AREA (// (+ INDEX-LENGTH 3) 4))
	(SETQ COUNT 2)			;CHARACTERS PER HALFWORD
NEXT-CHAR
	(COND ((ZEROP COUNT)
	       (SETQ COUNT 2 WHICH-HWD (NOT WHICH-HWD))
	       (STORE-HALFWORD OUTPUT-H)))
	(COND ((NULL CHLIST)
		(COND ((NOT (= COUNT 2))	;IF ANY Q WAITING TO GET STORED
		       (SETQ WHICH-HWD (NOT WHICH-HWD))
		       (STORE-HALFWORD OUTPUT-H)))
		(AND WHICH-HWD (STORE-HALFWORD 0))  ;FILL TO WORD BOUNDARY
		(END-STORE-HALFWORDS)
		(COND ((NOT (= 0  
			     (BOOLE 1 40000000 HSH)))
			(SETQ HSH (BOOLE 6 40000001 HSH))))
		(COND ((ATOM STRING) (PUTPROP STRING HSH 'Q-SXHASH)))
		(RETURN (LIST 'QZARYP VAL))))
	(SETQ COUNT (1- COUNT))
	(SETQ TEM (Q-CHAR-CHOMP CHLIST))
	(SETQ OUTPUT-H
	      (COND ((ZEROP COUNT) (+ (LSH TEM 8) OUTPUT-H))
		    (T TEM)))
	(SETQ HSH (BOOLE 6 (ROT24 HSH 7) TEM))
	(SETQ CHLIST (Q-CHAR-ADVANCE CHLIST))
	(GO NEXT-CHAR)))

(DEFUN ROT24 (ARG AMT)
   (DECLARE (FIXNUM ARG AMT))
   (PROG NIL
       A (COND ((= 0 AMT)(RETURN ARG))
	       ((PLUSP AMT) (SETQ ARG (ROT ARG 1))
			    (COND ((NOT (= 0 (BOOLE 1 100000000 ARG)))
					(SETQ ARG (BOOLE 6 100000001 ARG))))
			    (SETQ AMT (1- AMT))
			    (GO A))
		(T (SETQ ARG (ROT ARG -1))
		   (COND ((MINUSP ARG)
			   (SETQ ARG (BOOLE 6 400040_22 ARG)))) ;_22 TO NOT MAKE A BIGNUM
		   (SETQ AMT (1+ AMT))
		   (GO A)))))
 
(DEFUN FINISH NIL
  (PROG NIL
	(COLD-WRITE-OUT)
))

(DEFUN WRITE-AREA-SIZES NIL
   (PROG (TEM TEM1 N-INITIAL-AREAS)
	(SETQ N-INITIAL-AREAS MICRO-CODE-EXIT-AREA)	;******* KLUDGE *******
	(SETQ TEM AREA-LIST)		;OUTPUT AREA SIZES
A	(COND ((NULL TEM) (RETURN NIL))
	      ((> (SYMEVAL (CAR TEM)) N-INITIAL-AREAS) (SETQ TEM1 (GET-AREA-SIZE (CAR TEM)))
		   (GO C)))
D	(SETQ TEM (CDR TEM)) ;THE INITIAL AREAS DO NOT GET THEIR SIZES WRITTEN
	(GO A)
C	(COLD-NIBBLE (+ COLD-OP-INIT-AREA (SYMEVAL (CAR TEM))))
	(COLD-NIBBLE TEM1) ;# PAGES
	(GO D)
))

(DEFUN COLD-WRITE-OUT NIL
	(MAPC (FUNCTION OC-OUTPUT-AREA) AREA-LIST)
	(COLD-NIBBLE COLD-OP-EOF))

(DEFUN OC-OUTPUT-AREA (AREA) 
  (COND ((AND (GET AREA 'IMMEDIATE-WRITE-AREA)
	      (> (ARRAYCALL T (GET AREA 'ARRAY) 0) 2))
	   (OUTPUT-Q AREA (ARRAYCALL T (GET AREA 'ARRAY) 2)))	;BUFFERED BACK Q
	((GET AREA 'BUFFERED-AREA) (UNBUFFER-AREA AREA))
	(T (MAP-AREA (FUNCTION OUTPUT-Q) AREA)))
)

(DEFUN UNBUFFER-AREA (AREA) (UNBUFFER-AREA-AND-MAP (FUNCTION OUTPUT-Q) AREA))

(DEFUN UNBUFFER-AREA-AND-MAP (FCTN AREA)
  (PROG (TEM LIMIT DELTA ARRAYP SUBR)
	(DECLARE (FIXNUM TEM LIMIT DELTA))
	(SETQ ARRAYP (GET AREA 'ARRAY))
	(SETQ LIMIT (PREVENT-CRETINISM (ARRAYCALL T ARRAYP 0)))
	(SETQ TEM (+ (SETQ DELTA (PREVENT-CRETINISM (ARRAYCALL T ARRAYP 1))) 2))
	(COND ((AND (NOT NOUUO) (SETQ SUBR (GET FCTN 'SUBR)))
	       (DO () ((NOT (< TEM LIMIT)))
		 (SUBRCALL NIL SUBR AREA (ARRAYCALL T ARRAYP (- TEM DELTA)))
		 (SETQ TEM (1+ TEM))))
	      ((DO () ((NOT (< TEM LIMIT)))
		 (FUNCALL FCTN AREA (ARRAYCALL T ARRAYP (- TEM DELTA)))
		 (SETQ TEM (1+ TEM)))))
	(STORE (ARRAYCALL T ARRAYP 1) (- LIMIT 2))
	(RETURN NIL)))

(DEFUN MAP-AREA (FCTN AREA)
  (PROG (TEM LIMIT ARRAYP SUBR)
	(DECLARE (FIXNUM TEM LIMIT))
	(SETQ TEM 2)
	(SETQ LIMIT (PREVENT-CRETINISM (ARRAYCALL T (SETQ ARRAYP (GET AREA 'ARRAY)) 0)))
	(COND ((AND (NOT NOUUO) (SETQ SUBR (GET FCTN 'SUBR)))
	       (DO () ((NOT (< TEM LIMIT)))
		 (SUBRCALL NIL SUBR AREA (ARRAYCALL T ARRAYP TEM))
		 (SETQ TEM (1+ TEM))))
	      ((DO () ((NOT (< TEM LIMIT)))
		 (FUNCALL FCTN AREA (ARRAYCALL T ARRAYP TEM))
		 (SETQ TEM (1+ TEM)))))))

(DEFUN OUTPUT-Q (AREA LM-Q)
  (DO ((TEM LM-Q (CDR TEM))
       (WD0 (+ COLD-OP-DATA (SYMEVAL AREA))) ;FIRST NIBBLE
       (WD1 0))  ;32-BIT WORD
      ((OR (NULL TEM) (NUMBERP TEM))
       (AND TEM (SETQ WD1 (+ WD1 TEM)))
       (COLD-NIBBLE WD0)
       (COLD-NIBBLE (BOOLE 1 177777 WD1))
       (COLD-NIBBLE (LSH WD1 -16.)))
    (DECLARE (FIXNUM WD0 WD1))
    (COND ((ATOM TEM) (BARF TEM 'OUTPUT-Q 'BARF))
	  ((NUMBERP (CAR TEM)) (SETQ WD1 (+ WD1 (CAR TEM))))
	  ((ATOM (CAR TEM))
	   (OR (BOUNDP (CAR TEM)) (BARF (CAR TEM) "UNBOUND SYMBOL - OUTPUT-Q" 'BARF))
	   (OR (MEMQ (CAR TEM) CDR-CODES)
	       (MEMQ (CAR TEM) DATA-TYPES)
	       (EQ (CAR TEM) '%Q-FLAG-BIT)
	       (MEMQ (CAR TEM) OFFICIALLY-APPROVED-Q-SYMBOLS)
	       (BARF (LIST (CAR TEM)
			   AREA
			   LM-Q)
		     "QUESTIONABLE SYMBOL - OUTPUT-Q; TYPE P TO PROCEED" 'BARF))
	   (SETQ WD1 (+ WD1 (SYMEVAL (CAR TEM)))))
	  (T ;(AREA OFFSET)
	   (OR (BOUNDP (CAAR TEM)) (ERROR "UNBOUND AREA NAME - OUTPUT-Q" 
					  (LIST (CAR TEM) 'IN LM-Q 'AREA-IS AREA)
					  'FAIL-ACT))
	   (SETQ WD0 (+ WD0 (LSH (SYMEVAL (CAAR TEM)) 6))
		 WD1 (+ WD1 (CADAR TEM)))))))

(DEFUN SYM-WRITE-OUT NIL
	(MAPC (FUNCTION SYM-OUTPUT-AREA) AREA-LIST))

(DEFUN SYM-OUTPUT-AREA (AREA)
  (COND ((GET AREA 'IMMEDIATE-WRITE-AREA)
		(PRINT (ARRAYCALL T (GET AREA 'ARRAY) 2)))
	((GET AREA 'BUFFERED-AREA))
	(T (MAP-AREA (FUNCTION (LAMBDA (X Y) (PRINT Y))) AREA)))
  (TERPRI))
	
(DEFUN CONTENTS (ADR)
  (PROG (ARRAYP TEM)
	(DECLARE (FIXNUM TEM))
	(SETQ ARRAYP (GET (CAR ADR) 'ARRAY))
	(COND ((GET (CAR ADR) 'IMMEDIATE-WRITE-AREA)
		(GO IWA))
	      ((GET (CAR ADR) 'BUFFERED-AREA)
		 (GO BUF)))
	(RETURN (ARRAYCALL T ARRAYP (+ 2 (CADR ADR))))
  IWA	(COND ((= (CADR ADR) (- (ARRAYCALL T ARRAYP 0) 3))
		(RETURN (ARRAYCALL T ARRAYP 2)))
	      (T (GO E)))
  BUF	(SETQ TEM (- (CADR ADR) (ARRAYCALL T ARRAYP 1)))
	(COND ((OR (< TEM 0) (> TEM 200)) (GO E)))
	(RETURN (ARRAYCALL T ARRAYP (+ 2 TEM)))
  E 	(BARF ADR 'CONTENTS 'BARF)
))

(DEFUN STORE-CONTENTS (ADR DATA)
  (PROG (ARRAYP TEM)
	(DECLARE (FIXNUM TEM))
	(SETQ ARRAYP (GET (CAR ADR) 'ARRAY))
	(COND ((GET (CAR ADR) 'IMMEDIATE-WRITE-AREA)
		(GO IWA))
	      ((GET (CAR ADR) 'BUFFERED-AREA)
		(GO BUF)))
	(RETURN (STORE (ARRAYCALL T ARRAYP (+ 2 (CADR ADR)))
		       DATA))
  IWA	(COND ((= (CADR ADR) (- (ARRAYCALL T ARRAYP 0) 3))
		(RETURN (STORE (ARRAYCALL T ARRAYP 2) DATA)))
	      (T (GO E)))
  BUF	(SETQ TEM (- (CADR ADR) (ARRAYCALL T ARRAYP 1)))
	(COND ((OR (< TEM 0) (> TEM 200)) (GO E)))
	(RETURN (STORE (ARRAYCALL T ARRAYP (+ 2 TEM))
			DATA))
  E 	(BARF ADR 'STORE-CONTENTS 'BARF)
))

(DEFUN STORE-DATA-CONTENTS (ADR DATA)
  (PROG (TEM ARRAYP)
	(DECLARE (FIXNUM TEM))
	(SETQ ARRAYP (GET (CAR ADR) 'ARRAY))
	(COND ((GET (CAR ADR) 'IMMEDIATE-WRITE-AREA)
		(GO IWA))
	      ((GET (CAR ADR) 'BUFFERED-AREA)
		(GO BUF)))
	(RETURN (STORE (ARRAYCALL T ARRAYP (+ 2 (CADR ADR)))  ;ASSUME FIRST ELEMENT OF CURRENT 
	       	       (CONS (CAR (ARRAYCALL T ARRAYP
				       (+ 2 (CADR ADR))))	;CONTENTS IS CDR CODE
		              DATA)))
  IWA	(COND ((= (CADR ADR) (- (ARRAYCALL T ARRAYP 0) 3))
		(RETURN (STORE (ARRAYCALL T ARRAYP 2)
			       (CONS (CAR (ARRAYCALL T ARRAYP 2))
				     DATA))))
	      (T (GO E)))
  BUF	(SETQ TEM (- (CADR ADR) (ARRAYCALL T ARRAYP 1)))
	(COND ((OR (< TEM 0) (> TEM 200)) (GO E)))
	(RETURN (STORE (ARRAYCALL T ARRAYP (+ 2 TEM))
		       (CONS (CAR (ARRAYCALL T ARRAYP (+ 2 TEM)))
			     DATA)))
  E	 (BARF ADR 'STORE-DATA-CONTENTS 'BARF)
))

;NEW VERSION OF QINTERN.  MACHINE BUILDS OBARRAY WHEN IT FIRST COMES UP (EASY ENOUGH).
(DEFUN QINTERN (ATOM-NAME)
    (COND ((GET ATOM-NAME 'Q-ATOM-HEAD))
	  (T (STORE-SYMBOL-VECTOR ATOM-NAME 'NR-SYM))))

(COMMENT ;OLD VERSION WHICH DOES OBARRAY ITSELF.
(DEFUN QINTERN (ATOM-NAME)
  (PROG (TEM)
    (COND ((SETQ TEM (GET ATOM-NAME 'Q-ATOM-HEAD))(RETURN TEM)))
     (QOBLIST-ENTER (SETQ TEM (STORE-SYMBOL-VECTOR ATOM-NAME 'NR-SYM))
		     ATOM-NAME)
	(RETURN TEM)))

(DEFUN QOBLIST-ENTER (Q-ATOM-POINTER ATOM-NAME)
  (PROG (TEM OB-TBL-INDEX TEM1 TEM2)
	(SETQ TEM (GET ATOM-NAME 'Q-SXHASH))
	(SETQ OB-TBL-INDEX (LIST 'CONTROL-TABLES (1+(\ TEM SIZE-OF-OB-TBL))))
	(SETQ TEM1 (CONTENTS OB-TBL-INDEX))
	(FIND-COMPONENTS TEM1)
	(COND ((EQUAL LOCN-POINTER '(RESIDENT-SYMBOL-AREA 0))
		(SETQ TEM2 (STOREQ  'OBT-TAILS (CONS 'NXTNIL Q-ATOM-POINTER))))
		(T (SETQ TEM2 (STOREQ 'OBT-TAILS (CONS 'FULL-NODE Q-ATOM-POINTER)))
		    (STOREQ 'OBT-TAILS (CONS 'NXTNOT (CDR TEM1)))))
	(STORE-CONTENTS OB-TBL-INDEX (LIST CDR-CODE 'QZLIST TEM2))
	(RETURN NIL)))

(DEFUN INIT-OB-TBL NIL
  (PROG (TEM)
	(SETQ TEM SIZE-OF-OB-TBL)
	(STOREQ 'CONTROL-TABLES (LIST 'QZARYH 'ARRAY-DIM-MULT 
						 'ART-Q-LIST SIZE-OF-OB-TBL))
L	(STOREQ 'CONTROL-TABLES (CONS 'NXTCDR QNIL))
	(COND ((= 0 (SETQ TEM (1- TEM)))
			(STORE-NXTNIL-CDR-CODE 'CONTROL-TABLES) (RETURN NIL)))
	(GO L)))
);END COMMENT

(DEFUN FIND-COMPONENTS (LM-Q)
  (PROG ()
        (SETQ DATA-TYPE NIL)
	(SETQ CDR-CODE NIL)
	(SETQ LOCN-POINTER NIL)
	(SETQ NUMERIC-DATA NIL)
	(SETQ ADDITIVE-CONSTANTS NIL)
A	(COND ((NULL LM-Q)(RETURN NIL))
		((MEMQ (CAR LM-Q) DATA-TYPES)
			(SETQ DATA-TYPE (CAR LM-Q)))
		((MEMQ (CAR LM-Q) CDR-CODES)
			(SETQ CDR-CODE (CAR LM-Q)))
		((NUMBERP (CAR LM-Q))
			(SETQ NUMERIC-DATA (CAR LM-Q)))
		((NOT (ATOM (CAR LM-Q)))
			(SETQ LOCN-POINTER (CAR LM-Q)))
		(T (SETQ ADDITIVE-CONSTANTS (CONS (CAR LM-Q)
						   ADDITIVE-CONSTANTS))))
	(SETQ LM-Q (CDR LM-Q))
	(GO A)))

(DEFUN GET-CDR-POINTER NIL	;USES CDR-CODE AND LOCN-POINTER
   (PROG NIL
	(COND ((EQ CDR-CODE 'NXTNIL) (RETURN QNIL))
		((EQ CDR-CODE 'NXTCDR) (RETURN (LIST (CAR LOCN-POINTER) 
					            (1+ (CADR LOCN-POINTER)))))
		((OR (NULL CDR-CODE)
		     (EQ CDR-CODE 'FULL-NODE))
		 (RETURN (CONTENTS (LIST (CAR LOCN-POINTER)
				         (1+ (CADR LOCN-POINTER))))))
		(T (Q-ERR 'LOSE-GET-CDR-POINTER)))))

(DEFUN QSXHSYM (SYM-NAME)		;CALL THIS WITH POINTER TO MACLISP ATOM
	(COND ((GET SYM-NAME 'Q-SXHASH))
		(T (Q-ERR 'LOSE-QSXHSYM))))

(DEFUN SCRATCH-STORE-Q (SYMBOLIC-NAME DATA)
   (PROG (TEM ADR)
	(COND ((SETQ TEM (FIND-POSITION-IN-LIST SYMBOLIC-NAME SCRATCH-PAD-POINTERS))
		(GO STORE-POINTER))
	      ((SETQ TEM (FIND-POSITION-IN-LIST SYMBOLIC-NAME SCRATCH-PAD-PARAMETERS))
		(GO STORE-PARAMETER))
	      (T (BARF SYMBOLIC-NAME 'UNKNOWN-SCRATCH-QUANTITY 'BARF)))
STORE-POINTER  (SETQ ADR (LIST 'SCRATCH-PAD-INIT-AREA TEM))
X1	       (STORE-DATA-CONTENTS ADR DATA)	
	       (RETURN NIL)
STORE-PARAMETER (SETQ ADR (LIST 'SCRATCH-PAD-INIT-AREA
			        (+ SCRATCH-PAD-PARAMETER-OFFSET TEM)))
		(GO X1)))

(DEFUN GET-AREA-SIZE (AREA)
	(COND ((GET AREA 'AREA-SIZE)) (T 1)))

(DEFUN INIT-AREA-CONTENTS (AREA CONTENTS)
	(PROG (COUNT)
		(SETQ COUNT (* PAGE-SIZE (GET-AREA-SIZE AREA)))
		(SETQ CONTENTS (CONS 'NXTCDR CONTENTS))
LP		(STOREQ AREA CONTENTS)
		(COND ((= 0 (SETQ COUNT (1- COUNT))) (STORE-NXTNIL-CDR-CODE AREA)
							(RETURN NIL)))
		(GO LP)))

(COMMENT ;NO LONGER USED
(DEFUN INIT-READ-TBL NIL
  (PROG (READTABLE-DATA-SIZE TEM TEM1 CH) 
	(SETQ READTABLE-DATA-SIZE
	  (INIT-Q-ARRAY 'CONTROL-TABLES 'READTABLE 1 'ART-Q '(SIZE-OF-READ-TBL 3) 
		NIL 
		(NREVERSE (MAKE-READ-TBL-LEADER)))) 
	(COND ((NOT (= (LENGTH (SETQ TEM1 INITIAL-READ-TABLE)) SIZE-OF-READ-TBL))
		(BARF 'INITIAL-READ-TABLE-WRONG 'INIT-READ-TBL 'BARF)))
L1	(COND ((NULL TEM1) (GO X1)))
	(STOREQ 'CONTROL-TABLES (LIST 'NXTCDR 'QZFIX (LIST-SUM (CAAR TEM1))))
	(SETQ TEM1 (CDR TEM1))
	(GO L1)
X1	(STORE-NXTNIL-CDR-CODE 'CONTROL-TABLES)
	(SETQ TEM1 INITIAL-READ-TABLE)
L2	(COND ((NULL TEM1) (GO X2)))
	(STOREQ 'CONTROL-TABLES (CONS 'NXTCDR 
		(CONVERT-RTS-OPS (COND ((NULL (CDAR TEM1)) NIL) (T (CADAR TEM1))))))
	(SETQ TEM1 (CDR TEM1))
	(GO L2)
X2	(STORE-NXTNIL-CDR-CODE 'CONTROL-TABLES)
	(SETQ TEM1 INITIAL-READ-TABLE)
	(SETQ CH 0)
L3	(COND ((NULL TEM1) (GO X3)))
	(SETQ TEM (COND ((AND (CDAR TEM1) 
			      (CDDAR TEM1)
			      (ATOMEVAL (CADDAR TEM1)))) (T CH)))
	(STOREQ 'CONTROL-TABLES (CONS 'NXTCDR (MAKE-Q-LIST 'INIT-LIST-AREA TEM)))
	(SETQ CH (1+ CH))
	(SETQ TEM1 (CDR TEM1))
	(GO L3)
X3	(STORE-NXTNIL-CDR-CODE 'CONTROL-TABLES)
))

(DEFUN MAKE-READ-TBL-LEADER () 
  (MAPCAR (FUNCTION (LAMBDA (X) (MAKE-Q-LIST 'INIT-LIST-AREA X)))
	  (LIST 'READ-MACRO			;%RDTBL-LEADER-MACRO-INDICATOR
		'/.				;%RDTBL-LEADER-DOTTED-PAIR-DOT
			;; DO NOT CHANGE THESE WITHOUT CHANGING THE PRINTER:
			;  NOTE THESE STRINGS ARE QUOTED SO THEY WILL STAY STRINGS
		'"("				;%RDTBL-LEADER-OPEN-STRING
		'")"				;%RDTBL-LEADER-CLOSE-STRING
		'"//"				;%RDTBL-LEADER-SLASH-STRING
		'" . "				;%RDTBL-LEADER-DOTTED-PAIR-STRING
		'" "				;%RDTBL-LEADER-SPACE-STRING
		'"."				;%RDTBL-LEADER-DECIMAL-POINT-STRING
		'"-"				;%RDTBL-LEADER-MINUS-SIGN-STRING
		'"/""				;%RDTBL-LEADER-OPEN-QUOTE-STRING
		'"/""				;%RDTBL-LEADER-CLOSE-QUOTE-STRING
		'"#<"				;%RDTBL-LEADER-OPEN-RANDOM-STRING
		'">"				;%RDTBL-LEADER-CLOSE-RANDOM-STRING
		'"**"				;%RDTBL-LEADER-PRINLEVEL-STRING     ;(
		'"...)"				;%RDTBL-LEADER-PRINLENGTH-STRING
		'"215"				;%RDTBL-LEADER-NEWLINE-STRING
)))

(DEFUN CONVERT-RTS-OPS (X)
  (PROG (OP-LIST VAL)
    L	(COND ((NULL X) (GO X1))
	      ((NULL (CDR X)) (BARF X 'RTS-OP-LENGTH-ODD 'BARF)))
	(SETQ OP-LIST 
	   (CONS (+ (LSH (CONVERT-RTS-EVAL (CAR X)) RTS-TEST-SHIFT)
		    (LSH (CONVERT-RTS-EVAL (CADR X)) RTS-SET-SHIFT))
		 OP-LIST))
	(SETQ X (CDDR X))
	(GO L)
    X1	(SETQ VAL (COND ((NULL OP-LIST)  NIL)
	      		((NULL (CDR OP-LIST)) (CAR OP-LIST))
	      		(T (NREVERSE  OP-LIST))))
	(RETURN (MAKE-Q-LIST 'INIT-LIST-AREA VAL))
))

(DEFUN CONVERT-RTS-EVAL (X)
   (PROG (VAL TEM)
	(SETQ VAL 0)
L	(COND ((NULL X) (RETURN VAL))
	      ((SETQ TEM (FIND-POSITION-IN-LIST (CAR X) RTB-RTS-BITS))
		(SETQ VAL (+ VAL TEM)))
	      (T (SETQ VAL (+ VAL (ATOMEVAL (CAR X))))))
	(SETQ X (CDR X))
	(GO L)))
);END COMMENT

(DECLARE (SPECIAL MICRO-CODE-ENTRY-VECTOR))

(DEFUN ULAP-GET-ARGDESC-ATOM (FCTN-NAME)
	(GET-Q-ARGS-PROP FCTN-NAME 
			(COND ((GET FCTN-NAME 'Q-HEAD-POINTER))
			      (T FCTN-NAME))))

;This creates an indirect through the MICRO-CODE-SYMBOL-AREA by using
;DTP-FIX and 200 less than the misc function index.  This makes
;the core image independent of the microcode version.
(DEFUN MISC-STORE-MICRO-ENTRY (NAME ME-NAME)
  (PROG (MISC-INDEX U-ENTRY-PROP U-ENTRY-INDEX)
	(COND ((NULL (SETQ MISC-INDEX (GET ME-NAME 'QLVAL)))
	       (BARF ME-NAME 'MISC-STORE-MICRO-ENTRY 'BARF)))
	(SETQ U-ENTRY-PROP
	      (LIST 'QZFIX (- MISC-INDEX 200)))   ;WAS QZUENT
	(SETQ U-ENTRY-INDEX (GET-U-ENTRY-INDEX NAME))
	(STOREPROP NAME 2 (LIST 'QZUENT U-ENTRY-INDEX))  ;STORE IN FUNCTION CELL
	(STORE-DATA-CONTENTS (LIST 'MICRO-CODE-ENTRY-AREA U-ENTRY-INDEX) U-ENTRY-PROP)
	(STORE-DATA-CONTENTS (LIST 'MICRO-CODE-ENTRY-ARGS-INFO-AREA U-ENTRY-INDEX) 
		(MAKE-Q-LIST 'INIT-LIST (ULAP-GET-ARGDESC-ATOM NAME)))
 ))

(DEFUN GET-U-ENTRY-INDEX (FCTN)
  (PROG (TEM)
	(COND ((SETQ TEM (FIND-POSITION-IN-LIST FCTN MICRO-CODE-ENTRY-VECTOR))
		(RETURN TEM)))
	(SETQ TEM (- (ARRAYCALL T (GET 'MICRO-CODE-ENTRY-AREA 'ARRAY) 0) 2))
	(STOREQ 'MICRO-CODE-ENTRY-AREA (LIST 'NXTCDR))  ;WILL BE CHANGED
	(STOREQ 'MICRO-CODE-ENTRY-NAME-AREA 
			     (CONS 'NXTCDR (QINTERN FCTN)))
	(STOREQ 'MICRO-CODE-ENTRY-ARGS-INFO-AREA (LIST 'NXTCDR))  ;WILL BE CHANGED
	(STOREQ 'MICRO-CODE-ENTRY-ARGLIST-AREA (CONS 'NXTCDR QNIL))
	(SETQ MICRO-CODE-ENTRY-VECTOR (NCONC MICRO-CODE-ENTRY-VECTOR 
					(LIST FCTN)))
	(RETURN TEM)))

