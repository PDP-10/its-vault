.TITLE "Lisp Machine Disk Control Microcode"
;	NEW VERSION

;Field definition
; NAME/=J,K,L,M
;	J is default value if M is "D"
;	K is the field width in bits
;	L is 23 minus rightmost bit#, due to backwards pdp10 bit numbering
;	M is type, D for defaultable.
; followed by value definitions, name=value.

;In this file all locations are explicitly assigned to avoid
;the assembler automatically assigning a non-sequential location.

;The microcode is a 512x24 PROM.  It is divided into 8 sectors
;of 64 words each.  Each sector applies to a different command:
;	0	Read
;	1	Write
;	2	Read All
;	3	Write All
;	4	Seek
;	5	Miscellaneous, e.g. Recalibrate
;	6	Offset
;	7	not used
;Commands 4-7 do not use the memory channel.

;When the machine is stopped, the micro instruction and the micro
;PC are both zero.  All fields default to zero for this reason.

;Microcode field definitions:

CYLINDER TAG/=0,1,0,D		;1 => cylinder to DBUS

HEAD TAG/=0,1,1,D		;1 => head to DBUS, also offset-mode bit
		;Neither CYLINDER TAG nor HEAD TAG implies CONTROL TAG
TAG ENABLE/=0,1,2,D		;1 => Actually send tag to disk, 0 => just
				; control DBUS selector.  DBUS must be stable
				; while tag is sent to disk.

READ GATE/=0,1,3,D		;Turn on read-amplifiers in disk

WRITE GATE/=0,1,4,D		;Turn on write-amplifiers in disk

PRE GATE/=0,1,5,D		;Enable disk head-select.  Must be 20 usec
				; before read and 5 usec before write.

HEADER STROBE/=0,1,6,D		;Set HEADER COMPARE ERROR if byte in RSH does
				; not agree with disk address register selected
				; by micro-PC <1:0>

DATA FIELD/=0,1,7,D		;1 => We are currently in the data portion of
				; a disk block.  If reading, the byte in RSH
				; is transferred to the fifo.  Enables read
				; compare and internal parity logic to look at
				; the bits going to and from the disk.

GET DATA/=0,1,8,D		;1 => Transfer a byte from fifo to WSH
				;     for write and/or read-compare.

ERR IF START BLOCK/=0,1,9,D	;1 => Error if start block seen, indicating
				; that we have exceeded a physical sector
				; boundary.

;WS/=0,2,11,D	;Shared field controlling write source and ECC
WRITE/=0,2,11,D			;Source of write data sent to disk
 ZERO=0		;A byte whose last bit is zero, the rest ones
 ONE=1		;All one
 SH=2		;Data shifted out from WSH
 ECC=3		;Data shifted out from ECC register

ECC/=0,2,11,D			;Controls error check and correct logic
 FEEDBACK=0	;Input is zero, enable feedback
 READ DATA=1	;Input is disk input data (RSH7), enable feedback
 WRITE DATA=2	;Input is disk output data, enable feedback
 NO FEEDBACK=3	;Bring in zero without feedback.  Use when writing check word

DONE TEST/=0,1,12,D		;1 => DONE if memory side is done, i.e.
		; -MBUSY or (LAST.CCW and CMD.TO.MEMORY and READ [-READ ALL])
CLK/=0,2,14,D			;Clock source (CS)
 2 USEC=0	;2 microsecond delay from previous clock
 START BLOCK=1	;From disk sector pulse (this is actually the 2 usec
		; clock, anded with synchronized sector pulse)
 BIT=2		;Disk bit clock (CLK.SR)
 BYTE=3		;Bit clock divided by 8 (CLK.WD)

UNUSED/=0,1,15,D

JUMP/=0,2,17,D			;Select instruction to be executed after the
				; following instruction.  BS in the hardware.
				; THIS IS A JUMP-XCT-NEXT OPERATION!
 ;NEXT=0	;.+1
 START=1	;to location zero of current sector
 ECC=2		;to location 070, ecc-decoding routine if an
		; ECC error is present in the ECC shift register
				;Note that the bit clock is faster than the
				; PROM access time, so it is necessary to
				; loop at least once when using CLK/BIT.

LOOP/=0,3,20,D			;Conditionally re-execute the same 
				; microinstruction.  LS in hardware.
 ;NEVER=0			;Don't loop
 ALWAYS=1			;Always (until stopped by DONE or error)
 POSC EQ BLOCKSIZE MINUS ONE BYTE=2	;Until almost through a block
 ON CYLINDER=3			;Until disk is on-cylinder
 BLOCK CTR EQ BLOCK=4		;Until disk is at correct rotational position
 PREAMBLE DETECT=5		;Until RSH contains a start byte
				; which is 177 octal (see WRITE/ZERO)
 POSC EQ ECC FIELD SIZE=6	;Until modulus of error correcting code
 END OF BYTE=7			;Until bit counter ends in 7

FUNC/=0,3,23,D			;Miscellaneous functions
 ;0 no function
 TEST ECC HDR=1		;If ecc non-zero set HEADER ECC ERROR
 SET ECC HARD=2		;Set ECC HARD error, which stops machine
 TEST ECC=3		;If ecc zero, set ECC SOFT error, which stops machine
 CLR ECC+POS=4		;Clear the ECC and POSC registers
 CLR RSH=5		;Clear the read shift register
 INCREMENT ADDRESS=6	;Increment disk address
 ;7 unused

;Macros!!

CYLINDER TAG		"CYLINDER TAG/1"
HEAD TAG		"HEAD TAG/1"
TAG ENABLE		"TAG ENABLE/1"
READ GATE		"READ GATE/1,PRE GATE/1,TAG ENABLE/1"
WRITE GATE		"WRITE GATE/1,PRE GATE/1,TAG ENABLE/1"
PRE GATE		"PRE GATE/1,TAG ENABLE/1"
HEADER STROBE		"HEADER STROBE/1"
DATA FIELD		"DATA FIELD/1"
GET DATA		"GET DATA/1"
ERR IF START BLOCK	"ERR IF START BLOCK/1"
DONE TEST		"DONE TEST/1"
HOLD READ		"READ GATE/1,PRE GATE/1,TAG ENABLE/0"
HOLD WRITE		"WRITE GATE/1,PRE GATE/1,TAG ENABLE/0"
HOLD PRE		"PRE GATE/1,TAG ENABLE/0"

;Miscellaneous operation.  This simply does a control tag; various bits
; in the command register will get sent out on the disk bus to cause
; the desired operation to take place.  This does not start by awaiting
; seek completion the way the other commands do, because we might be
; doing a recalibrate to reset a seek incomplete.  Doing this with neither
; Recalibrate nor Fault Clear lit up simply resets Attention on the selected unit,
; since we generate some Read Gate.  The Read Gate can't hurt too badly since
; this is a non-data-transfer command and does not stop on disk fault.

500:	HOLD PRE,CLK/2 USEC		;Follow normal protocol for starting a read
501:	PRE GATE,CLK/2 USEC		;i.e. settle bus then give 20 usec of pre gate
502:	PRE GATE,CLK/2 USEC		;Recalibrate or Fault Clear happens here
503:	PRE GATE,CLK/2 USEC
504:	PRE GATE,CLK/2 USEC
505:	PRE GATE,CLK/2 USEC
506:	PRE GATE,CLK/2 USEC
507:	PRE GATE,CLK/2 USEC
510:	PRE GATE,CLK/2 USEC
511:	PRE GATE,CLK/2 USEC
512:	PRE GATE,CLK/2 USEC
513:	READ GATE,CLK/2 USEC		;Reset Attention flip flop in drive
514:	HOLD READ,CLK/2 USEC		;Hold DBUS, stop read
515:	TAG ENABLE,CLK/2 USEC		;Give Recalibrate and Fault clear again just in case
516:	CLK/2 USEC,DONE TEST		;Hold DBUS, stop.


;Set or Clear Offset operation.  This simply does a head tag.

600:	HEAD TAG,CLK/2 USEC,			;Head to DBUS, await completion
		LOOP/ON CYLINDER		; of any previous seek
601:	HEAD TAG,TAG ENABLE,CLK/2 USEC		;Head tag to disk
602:	HEAD TAG,DONE TEST,CLK/2 USEC		;Hold DBUS, stop


;Initiate Seek.

400:	CYLINDER TAG,CLK/2 USEC,		;Cylinder to DBUS, settling
		LOOP/ON CYLINDER		; delay, await prev seek compl 
401:	CYLINDER TAG,TAG ENABLE,CLK/2 USEC	;Cylinder tag
402:	CYLINDER TAG,DONE TEST,CLK/2 USEC	;Hold DBUS, stop

;Read command.  First step is to do any necessary seek.  Then select
;the head, and wait for a possible offset operation to complete.
;Wait until the disk rotates to the start of the desired block, then
;read and check the header.  Then read and check the data.  Test for
;ECC error.  Loop back to the beginning if the channel command list is 
;not exhausted.  Reading (header or data) involves delaying for head
;select and PLO synchronization, then waiting for the start byte to
;appear, then transferring the data bytes, then transferring the ECC bytes.
;We must be careful about tag timing.  Before asserting a tag, the
;disk bus must be stable.  When using CONTROL TAG, the PRE GATE line
;must be asserted before CONTROL TAG.  When de-asserting CONTROL TAG
;the "gate" lines on the disk bus must be held for a minimum of 400 nanosec.

000:	CYLINDER TAG,CLK/2 USEC,		;Cylinder to DBUS, await
		LOOP/ON CYLINDER		; completion of previous seek
001:	CYLINDER TAG,TAG ENABLE,CLK/2 USEC	;Start seek
002:	CYLINDER TAG,CLK/2 USEC			;Hold DBUS, sync -ON CYLINDER
003:	CLK/2 USEC,LOOP/ON CYLINDER	;Await completion of seek
004:	HEAD TAG,CLK/2 USEC		;Head,offset to DBUS
005:	HEAD TAG,TAG ENABLE,CLK/2 USEC	;Select head
006:	HEAD TAG,CLK/2 USEC		;Hold DBUS, sync -ON CYLINDER
007:	CLK/2 USEC,LOOP/ON CYLINDER	;Await mini-seek completion
010:	CLK/START BLOCK,HOLD PRE,	;Initialize DBUS, 
		LOOP/BLOCK CTR EQ BLOCK	;find start of right block
011:	PRE GATE,CLK/2 USEC		;Start head select, delay 20 usec
012:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
013:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
014:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
015:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
016:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
017:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
020:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
021:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
022:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK,
		FUNC/CLR RSH		;Clear SH so preamble can get detected
023:	READ GATE,FUNC/CLR ECC+POS,ERR IF START BLOCK,
		CLK/BIT,LOOP/PREAMBLE DETECT	;Search for start byte
;Low order 2 bits of this location must be 00, used by header compare logic.
024:	READ GATE,HEADER STROBE,ECC/READ DATA,	;Compare first header byte
		CLK/BYTE,ERR IF START BLOCK
025:	READ GATE,HEADER STROBE,ECC/READ DATA,	;Compare second header byte
		CLK/BYTE,ERR IF START BLOCK
026:	READ GATE,HEADER STROBE,ECC/READ DATA,	;Compare third header byte
		CLK/BYTE,ERR IF START BLOCK
027:	READ GATE,HEADER STROBE,ECC/READ DATA,	;Compare fourth header byte
		CLK/BYTE,ERR IF START BLOCK
030:	READ GATE,ECC/READ DATA,CLK/BYTE,ERR IF START BLOCK	;Read checkword
031:	READ GATE,ECC/READ DATA,CLK/BYTE,ERR IF START BLOCK
032:	READ GATE,ECC/READ DATA,CLK/BYTE,ERR IF START BLOCK
033:	READ GATE,ECC/READ DATA,CLK/BYTE,	;Set header ECC error if so
		FUNC/TEST ECC HDR,ERR IF START BLOCK
;drops through
;drops in
034:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK	;Read gate off, 6-8 usec delay
035:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK,	; to resynchronize PLO
		FUNC/CLR RSH		;Also, clear SH for preamble detect
036:	READ GATE,FUNC/CLR ECC+POS,CLK/BIT,	;Find data preamble
		LOOP/PREAMBLE DETECT,ERR IF START BLOCK
037:	READ GATE,FUNC/CLR ECC+POS,CLK/BYTE,	;Read 1 padding byte, and
		GET DATA,ERR IF START BLOCK	; get 1st byte for read-compare
040:	READ GATE,DATA FIELD,ECC/READ DATA,	;Transfer the data byte
		CLK/BYTE,ERR IF START BLOCK,GET DATA,  ;get data is for read compare
		LOOP/POSC EQ BLOCKSIZE MINUS ONE BYTE
041:	READ GATE,DATA FIELD,ECC/READ DATA,	;Transfer the last byte
		CLK/BYTE,ERR IF START BLOCK
042:	READ GATE,ECC/READ DATA,CLK/BYTE,	;Read the checkword
		ERR IF START BLOCK
043:	READ GATE,ECC/READ DATA,CLK/BYTE,ERR IF START BLOCK
044:	READ GATE,ECC/READ DATA,CLK/BYTE,ERR IF START BLOCK
045:	READ GATE,ECC/READ DATA,CLK/BYTE,ERR IF START BLOCK,
		JUMP/ECC		;To ECC routine if doesn't check
046:	READ GATE,ECC/FEEDBACK,CLK/BYTE	;Jump delay
047:	HOLD READ,DONE TEST,JUMP/START,	;Control-tag off
		CLK/2 USEC		;Stop, or loop if more to do
050:	FUNC/INCREMENT ADDRESS,CLK/2 USEC	;Jump delay, incr disk addr

;Error-correction.  Run the ECC register the right number of times
;to make the cyclic code repeat, then run it through the data field again,
;looking for zero.  If found, we have the error bits, if not found
;too many bits were in error, set ECC hard.  We leave READ GATE set
;so as to get a clock from the disk.

070:	READ GATE,CLK/BIT,ECC/FEEDBACK,	;Run ECC until code cycles
		LOOP/POSC EQ ECC FIELD SIZE	;Takes about 3 milliseconds
071:	READ GATE,CLK/BIT,ECC/FEEDBACK,	;Scan for error burst
		FUNC/TEST ECC,LOOP/POSC EQ BLOCKSIZE MINUS ONE BYTE
072:	READ GATE,CLK/BIT,ECC/FEEDBACK,	;Scan second to last byte (except 1st bit)
		FUNC/TEST ECC,LOOP/END OF BYTE
073:	READ GATE,CLK/BIT,ECC/FEEDBACK,	;Scan last byte
		FUNC/TEST ECC,LOOP/END OF BYTE
074:	HOLD READ,FUNC/SET ECC HARD,CLK/2 USEC	;Give up

;Write command.  First step is to do any necessary seek.  Then select
;the head, and wait for a possible offset operation to complete.
;Wait until the disk rotates to the start of the desired block, then
;read and check the header.  Now write the data preamble, the data,
;and the ECC word.  Loop back to the beginning if the channel command list is 
;not exhausted.

100:	CYLINDER TAG,CLK/2 USEC,		;Cylinder to DBUS, await
		LOOP/ON CYLINDER		; completion of previous seek
101:	CYLINDER TAG,TAG ENABLE,CLK/2 USEC	;Start seek
102:	CYLINDER TAG,CLK/2 USEC			;Hold DBUS, sync -ON CYLINDER
103:	CLK/2 USEC,LOOP/ON CYLINDER		;Await seek completion
104:	HEAD TAG,CLK/2 USEC			;Head,offset to DBUS
105:	HEAD TAG,TAG ENABLE,CLK/2 USEC		;Select head
106:	HEAD TAG,CLK/2 USEC			;Hold DBUS, sync -ON CYLINDER
107:	CLK/2 USEC,LOOP/ON CYLINDER		;Await mini-seek completion
110:	CLK/START BLOCK,HOLD PRE,		;Initialize DBUS,
		LOOP/BLOCK CTR EQ BLOCK		;Find start of right block
111:	PRE GATE,CLK/2 USEC		;Start head select, delay 20 usec
112:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
113:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
114:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
115:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
116:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
117:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
120:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
121:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
122:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK,
		FUNC/CLR RSH		;Clear SH so preamble can get detected
123:	READ GATE,FUNC/CLR ECC+POS,ERR IF START BLOCK,
		CLK/BIT,LOOP/PREAMBLE DETECT	;Search for start byte
;Low order 2 bits of this location must be 00, used by header compare logic.
124:	READ GATE,HEADER STROBE,ECC/READ DATA,	;Compare first header byte
		CLK/BYTE,ERR IF START BLOCK
125:	READ GATE,HEADER STROBE,ECC/READ DATA,	;Compare second header byte
		CLK/BYTE,ERR IF START BLOCK
126:	READ GATE,HEADER STROBE,ECC/READ DATA,	;Compare third header byte
		CLK/BYTE,ERR IF START BLOCK
127:	READ GATE,HEADER STROBE,ECC/READ DATA,	;Compare fourth header byte
		CLK/BYTE,ERR IF START BLOCK
130:	READ GATE,ECC/READ DATA,CLK/BYTE,ERR IF START BLOCK	;Read checkword
131:	READ GATE,ECC/READ DATA,CLK/BYTE,ERR IF START BLOCK
132:	READ GATE,ECC/READ DATA,CLK/BYTE,ERR IF START BLOCK
133:	READ GATE,ECC/READ DATA,CLK/BYTE,	;Set header ECC error if so
		FUNC/TEST ECC HDR,ERR IF START BLOCK
134:	PRE GATE,CLK/BYTE,ERR IF START BLOCK	;Switch from Read to Write
135:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK	;Write 159 1's
136:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
137:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
140:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
141:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
142:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
143:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
144:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
145:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
146:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
147:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
150:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
151:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
152:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
153:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
154:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
155:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
156:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
157:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
;drops through
;drops in
160:	WRITE GATE,WRITE/ZERO,CLK/BYTE,ERR IF START BLOCK	;and one zero
161:	WRITE GATE,WRITE/ONE,CLK/BYTE,GET DATA,	;Padding byte, get 1st data
		FUNC/CLR ECC+POS,ERR IF START BLOCK
162:	WRITE GATE,WRITE/SH,CLK/BYTE,		;Write out the data bytes
		ECC/WRITE DATA,ERR IF START BLOCK,DATA FIELD,
		GET DATA,LOOP/POSC EQ BLOCKSIZE MINUS ONE BYTE
163:	WRITE GATE,WRITE/SH,CLK/BYTE,		;Write last data byte
		ECC/WRITE DATA,ERR IF START BLOCK,DATA FIELD
164:	WRITE GATE,WRITE/ECC,CLK/BYTE,		;Write the checkword
		ECC/NO FEEDBACK,ERR IF START BLOCK
165:	WRITE GATE,WRITE/ECC,CLK/BYTE,ECC/NO FEEDBACK,ERR IF START BLOCK
166:	WRITE GATE,WRITE/ECC,CLK/BYTE,ECC/NO FEEDBACK,ERR IF START BLOCK
167:	WRITE GATE,WRITE/ECC,CLK/BYTE,ECC/NO FEEDBACK,ERR IF START BLOCK
;Write guard bytes so write doesn't turn off in the middle of ECC
170:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
171:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
172:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
173:	WRITE GATE,WRITE/ONE,CLK/BYTE,ERR IF START BLOCK
174:	HOLD WRITE,DONE TEST,JUMP/START,CLK/2 USEC	;Stop, or loop
175:	FUNC/INCREMENT ADDRESS,CLK/2 USEC	;Jump delay, incr disk addr

;Read All operation.  Positions disk to desired cylinder, head,
; and rotational position, then simply starts reading.  Keeps on
; reading until memory channel is done, actually a little bit
; farther due to fifo, then stops; the extra garbage left in the
; fifo is discarded.
;Note that internal parity checking does not work in the Read All
; and Write All operations, because of this extra garbage in the fifo.

200:	CYLINDER TAG,CLK/2 USEC,		;Cylinder to DBUS, await
		LOOP/ON CYLINDER		; completion of previous seek
201:	CYLINDER TAG,TAG ENABLE,CLK/2 USEC	;Start seek
202:	CYLINDER TAG,CLK/2 USEC			;Hold DBUS, sync -ON CYLINDER
203:	CLK/2 USEC,LOOP/ON CYLINDER		;Await seek completion
204:	HEAD TAG,CLK/2 USEC			;Head,offset to DBUS
205:	HEAD TAG,TAG ENABLE,CLK/2 USEC		;Select head
206:	HEAD TAG,CLK/2 USEC			;Hold DBUS, sync -ON CYLINDER
207:	CLK/2 USEC,LOOP/ON CYLINDER		;Await mini-seek completion
210:	CLK/START BLOCK,HOLD PRE,		;Initialize DBUS,
		LOOP/BLOCK CTR EQ BLOCK		;Find start of right block
211:	PRE GATE,CLK/2 USEC		;Start head select, delay 20 usec
212:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
213:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
214:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
215:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
216:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
217:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
220:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
221:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK
222:	PRE GATE,CLK/2 USEC,ERR IF START BLOCK,
		FUNC/CLR ECC+POS	;Clear pos to sync byte counter
223:	READ GATE,DATA FIELD,CLK/BYTE,	;Transfer data to memory, until
		LOOP/ALWAYS,DONE TEST	; it is done

;Write all operation.  Positions to cylinder, head, and rotational
; position then simply firehoses bytes out until the memory channel
; is done.  Note that the last 0 to 64 bytes will not get written
; on the disk, depending on how full the fifo is when the channel
; terminates.  Also, the channel always transfers a multiple of
; a page (1024 bytes).  This means you don't have too much control
; over exactly how much gets written, but, when formatting, the
; only part of the last block in a track that really has to get written
; is the header, so you can stop any place in the data field.  This
; means this block will get formatted with a bad ECC, but, who cares,
; the data in it is not valid anyway.
;Since this doesn't do a read, if it does an implicit seek it will leave
; attention set.  That seems like it won't be too bad.

300:	CYLINDER TAG,CLK/2 USEC,		;Cylinder to DBUS, await
		LOOP/ON CYLINDER		; completion of previous seek
301:	CYLINDER TAG,TAG ENABLE,CLK/2 USEC	;Start seek
302:	CYLINDER TAG,CLK/2 USEC			;Hold DBUS, sync -ON CYLINDER
303:	CLK/2 USEC,LOOP/ON CYLINDER		;Await seek completion
304:	HEAD TAG,CLK/2 USEC			;Head,offset to DBUS
305:	HEAD TAG,TAG ENABLE,CLK/2 USEC		;Select head
306:	HEAD TAG,CLK/2 USEC			;Hold DBUS, sync -ON CYLINDER
307:	HOLD PRE,CLK/2 USEC,LOOP/ON CYLINDER	;Await mini-seek completion
310:	PRE GATE,CLK/2 USEC			;Start head select, delay 6 usec
311:	PRE GATE,CLK/2 USEC			;also clears attention
312:	PRE GATE,CLK/2 USEC
313:	PRE GATE,CLK/START BLOCK,	;Find the index pulse
		LOOP/BLOCK CTR EQ BLOCK,
		FUNC/CLR ECC+POS	;Clear POSC to sync byte counter
314:	WRITE GATE,WRITE/ONE,CLK/BYTE,	;Write 8 1's,
		GET DATA		;Fetch first data byte
315:	WRITE GATE,WRITE/SH,CLK/BYTE,	;Write it all out
		DATA FIELD,GET DATA,
		LOOP/ALWAYS,DONE TEST

;END.
