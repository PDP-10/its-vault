
;STATUS AND FRIENDS ....
;1) RELAVENT FUNCTIONS ARE *STATUS AND *SSTATUS BOTH OF WHICH EVALUATE ALL ARGS
;2) THERE EXISTS A 2 DIMENSIONAL ARRAY 
;	(FUNCALL STATUS-DISPATCH-ARRAY DIM1 DIM2)
;		DIM1 = 0 FOR STATUS KEYWORD
;		     = 1 FOR CORRESPONDING FUNCTION TO CALL ON GET STATUS (*STATUS)
;		     = 2 FOR CORRESPONDING FUNCTION TO CALL ON SET STATUS (*SSTAUTS)
;		DIM2 VARIES AS NECESSARY TO ACCOMODATE IMPLEMENTED STATUS KEYWORDS
;		     ALSO, FOR INITIAL STATUS KEYWORDS (AT LEAST) AN ATOM
;		     STATUS-INDEX-XXX (EXAMPLE STATUS-INDEX-ABBREVIATE) EXISTS, WHICH
;		     HAS AS A VALUE THE INDEX (DIM2) WHICH HAS BEEN ARBITRARILY
;		     ASSIGNED TO THE KEYWORD XXX (ABBREVIATE IN EXAMPLE)
;3) THERE ALSO EXISTS A ONE DIMENSIONAL ARRAY
;	(FUNCALL STATUS-VALUE-ARRAY STATUS-INDEX)  WERE STATUS-INDEX IS AS ABOVE
;		EACH STATUS KEYWORD MAY USE (OR NOT) ITS CORRESPONDING ENTRY IN
;		STATUS-VALUE-ARRAY AS IT WISHES, THE IDEA BEING, AS MUCH AS POSSIBLE
;		THAT IT BE POSSIBLE TO "LAMBDA BIND" THE ENTIRE STATE OF THE
;		"STATUS WORLD" BY BINDING STATUS-VALUE-ARRAY TO A DIFFERENT ARRAY
;


;QFASL FORMAT:
; A FASL FILE CONSISTES OF ONE OR MORE "WHACKS".  EACH WHACK
;IS A COMPLETE AND "FREE-STANDING" SECTION OF THE FILE.  THE FASL
;TABLE IS DISCARDED AND REINITIALIZED AFTER EACH WHACK.

;THE FILE IS A SEQUENCE OF 16 BIT NIBBLES.
;THESE NIBBLES ARE CONSIDERED IN GROUPS. ROUGHLY, A GROUP
;CAN LOAD A Q OF DATA OR REFERENCE AN ATOM.
;A GROUP "RETURNS" A VALUE, WHICH IS THE FASL TABLE INDEX
;OF THE ITEM LOADED OR REFERENCED, ETC, OR 0 IF NOT APPLICABLE. 
;VALUES RETURNED TO THE "TOP-LEVEL" ARE IGNORED.

;THE FIRST NIBBLE OF EACH GROUP HAS:
;  CHECK BIT. MUST BE ON IN ANY NIBBLE INTERPRETED AS GROUP-HEADER, ELSE ERROR.
;  FLAG BIT (VARIOUSLY INTERPRETED, SEE BELOW)
;  # OF MORE NIBBLES IN THIS GROUP (8) NOT INCLUDING ANY VALUES NEEDED


;THE FASL-OPS ARE ASSIGNED VALUES FROM THEIR POSITION IN THE FASL-OPS LIST,
; AND ARE ALSO FUNCTIONS OF NO ARGUMENTS (WHEN CALLED DIRECTLY, AT LEAST)
; WHICH ARE CALLED WHEN A GROUP OF THAT TYPE IS ENCOUNTERED.


;A FASL GROUP OP CAN OBTAIN TWO TYPES OF "ARGUMENTS".  FIRST, IT CAN DIRECTLY
; READ NIBBLES FROM THE INPUT FILE.  SECONDLY, IT CAN REQUEST "VALUES".
; A REQUEST FOR A VALUE CAUSES A RECURSIVE INVOKATION OF THE GROUP INTERPRETER.
; THIS NEW GROUP DOES ITS THING (PRESUMABLY) AND RETURNS A FASL-TABLE INDEX.
; THIS FASL-TABLE INDEX IS GIVEN TO THE ORIGINAL GROUP, AND IT CAN
; REFERENCE THE FASL-TABLE TO OBTAIN THE DATA IF IT WANTS.

;  GROUP TYPE  (6)
;       FASL INDEX. SIMPLY RETURNS AS ITS VALUE THE NIBBLE FOLLOWING.
;	SYMBOL (ADD TO FASL TABLE, P-N FOLLOWS 2 CHARS PER NIBBLE, PAD WITH 200
;			IF ODD NUMBER OF CHARACTERS.)
;		FIRST CHAR IS THE LOW ORDER CHARACTER!!
;		USE FASL-SYMBOL-HEAD-AREA FOR STORAGE OF HEADER,
;		FASL-SYMBOL-STRING-AREA 
;		FOR PRINT STRING, FASL-OBARRAY-POINTER FOR OBARRAY. (BUT NO 
;		INTERN IF FASL-GROUP-FLAG IS T).
;		"RETURNS" FASL TABLE INDEX OF ATOM.
;	STRING  IDENTICAL TO SYMBOL, BUT MAKES NO ATOM HEADER AND STORES STRING
;		POINTER IN FASL TABLE.
;	LIST  %FASL-GROUP-FLAG SAYS WHETHER THE LAST Q IS TO BE NXTNIL
;		OR THE LAST 2 "DOTTED". ONE NIBBLE FOLLOWS GIVING LENGTH OF
;		Q BLOCK REQUIRED.  COMPLETED LIST STORED IN FASL TABLE.
;		USE STORAGE IN FASL-LIST-AREA.  THE LIST "GOBBLES" THE N
;		FOLLOWING VALUES (IN LIST NESTED ORDER), AND STORES THEM IN THE LIST
;		BEING BUILT.
;	TEMP-LIST (IDENTICAL TO LIST, BUT USE FASL-TEMP-LIST-AREA FOR STORAGE.)
;	FIXED POINT #.  %FASL-GROUP-FLAG GIVES SIGN.  NIBBLES AS REQUIRED GIVE DATA.
;		ANY STORAGE REQUIRED FROM FASL-FIXED-NUMBER-AREA.
;	FLOATING PT #.  STORAGE FROM FASL-FLOATING-NUMBER-AREA.
;		ONE NIBBLE EXPONENT, REST FRACTION.
;	ARRAY.	FOLLOWING VALUES ARE THE ARGUMENTS TO MAKE-ARRAY.
;		SEE FASL-OP-INTIALIZE ARRAY
;		FOR HOW ARRAY CONTENTS CAN BE INITIALIZED AFTER THE ARRAY
;		ITSELF HAS BEEN CREATED.
;	EVAL. NEXT NIBBLE GIVES FASL-TABLE INDEX.  CONTENTS OF THAT FASL-TABLE 
;		LOCN ARE PASSED TO EVAL AND VALUE RETURNED BY EVAL IS
;		STORED IN FASL-EVALED-VALUE. RETURNS AS VALUE FASL-EVALED-VALUE.
;		CANNOT BE USED UNLESS EVAL LOADED!!
;	MOVE. CONTENTS OF FASL INDEX OF NEXT NIBBLE IS STORED IN
;		FASL INDEX OF NIBBLE AFTER THAT.  INDEX OF -1 GENERATES NEW
;		ENTRY. ENTRY # STORED INTO IS RETURNED.
;	FRAME. FRAME IS STORED IN FASL-FRAME-AREA.
;		FRAME CONSISTS OF TWO PARTS, FIRST THE Q AREA THEN THE
;		"UNBOXED" AREA.  NEXT NIBBLE IS # Q'S IN Q AREA, FOLLOWED BY
;		NUMBER Q'S IN UNBOXED AREA.  FOLLOWING THESE IS A NIBBLE SAYING
;		HOW MANY NIBBLES ARE IN THE REST OF THE FILE (%FASL-GROUP-LENGTH
;		NOT BEING A LARGE ENUF FIELD). THE NEXT N VALUES ARE STORED
;		IN THE Q AREA, THEN THE NEXT 2*M NIBBLES ARE STORED IN THE
;		UNBOXED AREA. THE UNBOXED AREA IS STORED FIRST Q LEAST SIGNIFICANT,
;		LIKE ARRAYS.  EACH Q IN THE Q-AREA IS LOADED IN TWO PARTS.
;		FIRST IS A VALUE, WHICH CAN BE THOUGHT OF AS SPECIFING A
;		POINTER AND A DATA-TYPE.  NEXT NIBBLE IS A MODIFIER, WHICH CAN
;		SPECIFY FOLLOWING OPS:  MISC BITS - CHANGE DATA-TYPE TO LOCATIVE (1),
;		(CDR-CODE (2), FLAG BIT),
;		CHANGE DATA TYPE TO IV-EFF-AD (1),  ADD CONSTANT DIRECTLY TO POINTER
;		(4) (FOR REFERENCING VALUE-CELLS, FUNCTION CELLS, PROP CELLS, ETC.
;	PDP-10 INSTRUCTION.  (%FASL-GROUP-FLAG -> SELF RELATIVE).  FOLLOWED BY 3 NIBBLES
;		GIVING INSTRUCTION.  HIGH 4 BITS IN FIRST, NEXT 16, NEXT 16.
;		STORED IN FASL-PDP10-INST-AREA.
;	FILL ARRAY FIRST VALUE IS ARRAY POINTER, SECOND IS DATA. ARRAY-PUSH IS
;		DONE. ERROR IF IT FAILS.
;	STOREIN-SYMBOL-VALUE.  FIRST ARG IS NIBBLE WHICH IS FASL-TABLE
;		INDEX WHICH HAS DATA TO STORE. NEXT VALUE IS SYMBOL.
;		VALUE GETS STORED IN VALUE CELL OF THIS SYMBOL.
;	STOREIN-FUNCTION-CELL.  LIKEWISE ITS FUNCTION CELL.
;	STOREIN-PROPERTY-CELL.  LIKEWISE ITS PROPERTY CELL.
;	STOREIN-ARRAY-LEADER.  FOLLOWED BY 3 NIBBLES GIVING FASL-TABLE
;		INDICES FOR THE 3 ARGUMENTS TO STORE-ARRAY-LEADER.
;	FETCH-SYMBOL-VALUE.  NEXT VALUE IS SYMBOL. CURRENT CONTENTS OF ITS VALUE
;		CELL ARE FETCHED, STORED IN FASL TABLE, AND RETURNED.
;	FETCH-FUNCTION-CELL. LIKEWISE ITS FUNCTION CELL
;	FETCH-PROPERTY-CELL. LIKEWISE ITS PROPERTY CELL
;	APPLY.  NEXT NIBBLE IS # ARGS. FIRST VALUE IS SYMBOL. NEXT ARE
;		ARGS. APPLY IS CALLED AND VALUE RETURNED IN FASL-EVALED-VALUE.
;		DOES NOT REQUIRE EVAL TO BE LOADED TO WORK.
;	END-OF-WHACK. DISCARD FASL-TABLE, REINITIALIZE IT AND CONTINUE LOADING.
;	END-OF-FILE
;	SOAK.  NEXT NIBBLE SAYS HOW MANY VALUES TO SOAK UP (LOADING THAT MANY
;		GROUPS FOR EFFECT. RETURNS AS VALUE VALUE OF NEXT GROUP 
;		AFTER THOSE SOAKED.
;	FUNCTION-HEADER. NEXT VALUE IS FUNCTION NAME. ONE AFTER THAT IS SXHASH
;		OF FUNCTION WHEN IT WAS COMPILED, OR ZERO IF NOT AVAILABLE.
;	FUNCTION-END. FUNCTION-HEADER AND FUNCTION-END ARE IGNORED ON LOADING
;		BUT SERVE TO DELIMIT AREAS FILE CORRESPONDING TO FUNCTIONS DURING
;		FASL EDITING OPERATIONS.
;	MAKE-MICRO-CODE-ENTRY. FIRST VALUE IS NAME, SECOND # ARGS, LAST IS A
;		NIBBLE WHICH IS THE FASL-TABLE INDEX IN WHICH HAS BEEN STORED 
;		ENTRY LOCN.  THESE ARE ENTERED IN MICRO-CODE-XXX-AREA
;		ARRAYS AND ENTRY # STORED IN FUNCTION CELL AND FASL-TABLE.
;		(IF FASL-GROUP-FLAG, ITS NOT STORED IN FUNCTION CELL).
;		IF PREVIOUS ENTRY EXISTS IN MICRO-CODE-XX-AREA AREA, IT IS
;		STORED OVER.
;	SAVE-ENTRY-POINT.  FREE-STG-POINTER OF PDP-10-INST-AREA IS SAVED AS A FIXNUM 
;		IN FASL-TABLE.
;	MICRO-CODE-SYMBOL.  SYMBOL # IN NEXT NIBBLE IS COMBINED WITH LAST
;		PDP-10 INST LOADED.
;	MICRO-TO-MICRO LINK. NEXT VALUE IS FUNCTION TO BE LINKED TO.
;		INDIRECT POINTER TO ITS ENTRY ADR IS PLACED IN LAST PDP-10
;		INSTRUCTION LOADED.  IF IT WAS NOT PREVIOUSLY IN MICRO-CODE-XXX-TABLES,
;		IT IS ADDED, WITH ENTRY TO A ERROR ROUTINE IF CONTROL REACHES THERE.
;		WARNING IF FUNCTION CELL OF FCTN HAS NON MICRO-CODED FCTN.
;	MISC-ENTRY.  NIBBLE FOLLOWS WHICH IS MISC-FUNCTION #. (AS IN THE
;		MISC INSTRUCTION IN MACRO-CODE).  POINTER TO BEGINNING OF
;		ITS EXECUTION ROUTINE IS PUT IN RH OF LAST PDP10 INST LOADED.
;	QUOTE-POINTER. NEXT VALUE IS LIST POINTER TO QUOTED LIST STRUCTURE.
;		POINTER TO THIS LIST STRUCTURE IS PLACED IN MICRO-CODE-EXIT-AREA,
;		AND POINTER TO THAT PUT IN RH OF LAST PDP-10 INSTRUCTION.
;	S-V-CELL. NEXT VALUE IS SYMBOL. POINTER TO ITS VALUE CELL IS
;		PLACED IN MICRO-CODE-EXIT-AREA, AND INDIRECT POINTER TO THAT
;		IS PLACED IN RH OF LAST PDP-10 INST LOADED.
;	FUNCELL. LIKEWISE, BUT FUNCTION CELL.
;	CONST-PAGE.  NIBBLE FOLLOWS WHICH IS INDEX TO CONSTANTS PAGE.
;		POINTER TO THAT CONST-PAGE LOCN IS PUT IN LAST PDP-10 INST.
;	SET-PARAMETER. FIRST VALUE IS FASL-TABLE-PARAMETER. SECOND VALUE IS
;		STORED IN IT.
;	INITIALIZE-ARRAY. FOLLOWING NIBBLE IS FASL INDEX WHICH MUST CONTAIN
;		ARRAY POINTER TO ALREADY CREATED ARRAY WHICH IS TO BE INITIALIZED.
;		NEXT NIBBLE IS NUMBER OF "ELEMENTS" TO BE INITIALIZED. **LOSES**
;		THAT MANY VALUES FOLLOW, AND ARE LOADED INTO ARRAY USING
;		A ARRAY-PUSH ON A TEMPORARY DISPLACED ARRAY HEADER
;		(SEE DISCUSSION BELOW).  ELEMENTS ARE INITIALIZED IN STORAGE ORDER.
;	FASL-OP-MESA-FEF. INITIALIZE LOADING MESA FUNCTION. FOLLOWING NIBBLE IS 
;		LENGTH OF STORAGE TO RESERVE IN Q S. NEXT NIBBLE IS MAX
;		EXIT VECTOR USAGE THAT MAY BE REQUIRED. NEXT NIBBLE IS
;		MAX PDL DEPTH USED.  NEXT VALUE IS FUNCTION NAME.
;		NEXT VALUE IS FAST OPTION Q.
;	FASL-OP-MESA-INSTRUCTION.  ONE NIBBLE IS NEXT 16 BIT
;		MESA INSTRUCTION.
;	FASL-OP-MESA-FUNCELL-PLUGIN.  NEXT VALUE IS SYMBOL. IF FASL-GROUP-FLAG IS
;		SET, NEXT VALUE IS "ARGUMENT PASSING Q".  
;		IF THE ARG-Q EXISTS, IT MUST IMMEDIATELY FOLLOW THE POINTER TO
;		THE FUNCTION CELL OF THE SYMBOL NAMED BY THE FIRST Q.
;		AN APPROPRIATE ENTRY IS FOUND (OR CONSTRUCTED) IN THE MESA EXIT VECTOR.
;		THE ADDRESS OF THE LAST MESA INSTRUCTION LOADED IS
;		MADE TO ADDRESS THAT ENTRY.  ITS INDIRECT BIT IS ALSO SET.
;	FASL-OP-MESA-S-V-CELL-PLUGIN.  NEXT VALUE IS SYMBOL.  AN LOCATIVE
;		POINTER TO THE S-V CELL OF SYM IS FOUND (OR CREATED) IN THE
;		EXIT VECTOR.  AN INDIRECT POINTER TO THIS ENTRY IS THEN
;		PLACED IN THE ADDRESS OF THE LAST MESA INSTRUCTION LOADED.
;	FASL-OP-MESA-QUOTE-PLUGIN.  NEXT VALUE IS A QUOTED S-EXPRESSION. ONE EQUAL
;		TO IT IS FOUND (OR PLACED, IF NECESSARY) IN THE EXIT VECTOR.
;		THE ADDRESS OF THE LAST MESA INSTRUCTION IS MADE TO POINT
;		AT THIS EXIT TABLE ENTRY (NOT INDIRECT).
;	FASL-OP-MESA-CONST-PAGE-PLUGIN.  NEXT VALUE IS AN S-EXPRESSION. IT MUST
;		BE FOUND ON THE CONSTANTS PAGE.  ADDRESS OF LAST MESA INSTRUCTION
;		IS MADE TO ADDRESS RELAVENT CONST PAGE ENTRY.
;	FASL-OP-MESA-FUNCTION-END. SIGNALS THAT LOADING  OF MESA FUNCTION COMPLETE.
;		MESA-ENTRY POINTER TO MESA-FEF PLACED IN FUNCELL OF FUNCTION.

;FASL TABLE
; THE FASL TABLE IS A TABLE CONSTRUCTED DURING FASLOADING.  IT IS DISCARDED
; WHEN "THE WHACK" IS COMPLETE.  EACH ENTRY IN THE FASL TABLE IS ONE Q.
; THE FASL TABLE CONSISTS OF TWO SECTIONS, THE PARAMETER SECTION AND THE WORKING 
; SECTION.  THE PARAMETER SECTION IS INITIALIZED
; WHEN THE WHACK BEGINS, BUT CAN ALSO BE MODIFIED AS LOADING PROCEEDS.
; THE Q S OF THE PARAMETER SECTION ARE ASSIGNED SPECIFIC MEANINGS,
; AND THESE AFFECT WHAT HAPPENS AS DATA IS LOADED.  FOR EXAMPLE, THE THIRD
; Q IN THE PARAMETER SECTION MIGHT SPECIFY WHAT AREA THE PRINT-STRINGS
; FOR NEWLY CREATED SYMBOLS ARE TO BE STORED IN. SOME ENTRIES IN THE
; PARAMETER SECTION ARE AVAILABLE AS "ACCUMULATORS" AND/OR TEMPORARY STORAGE
; LOCATIONS.  THE WORKING SECTION IS SIMILAR TO THE "ATOM TABLE" IN PDP-10 FASL.
; HOWEVER, IT HOLDS SYMBOLS, LISTS, ARRAY POINTERS, FRAME POINTERS AND IN GENERAL
; ANY Q DATA WHICH IT IS NECESSARY TO STORE TEMPORARILY OR TO REFERENCE FROM A
; PLACE IN THE FILE "DISTANT" FROM ITS CREATION.  THE FASL TABLE IS NORMALLY
; FILLED SEQUENTIALLY, BUT RANDOM ACCESS FOR READ AND WRITE IS ALSO AVAILABLE.

;LOADING ARRAYS 
;  IT IS HIGHLY DESIRABLE TO BE ABLE TO CREATE AND INITIALIZE ARRAYS DIRECTLY
; FROM FASL FILES.  THERE IS NO PARTICULAR DIFFICULTY IN CREATING THE ARRAY
; OR IN INITIALIZING THE LEADER (IF ANY).  HOWEVER, WHEN INITIALIZING THE DATA,
; THE FACT THAT THE ARRAY MIGHT BE MULTI-DIMENSIONAL AND/OR BE A NON-Q ARRAY
; CAUSES SOME DIFFICULTIES.  ONE CAN EITHER INITIALIZE THE ARRAY BY DOING 
; NORMAL STORE TYPE OPERATIONS AFTER IT HAS BEEN BROUGHT INTO EXISTANCE AS AN ARRAY,
; OR ONE CAN ALWAYS TREAT IT AS A SINGLE BLOCK OF Q DATA, IGNORING THAT FACT
; IT WILL EVENTUALLY BECOME AN ARRAY.  IN EITHER CASE, THERE ARE CERTAIN PROBLEMS.
; THE PROBLEM WITH TREATING IT AS A BLOCK OF DATA IS THAT IF THE ARRAY IS TO
; BECOME A NON-Q TYPE ARRAY, ITS DATA Q'S WILL NOT BE WELL FORMED Q QUANTITIES
; WITH KOSHER DATA TYPES, CDR CODES, ETC.  ON THE OTHER HAND, CREATING THE ARRAY
; AND LOADING IT WITH STORES IS ARKWARD BECAUSE THE ARRAY MAY HAVE A VARYING 
; NUMBER OF DIMENSIONS, MAKING IT DIFFICULT TO WRITE THE NECESSARY LOOPING FUNCTIONS.
;  THE SOLUTION IS TO USE THE FASL-OP-INITIALIZE-ARRAY LOADER OP.  THIS TAKES
; AS AN ARGUMENT AN ALREADY EXISTING ARRAY POINTER (FROM THE FASL TABLE)
; WHICH IS TO BE INITIALIZED.  FASL-OP-INITIALIZE-ARRAY CREATES A TEMPORARY
; SINGLE DIMENSIONED ARRAY HEADER. THIS HEADER HAS A FILL POINTER, AND IS DISPLACED.
; FURTHERMORE, THE DISPLACED POINTER IS AN ARRAY POINTER TO THE ORIGINAL ARRAY.
; THE HEADER IS CREATED TO BE THE SAME TYPE AS THE ARRAY TO BE INITIALIZED.
; WHEN THE ARRAY REFERENCING ROUTINES IN THE MICROCODE SEE AN ARRAY-POINTER
; DATA TYPE IN THE DISPLACED LOCN POINTER, THEY KNOW THAT THE INTENTION IS
; TO REFERENCE THE DATA ASSOCIATED WITH THAT ARRAY.  THUS, THE BEGINNING OF THE
; DATA SECTION (AUTOMATICALLY SPACING OVER THE ARRAY DIMENSION INFO, IF ANY)
; BECOMES THE EFFECTIVE BASE OF THE DISPLACED ARRAY HEADER. DOING THINGS THIS WAY
; ALSO AVOIDS GARBAGE COLLECTOR PROBLEMS (BOTH MARKING AND RELOCATION) THAT WOULD
; OCCUR IF ANY KIND OF A POINTER DIRECTLY TO THE ARRAY'S DATA BASE WERE USED.
; ESPECIALLY FOR LOADING ART-1B, ETC, ARRAYS, ALSO AVAILABLE IS 
; FASL-OP-INITIALIZE-NUMERIC-ARRAY.  SAME AS REGULAR, EXCEPT INDIRECT ARRAY IS MADE TO
; BE ART-16B., AND THE CONTENTS IS GIVEN AS NIBBLES RATHER THAN VALUES.
; THIS HELPS SHORTEN FILE.  NOTE THAT THESE NIBBLES ARE NOT INCLUDED IN THE GROUP
; COUNT (WOULDNT FIT).

;REMOTE VARIABLES & BROKEN-OFF INTERNAL FUNCTIONS.
; FASL-OP-FUNCTION-HEADER appears before each "DEFUN".  Several FASL-OP-FRAMEs
; can follow if there were internal broken-off functions.
; FASL-OP-FUNCTION-HEADER empties the remote variable table.
;
; FASL-OP-REMOTE-VARIABLE <unique index number> <name>
; returns the remote variable specified by the index number, creating it
; if it is not already in the remote variable table.  <name> is just for
; debugging.  Currently remote variables are uninterned symbols
; but later they might be single cells.

;LOADING MESA CODE:
; A MESA FUNCTION CONSISTS OF A SMALL FIXED LENGTH FEF, FOLLOWED BY MESA INSTRUCTIONS.
;  EACH INSTRUCTION IS MOSTLY A 16 BIT NUMBER, BUT IT MAY REQUIRE A "PLUG-IN"
;  FOR THE ADDRESS IF IT REFERENCES A Q QUANTITY SUCH AS A FUNCTION CELL,
;  A VALUE CELL, OR QUOTED LIST STRUCTURE.
; THUS, A FASL-OP-MESA-FEF IS USED TO START THE FUNCTION.  THIS LOADS THE FEF,
;  AND RESERVES STORAGE FOR THE ENTIRE FUNCTION.  ADDITIONALLY,
;  THE FASL-OP-MESA-FEF IS SUPPLIED WITH THE MAXIMUM NUMBER OF 
;  MESA-EXIT-AREA Q'S THIS FUNCTION MIGHT REQUIRE (THE NUMBER THAT WILL BE REQUIRED
;  IF THEIR IS NO COMMONALITY WITH Q'S THAT HAVE BEEN LOADED BY PREVIOUS
;  MESA-FUNCTIONS SHARING THE SAME EXIT AREA).  IF FASL-OP-MESA-FEF
;  SEES THAT THE EXIT AREA MIGHT OVERFLOW, IT STARTS A NEW ONE.
;  (A NEW EXIT AREA IS ALSO STARTED BY A NEW FASL-WHACK.)
; EACH INSTRUCTION IS A FASL-OP-MESA-INSTRUCTION GROUP, WHICH TAKES ONE
;  NIBBLE OF DATA TO BE THE INSTRUCTION.
; VARIOUS PLUGINS, (FASL-OP-MESA-FUNCELL-PLUGIN, FASL-OP-MESA-S-V-CELL-PLUGIN,
;  FASL-OP-MESA-QUOTE-PLUGIN) ARE PROVIDED, AND THEY ACT ON THE LAST LOADED
;  MESA INSTRUCTION.

; PARAMETER AREA ASSIGNMENTS
;   THESE ATOMS ARE ASSIGNED VALUES ACCORDING TO THEIR POSITIONS IN THIS LIST

