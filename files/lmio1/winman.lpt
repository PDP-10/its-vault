          1.  Making

          Almost  all  Lisp Machine output appears on a TV screen.  Usually
          there is only one screen, although some machines have  additional
          monitors.   The fact remains that with only one small (884 by 768
          pixels) display area, it's hard to make  sure  that  the  outputs
          from  various  programs  don't run into each other.  A programmer
          can hardly be blamed for going through the  roof  when  the  Lisp
          interpreter  writes  error  messages all over a beautiful graphic
          display.

          Fortunately, on the Lisp Machine, the programmer  is  spared  all
          these   headaches.     An  advanced  window  system  enables  the
          programmer to keep various displays separate and clean.  The Lisp
          Machine system  programs  use  the  window  system  too,  so  the
          programmer  can  use  the Editor, the Inspector, Peek, and so on,
          without these programs interfering with his own  output  or  with
          each other's.

          In  this chapter we explain how to make windows for your programs
          to write on, and also describe the many operations  that  can  be
          performed with these windows.


          1.1  How

          You  can  make  your  own display areas, or windows, by using the
          function tv:window-create.  We will define it informally, showing
          how it can be used to create useful windows, and  later  we  will
          return to define tv:window-create more formally.

          The simplest way to create a window is with the form

          (tv:window-create 'tv:window)

          In  practice,  if  you  wanted to use this window, you would setq
          some symbol to it.  Try it:

          (setq my-window (tv:window-create 'tv:window))

          You may be wondering about the argument, 'tv:window, that we have
          been  giving  to   tv:window-create.      That   argument   tells
          tv:window-create  what  flavor of window to make.  There are many
          other flavors of  window  that  you  can  make,  but  the  flavor
          tv:window  is  the  most  generally  useful.    This chapter will
          concentrate on how to use windows of that flavor.


          1.2  Exposing

          In the example given, the window that has been created is not yet
          visible.  It is deexposed.  To expose it,  we  must  send  it  an
          :expose message.  In general, we send messages to windows to make
          them  do  things.  Here is the way to send the :expose message to
          the window we have created.  Try it:

          (funcall my-window ':expose)

          When this form is evaluated, the new window is  exposed,  with  a
          blinker flashing in its upper left-hand corner.  Since we created
          it  without specifying any of its initial properties (and we will
          see how to do that later), it has all the default characteristics
          of a window of the tv:window flavor.  It covers the whole screen,
          except for the who-line at the bottom.  It  has  black  lines  to
          mark  the edges of the typeout area.  It has a label in the lower
          left-hand  corner  to  tell  you the name of the window, which in
          this case was chosen by the window system.

          For now we can't do anything interesting with this window.   When
          it  was  exposed  it covered up the Lisp Listener, and we have to
          back to the Listener before we can do more.  You can get back  to
          the  Lisp Listener in any of the usual ways, by selecting it with
          the mouse, or by typing SYSTEM L or TERMINAL S.


          1.3  Some

          It is possible to much more specific about several aspects of the
          window you want to create.  Consider the following form.

          (tv:window-create 'tv:window
                            ':edges '(100. 200. 300. 400.)
                            ':expose-p t)

          This would cause the created window to have  its  left  edge  100
          pixels  from the left edge of the screen, its top edge 200 pixels
          from the top of the screen, its right edge  300  units  from  the
          left  edge  of the screen, and its bottom edge 400 units from the
          top edge.  In addition, the new window would be exposed  as  soon
          as it was created.

          The  ':edges  and  ':expose-p  arguments  to tv:window-create are
          examples of window initialization keywords.  There  are  quite  a
          few  other  such  keywords,  all of which are used to specify the
          initial state of the window being created.

          For  a  complete  description  of  the   initialization   options
          available  to  you  when you create a window of flavor tv:window,
          consult the Window Encyclopedia.


          1.4  Talking

          1.4.1  An

          Most of the Lisp Machine I/O functions take an optional  argument
          which  specifies  the  stream  upon  which the operation is to be
          performed.  A stream is an object from which  characters  can  be
          received, and to which characters can be sent.  Among their other
          abilities,  windows  of  the tv:window flavor can act as streams.
          To illustrate this, here is a program that sets up  a  window  to
          act as a piece of typing paper:

          (defun typing-paper ()
            (if (not (boundp '*typing-paper-window*))
                (setq *typing-paper-window*
                      (tv:window-create 'tv:window
                                        ':edges-from ':mouse
                                        ':minimum-height 200
                                        ':minimum-width 200
                                        ':integral-p t
                                        ':save-bits t)))
            (funcall *typing-paper-window* ':select)
            (do ((char (tyi *typing-paper-window*)
                       (tyi *typing-paper-window*)))
                ((= char 561)                             ;control-q
                 (funcall *typing-paper-window* ':deselect t)
                 t)))

          Our   typing   window   will   be   the  binding  of  the  symbol
          *typing-paper-window*.    The  program  first  checks  to  see if
          *typing-paper-window* is already bound.  If it is, we assume that
          typing-paper    has    been    called    before,     and     that
          *typing-paper-window*  is  already bound to a window of the right
          sort.

          If, on the other hand, *typing-paper-window*  is  not  bound,  we
          must  create a window to type on, and we call tv:window-create to
          do so.  In the example we present several  useful  initialization
          keywords  for  windows  of  the  flavor  tv:window.  ':edges-from
          ':mouse prompts the user to  delimit  the  new  window  with  the
          mouse,  by  moving  L-shaped  mouse blinkers to the desired upper
          left  and  lower  right  corners.    To  prevent  the  user  from
          specifying  a  window that is too small for the required purpose,
          the  keywords  :minimum-height  and  :minimum-width   are   used.
          Distances  are  given  in pixels.  If the user specifies a window
          smaller than the stated minima, the console beeps and the user is
          prompted to specify a bigger window.    The  keyword  :integral-p
          causes the specified dimensions to be rounded so that an integral
          number  of characters and lines will fit in the window.  Finally,
          :save-bits provides a place in memory to preserve the display  of
          a window in case that window is partially or completely obscured.
          The  saved  display  will  be restored automatically whenever the
          window is re-exposed.

          After we have made sure that we have a window to type on, we send
          that window a :select message.  This requires some explanation.

          If there are more than one exposed windows, there  is  no  reason
          why they cannot all type out at once.  But they cannot all listen
          to  the keyboard at once: there is only one keyboard and there is
          no way to guess which window the keyboard is talking to.  So  one
          exposed  window  is  designated as selected, which means that the
          next character typed on the keyboard will  appear  in  the  input
          buffer  of  the  stream associated with that window.  Selecting a
          window automatically exposes it.

          Once the typing-paper window is exposed and selected,  we  simply
          tyi  from  it  over  and  over again until we detect a control-q,
          which we have chosen arbitrarily to mean that we want to exit the
          program.  We must note here that the function tyi echoes  to  the
          stream  that it is given as an argument: we don't have to tyo the
          result back to the window.

          When we read a control-q, we deselect the typing-paper window  by
          sending it a :deselect message with an argument of t.  This finds
          the most recent previously selected window and reselects it.  The
          function typing-window returns  t.


          1.4.2  Stream

          As  shown in the previous section, the standard Lisp input-output
          functions take an extra argument specifying the stream  to  which
          I/O  is  being  directed.    We have also said, however, that all
          window operations  are  performed  by  sending  messages  to  the
          windows  in question.  In fact, the preferred way of doing window
          I/O is by sending messages.  The stream capabilities of a  window
          of  the  tv:window  flavor  form  a  functional  superset  of the
          traditional Lisp input-output functions.

          As an introduction, we will give a message-passing version of the
          typing-paper function presented above.

          (defun typing-paper ()
            (if (not (boundp '*typing-paper-window*))
                (setq *typing-paper-window*
                      (tv:window-create 'tv:window
                                        ':edges-from ':mouse
                                        ':minimum-height 200
                                        ':minimum-width 200
                                        ':integral-p t
                                        ':save-bits t)))
            (funcall *typing-paper-window* ':select)
            (do ((char (funcall *typing-paper-window* ':tyi)
                       (funcall *typing-paper-window* ':tyi)))
                ((= char 561)                             ;control-q
                 (funcall *typing-paper-window* ':deselect t)
                 t)
               (funcall *typing-paper-window* ':tyo char)))

          Here,   instead  of  calling  the  function  tyi  on  the  window
          *typing-paper-window*, we send a :tyimessage to the window.   The
          window's  :tyi  method  returns  the code of the character typed,
          exactly as does the tyi function.  However, the :tyi method  does
          not  echo  the typed character back to the window: this has to be
          done explicitly by sending a :tyo message to the window, with the
          code of the character to be typed as an argument.  This allows us
          to choose not to echo in certain cases.  For  example,  this  new
          implementation  of  typing-window  does  not echo the terminating
          CONTROL/Q.

          So far, we have seen how  to  read  a  single  character  from  a
          window's  input buffer, and how to output a single character on a
          window.  The tv:window flavor of window has a large repertoire of
          stream capabilities besides the :tyi and :tyo methods.  These are
          described under tv:stream-mixin in the Window Encyclopedia.
          2.  Custom

          The  heart  of the window system and its crowning feature is that
          it is extensible.  The user can define  new  flavors  of  windows
          which have their own methods of responding to messages, and their
          own  characteristics,  without  sacrificing  the functionality of
          flavors that have already been defined.  In this chaper  we  show
          how  this  is possible and give an example of the definition of a
          special-purpose window.


          2.1  Flavors,

          There are already many defined window flavors.  Each  flavor  has
          its  own  properties  and its own set of methods of responding to
          its own repertoire  of  relevant  messages.    In  addition,  the
          auxiliary  data associated with each window varies from flavor to
          flavor.

          A flavor of window can acquire the capability  to  respond  to  a
          message  in  a  variety  of different ways.  It can be given this
          capability explicitly using the special function  defmethod,  for
          example.    This  is  used  to  teach  a  flavor a method that is
          specific to its particular purpose.

          In addition, at the time a flavor is defined  using  the  special
          function  defflavor,  it can be defined to share the capabilities
          of specified,  previously-defined  flavors.    For  example,  the
          stream  capabilities  described  above are embodied in a specific
          flavor, tv:stream-mixin.  For a window to function as  a  stream,
          it  is  only  required  that  its  flavor be defined to share the
          capabilities of tv:stream-mixin.

          As an aside, we note that the "-mixin" suffix in the  name  of  a
          flavor   indicates   that  that  flavor  cannot  be  successfully
          instantiated, that is, a window of that flavor  cannot  be  made:
          the   flavor  lacks  certain  essential  capabilities  which  are
          required for a flavor to be instantiable.  This  flavor,  as  its
          name  implies,  only  exists so that it can be mixed in to create
          flavors with stream capabilities.

          Each instance of a particular flavor  has  some  associated  data
          called  its  instance  variables.    When  a  flavor  is defined,
          instance variables are specified in  two  ways.    Windows  of  a
          certain  flavor  always  have  the  instance  variables  of  each
          component flavor.  For example, every window  of  a  flavor  that
          includes tv:stream-mixin has an io-buffer.


          2.2  An

          We  now present an example of how a new flavor of window might be
          defined.  We want to write a program that will display a calendar
          of any given month.    We  start  by  defining  the  month-window
          flavor.

          (defflavor month-window
                  ((month 'january) (year 1980.))
                  (tv:line-truncating-mixin tv:window)
            :initable-instance-variables
            :gettable-instance-variables
            (:default-init-plist
                   :character-height 9.
                   :character-width 21.
                   :label nil
                   :more-p nil
                   :blinker-p nil
                   :save-bits t))

          The  special  function  defflavor  is used to define new flavors.
          After evaluating the above  form,  windows  of  the  month-window
          flavor can be created using tv:window-create.

          (setq jan80 (tv:window-create 'month-window))

          Now  jan80  is  a  window  of  the  month-window  flavor.  It has
          instance variables month and year, and they are  set  to  january
          and  1980.  respectively.    This  was  determined  by the second
          argument to defflavor, which is used for  defining  the  instance
          variables  for  instances  of  the  new flavor, and their default
          initial values.


          2.2.1  Component

          What messages can jan80 understand?  Look at the  third  argument
          to the defflavor above.  It is a list of two elements:

          (tv:line-truncating-mixin tv:window)

          These  are the component flavors of the flavor month-window.  The
          window jan80 can understand any messages that  a  window  of  the
          tv:window  flavor  can.   Additional capabilities are mixed in by
          including the tv:line-truncating-mixin flavor.

          What if a flavor x has two component flavors, y and z, and y  and
          z  both  provide  methods  to  handle, say, the :explode message?
          When an x-flavored window is asked to  :explode,  will  it  be  a
          y-flavored explosion or a z-flavored one?  The answer is that the
          method  used  is  taken  from  the  first  flavor  in the list of
          component flavors that has such a method.

          This is very relevant to windows of the month-window flavor, like
          jan80.  As a matter of fact, all of  the  messages  that  can  be
          understood  by  tv:line-truncating-mixin could also be understood
          by tv:window.   But  tv:line-truncating-mixin  provides  differen
          methods  of  dealing  with  these  messages.    It  was  mixed in
          specifically to  replace  certain  of  tv:window's  methods  with
          alternate methods more suited to the application.  That is why it
          had  to  be  first  in  the  list  of component flavors.  We will
          discuss the exact functionality of  the  tv:line-truncating-mixin
          later.


          2.2.2  Accessing

          Does  jan80  and its brethren of the month-window flavor have any
          methods that it did not inherit from its component flavors?  As a
          matter of fact, it does: it understands the  :month  message  and
          the :year message.  For example:

          (funcall jan80 ':month)

          would return january.  The instance variables month and year were
          made      accessible      by      including      the      keyword
          :gettable-instance-variables in the defflavor which  defined  the
          month-window  flavor.    Otherwise these instance variables would
          have been completely internal state, and their values would  have
          been hard to retrieve.  Sometimes this is the right thing.
          It  is  possible to make only some instance variables accessible.
          If instead of the keyword alone, we had written

             ...  (:gettable-instance-variables month)
             ...

          then the instance variable year would have remained inaccessible.


          2.2.3  Initializing

          We can create windows of  flavor  month-window  for  any  desired
          month  and  year: january and 1980. are merely the default values
          of   the   instance   variables.      Including    the    keyword
          :initable-instance-variables  makes it possible to initialize the
          instance   variables    using    initialization    keywords    in
          tv:window-create.   For example, to create a month window for the
          month of June in the year 1993, we can say

          (setq june93 (tv:window-create 'month-window
                                         ':month 'june
                                         ':year 1993.))

          We could also make  only  certain  instance  variables  initable,
          using    the    same    list    syntax    that    we    use   for
          :gettable-instance-variables.


          2.2.4  Initialization

          When a window is created, a list of important  things  to  do  is
          assembled  and  eventually sent to the new window as the argument
          to the :init message, the first message the new window  receives.
          This  list  is the initialization plist, so called because during
          its  construction  and  parsing  it   is   manipulated   by   the
          property-list   primitives.      Many   flavors  have  a  default
          initialization plist.  These  defaults  are  assembled  into  the
          initialization   plist   in  such  a  way  that  (as  usual)  the
          earliest-mentioned component flavors have priority.  The explicit
          initializations  specified  by  the  user   with   initialization
          keywords    to   tv:window-create   are   putpropped   into   the
          initialization plist last, so that they have  priority  over  any
          defaults.

          In  the  month-window example, the :default-init-plist keyword to
          defflavor establishes  the  initializations  contributed  by  the
          month-window   flavor.    They  can  be  superceded  by  explicit
          initialization keywords given to tv:window-create.   But  we  can
          say  that  unless  otherwise  specified, a month-window will be 9
          lines high and 21 columns wide, will be unlabelled, will  not  do
          more-processing when output reaches the bottom of the window, and
          will  lack  a  blinker.    After  all,  we do not intend to reach
          end-of-page, and a blinker and label would clutter up a  calendar
          annoyingly!


          2.2.5  Changing

          We  now  define  our  first  new,  explicit method for the flavor
          month-window.

          (defmethod (month-window :set-date) (new-month new-year)
            (setq month (or new-month month)
                  year (or new-year year))
            (tv:sheet-force-access (self)
              (month-window-draw)))

          We   postpone  discussion  of  month-window-draw,  which  is  the
          function that actually displays a calendar  in  the  window,  and
          concentrate  for  the moment on the technology used to define new
          methods.

          The special function defmethod is used for  this  purpose.    Its
          first  argument,  of course, specifies the flavor and the message
          keyword for the new method.  This is followed  by  a  defun-style
          argument list.

          We could use this method to change the date of an existing window
          of  the month-window flavor.  For example, to change june93 to be
          a calendar for March, 1789, we could evaluate:

          (funcall june93 ':set-date 'march 1789.)

          (Of course, this will not work until  we  have  properly  defined
          month-window-draw.)

          Inside  the  defmethod  shown  above,  month and year are used as
          special variables.  Inside the lexical  scope  of  the  defmethod
          (that  is,  inside  the  actual defmethod form), all the instance
          variables, including the ones inherited from  component  flavors,
          are declared special automatically.  And inside the dynamic scope
          of the method (the defmethod form and all the functions called by
          it)  the instance variables are properly bound.3nil  In addition,
          the variable self is declared special and bound to the window  to
          which the message was sent.

          The arguments to the :set-date message are the new values for the
          instance  variables  month  and year.  If either of the arguments
          are nil, the corresponding instance variable is left unchanged.

          After   setting   the   instance    variables,    the    function
          month-window-draw  is called to update the display on the window.
          This is wrapped in a tv:sheet-force-access, used to  ensure  that
          important changes to a window take place as soon as possible.

          Now   we  define  month-window-draw,  which  actually  draws  the
          calendar in the window.

          (declare-flavor-instance-variables     (month-window)      (defun
          month-window-draw (&aux (day 1))
            (funcall-self ':clear-screen)
            (format self "~a ~d~%~%  s  m  t  w  t  f  s~%" month year)
            (let ((start-day (month-start month year))
                  (total-days (month-length month year)))
              ;; Get info about month/year pair -- the start day
              ;; is 0 for sunday through 6 for saturday.
              ;; Total days is total number of days in this month.
              (format self "~vx  1" (* start-day 3))
              (dotimes (i (- 6 start-day))
                (format self "~3d" (setq day (1+ day))))
              (setq total-days (- total-days (- 7 start-day)))
              (do () (())
                (format self "~&~3d~3d~3d~3d~3d~3d~3d~%"
                        (+  day  1) (+ day 2) (+ day 3) (+ day 4) (+ day 5)
          (+ day 6)
                        (setq day (+ day 7)))
                (and (< (setq total-days (- total-days 7)) 7)
                     (return)))
              (dotimes (i total-days)
                (format self "~3d" (setq day (1+ day)))))))
          The special function declare-flavor-instance-variables makes sure
          that  all  the  instance  variables  of  the specified flavor are
          declared special inside its body.  Functions that are  called  by
          methods should be wrapped like this.

          The  function month-window-draw first clears the window, and then
          draws the calendar in a straightforward way, that is, a way  that
          requires  no  knowledge  of  the window system to understand.  It
          depends on the functions month-start and month-length, which
