;READ WOODS;MACROS > IN BEFORE TRYING TO THIS INTERPRETIVELY

(DECLARE (COND ((NULL (MEMQ 'NEWIO (STATUS FEATURES)))
		(BREAK 'YOU-HAVE-TO-COMPILE-THIS-WITH-QCOMPL T))
	       ((OR (NULL (GET 'IF-FOR-MACLISP 'MACRO))
		    (GET 'POP 'MACRO))
		(LOAD '(MACROS > DSK WOODS)))))

(IF-FOR-LISPM
(DECLARE (QUOTED-ARGS 
  FORCE  PUSH  SCANSTACK  SYSCONJ  ADDL  ADDR 
  CAT  GETF  GETR  JUMP  LIFTR  NULLR 
  SENDR  SENDRQ  SETR  SETRQ  TO  TODO 
  WRD  CHECKF  COMPARATIVE  GETROOT  MARKER  NPCHECK 
  NPREP  PNCHECK  RESUMETAG  RFEAT  SCOMP  VPARTICLE 
  VPASSIVE  VPREP  VTRANS  HELPER  MAPCV  RENAME 
  SCANCV  SETQS  THOSEV  EDITD  EDITG  REMEX 
  CTYPE  PLURAL  COMPFORM  SUPFORM  /#  MEM 
  PRED  QUANT  SSUNIONF  NEWFRAG  TABFORM))
);LISPM

(DECLARE (*LEXPR APPLY* EVALA)(SPECIAL *LOC*))
(DECLARE  (SPECIAL *SPOP *TRAIL REG WHERE *SQ-VAL*)
(*LEXPR CONCAT))

(DECLARE (SPECIAL /#FLG * *ACFS *STATE *X* -FLG A0 A1 ABUF ACF/# ACFS
		  ACONFIG ACT ACTION ACTIONS ADJ AHELP ALIST ALT
		  ALTARC ALTARC1 ALTCONJ ALTLEX ALTNUM ALTS ALTWFS
		  ANAPHORISM ANAPHRLST ANTECEDANTS ANTEVAR ARC ARCS
		  ARGS ASSIST ATOM ATOMS AVERAGEFLAG BEG BEGIN
		  BLOCKS C2 CAND CAT CATEGORIES CLIST CMODE CONFIG
		  CONJ CONTEXT CONTINUE DALL DET DFILE
		  DICTFETCHFAILS DICTFILE DICTFILEBEG DICTFORM
		  DICTIONARY DISCRULES ECONSES ECONSES0 EDITDV
		  EDITGV EDO END ETIME ETIME0 ETIMEFLAG EXECCOMS
		  EXECUTE FAIL FEAT FEATS FEATURES FILE FILEFNS
		  FILELST FILEMACROS FILEVARS FIRSTFLAG FLAG FORCE
		  FORKNAME FORM FOUND GETFN GLOBALVARS GVARS H1
		  HEAD HEADRULES HEADS HELP HELPER HITFILE HOLD IB
		  ICONSES ICONSES0 IDO IHELP INPUTLOGFILE
		  INPUTLOGFLAG INTENSION INTERP INTERPS INTERVALS
		  IPRINT ITIME ITIME0 ITIMEFLAG ITP KLIST L0 L1 L2
		  L3 L4 LABEL LAMS LETFLG LEX LEXBACK LEXLIST
		  LEXMODE LEXTABLE LH LISPXHISTORY LIST LOC LOGFILE
		  LOGFLAG LOOP LOWFORK LP MACROS MARKER MARKERS
		  MATCHLIST MAXBLOCKS MAXPARSES MAXREPARSES MAXTIME
		  MCATEGORIES MID MINL MINLOC MLIST MODAL MODE
		  MODEVARS MODL MORE-MOST MORPHOLOGYCOMS
		  MORPHOLOGYFNS MORPHTABLE MORPHTESTS MTST
		  MYGLOBALVARS NAME NEWRULES NEWVARS NFLAG NLAMA
		  NLAML NLEX NODE NOMOVEFLAG NOUN NP NPRRULE NU
		  OLDALTS P PAREN// PARENCOUNT PARENS PARENT-LEX PARSE
		  PARSER10COMS PARSES PARSEXPRS PARSVALS PATH
		  PAUSEFLAG PCONSES PCONSES0 PCTFLG PHELP PMODE
		  PNCODE PPATH PPRINT PPT PREFERRED PREP PRERULES
		  PREVARS PROPS PS PTIME PTIME0 PTIMEFLAG
		  PUNCTUATION PUSH PUSHSTATE QBUF QUANT QVAR
		  READBUF RECORD REFLIST REFLISTS REGS REPARSE
		  REQUESTDEF RESOLVE RETURN RHS RULELIST RULELISTS
		  RVECTOR SCAN SCNFN SCNLST SCORE0 SCORE0SENTS
		  SCORE1 SCORE1SENTS SCORE2 SCORE2SENTS SCORE3
		  SCORE3SENTS SEARCH SEARCHFLAG SEM SEM-NOUNS
		  SEM-VERBS SEMFOR SEMSUB SEMU SENTENCE SENTENCES
		  SETFN SETRUL SETRUL? SIFLAG SKIP SMP SMP2
		  SPECIFIER SPLIT/# SPLITS SREGS SSETRUL STACK
		  STACKELT START STARTCLOCK STATE STRAIL STRING
		  STRINGPOS SUBLOC SUBSTITUTE SUCCESS SUCCESSFLAG
		  SYNFLAG SYSCONJ SYSPROPS T2 TACONFIG TAGLIST
		  TAGMATCH TAILS TEMP TEMPLATE TEMPTRAIL TERMRULE
		  TEST TOP TOPICFLAG TOPICRULES TOPIC\AND-NP
		  TOPIC\AND-S TRACE TRACEFILE TRAIL TRAILARC
		  TRAILLABEL TRAILS TRAILTYPE TRAILV TRAILVAL
		  TREEFRAGS TRULES TST TYPE TYPEFLAG UCFS UEXPRS
		  UFNS UMACROS UNSMASH UPRINT USERFLAG USERFNS V
		  VAL VALUES VARIABLE VARIABLES VARSFLAG VBL VCFS
		  VLIST WEIGHT WFSS WFST WFST3 WFST4 WORD X XPROPS
		  XTF XTP Y)) 

(DECLARE (*EXPR WHILEM WHEREIS USERFN USED? UNWIND TRAILS TRAIL1
		TRAIL TRACEFILE TOPLEVEL? TMATCH TIMEP TERM
		TEMPMATCH TALKER TAILS1 TAILS TAG SYNONYMS?
		SUSPENDW SUSPEND SUPERLATIVE SUBSET STORALT STEP
		SPROC SPREADQM SPOP SORTREFS1 SORTREFS SHOWTIME
		SETUP SETQSM SENTPROC SENDACTP SEMSUB SEMNET
		SEMIANAPHOR SEMCONJ SEM SDIFF SCOPEVARS SCOPEFINDER
		SCAN SBUILD SAMPLEP RULES RMATCH RESOLVE REQUESTDEF
		RELTAG RELATIVIZE RELATEDWORDS REFTYPE REFSUB2
		REFSUB1 REFSUB REFQUANTS REFPTR REFP REFLOC REDO
		QUIT QSTART QGO PUTLEX PUNCTALIZE PRINTPARSES PPT1
		PPT PPR PPP PPG PPD PPATH/.STACK PPATH/.REGS
		PPATH/.HOLD PPATH/.BACK POPCONJ POP PLOG PARSER
		PARSELIST ORMATCH ORFLAG NXTVAR NPBUILD NO-MATCHES
		NEXTWRD NEWPX NEWCLASS MORPHTSTCHECK MORPHTABCHECK
		MORPH MODESET MODAL MEMBSTACK MEMBERS MEANING?
		MATCHGROUP MATCHER MARKERS LONGBLOCK LOCEX LOADFROM
		LINEP LEXPAIRS LEXIC LEXALIZE LEAVES LEAFMEMB
		LASTELT LAMTYPE KTH KILL KEYPHRASE ISOTOPE INTERP
		IMPORT IDENTITY HYPHENADJ HOLDSCAN HOLD HEAD GETTAG
		GETSENT GETREFS GETLEX FRONTED? FORCER FIRSTPART
		FIND FILEX FILEMATCH EVALLOC ENDTRACE ENDL? DWRITE
		DRULEF DOCP DICTFETCH DICTCHECK DICT? DETOUR
		DETBUILD DEFAULTSEM CONTRACTP CONSTITUENTS
		CONJSTARTS CONJSCOPE CONJOIN COMSAV COMBINATIONS
		CHOOSEALT CCHECK CATCHECK BUILD2 BUILD1 BACKUP
		BACKLEX AVERAGE? AUTHOR: ASSOCNEXT ASSIST ARGSOF
		ARGSAV ARCTEST ARCPICK ANTORDER ANTEQUANT
		ANTECEDANT ANAPHORD ALTLOC ALTCONJGEN ALTARCGEN
		ALT/.WEIGHT ALT/.STRING ALT/.STATE ALT/.STACK
		AGREEMENT ADJVERB ADJPHRSE ADDLEX ACT ABORT *FLAG)) 

(DECLARE (*FEXPR WRD WHILE VTRANS VPREP VPASSIVE VPARTICLE TRACER
		 TODO TO THOSEV TABFORM SYSCONJ SUPFORM SSUNIONF
		 SPREADQ SPLIT SHOW SETRQ SETR SETQS SENDRQ SENDR
		 SCOMP SCANSTACK SCANCV RFEAT RESUMETAG RESUME
		 RENAME REMEX QUANT Q PUSH PRED PNCHECK PLURAL
		 NULLR NPREP NPR NPCHECK NOR NEWRULE NEWFRAG MEM
		 MARKER MAPCV LIFTR JUMP HELPER GETROOT GETR GETF
		 FORCE FILE EQUIVALENCE EQU EDITG EDITD DEFINEV
		 DEFINEP DEFINEGL DEFINEG DEFINEDL DEFINEDICT DDEF
		 CTYPE COMPFORM COMPARATIVE CHECKF CHANGEWORD CAT
		 BUILDQ BUILD ADDR ADDL /#)) 

(COMMENT FUNCTIONS NOT DEFINED IN MACLISP OR SOURCE
	 (! *MAP
	    *MAPCON
	    &PRIN1
	    &PRIN2
	    &PRINT
	    *READ
	    *READC
	    *RPLACA
	    *SORT
	    &TERPRI
	    ADDPROP
	    ALTSTACK
	    APPLY*
	    BACKTRACE
	    BREAK1
	    CHANGENAME
	    CLOCK
	    CLOSEF
	    CONCAT
	    CONSCOUNT
	    CONTROL
	    COPY
	    DEFLIST
	    DSUBST
	    EDITE
	    ENDFILE
	    EVALA
	    EVERY
	    FILEPOS
	    FILEVARS
	    FNTYP
	    GETLOWER
	    GETV
	    GLC
	    GNC
	    HISTORYSAVE
	    INFILE
	    INFILEP
	    INTERSECTION
	    INTO
	    LAMBDA
	    LISPX
	    LISPXPRINT
	    LISPXREAD
	    LISTP
	    LOC
	    MAKEFILE
	    MKATOM
	    MKSTRING
	    NCHARS
	    NEQ
	    NEWFILE1
	    NFLCT-ADJ
	    NFLCT-ING
	    NLISTP
	    *NTH
	    OPENP
	    OUTFILE
	    OUTPUT
	    PACK
	    PARSEPARENS
	    PEEKC
	    PLIST
	    POSITION
	    POSTARTPHRS
	    PRINTDEF
	    PRINTFNS
	    PRINTLEVEL
	    PROMPTCHAR
	    RATOM
	    READP
	    READVISE
	    RETFROM
	    RUNFORK
	    SAVESET
	    SELECTQ
	    SFPTR
	    SOME
	    SPACES
	    STKNTH
	    STKSCAN
	    TCONC
	    UNPACK)) 


(DEFUN *RPLACA MACRO (X) (RPLACA X 'RPLACA))


(DEFUN SETQS MACRO (X) 
       ((LABEL FOO
	       '(LAMBDA (Y) 
			(LIST 'SETQ
			      (CAR Y)
			      (COND ((NULL (CDR Y)) (CADDR X)) (T (FUNCALL FOO (CDR Y)))))))
	(CADR X)))
 
(DEFUN SPREADQ MACRO (X)
(CONS 'SETQ (CONS '*LOC* (CONS (CADDR X)
 (MAPCAN '(LAMBDA (X) (CONS X (LIST '(CAR *LOC*) '*LOC* '(CDR *LOC*))))
         (CADR X))))))

(DEFUN WHILE MACRO (X)
(PROG (TAG)
 (SETQ TAG (GENSYM))
 (RETURN (LIST 'PROG NIL
 TAG	(LIST 'COND (APPEND (CDR X) (LIST (LIST 'GO TAG))))))))

(DEFUN T/.SONS MACRO (X) (RPLACA X 'CONSTITUENTS)) 

(DEFUN ALTARC/.TRAIL MACRO (X) (RPLACA X 'CADR)) 

(DEFUN T/.REF MACRO (X) (RPLACA X 'IDENTITY)) 

(DEFUN F/.REF MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN T/.SONS MACRO (X) (RPLACA X 'CONSTITUENTS)) 

(DEFUN F/.SONS MACRO (X) (RPLACA X 'CADR)) 

(DEFUN T/.NODE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN F/.NODE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN STACKELT/.REGS MACRO (X) (RPLACA X 'CADR)) 

(DEFUN POPARC/.FEATURES MACRO (X) (RPLACA X 'CADDDR)) 

(DEFUN POPARC/.FORM MACRO (X) (RPLACA X 'CADR)) 

(DEFUN ARC/.ACTIONS MACRO (X) (RPLACA X 'CDDDR)) 

(DEFUN ARC/.TEST MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN ARC/.LABEL MACRO (X) (RPLACA X 'CADR)) 

(DEFUN ARC/.TYPE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN ALTARC/.ARCS MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN ALTARC/.ACONFIG MACRO (X) (RPLACA X 'CDDDR)) 

(DEFUN PATH/.STRING MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN PATH/.VAL MACRO (X) (RPLACA X 'CAR)) 

(DEFUN PATH/.ARC MACRO (X) (RPLACA X 'CADR)) 

(DEFUN PPA MACRO (X) (RPLACA X 'TH/.CONFIG)) 

(DEFUN PPATH/.STRING MACRO (X) (RPLACA X 'CADR)) 

(DEFUN PPATH/.STATE MACRO (X) (RPLACA X 'CADDDR)) 

(DEFUN PPATH/.PATH MACRO (X) (RPLACA X 'LASTELT)) 

(DEFUN PPATH/.ARC MACRO (X) (RPLACA X 'CAR)) 

(DEFUN PPATH/.ACONFIG MACRO (X) (RPLACA X 'CDR)) 

(DEFUN STACKELT/.PPATH MACRO (X) (RPLACA X 'LASTELT)) 

(DEFUN DEFINEG-GRAMMAR MACRO (X) (RPLACA X 'DEFINEG)) 

(DEFUN DEFINEG-RULES MACRO (X) (RPLACA X 'DEFINEG)) 

(DEFUN EXECUTE MACRO (X) (RPLACA X 'REMEX)) 


(DECLARE (GENPREFIX LEXFNS)) 

(DEFUN ADDLEX (STRINGPOS LEXPAIR) 
       (PROG (TEMP) 
	     (COND
	      ((SETQ TEMP (ASSQ STRINGPOS LEXTABLE))
	       (NCONC TEMP (LIST LEXPAIR)))
	      (T
	       (SETQ LEXTABLE
		     (NCONC LEXTABLE
			    (LIST (SETQ TEMP (LIST STRINGPOS
						   LEXPAIR)))))))
	     (RETURN TEMP))) 

(DEFUN BACKLEX (SP2) 
       (PROG (T1) 
	     (COND
	      ((NOT (SETQ T1 (ASSQ (CDR SP2) LEXBACK)))
	       (SETQ LEXBACK
		     (NCONC LEXBACK
			    (LIST (SETQ T1 (LIST (CDR SP2))))))))
	     (NCONC T1 (LIST STRINGPOS)))) 

(DEFUN GETLEX (STRINGPOS) (CDR (ASSQ STRINGPOS LEXTABLE))) 

(DEFUN LEXALIZE (STRING)
       (LEXALIZE1 STRING NIL))

(DEFUN LEXALIZE1 (STRING PARENT-LEX) 
       (COMMENT LEXALIZE TAKES A STRING AND RETURNS A LIST OF
		POSSIBLE LEX /. (CDR STRING) PAIRS WHICH CAN BE
		OBTAINED FROM IT BY SUBSTITUTION AND COMPOUND
		COMPRESSION)
       (PROG (LEX LEXLIST LOC CONTINUE TEMP) 
	     (SETQ LEX (CAR STRING))
	     (SETQ LEXLIST (LIST STRING))
	     (COND ((NULL (SETQ TEMP (GET LEX 'COMPOUNDS)))
		    (GO SUBSTITUTE)))
	     (SETQ CONTINUE (CDR STRING))
	     (WHILE (AND TEMP
			 CONTINUE
			 (SETQ LOC (ASSQ (CAR CONTINUE) TEMP)))
		    (COND ((CADR LOC)
			   (SETQ LEXLIST
				 (CONS (CONS (CADR LOC)
					     (CDR CONTINUE))
				       LEXLIST))))
		    (SETQ TEMP (CDDR LOC))
		    (SETQ CONTINUE (CDR CONTINUE)))
	SUBSTITUTE
	     (SETQ PARENT-LEX (CONS LEX PARENT-LEX))
	     (SETQ 
	      LEXLIST
	      (NCONC
	       (MAPCAN 
		(FUNCTION (LAMBDA (X)(COND ((MEMQ (CAR X) PARENT-LEX)
					    (PRINC '|!CIRCULAR SUBSTITUTE! |)
					    (PRIN1 PARENT-LEX)
					    (TERPRI)
					    NIL)
					   (T (LEXALIZE1 (APPEND X (CDR STRING))
							 PARENT-LEX)))))
		(GET LEX 'SUBSTITUTE))
	       LEXLIST))
	END  (RETURN LEXLIST))) 

(DEFUN LEXPAIRS (STRINGPOS) 
       (PROG (TEMP LEX VAL) 
	L0   (SETQ LEX (CAR STRINGPOS))
	     (COND
	      ((LISTP LEX)
	       (SETQ VAL
		     (LIST STRINGPOS
			   (CONS 'LPAREN
				 (APPEND LEX
					 (CONS 'RPAREN
					       (CDR STRINGPOS)))))))
	      ((OR (NUMBERP LEX) (NULL LEX))
	       (SETQ VAL (LIST STRINGPOS)))
	      ((OR (DICTFETCHED LEX) (MORPH LEX NIL NIL))
	       (SETQ VAL (LEXALIZE STRINGPOS)))
	      ((SETQ TEMP (PUNCTALIZE STRINGPOS))
	       (SETQ VAL (MAPCAN (FUNCTION LEXPAIRS) TEMP)))
	      ((AND DICTFILE (DICTFETCH LEX))
	       (SETQ VAL (LEXALIZE STRINGPOS)))
	      (REQUESTDEF (REQUESTDEF LEX) (GO L0))
	      (T (&PRIN1 'UNKNOWN/ WORD:/  T)
		 (&PRINT LEX T)
		 (SETQ VAL NIL)))
	     (RETURN VAL))) 

(DEFUN PUNCTALIZE (STRING) 
       (PROG (TEMP LOC NLEX LEX VAL) 
	L0   (SETQ LEX (CAR STRING))
	     (SETQ TEMP (UNPACK LEX))
	     (COND ((NULL (CDR TEMP)) (RETURN NIL))
		   ((AND (MEMQ (CAR TEMP) PUNCTUATION)
			 (NOT (EQ (CAR TEMP) '/')))
		    (SETQ STRING (CONS (CAR TEMP)
				       (CONS (PACK (CDR TEMP))
					     (CDR STRING))))
		    (SETQ VAL (NCONC VAL (LIST STRING)))
		    (GO L0)))
	     (SETQ LOC PUNCTUATION)
	     (WHILE (AND LOC (NOT (SETQ NLEX (MEMQ (CAR LOC) TEMP))))
		    (SETQ LOC (CDR LOC)))
	     (COND ((EQ (CAR NLEX) '/')
		    (SETQ STRING
			  (CONS (PACK (FIRSTPART TEMP NLEX))
				(CONS (PACK NLEX) (CDR STRING))))
		    (SETQ VAL (NCONC VAL (LIST STRING)))
		    (GO L0))
		   ((CDR NLEX)
		    (SETQ STRING
			  (CONS (PACK (FIRSTPART TEMP NLEX))
				(CONS (CAR NLEX)
				      (CONS (PACK (CDR NLEX))
					    (CDR STRING)))))
		    (SETQ VAL (NCONC VAL (LIST STRING)))
		    (GO L0))
		   (NLEX (SETQ STRING
			       (CONS (PACK (FIRSTPART TEMP NLEX))
				     (CONS (CAR NLEX) (CDR STRING))))
			 (SETQ VAL (NCONC VAL (LIST STRING)))
			 (GO L0)))
	     (RETURN VAL))) 

(DEFUN PUTLEX (STRINGPOS LEXLIST) 
       (PROG (TEMP) 
	     (COND ((NOT (SETQ TEMP (ASSQ STRINGPOS LEXTABLE)))
		    (SETQ LEXTABLE
			  (NCONC LEXTABLE
				 (LIST (SETQ TEMP
					     (LIST STRINGPOS)))))))
	     (RETURN (RPLACD TEMP LEXLIST)))) 

(DECLARE (GENPREFIX DICTFN)) 

(IF-FOR-MACLISP

(*ARRAY 'INTER-TABLE 'READTABLE) 
)

(IF-FOR-MACLISP
((LAMBDA (READTABLE) (SETSYNTAX 12 (STATUS SYNTAX 40) NIL)	       
		     (SETSYNTAX 47 2 47)			       ;SINGLE QUOTE
		     (SETSYNTAX 133 (STATUS SYNTAX 50) 133)   ;OPEN-BRACKET INTO PAREN
		     (SETSYNTAX 93. (STATUS SYNTAX 41.) 93.)	       
		     (SETSYNTAX 37. (STATUS SYNTAX 47.) NIL)	       
		     (SETSYNTAX 39. 2. 39.)			       
		     (SETSYNTAX 47. 2. NIL)			       
		     (SETSYNTAX 44. 2. NIL)			       
		     (SETSYNTAX 59. 65. 59.))
 (GET 'INTER-TABLE 'ARRAY))
);MACLISP

(IF-FOR-MACLISP
(DECLARE (SPECIAL WOODS-DICTIONARY-FILE))
);MACLISP


(IF-FOR-MACLISP
(DEFUN DICTFETCH (WORD) 
       (PROG (DFILE BEG END MID TEST ECHOFILES) 
	     (SETQ ECHOFILES NIL)			;DON'T DRIBBLE FROM THE DICTIONARY
	     (COND ((DICTFETCHED WORD) (RETURN (PLIST WORD)))
		   (TRACE (PRINC '/;/ FETCHING/ ) (PRINC WORD) (TERPRI)))
	L0   (COND ((NULL DICTFILE) (RETURN NIL))
		   ((MEMQ WORD DICTFETCHFAILS) (RETURN NIL))
		   ((NOT (AND (BOUNDP WOODS-DICTIONARY-FILE) WOODS-DICTIONARY-FILE))
		    (SETQ WOODS-DICTIONARY-FILE (OPEN DICTFILE 'IN))))
	     (COND ((NOT WOODS-DICTIONARY-FILE)
		    (&PRIN1 'CAN/'T/ OPEN/ DICTFILE/;/  T)
		    (GO LH)))
	     (SETQ DFILE WOODS-DICTIONARY-FILE)
             (SETQ END (FILE-LENGTH DFILE))
	     (COND ((AND DICTFILEBEG
			 (SFPTR DFILE DICTFILEBEG)
			 (EQ (READCH DFILE) '[))
		    (SETQ BEG DICTFILEBEG)
		    (GO L1))
		   (DICTFILEBEG (&PRIN1 'CORRECTING/ ERRONEOUS/ DICTFILEBEG/  T)
				(&PRINT DICTFILEBEG T)))
	     (COND ((NOT (SETQ BEG (SCAN-FILE-FOR '[ DFILE NIL NIL NIL NIL)))
		    (&PRIN1 'CAN/'T/ FIND/ LEFT/ BRACKET/ ON/ DICTFILE:/  T)
		    (GO LH))
		   (T (SETQ DICTFILEBEG BEG)))
	L1   (SETQ MID (// (+ BEG END) 2.))
	     (COND ((NOT (SETQ TEST (SCAN-FILE-FOR '[ DFILE MID END NIL NIL)))
		    (SETQ TEST BEG)
		    (SETQ END MID)))
	     (SELECTQ (FILEMATCH WORD DFILE (ADD1 TEST))
		      (EQUAL (SFPTR DFILE TEST)
			     (APPLY (FUNCTION DDEF)
				    ((LAMBDA (READTABLE) (READ DFILE))
				     (GET 'INTER-TABLE 'ARRAY)))
			     (PUTPROP WORD T 'DICTFETCHED)
;			     (CLOSEF DFILE)
			     (MAPC 
			      (FUNCTION (LAMBDA (X) (COND ((NOT (DICTFETCHED X))
							   (DICTFETCH X)))))
			      (RELATEDWORDS WORD))
			     (RETURN (PLIST WORD)))
		      (LESS (COND ((EQ TEST BEG) (GO FAIL))
				  (T (SETQ END MID) (GO L1))))
		      (GREATER (COND ((SETQ BEG
					    (SCAN-FILE-FOR '[ DFILE (ADD1 TEST) END NIL NIL))
				      (GO L1))
				     (T (GO FAIL))))
		      (GO FAIL))
	LH   (&PRINT DICTFILE T)
	     (COND (PHELP (HELPER DF* HELPER) (GO L0))
		   (T (SETQ DICTFILE NIL) ;(CLOSEF DFILE)
		      (RETURN NIL)))
       FAIL  (PUTPROP WORD NIL 'DICTFETCHED)
             (SETQ DICTFETCHFAILS (CONS WORD DICTFETCHFAILS))
;	     (CLOSEF DFILE)
	     (RETURN NIL)))
);MACLISP


(DEFUN DICTFETCHED (X) (OR (NULL X)			;BUG FIX -DON'T PUTPROP NIL
			   (GETL X '(DICTFETCHED))))

;DICTFETCH FOR LISP-MACHINE
;ASSUMES DICTIONARY STRING IN WOODS-DICTIONARY-ARRAY
; ..SEE GOBBLE-DICTIONARY, MAKE-DICTIONARY-ARRAY

(IF-FOR-LISPM
(DECLARE (SPECIAL WOODS-DICTIONARY-ARRAY))
);MACLISP

(IF-FOR-LISPM
(DEFUN DICTFETCH (WORD)
    (PROG (LO IDX HI TEM)
      (COND ((DICTFETCHED WORD) (RETURN (PLIST WORD)))
	    (TRACE (PRINC "; FETCHING ") (PRINC WORD) (TERPRI)))
      (SETQ LO 0 HI (ARRAY-LENGTH WOODS-DICTIONARY-ARRAY))
  LUP (SETQ IDX (// (+ LO HI) 2))
      (COND ((ALPHALESSP WORD (CAR (SETQ TEM (AR-1 WOODS-DICTIONARY-ARRAY IDX))))
             (AND (= IDX LO) (GO FAIL))
             (SETQ HI IDX)
             (GO LUP))
            ((STRING-EQUAL (STRING WORD) (CAR TEM))
             (APPLY (FUNCTION DDEF)
                    (READ-FROM-STRING 
                     (STRING-APPEND "(" (CAR TEM) " " (CDR TEM) ")" )))
             (PUTPROP WORD IDX 'DICTFETCHED)
	     (MAPC
               (FUNCTION (LAMBDA (X) (DICTFETCH X)))
               (RELATEDWORDS WORD))
             (RETURN (PLIST WORD)))
            (T (AND (= (1+ IDX) HI) (GO FAIL))
               (SETQ LO IDX)
               (GO LUP))) 
  FAIL (PUTPROP WORD NIL 'DICTFETCHED)
       (COND (TRACE (PRINC "; NOT FOUND") (TERPRI)))
       (RETURN NIL)
))
);LISPM

;(DEFUN DICTFETCH (WORD) 
;       (PROG (DFILE BEG END MID TEST) 
;	     (COND (TRACE (PRINC '/;/ FETCHING/ ) (PRINC WORD) (TERPRI)))
;	L0   (COND ((NULL DICTFILE) (RETURN NIL))
;		   ((MEMQ WORD DICTFETCHFAILS) (RETURN NIL))
;		   ((NOT (INFILE DICTFILE))
;		    (&PRIN1 'CAN/'T/ OPEN/ DICTFILE/;/  T)
;		    (GO LH)))
;	     (SETQ DFILE (INFILEP DICTFILE))
;	     (SFPTR DFILE -1.)
;	     (SETQ END (SFPTR DFILE 0.))
;	     (COND ((AND DICTFILEBEG (SFPTR DFILE DICTFILEBEG) (EQ (*READC DFILE) '[))
;		    (SETQ BEG DICTFILEBEG)
;		    (GO L1))
;		   (DICTFILEBEG (&PRIN1 'CORRECTING/ ERRONEOUS/ DICTFILEBEG/  T)
;				(&PRINT DICTFILEBEG T)))
;	     (COND ((NOT (SETQ BEG (FILEPOS '[ DFILE NIL NIL NIL NIL)))
;		    (&PRIN1 'CAN/'T/ FIND/ LEFT/ BRACKET/ ON/ DICTFILE:/  T)
;		    (GO LH))
;		   (T (SETQ DICTFILEBEG BEG)))
;	L1   (SETQ MID (// (+ BEG END) 2.))
;	     (COND ((NOT (SETQ TEST (FILEPOS '[ DFILE MID END NIL NIL)))
;		    (SETQ TEST BEG)
;		    (SETQ END MID)))
;	     (SELECTQ (FILEMATCH WORD DFILE (ADD1 TEST))
;		      (EQUAL (SFPTR DFILE TEST)
;			     (APPLY (FUNCTION DDEF)
;				    ((LAMBDA (READTABLE) (*READ DFILE))
;				     (GET 'INTER-TABLE 'ARRAY)))
;			     (CLOSEF DFILE)
;			     (MAPC 
;			      (FUNCTION (LAMBDA (X) (DICTFETCH X)))
;			      (RELATEDWORDS WORD))
;			     (RETURN (PLIST WORD)))
;		      (LESS (COND ((EQ TEST BEG) (GO FAIL)) (T (SETQ END MID) (GO L1))))
;		      (GREATER (COND ((SETQ BEG
;					    (FILEPOS '[ DFILE (ADD1 TEST) END NIL NIL))
;				      (GO L1))
;				     (T (GO FAIL))))
;		      (OTHERWISE (GO FAIL)))
;	LH   (&PRINT DICTFILE T)
;	     (COND (PHELP (HELPER DF* HELPER) (GO L0))
;		   (T (SETQ DICTFILE NIL) (CLOSEF DFILE) (RETURN NIL)))
;	FAIL (SETQ DICTFETCHFAILS (CONS WORD DICTFETCHFAILS))
;	     (CLOSEF DFILE)
;	     (RETURN NIL)))

(DEFUN FILEMATCH (WORD FILE POS) 
       (PROG (C1 C2 STRING) 
	     (SFPTR FILE POS)
	     (SETQ STRING (MKSTRING WORD))
	L1   (COND ((NULL (SETQ C1 (GNC STRING)))
		    (COND ((MEMQ (READCH DFILE) '(/  /
)) (RETURN 'EQUAL))	  (T (RETURN 'LESS))))
		   ((EQ C1 (SETQ C2 (READCH DFILE))) (GO L1))
		   ((ALPHALESSP C1 C2) (RETURN 'LESS))
		   (T (RETURN 'GREATER)))))

(DEFUN MORPH (LEX CAT CMODE) 
       (COMMENT MORPHOLOGICAL ANALYSIS ROUTINE -- USED IN LEXIC AND
		ASSIST/. CMODE IS USED BY ASSIST TO PERMIT
		MORPHTABCHECK TO IGNORE CONDITIONS ON THE ROOT)
       (PROG (TEMP MLIST WORD *) 
	     (COND ((NULL CAT)
		    (MAPC 
		     (FUNCTION (LAMBDA (CAT) (MORPH LEX CAT CMODE)))
		     MCATEGORIES)
		    (RETURN (PLIST LEX))))
	L0   (COND ((OR (LISTP LEX) (NUMBERP LEX) (NULL LEX))
		    (RETURN NIL))
		   ((SETQ TEMP (DICTCHECK LEX CAT)) (RETURN NIL)))
	MORPH(COND ((NOT (SETQ MLIST (CDR (ASSQ CAT MORPHTABLE))))
		    (SETQ TEMP NIL)
		    (GO MTST)))
	     (SETQ WORD (UNPACK LEX))
	     (SETQ TEMP (MAPCAN (FUNCTION MORPHTABCHECK) MLIST))
	MTST (COND ((OR CMODE
			(NOT (SETQ MLIST (CDR (ASSQ CAT MORPHTESTS)))))
		    (GO RECORD)))
	     (SETQ * LEX)
	     (SETQ TEMP (NCONC TEMP
			       (MAPCAN (FUNCTION MORPHTSTCHECK)
				       MLIST)))
	RECORD
	     (COND ((NULL TEMP) (RETURN NIL))
		   (T (PUTPROP LEX TEMP CAT)))
	END  (RETURN TEMP))) 

(DEFUN MORPHTABCHECK (TABLE) 
       (PROG (STEM * TEMP) 
	     (COND ((NULL (SETQ STEM (FIRSTPART WORD (CAR TABLE))))
		    (RETURN NIL))
		   ((CADR TABLE)
		    (SETQ * (PACK (APPEND STEM (CADR TABLE)))))
		   (T (SETQ * (PACK STEM))))
	     (COND ((AND (NOT CMODE)
			 (DICTFETCH *)
			 (EVAL (CADDDR TABLE)))
		    (RETURN (LIST (CONS * (CDDDDR TABLE)))))
		   ((AND CMODE (NOT (EVAL (CADDDR TABLE))))
		    (RETURN (LIST (CONS * (CDDDDR TABLE)))))
		   (T (RETURN NIL))))) 

(DEFUN MORPHTSTCHECK (TAB) 
       (COND ((EVAL (CAR TAB)) (LIST (EVAL (CADR TAB)))))) 

;;;*** CONVERTING MAPCON TO *MAPCON

(DEFUN RELATEDWORDS (WORD) 
       (COND
	((GET WORD 'RELATEDWORDS))
	(T
	 (*MAPCON
	  (FUNCTION
	   (LAMBDA (X) 
	    (COND
	     ((MEMQ (CAR X) '(COMPOUNDS SUBSTITUTE))
	      (KILL NIL (MEMBERS (LEAVES (CADR X)))))
	     ((MEMQ (CAR X) CATEGORIES)
	      (COND ((AND (LISTP (CADR X)) (ATOM (CAADR X)))
		     (LIST (CAADR X)))
		    ((AND (LISTP (CADR X)) (LISTP (CAADR X)))
		     (MAPCAN (FUNCTION (LAMBDA (Y) 
					       (COND ((ATOM (CAR Y))
						      (LIST (CAR Y)))
						     (T NIL))))
			     (CADR X))))))))
	  (PLIST WORD)
	  (FUNCTION CDDR))))) 


(DEFINEV (CATEGORIES (ADJ ADV
			  DET
			  N
			  NEG
			  NPR
			  PASTPART
			  PREP
			  PRESPART
			  PUNCT
			  QDET
			  QWORD
			  V))
	 (MCATEGORIES (N V ADJ ADV))) 


(DECLARE (GENPREFIX MORPHO)) 

(DEFINEV (MORPHTABLE ((N ((S) NIL N (PLURAL -S) (NUMBER PL))
			 ((E S) NIL N (PLURAL -ES) (NUMBER PL))
			 ((I E S) (Y) N (PLURAL -ES) (NUMBER PL))
			 ((E N) NIL N (PLURAL -EN) (NUMBER PL)))
		      (V ((E S)
			  NIL
			  V
			  (CTYPE ES-ED)
			  (TNS PRESENT)
			  (PNCODE 3SG))
			 ((I E S)
			  (Y)
			  V
			  (CTYPE ES-ED)
			  (TNS PRESENT)
			  (PNCODE 3SG))
			 ((S)
			  NIL
			  V
			  (OR (CTYPE S-ED) (CTYPE S-D))
			  (TNS PRESENT)
			  (PNCODE 3SG))
			 ((E D)
			  NIL
			  V
			  (OR (CTYPE S-ED) (CTYPE ES-ED))
			  (TNS PAST)
			  (PASTPART))
			 ((I E D)
			  (Y)
			  V
			  (CTYPE ES-ED)
			  (TNS PAST)
			  (PASTPART))
			 ((E D)
			  (E)
			  V
			  (CTYPE S-D)
			  (TNS PAST)
			  (PASTPART))
			 ((I N G)
			  NIL
			  V
			  (OR (CTYPE S-ED) (CTYPE ES-ED))
			  (PRESPART))
			 ((I N G) (E) V (CTYPE S-D) (PRESPART)))
		      (ADJ ((E R)
			    NIL
			    ADJ
			    (COMPFORM ER-EST)
			    (COMPARATIVE))
			   ((E R)
			    (E)
			    ADJ
			    (COMPFORM R-ST)
			    (COMPARATIVE))
			   ((I E R)
			    (Y)
			    ADJ
			    (COMPFORM ER-EST)
			    (COMPARATIVE))
			   ((E S T)
			    NIL
			    ADJ
			    (SUPFORM ER-EST)
			    (SUPERLATIVE))
			   ((E S T)
			    (E)
			    ADJ
			    (SUPFORM R-ST)
			    (SUPERLATIVE))
			   ((I E S T)
			    (Y)
			    ADJ
			    (SUPFORM ER-EST)
			    (SUPERLATIVE)))))
	 (MORPHTESTS ((INTEGER ((NUMBERP *) (LIST *)))
		      (NPR ((OR (NUMBERP *)
				(TIMEP *)
				(AND (LISTP *)
				     (MEMB (CAR *) '(^ ^^)))
				(SAMPLEP *)
				(DOCP *)
				(CONTRACTP *))
			    (LIST *)))
		      (LIST ((AND (LISTP *)
				  (NOT (MEMB (CAR *) '(^ ^^))))
			     (LIST *)))
		      (ADJ ((HYPHENADJ *) (LIST *)))))) 

(&PRINT 'FUNCTIONS: T) 

(&PRINT 'MORPHOLOGYFNS T) 

(SETQ MORPHOLOGYFNS '(CTYPE PLURAL
			    COMPFORM
			    SUPFORM
			    DOCP
			    SAMPLEP
			    TIMEP
			    CONTRACTP
			    HYPHENADJ)) 

(DEFUN CTYPE FEXPR (*ARGS*) 
       ((LAMBDA (ENDING) (COMMENT PREDICATE FOR MORPHTABLE ENTRIES)
			 (EQ ENDING (GET * 'V)))
	(CAR *ARGS*))) 

(DEFUN PLURAL FEXPR (*ARGS*) 
       ((LAMBDA (ENDING) (COMMENT PREDICATE FOR MORPHTABLE ENTRIES)
			 (EQ ENDING (GET * 'N)))
	(CAR *ARGS*))) 

(DEFUN COMPFORM FEXPR (*ARGS*) 
       ((LAMBDA (ENDING) (COMMENT PREDICATE FOR MORPHTABLE ENTRIES)
			 (EQ ENDING (GET * 'ADJ)))
	(CAR *ARGS*))) 

(DEFUN SUPFORM FEXPR (*ARGS*) 
       ((LAMBDA (ENDING) (COMMENT PREDICATE FOR MORPHTABLE ENTRIES)
			 (EQ ENDING (GET * 'ADJ)))
	(CAR *ARGS*))) 


(DEFUN CONTRACTP (WORD) 
       (PROG (-FLG /#FLG LETFLG PCTFLG) 
	     (MAPC 
	      (FUNCTION (LAMBDA (X) 
				(COND ((EQ X '-) (SETQ -FLG T))
				      ((NUMBERP X) (SETQ /#FLG T))
				      ((MEMQ X PUNCTUATION)
				       (SETQ PCTFLG T))
				      (T (SETQ LETFLG T)))))
	      (UNPACK WORD))
	     (RETURN (AND -FLG /#FLG LETFLG (NOT PCTFLG))))) 

(DEFUN HYPHENADJ (WORD) 
       (PROG (-FLG /#FLG LETFLG PCTFLG) 
	     (MAPC 
	      (FUNCTION (LAMBDA (X) 
				(COND ((EQ X '-) (SETQ -FLG T))
				      ((NUMBERP X) (SETQ /#FLG T))
				      ((MEMQ X PUNCTUATION)
				       (SETQ PCTFLG T))
				      (T (SETQ LETFLG T)))))
	      (UNPACK WORD))
	     (RETURN (AND -FLG (NOT /#FLG) LETFLG (NOT PCTFLG))))) 

(DECLARE (GENPREFIX SMALLD)) 

(DEFINEDICT (! PUNCT *)
	    (% SUBSTITUTE ((PCT)))
	    (/' CLISPTYPE (0. . -1.) LISPFN QUOTE UNARYOP T)
	    (/,)
	    (- CLISPTYPE -1. LISPFN IMINUS UNARYOP T)
	    (/. CLISPTYPE -1. PUNCT *)
	    (/. CLISPTYPE -1. PUNCT *)
	    (// CLISPTYPE (3. . 2.) LISPFN IQUOTIENT PUNCT *)
	    (: PUNCT *)
	    (/; PUNCT *)
	    (? PUNCT *)
	    (AC SUBSTITUTE
		((ACTINIUM))
		MARKERS
		(ELEMENT)
		NPR
		*
		NASA
		(0. AC ACTINIUM)
		TABFORM
		AC)
	    (ADD VPREPS (TO) V S-ED SRULES (S:ADD S:ADDLINE))
	    (ADDLINE V IRR SRULES (S:ADDLINE))
	    (AGE N
		 -S
		 NRULES
		 (N:AGE/' NIL N:AGE)
		 MARKERS
		 (QUANTITY NONSPECIFIC))
	    (ANALYSIS N
		      IRR
		      MARKERS
		      (ANALYSIS QUANTITY)
		      NASA
		      (6. ANALYSIS)
		      NRULES
		      (N:ANALYSIS N:MODAL-ANALYSIS)
		      RRULES
		      (R:GREATERVAL R:LESSVAL
				    R:AROUND
				    R:ANALYSIS-REF
				    R:ANALYSIS-TAG)
		      NPREPS
		      (OF IN FOR))
	    (ANALYZE V
		     S-D
		     FEATURES
		     (PASSIVE TRANS)
		     SRULES
		     (S:ANALYZE))
	    (AND CLISPINFIX
		 AND
		 CLISPTYPE
		 24.
		 NRULES
		 (NNN2)
		 MARKERS
		 (TOPIC)
		 CONJ
		 *
		 FEATURES
		 (COORDINATE)
		 COMPOUNDS
		 ((VICE NIL (VERSA AND//VICE//VERSA)))
		 NASA
		 (4. AND))
	    (ANYONE PRO *)
	    (APOLLO11 NPR * MARKERS (FILE))
	    (APOLLO11/.PATCH NPR * MARKERS (FILE))
	    (ATOM N -S)
	    (AVERAGE N
		     -S
		     V
		     S-D
		     ADJ
		     *
		     NASA
		     (6. AVERAGE)
		     NRULES
		     (N:AVERAGE))
	    (BASALT N -S MARKERS (SAMPLE ROCK ELT) NRULES (N:BASALT))
	    (BE V
		(BE (UNTENSED))
		MARKERS
		(ELEMENT)
		SRULES
		(S:BE-INTERESTED S:BE-ABOUT
				 S:SAMPLE-BE-COMPOSED
				 S:BE-IN2
				 NIL
				 S:BE-IN
				 S:BE-LESS-VAL
				 S:BE-GREATER-VAL
				 S:BE-AROUND
				 SS32
				 SS33
				 SS34
				 SS35
				 SS36
				 SS30
				 NIL
				 S:BE-MEMBER*
				 NIL
				 S:BE-MEMBER
				 S:BE-EQUAL
				 NIL
				 SS41)
		FEATURES
		(PASSIVE TRANS COPULA FORCOMP INTRANS)
		TABFORM
		BE
		INFLEX
		(AM ARE IS WAS WERE BEING BEEN)
		NASA
		(1. BE)
		N
		(BERYLLIUM))
	    (BETWEEN PREP *)
	    (BRECCIA N
		     -S
		     MARKERS
		     (ROCK SAMPLE ELT)
		     NASA
		     (3. BRECCIA)
		     NRULES
		     (N:TYPEC))
	    (CAME V (COME (TNS PAST)))
	    (CHANGE V
		    S-D
		    N
		    -S
		    FEATURES
		    (TRANS INTRANS PASSIVE)
		    NASA
		    (1. CHANGE)
		    SRULES
		    (S:CHANGE)
		    VPREPS
		    (TO))
	    (CLOSER ADJ (CLOSE (COMPARATIVE)))
	    (COMPARE V
		     S-D
		     FEATURES
		     (TRANS INTRANS PASSIVE)
		     VPREPS
		     (TO WITH AGAINST)
		     SRULES
		     (S:COMPARE))
	    (COMPOSITION N
			 -S
			 MARKERS
			 (ANALYSIS QUANTITY)
			 COMPOUNDS
			 ((B COMPOSITION-B) (A COMPOSITION-A))
			 NPREPS
			 (IN)
			 NRULES
			 (N:COMPOSITION))
	    (CONCENTRATION N
			   -S
			   MARKERS
			   (QUANTITY)
			   NPREPS
			   (OF IN FOR)
			   NRULES
			   (N:AVG-CONC? NIL
					N:CONCENTRATION
					NIL
					N:MODAL-CONC))
	    (CONTAIN V
		     S-ED
		     FEATURES
		     (PASSIVE TRANS)
		     NASA
		     (1. CONTAIN)
		     SRULES
		     (S:SAMPLE-HAVE/#1 S:SAMPLE-HAVE/#2
				      NIL
				      S:SAMPLE-CONTAIN
				      NIL
				      S:DISCOVER)
		     MARKERS
		     (DISCOVER))
	    (CONTENT N
		     -S
		     ADJ
		     *
		     MARKERS
		     (CONCENTRATION QUANTITY)
		     NPREPS
		     (IN))
	    (DEFINE V S-D)
	    (DELETE V S-D SRULES (S:DELETE S:DELETE/#))
	    (DO CLISPTYPE
		NIL
		V
		IRR
		AUX
		(DO (TNS PRESENT) (PNCODE X3SG))
		FEATURES
		(PASSIVE TRANS INTRANS)
		SRULES
		(S:DO-ANALYSIS))
	    (DOCUMENT N
		      -S
		      MARKERS
		      (DOCUMENT)
		      NRULES
		      (N:DOCUMENT)
		      RRULES
		      (R:N-DOC R:DOC-ON)
		      V
		      S-ED
		      FEATURES
		      (PASSIVE TRANS)
		      NPREPS
		      (ABOUT ON FOR TO OF IN))
	    (DUST MARKERS
		  (SAMPLE DUST)
		  N
		  -S
		  V
		  S-ED
		  NASA
		  (0. DUST FINES)
		  NRULES
		  (N:TYPED)
		  RRULES
		  (R:FINE R:COARSE))
	    (EDIT V S-*ED SRULES (S:EDIT))
	    (ELEMENT N
		     -S
		     MARKERS
		     (ELEMENT FIELDNAME)
		     NASA
		     (6. ELEMENT)
		     NRULES
		     (N:MAJOR-ELT NIL N:ELT)
		     TABFORM
		     ELT
		     RRULES
		     (R:ELT/#1 R:ELT/#2))
	    (EQ CLISPINFIX
		=
		CLISPTYPE
		21.
		FEATURES
		(TRANSADJ)
		MARKERS
		(RELATION)
		ADJ
		*)
	    (EQUAL CLISPTYPE 21. V S-ED ADJ *)
	    (EXIST V
		   S-ED
		   SRULES
		   (SS41)
		   FEATURES
		   (INTRANS COPULA)
		   NASA
		   (1. EXIST))
	    (FEWER COMPOUNDS
		   ((THAN FEWERTHAN))
		   ADJ
		   (FEW (COMPARATIVE)))
	    (FIND N
		  -S
		  V
		  IRR
		  MARKERS
		  (DISCOVER)
		  FEATURES
		  (TOCOMP THATCOMP TRANS PASSIVE TRANSCOMP)
		  NASA
		  (1. FIND)
		  VPREPS
		  (IN)
		  SRULES
		  (S:DISCOVER))
	    (FINE ADJ
		  *
		  N
		  -S
		  MARKERS
		  (SAMPLE DUST)
		  NASA
		  (2. FINE)
		  NRULES
		  (N:TYPED N:DUST)
		  RRULES
		  (R:FINE R:COARSE))
	    (FIX V ES-ED)
	    (FLOAT N -S V S-ED)
	    (FOR CLISPTYPE NIL PREP *)
	    (GIVE V
		  IRR
		  MARKERS
		  (GIVE)
		  SRULES
		  (S:GIVE S:PRINTFILE)
		  FEATURES
		  (PASSIVE TRANS INTRANS INDOBJ)
		  NASA
		  (1. GIVE))
	    (GO V
		IRR
		FEATURES
		(INTRANS)
		SRULES
		(SS4 SS1 NIL SS7 PS1A PS1B))
	    (GREATER ADJ
		     (GREAT (COMPARATIVE))
		     COMPOUNDS
		     ((THAN GREATERTHAN)))
	    (GREATERTHAN COMP *)
	    (HALOGEN N -S MARKERS (ELEMENT SET) NRULES (N:HALOGEN))
	    (HAVE V
		  IRR
		  AUX
		  (HAVE (TNS PRESENT) (PNCODE X3SG))
		  FEATURES
		  (PASSIVE TRANS)
		  NASA
		  (1. HAVE)
		  MARKERS
		  (CONTAIN POSSESS))
	    (HOWMUCH QDET
		     (((POSTART (COMP (ADV HOW)) MUCH) (HOWMUCH))))
	    (IN PREP
		*
		MARKERS
		(ELEMENT)
		COMPOUNDS
		((PARTICULAR IN@PARTICULAR)
		 (CONJUNCTION NIL (WITH IN//CONJUNCTION//WITH)))
		NASA
		(0. IN INDIUM)
		TABFORM
		IN)
	    (KIND N -S ADJ ER-EST MARKERS (TYPE))
	    (LAST ADJ *)
	    (LENGTH N -S)
	    (LIST V
		  S-ED
		  MARKERS
		  (GIVE DOCUMENT)
		  N
		  -S
		  FEATURES
		  (PASSIVE TRANS)
		  RRULES
		  (R:BIBLIOGRAPHY))
	    (LOAD N -S COMPOUNDS ((CARRYING LOAD-CARRYING)) V S-ED)
	    (LPAREN)
	    (MAGNETITE N MASS MARKERS (ELEMENT))
	    (MAXIMUM N IRR ADJ * NRULES (N:MAXIMUM))
	    (MINIMUM N IRR ADJ * NRULES (N:MINIMUM))
	    (MODE N
		  -S
		  NASA
		  (6. MODE)
		  NRULES
		  (N:MODAL-ANALYSIS)
		  MARKERS
		  (QUANTITY)
		  NPREPS
		  (IN))
	    (MORE COMPOUNDS
		  ((THAN MORETHAN))
		  N
		  IRR
		  ADV
		  *
		  ADJ
		  (MANY (COMPARATIVE)))
	    (MORETHAN COMP *)
	    (MORPHOLOGY N -S VALUE (MORPHTABLE MORPHTESTS))
	    (NOT CLISPINFIX ~ CLISPTYPE 24. UNARYOP T NEG (NEG))
	    (NUMBER N
		    -S
		    V
		    S-ED
		    NASA
		    (1. NUMBER)
		    NRULES
		    (N:LINE/# NIL N:NUMBER)
		    MARKERS
		    (QUANTITY)
		    NPREPS
		    (PER))
	    (OCCUR V
		   S-ED
		   FEATURES
		   (INTRANS THATCOMP)
		   SRULES
		   (S:BE-IN2 NIL S:BE-IN))
	    (OLD ADJ
		 ER-EST
		 SRULES
		 (S:OLDER NIL S:OLD)
		 NRULES
		 (N:OLDEST))
	    (ONE PRO
		 *
		 INTEGER
		 (1.)
		 COMPOUNDS
		 ((TIME ONE-TIME))
		 NRULES
		 (N:ONE)
		 RRULES
		 (R:ONE))
	    (ONES N
		  IRR
		  PRO
		  (ONE (NUMBER PL))
		  MARKERS
		  (PADDING)
		  NRULES
		  (N:ONES N:ONES-OF-PRO)
		  RRULES
		  (R:ONES))
	    (OPAQUE MARKERS (SUPERMIN PHASE MASS) ADJ * N -S)
	    (OR CLISPINFIX
		OR
		CLISPTYPE
		25.
		NRULES
		(NNN3)
		MARKERS
		(TOPIC)
		CONJ
		*
		FEATURES
		COORDINATE
		NASA
		(0. OR))
	    (OVERALL ADJ
		     *
		     MARKERS
		     (PHASE)
		     MIN
		     2.
		     NASA
		     (1. OVERALL)
		     N
		     IRR)
	    (PCT  SUBSTITUTE ((PERCENT)))
	    (PERCENT N MASS MARKERS (UNIT CONCENTRATION))
	    (PERCENTAGE N -S MARKERS (CONCENTRATION QUANTITY))
	    (PERTAIN V
		     S-ED
		     SRULES
		     (S:PERTAIN)
		     FEATURES
		     (INTRANS)
		     MARKERS
		     (PERTAIN)
		     PARTICLES
		     (TO))
	    (PHASE N
		   -S
		   MARKERS
		   (PHASE FIELDNAME)
		   V
		   S-D
		   NASA
		   (6. PHASE)
		   NRULES
		   (N:PHASE)
		   TABFORM
		   MIN
		   RRULES
		   (R:PHASE R:PHASE/#2)
		   NPREPS
		   (IN))
	    (POSSESS V ES-ED SRULES (S:POSSESS))
	    (PPM)
	    (PUBLISH V
		     S-ED
		     FEATURES
		     (PASSIVE TRANS INTRANS)
		     MARKERS
		     (WRITE))
	    (RARE ADJ R-ST COMPOUNDS ((EARTH RARE//EARTH)))
	    (RARE//EARTH N -S)
	    (RATIO N
		   -S
		   NASA
		   (6. RATIO)
		   NRULES
		   (N:RATIO)
		   MARKERS
		   (QUANTITY)
		   NPREPS
		   (IN))
	    (REFERENCE N
		       -S
		       MARKERS
		       (DOCUMENT FIELDNAME)
		       TABFORM
		       REF
		       NPREPS
		       (TO ON))
	    (REPORT N
		    -S
		    V
		    S-ED
		    FEATURES
		    (PASSIVE TRANS INTRANS)
		    SRULES
		    (S:DISCOVER S:GIVE)
		    MARKERS
		    (DISCOVER GIVE DOCUMENT))
	    (RETURN V S-ED FEATURES (PASSIVE TRANS INTRANS))
	    (ROCK N
		  -S
		  MARKERS
		  (SAMPLE FIELDNAME)
		  NASA
		  (6. ROCK)
		  NRULES
		  (N:TYPEA N:TYPEB N:TYPEC N:TYPED NIL N:ROCK)
		  TABFORM
		  SN)
	    (RUN V
		 (RUN (UNTENSED) (PASTPART))
		 FEATURES
		 (TRANS INTRANS PASSIVE)
		 SRULES
		 (S:RUN-A-SEARCH S:DO-ANALYSIS)
		 MARKERS
		 (RUN))
	    (SAMPLE N
		    -S
		    MARKERS
		    (SAMPLE ROCK FIELDNAME)
		    NASA
		    (6. SAMPLE)
		    NRULES
		    (N:TYPEA N:TYPEB N:TYPEC N:TYPED NIL N:SAMPLE)
		    RRULES
		    (R:SAMPLE-WITH R:SAMPLE-WITH-COMP)
		    TABFORM
		    SN
		    NPREPS
		    (WITH))
	    (SOME DET * N MASS)
	    (SOMEONE PRO *)
	    (STEP N -S)
	    (TO CLISPTYPE NIL PREP *)
	    (TYPE N
		  -S
		  V
		  S-D
		  COMPOUNDS
		  ((A TYPE//A) (B TYPE//B) (C TYPE//C) (D TYPE//D))
		  FEATURES
		  (PASSIVE TRANS INTRANS)
		  MARKERS
		  (PADDING)
		  NRULES
		  (N:SAMPLETYPE N:ROCKTYPE)
		  RRULES
		  (R:SAMPLETYPE R:ROCKTYPE))
	    (TYPE N
		  -S
		  V
		  S-D
		  COMPOUNDS
		  ((A TYPE//A) (B TYPE//B) (C TYPE//C) (D TYPE//D))
		  FEATURES
		  (PASSIVE TRANS INTRANS)
		  MARKERS
		  (PADDING)
		  NRULES
		  (N:SAMPLETYPE N:ROCKTYPE)
		  RRULES
		  (R:SAMPLETYPE R:ROCKTYPE))
	    (TYPE//A MARKERS (ROCK SAMPLE) ADJ *)
	    (TYPE//B MARKERS (ROCK SAMPLE) ADJ *)
	    (TYPE//C MARKERS (ROCK SAMPLE) ADJ *)
	    (TYPE//D MARKERS (SAMPLE) ADJ *)
	    (WHAT COMPOUNDS
		  ((TIME WHATTIME))
		  QWORD
		  (((NP (DET WHQ) (N THING) (NU SG//PL)) (SUBJ//OBJ)))
		  QDET
		  (WHQ)
		  DET
		  (WHQ))
	    (WHICH QDET
		   (WHICHQ)
		   DET
		   *
		   QWORD
		   (((NP (DET WHQ) (N THING) (NU SG//PL))
		     (SUBJ//OBJ))))
	    (WHILE CLISPTYPE NIL CONJ * FEATURES (SUBORDINATE))
	    (WRITE V IRR FEATURES (TRANS INTRANS PASSIVE INDOBJ))) 








