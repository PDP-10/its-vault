;READ WOODS;MACROS > IN BEFORE TRYING TO THIS INTERPRETIVELY -*-LISP-*-

(DECLARE (COND ((NULL (MEMQ 'NEWIO (STATUS FEATURES)))
		(BREAK 'YOU-HAVE-TO-COMPILE-THIS-WITH-QCOMPL T))
	       ((NULL (GET 'IF-FOR-MACLISP 'MACRO))
		(LOAD '(MACROS > DSK WOODS)))))

(IF-FOR-LISPM
(DECLARE (QUOTED-ARGS 
  FORCE  PUSH  SCANSTACK  SYSCONJ  ADDL  ADDR 
  CAT  GETF  GETR  JUMP  LIFTR  NULLR 
  SENDR  SENDRQ  SETR  SETRQ  TO  TODO 
  WRD  CHECKF  COMPARATIVE  GETROOT  MARKER  NPCHECK 
  NPREP  PNCHECK  RESUMETAG  RFEAT  SCOMP  VPARTICLE 
  VPASSIVE  VPREP  VTRANS  HELPER  MAPCV  RENAME 
  SCANCV  SETQS  THOSEV  EDITD  EDITG  REMEX 
  CTYPE  PLURAL  COMPFORM  SUPFORM  /#  MEM 
  PRED  QUANT  SSUNIONF  NEWFRAG  TABFORM))
);LISPM

(DECLARE  (SPECIAL SEM-TRACE *SPOP *TRAIL REG WHERE *SQ-VAL*)
	  (*LEXPR CONCAT))
(DECLARE (*LEXPR APPLY* EVALA)(SPECIAL *LOC*))

(DECLARE (SPECIAL /#FLG * *ACFS *STATE *X* -FLG A0 A1 ABUF ACF/# ACFS
		  ACONFIG ACT ACTION ACTIONS ADJ AHELP ALIST ALT
		  ALTARC ALTARC1 ALTCONJ ALTLEX ALTNUM ALTS ALTWFS
		  ANAPHORISM ANAPHRLST ANTECEDANTS ANTEVAR ARC ARCS
		  ARGS ASSIST ATOM ATOMS AVERAGEFLAG BEG BEGIN
		  BLOCKS C2 CAND CAT CATEGORIES CLIST CMODE CONFIG
		  CONJ CONTEXT CONTINUE DALL DET DFILE
		  DICTFETCHFAILS DICTFILE DICTFILEBEG DICTFORM
		  DICTIONARY DISCRULES ECONSES ECONSES0 EDITDV
		  EDITGV EDO END ETIME ETIME0 ETIMEFLAG EXECCOMS
		  EXECUTE FAIL FEAT FEATS FEATURES FILE FILEFNS
		  FILELST FILEMACROS FILEVARS FIRSTFLAG FLAG FORCE
		  FORKNAME FORM FOUND GETFN GLOBALVARS GVARS H1
		  HEAD HEADRULES HEADS HELP HELPER HITFILE HOLD IB
		  ICONSES ICONSES0 IDO IHELP INPUTLOGFILE
		  INPUTLOGFLAG INTENSION INTERP INTERPS INTERVALS
		  IPRINT ITIME ITIME0 ITIMEFLAG ITP KLIST L0 L1 L2
		  L3 L4 LABEL LAMS LETFLG LEX LEXBACK LEXLIST
		  LEXMODE LEXTABLE LH LISPXHISTORY LIST LOC LOGFILE
		  LOGFLAG LOOP LOWFORK LP MACROS MARKER MARKERS
		  MATCHLIST MAXBLOCKS MAXPARSES MAXREPARSES MAXTIME
		  MCATEGORIES MID MINL MINLOC MLIST MODAL MODE
		  MODEVARS MODL MORE-MOST MORPHOLOGYCOMS
		  MORPHOLOGYFNS MORPHTABLE MORPHTESTS MTST
		  MYGLOBALVARS NAME NEWRULES NEWVARS NFLAG NLAMA
		  NLAML NLEX NODE NOMOVEFLAG NOUN NP NPRRULE NU
		  OLDALTS P PAREN// PARENCOUNT PARENS PARSE
		  PARSER10COMS PARSES PARSEXPRS PARSVALS PATH
		  PAUSEFLAG PCONSES PCONSES0 PCTFLG PHELP PMODE
		  PNCODE PPATH PPRINT PPT PREFERRED PREP PRERULES
		  PREVARS PROPS PS PTIME PTIME0 PTIMEFLAG
		  PUNCTUATION PUSH PUSHSTATE QBUF QUANT QVAR
		  READBUF RECORD REFLIST REFLISTS REGS REPARSE
		  REQUESTDEF RESOLVE RETURN RHS RULELIST RULELISTS
		  RVECTOR SCAN SCNFN SCNLST SCORE0 SCORE0SENTS
		  SCORE1 SCORE1SENTS SCORE2 SCORE2SENTS SCORE3
		  SCORE3SENTS SEARCH SEARCHFLAG SEM SEM-NOUNS
		  SEM-VERBS SEMFOR SEMSUB SEMU SENTENCE SENTENCES
		  SETFN SETRUL SETRUL? SIFLAG SKIP SMP SMP2
		  SPECIFIER SPLIT/# SPLITS SREGS SSETRUL STACK
		  STACKELT START STARTCLOCK STATE STRAIL STRING
		  STRINGPOS SUBLOC SUBSTITUTE SUCCESS SUCCESSFLAG SWITCHES
		  SYNFLAG SYSCONJ SYSPROPS T2 TACONFIG TAGLIST
		  TAGMATCH TAILS TEMP TEMPLATE TEMPTRAIL TERMRULE
		  TEST TOP TOPICFLAG TOPICRULES TOPIC\AND-NP
		  TOPIC\AND-S TRACE TRACEFILE TRAIL TRAILARC
		  TRAILLABEL TRAILS TRAILTYPE TRAILV TRAILVAL
		  TREEFRAGS TRULES TST TYPE TYPEFLAG UCFS UEXPRS
		  UFNS UMACROS UNSMASH UPRINT USERFLAG USERFNS V
		  VAL VALUES VARIABLE VARIABLES VARSFLAG VBL VCFS
		  VLIST WEIGHT WFSS WFST WFST3 WFST4 WORD X XPROPS
		  XTF XTP Y)) 

(DECLARE (*EXPR WHILEM WHEREIS USERFN USED? UNWIND TRAILS TRAIL1
		TRAIL TRACEFILE TOPLEVEL? TMATCH TIMEP TERM
		TEMPMATCH TAILS1 TAILS TAG SYNONYMS?
		SUSPENDW SUSPEND SUPERLATIVE SUBSET STORALT STEP
		SPROC SPREADQM SPOP SORTREFS1 SORTREFS SHOWTIME
		SETUP SETQSM SENTPROC SENDACTP SEMSUB SEMNET
		SEMIANAPHOR SEMCONJ SEM SDIFF SCOPEVARS SCOPEFINDER
		SCAN SBUILD SAMPLEP RULES RMATCH RESOLVE REQUESTDEF
		RELTAG RELATIVIZE RELATEDWORDS REFTYPE REFSUB2
		REFSUB1 REFSUB REFQUANTS REFPTR REFP REFLOC REDO
		QUIT QSTART QGO PUTLEX PUNCTALIZE PRINTPARSES PPT1
		PPT PPR PPP PPG PPD PPATH/.STACK PPATH/.REGS
		PPATH/.HOLD PPATH/.BACK POPCONJ POP PLOG PARSER
		PARSELIST ORMATCH ORFLAG NXTVAR NPBUILD NO-MATCHES
		NEXTWRD NEWPX NEWCLASS MORPHTSTCHECK MORPHTABCHECK
		MORPH MODESET MODAL MEMBSTACK MEMBERS MEANING?
		MATCHGROUP MATCHER MARKERS LONGBLOCK LOCEX LOADFROM
		LINEP LEXPAIRS LEXIC LEXALIZE LEAVES LEAFMEMB
		LASTELT LAMTYPE KTH KILL KEYPHRASE ISOTOPE INTERP
		IMPORT IDENTITY HYPHENADJ HOLDSCAN HOLD HEAD GETTAG
		GETSENT GETREFS GETLEX FRONTED? FORCER FIRSTPART
		FIND FILEX FILEMATCH EVALLOC ENDTRACE ENDL? DWRITE
		DRULEF DOCP DICTFETCH DICTCHECK DICT? DETOUR
		DETBUILD DEFAULTSEM CONTRACTP CONSTITUENTS
		CONJSTARTS CONJSCOPE CONJOIN COMSAV COMBINATIONS
		CHOOSEALT CCHECK CATCHECK BUILD2 BUILD1 BACKUP
		BACKLEX AVERAGE? AUTHOR: ASSOCNEXT ASSIST ARGSOF
		ARGSAV ARCTEST ARCPICK ANTORDER ANTEQUANT
		ANTECEDANT ANAPHORD ALTLOC ALTCONJGEN ALTARCGEN
		ALT/.WEIGHT ALT/.STRING ALT/.STATE ALT/.STACK
		AGREEMENT ADJVERB ADJPHRSE ADDLEX ACT ABORT *FLAG)) 

(DECLARE (*FEXPR WRD WHILE VTRANS VPREP VPASSIVE VPARTICLE TRACER
		 TODO TO THOSEV TABFORM SYSCONJ SUPFORM SSUNIONF
		 SPREADQ SPLIT SHOW SETRQ SETR SETQS SENDRQ SENDR
		 SCOMP SCANSTACK SCANCV RFEAT RESUMETAG RESUME
		 RENAME REMEX QUANT Q PUSH PRED PNCHECK PLURAL
		 NULLR NPREP NPR NPCHECK NOR NEWRULE NEWFRAG MEM
		 MARKER MAPCV LIFTR JUMP HELPER GETROOT GETR GETF
		 FORCE FILE EQUIVALENCE EQU EDITG EDITD DEFINEV
		 DEFINEP DEFINEGL DEFINEG DEFINEDL DEFINEDICT DDEF
		 CTYPE COMPFORM COMPARATIVE CHECKF CHANGEWORD CAT
		 BUILDQ BUILD ADDR ADDL /#)) 

(COMMENT FUNCTIONS NOT DEFINED IN MACLISP OR SOURCE
	 (! *MAP
	    *MAPCON
	    &PRIN1
	    &PRIN2
	    &PRINT
	    *READ
	    *READC
	    *RPLACA
	    *SORT
	    &TERPRI
	    ADDPROP
	    ALTSTACK
	    APPLY*
	    BACKTRACE
	    BREAK1
	    CHANGENAME
	    CLOCK
	    CLOSEF
	    CONCAT
	    CONSCOUNT
	    CONTROL
	    COPY
	    DEFLIST
	    DSUBST
	    EDITE
	    ENDFILE
	    EVALA
	    EVERY
	    FILEPOS
	    FILEVARS
	    FNTYP
	    GETLOWER
	    GETV
	    GLC
	    GNC
	    HISTORYSAVE
	    INFILE
	    INFILEP
	    INTERSECTION
	    INTO
	    LAMBDA
	    LISPX
	    LISPXPRINT
	    LISPXREAD
	    LISTP
	    LOC
	    MAKEFILE
	    MKATOM
	    MKSTRING
	    NCHARS
	    NEQ
	    NEWFILE1
	    NFLCT-ADJ
	    NFLCT-ING
	    NLISTP
	    *NTH
	    OPENP
	    OUTFILE
	    OUTPUT
	    PACK
	    PARSEPARENS
	    PEEKC
	    PLIST
	    POSITION
	    POSTARTPHRS
	    PRINTDEF
	    PRINTFNS
	    PRINTLEVEL
	    PROMPTCHAR
	    RATOM
	    READP
	    READVISE
	    RETFROM
	    RUNFORK
	    SAVESET
	    SELECTQ
	    SFPTR
	    SOME
	    SPACES
	    STKNTH
	    STKSCAN
	    TCONC
	    UNPACK)) 


(DEFUN *RPLACA MACRO (X) (RPLACA X 'RPLACA))


(DEFUN SETQS MACRO (X) 
       ((LABEL FOO
	       '(LAMBDA (Y) 
			(LIST 'SETQ
			      (CAR Y)
			      (COND ((NULL (CDR Y)) (CADDR X)) (T (FUNCALL FOO (CDR Y)))))))
	(CADR X)))
 
(DEFUN SPREADQ MACRO (X)
(CONS 'SETQ (CONS '*LOC* (CONS (CADDR X)
 (MAPCAN '(LAMBDA (X) (CONS X (LIST '(CAR *LOC*) '*LOC* '(CDR *LOC*))))
         (CADR X))))))

(DEFUN WHILE MACRO (X)
(PROG (TAG)
 (SETQ TAG (GENSYM))
 (RETURN (LIST 'PROG NIL
 TAG	(LIST 'COND (APPEND (CDR X) (LIST (LIST 'GO TAG))))))))

(DEFUN T/.SONS MACRO (X) (RPLACA X 'CONSTITUENTS)) 

(DEFUN ALTARC/.TRAIL MACRO (X) (RPLACA X 'CADR)) 

(DEFUN T/.REF MACRO (X) (RPLACA X 'IDENTITY)) 

(DEFUN F/.REF MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN T/.SONS MACRO (X) (RPLACA X 'CONSTITUENTS)) 

(DEFUN F/.SONS MACRO (X) (RPLACA X 'CADR)) 

(DEFUN T/.NODE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN F/.NODE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN STACKELT/.REGS MACRO (X) (RPLACA X 'CADR)) 

(DEFUN POPARC/.FEATURES MACRO (X) (RPLACA X 'CADDDR)) 

(DEFUN POPARC/.FORM MACRO (X) (RPLACA X 'CADR)) 

(DEFUN ARC/.ACTIONS MACRO (X) (RPLACA X 'CDDDR)) 

(DEFUN ARC/.TEST MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN ARC/.LABEL MACRO (X) (RPLACA X 'CADR)) 

(DEFUN ARC/.TYPE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN ALTARC/.ARCS MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN ALTARC/.ACONFIG MACRO (X) (RPLACA X 'CDDDR)) 

(DEFUN PATH/.STRING MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN PATH/.VAL MACRO (X) (RPLACA X 'CAR)) 

(DEFUN PATH/.ARC MACRO (X) (RPLACA X 'CADR)) 

(DEFUN PPA MACRO (X) (RPLACA X 'TH/.CONFIG)) 

(DEFUN PPATH/.STRING MACRO (X) (RPLACA X 'CADR)) 

(DEFUN PPATH/.STATE MACRO (X) (RPLACA X 'CADDDR)) 

(DEFUN PPATH/.PATH MACRO (X) (RPLACA X 'LASTELT)) 

(DEFUN PPATH/.ARC MACRO (X) (RPLACA X 'CAR)) 

(DEFUN PPATH/.ACONFIG MACRO (X) (RPLACA X 'CDR)) 

(DEFUN STACKELT/.PPATH MACRO (X) (RPLACA X 'LASTELT)) 

(DEFUN DEFINEG-GRAMMAR MACRO (X) (RPLACA X 'DEFINEG)) 

(DEFUN DEFINEG-RULES MACRO (X) (RPLACA X 'DEFINEG)) 

(DEFUN EXECUTE MACRO (X) (RPLACA X 'REMEX)) 


(DECLARE (GENPREFIX UTILIT)) 

;;;*** CHECK ARG LENGTH ON FUNCTIONAL ARG OF MAPCAR
;;;	FUN.ARG- (FUNCTION LIST) IN COMBINATIONS

(DEFUN COMBINATIONS (CLIST) 
       (COMMENT COMPUTES THE CROSS PRODUCT OF A LIST OF LISTS)
       (COND
	((NULL (CDR CLIST)) (MAPCAR (FUNCTION LIST) (CAR CLIST)))
	(T
	 (MAPCAN 
	  (FUNCTION (LAMBDA (Y) 
			    (MAPCAR (FUNCTION (LAMBDA (X) (CONS X Y)))
				    (CAR CLIST))))
	  (COMBINATIONS (CDR CLIST)))))) 

(DEFUN DWRITE (X Y Z) 
       (COMMENT LIKE DSUBST/, BUT USES EQUAL AND COPIES THE THING
		BEING SUBSTITUTED)
       (PROG (A B) 
	     (SETQ B Z)
	LP   (COND ((ATOM Z) (RETURN B))
		   ((EQUAL Y (SETQ A (CAR Z))) (*RPLACA Z (COPY X)))
		   ((NOT (ATOM A)) (DWRITE X Y (CAR Z))))
	     (SETQ Z (CDR Z))
	     (GO LP))) 


(DEFUN FIND (X Y) 
       (COMMENT LIKE MEMB BUT LOOKS AT ALL LEVELS OF STRUCTURE Y)
       (COND ((NLISTP Y) NIL)
	     ((EQ (CAR Y) X) Y)
	     ((ATOM (CAR Y)) (FIND X (CDR Y)))
	     ((FIND X (CAR Y)))
	     ((LISTP (CDR Y)) (FIND X (CDR Y)))
	     (T NIL))) 

(DEFUN FIRSTPART (WHOLE TAIL) 
       (COMMENT IF TAIL IS A TAIL OF WHOLE/, FIRSTPART RETURNS VAL
		SUCH THAT WHOLE EQUALS (APPEND VAL TAIL))
       (PROG (VAL END) 
	L1   (COND ((EQUAL WHOLE TAIL) (RETURN VAL))
		   ((ATOM WHOLE) (RETURN NIL))
		   (VAL (RPLACD END
				(SETQ END (CONS (CAR WHOLE) NIL))))
		   (T (SETQ VAL (SETQ END (CONS (CAR WHOLE) NIL)))))
	     (SETQ WHOLE (CDR WHOLE))
	     (GO L1))) 

(DEFUN HELPER FEXPR (*ARGS*) 
       ((LAMBDA (SS COMMENT) 
		(COMMENT INTERACTIVE HELP ROUTINE)
		(PROG (PROGV HELPCLOCK) 
		      (&PRIN1 COMMENT T)
		      (&TERPRI T)
		 L1   (&PRIN1 SS T)
		      (COND ((NOT (*ERRSET (SETQ PROGV (LISPXREAD T))))
			     (GO L1))
			    ((EQ PROGV 'OK) (RETURN NIL))
			    ((EQ PROGV 'QUIT) (QUIT))
			    ((EQ PROGV 'RPT) (RETURN T))
			    ((AND (EQ PROGV 'BREAK)
				  (NOT (READP T)))
			     (BREAK1 T T HELPER NIL NIL))
			    ((NOT (*ERRSET (LISPX PROGV SS))) (GO L1)))
		      (GO L1)))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN IDENTITY (X) X) 

(DEFUN KILL (*X* *Y*) 
       (COND ((NLISTP *Y*) *Y*)
	     ((EQ (CAR *Y*) *X*) (CDR *Y*))
	     (T (CONS (CAR *Y*) (KILL *X* (CDR *Y*)))))) 

(DEFUN KTH (LIST K) (CAR (*NTH LIST K))) 

(COMMENT 
(DEFUN LAMTYPE (*X*) 
       (SELECTQ (FNTYP *X*)
		((EXPR CEXPR) (SETQ LAMS (CONS *X* LAMS)))
		((FEXPR CFEXPR) (SETQ NLAML (CONS *X* NLAML)))
		((FEXPR* CFEXPR*) (SETQ NLAMA (CONS *X* NLAMA)))
		(OTHERWISE NIL))
       (COND ((GET *X* 'MACRO)
	      (SETQ MACROS (CONS *X* MACROS)))))) 

(DEFUN LASTELT (LIST) (CAR (LAST LIST))) 

(DEFUN LEAVES (X) 
       (COMMENT COMPUTES LIST OF LEAVES (TERMINAL ATOMS) OF A LIST
		STRUCTURE)
       (COND ((NLISTP X) (LIST X)) (T (MAPCAN (FUNCTION LEAVES) X)))) 

(COMMENT 
(DEFUN MAPCV FEXPR (*ARGS*) 
       ((LAMBDA (**X** LIST PX) 
		(PROG (TEMP VBL) 
		      (RENAME VBL **X**)
		      (SETQ TEMP (EVAL LIST))
		 L1   (COND ((NULL TEMP) (RETURN T)))
		      (SET **X** (CAR TEMP))
		      (COND ((NULL (EVAL PX)) (RETURN NIL)))
		      (SETQ TEMP (CDR TEMP))
		      (GO L1)))
	(CAR *ARGS*)
	(CADR *ARGS*)
	(CADDR *ARGS*)))) 

(DEFUN MEMBERS (LIST) 
       (COMMENT ELIMINATES DUPLICATES FROM A LIST)
       (PROG (VAL END PTR) 
	     (COND ((NLISTP (SETQ PTR LIST)) (RETURN PTR)))
	     (SETQ END (SETQ VAL (CONS (CAR PTR) NIL)))
	L1   (COND ((NLISTP (SETQ PTR (CDR PTR)))
		    (RPLACD END PTR)
		    (RETURN VAL))
		   ((MEMBER (CAR PTR) VAL) (GO L1))
		   (T (RPLACD END (SETQ END (CONS (CAR PTR) NIL)))
		      (GO L1))))) 

(DEFUN NOR FEXPR (ARGS) (NOT (APPLY (FUNCTION OR) ARGS))) 

;;;*** EVAL IMBEDDED IN FEXPR [RENAME], CHECK CALLS MANUALLY

(COMMENT 
(DEFUN RENAME FEXPR (*ARGS*) 
       ((LAMBDA (U V) 
		(PROG (W) 
		      (COND ((SETQ W (STKSCAN U (STKNTH -1. NIL)))
			     (RPLACD W (EVAL V))))))
	(CAR *ARGS*)
	(CADR *ARGS*)))) 

(DEFUN SCAN (SCNLST SCNFN) 
       (WHILE (AND SCNLST (NOT (APPLY* SCNFN SCNLST)))
	      (SETQ SCNLST (CDR SCNLST)))
       SCNLST) 

(COMMENT 
(DEFUN SCANCV FEXPR (*ARGS*) 
       ((LAMBDA (**X** LIST PX) 
		(PROG (TEMP VBL VAL) 
		      (RENAME VBL **X**)
		      (SETQ TEMP (EVAL LIST))
		 L1   (COND ((NULL TEMP) (RETURN NIL)))
		      (SET **X** (CAR TEMP))
		      (COND ((SETQ VAL (EVAL PX)) (RETURN VAL)))
		      (SETQ TEMP (CDR TEMP))
		      (GO L1)))
	(CAR *ARGS*)
	(CADR *ARGS*)
	(CADDR *ARGS*)))) 

(DEFUN SDIFF (X Y) 
       (COMMENT COMPUTE THE SET DIFFERENCE X-Y)
       (MAPCAN 
	(FUNCTION (LAMBDA (ELT) 
			  (COND ((NOT (MEMQ ELT Y)) (CONS ELT NIL)))))
	X)) 

(DEFUN SETQS FEXPR (*ARGS*) 
       ((LAMBDA (ATLIST VAL) 
		(SETQ VAL (EVAL VAL))
		(MAPC (FUNCTION (LAMBDA (ATOM) (SET ATOM VAL)))
		      ATLIST)
		VAL)
	(CAR *ARGS*)
	(CADR *ARGS*))) 


(DEFUN SHOW FEXPR (ARGS) 
       (MAPC (FUNCTION (LAMBDA (X) (&PRIN2 X T)
				   (&PRIN1 '/ =/  T)
				   (&PRINT (EVAL X) T)))
	     ARGS)) 

;;;*** EVAL IMBEDDED IN FEXPR [SPREADQ], CHECK CALLS MANUALLY

;(DEFUN SPREADQ FEXPR (*ARGS*) 
;       ((LAMBDA (*X* *Y*) (PROG NIL 
;				(SETQ *Y* (EVAL *Y*))
;			   L1	(COND (*X* (SET (CAR *X*) (CAR *Y*))
;					   (SETQ *X* (CDR *X*))
;					   (SETQ *Y* (CDR *Y*))
;					   (GO L1))
;				      (T (RETURN *Y*)))))
;	(CAR *ARGS*)
;	(CADR *ARGS*))) 


(DEFUN SUBSET (X Y) 
       (COMMENT TESTS IF X IS A SUBSET OF Y)
       (EVERY X (FUNCTION (LAMBDA (ELT) (MEMBER ELT Y))) NIL)) 

(COMMENT 
(DEFUN THOSEV FEXPR (*ARGS*) 
       ((LAMBDA (**X** LIST PX) 
		(PROG (TEMP VBL VAL) 
		      (RENAME VBL **X**)
		      (SETQ TEMP (EVAL LIST))
		 L1   (COND ((NULL TEMP) (RETURN (CAR VAL))))
		      (SET **X** (CAR TEMP))
		      (COND ((EVAL PX)
			     (SETQ VAL (TCONC VAL (EVAL **X**)))))
		      (SETQ TEMP (CDR TEMP))
		      (GO L1)))
	(CAR *ARGS*)
	(CADR *ARGS*)
	(CADDR *ARGS*)))) 

(DEFUN UNWIND NIL (BACKTRACE NIL NIL 0.)) 

(COMMENT 
(DEFUN USERFN (FN) 
       (COND ((NOT (MEMQ FN USERFNS))
	      (SETQ USERFNS (CONS FN USERFNS)))))) 

;(DEFUN WHILE FEXPR (ARGS) 
;       (PROG (*TST* *ACTS*) 
;	     (SETQ *ACTS* (CDR ARGS) *TST* (CAR ARGS))
;	LP   (COND ((EVAL *TST*)
;		    (MAPC (FUNCTION EVAL) *ACTS*)
;		    (GO LP)))
;	     (RETURN NIL))) 
;

(DECLARE (GENPREFIX EXEC)) 


(DEFUN CHANGEWORD FEXPR (ARGS) 
       (COMMENT USER COMMAND FOR CHANGING A WORD IN REQUESTDEF)
       (COND ((NULL ARGS)
	      (SETQ LEX (SETQ * (CADR STRING)))
	      (RPLACD STRING (CDDR STRING))
	      (*RPLACA STRING LEX))
	     ((CDR ARGS)
	      (RPLACD STRING (NCONC (CDR ARGS) (CDR STRING)))
	      (*RPLACA STRING (SETQ LEX (SETQ * (CAR ARGS)))))
	     (T (*RPLACA STRING (SETQ LEX (SETQ * (CAR ARGS))))))) 

(DEFUN CHOOSEALT (N) 
       (PROG (ALT) 
	     (COND ((SETQ ALT (ASSQ N ALTS))
		    (*RPLACA (MEMQ ALT ALTS) NIL))
		   ((SETQ ALT (ASSQ N OLDALTS))
		    (*RPLACA (MEMQ ALT OLDALTS) NIL))
		   (T (RETURN NIL)))
	     (SETQ ALTS (CONS ALT ALTS))
	     (RETURN (CAR ALT)))) 

(SETQ DICTIONARY NIL)

(DEFUN DDEF FEXPR (ARGS) 
       (PROG (WRD) 
	     (SETQ WRD (CAR ARGS))
	     (COND ((OR (NOT (ATOM WRD)) (NULL WRD) (NUMBERP WRD))
		    (&PRIN1 'ILLEGAL/ DICTIONARY/ WORD/  T)
		    (&PRINT WRD T)
		    (RETURN NIL))
		   (T (SETQ DICTIONARY (CONS WRD DICTIONARY))))
	     (SETQ ARGS (CDR ARGS))
	L0   (COND (ARGS (PUTPROP WRD (CADR ARGS) (CAR ARGS))
			 (SETQ ARGS (CDDR ARGS))
			 (GO L0))
		   (T (RETURN WRD))))) 

(DEFUN DEFINEDL FEXPR (ARGS) 
       (MAPCAR (FUNCTION (LAMBDA (X) (RPLACD (CAR X) (CDR X)))) ARGS)) 

(DEFUN DEFINEGL FEXPR (ARGS) 
       (MAPCAR 
	(FUNCTION (LAMBDA (X) (*RPLACA (CAR X) (CDR X)) (CAR X)))
	ARGS)) 

(DEFUN DICT? (WORD) 
       (PROG (TEMP) 
	     (COND ((PLIST WORD)
		    (SETQ TEMP (OUTPUT T))
		    (PPD (LIST WORD) NIL)
		    (OUTPUT TEMP)
		    (RETURN WORD))
		   (T (RETURN NIL))))) 

(DEFUN EDITD FEXPR (*ARGS*) 
       ((LAMBDA (DICTNAME) 
	 (*RPLACA
	  DICTNAME
	  (EVAL
	   (CONS
	    'DEFINEDL
	    (EDITE
	     (SETQ 
	      EDITDV
	      (MAPCAR 
	       (FUNCTION (LAMBDA (DICTWORD) 
				 (PROG2 0.
					(CONS DICTWORD (CDR DICTWORD))
					(RPLACD DICTWORD NIL))))
	       (EVAL DICTNAME)))
	     NIL
	     NIL))))
	 (SETQ EDITDV NIL)
	 DICTNAME)
	(CAR *ARGS*))) 

(DEFUN EDITG FEXPR (*ARGS*) 
       ((LAMBDA (GRAMNAME) 
	 (*RPLACA
	  GRAMNAME
	  (EVAL
	   (CONS
	    'DEFINEGL
	    (EDITE
	     (SETQ 
	      EDITGV
	      (MAPCAR 
	       (FUNCTION (LAMBDA (STATE) 
				 (PROG2 0.
					(CONS STATE (EVAL STATE))
					(*RPLACA STATE
						 'NOBIND))))
	       (EVAL GRAMNAME)))
	     NIL
	     NIL))))
	 (SETQ EDITGV NIL)
	 GRAMNAME)
	(CAR *ARGS*))) 

(DEFUN ENDTRACE NIL 
       (SETQ TRACE NIL)
       (COND (TRACEFILE (&TERPRI TRACEFILE)
			(&PRINT 'ENDTRACE TRACEFILE)
			(CLOSEF TRACEFILE)
			(PROG2 0. TRACEFILE (SETQ TRACEFILE NIL))))) 

(DEFUN GETSENT (N) (SETQ SENTENCE (CDR (ASSOC N SENTENCES)))) 

(DEFUN LOCEX (FORM) 
       (PROG (COUNT CHAR ANS QOLDSN QOLDMIN QOLDELT QOLDUNIT
	      QOLDREF QOLDTAG) 
	     (SETQ COUNT 0.)
	     (COND ((NOT (OUTFILE HITFILE))
		    (&PRIN1 'CAN/'T/ OPEN/ HITFILE T)
		    (&TERPRI T)
		    (RETURN NIL)))
	     (SETQ ANS (EVAL FORM))
	     (COND ((ZEROP COUNT) (&PRINT ANS HITFILE)))
	     (&PRIN1 '* HITFILE)
	     (CLOSEF HITFILE)
	L1   (COND ((GREATERP COUNT 5.)
		    (&PRIN1 'I/ HAVE/  T)
		    (&PRIN2 COUNT T)
		    (&PRIN1 '/ HITS T)
		    (&TERPRI T)
		    (&PRIN1 'DO/ YOU/ WANT/ TO/ SEE/ THEM?/  T)
		    (CONTROL T)
		    (SELECTQ (PROG2 0. (*READC T) (CONTROL NIL))
			     (Y (&PRINT 'ES T))
			     (N (&PRINT 'O T) (RETURN NIL))
			     (OTHERWISE 
				(PROGN (&TERPRI T)
				    (&PRIN1 'TYPE/ Y/ OR/ N T)
				    (&TERPRI T)
				    (GO L1))))))
	     (COND ((ZEROP COUNT)
		    (&PRIN1 'NO/ HITS T)
		    (&TERPRI T)
		    (RETURN ANS)))
	     (COND ((NOT (INFILE HITFILE))
		    (&PRIN1 'CAN/'T/ OPEN/ HITFILE T)
		    (&TERPRI T)
		    (RETURN NIL)))
	L2   (COND ((NOT (EQ (SETQ CHAR (*READC HITFILE)) '*))
		    (&PRIN1 CHAR T)
		    (GO L2)))
	     (CLOSEF HITFILE)
	     (&TERPRI T)
	     (RETURN '------))) 


(DEFUN MODESET (MODE-LIST) 
       (PROGN
	(COMMENT MODE VARIABLES--PMODE PTIME ITIME ETIME IDO EDO
		 PPRINT IPRINT PHELP IHELP RESOLVE UNSMASH UPRINT
		 TRACE TRACEFILE PAUSEFLAG SMP PPT SYSCONJ PARENS/;
		 OTHER FREE VARIABLES--PARSES INTERPS ALTS BLOCKS)
	(MAPC (FUNCTION MODESET1) MODE-LIST)
	MODE-LIST)) 

(SETQ SWITCHES '(
      ((PARSE P -IDO) . (IDO NIL PHELP T PMODE T PPRINT T))
      ((T TRACE) . (TRACE T))
      ((-T -TRACE) . (TRACE NIL))
      (SEM-TRACE . (SEM-TRACE T IDO T IPRINT T))
      (-SEM-TRACE . (SEM-TRACE NIL))
      ((S SEM SEMANTICS INTERPRET IDO) . (IDO T IPRINT T PPRINT T))
      ((QUIET ALL FAST NONSTOP) . (IDO T TRACE NIL SEM-TRACE NIL
				     AHELP NIL IHELP NIL PHELP NIL ASSIST NIL
				     REQUESTDEF NIL PMODE ALL))
      ))

(DEFUN MODESET1 (MODE)
       (DO SWT SWITCHES (CDR SWT) (NULL SWT)
	   (COND ((OR (EQ (CAAR SWT) MODE)
		      (AND (LISTP (CAAR SWT)) (MEMQ MODE (CAAR SWT))))
		  (DO L (CDAR SWT) (CDDR L) (NULL L)
		      (SET (CAR L) (CADR L)))))))

(DEFUN ORFLAG (X) 
       (COND (X (*RPLACA TOPIC\AND-S 'OR)
		(*RPLACA TOPIC\AND-NP 'OR))
	     (T (*RPLACA TOPIC\AND-S 'AND)
		(*RPLACA TOPIC\AND-NP 'AND)))) 

(DEFUN PARSELIST (SENTLIST) 
       (PROG (TEMP) 
	     (&PRINT 'PARSELIST T)
	     (&PRIN1 'LOGFILE:/  T)
	     (SETQ LOGFILE (*READ T))
	     (COND ((NULL (OUTFILE LOGFILE))
		    (&PRINT '(CAN/'T OPEN FILE) T)
		    (RETURN NIL)))
	     (SETQ SCORE0
		   (SETQ SCORE1 (SETQ SCORE2 (SETQ SCORE3 0.))))
	     (SETQ SCORE0SENTS
		   (SETQ SCORE1SENTS
			 (SETQ SCORE2SENTS (SETQ SCORE3SENTS NIL))))
	     (MAPC 
	      (FUNCTION
	       (LAMBDA (SENTENCE) 
		       (&PRINT SENTENCE T)
		       (OUTPUT LOGFILE)
		       (&PRINT (CAR SENTENCE) NIL)
		       (SETQ TEMP (SENTPROC (CDR SENTENCE) NIL))
		       (OUTPUT LOGFILE)
		       (SELECTQ TEMP
				(0. (SETQ SCORE0 (ADD1 SCORE0))
				    (SETQ SCORE0SENTS
					  (TCONC SCORE0SENTS
						 SENTENCE))
				    (LOG TEMP))
				(1. (SETQ SCORE1 (ADD1 SCORE1))
				    (SETQ SCORE1SENTS
					  (TCONC SCORE1SENTS
						 SENTENCE))
				    (LOG TEMP))
				(2. (SETQ SCORE2 (ADD1 SCORE2))
				    (SETQ SCORE2SENTS
					  (TCONC SCORE2SENTS
						 SENTENCE))
				    (LOG TEMP))
				(3. (SETQ SCORE3 (ADD1 SCORE3))
				    (SETQ SCORE3SENTS
					  (TCONC SCORE3SENTS
						 SENTENCE))
				    (LOG TEMP))
				(OTHERWISE 
				  (PROGN (&PRIN1 'UNDEFINED/ SCORE/ 
					       T)
				       (&PRINT TEMP T))))))
	      SENTLIST)
	     (ENDFILE LOGFILE)
	     (&PRINT 'SCORE: T)
	     (&PRIN1 'NO/ PARSINGS:/  NIL)
	     (&PRINT SCORE0 NIL)
	     (&PRIN1 'NO/ INTERPRETATION:/  NIL)
	     (&PRINT SCORE1 NIL)
	     (&PRIN1 'EXECUTION/ ERROR:/  NIL)
	     (&PRINT SCORE2 NIL)
	     (&PRIN1 'SUCCESSFUL/ EXECUTION:/  NIL)
	     (RETURN SCORE3))) 

;;;*** LAMBDA-IFYING MULTI-ARG FUNCTION IN A MAP (LAMBDA (*MAP*) (PPT *MAP* NIL))
;;;*** LAMBDA-IFYING MULTI-ARG FUNCTION IN A MAP (LAMBDA (*MAP*) (PRINT *MAP* NIL))

(DEFUN PLOG (N FILE) 
       (PROG (TOUTPUT CHAR) 
	     (COND ((NOT (SETQ TOUTPUT (OUTPUT FILE)))
		    (&PRINT '(FILE NOT OPEN) T)
		    (RETURN FILE)))
	     (&PRINT 'SENTENCE: NIL)
	     (&PRINT SENTENCE NIL)
	     (COND ((GREATERP N 0.)
		    (COND (PTIMEFLAG (&PRINT 'PTIMING: NIL)
				     (SHOWTIME PCONSES PTIME NIL)))
		    (&PRINT 'PARSINGS: NIL)
		    (MAPC (FUNCTION (LAMBDA (*MAP*) (PPT *MAP* NIL)))
			  PARSES)
		    (&TERPRI NIL)))
	     (COND ((GREATERP N 1.)
		    (COND (ITIMEFLAG (&PRINT 'ITIMING: NIL)
				     (SHOWTIME ICONSES ITIME NIL)))
		    (&PRINT 'INTERPRETATIONS: NIL)
		    (MAPC 
		     (FUNCTION (LAMBDA (*MAP*) (&PRINT *MAP* NIL)))
		     INTERPS)
		    (&TERPRI NIL)))
	     (COND ((NOT (GREATERP N 2.)) (GO RETURN))
		   (ETIMEFLAG (&PRINT 'ETIMING: NIL)
			      (SHOWTIME ECONSES ETIME NIL)))
	     (COND ((NOT (INFILE HITFILE))
		    (&PRIN1 'CAN/'T/ OPEN/ HITFILE T)
		    (GO RETURN)))
	L1   (COND ((NOT (EQ (SETQ CHAR (*READC HITFILE)) '*))
		    (&PRIN1 CHAR FILE)
		    (GO L1)))
	     (CLOSEF HITFILE)
	RETURN
	     (&PRINT '<FUNNY/ CNTRLL/ > NIL)
	     (OUTPUT TOUTPUT)
	     (RETURN N))) 

(DEFUN PPT (XTR FILE) (PPT1 XTR 0. FILE) (&TERPRI FILE)) 

(DEFUN PPT1 (XTR XID FILE) 
       (PROG (XTP XTF) 
	     (COND ((ATOM XTR) (&PRIN2 XTR FILE) (RETURN T)))
	     (&PRIN2 (SETQ XTP (CAR XTR)) FILE)
	     (&PRIN1 '/  FILE)
	     (SETQ XTP (PLUS XID 1. (NCHARS XTP)))
	     (MAPC (FUNCTION (LAMBDA (XTR) 
				     (COND (XTF (&TERPRI FILE)
						(SPACES XTP FILE)
						(PPT1 XTR XTP FILE))
					   (T (PPT1 XTR XTP FILE)
					      (SETQ XTF T)))))
		   (CONSTITUENTS XTR)))) 

(DEFUN PRINTPARSES (FILE) 
       (&PRINT 'PARSINGS: FILE)
       (COND ((NULL PPT)
	      (MAPC (FUNCTION (LAMBDA (P) (&PRINT P FILE))) PARSES))
	     (T (MAPC (FUNCTION (LAMBDA (P) (PPT P FILE))) PARSES)))
       (&TERPRI FILE)) 

(DEFUN Q FEXPR (QUERY) 
       (PROG (TEMP) 
	     (SETQ SENTENCE QUERY)
	     (&PRINT '*** T)
	     (SETQ TEMP (CATCH (SENTPROC SENTENCE NIL) SENTPROC-CATCH))
	     (COND (LOGFLAG (OUTFILE LOGFILE) (PLOG TEMP NIL)))
	     (RETURN '***))) 

(DEFUN QGO (LABEL) 
       (PROG (TEMP) 
	     (&PRINT '*** T)
	     (COND ((AND LABEL TRACE TRACEFILE)
		    (&PRINT 'INPUT: TRACEFILE)
		    (&PRIN1 'GO TRACEFILE)
		    (&PRINT (LIST LABEL) TRACEFILE)))
	     (SETQ TEMP (CATCH (SENTPROC SENTENCE LABEL) SENTPROC-CATCH))
	     (COND (LOGFLAG (OUTFILE LOGFILE) (PLOG TEMP NIL)))
	     (RETURN '***))) 

(DEFUN REMEX FEXPR (*ARGS*) 
       ((LAMBDA (FORM) 
		(COMMENT REMOTE EXECUTION FUNCTION FOR EXECUTING
			 QUERIES IN SEPARATE FORK)
		(PROG (COUNT CHAR ANS) 
		      (COND ((NOT (OUTFILE QBUF))
			     (&PRIN1 'CAN/'T/ OPEN/ QBUF T)
			     (&TERPRI T)
			     (RETURN '------)))
		      (&PRINT FORM QBUF)
		      (CLOSEF QBUF)
		      (RUNFORK LOWFORK)
		      (COMMENT HAD TO CHANGE (INFILE ABUF T) ???)
		 L0   (COND ((NOT (INFILE ABUF))
			     (&PRIN1 'CAN/'T/ OPEN/ ABUF T)
			     (&TERPRI T)
			     (RETURN '------)))
		      (SETQ COUNT (*READ ABUF))
		      (CLOSEF ABUF)
		 L1   (COND ((GREATERP COUNT 5.)
			     (&PRIN1 'I/ HAVE/  T)
			     (&PRIN2 COUNT T)
			     (&PRIN1 '/ HITS T)
			     (&TERPRI T)
			     (&PRIN1 'DO/ YOU/ WANT/ TO/ SEE/ THEM?/ 
				     T)
			     (CONTROL T)
			     (SELECTQ (PROG2 0.
					     (*READC T)
					     (CONTROL NIL))
				      (Y (&PRIN1 'ES T)
					 (&TERPRI T))
				      (N (&PRIN1 'O T)
					 (&TERPRI T)
					 (RETURN '------))
				      (OTHERWISE 
					(PROGN (&TERPRI T)
					     (&PRIN1 'TYPE/ Y/ OR/ N
						     T)
					     (&TERPRI T)
					     (GO L1)))))
			    ((ZEROP COUNT)
			     (&PRIN1 'NO/ HITS T)
			     (&TERPRI T)))
		      (COND ((NOT (INFILE HITFILE))
			     (&PRIN1 'CAN/'T/ OPEN/ HITFILE T)
			     (&TERPRI T)
			     (RETURN '------)))
		 L3   (COND ((NOT (EQ (SETQ CHAR (*READC HITFILE))
				      '*))
			     (&PRIN1 CHAR T)
			     (GO L3)))
		      (CLOSEF HITFILE)
		      (&TERPRI T)
		      (RETURN '------)))
	(CAR *ARGS*))) 

(DEFUN REQUESTDEF (LEX) 
       (COMMENT REQUESTS THE DEFINITION OF AN UNKNOWN WORD FROM THE
		USER -- USED IN LEXIC & ASSIST)
       (PROG (IB) 
	     (&PRIN1 'I/ DON/'T/ KNOW/ THE/ WORD:/  T)
	     (&PRINT LEX T)
	     (&PRIN1 'PLEASE/ TYPE/ ITS/ DICTIONARY/ ENTRY T)
	     (&TERPRI T)
	H1   (&PRIN1 'D* T)
	     (COND ((NULL (*ERRSET (SETQ IB (*READ T)))) (GO H1))
		   ((LISTP IB)
		    (&PRIN1 'THANK/ YOU T)
		    (&TERPRI T)
		    (WHILE IB
			   (PUTPROP LEX (CADR IB) (CAR IB))
			   (SETQ IB (CDDR IB)))
		    (SETQ DICTIONARY (CONS LEX DICTIONARY))
		    (RETURN (PLIST LEX)))
		   ((EQ IB 'RPT) (RETURN T))
		   ((EQ IB 'OK) (RETURN (PLIST LEX))))
	     (*ERRSET (&PRINT (APPLY IB (*READ T)) T))
	     (GO H1))) 

(DEFUN RESOLVE (PARSES) 
       (COMMENT REQUESTS THE RESOLUTION OF SYNTACTIC AMBIGUITY FROM
		THE USER -- USED IN TALKER)
       (PROG (INDEX XLIST ANS) 
	     (COND ((NULL (CDR PARSES)) (RETURN PARSES))
		   (T (SETQ INDEX 0.) (SETQ XLIST PARSES)))
	     (&PRIN1 'THERE/ ARE/ SEVERAL/ PARSINGS%/. T)
	     (&TERPRI T)
	     (&PRIN1 'WHICH/ DID/ YOU/ INTEND? T)
	     (&TERPRI T)
	L1   (SETQ INDEX (ADD1 INDEX))
	     (&TERPRI T)
	     (&PRIN1 INDEX T)
	     (&PRIN1 '/ :/  T)
	     (&PRINT (CAR PARSES) T)
	     (COND ((SETQ PARSES (CDR PARSES)) (GO L1)))
	L2   (&TERPRI T)
	     (&PRIN1 'R* T)
	     (*ERRSET (SETQ ANS (*READ T)))
	     (COND ((NULL ANS) (RETURN NIL))
		   ((NUMBERP ANS)
		    (RETURN (LIST (CAR (*NTH XLIST ANS))))))
	     (&TERPRI T)
	     (&PRIN1 'ANSWER/ WITH/ AN/ INTEGER/ FROM/ 1/ TO/ 
		     T)
	     (&PRINT INDEX T)
	     (&PRIN1 'OR/ NIL/ IF/ NONE%/. T)
	     (GO L2))) 

;;;*** CHECK ARG LENGTH ON FUNCTIONAL ARG OF MAPCONC
;;;	FUN.ARG- (FUNCTION UNSMASH) IN SENTPROC

(DEFUN SENTPROC (SENTENCE LABEL) 
       (PROG (TEMP HELPCLOCK /#PARSES) 
	     (SETQ /#PARSES 1.)
	     (COND ((AND (NUMBERP LABEL) (CHOOSEALT LABEL))
		    (GO PARSE)))
	     (SELECTQ LABEL
		      ((NIL BEGIN) (GO BEGIN))
		      (PARSE (GO PARSE))
		      (INTERP (GO INTERP))
		      (EXECUTE (GO EXECUTE))
		      (END (GO END))
		      (OTHERWISE 
			(PROGN (&PRIN1 'ILLEGAL/ GO T)
			     (&TERPRI T)
			     (RETURN 0.))))
	BEGIN(SETQ ALTS NIL)
	     (SETQ OLDALTS NIL)
	     (SETQ ALTNUM 0.)
	     (SETQ WFST NIL)
	     (SETQ LEXTABLE NIL)
	     (SETQ LEXBACK NIL)
	     (SETQ TAGLIST NIL)
	     (SETQ ANAPHRLST NIL)
	PARSE(COND ((AND TRACE TRACEFILE)
		    (&TERPRI TRACEFILE)
		    (&TERPRI TRACEFILE)
		    (&TERPRI TRACEFILE)
		    (&PRINT 'SENTENCE: TRACEFILE)
		    (&PRINT SENTENCE TRACEFILE)))
 	     (COND (PTIMEFLAG (&PRINT 'PARSING T)))
	     (SETQ PCONSES0 (CONSCOUNT))
	     (SETQ PTIME0 (CLOCK 2.))
	     (SETQ TEMP (PARSER SENTENCE PMODE ALTS))
	     (SETQ PTIME (DIFFERENCE (CLOCK 2.) PTIME0))
	     (SETQ PCONSES (DIFFERENCE (CONSCOUNT) PCONSES0))
	     (COND (PTIMEFLAG (SHOWTIME PCONSES PTIME T)
	   		      (COND ((AND TRACE TRACEFILE)
			 	     (SHOWTIME PCONSES
					       PTIME
					       TRACEFILE)))))
	     (SETQ ALTS (CADR TEMP))
	     (SETQ PARSES (CAR TEMP))
	     (COND ((NULL UNSMASH) NIL)
		   ((LEAFMEMB (CAR PARSES) '(AND OR))
		    (COND (UPRINT (&PRIN1 'PARSINGS/ BEFORE/ UNSMASH:
					  T)
				  (&TERPRI T)
				  (PRINTPARSES T)))
		    (SETQ PARSES (MAPCAN (FUNCTION UNSMASH) PARSES)) ))
	     (COND (RESOLVE (SETQ PARSES (RESOLVE PARSES))))
	     (COND ((AND PARSES PPRINT)
		    (COND ((AND TRACE TRACEFILE)
			   (PRINTPARSES TRACEFILE)))
		    (PRINTPARSES T)))
	     (COND (PARSES (GO INTERP))
		   ((NULL ALTS)
		    (&PRINT 'NO/ PARSINGS T)
		    (&TERPRI T)
		    (&TERPRI T)
		    (&TERPRI T)
		    (RETURN 0.))
		   ((NULL REPARSE) (&TERPRI T) (RETURN 0.))
		   ((AND MAXREPARSES
			 (GREATERP (SETQ /#PARSES (ADD1 /#PARSES))
				   MAXPARSES))
		    (&PRINT 'MAXPARSES/ EXCEEDED/ IN/ PARSER T)
		    (&TERPRI T)
		    (RETURN 0.))
		   (T (GO PARSE)))
	INTERP
	     (COND ((NOT IDO) (RETURN 1.)))
	     (COND (ITIMEFLAG (&PRINT 'INTERPRETING T)))
	     (SETQ ICONSES0 (CONSCOUNT))
	     (SETQ ITIME0 (CLOCK 2.))
	     (SETQ INTERPS (MAPCAN (FUNCTION SPROC) PARSES))
	     (SETQ ITIME (DIFFERENCE (CLOCK 2.) ITIME0))
	     (SETQ ICONSES (DIFFERENCE (CONSCOUNT) ICONSES0))
	     (COND (ITIMEFLAG (SHOWTIME ICONSES ITIME T)
			      (COND ((AND TRACE TRACEFILE)
				     (SHOWTIME ICONSES
					       ITIME
					       TRACEFILE)))))
	     (COND (IPRINT (&PRINT 'INTERPRETATIONS: T)
			   (MAPC (FUNCTION (LAMBDA (X) (&PRINT X T)))
				 INTERPS)
			   (&TERPRI T)))
	     (COND (INTERPS (GO EXECUTE))
		   ((NULL ALTS)
		    (&PRINT 'NO/ INTERPRETATIONS/  T)
		    (&TERPRI T)
		    (&TERPRI T)
		    (&TERPRI T)
		    (RETURN 1.))
		   ((NULL REPARSE) (&TERPRI T) (RETURN 1.))
		   ((AND MAXREPARSES
			 (GREATERP (SETQ /#PARSES (ADD1 /#PARSES))
				   MAXPARSES))
		    (&PRINT 'MAXPARSES/ EXCEEDED T)
		    (&TERPRI T)
		    (RETURN 1.))
		   (T (GO PARSE)))
	EXECUTE
	     (COND ((NOT EDO) (RETURN 2.))
		   (ETIMEFLAG (&PRINT 'EXECUTING T)))
	     (SETQ ECONSES0 (CONSCOUNT))
	     (SETQ ETIME0 (CLOCK 2.))
	     (MAPC (FUNCTION (LAMBDA (X) 
				     (&PRINT (APPLY (FUNCTION EXECUTE)
						    (LIST X))
					     T)))
		   INTERPS)
	     (SETQ ETIME (DIFFERENCE (CLOCK 2.) ETIME0))
	     (SETQ ECONSES (DIFFERENCE (CONSCOUNT) ECONSES0))
	     (COND (ETIMEFLAG (SHOWTIME ECONSES ETIME T)
			      (COND ((AND TRACE TRACEFILE)
				     (SHOWTIME ECONSES
					       ETIME
					       TRACEFILE)))))
	     (&TERPRI T)
	     (&TERPRI T)
	END  (RETURN 3.))) 

(DEFUN SETUP (FORK) 
       (PROG NIL 
	     (COND ((NULL FORK) (SETQ FORK 'LOWFORK/.SAV)))
	     (SETQ FORKNAME FORK)
	     (SETQ LOWFORK (GETLOWER FORK))
	     (RETURN LOWFORK))) 

(DEFUN SHOWTIME (CONSES TIME FILE) 
       (&PRIN1 CONSES FILE)
       (&PRIN1 '/ CONSES FILE)
       (&TERPRI FILE)
       (&PRIN1 (QUOTIENT TIME 512.) FILE)
       (&PRIN1 '/ SECONDS FILE)
       (&TERPRI FILE)) 

(IF-FOR-LISPM
(DEFUN TALKER (&QUOTE &REST MODE-LIST) 
       (PROG (INPUT TEMP HELPCLOCK LISPXHIST)
	     (SET-ERROR-MODE)				;CAR, CDR SYMBOLS (EXCEPT NIL) IS ERROR
	     (SETQ BASE 8. IBASE 8.)
	     (PKG-GOTO 'WOODS-PACKAGE)				;MUST BE IN THIS OBARRAY
	     (&PRINT 'TALKER T)
	     (COND (INPUTLOGFLAG (OUTFILE INPUTLOGFILE)))
	     (COND (MODE-LIST (MODESET MODE-LIST)))
	LOOP (COND ((NULL READBUF)
		    (PROMPTCHAR '** T LISPXHISTORY)))
	     (COND ((NOT (*ERRSET (SETQ INPUT (LISPXREAD T))))
		    (GO LOOP))
		   ((EQ INPUT 'OK) (RETURN NIL))
		   ((ATOM INPUT) (MODESET1 INPUT)))
	      (COND ((MEMQ INPUT '(? HELP))
		    (TERPRI)
		    (PRINC '|Switches are:|)
		    (MAPC (FUNCTION (LAMBDA (X)(PRINT (CAR X))))
			  SWITCHES)
		    (TERPRI))
		    ((EQ INPUT 'GO)
			    (SETQ INPUT (LISPXREAD T))
			    (SETQ LISPXHIST
				  (HISTORYSAVE LISPXHISTORY
					       '**
					       'GO
					       INPUT))
			    (&PRINT (APPLY (FUNCTION QGO) INPUT) T))
		    ((ATOM INPUT) (AND (BOUNDP INPUT) (LISPX INPUT '**)))
		    (T (COND ((AND INPUTLOGFLAG
				   (OPENP INPUTLOGFILE NIL))
			      (&PRINT INPUT INPUTLOGFILE)))
		       (SETQ LISPXHIST
			     (HISTORYSAVE LISPXHISTORY
					  '**
					  NIL
					  INPUT))
		       (&PRINT (APPLY (FUNCTION Q) INPUT) T)) )
	      (GO LOOP)))
);LISPM
(IF-FOR-MACLISP
(DEFUN TALKER FEXPR (MODE-LIST) 
       (PROG (INPUT TEMP HELPCLOCK LISPXHIST) 
	     (&PRINT 'TALKER T)
	     (COND (INPUTLOGFLAG (OUTFILE INPUTLOGFILE)))
	     (COND (MODE-LIST (MODESET MODE-LIST)))
	LOOP (COND (WRITE-FILE 
		     (CLOSE WRITE-FILE)
		     (OPEN WRITE-FILE 'APPEND)))		;FORCE OUTPUT
	     (COND ((NULL READBUF)
		    (PROMPTCHAR '** T LISPXHISTORY)))
	     (COND ((NOT (*ERRSET (SETQ INPUT (LISPXREAD T))))
		    (GO LOOP))
		   ((EQ INPUT 'OK) (RETURN NIL))
		   ((ATOM INPUT) (MODESET1 INPUT)))
	     (COND ((MEMQ INPUT '(? HELP))
		    (TERPRI)
		    (PRINC '|Switches are:|)
		    (MAPC (FUNCTION (LAMBDA (X)(PRINT (CAR X))))
			  SWITCHES)
		    (TERPRI))
		   ((EQ INPUT 'GO)
			    (SETQ INPUT (LISPXREAD T))
			    (SETQ LISPXHIST
				  (HISTORYSAVE LISPXHISTORY
					       '**
					       'GO
					       INPUT))
			    (&PRINT (APPLY (FUNCTION QGO) INPUT) T))
			   ((ATOM INPUT) (AND (BOUNDP INPUT) (LISPX INPUT '**)))
			   (T (COND ((AND INPUTLOGFLAG
					  (OPENP INPUTLOGFILE NIL))
				     (&PRINT INPUT INPUTLOGFILE)))
			      (SETQ LISPXHIST
				    (HISTORYSAVE LISPXHISTORY
						 '**
						 NIL
						 INPUT))
			 	(&PRINT (APPLY (FUNCTION Q) INPUT) T)) )
	     (GO LOOP)))
);MACLISP 

(DEFUN TRACEFILE (FILE) 
       (SETQ TRACEFILE FILE)
       (SETQ TRACE T)
       (SETQ PAUSEFLAG NIL)
       (COND ((NOT (OUTFILE FILE))
	      (&PRIN1 'CAN/'T/ OPEN/ FILE T)
	      (&TERPRI T))
	     (T (&TERPRI FILE) FILE))) 

(DEFUN TRACER FEXPR (ARGS) 
       (COMMENT TRACING FUNCTION)
       (PROG (INC) 
	     (SPACES (LENGTH STACK) NIL)
	     (COND (ACF/# (&PRIN2 ACF/# NIL) (&PRIN1 ':/  NIL)))
	     (COND (SPLIT/# (&PRIN2 SPLIT/# NIL)
			   (&PRIN1 '%/./  NIL)))
	     (MAPC (FUNCTION EVAL) (CDR ARGS))
	     (COND ((NOT (EVAL (CAR ARGS)))
		    (&TERPRI NIL)
		    (RETURN NIL)))
	     (CONTROL T)
	L1   (COND ((EQUAL (SETQ INC (*READC T)) '/.)
		    (CONTROL NIL)
		    (&TERPRI T))
		   ((EQ INC '/
) (GO L1))	   (T (CONTROL NIL) (&TERPRI T) (HELPER T* HELPER)))
	     (RETURN NIL))) 

(LISPXPRINT '(V: (GVARS MODECOMMENTS ABUF QBUF HITFILE)) T) 

(DEFINEV (GVARS (ANAPHRLST BLOCKS
			   DICTIONARY
			   ECONSES
			   ECONSES0
			   ETIME
			   ETIME0
			   ICONSES
			   ICONSES0
			   ITIME
			   ITIME0
			   LEXBACK
			   LEXTABLE
			   PCONSES
			   PCONSES0
			   PTIME
			   PTIME0
			   TAGLIST
			   WFST
			   LOWFORK
			   FORKNAME))
	 (MODECOMMENTS ((AHELP :
			       CAUSES
			       ASSIST
			       TO
			       CALL
			       HELPER
			       IF
			       IT
			       CANNOT
			       FIND
			       ANYTHING
			       ELSE
			       TO
			       TRY)
			(ASSIST :
				CAUSES
				ASSIST
				TO
				ATTEMPT
				VARIOUS
				HEURISTICS
				FOR
				FORCING
				A
				PARSE
				WHEN
				NO
				PARSINGS
				ARE
				FOUND
				BY
				THE
				PARSER)
			(EDO :
			     CAUSES
			     AUTOMATIC
			     EXECUTION
			     OF
			     SEMANTIC
			     INTERPRETATIONS)
			(EHELP :
			       CAUSES
			       CALLS
			       TO
			       HELPER
			       IF
			       TROUBLE
			       DEVELOPS
			       IN
			       EXECUTION)
			(ETIMEFLAG :
				   CAUSES
				   PRINTING
				   OF
				   EXECUTION
				   TIME)
			(FORCE :
			       CAUSES
			       ASSIST
			       TO
			       TRY
			       TO
			       FORCE
			       PARSINGS
			       BY
			       IGNORING
			       CONDITIONS
			       ON
			       ARCS)
			(IDIOTFLAG :
				   FLAG
				   TESTED
				   BY
				   ALL
				   ERROR
				   CONDITIONS
				   TO
				   DETERMINE
				   WHETHER
				   TO
				   ALLOW
				   SYSTEM
				   BREAKS
				   OR
				   TO
				   TAKE
				   A
				   DEFAULT
				   APPROPRIATE
				   TO
				   A
				   NAIVE
				   USER/.
				   THIS
				   FLAG
				   IS
				   USED
				   TO
				   PUT
				   THE
				   SYSTEM
				   IN
				   A
				   MODE
				   SUITABLE
				   FOR
				   NAIVE
				   USERS
				   IN
				   WHICH
				   NO
				   STRANGE
				   BREAKS
				   OR
				   UNANTICIPATED
				   COMMENTS
				   APPEAR/.
				   AT
				   THE
				   MOMENT/,
				   ONLY
				   SOME
				   OF
				   THE
				   THINGS
				   WHICH
				   MIGHT
				   CAUSE
				   SUCH
				   A
				   USER
				   CONCERN
				   ARE
				   CONDITIONED
				   TO
				   DISAPPEAR
				   WHEN
				   IDIOTFLAG
				   IS
				   ON/.)
			(IDO :
			     CAUSES
			     AUTOMATIC
			     INTERPRETATION
			     OF
			     SUCCESSFUL
			     PARSINGS)
			(IHELP :
			       CAUSES
			       CALLS
			       TO
			       HELPER
			       IF
			       TROUBLE
			       DEVELOPS
			       IN
			       INTERPRETING)
			(INPUTLOGFILE :
				      NAMES
				      THE
				      FILE
				      TO
				      WHICH
				      THE
				      INPUT
				      SENTENCES
				      ARE
				      TO
				      BE
				      LOGGED
				      (WHEN INPUTLOGFLAG IS SET))
			(INPUTLOGFLAG :
				      CAUSES
				      ALL
				      INPUT
				      SENTENCES
				      TO
				      BE
				      AUTOMATICALLY
				      LOGGED
				      ON
				      A
				      FILE)
			(IPRINT :
				CAUSES
				PRINTOUT
				OF
				SEMANTIC
				INTERPRETATION)
			(ITIMEFLAG :
				   CAUSES
				   PRINTING
				   OF
				   INTERPRETATION
				   TIME)
			(LOGFILE :
				 NAME
				 OF
				 OUTPUT
				 FILE
				 FOR
				 LOGGING
				 DETERMINED
				 BY
				 LOGFLAG)
			(LOGFLAG :
				 CAUSES
				 THE
				 PARSING/,
				 INTERPRETATIONS
				 AND
				 RESULTS
				 TO
				 BE
				 LOGGED
				 TO
				 A
				 FILE)
			(MAXBLOCKS :
				   A
				   NUMBER
				   INDICATING
				   THE
				   MAXIMUM
				   NUMBER
				   OF
				   BLOCKED
				   PATHS
				   TO
				   BE
				   PERMITTED
				   BEFORE
				   ABORTING
				   A
				   PARSING)
			(MAXPARSES :
				   A
				   NUMBER
				   WHICH
				   SPECIFIES
				   THE
				   MAXIMUM
				   NUMBER
				   OF
				   PARSING
				   ATTEMPTS
				   TO
				   BE
				   TRIED
				   BEFORE
				   GIVING
				   UP
				   ON
				   A
				   SEMANTIC
				   INTERPRETATION
				   (WHEN REPARSE IS SET))
			(MAXREPARSES :
				     LIMITS
				     THE
				     NUMBER
				     OF
				     TIMES
				     THAT
				     THE
				     SYSTEM
				     WILL
				     ATTEMPT
				     TO
				     REPARSE
				     A
				     SENTENCE
				     WHEN
				     A
				     GIVEN
				     SENTENCE
				     FAILS
				     TO
				     INTERPRET)
			(MAXTIME :
				 A
				 NUMBER
				 INDICATING
				 THE
				 MAXIMUM
				 NUMBER
				 OF
				 MILLISECONDS
				 OF
				 TIME
				 ALLOWED
				 FOR
				 A
				 PARSING
				 BEFORE
				 ABORTING)
			(PARENS :
				A
				NUMBER
				(1. OR 2.)
				INDICATING
				WHICH
				OF
				TWO
				NOTATIONS
				IS
				BEING
				USED
				FOR
				REPRESENTING
				PARSE
				TREES
				--
				1.
				INDICATES
				(S (NP /././.) (VP /././.))
				AND
				2.
				INDICATES
				(S ((NP (/././.)) (VP (/././.)))))
			(PAUSEFLAG :
				   CAUSES
				   SYSTEM
				   TO
				   PAUSE
				   AFTER
				   EACH
				   TRACE
				   COMMENT
				   WHEN
				   TRACE
				   IS
				   SET/.
				   (A CONFIRMING
				      /.
				      CAUSES
				      PARSING
				      TO
				      CONTINUE/,
				      WHILE
				      A
				      CONFIRMING
				      /,
				      CAUSES
				      A
				      CALL
				      TO
				      HELPER))
			(PHELP :
			       CAUSES
			       CALLS
			       TO
			       HELPER
			       WHEN
			       TROUBLE
			       DEVELOPS
			       DURING
			       THE
			       PARSING)
			(PMODE :
			       A
			       MODE
			       FLAG
			       INDICATING
			       HOW
			       THE
			       PARSING
			       IS
			       TO
			       BE
			       DONE
			       --
			       WHEN
			       NIL
			       (AND PHELP IS SET)
			       IT
			       CAUSES
			       CALLS
			       TO
			       HELPER
			       FOR
			       EACH
			       BLOCKED
			       CONFIGURATION/;
			       WHEN
			       EQUAL
			       TO
			       ALL
			       IT
			       CAUSES
			       ALL
			       PARSINGS
			       TO
			       BE
			       FOUND
			       SEQUENTIALLY/;
			       WHEN
			       EQUAL
			       TO
			       SPLIT
			       IT
			       CAUSES
			       ALL
			       PATHS
			       TO
			       BE
			       FOLLOWED
			       IN
			       PARALLEL/;
			       AND
			       WHEN
			       EQUAL
			       TO
			       T
			       (THE NORMAL MODE)
			       IT
			       STOPS
			       WITH
			       THE
			       FIRST
			       PARSING/.
			       (WHENEVER PMODE
					 IS
					 NON-NULL
					 THE
					 SYSTEM
					 WILL
					 AUTOMATICALLY
					 TRY
					 ALTERNATIVES
					 WHEN
					 IT
					 ENCOUNTERS
					 BLOCKED
					 CONFIGURATIONS))
			(PPRINT : CAUSES PRINTING OF THE PARSE TREE)
			(PPT :
			     CAUSES
			     THE
			     PARSE
			     TREE
			     TO
			     BE
			     PRINTED
			     IN
			     PRETTY
			     FORMAT
			     (WHEN PPRINT IS SET))
			(PTIMEFLAG : CAUSES PRINTING OF PARSE TIME)
			(REPARSE :
				 CAUSES
				 THE
				 SYSTEM
				 TO
				 AUTOMATICALLY
				 GO
				 BACK
				 AND
				 TRY
				 FOR
				 ANOTHER
				 PARSING
				 WHEN
				 NO
				 CURRENT
				 PARSINGS
				 ARE
				 INTERPRETABLE)
			(REQUESTDEF :
				    CAUSES
				    SYSTEM
				    TO
				    CALL
				    REQUESTDEF
				    TO
				    INTERACT
				    WITH
				    USER
				    WHEN
				    IT
				    ENCOUNTERS
				    UNKNOWN
				    WORDS)
			(RESOLVE :
				 CAUSES
				 SYSTEM
				 TO
				 CALL
				 RESOLVE
				 TO
				 INTERACT
				 WITH
				 USER
				 WHEN
				 THERE
				 ARE
				 SEVERAL
				 PARSINGS)
			(SIFLAG :
				AVAILABLE
				FOR
				TESTING
				BY
				THE
				GRAMMAR
				TO
				CONDITION
				WHETHER
				OR
				NOT
				TO
				PERFORM
				SIMULTANEOUS
				INTERPRETATION
				WHILE
				DOING
				THE
				PARSING/.
				I/.E/.
				WHETHER
				OR
				NOT
				TO
				CALL
				FOR
				A
				SEMANTIC
				INTERPRETATION
				OF
				EACH
				CONSTITUENT
				BUILT
				BY
				THE
				PARSER)
			(SMP :
			     (SELECTIVE MODIFIER PLACEMENT)
			     CAUSES
			     SYSTEM
			     TO
			     USE
			     SEMANTIC
			     INFORMATION
			     TO
			     DETERMINE
			     THE
			     PLACEMENT
			     OF
			     MODIFIERS
			     SUCH
			     AS
			     PREPOSITIONAL
			     PHRASES)
			(SYSCONJ :
				 ENABLES
				 THE
				 AUTOMATIC
				 SYSTEM
				 CONJUNCTION
				 FACILITY
				 WHICH
				 WILL
				 ACCEPT
				 CONJUNCTIONS
				 EVEN
				 IF
				 THE
				 GRAMMAR
				 DOES
				 NOT)
			(TRACE :
			       CAUSES
			       DETAILED
			       TRACING
			       OF
			       THE
			       PARSING
			       (PAUSEFLAG CAUSES
					  THE
					  SYSTEM
					  TO
					  PAUSE
					  AFTER
					  EACH
					  COMMENT))
			(TRACEFILE :
				   CAUSES
				   TRACING
				   TO
				   HAPPEN
				   TO
				   AN
				   OUTPUT
				   FILE
				   INSTEAD
				   OF
				   TO
				   THE
				   TTY/.
				   WHEN
				   NON-NIL/,
				   TRACEFILE
				   IS
				   THE
				   NAME
				   OF
				   THE
				   OUTPUT
				   FILE
				   TO
				   WHICH
				   THE
				   TRACING
				   IS
				   TO
				   BE
				   WRITTEN)
			(TRACEFILE :
				   NAMES
				   A
				   FILE
				   TO
				   WHICH
				   TRACING
				   COMMENTS
				   ARE
				   TO
				   BE
				   PRINTED/.
				   (WHEN TRACE IS SET)
				   (WHEN TRACEFILE
					 IS
					 NIL
					 TRACING
					 IS
					 PRINTED
					 TO
					 THE
					 TELETYPE))
			(UNSMASH :
				 CAUSES
				 CONJUNCTIONS
				 IN
				 PARSE
				 TREES
				 TO
				 BE
				 UNSMASHED
				 TO
				 THEIR
				 HIGHEST
				 POSSIBLE
				 SCOPE
				 BEFORE
				 SEMANTIC
				 INTERPRETATION)
			(UPRINT :
				CAUSES
				PRINTING
				OF
				THE
				PARSE
				TREE
				BEFORE
				UNSMASHING
				(WHEN UNSMASH IS SET))
			(WFSS :
			      ENABLES
			      THE
			      WELL-FORMED
			      SUBSTRING
			      FACILITY
			      WHICH
			      CAUSES
			      THE
			      PARSER
			      TO
			      KEEP
			      A
			      RECORD
			      OF
			      ALL
			      WELL-FORMED
			      SUBSTRINGS
			      WHICH
			      IT
			      HAS
			      FOUND
			      TO
			      ELIMINATE
			      DUPLICATING
			      THEIR
			      PARSINGS)))
	 (ABUF ABUF/;1)
	 (QBUF QBUF/;1)
	 (HITFILE HITFILE/;1)) 

(LISPXPRINT '(V: MODEVARS) T) 

(SETQ MODEVARS '(AHELP ASSIST
		       EDO
		       EHELP
		       ETIMEFLAG
		       FORCE
		       IDIOTFLAG
		       IDO
		       IHELP
		       INPUTLOGFILE
		       INPUTLOGFLAG
		       IPRINT
		       ITIMEFLAG
		       LOGFILE
		       LOGFLAG
		       MAXBLOCKS
		       MAXPARSES
		       MAXREPARSES
		       MAXTIME
		       PARENS
		       PAUSEFLAG
		       PHELP
		       PMODE
		       PPRINT
		       PPT
		       PTIMEFLAG
		       REPARSE
		       REQUESTDEF
		       RESOLVE
		       SIFLAG
		       SMP
		       SYSCONJ
		       TRACE
		       TRACEFILE
		       TRACEFILE
		       UNSMASH
		       UPRINT
		       WFSS)) 

(DEFINEV (AHELP NIL)
	 (ASSIST NIL)
	 (EDO NIL)
	 (EHELP NIL)
	 (ETIMEFLAG NIL)
	 (FORCE NIL)
	 (IDIOTFLAG NIL)
	 (IDO NIL)
	 (IHELP NIL)
	 (INPUTLOGFILE DDCLOG)
	 (INPUTLOGFLAG NIL)
	 (IPRINT T)
	 (ITIMEFLAG T)
	 (LOGFILE LOGFILE)
	 (LOGFLAG NIL)
	 (MAXBLOCKS 40.)
	 (MAXPARSES 5.)
	 (MAXREPARSES 5.)
	 (MAXTIME 40960.)
	 (PARENS 1.)
	 (PAUSEFLAG NIL)
	 (PHELP T)
	 (PMODE T)
	 (PPRINT T)
	 (PPT T)
	 (PTIMEFLAG T)
	 (REPARSE NIL)
	 (REQUESTDEF T)
	 (RESOLVE NIL)
	 (SIFLAG NIL)
	 (SMP NIL)
	 (SYSCONJ T)
	 (TRACE NIL)
	 (TRACEFILE NIL)
	 (TRACEFILE NIL)
	 (UNSMASH NIL)
	 (UPRINT NIL)
	 (WFSS NIL)) 

