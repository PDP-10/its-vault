

(DECLARE (SPECIAL FEXPR LUNARFNS UNDEFINED ARGS FUNCTION-NAME FILE S
		  BVARS FREE-FLAG II HOME MACLISPFNS INTERLISPFNS
		  PRETTY UNIQUE LMBDA MAXI FROM-FILES SOURCE FORMS
		  COND EQUIV *LAMBDA* FREEVARS OLD NEW NAME NFNS TEM FORM 
		  TO-FILE IN DEFAULT-FILE RUBOUT CR LF FF EXTRA)
	 (*FEXPR ERROR-PRINT GRINDEF)
	 (**ARRAY SPECS NAME VARS-FREE VARS-FREE-SETQD CALLS
		  CALLED-BY)
	 (*EXPR SPRINTER)) 

(*RSET T) 

(ALLOC '(LIST (8192. 40000. NIL)
	      SYMBOL
	      (1024. 6656. NIL)
	      FIXNUM
	      (1024. 6656. NIL))) 

;;*PAGE

;;;******************************
;;;		TOP LEVEL
;;;******************************

(DEFUN TOPLE NIL 
       (PROG (IN FN TO-FILE FROM-FILES DEFAULT-FILE EXTRA TEM PASS1-TIME PASS2-FLAG) 
	     (SSTATUS TTY 232020202022 232220222233)
	BEG  (SETQ TO-FILE NIL FROM-FILES NIL)
	ERR1 (SETQ IN (SCAN NIL) DEFAULT-FILE (LIST 'DSK (STATUS UDIR)))
	LUP  (COND ((NULL (CAR (SETQ FN (RDSYL)))) (SETQ DEFAULT-FILE (CDR FN)) (GO CHECK-TERM))
		   ((EQ (CAR IN) '_)
		    (COND ((OR TO-FILE FROM-FILES) (GO ERR)))
		    (SETQ TO-FILE (NCONC (CAR FN) (CDR FN)) IN (CDR IN))
		    (GO LUP)))
	     (SETQ FROM-FILES (NCONC FROM-FILES (LIST (NCONC (CAR FN) (CDR FN)))))
	CHECK-TERM
	     (COND ((EQ (CAR IN) '/,) (SETQ IN (CDR IN)) (GO LUP))
		   ((EQ (CAR IN) '@)
		    (SETQ IN (CDR IN) FN (RDSYL) EXTRA (APPEND (CAR FN)(CDR FN)))
		    (COND ((NULL (CAR FN)) (GO ERR))
			  ((NULL (ERRSET (APPLY 'UREAD (NCONC (CAR FN) (CDR FN))) NIL))
			   (PRINT (CAR FN))
			   (PRINC '/ FILE/ NOT/ FOUND)
			   (GO ERR1))
			  ((NULL (SETQ TEM ((LAMBDA (^Q) (SCAN 'INDIRECT)) T)))
			   (GO ERR)))
		    (SETQ IN (NCONC TEM IN))
		    (GO LUP))
		   ((EQ (CAR IN) '//)
		    (COND ((EQ (CADR IN) '/2) (SETQ PASS2-FLAG T)) (T (GO ERR)))
		    (SETQ IN (CDDR IN))
		    (GO LUP))
		   (IN (GO ERR)))
	     (OR FROM-FILES (GO ERR))
	(COND	(EXTRA)
		(TO-FILE (SETQ EXTRA TO-FILE))
		(T (SETQ EXTRA (CAR FROM-FILES))))
	     (COND (PASS2-FLAG (GO SKIP))
		   ((NULL (ERRSET (APPLY 'UREAD (DEFAULT '*PASS1)) NIL))
		    (GO PASS1)))
	     (SETQ PASS1-TIME (WHEN-WRITTEN) TEM FROM-FILES)
	CHECK(COND ((NULL TEM) (GO SKIP))
		   ((NULL (ERRSET (APPLY 'UREAD (CAR TEM)) NIL))
		    (PRINT (CAR TEM))
		    (PRINC '/ FILE/ NOT/ FOUND)
		    (GO ERR1))
		   ((> (WHEN-WRITTEN) PASS1-TIME) (GO PASS1)))
	     (SETQ TEM (CDR TEM))
	     (GO CHECK)
	SKIP (APPLY 'UREAD (DEFAULT '*PASS1))
	     ((LAMBDA (^Q) (PROG (IN) 
			    LUP	 (AND (EQ (SETQ IN (READ UNIQUE)) UNIQUE) (RETURN NIL))
				 (EVAL IN)
				 (GO LUP)))
	      T)
	     (GO PASS2)
	PASS1(TERPRI)
	     (PRINC '/;PASS1)
	     (PASS1)
	PASS2(TERPRI)
	     (PRINC '/;PASS2)
	     (AND TO-FILE (APPLY 'UWRITE (CDDR TO-FILE)))
	     (PASS2)
	     (AND TO-FILE (APPLY 'UFILE TO-FILE))
	(VALRET)
	     (GO BEG)
	ERR  (TERPRI)
	     (PRINC '/;***/ ILLEGAL/ INPUT/ FORMAT)
	     (GO ERR1)))

(DEFUN SCAN (FLAG) 
       (PROG (L CH) 
	AGAIN(COND ((NULL FLAG) (TERPRI) (PRINC '_)))
	LUP  (COND ((EQ (SETQ CH (TYI UNIQUE)) UNIQUE) (RETURN (NREVERSE L)))
		   ((LESSP 140 CH 173) (SETQ CH (- CH 40))))
	     (COND ((EQ (SETQ CH (ASCII CH)) RUBOUT)
		    (OR L (GO AGAIN))
		    (PRINC (CAR L))
		    (SETQ L (CDR L))
		    (GO LUP))
		   ((AND (EQ CH CR) FLAG) (SETQ CH '/,))
		   ((EQ CH CR) (RETURN (NREVERSE L)))
		   ((OR (EQ CH LF) (EQ CH FF)) (GO LUP)))
	     (SETQ L (CONS CH L))
	     (GO LUP)))

(DEFUN RDSYL NIL 
       (PROG (NAME1 NAME2 DEV USR SYL FN UNIT) 
	LUP  (COND ((NULL IN) (GO EOS))
		   ((MEMQ (CAR IN) '(/; : / ))
		    (SETQ SYL (MAKNAM SYL) TEM (CAR IN) IN (CDR IN))
		    (COND ((EQ TEM ':) (SETQ DEV SYL))
			  ((EQ TEM '/;) (SETQ USR SYL))
			  (SYL (SETQ NAME1 NAME2 NAME2 SYL)))
		    (SETQ SYL NIL)
		    (GO LUP))
		   ((MEMQ (CAR IN) '(/, _ @)))
		   ((LESSP 37 (CAR (EXPLODEN (CAR IN))))
		    (SETQ SYL (NCONC SYL (LIST (CAR IN))) IN (CDR IN))
		    (GO LUP)))
	EOS  (AND SYL (SETQ NAME1 NAME2 NAME2 (MAKNAM SYL)))
	     (COND ((AND (NULL NAME1) (NULL NAME2)) (SETQ FN NIL))
		   ((NULL NAME1) (SETQ FN (LIST NAME2 '>)))
		   ((NULL NAME2) (SETQ FN (LIST NAME1 '>)))
		   (T (SETQ FN (LIST NAME1 NAME2))))
	     (COND ((AND (NULL DEV) (NULL USR)) (SETQ UNIT DEFAULT-FILE))
		   ((NULL DEV) (SETQ UNIT (LIST (CAR DEFAULT-FILE) USR)))
		   ((NULL USR) (SETQ UNIT (LIST DEV (CADR DEFAULT-FILE))))
		   (T (SETQ UNIT (LIST DEV USR))))
	     (RETURN (CONS FN UNIT))))
 

 
(DEFUN DEFAULT (N)
(CONS (CAR EXTRA) (CONS N (CDDR EXTRA))))

(SETQ RUBOUT (ASCII 177) CR (ASCII 15) LF (ASCII 12) FF (ASCII 14))

;;*PAGE
		 
;;;******************************
;;;		DEBUGGING STUFF
;;;******************************

(DEFUN LOAD FEXPR (X) 
       (PROG (^Q EXP) 
	     (UREAD CV > DSK H/.L)
	     (IOC Q)
	LUP  (AND (EQ (SETQ EXP (READ UNIQUE)) UNIQUE)
		  (RETURN (CONS 'NOT-FOUND X)))
	     (AND (NOT (ATOM EXP))
		  (EQ (CAR EXP) 'DEFUN)
		  (MEMQ (CADR EXP) X)
		  (PROGN (SETQ X (DELETE (CADR EXP) X)) (EVAL EXP)))
	     (OR X (RETURN 'OK))
	     (GO LUP))) 

(DEFUN EV FEXPR (A) 
       (PROG (P N TOP) 
	     (SETQ N (EVAL (CAR A)) P (EVALFRAME NIL) TOP 0.)
	LUP  (AND (ZEROP N)
		  (RETURN (COND ((CDR A)
				 (SETQ N
				       (CADDDR (EVALFRAME (CADR P))))
				 (MAPCAR '(LAMBDA (X) (EVAL X N))
					 (CDR A)))
				(T (EVALFRAME (CADR P))))))
	     (SETQ N (1- N) P (EVALFRAME (CADR P)) TOP (1+ TOP))
	     (AND (NULL P) (RETURN (CONS '*TOP* TOP)))
	     (GO LUP))) 

;;*PAGE

;;;**************************************
;;;                    PASS1 STUFF
;;;****************************************

(DEFUN PASS1 NIL 
       (MAPC 
	'(LAMBDA (FILE) 
		 (PROG (IN) 
		       (OPEN-FILE FILE)
		  LUP  (COND ((EQ (SETQ IN (READDD)) UNIQUE)
			      (RETURN NIL))
			     ((OR (EQ (CAR IN) 'DEFINEQ)
				  (EQ (CAR IN) 'DEFINE))
			      (MAPC 'PASS1-DEFINE (CDR IN))))
		       (GO LUP)))
	FROM-FILES)
       (SETQ EQUIV NIL)
       (AND (ERRSET (APPLY 'UREAD (DEFAULT '*EQUIV)))
	    (PROG (EXP ^Q) 
		  (IOC Q)
	     LUP  (AND (EQ (SETQ EXP (READ UNIQUE)) UNIQUE)
		       (RETURN NIL))
		  (EVAL EXP)
		  (GO LUP)))
       (APPLY 'UWRITE (CDDR EXTRA))
       (MAPC 
	'(LAMBDA (FILE) 
	  (IOG
	   RW
	   (PROG (L) 
		 (PRINT '(SETQ LUNARFNS NIL))
		 (PRINT (APPEND '(DEF-CONTAINS)
				(LIST (CAR FILE))
				(SETQ L (GET (CAR FILE)
					     'CONTAINS-FUNCTION))))
		 (PRINT '(READ-TYPE-ARGS))
		 (MAPC 
		  '(LAMBDA (X) 
			   (PRINT (LIST X
					(GET X 'TYPE)
					(GET-ARGS (SPECS (GET X
							      'I))))))
		  L)
		 (PRINT NIL))))
	FROM-FILES)
       ((LAMBDA (^W ^R) (PRINT '(SETQ EQUIV NIL))
			(TERPRI)
			(PRINC '/(EQUIV/ )
			(MAPC 'PRINT EQUIV)
			(PRINC '/))
			(TERPRI))
	T
	T)
       ((LAMBDA (^W ^R) (PRINT ''DONE)) T T)
       (APPLY 'UFILE (DEFAULT '*PASS1))) 

(DEFUN DEF-CONTAINS FEXPR (FILE) 
       (PUTPROP (CAR FILE) (CDR FILE) 'CONTAINS-FUNCTION)
       (MAPC '(LAMBDA (Y) (PUTPROP Y (CAR FILE) 'IN-FILE))
	     (CDR FILE))
       (SETQ LUNARFNS (APPEND (CDR FILE) LUNARFNS))
       NIL) 

(DEFUN READ-TYPE-ARGS EXPR NIL 
       (PROG (IN N) 
	LUP  (COND ((NULL (SETQ IN (READ NIL))) (RETURN NIL)))
	     (SETQ LUNARFNS (ADDL (CAR IN) LUNARFNS))
	     (PUTPROP (CAR IN) (CADR IN) 'TYPE)
	     (SETQ N (MAKE-ENTRY (CAR IN)))
	     (PUT-ARGS (SPECS N) (CADDR IN))
	     (PUTPROP (CAR IN) 'LUNAR 'DEFINED-BY)
	     (GO LUP))) 

(DEFUN PASS1-DEFINE (X) 
       (PROG (I Y ARGS) 
	     (COND ((EQ (SETQ Y (CAADR X)) 'LAMBDA)
		    (PUTPROP (CAR X) 'EXPR 'TYPE))
		   (T (PUTPROP (CAR X) 'FEXPR 'TYPE)))
	     (SETQ I (MAKE-ENTRY (CAR X)))
	     (PUTPROP (CAR X) FILE 'IN-FILE)
	     (PUTPROP (CAR X) 'LUNAR 'DEFINED-BY)
	     (PUTPROP (CAR FILE)
		      (ADDL (CAR X)
			    (GET (CAR FILE)
				 'CONTAINS-FUNCTION))
		      'CONTAINS-FUNCTION)
	(SETQ ARGS (CADADR X))
	(COND ((OR (EQ Y 'LAMBDA)
		   (AND (EQ Y 'NLAMBDA)
		        (NOT (ATOM ARGS)) ) )
	       (PUT-ARGS (SPECS I) (CONS NIL (LENGTH ARGS))) ))
)) 
(SETQ EQUIV NIL) 

(DEFUN EQUIV FEXPR (X) (MAPC 'PUT-EQUIV X)) 

(DEFUN PUT-EQUIV (PAIR) 
	     (SETQ EQUIV (CONS PAIR EQUIV))
	     (PUTPROP (CAR PAIR) 'LUNAR 'DEFINED-BY)
	     (PUTPROP (CAR PAIR) (CADR PAIR) 'EQUIV))
;;*PAGE

;;;******************************
;;;  PASS2 STUFF
;;;******************************

(DEFUN PASS2 NIL 
	(OR PRETTY (NOT (GETL 'GRINDEF '(FSUBR LSUBR))) (FASLOAD GFN FASL COM))
       (MAPC 'EF FROM-FILES)
       (DUMP-OUT)
       'DONE) 

(DEFUN EF (FILE) 
       (PROG (EXP BVARS II FUNCTION-NAME) 
	     (SETQ FUNCTION-NAME '*TOP*)
	     (SETQ II (MAKE-ENTRY FUNCTION-NAME))
	     (OR (OPEN-FILE FILE) (RETURN NIL))
	     (OR TO-FILE (APPLY 'UWRITE (CDDR FILE)))
	     ((LAMBDA (^W ^R) 
		      (PRINT (SUBST (CAR FILE)
				    '*
				    '(DECLARE (GENPREFIX *)))))
	      T
	      T)
	LUP  (SETQ EXP (READDD))
	     (COND ((EQ EXP UNIQUE)
		    (RETURN (OR TO-FILE (APPLY 'UFILE (CONS (CAR FILE) (CONS 'TRANSL (CDDR FILE))))))))
	     (COND ((ATOM EXP) (GO OUT))
		   ((OR (EQ (CAR EXP) 'DEFINEQ)
			(EQ (CAR EXP) 'DEFINE))
		    (MAPC 'DO-DEFINE (CDR EXP))
		    (GO LUP)))
	     (SETQ EXP (META-EVAL EXP))
	OUT  (FILE-PRINT EXP)
	     (GO LUP))) 

(DEFUN DO-DEFINE (S) 
       (PROG (BVARS FUNCTION-NAME ARGS BODY II NARGS TEM) 
	     (SETQ FUNCTION-NAME (CAR S) 
		   ARGS (CADADR S) 
		   LMBDA (CAADR S) 
		   FEXPR (EQ LMBDA 'NLAMBDA) 
		   BVARS ARGS 
		   BODY (CDDADR S) 
		   II (CHECK-ENTRY FUNCTION-NAME) 
		   LUNARFNS (ADDL FUNCTION-NAME LUNARFNS))
	     (COND
	      ((SYSP FUNCTION-NAME)
	       (ERROR-PRINT
		(PRINC '***/ REDEFINING/ A/ SYSTEM/ FUNCTION/ [)
		(PRIN1 FUNCTION-NAME)
		(PRINC ']))))
	     (COND ((AND (NOT (ATOM ARGS)) (MEMQ NIL ARGS))
		    (ERROR-PRINT (PRINC '***/ NIL/ BAD/ ARG/ FOR/ )
				 (PRIN1 LMBDA)
				 (TYO 32.)
				 (PRIN1 ARGS)
				 NIL
				 (TERPRI)
				 (PRINC 'IN/ FUNCTION/ )
				 (PRIN1 FUNCTION-NAME))
		    (AND (EQUAL ARGS '(NIL)) (SETQ ARGS NIL))))
	     (COND ((NULL ARGS)(SETQ NARGS 0))
		   ((ATOM ARGS)
		    (SETQ ARGS (LIST ARGS))
		    (AND (EQ LMBDA 'LAMBDA)
			 (BREAK (ATOMIC LAMBDA) (PRINT S))))
		   ((EQ LMBDA 'NLAMBDA)
		    (SETQ BODY
			  (LIST (CONS (CONS 'LAMBDA
					    (CONS ARGS BODY))
				      (SPREAD (LENGTH ARGS))))
			 NARGS (LENGTH ARGS)
			  ARGS
			  '(*ARGS*)))
		  ((EQ LMBDA 'LAMBDA )
		   (SETQ NARGS (LENGTH ARGS))))
	(COND ((AND (NULL (SETQ TEM (GET-ARGS (SPECS II))))(NULL NARGS)) )
	      ((AND NARGS TEM
		    (EQ (CDR TEM) NARGS) ) )
	      (T (ERROR-PRINT
		   (PRINC '***/ DIFFERENT/ NO/ OF/ ARGS/ SEEN/ ON/ PASS2)
		   (TERRORPRI)
		   (PRINC FUNCTION-NAME)
		   (TYO 40) (PRIN1 NARGS) (TYO 40) (PRIN1 TEM))))
	     (SETQ BVARS ARGS)
	     (MAPC 'META-EVAL BODY)
	     (FILE-PRINT (CONS 'DEFUN
			       (CONS FUNCTION-NAME
				     (COND ((EQ LMBDA 'NLAMBDA)
					    (CONS 'FEXPR
						  (CONS ARGS BODY)))
					   (T (CONS ARGS BODY)))))))) 

(DEFUN SPREAD (NARGS) 
       (PROG (X) 
	     (DO I
		 1.
		 (1+ I)
		 (> I NARGS)
		 (SETQ X (CONS (SPREAD1 I '*ARGS*) X)))
	     (RETURN (NREVERSE X)))) 

(DEFUN SPREAD1 (N ARG) 
       (COND ((> N 4.) (SPREAD1 (- N 4.) (LIST 'CDDDDR ARG)))
	     (T (LIST (CDR (ASSQ N
				 '((1. . CAR) (2. . CADR)
				   (3. . CADDR) (4. . CADDDR))))
		      ARG)))) 

(DEFUN OUT-MAC (PAIR) 
       (PRINT (LIST 'DEFUN
		    (CAR PAIR)
		    'MACRO
		    '(X)
		    (LIST 'RPLACA
			  'X
			  (LIST 'QUOTE (CADR PAIR))
)))) 

(SETQ LUNARFNS NIL FREEVARS NIL UNDEFINED NIL) 

(DEFUN DUMP-OUT NIL 
 (DUMP-DECL)
 (DUMP-INDEX)
 (DUMP-ARGS) )

(DEFUN DUMP-DECL NIL
	(APPLY 'UWRITE (CDDR EXTRA))
       (SETQ FREEVARS (SORT FREEVARS 'ALPHALESSP))
       (SETQ LUNARFNS (SORT LUNARFNS 'ALPHALESSP))
       ((LAMBDA (^W ^R) 
	 (PRINT (LIST 'DECLARE
		      (CONS 'SPECIAL FREEVARS)))
	 (TERPRI)
	 (PRINT (LIST 'DECLARE
		      (CONS '*EXPR
			    (FIND-FNS 'EXPR LUNARFNS))))
	 (TERPRI)
	 (PRINT (LIST 'DECLARE
		      (CONS '*FEXPR
			    (FIND-FNS 'FEXPR LUNARFNS))))
	(TERPRI)
	 (MAPC 'OUT-MAC EQUIV)
	 (COND
	  (UNDEFINED
	   (TERPRI)
	   (PRINC '/(COMMENT/ )
	   (PRINC 'FUNCTIONS/ NOT/ DEFINED/ IN/ MACLISP/ OR/ SOURCE)
	   (PRINT (SORT UNDEFINED 'ALPHALESSP))
	   (PRINC '/)))))
	T
	T)
	(APPLY 'UFILE (DEFAULT '*DECL)))

(DEFUN DUMP-INDEX NIL
	(APPLY 'UWRITE (CDDR EXTRA))
       (SETQ TEM NIL)
	((LAMBDA (^W ^R)
	  (DO I 1 (1+ I) (> I MAXI)
	    (SETQ TEM (CONS (NAME I) TEM)) )
	  (SETQ TEM (SORT TEM 'ALPHALESSP))
	  (MAPC 'LOOK TEM)
	 ) T T)
	(APPLY 'UFILE (DEFAULT '*INDEX)))

(DEFUN DUMP-ARGS NIL
	(APPLY 'UWRITE (CDDR EXTRA))
   (SETQ TEM NIL)
	  (DO I 1 (1+ I) (> I MAXI)
	    (SETQ TEM (CONS (NAME I) TEM)) )
	  (SETQ TEM (SORT TEM 'ALPHALESSP))
   ((LAMBDA (^W ^R)
	(PRINC '/(DEFINE-ARGS/ )
	(TERPRI)
	(MAPC '(LAMBDA (X)
	 (COND ((NOT (SYSP X))
		(PRINT (LIST X (GET X 'TYPE)
		             (GET-ARGS (SPECS (GET-I X)))))
		)))
	 TEM)
	(PRINC '/))
	(TERPRI) ) T T)
	(APPLY 'UFILE (DEFAULT '*ARGS)))
 


(DEFUN FIND-FNS (FCN L) 
       (PROG (FF) 
	LUP  (COND ((NULL L) (RETURN FF))
		   ((EQ (GET (CAR L) 'TYPE) FCN)
		    (SETQ FF (CONS (CAR L) FF))))
	     (SETQ L (CDR L))
	     (GO LUP))) 

;;*PAGE

;;;******************************
;;;	FUNCTION DEF STUFF
;;;******************************

(DEFUN LOOK (N) 
       (PROG (ALIAS NAME TEM) 
	AGAIN(COND ((NUMBERP N) (SETQ NAME (NAME N)))
		   ((SETQ NAME N N (GET NAME 'I)))
		   ((SETQ ALIAS NAME N (GET ALIAS 'EQUIV))
		    (GO AGAIN))
		   ((RETURN NIL)))
	     (TERPRI)
	     (PRINC '/(COMMENT/	)
	     (PRINC NAME)
	     (PRINC '/	)
	     (AND (SETQ TEM (GET NAME 'TYPE))
		  (PRINC TEM))
	     (COND ((SETQ TEM (GET NAME 'IN-FILE))
		    (PRINC '/	IN/ FILE:)
		    (PRIN1 TEM)))
	     (TERPRI)
	     (PRINC '/ / CALLS:/	)
	     (PRINC (CALLS N))
	     (TERPRI)
	     (PRINC 'CALLED-BY:/	)
	     (PRINC (CALLED-BY N))
	     (TERPRI)
	     (PRINC 'FREE-VARS:/	)
	     (PRINC (VARS-FREE N))
	     (TERPRI)
	     (PRINC '/ "-SETQ/'ED:/	)
	     (PRINC (VARS-FREE-SETQD N))
	     (TERPRI)
	     (AND ^R  (RETURN NIL))
	     (PRINC '/ / / PATH:/	)
	     (PRINC (GET-PATH (SPECS N)))
	     (TERPRI)
	     (PRINC '/ / TRANS:/	)
	     (PRINC (GET-TRANS (SPECS N)))
	     (TERPRI)
	     (PRINC '/ / / ARGS:/	)
	     (PRINC (GET-ARGS (SPECS N)))
	     (TERPRI)
	     (PRINC '/ / WHOSE:/	)
	     (PRINC (GET NAME 'DEFINED-BY))
	     (TERPRI)
	     (COND ((SETQ TEM (GET NAME 'TYPE))
		    (RETURN N)))
	     (PRINC '/ / / TYPE:/	)
	     (PRIN1 TEM)
		(PRINC '/))
	     (TERPRI)
	     (RETURN N))) 

(DEFUN MAKE-ENTRY (NAME) 
       (PROG (I) 
	     (COND ((SETQ I (GET-I NAME)) (RETURN I))
		   ((SETQ I (GET NAME 'EQUIV))(SETQ NAME I)))
	     (SETQ MAXI (1+ MAXI) I MAXI)
	     (OR (< MAXI NFNS) (BREAK (NAME TABLE FULL) T))
	     (STORE (NAME I) NAME)
	     (STORE (CALLS I) NIL)
	     (STORE (CALLED-BY I) NIL)
	     (STORE (VARS-FREE I) NIL)
	     (STORE (VARS-FREE-SETQD I) NIL)
	     (STORE (SPECS I) (LIST NIL NIL NIL))
	     (AND (NOT (GET NAME 'DEFINED-BY))
		  (GETL NAME '(SUBR FSUBR LSUBR))
		  (PUTPROP NAME 'MAC 'DEFINED-BY))
	     (PUTPROP NAME I 'I)
	     (RETURN I))) 

(DEFUN CHECK-ENTRY (NAME) 
       (PROG (I) 
	LUP  (COND ((SETQ I (GET-I NAME)) (RETURN I)))
	     (PRINT NAME)
	     (AND (BREAK (FUNCTION NOT SEEN ON PASS 1.) T) (GO LUP))
	     (RETURN (MAKE-ENTRY NAME)))) 

(DEFUN GET-I (NAME) 
       (PROG (I) 
	LUP  (COND ((NULL NAME) (BREAK (NULL FUNCTION NAME) T))
		   ((SETQ I (GET NAME 'I)) (RETURN I))
		   ((SETQ I (GET NAME 'EQUIV))
		    (SETQ NAME I)
		    (GO LUP))))) 

(SETQ NFNS 1000. MAXI 0.) 

(ARRAY NAME T NFNS) 

(ARRAY CALLS T NFNS) 

(ARRAY CALLED-BY T NFNS) 

(ARRAY VARS-FREE T NFNS) 

(ARRAY VARS-FREE-SETQD T NFNS) 

(ARRAY SPECS T NFNS) 

(DEFUN PUT-PATH (N X) (RPLACA N X)) 

(DEFUN PUT-TRANS (N X) (RPLACA (CDR N) X)) 

(DEFUN PUT-ARGS (N X) (RPLACA (CDDR N) X)) 

(DEFUN GET-ARGS (N) (CADDR N)) 

(DEFUN GET-PATH (N) (CAR N)) 

(DEFUN GET-TRANS (N) (CADR N)) 

(SETQ II (MAKE-ENTRY (SETQ FUNCTION-NAME '*TOP*))) 

(SETQ *LAMBDA* (MAKE-ENTRY '*LAMBDA*)) 

(PUT-PATH (SPECS *LAMBDA*) 'STRAIGHT-MAP) 

;;*PAGE

;;;******************************
;;;		META-EVAL
;;;******************************

(DEFUN META-EVAL (S) 
       (PROG (NAME I ARG-L PATH TRANS ARGS SPECS RENAME) 
	     (COND ((ATOM S)
		    (COND ((AND (EQ (TYPEP S) 'SYMBOL)
				(NOT (MEMQ S BVARS))
				(NOT (MEMQ S '(T NIL))))
			   (STORE (VARS-FREE II)
				  (ADDL S (VARS-FREE II)))
			   (SETQ FREEVARS (ADDL S FREEVARS) 
				 FREE-FLAG T)
			   (RETURN S))
			  (T (RETURN S))))
		   ((ATOM (SETQ NAME (CAR S))))
		   ((EQ (CAR NAME) 'LAMBDA)
		    (META-EVAL (CAR S))
		    (SETQ I *LAMBDA*)
		    (PUT-ARGS (SPECS I)
			      (CONS NIL (LENGTH (CADR NAME))))
		    (GO LAMBDA))
		   (T (PRINT (CAR S))
		      (BREAK (FUNNY FUNCTIONAL FORM) T)
		      (RETURN S)))
	AGAIN(SETQ NAME (CAR S))
	     (OR (SETQ I (GET-I NAME))
		 (PROGN (PRINT '(UNKNOWN FUNCTION))
			(PRIN1 NAME)
			(PRINC '/ IN/ )
			(PRIN1 FUNCTION-NAME)
			(TYO 32.)
			(PRIN1 (STATUS UREAD))
			(BREAK BAD-FCN T)
			 (OR (GET-I NAME)
			     (DEFSS1 NAME
				    (LIST 'PATH
					  'STRAIGHT-MAP
					  'ARGS
					  (CONS NIL
						(LENGTH (CDR S))))))
			(GO AGAIN)))
	LAMBDA
	     (SETQ SPECS (SPECS I) 
		   ARGS (GET-ARGS SPECS) 
		   PATH (GET-PATH SPECS) 
		   TRANS (GET-TRANS SPECS) 
		   NAME (NAME I)
		   RENAME (GET NAME 'RENAME))
	     (AND TRANS (RUN TRANS))
	     (AND RENAME (RPLACA S RENAME) (SETQ NAME RENAME))
	     (COND ((OR (EQ (GET NAME 'DEFINED-BY) 'LUNAR)
			(SYSP NAME)(EQ NAME '*LAMBDA*) ))
	           (T (SETQ UNDEFINED (ADDL NAME UNDEFINED))))
       (SETQ ARG-L (LENGTH (CDR S)))
       (COND ((NULL ARGS) (GO OK))
	     ((NULL (CAR ARGS))
	      (COND ((= ARG-L (CDR ARGS)) (GO OK))
		    ((> (CDR ARGS) ARG-L)
		     (NCONC S (LISTN (- (CDR ARGS) ARG-L)))
		     (GO OK))))
	     ((AND (< (CAR ARGS) (1+ ARG-L))
		   (< (1- ARG-L) (CDR ARGS)))
	      (GO OK)))
       (ERROR-PRINT (PRINC '***/ WRONG/ NUMBER/ OF/ ARGUMENTS/ -/ )
		    (PRINC (CAR S))
		    NIL
		    (TERPRI)
		    (PRIN1 S)
		    (PRINC '/ / )
		    (PRINC ARGS))
       (BREAK (CAN/'T FIX ARGS) T)
       OK
       (COND ((AND (NOT (EQ NAME '*LAMBDA*))
		   (NOT (EQ NAME '*TOP*))
		   (NOT (SYSP NAME)))
	      (STORE (CALLS II) (ADDL NAME (CALLS II)))
	      (STORE (CALLED-BY I)
		     (ADDL FUNCTION-NAME (CALLED-BY I)))))
       (COND
	(PATH (RUN PATH))
	((EQ (SETQ PATH (GET NAME 'TYPE)) 'EXPR)
	 (MAPC 'META-EVAL (CDR S)))
	((AND (EQ PATH 'FEXPR) (NOT TRANS))
	 (COND
	  ((NOT (GET NAME 'FEXPR-CALLS-EVAL)))
	  ((EVERY (CDR S) 'ATOM))
	  (T
	   (ERROR-PRINT
	    (PRINC '***/ FEXPR/ CALLED/ THAT/ DOES/ EVAL/ [)
	    (PRIN1 NAME)
	    (PRINC ']/ IN/ )
	    (PRIN1 FUNCTION-NAME)))))
	((NOT TRANS) (BREAK (NO PATH AND NOT EXPR) (PRINT S))))
       (RETURN S)) )

(DEFUN RUN (X) (COND ((ATOM X) (APPLY X NIL)) (T (EVAL X)))) 

;;*PAGE

;;;******************************
;;;		RANDOM STUFF
;;;******************************

(SETQ SOURCE '(DSK H/.L)) 

(SETQ HOME '(DSK H/.L)) 

(DEFUN OPEN-FILE (FILE) 
       (PROG NIL 
	     (COND ((ERRSET (APPLY 'UREAD FILE)))
		   (T (PRINT FILE)
		      (PRINT '(FILE NOT FOUND))
		      (RETURN NIL)))
	     (PRINT (STATUS UREAD))
	     (PRINC 'OPENED)
	     (RETURN T))) 

(DEFUN EVERY (L PRED) 
       (PROG NIL
 LUP 
	     (COND ((NULL L) (RETURN T))
		   ((NOT (FUNCALL PRED (CAR L))) (RETURN NIL)))
	     (SETQ L (CDR L))
	     (GO LUP))) 

(DEFUN SOME (L PRED)
(PROG NIL
 LUP (COND ((NULL L)(RETURN NIL))
	   ((FUNCALL PRED (CAR L))
	    (RETURN T)) )
	(SETQ L (CDR L))
	(GO LUP)))

(DEFUN ERROR-PRINT FEXPR (%X) 
       (PROG (^R PRINLEVEL PRINLENGTH) 
	     (SETQ PRINLEVEL 3. ^R T PRINLENGTH 6.)
	     (TERRORPRI)
	LUP  (OR %X (RETURN NIL))
	     (COND ((EQ (CAR %X) NIL) (SETQ ^R NIL))
		   ((EQ (CAR %X) T) (SETQ ^R T))
		   ((EQUAL (CAR %X) '(TERPRI)) (TERRORPRI))
		   ((EQ (CAAR %X) 'PRINT)
		    (TERRORPRI)
		    (PRIN1 (EVAL (CDAR %X)))
		    (PRINC '/ ))
		   (T (EVAL (CAR %X))))
	     (SETQ %X (CDR %X))
	     (GO LUP))) 

(DEFUN TERRORPRI NIL (TERPRI) (PRINC '/;)) 

(DEFUN READDD NIL 
       (PROG (^Q READTABLE) 
	     (SETQ ^Q T 
		   READTABLE (GET 'INTER-TABLE 'ARRAY))
	     (RETURN (INTER-READ UNIQUE)))) 

(SETQ UNIQUE (GENSYM)) 

(DEFUN READSTRING NIL 
       (PROG (STRING CH) 
	     (SSTATUS MACRO " NIL)
	LOOP (AND
	      (EQ (SETQ CH (READCH)) '")
	      (RETURN
	       (PROG2 (SSTATUS MACRO " 'READSTRING)
		      (SETQ STRING
			    (MAKNAM (NREVERSE  STRING)))
		)))
	     (SETQ STRING (CONS CH STRING))
	     (GO LOOP))) 

(MAKREADTABLE 'INTER-TABLE) 

((LAMBDA (READTABLE) (SETSYNTAX 10. (STATUS SYNTAX 32.) NIL)	       ; TURN <CAR-RET> INTO A BREAK CHAR
		     (SETSYNTAX 39. 2. 39.)			       ;SINGLE QUOTE INTO PNAME TYPE, MUNGING QUOTE
		     (SETSYNTAX 91. (STATUS SYNTAX 40.) 91.)	       ;MACRO  LEFT BRACKET INTO LEFT PAREN
		     (SETSYNTAX 93. (STATUS SYNTAX 41.) 93.)	       ;RIGHT BRACKET INTO RIGHT PAREN 		    
		     (SETSYNTAX 37. (STATUS SYNTAX 47.) NIL)	       ;(SETSYNTAX 46. 2. NIL)			      
		     (SETSYNTAX 39. 2. 39.)			       ;;PERIOD INTO PNAME TYPE PERCENT INTO
		     (SETSYNTAX 47. 2. NIL)			       ;PNAME-FORCING SINGLE QUOTE INTO CHARACTER SLASH
		     (SSTATUS MACRO " 'READSTRING)		       ;INTO PNAME TYPE
		     (SETSYNTAX 44. 2. NIL)			       ;COMMA INTO PNAME TYPE
		     ;;CLOBBER SEMI-COLON INTO PNAME TYPE
		     (SETSYNTAX 59. 65. 59.))
 (GET 'INTER-TABLE 'ARRAY)) 

(SETQ PRETTY T) 

(DEFUN FILE-PRINT (EXP) 
       ((LAMBDA (^W ^R) (AND PRETTY (SPRINTER EXP 0. 0.))
			(OR PRETTY (PRINT EXP))
			(PRINC '/ ))
	T
	T)) 

(DEFUN ADDL (ITEM LIST) 
       (COND ((MEMQ ITEM LIST) LIST) (T (CONS ITEM LIST)))) 

;;*PAGE

;;;******************************
;;;	FUNCTION DEFINITIONS
;;;******************************

(SETQ MACLISPFNS NIL INTERLISPFNS NIL LUNARFNS NIL) 

(DEFUN ADD-PATH FEXPR (X) 
       (DO I
	   X
	   (CDDR I)
	   (NULL I)
	   (DEFSS1 (CAR I) (LIST 'PATH (CADR I))))
       NIL) 

(DEFUN MACLISP (LIST) 
       (MAPC 
	'(LAMBDA (FUNCTION) 
		 (PUTPROP FUNCTION 'MAC 'DEFINED-BY))
	LIST)
       (SETQ MACLISPFNS (CONS LIST MACLISPFNS))
       NIL) 

(DEFUN INTERLISP (LIST) 
       (MAPC 
	'(LAMBDA (FUNCTION) 
		 (PUTPROP FUNCTION 'INTER 'DEFINED-BY))
	LIST)
       (SETQ INTERLISPFNS (CONS LIST INTERLISPFNS))
       NIL) 

(DEFUN DEFSS FEXPR (L) 
       (MAPC '(LAMBDA (X) (DEFSS1 (CAR X) (CDR X))) L)
       NIL) 

(DEFUN DEFSS1 (NAME LIST) 
       (PROG (I VAL) 
	     (COND ((NOT (ATOM NAME))
		    (RETURN (MAPC '(LAMBDA (N) (DEFSS1 N LIST))
				  NAME))))
	     (SETQ I (MAKE-ENTRY NAME))
	     (OR (GET-ARGS (SPECS I))
		 (PUT-ARGS (SPECS I) (ARGS NAME)))
	(OR (GET-PATH (SPECS I)) (PUT-PATH (SPECS I) 'STRAIGHT-MAP))
	LUP  (OR LIST (RETURN NIL))
	     (SETQ VAL (CADR LIST))
	     (COND ((EQ (CAR LIST) 'PATH)
		    (AND (NUMBERP VAL)
			 (PUT-ARGS (SPECS I) (CONS NIL VAL))
			 (SETQ VAL 'STRAIGHT-MAP))
		    (PUT-PATH (SPECS I) VAL))
		   ((EQ (CAR LIST) 'TRANS)
		    (PUT-TRANS (SPECS I) (CADR LIST)))
		   ((EQ (CAR LIST) 'ARGS)
		    (PUT-ARGS (SPECS I) (CADR LIST)))
		   ((NUMBERP (CAR LIST))
		    (SETQ LIST (CONS 'PATH LIST))(GO LUP))
		   ((EQ (CAR LIST) 'RENAME)
		    (PUTPROP NAME (CADR LIST) 'RENAME)) )
	     (SETQ LIST (CDDR LIST))
	     (GO LUP))) 

;;*PAGE

;;;*********************************************************
;;;
;;;             SUPPLEMENTARY TRANSLATION FUNCTIONS
;;;
;;;*********************************************************

(DEFUN PATH-RUN FEXPR (X) 
       (AND (SETQ X (GET-PATH (SPECS (GET (CAR X) 'I))))
	    (RUN X))) 

(DEFUN TRANS-RUN FEXPR (X) 
       (AND (SETQ X (GET-TRANS (SPECS (GET (CAR X) 'I))))
	    (RUN X))) 

(DEFUN IGNORE NIL T) 

(DEFUN PATH-PROG NIL 
       ((LAMBDA (BVARS) 
		(SETQ BVARS (APPEND (CADR S) BVARS))
		(MAPC 
		 '(LAMBDA (X) (COND ((ATOM X)) (T (META-EVAL X))))
		 (CDDR S)))
	BVARS)) 

(DEFUN PATH-SETQ NIL 
       (COND ((NOT (MEMQ (CADR S) BVARS))
	      (SETQ FREEVARS (ADDL (CADR S) FREEVARS))
	      (STORE (VARS-FREE-SETQD II)
		     (ADDL (CADR S) (VARS-FREE-SETQD II)))))
       (META-EVAL (CADDR S))) 

(DEFUN PATH-SETQQ NIL 
       (COND ((NOT (MEMQ (CADR S) BVARS))
	      (SETQ FREEVARS (ADDL (CADR S) FREEVARS))
	      (STORE (VARS-FREE-SETQD II)
		     (ADDL (CADR S) (VARS-FREE-SETQD II)))))) 

(DEFUN LAMBDA-BODY NIL 
       ((LAMBDA (BVARS) (MAPC 'META-EVAL (CDDR S))) (CADR S))) 

(DEFUN MUNJ-NAME (NEW-NAME) (RPLACA S NEW-NAME)
			   (SETQ NAME NEW-NAME)) 

(DEFUN REVERSE-2-3 NIL 
       (OR (CDDR S)
	   (PROGN (BREAK (NOT ENOUGH ARGS HERE) (PRINT S))
		  (RPLACD (CDDR S) (LIST NIL))))
       (RPLACA (CDR S)
	       (PROG2 0. (CADDR S) (RPLACA (CDDR S) (CADR S))))) 

(DEFUN REVERSE-3-4 NIL 
       (OR (CDDDR S)
	   (PROGN (BREAK (NOT ENOUGH ARGS HERE) (PRINT S))
		  (RPLACD (CDDDR S) (LIST NIL))))
       (RPLACA (CDDR S)
	       (PROG2 0. (CADDDR S) (RPLACA (CDDDR S) (CADDR S))))) 

(DEFUN TRANS-FUNCTION NIL 
  (PROG (TEM)
	(COND ((AND (ATOM (CADR S))(SETQ TEM (GET (CADR S) 'RENAME)))
		    (RPLACA (CDR S) TEM)))))

(DEFUN PATH-FUNCTION NIL
(PROG (BVARS)
	(COND ((ATOM (CADR S)))
	      (T (META-EVAL (CADR S))))))

(DEFUN TRANS-PROG NIL 
       (PROG (PAIRS) 
	     (MAP 
	      '(LAMBDA (VAR) 
		       (COND ((ATOM (CAR VAR)))
			     (T (SETQ PAIRS (CONS (CAR VAR) PAIRS))
				(RPLACA VAR (CAAR VAR)))))
	      (CADR S))
	     (AND PAIRS
		  (RPLACD (CDR S)
			  (CONS (CONS 'SETQ
				      (APPLY 'APPEND PAIRS))
				(CDDR S)))))) 

(DEFUN PATH-COND NIL 
       (MAPC '(LAMBDA (CLAUSE) 
		      (MAPC '(LAMBDA (ELEMENT) (META-EVAL ELEMENT))
			    CLAUSE))
	     (CDR S))) 

(DEFUN PATH-EVAL NIL 
     (STRAIGHT-MAP)
     (COND
      ((AND FEXPR
            (CALLED-BY II)
	    (NULL (GET-PATH (SPECS II))) )
       (ERROR-PRINT (PRINC '***/ EVAL/ IMBEDDED/ IN/ FEXPR/ [)
		    (PRIN1 FUNCTION-NAME)
		    (PRINC '])
		    (PRINC '/,/ CHECK/ CALLS/ MANUALLY))
      (PUTPROP FUNCTION-NAME T 'FEXPR-CALLS-EVAL))))

(DEFUN STRAIGHT-MAP NIL (MAPC 'META-EVAL (CDR S))) 

(DEFUN TRANS-APPLY* NIL
(CHECK-ARG (CADR S) (LENGTH (CDDR S))))

(DEFUN TRANS-MAP NIL 
       (PROG (OLD) 
	     (SETQ OLD (CAR S))
	     (COND ((> (LENGTH S) 3.)
		    (MUNJ-NAME (IMPLODE (CONS '*
					      (EXPLODE (CAR S)))))
		    (ERROR-PRINT (PRINC '***/ CONVERTING/ )
				 (PRIN1 OLD)
				 (PRINC '/ TO/ )
				 (PRIN1 (CAR S))
				 NIL
				 (TERPRI)
				 (PRIN1 S))))
	     (REVERSE-2-3)
	(CHECK-ARG (CADR S) 1)
	(AND (CDDDR S)(CHECK-ARG (CADDDR S) 1))
)) 

(DEFUN CHECK-ARG (FORM L)
(PROG (TEM)
 (COND	((ATOM FORM) (GO LOSE))
	((NOT (MEMQ (CAR FORM) '(QUOTE FUNCTION))) (GO LOSE))
	((ATOM (CADR FORM))
	 (COND ((NULL (SETQ TEM (GET-ARGS (SPECS (CHECK-ENTRY (CADR FORM))))))
		(GO LOSE))
	       ((AND (NULL (CAR TEM))(= (CDR TEM) L)))
	       ((AND (CAR TEM)(< (CAR TEM) (1+ L))(> (CDR TEM) (1- L))) )
	       ((> (CDR TEM) L)
		(RPLACA (CDR FORM)
			(SUBST (CONS (CADR FORM)
			        (CONS '*MAP* (LISTN (- (CDR TEM) L))))
			       'FN
			       '(LAMBDA (*MAP*) FN)) )
		(ERROR-PRINT 
		  (PRINC '***/ LAMBDA-IFYING/ MULTI-ARG/ FUNCTION/ IN/ A/ MAP/ )
		  (PRINC (CADR FORM ))
	NIL	  (TERPRI)
		  (PRINC S)) )
	       (T (GO LOSE)) ) )
	((AND (EQ (CAADR FORM) 'LAMBDA)
	      (= (LENGTH (CADADR FORM)) L)) )
	(T (GO LOSE)) )
  (RETURN NIL)
LOSE (ERROR-PRINT
	(PRINC '***/ CHECK/ ARG/ LENGTH/ ON/ FUNCTIONAL/ ARG/ OF/ )
	(PRINC (CAR S))
	(TERRORPRI)
	(PRINC '/	FUN/.ARG-/ )
	(PRINC FORM)
	(PRINC '/ IN/ )
	(PRINC FUNCTION-NAME) )
   ))

(DEFUN LISTN (N)
(PROG (L)
(DO I 1 (1+ I) (> I N)
(SETQ L (CONS NIL L)))
(RETURN L)))

(DEFUN TRANS-EQ NIL 
 (COND ((SOME (CDR S) 'NUMBERP)	     
        (MUNJ-NAME '=)
        ((LAMBDA (^R ^W) 
         (TERRORPRI)
         (PRINC
           '***/ CONVERTING/ EQ/ WITH/ NUMERIC/ ARG/ TO/ =))
          T
          T)))) 

(DEFUN TRANS-MEMB NIL
  (MUNJ-NAME 'MEMQ)
  (COND ((AND (NOT (ATOM (CADDR S)))
	      (EQ (CAADDR S) 'QUOTE)
	      (SOME (CDADDR S) 'NUMBERP))
	 (ERROR-PRINT
		(PRINC '***/ CHANGED/ MEMQ/ TO/ MEMBER/ BECAUSE/ OF/ NUMERIC/ ARGUMENT)))))

(DEFUN TRANS-QUOTE NIL 
       (OR
	(EQ (LENGTH S) 2.)
	(PROG (NEW) 
	      (ERROR-PRINT
	       (PRINC '***/ WRONG/ NUMBER/ OF/ ARGUMENTS/ TO/ QUOTE)
	       NIL
	       (TERPRI)
	       (PRIN1 S))
	      (TERPRI)
	      (PRINC 'TYPE/ NEW/ EXPRESSION/ FOR/ QUOTE/ )
	      (SETQ NEW (READ))
	      (AND (EQ (CAR NEW) 'QUOTE) (SETQ NEW (CADR NEW)))
	      (RPLACD S (LIST NEW))
	      (TERPRI)
	      (PRIN1 S)))) 

;;*PAGE

;;;***********************************************
;;;    PARTIAL LIST OF THE INTERLISP FUNCTIONS
;;;    (EDITOR, FILE SYSTEM, ETC. LEFT OUT)
;;;*******************************************************************
;;* (GRINDMACRO QUOTE QUOTELIST)


(INTERLISP '(CLOSEF FILEPOS INFILE INFILEP SFPTR OUTFILE OUTPUT
	     READ TERPRI PRIN2 PRIN3 LISPXPRINT LISPXPRIN1
	     LISPXTERPRI NLISTP APPLY* RETURN READC ERSETQ DEFINEV
	     TERPRI EDITE OUTFILE CONTROL READ ENDFILE RUNFORK
	     PRINT PRIN1 RPAQQ RPAQ PROG)) 

(INTERLISP '(NLISTP CONSCOUNT FRPLACA FRPLACD KWOTE SELECTQ PROG1
	     SETQQ LITATOM NUMBERP STRINGP ARRAYP LISTP NEQ EQP
	     EVERY SOME NOTANY NOTEVERY MEMB FMEMB TAILP ASSOC
	     FASSOC SASSOC)) 

(INTERLISP '(NCONC1 TCONC LCONC ATTACH REMOVE DREMOVE COPY REVERSE
	     DREVERSE SUBST DSUBST LSUBST ESUBST SUBLIS SUBPAIR
	     LAST FLAST NLEFT LASTN NTH FNTH LENGTH FLENGTH COUNT
	     LDIFF INTERSECTION UNION SORT MERGE ALPHORDER)) 

(INTERLISP '(PUT ADDPROP REMPROP CHANGEPROP GET GETP GETLIS DEFLIST)) 

(INTERLISP '(GETD PUTD PUTDQ MOVD FNTYP SUBRP CCODEP EXPRP ARGTYPE
	     NARGS ARGLIST DEFINE DFNFLG DEFINEQ SAVEDEF UNSAVEDEF
	     EVAL E APPLY EVALA RPT RPTQ ARG SETARG)) 

(INTERLISP '(PNAME PRIN2-PNAME PACK UNPACK DUNPACK NCHARS NTHCHAR
	     CHCON CHCON1 DCHCON CHARACTER GENSYM GENNUM MAPATOMS
	     STRINGP STREQUAL MKSTRING RSTRING SUBSTRING GNC GLC
	     CONCAT RPLSTRING MKATOM STRPOS ARRAY ARRAYSIZE ARRAYP
	     ELT SETA ELTD SETD RECLAIM NTYP TYPEP GCGAG MINFS
	     STORAGE GCTRP CONSCOUNT CLOSER OPENR)) 

(INTERLISP '(FUNCTION MAP MAPC MAPLIST MAPCAR MAPCON MAPCONC MAP2C
	     MAP2CAR MAPRINT MAPDL SEARCHPDL MAPATOMS EVERY SOME
	     NOTEVERY NOTANY FUNARG)) 

(INTERLISP '(IPLUS IMINUS IDIFFERENCE ADD1 SUB1 ITIMES IQUOTIENT
	     IREMAINDER IGREATERP ILESSP ZEROP MINUSP EQP SMALLP
	     FIXP FIX LOGAND LOGOR LOGXOR LSH RSH LLSH LRSH FPLUS
	     FMINUS FTIMES FQUOTIENT FREMAINDER MINUSP EQP FGTP
	     FLOATP FLOAT PLUS MINUS DIFFERENCE TIMES QUOTIENT REMAINDER GEATERP LESSP ABS EXPT SQRTLOG ANTILOG SIN COS TAN
	     ARCSIN ARCCOS ARCTAN RAND RANDSET SETN LOC VAG)) 

;;;***************************************
;;; FUNCTIONS FOUND IN THE BBNLISP MANUAL AND
;;;      BELIEVED TO BE IDENTICAL IN MACLISP
;;;************************************************

(MACLISP '(CAR CDR CAAR CADR CDAR CDDR CAAAR CAADR CADDR CDDDR
	   CADAR CDDAR CAAAAR CAAADR CAADDR CADDDR CDDDDR CDAAAR
	   CDDAAR CDDDAR CADADR CDADAR CADAAR CADDAR CDAADR CDADAR
	   CAADAR)) 

(MACLISP '(APPLY EVAL LAMBDA CONS RPLACA RPLACD QUOTE COND PROGN GO
	   ZEROP ADD1 SET SETQ ATOM EQ EQUAL NULL NOT AND OR)) 

(MACLISP '(LIST NUMBERP LESSP GREATERP APPEND NCONC REVERSE LAST
	   LENGTH FUNCTION PLUS PROG RETURN ASSOC SASSOC MAP MAPC
	   MAPCAR MAPCON)) 

;;* (READMACRO QUOTE /' )
;;*PAGE

;;;*********************************************************
;;;
;;;  PATH PROPERTIES FOR MACLISP FUNCTIONS
;;;
;;;*******************************************************

(ADD-PATH 
      ADD1   1 
      AND     STRAIGHT-MAP 
      ATOM    1 
      (CAR CDR CAAR CADR CDAR CDDR CAAAR CAADR CADDR CDDDR CADAR
       CDDAR CDAAR CDADR CAAAAR CAAADR CAADDR CADDDR CDDDDR CDAAAR
       CDDAAR CDDDAR CADADR CDADAR CADAAR CADDAR CDAADR CAADAR
       CDADDR CDDADR) 
	      1 
      COND    PATH-COND 
      CONS    2 
      EQUAL   2 
      GO      1 
      GREATERP 2
      LAST    1 
      LESSP   2
      LENGTH  1 
      LIST    STRAIGHT-MAP 
      LAMBDA  LAMBDA-BODY 
	MAX 2 
	MIN 2
      NCONC   STRAIGHT-MAP 
      NOT     1 
      NULL    1 
      NUMBERP 1
	ODDP 1
      OR      STRAIGHT-MAP 
      PLUS    STRAIGHT-MAP 
      PROGN   STRAIGHT-MAP 
      REVERSE 1 
      RPLACD  2 
      SET     2 
	SORT 2
      SETQ    PATH-SETQ 
      ZEROP   1) 

;;*PAGE

;;;**********************************************************
;;;
;;;     TRANSLATION PROPERTIES FOR INTERLISP FUNCTIONS
;;;
;;;***************************************************************

(DEFSS        ((GETLOWER HISTORYSAVE INTO) PATH STRAIGHT-MAP)
       (* DEFINED-BY
	  INTER
	RENAME COMMENT 
	  PATH
	  IGNORE)
	(ADDPROP 4)
       (ALPHORDER RENAME ALPHALESSP 2)
       (APPEND TRANS
	       (PROGN (AND (NULL (CDDR S))
			   (RPLACD (CDDR S) (LIST NIL))))
	       PATH
	       STRAIGHT-MAP)
	(APPLY 2 PATH PATH-EVAL)
       (APPLY* PATH STRAIGHT-MAP)
       (ASSOC RENAME ASSQ PATH STRAIGHT-MAP)
       (SASSOC RENAME ASSOC 
	       PATH
	       STRAIGHT-MAP
	       ARGS
	       (NIL . 2.))
       (BACKTRACE PATH STRAIGHT-MAP)
       (BREAK1 5)
       (CLOCK 1)
	(CONSCOUNT 0)
       (CONTROL 1)
       (COPY 1)
       (DEFLIST PATH IGNORE)
       (DEFINEV PATH IGNORE)
	(DIFFERENCE 2)
	(DSUBST RENAME SUBST  3)
       (EDITE 3)
       (EQ TRANS TRANS-EQ PATH 2.)
       (EQP RENAME = PATH STRAIGHT-MAP)
       (ERSETQ RENAME ERRSET 1)
       (EVAL 1 PATH PATH-EVAL)
	(EVALA 2 PATH PATH-EVAL)
	(EVERY 3)
       (FNTYP 1)
       (FQUOTIENT RENAME QUOTIENT PATH 2.)
	(FUNCTION TRANS TRANS-FUNCTION PATH PATH-FUNCTION ARGS (NIL . 1))
	(GENSYM 0)
       (GETD 1)
       (GETP RENAME GET 2)
       (INTERSECTION 2)
       (IGREATERP RENAME > PATH 2.)
       (IPLUS RENAME + PATH STRAIGHT-MAP)
       (IQUOTIENT RENAME // PATH STRAIGHT-MAP)
       (ITIMES RENAME * PATH STRAIGHT-MAP)
       (LISTP 1)
	 (LOC 1)
	(LOG 1)
       ((MAP MAPC MAPCAR MAPLIST MAPCON)
	TRANS
	TRANS-MAP
	ARGS
	(2. . 3.))
       (MAPCONC TRANS (TRANS-MAP) RENAME MAPCAN
		ARGS
		(2. . 3.))
       (MEMB TRANS TRANS-MEMB 2)
	(MEMBER 2)
       (NCHARS 1)
       (NEQ PATH 2.)
       (NLISTP 1)
       (NTH PATH 2.)
       (PACK 1)
	(PRINTDEF 2)
	(PRINTFNS 1)
       (PRINTLEVEL 1)
       (PROG TRANS TRANS-PROG PATH PATH-PROG)
       (PROG1 TRANS
	      (PROGN (MUNJ-NAME 'PROG2)
		     (RPLACD S (APPEND (LIST 0.) (CDR S))))
	      PATH
	      STRAIGHT-MAP)
       (PUT TRANS
	    (PROGN (MUNJ-NAME 'PUTPROP) (REVERSE-3-4))
	3)
	(PUTD 2)
       (QUOTE TRANS TRANS-QUOTE PATH IGNORE)
       (RPLACA RENAME *RPLACA PATH 2.)
       (RETURN TRANS
	       (COND ((NULL (CDR S)) (RPLACD S (LIST NIL))))
	1)
       (RPAQ RENAME SETQ PATH (PATH-RUN SETQ))
       (RPAQQ TRANS (TRANS-RUN SETQQ) PATH (PATH-RUN SETQQ))
       (RUNFORK PATH 1.)
       (SELECTQ PATH
		(PROG (BODY BVARS) 
		      (META-EVAL (CADR S))
		      (SETQ BODY (CDDR S))
		 LOOP (COND ((NULL (CDR BODY))
			     (META-EVAL (CAR BODY))
			     (RETURN T))
			    (T (MAPC 'META-EVAL (CDAR BODY))))
		      (SETQ BODY (CDR BODY))
		      (GO LOOP)))
       (SETQQ TRANS
	      (PROGN (MUNJ-NAME 'SETQ)
		     (OR (CDDR S)
			 (PROGN (BREAK (BADD SETQQ FORM) (PRINT S))
				(RPLACD (CDDR S) (LIST NIL))))
		     (RPLACA (CDDR S) (LIST 'QUOTE (CADDR S))))
	      PATH
	      PATH-SETQQ)
       (SOME 3)
       ((STKSCAN STKNTH) 2)
	(SUB1 1)
	(SUBLIS 2)
       (SUBST 3)
	(TCONC 2)
       (UNPACK 1)) 

(DEFSS ((PEEKC RATOM
	       READP
	       GLC
	       FILEVARS
	       POSITION
	       CLOSEF
	       INFILE
	       INFILEP
	       LISPXTERPRI
	       LISPXREAD
	       OUTFILE
	       OUTPUT
	       ENDFILE
	       MKSTRING
	       MKATOM
	       GNC
	       GLC)
	PATH
	1.)
       ((SPACES OPENP
		SAVESET
		MAKEFILE
		LISPXPRIN1
		LISPXPRINT
		LISPX
		SFPTR
		RETFROM)
	PATH
	2.)
       ((PROMPTCHAR CHANGENAME) PATH 3.)
       ((CONCAT NEWFILE1 READVISE) PATH STRAIGHT-MAP)
       (FILEPOS PATH STRAIGHT-MAP ARGS (NIL . 6.))
       (TERPRI RENAME *TERPRI PATH 1.)
       (PRINT RENAME *PRINT PATH 2.)
       (PRIN1 RENAME *PRIN1 PATH 2.)
       (PRIN2 RENAME *PRIN2 PATH 2.)
       (PRIN3 RENAME *PRIN3 PATH 2.)
       (READ RENAME *READ PATH 1.)
       (READC RENAME *READC PATH 1.)) 

;;*PAGE

;;;******************************
;;;   SPECIAL PATH FCNS
;;;******************************

(DECLARE (SPECIAL RULE))

(DEFSS (ADDL PATH (MY-FORM (CADDR S)))
	(ADDR PATH (PATH-RUN ADDL))
	(BUILD PATH (PROG (PAT FORMS BVARS)
		(SETQ PAT (META-EVAL (CADR S))
			FORMS (AND (CDR X)(CDDR X)))
		(BP PAT)))
       (BUILDQ PATH
	       (PROG (PAT FORMS BVARS) 
		     (SETQ PAT (CADR S) FORMS (AND (CDR S) (CDDR S)))
		     (BP PAT)))
	(DEFINEG-GRAMMAR PATH PATH-GRAMMAR)
       (DEFINEG-RULES PATH PATH-RULES)
	(GETV 1)
	(LIFTR PATH (MY-FORM (CADDDR S)))
	(NOR ARGS (0 . 777))
	(PLIST 1)
	(RFEAT PATH (MY-FORM (CADDR S)))
	(SENDR PATH (MY-FORM (CADDR S)))
       (SETR PATH (MY-FORM (CADDR S)))
       (TRACER PATH (PROG (BVARS) (MAPC 'META-EVAL (CDR S))))
       (WHILE PATH (PROG (BVARS) (MAPC 'META-EVAL (CDR S))))
	(WRD PATH (MY-FORM (CADDR S))) )

(DEFUN PATH-GRAMMAR NIL
(PROG (BVARS) (MAPC 'PATH-GRAMMAR1 (CDR S))))

(DEFUN PATH-GRAMMAR1 (NODE)
(MAPC (FUNCTION (LAMBDA (X)
 (COND ((MEMQ (CAR X) '(WRD MEM CAT TST PUSH VIR JUMP))
	(MAPC 'META-EVAL (CDDR X)))
       ((MEMQ (CAR X) '( SPOP POP)) (MAPC 'META-EVAL (CDR X)))
       (T (ERROR-PRINT 
		(PRINC '***/ UNKNOWN/ ARC/ TYPE/ )
		(PRINC (CAR X))
		(PRINC '/ FROM/ NODE/ )
		(PRINC (CAR NODE)) )
		 (BREAK PATH-GRAMMAR T) ) ))) 
   (CDR NODE)))
 
(DEFUN PATH-RULES NIL 
       (MAPC '(LAMBDA (RULE)
		      (PROG (BVARS P)
		  (SETQ P (CDR RULE))
	      LUP (COND ((NULL P)(BREAK FUNNY-RULE (PRINT (CAR RULE))))
			((EQ (CAR P) '->)
		         (RETURN (MAPC 'META-EVAL (CDR P))))
			(T (PATH-RULE1 (CAR P))))
		  (SETQ P (CDR P))
		  (GO LUP)))
	     (CDR RULE)))

(DEFUN PATH-RULE1 (P)
 (COND ((ATOM P))
	((EQ (CAR P) 'DEFAULT))
	((MEMQ (CAR P) '(NOT OR))(MAPC 'PATH-RULE1 (CDR P)))
	(T (MAPC 'META-EVAL (CDR P)))))

(DEFUN MY-FORM (X) (PROG (BVARS) (META-EVAL X)))

(DEFUN SCDR MACRO (X) 
       (LIST 'AND
	     (CADR X)
	     (LIST 'SETQ
		   (CADR X)
		   (LIST 'CDR (CADR X))))) 

(DEFUN BP (PAT) 
       (COND ((EQ PAT '*))
	     ((EQ PAT '+) (SCDR FORMS))
	     ((EQ PAT '#) (META-EVAL (CAR FORMS)) (SCDR FORMS))
	     ((ATOM PAT))
	     ((EQ (CAR PAT) '@) (MAPC 'BP (CDR PAT)))
	     (T (BP2 PAT)))) 

(DEFUN BP2 (PAT) 
       (COND ((ATOM PAT) (BP PAT))
	     (T (BP (CAR PAT)) (BP2 (CDR PAT))))) 

(SETQ SYS-MAXI MAXI)
