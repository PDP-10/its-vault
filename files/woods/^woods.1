
INGRIA  - 18:49.24 DECEMBER 15, 1985

(TYPE SENTENCE WITHIN PARENTHESES.)
TALKER
**(list the samples that contain olivine)***
PARSING
; FETCHING LIST

STRING = (LIST THE SAMPLES THAT CONTAIN OLIVINE)
ENTERING STATE S/
STORING ALTARC ALTERNATIVE 1.
JUMP TO S/IMP
TAKING CAT V ARC
;TYPE<-IMP
;SUBJ<-(NP (PRO YOU))
;V<-LIST
;HEAD<-LIST
;TNS<-PRESENT
; FETCHING THE

STRING = (THE SAMPLES THAT CONTAIN OLIVINE)
ENTERING STATE VP/HEAD
STORING ALTARC ALTERNATIVE 2.
;LIST=>V
;NIL=>ANAPHORFLG
ABOUT TO PUSH
 ENTERING STATE NP/
 STORING ALTARC ALTERNATIVE 3.
 TAKING CAT DET ARC
 ;DET<-THE
; FETCHING SAMPLES
; FETCHING SAMPLE
; FETCHING SAMPL

STRING = (SAMPLES THAT CONTAIN OLIVINE)
 ENTERING STATE NP/ART
 JUMP TO NP/ORD
 JUMP TO NP/QUANT
 ;DET<-(DET THE)
 JUMP TO NP/DET
 STORING ALTARC ALTERNATIVE 4.
 TAKING CAT N ARC
 ;N<-(N SAMPLE)
 ;NU<-PL
; FETCHING THAT

STRING = (THAT CONTAIN OLIVINE)
 ENTERING STATE NP/N
 STORING ALTARC ALTERNATIVE 5.
 ABOUT TO PUSH
  ENTERING STATE NPR/
  BLOCKED

 STARTING ALTARC ALTERNATIVE 5.
STRING = (THAT CONTAIN OLIVINE)
STATE = NP/N
 STORING ALTARC ALTERNATIVE 6.
 ;HEAD<-SAMPLE
 JUMP TO NP/HEAD
 STORING ALTARC ALTERNATIVE 7.
 ;REL=>TYPE
 ;(NP (DET WHR) (N SAMPLE) (NU PL))=>WH
 ;SAMPLE=>ANAPHORFLG
 ABOUT TO PUSH
  ENTERING STATE R/
  STORING ALTARC ALTERNATIVE 8.
  TAKING MEM (WHICH THAT WHO) ARC
; FETCHING CONTAIN

STRING = (CONTAIN OLIVINE)
  ENTERING STATE R/WH
  JUMP TO S/NP
  STORING ALTARC ALTERNATIVE 9.
  TAKING CAT V ARC
  ;V<-CONTAIN
  ;SUBJ<-(NP (DET WHR) (N SAMPLE) (NU PL))
  ;WH<-NIL
  ;TNS<-PRESENT
  ;PNCODE<-X3SG
; FETCHING OLIVINE

STRING = (OLIVINE)
  ENTERING STATE S/AUX
  STORING ALTARC ALTERNATIVE 10.
  JUMP TO VP/V
  STORING ALTARC ALTERNATIVE 11.
  ;HEAD<-CONTAIN
  JUMP TO VP/HEAD
  STORING ALTARC ALTERNATIVE 12.
  ;CONTAIN=>V
  ;SAMPLE=>ANAPHORFLG
  ABOUT TO PUSH
   ENTERING STATE NP/
   JUMP TO NP/ART
   JUMP TO NP/ORD
   JUMP TO NP/QUANT
   ;DET<-(DET NIL)
   JUMP TO NP/DET
   STORING ALTARC ALTERNATIVE 13.
   TAKING CAT N ARC
   ;N<-(N OLIVINE)
   ;NU<-SG
 
STRING = NIL
   ENTERING STATE NP/N
   STORING ALTARC ALTERNATIVE 14.
   ;HEAD<-OLIVINE
   JUMP TO NP/HEAD
   STORING ALTARC ALTERNATIVE 15.
   JUMP TO NP/NP
   ;POPVAL<-(NP (DET NIL) (N OLIVINE) (NU SG))
   ABOUT TO POP
  ;OBJ<-(NP (DET NIL) (N OLIVINE) (NU SG))
  ENTERING STATE VP/NP
  JUMP TO VP/VP
  JUMP TO S/VP
  ;POPVAL<-(S REL (NP (DET WHR) (N SAMPLE) (NU PL)) (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) (N OLIVINE) (NU SG))))
  JUMP TO S/S
  ABOUT TO POP
 ENTERING STATE NP/R
 JUMP TO NP/NP
 ;POPVAL<-(NP (DET THE) (N SAMPLE) (NU PL) (S REL (NP (DET WHR) (N SAMPLE) (NU PL)) (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) 
(N OLIVINE) (NU SG)))))
 ABOUT TO POP
;OBJ<-(NP (DET THE) (N SAMPLE) (NU PL) (S REL (NP (DET WHR) (N SAMPLE) (NU PL)) (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) (N O
LIVINE) (NU SG)))))
ENTERING STATE VP/NP
JUMP TO VP/VP
JUMP TO S/VP
;POPVAL<-(S IMP (NP (PRO YOU)) (AUX (TNS PRESENT)) (VP (V LIST) (NP (DET THE) (N SAMPLE) (NU PL) (S REL (NP (DET WHR) (N SAMPLE) (NU P
L)) (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) (N OLIVINE) (NU SG)))))))
JUMP TO S/S
ABOUT TO POP
SUCCESS
0. CONSES
0.0 SECONDS
PARSINGS:
S IMP
  NP PRO YOU
  AUX TNS PRESENT
  VP V LIST
     NP DET THE
        N SAMPLE
        NU PL
        S REL
          NP DET WHR
             N SAMPLE
             NU PL
          AUX TNS PRESENT
          VP V CONTAIN
             NP DET NIL
                 N OLIVINE
                NU SG

INTERPRETING
S:AND S:OR S:DCL S:IMP S:WHQ S:QREL-NEG S:QREL S:YES/NO PR1 PR2 PR3 PR4 PR5 
Match: PR5
Node: (S IMP (NP (PRO YOU)) (AUX (TNS PRESENT)) (VP (V LIST) (NP (DET THE) (N SAMPLE) (NU PL) (S REL (NP (DET WHR) (N SAMPLE) (NU PL))
 (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) (N OLIVINE) (NU SG)))))))
Rule: ((S.IMP T) -> (PRED (DO (# 0. SRULES))))
; FETCHING GIVE
; FETCHING DOCUMENT
S:GIVE 
Match: S:GIVE
Node: (S IMP (NP (PRO YOU)) (AUX (TNS PRESENT)) (VP (V LIST) (NP (DET THE) (N SAMPLE) (NU PL) (S REL (NP (DET WHR) (N SAMPLE) (NU PL))
 (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) (N OLIVINE) (NU SG)))))))
Rule: ((S.V (MEM 1. GIVE)) (S.OBJ T) (OR (S.IMP T) (S.Q-MODAL T)) -> (PRED (PRINTOUT (# 2. 1. REFS?))))
REFRULE? D:THE-SG2 D:THE-SG D:THE-PL 
Match: D:THE-PL
Node: (NP (DET THE) (N SAMPLE) (NU PL) (S REL (NP (DET WHR) (N SAMPLE) (NU PL)) (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) (N O
LIVINE) (NU SG)))))
Rule: ((NP.DET (AND (EQU 1. THE) (OR (EQU 2. PL) (EQU 2. SG/PL)))) -> (QUANT (FOR EVERY X / (# 0. NRULES) : (# 0. RRULES) ; DLT)))
N:SAMPLE 
Match: N:SAMPLE
Node: (NP (DET THE) (N SAMPLE) (NU PL) (S REL (NP (DET WHR) (N SAMPLE) (NU PL)) (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) (N O
LIVINE) (NU SG)))))
Rule: ((OR (NP.N (EQU 1. SAMPLE)) (NP.ADJ-N (AND (EQU 1. LUNAR) (EQU 2. MATERIAL)))) (OR (NP.ADJ (EQU 1. LUNAR)) (DEFAULT (1. ADJ NIL)
)) -> (QUOTE (SEQ SAMPLES)))

RHS interpretation for: N:SAMPLE
Interpretation: (((SEQ SAMPLES) DLT))
N:TYPEA N:TYPEB N:TYPEC N:TYPED (AND R:SAMPLE-WITH R:GLASS R:GREATERVAL R:AROUND R:LESSVAL R:QREL R:REL R:PP R:ADJ) S:AND S:OR S:DCL S
:IMP S:WHQ S:QREL-NEG S:QREL S:YES/NO PR1 PR2 PR3 PR4 
Match: PR4
Node: (S REL (NP (DET WHR) (N SAMPLE) (NU PL)) (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) (N OLIVINE) (NU SG))))
Rule: ((OR ((S (DCL)) T) ((S (REL)) T) ((S (POSS-ING)) T)) -> (PRED (# 0. SRULES)))
S:CONTAIN-IN S:SAMPLE-CONTAIN 
Match: S:SAMPLE-CONTAIN
Node: (S REL (NP (DET WHR) (N SAMPLE) (NU PL)) (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) (N OLIVINE) (NU SG))))
Rule: (AND (S.NP (MEM 1. (SAMPLE))) (S.V (OR (EQU 1. HAVE) (EQU 1. CONTAIN))) (OR (S.OBJ (MEM 1. (ELEMENT OXIDE ISOTOPE MINERAL PHASE)
)) (S.OBJ.AND (MEM 1. (ELEMENT OXIDE ISOTOPE MINERAL PHASE)))) (OR (S.OBJ.PP (MEM 2. (MINERAL PHASE))) (S.PP (MEM 2. (MINERAL PHASE)))
 (DEFAULT (2. NPR NIL))) -> (PRED (CONTAIN (# 1. 1. SET?) (# 3. 1.) (# 4. 2.))))
D:SET1 D:NOT-SET 
Match: D:NOT-SET
Node: (NP (DET WHR) (N SAMPLE) (NU PL))
Rule: ((T T) -> (QUOTE (# 0.)))

RHS interpretation for: D:NOT-SET
Interpretation: ((X1 DLT))
D:NEG D:MASS 
 Match: D:MASS
Node: (NP (DET NIL) (N OLIVINE) (NU SG))
Rule: ((NP.N (OR (MEM 1. MASS) (EQ (GET (CAR (TERM (CONSTITUENTS (# 1.)))) (QUOTE N)) (QUOTE MASS)))) -> (PROGN (SETQ SEM (SUBST (QUOT
E (NPR* X / W)) (QUOTE DLT) QUANT)) (SETQ QUANT (QUOTE DLT)) (SETQ SEM (SUBST (LIST (QUOTE QUOTE) (TABFORM (# 0. HEAD))) (QUOTE W) SEM
))))

RHS interpretation for: D:MASS
Interpretation: (((NPR* X3 / (QUOTE OLIV)) DLT))
ANY:TERM 
Match: ANY:TERM
Node: (NPR NIL)
Rule: ((T T) -> (LIST (QUOTE QUOTE) (EVAL (CONS (QUOTE NPR) (QUOTE (# 0. TERM))))))

RHS interpretation for: ANY:TERM
Interpretation: (((QUOTE NIL) DLT))

RHS interpretation for: S:SAMPLE-CONTAIN
Interpretation: (((CONTAIN X1 (NPR* X3 / (QUOTE OLIV)) (QUOTE NIL)) DLT))

RHS interpretation for: PR4
Interpretation: (((CONTAIN X1 (NPR* X3 / (QUOTE OLIV)) (QUOTE NIL)) DLT))

Match: R:REL
Node: (NP (DET THE) (N SAMPLE) (NU PL) (S REL (NP (DET WHR) (N SAMPLE) (NU PL)) (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) (N O
LIVINE) (NU SG)))))
Rule: (AND (NP.REL (AND (RELTAG (# 1.)) (OR (INTERP (# 1.) NIL) (PROG (ANS) (&PRIN1 (QUOTE I DO NOT UNDERSTAND ) T) (&PRINT (# 1.) T) 
(&PRIN1 (QUOTE DO YOU WANT ME TO IGNORE IT?) T) (&TERPRI T) (COND ((MEMQ (SETQ ANS (*READ NIL)) (QUOTE (YES T TRUE))) (&PRINT (QUOTE O
K) T)) ((EQ ANS (QUOTE BREAK)) (BREAK1 T T SEMSUB NIL NIL)) (T (QUIT))) T)))) -> (PRED (# 1. 1.)))

RHS interpretation for: R:REL
Interpretation: (((CONTAIN X1 (NPR* X3 / (QUOTE OLIV)) (QUOTE NIL)) DLT))

RHS interpretation for: D:THE-PL
Interpretation: ((X1 (FOR EVERY X1 / (SEQ SAMPLES) : (CONTAIN X1 (NPR* X3 / (QUOTE OLIV)) (QUOTE NIL)) ; DLT)))

Match: REFRULE?
Node: (NP (DET THE) (N SAMPLE) (NU PL) (S REL (NP (DET WHR) (N SAMPLE) (NU PL)) (AUX (TNS PRESENT)) (VP (V CONTAIN) (NP (DET NIL) (N O
LIVINE) (NU SG)))))
Rule: ((T (INTERP P NIL)) -> (QUOTE (# 0.)))

RHS interpretation for: REFRULE?
Interpretation: ((X1 (FOR EVERY X1 / (SEQ SAMPLES) : (CONTAIN X1 (NPR* X3 / (QUOTE OLIV)) (QUOTE NIL)) ; DLT)))

RHS interpretation for: S:GIVE
Interpretation: (((FOR EVERY X1 / (SEQ SAMPLES) : (CONTAIN X1 (NPR* X3 / (QUOTE OLIV)) (QUOTE NIL)) ; (PRINTOUT X1)) DLT))

RHS interpretation for: PR5
Interpretation: (((DO (FOR EVERY X1 / (SEQ SAMPLES) : (CONTAIN X1 (NPR* X3 / (QUOTE OLIV)) (QUOTE NIL)) ; (PRINTOUT X1))) DLT))
 0. CONSES
0.0 SECONDS
INTERPRETATIONS:
(DO (FOR EVERY X1 / (SEQ SAMPLES) : (CONTAIN X1 (NPR* X3 / (QUOTE OLIV)) (QUOTE NIL)) ; (PRINTOUT X1)))

***
**(do any samples contain brecchia)***
PARSING
; FETCHING DO

STRING = (DO ANY SAMPLES CONTAIN BRECCHIA)
ENTERING STATE S/
STORING ALTARC ALTERNATIVE 1.
;TYPE<-Q
JUMP TO S/Q
STORING ALTARC ALTERNATIVE 2.
JUMP TO S/NP
STORING ALTARC ALTERNATIVE 3.
TAKING CAT V ARC
;MODAL<-DO
;TNS<-PRESENT
;PNCODE<-X3SG
; FETCHING ANY

STRING = (ANY SAMPLES CONTAIN BRECCHIA)
ENTERING STATE S/AUX
JUMP TO S/NO-SUBJ
STORING ALTARC ALTERNATIVE 4.
;HOLDNPFEATURES<-NIL
;NIL=>ANAPHORFLG
ABOUT TO PUSH
 ENTERING STATE NP/
 STORING ALTARC ALTERNATIVE 5.
 TAKING CAT DET ARC
 ;DET<-ANY

STRING = (SAMPLES CONTAIN BRECCHIA)
 ENTERING STATE NP/ART
 JUMP TO NP/ORD
 JUMP TO NP/QUANT
 ;DET<-(DET ANY)
 JUMP TO NP/DET
 STORING ALTARC ALTERNATIVE 6.
 TAKING CAT N ARC
 ;N<-(N SAMPLE)
 ;NU<-PL

STRING = (CONTAIN BRECCHIA)
 ENTERING STATE NP/N
  STORING ALTARC ALTERNATIVE 7.
 ;HEAD<-SAMPLE
 JUMP TO NP/HEAD
 STORING ALTARC ALTERNATIVE 8.
 JUMP TO NP/NP
 ;POPVAL<-(NP (DET ANY) (N SAMPLE) (NU PL))
 ABOUT TO POP
;SUBJ<-(NP (DET ANY) (N SAMPLE) (NU PL))
;MODAL<-NIL
ENTERING STATE VP/V
STORING ALTARC ALTERNATIVE 9.
TAKING CAT V ARC
;V<-CONTAIN
; FETCHING BRECCHIA

STRING = (BRECCHIA)
ENTERING STATE VP/V
STORING ALTARC ALTERNATIVE 10.
;HEAD<-CONTAIN
JUMP TO VP/HEAD
STORING ALTARC ALTERNATIVE 11.
;CONTAIN=>V
;NIL=>ANAPHORFLG
ABOUT TO PUSH
 ENTERING STATE NP/
 JUMP TO NP/ART
 JUMP TO NP/ORD
 JUMP TO NP/QUANT
 ;DET<-(DET NIL)
 JUMP TO NP/DET
 ABOUT TO PUSH
  ENTERING STATE NPR/
  BLOCKED

STARTING ALTARC ALTERNATIVE 11.
STRING = (BRECCHIA)
STATE = VP/HEAD

STARTING ALTARC ALTERNATIVE 10.
STRING = (BRECCHIA)
STATE = VP/V

STARTING ALTARC ALTERNATIVE 9.
STRING = (CONTAIN BRECCHIA)
STATE = VP/V
STORING ALTARC ALTERNATIVE 12.
ABORTING

STARTING ALTARC ALTERNATIVE 12.
 STRING = (CONTAIN BRECCHIA)
STATE = VP/V

STARTING ALTARC ALTERNATIVE 8.
STRING = (CONTAIN BRECCHIA)
STATE = NP/HEAD
 STORING ALTARC ALTERNATIVE 13.
 ;REL=>TYPE
 ;(NP (DET WHR) (N SAMPLE) (NU PL))=>WH
 ABOUT TO PUSH
  ENTERING STATE R/NIL
  STORING ALTARC ALTERNATIVE 14.
  TAKING CAT V ARC
  ABORTING

STARTING ALTARC ALTERNATIVE 14.
STRING = (CONTAIN BRECCHIA)
STATE = R/NIL
  STORING ALTARC ALTERNATIVE 15.
  ABOUT TO PUSH
   ENTERING STATE NP/
   JUMP TO NP/ART
   JUMP TO NP/ORD
   JUMP TO NP/QUANT
   ;DET<-(DET NIL)
   JUMP TO NP/DET
   ABOUT TO PUSH
    ENTERING STATE NPR/
    BLOCKED

STARTING ALTARC ALTERNATIVE 15.
STRING = (CONTAIN BRECCHIA)
STATE = R/NIL

STARTING ALTARC ALTERNATIVE 13.
STRING = (CONTAIN BRECCHIA)
STATE = NP/HEAD

STARTING ALTARC ALTERNATIVE 7.
STRING = (CONTAIN BRECCHIA)
STATE = NP/N

STARTING ALTARC ALTERNATIVE 6.
STRING = (SAMPLES CONTAIN BRECCHIA)
STATE = NP/DET
 ABOUT TO PUSH
  ENTERING STATE NPR/

STARTING ALTARC ALTERNATIVE 5.
 STRING = (ANY SAMPLES CONTAIN BRECCHIA)
STATE = NP/

STARTING ALTARC ALTERNATIVE 4.
STRING = (ANY SAMPLES CONTAIN BRECCHIA)
STATE = S/NO-SUBJ

STARTING ALTARC ALTERNATIVE 3.
STRING = (DO ANY SAMPLES CONTAIN BRECCHIA)
STATE = S/NP

STARTING ALTARC ALTERNATIVE 2.
STRING = (DO ANY SAMPLES CONTAIN BRECCHIA)
STATE = S/Q

STARTING ALTARC ALTERNATIVE 1.
STRING = (DO ANY SAMPLES CONTAIN BRECCHIA)
STATE = S/
STORING ALTARC ALTERNATIVE 16.
JUMP TO S/IMP
TAKING CAT V ARC
;TYPE<-IMP
;SUBJ<-(NP (PRO YOU))
;V<-DO
;HEAD<-DO
;TNS<-PRESENT

STRING = (ANY SAMPLES CONTAIN BRECCHIA)
ENTERING STATE VP/HEAD
STORING ALTARC ALTERNATIVE 17.
JUMP TO VP/NP
JUMP TO VP/VP
JUMP TO S/VP
;POPVAL<-(S IMP (NP (PRO YOU)) (AUX (TNS PRESENT)) (VP (V DO)))
JUMP TO S/S
BLOCKED

STARTING ALTARC ALTERNATIVE 17.
STRING = (ANY SAMPLES CONTAIN BRECCHIA)
STATE = VP/HEAD
STORING ALTARC ALTERNATIVE 18.
;DO=>V
;NIL=>ANAPHORFLG
ABOUT TO PUSH
 ENTERING STATE NP/
 STORING ALTARC ALTERNATIVE 19.
 TAKING CAT DET ARC
 ;DET<-ANY

 STRING = (SAMPLES CONTAIN BRECCHIA)
 ENTERING STATE NP/ART
 JUMP TO NP/ORD
 JUMP TO NP/QUANT
 ;DET<-(DET ANY)
 JUMP TO NP/DET
 STORING ALTARC ALTERNATIVE 20.
 TAKING CAT N ARC
 ;N<-(N SAMPLE)
 ;NU<-PL

STRING = (CONTAIN BRECCHIA)
 ENTERING STATE NP/N
 STORING ALTARC ALTERNATIVE 21.
 ;HEAD<-SAMPLE
 JUMP TO NP/HEAD
 STORING ALTARC ALTERNATIVE 22.
 JUMP TO NP/NP
 ;POPVAL<-(NP (DET ANY) (N SAMPLE) (NU PL))
 ABOUT TO POP
;OBJ<-(NP (DET ANY) (N SAMPLE) (NU PL))
ENTERING STATE VP/NP
JUMP TO VP/VP
JUMP TO S/VP
;POPVAL<-(S IMP (NP (PRO YOU)) (AUX (TNS PRESENT)) (VP (V DO) (NP (DET ANY) (N SAMPLE) (NU PL))))
JUMP TO S/S
BLOCKED

STARTING ALTARC ALTERNATIVE 22.
STRING = (CONTAIN BRECCHIA)
STATE = NP/HEAD
 STORING ALTARC ALTERNATIVE 23.
 ;REL=>TYPE
 ;(NP (DET WHR) (N SAMPLE) (NU PL))=>WH
 ABOUT TO PUSH
  ENTERING STATE R/NIL
  STORING ALTARC ALTERNATIVE 24.
  TAKING CAT V ARC
  ABORTING

STARTING ALTARC ALTERNATIVE 24.
STRING = (CONTAIN BRECCHIA)
STATE = R/NIL
  STORING ALTARC ALTERNATIVE 25.
  ABOUT TO PUSH
   ENTERING STATE NP/
   JUMP TO NP/ART
   JUMP TO NP/ORD
   JUMP TO NP/QUANT
    ;DET<-(DET NIL)
   JUMP TO NP/DET
   ABOUT TO PUSH
    ENTERING STATE NPR/
    BLOCKED

STARTING ALTARC ALTERNATIVE 25.
STRING = (CONTAIN BRECCHIA)
STATE = R/NIL

STARTING ALTARC ALTERNATIVE 23.
STRING = (CONTAIN BRECCHIA)
STATE = NP/HEAD

STARTING ALTARC ALTERNATIVE 21.
STRING = (CONTAIN BRECCHIA)
STATE = NP/N

STARTING ALTARC ALTERNATIVE 20.
STRING = (SAMPLES CONTAIN BRECCHIA)
STATE = NP/DET
 ABOUT TO PUSH
  ENTERING STATE NPR/

STARTING ALTARC ALTERNATIVE 19.
STRING = (ANY SAMPLES CONTAIN BRECCHIA)
STATE = NP/

STARTING ALTARC ALTERNATIVE 18.
STRING = (ANY SAMPLES CONTAIN BRECCHIA)
STATE = VP/HEAD

STARTING ALTARC ALTERNATIVE 16.
STRING = (DO ANY SAMPLES CONTAIN BRECCHIA)
STATE = S/
0. CONSES
0.0 SECONDS
NO PARSINGS



***
