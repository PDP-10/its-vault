;READ WOODS;MACROS > IN BEFORE TRYING TO THIS INTERPRETIVELY -*-LISP-*-

(DECLARE (COND ((NULL (MEMQ 'NEWIO (STATUS FEATURES)))
		(BREAK 'YOU-HAVE-TO-COMPILE-THIS-WITH-QCOMPL T))
	       ((OR (NULL (GET 'IF-FOR-MACLISP 'MACRO))
		    (GET 'POP 'MACRO))
		(LOAD '(MACROS > DSK WOODS)))))

(IF-FOR-LISPM
(DECLARE (QUOTED-ARGS 
  FORCE  PUSH  SCANSTACK  SYSCONJ  ADDL  ADDR 
  CAT  GETF  GETR  JUMP  LIFTR  NULLR 
  SENDR  SENDRQ  SETR  SETRQ  TO  TODO 
  WRD  CHECKF  COMPARATIVE  GETROOT  MARKER  NPCHECK 
  NPREP  PNCHECK  RESUMETAG  RFEAT  SCOMP  VPARTICLE 
  VPASSIVE  VPREP  VTRANS  HELPER  MAPCV  RENAME 
  SCANCV  SETQS  THOSEV  EDITD  EDITG  REMEX 
  CTYPE  PLURAL  COMPFORM  SUPFORM  /#  MEM 
  PRED  QUANT  SSUNIONF  NEWFRAG  TABFORM))
);LISPM

(DECLARE  (SPECIAL SEM-TRACE *SPOP *TRAIL REG WHERE *SQ-VAL*)
	  (*LEXPR CONCAT))
(DECLARE (*LEXPR APPLY* EVALA)(SPECIAL *LOC*))

(DECLARE (SPECIAL /#FLG * *ACFS *STATE *X* -FLG A0 A1 ABUF ACF/# ACFS
		  ACONFIG ACT ACTION ACTIONS ADJ AHELP ALIST ALT
		  ALTARC ALTARC1 ALTCONJ ALTLEX ALTNUM ALTS ALTWFS
		  ANAPHORISM ANAPHRLST ANTECEDANTS ANTEVAR ARC ARCS
		  ARGS ASSIST ATOM ATOMS AVERAGEFLAG BEG BEGIN
		  BLOCKS C2 CAND CAT CATEGORIES CLIST CMODE CONFIG
		  CONJ CONTEXT CONTINUE DALL DET DFILE
		  DICTFETCHFAILS DICTFILE DICTFILEBEG DICTFORM
		  DICTIONARY DISCRULES ECONSES ECONSES0 EDITDV
		  EDITGV EDO END ETIME ETIME0 ETIMEFLAG EXECCOMS
		  EXECUTE FAIL FEAT FEATS FEATURES FILE FILEFNS
		  FILELST FILEMACROS FILEVARS FIRSTFLAG FLAG FORCE
		  FORKNAME FORM FOUND GETFN GLOBALVARS GVARS H1
		  HEAD HEADRULES HEADS HELP HELPER HITFILE HOLD IB
		  ICONSES ICONSES0 IDO IHELP INPUTLOGFILE
		  INPUTLOGFLAG INTENSION INTERP INTERPS INTERVALS
		  IPRINT ITIME ITIME0 ITIMEFLAG ITP KLIST L0 L1 L2
		  L3 L4 LABEL LAMS LETFLG LEX LEXBACK LEXLIST
		  LEXMODE LEXTABLE LH LISPXHISTORY LIST LOC LOGFILE
		  LOGFLAG LOOP LOWFORK LP MACROS MARKER MARKERS
		  MATCHLIST MAXBLOCKS MAXPARSES MAXREPARSES MAXTIME
		  MCATEGORIES MID MINL MINLOC MLIST MODAL MODE
		  MODEVARS MODL MORE-MOST MORPHOLOGYCOMS
		  MORPHOLOGYFNS MORPHTABLE MORPHTESTS MTST
		  MYGLOBALVARS NAME NEWRULES NEWVARS NFLAG NLAMA
		  NLAML NLEX NODE NOMOVEFLAG NOUN NP NPRRULE NU
		  OLDALTS P PAREN// PARENCOUNT PARENS PARSE
		  PARSER10COMS PARSES PARSEXPRS PARSVALS PATH
		  PAUSEFLAG PCONSES PCONSES0 PCTFLG PHELP PMODE
		  PNCODE PPATH PPRINT PPT PREFERRED PREP PRERULES
		  PREVARS PROPS PS PTIME PTIME0 PTIMEFLAG
		  PUNCTUATION PUSH PUSHSTATE QBUF QUANT QVAR
		  READBUF RECORD REFLIST REFLISTS REGS REPARSE
		  REQUESTDEF RESOLVE RETURN RHS RULELIST RULELISTS
		  RVECTOR SCAN SCNFN SCNLST SCORE0 SCORE0SENTS
		  SCORE1 SCORE1SENTS SCORE2 SCORE2SENTS SCORE3
		  SCORE3SENTS SEARCH SEARCHFLAG SEM SEM-NOUNS
		  SEM-VERBS SEMFOR SEMSUB SEMU SENTENCE SENTENCES
		  SETFN SETRUL SETRUL? SIFLAG SKIP SMP SMP2
		  SPECIFIER SPLIT/# SPLITS SREGS SSETRUL STACK
		  STACKELT START STARTCLOCK STATE STRAIL STRING
		  STRINGPOS SUBLOC SUBSTITUTE SUCCESS SUCCESSFLAG
		  SYNFLAG SYSCONJ SYSPROPS T2 TACONFIG TAGLIST
		  TAGMATCH TAILS TEMP TEMPLATE TEMPTRAIL TERMRULE
		  TEST TOP TOPICFLAG TOPICRULES TOPIC\AND-NP
		  TOPIC\AND-S TRACE TRACEFILE TRAIL TRAILARC
		  TRAILLABEL TRAILS TRAILTYPE TRAILV TRAILVAL
		  TREEFRAGS TRULES TST TYPE TYPEFLAG UCFS UEXPRS
		  UFNS UMACROS UNSMASH UPRINT USERFLAG USERFNS V
		  VAL VALUES VARIABLE VARIABLES VARSFLAG VBL VCFS
		  VLIST WEIGHT WFSS WFST WFST3 WFST4 WORD X XPROPS
		  XTF XTP Y)) 

(DECLARE (*EXPR WHILEM WHEREIS USERFN USED? UNWIND TRAILS TRAIL1
		TRAIL TRACEFILE TOPLEVEL? TMATCH TIMEP TERM
		TEMPMATCH TALKER TAILS1 TAILS TAG SYNONYMS?
		SUSPENDW SUSPEND SUPERLATIVE SUBSET STORALT STEP
		SPROC SPREADQM SPOP SORTREFS1 SORTREFS SHOWTIME
		SETUP SETQSM SENTPROC SENDACTP SEMSUB SEMNET
		SEMIANAPHOR SEMCONJ SEM SDIFF SCOPEVARS SCOPEFINDER
		SCAN SBUILD SAMPLEP RULES RMATCH RESOLVE REQUESTDEF
		RELTAG RELATIVIZE RELATEDWORDS REFTYPE REFSUB2
		REFSUB1 REFSUB REFQUANTS REFPTR REFP REFLOC REDO
		QUIT QSTART QGO PUTLEX PUNCTALIZE PRINTPARSES PPT1
		PPT PPR PPP PPG PPD PPATH/.STACK PPATH/.REGS
		PPATH/.HOLD PPATH/.BACK POPCONJ POP PLOG PARSER
		PARSELIST ORMATCH ORFLAG NXTVAR NPBUILD NO-MATCHES
		NEXTWRD NEWPX NEWCLASS MORPHTSTCHECK MORPHTABCHECK
		MORPH MODESET MODAL MEMBSTACK MEMBERS MEANING?
		MATCHGROUP MATCHER MARKERS LONGBLOCK LOCEX LOADFROM
		LINEP LEXPAIRS LEXIC LEXALIZE LEAVES LEAFMEMB
		LASTELT LAMTYPE KTH KILL KEYPHRASE ISOTOPE INTERP
		IMPORT IDENTITY HYPHENADJ HOLDSCAN HOLD HEAD GETTAG
		GETSENT GETREFS GETLEX FRONTED? FORCER FIRSTPART
		FIND FILEX FILEMATCH EVALLOC ENDTRACE ENDL? DWRITE
		DRULEF DOCP DICTFETCH DICTCHECK DICT? DETOUR
		DETBUILD DEFAULTSEM CONTRACTP CONSTITUENTS
		CONJSTARTS CONJSCOPE CONJOIN COMSAV COMBINATIONS
		CHOOSEALT CCHECK CATCHECK BUILD2 BUILD1 BACKUP
		BACKLEX AVERAGE? AUTHOR: ASSOCNEXT ASSIST ARGSOF
		ARGSAV ARCTEST ARCPICK ANTORDER ANTEQUANT
		ANTECEDANT ANAPHORD ALTLOC ALTCONJGEN ALTARCGEN
		ALT/.WEIGHT ALT/.STRING ALT/.STATE ALT/.STACK
		AGREEMENT ADJVERB ADJPHRSE ADDLEX ACT ABORT *FLAG)) 

(DECLARE (*FEXPR WRD WHILE VTRANS VPREP VPASSIVE VPARTICLE TRACER
		 TODO TO THOSEV TABFORM SYSCONJ SUPFORM SSUNIONF
		 SPREADQ SPLIT SHOW SETRQ SETR SETQS SENDRQ SENDR
		 SCOMP SCANSTACK SCANCV RFEAT RESUMETAG RESUME
		 RENAME REMEX QUANT Q PUSH PRED PNCHECK PLURAL
		 NULLR NPREP NPR NPCHECK NOR NEWRULE NEWFRAG MEM
		 MARKER MAPCV LIFTR JUMP HELPER GETROOT GETR GETF
		 FORCE FILE EQUIVALENCE EQU EDITG EDITD DEFINEV
		 DEFINEP DEFINEGL DEFINEG DEFINEDL DEFINEDICT DDEF
		 CTYPE COMPFORM COMPARATIVE CHECKF CHANGEWORD CAT
		 BUILDQ BUILD ADDR ADDL /#)) 

(COMMENT FUNCTIONS NOT DEFINED IN MACLISP OR SOURCE
	 (! *MAP
	    *MAPCON
	    &PRIN1
	    &PRIN2
	    &PRINT
	    *READ
	    *READC
	    *RPLACA
	    *SORT
	    &TERPRI
	    ADDPROP
	    ALTSTACK
	    APPLY*
	    BACKTRACE
	    BREAK1
	    CHANGENAME
	    CLOCK
	    CLOSEF
	    CONCAT
	    CONSCOUNT
	    CONTROL
	    COPY
	    DEFLIST
	    DSUBST
	    EDITE
	    ENDFILE
	    EVALA
	    EVERY
	    FILEPOS
	    FILEVARS
	    FNTYP
	    GETLOWER
	    GETV
	    GLC
	    GNC
	    HISTORYSAVE
	    INFILE
	    INFILEP
	    INTERSECTION
	    INTO
	    LAMBDA
	    LISPX
	    LISPXPRINT
	    LISPXREAD
	    LISTP
	    LOC
	    MAKEFILE
	    MKATOM
	    MKSTRING
	    NCHARS
	    NEQ
	    NEWFILE1
	    NFLCT-ADJ
	    NFLCT-ING
	    NLISTP
	    *NTH
	    OPENP
	    OUTFILE
	    OUTPUT
	    PACK
	    PARSEPARENS
	    PEEKC
	    PLIST
	    POSITION
	    POSTARTPHRS
	    PRINTDEF
	    PRINTFNS
	    PRINTLEVEL
	    PROMPTCHAR
	    RATOM
	    READP
	    READVISE
	    RETFROM
	    RUNFORK
	    SAVESET
	    SELECTQ
	    SFPTR
	    SOME
	    SPACES
	    STKNTH
	    STKSCAN
	    TCONC
	    UNPACK)) 


(DEFUN *RPLACA MACRO (X) (RPLACA X 'RPLACA))


(DEFUN SETQS MACRO (X) 
       ((LABEL FOO
	       '(LAMBDA (Y) 
			(LIST 'SETQ
			      (CAR Y)
			      (COND ((NULL (CDR Y)) (CADDR X)) (T (FUNCALL FOO (CDR Y)))))))
	(CADR X)))
 
(DEFUN SPREADQ MACRO (X)
(CONS 'SETQ (CONS '*LOC* (CONS (CADDR X)
 (MAPCAN '(LAMBDA (X) (CONS X (LIST '(CAR *LOC*) '*LOC* '(CDR *LOC*))))
         (CADR X))))))

(DEFUN WHILE MACRO (X)
(PROG (TAG)
 (SETQ TAG (GENSYM))
 (RETURN (LIST 'PROG NIL
 TAG	(LIST 'COND (APPEND (CDR X) (LIST (LIST 'GO TAG))))))))

(DEFUN T/.SONS MACRO (X) (RPLACA X 'CONSTITUENTS)) 

(DEFUN ALTARC/.TRAIL MACRO (X) (RPLACA X 'CADR)) 

(DEFUN T/.REF MACRO (X) (RPLACA X 'IDENTITY)) 

(DEFUN F/.REF MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN T/.SONS MACRO (X) (RPLACA X 'CONSTITUENTS)) 

(DEFUN F/.SONS MACRO (X) (RPLACA X 'CADR)) 

(DEFUN T/.NODE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN F/.NODE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN STACKELT/.REGS MACRO (X) (RPLACA X 'CADR)) 

(DEFUN POPARC/.FEATURES MACRO (X) (RPLACA X 'CADDDR)) 

(DEFUN POPARC/.FORM MACRO (X) (RPLACA X 'CADR)) 

(DEFUN ARC/.ACTIONS MACRO (X) (RPLACA X 'CDDDR)) 

(DEFUN ARC/.TEST MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN ARC/.LABEL MACRO (X) (RPLACA X 'CADR)) 

(DEFUN ARC/.TYPE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN ALTARC/.ARCS MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN ALTARC/.ACONFIG MACRO (X) (RPLACA X 'CDDDR)) 

(DEFUN PATH/.STRING MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN PATH/.VAL MACRO (X) (RPLACA X 'CAR)) 

(DEFUN PATH/.ARC MACRO (X) (RPLACA X 'CADR)) 

(DEFUN PPA MACRO (X) (RPLACA X 'TH/.CONFIG)) 

(DEFUN PPATH/.STRING MACRO (X) (RPLACA X 'CADR)) 

(DEFUN PPATH/.STATE MACRO (X) (RPLACA X 'CADDDR)) 

(DEFUN PPATH/.PATH MACRO (X) (RPLACA X 'LASTELT)) 

(DEFUN PPATH/.ARC MACRO (X) (RPLACA X 'CAR)) 

(DEFUN PPATH/.ACONFIG MACRO (X) (RPLACA X 'CDR)) 

(DEFUN STACKELT/.PPATH MACRO (X) (RPLACA X 'LASTELT)) 

(DEFUN DEFINEG-GRAMMAR MACRO (X) (RPLACA X 'DEFINEG)) 

(DEFUN DEFINEG-RULES MACRO (X) (RPLACA X 'DEFINEG)) 

(DEFUN EXECUTE MACRO (X) (RPLACA X 'REMEX)) 


(DECLARE (GENPREFIX TMATCH)) 

(DEFUN CCHECK (TEMPLATE MLIST) 
       (COMMENT CHECKS CONDITIONS IN A TEMPLATE MATCH)
       (PROG (VLIST ALIST IHELP) 
	     (COMMENT IHELP ALLOWS (INTERP P) AS A TEST IN A
		      CONDITION)
	L1   (COND ((NULL MLIST) (RETURN VLIST)))
	     (SETQ ALIST (CAR MLIST))
	     (SETQ MLIST (CDR MLIST))
	     (COND ((EVALA (CADR TEMPLATE) ALIST)
		    (SETQ VLIST (CONS ALIST VLIST))))
	     (GO L1))) 

(DEFUN EQU FEXPR (ARGS) 
       (COMMENT PREDICATE FOR USE IN CONDITIONS IN TEMPLATES)
       (EQUAL (TERM (LIST (CDR (ASSQ (CAR ARGS) ALIST)))) (CDR ARGS))) 

(DEFUN GETTAG (P TAGNAME) 
       (COMMENT GETS VALUE OF A TAG FROM TAGLIST)
       (CDR (ASSQ TAGNAME (CDR (ASSQ (T/.REF P) TAGLIST))))) 

(DEFUN HEAD (P) 
       (COMMENT COMPUTES THE HEAD OF A SYNTACTIC CONSTRUCTION)
       (PROG (LOC MLIST SUBLOC HEAD) 
	     (COND ((SETQ HEAD (GETTAG P 'HEAD))
		    (RETURN HEAD)))
	L0   (SETQ LOC HEADRULES)
	     (WHILE (AND LOC
			 (NOT (SETQ MLIST
				    (TMATCH (LIST P)
					    (LIST (CAAR LOC))))))
		    (SETQ LOC (CDR LOC)))
	     (COND
	      (LOC
	       (SETQ SUBLOC (CDR (AND (LISTP (CADR (CAR LOC)))
				      (ASSQ (CADADR (CAR LOC))
					    (CAR MLIST)))))
	       (RETURN (TAG P
			    'HEAD
			    (SELECTQ (CAADR (CAR LOC))
				     (HEAD (HEAD SUBLOC))
				     (TERM (CAR (TERM (LIST SUBLOC))))
				     (OTHERWISE (EVAL (CADR (CAR LOC)))))))))
	     (&PRIN1 'UNDEFINED/ HEAD T)
	     (&TERPRI T)
	     (&PRINT P T)
	     (COND ((AND IHELP (HELPER H* HELPER)) (GO L0))
		   (T (RETURN NIL))))) 

(DEFUN TAG (P TAGNAME VALUE) 
       (COMMENT SETS THE VALUE OF A TAG ON TAGLIST)
       (PROG (TEMP) 
	     (COND ((NOT (SETQ TEMP (ASSQ (T/.REF P) TAGLIST)))
		    (SETQ TAGLIST
			  (CONS (LIST (T/.REF P) (CONS TAGNAME VALUE))
				TAGLIST)))
		   (T (RPLACD TEMP
			      (CONS (CONS TAGNAME VALUE)
				    (CDR TEMP)))))
	     (RETURN VALUE))) 

(DEFUN TEMPMATCH (TEMPLATE P) 
       (COMMENT MATCHES A TEMPLATE AGAINST A TREE P)
       (PROG (MLIST TEMP FRAG) 
	     (COND ((EQ (SETQ FRAG (CAR TEMPLATE)) 'DEFAULT)
		    (RETURN (LIST (CDR TEMPLATE))))
		   ((ATOM FRAG) (SETQ FRAG (EVAL FRAG))))
	     (COND ((EQ FRAG T)
		    (RETURN (CCHECK TEMPLATE '(NIL))))
		   ((NOT (EQ (T/.NODE P) (F/.NODE FRAG)))
		    (RETURN NIL))
		   ((SETQ TEMP (ASSQ (CAR TEMPLATE) MATCHLIST))
		    (RETURN (CCHECK TEMPLATE (CDR TEMP))))
		   (T (SETQ MLIST (TMATCH (T/.SONS P) (F/.SONS FRAG)))
		      (SETQ MATCHLIST (CONS (CONS (CAR TEMPLATE)
						  MLIST)
					    MATCHLIST))))
	     (COND ((NULL MLIST) (RETURN NIL))
		   (T (RETURN (CCHECK TEMPLATE MLIST)))))) 

(DEFUN TERM (TREELIST) 
       (COMMENT COMPUTES THE TERMINAL STRING OF A LIST OF TREES)
       (COND ((NULL TREELIST) NIL)
	     ((ATOM (CAR TREELIST))
	      (CONS (CAR TREELIST) (TERM (CDR TREELIST))))
	     (T (NCONC (TERM (T/.SONS (CAR TREELIST)))
		       (TERM (CDR TREELIST)))))) 

(DEFUN TMATCH (PLIST FLIST) 
       (COMMENT MATCHES A TREE FRAGMENT (FLIST) AGAINST A TREE
		(PLIST))
       (PROG (MLIST MLIST2 FRAG TEMP TEMP2) 
	     (COND ((ATOM (SETQ FRAG (CAR FLIST))) (GO L2)))
	     (SETQ TEMP (F/.NODE FRAG))
	L1   (COND ((NULL PLIST) (RETURN NIL))
		   ((OR (ATOM (CAR PLIST))		;FRAG NODE NON-ATOMIC
			(NOT (EQ TEMP (T/.NODE (CAR PLIST)))))
		    (SETQ PLIST (CDR PLIST))
		    (GO L1))
		   ((NULL (F/.SONS FRAG)) (SETQ MLIST '(NIL)))
		   ((NULL (SETQ MLIST
				(TMATCH (T/.SONS (CAR PLIST))
					(F/.SONS FRAG))))
		    (SETQ PLIST (CDR PLIST))
		    (GO L1)))
	     (COND
	      ((F/.REF FRAG)
	       (SETQ TEMP (LIST (CONS (F/.REF FRAG) (CAR PLIST))))
	       (COND ((CAR MLIST)
		      (MAPC 
		       (FUNCTION (LAMBDA (X) 
					 (NCONC X (APPEND TEMP NIL))))
		       MLIST))
		     (T (SETQ MLIST (LIST TEMP))))))
	     (COND
	      ((NULL (CDR FLIST)) NIL)
	      ((NULL (SETQ MLIST2 (TMATCH (CDR PLIST) (CDR FLIST))))
	       (RETURN NIL))
	      ((NULL (CAR MLIST)) (RETURN MLIST2))
	      ((CDR MLIST2)
	       (SETQ 
		MLIST
		(MAPCAN 
		 (FUNCTION
		  (LAMBDA (Y) 
			  (MAPCAR (FUNCTION (LAMBDA (X) (APPEND X Y)))
				  MLIST)))
		 MLIST2)))
	      ((SETQ TEMP (CAR MLIST2))
	       (MAPC 
		(FUNCTION (LAMBDA (X) (NCONC X (APPEND TEMP NIL))))
		MLIST)))
	     (COND ((CAR MLIST)
		    (RETURN (NCONC MLIST (TMATCH (CDR PLIST) FLIST))))
		   (T (RETURN MLIST)))
	L2   (COND ((NULL PLIST) (RETURN NIL))
		   ((NOT (EQ FRAG (CAR PLIST)))
		    (SETQ PLIST (CDR PLIST))
		    (GO L2))
		   ((CDR FLIST)
		    (RETURN (TMATCH (CDR PLIST) (CDR FLIST))))
		   (T (RETURN '(NIL)))))) 


(DECLARE (GENPREFIX INTER5)) 

(DEFUN /# FEXPR (*ARGS*) 
       ((LAMBDA (N) (CDR (ASSQ N ALIST))) (CAR *ARGS*))) 

(DEFUN AGREEMENT (ANTECEDANT SPECIFIER NOUN ADJ SEMARKERS) 
       (COMMENT PREDICATE FOR ANAPHORISM-ANTECEDANT AGREEMENT)
       (PROG (MATCHLIST) 
	     (COND
	      (SEMARKERS
	       (COND ((INTERSECTION SEMARKERS
				    (MARKERS (HEAD ANTECEDANT)))
		      (RETURN T))
		     (T (RETURN NIL))))
	      ((NULL NOUN) (RETURN T))
	      ((NULL (TEMPMATCH '(NP/.N (EQ (CADR (/# 1.)) NOUN))
				ANTECEDANT))
	       (RETURN NIL))
	      ((NULL ADJ) (RETURN T))
	      ((NOT (INTERSECTION ADJ (TERM (CDR ANTECEDANT))))
	       (RETURN NIL))
	      (T (RETURN T))))) 

(DEFUN ANTECEDANT (ANAPHORISM MARKERS) 
       (COMMENT FUNCTION FOR LOCATING ANTECEDANTS OF ANAPHORISMS)
       (PROG (TEMP SPECIFIER NOUN ADJ) 
	     (COND ((SETQ SPECIFIER
			  (ASSQ-CHECK-ATOMS 'PRO
				(SETQ TEMP (T/.SONS ANAPHORISM))))
		    (COND ((MEMQ SPECIFIER '(I YOU WE US ME))
			   (RETURN NIL)))
		    (COND ((AND (SETQ TEMP (GETTAG ANAPHORISM
						   'ANTECEDANT))
				(AGREEMENT (GET TEMP 'NODE)
					   SPECIFIER
					   NOUN
					   ADJ
					   MARKERS))
			   (RETURN TEMP)))
		    (GO SCAN))
		   ((AND (LISTP (CAR TEMP))(EQ (CAAR TEMP) 'DET))
		    (SETQ SPECIFIER (CADAR TEMP))
		    (SETQ TEMP (CDR TEMP)))
		   (T (RETURN NIL)))
	L1   (COND ((ATOM (CAR TEMP))(RETURN NIL))	;? SHOULD BE DET,ADJ,N
		   ((EQ (CAAR TEMP) 'ADJ)
		    (SETQ ADJ (APPEND (TERM (LIST (CAR TEMP))) ADJ))
		    (SETQ TEMP (CDR TEMP))
		    (GO L1)))
	     (SETQ NOUN (CADAR TEMP))
	     (SETQ TEMP (CDR TEMP))
	SCAN (RETURN
	      (CAR
	       (SCAN ANTECEDANTS
		     (FUNCTION
		      (LAMBDA (X) 
			      (COND
			       ((NULL (PLIST (CAR X))) NIL)
			       ((AGREEMENT (GET (CAR X) 'NODE)
					   SPECIFIER
					   NOUN
					   ADJ
					   MARKERS)
				(SETQ TAGMATCH
				      (CONS (LIST (T/.REF ANAPHORISM)
						  (CONS 'ANTECEDANT
							(CAR X)))
					    TAGMATCH)))
			       (T NIL))))))))) 

(DEFUN ANTEQUANT (VARIABLE) 
       (COMMENT FINDS ANTECEDANT QUANTIFIERS AND PUTS THEM IN QUANT
		-- USED IN RIGHT HAND SIDES OF SEMANTIC RULES FOR
		ANAPHORISMS)
       (PROG (TEMP) 
	L0   (COND ((SETQ TEMP (GET VARIABLE 'INTENSION))
		    (RETURN (COND ((EQ (CAR TEMP) 'NPR*)
				   (SETQ SEM
					 (SUBST (BUILDQ (NPR* /# // /#)
							VARIABLE
							(CADR TEMP))
						'DLT
						QUANT))
				   (SETQ QUANT 'DLT)
				   SEM)
				  (T (EVAL (BUILDQ (QUANT (FOR /#
							       /#
							       //
							       /#
							       :
							       /#
							       /;
							       DLT))
						   (CAR TEMP)
						   VARIABLE
						   (CADR TEMP)
						   (CADDR TEMP)))))))
		   (T (&PRIN1 'NO/ INTENSION/ FOR/ VARIABLE/ 
			      T)
		      (&PRINT VARIABLE T)
		      (COND ((AND IHELP (HELPER I* HELPER)) (GO L0)))
		      (RETURN 'DLT))))) 

(DEFUN ANTORDER (V1 V2) 
       (COMMENT ORDERING FUNCTIONS FOR ANTECEDANTS)
       (COND ((AND (NOT (MEMQ V1 NEWVARS)) (MEMQ V2 NEWVARS)) NIL)
	     ((AND (NOT (MEMQ V2 NEWVARS)) (MEMQ V1 NEWVARS)) T)
	     ((AND (NOT (MEMQ V1 NEWVARS)) (NOT (MEMQ V2 NEWVARS)))
	      (MEMQ V2 (MEMQ V1 ANTECEDANTS)))
	     ((GREATERP (IMPORT V2) (IMPORT V1)) NIL)
	     (T T))) 

(DEFUN DEFAULTSEM (P TYPEFLAG) 
       (COMMENT PROVIDES DEFAULT INTERPRETATION (T) WHEN NO RRULES
		MATCH)
       (COND ((EQ TYPEFLAG 'RRULES) '((T DLT)))
	     (T NIL))) 

(DEFUN DRULEF (P) 
       (SELECTQ (CADADR P)
		(ALL '(D:ALL-PL NIL D:ALL\ONES))
		((THIS THAT) '(D:THE-SG NIL D:ANAPHORA))
		((THESE THOSE) '(D:ANAPHORA))
		((SOME A AN ANY) '(D:SOME))
		(NO '(D:NO))
		(HOWMANY '(D:HOWMANY))
		(EVERY '(D:EVERY))
		(EACH '(D:EACH))
		(THE '(D:THE-SG2 NIL D:THE-SG NIL D:THE-PL))
		((WHQ WHICHQ WHICH WHAT)
		 '(D:WHQ-SG NIL D:WHQ-PL))
		(OTHERWISE 
		 '(D:NEG NIL
			D:MASS
			NIL
			NP:NPR
			NIL
			D:NIL
			NIL
			D:ORDINAL
			NIL
			D:CARDINAL
			NIL
			D:ANAPHORA
			NIL
			D:SEMI-ANAPHOR
			D:ATLEAST
			D:ATMOST
			D:EXACTLY
			D:MORETHAN
			D:LESSTHAN)))) 

(DEFUN GETREFS (P REFLISTS) 
       (COMMENT MAKES LIST OF THOSE REFLISTS WHICH REFER TO P)
       (COND ((NULL REFLISTS) NIL)
	     ((EQ (CAAR REFLISTS) P)
	      (CONS (CAR REFLISTS) (GETREFS P (CDR REFLISTS))))
	     (T (GETREFS P (CDR REFLISTS))))) 

(DEFUN IMPORT (VBL) 
       (COMMENT ASSIGNS IMPORTANCE TO QUANTIFIED VARIABLES)
       (PROG (TEMP VAL) 
	     (SETQ TEMP (GET VBL 'INTENSION))
	     (SETQ VAL 0.)
	     (COND ((CADDR TEMP)
		    (SETQ VAL (ADD1 VAL))
		    (COND ((MEMQ (CADDR TEMP) '(AND OR))
			   (SETQ VAL (ADD1 VAL))))))
	     (COND ((NOR (ATOM (CADR TEMP))
			 (MEMQ (CAADR TEMP) '(SEQ QUOTE)))
		    (SETQ VAL (ADD1 VAL))))
	     (RETURN VAL))) 

(DEFUN INTERP (P TYPEFLAG) 
       (COMMENT INTERPRETS MEANING OF NODE P USING RULES DETERMINED
		BY TYPEFLAG)
       (PROG (TYPE HEAD RULELIST SEMLIST QVAR MODE) 
	L0   (COND ((EQ TYPEFLAG 'HEAD)
		    (RETURN (LIST (LIST (HEAD P) 'DLT))))
		   ((EQ TYPEFLAG 'TERM)
		    (RETURN (LIST (LIST (TERM (LIST P))
					'DLT))))
		   ((EQ TYPEFLAG 'IDENTITY)
		    (RETURN (LIST (LIST P 'DLT))))
		   ((SETQ SEMLIST (GETTAG P TYPEFLAG))
		    (RETURN SEMLIST)))
	     (SETQ TYPE (CAR P))
	     (SETQ HEAD (HEAD P))
	L1   (SETQ RULELIST (RULES P TYPEFLAG))
	     (SETQ SEMLIST (MATCHER RULELIST P MODE))
	     (COND (SEMLIST (GO RETURN))
		   ((SETQ SEMLIST (DEFAULTSEM P TYPEFLAG))
		    (GO RETURN))
		   (IHELP (GO HELP))
		   (T (GO RETURN)))
	HELP (&PRIN2 TYPE T)
	     (&PRIN1 '/ NOT/ INTERPRETABLE T)
	     (&TERPRI T)
	     (&PRINT P T)
	     (COND ((HELPER I* HELPER) (GO L0)))
	RETURN
	     (RETURN (TAG P TYPEFLAG SEMLIST)))) 

(DEFUN LEAFMEMB (X LIST) 
       (COMMENT TESTS WHETHER SOME LEAF OF X IS A MEMBER OF LIST)
       (COND ((ATOM X) (MEMQ X LIST))
	     ((SCAN (CONSTITUENTS X)
		    (FUNCTION (LAMBDA (Y) (LEAFMEMB (CAR Y) LIST))))
	      T))) 

(DEFUN MARKERS (WRD) 
       (OR (GET WRD 'MARKERS)
	   (AND (SAMPLEP WRD) '(SAMPLE))
	   (AND (DOCP WRD) '(REFERENCE)))) 

(DEFUN MATCHER (RULELIST P MODE) 
       (COMMENT MATCHES A LIST OF RULES AGAINST A NODE)
       (PROG (RULEPTR SEMLIST MATCHLIST TEMP) 
	L0   (COND ((NULL (SETQ RULEPTR RULELIST)) (RETURN NIL)))
	L1   (AND SEM-TRACE
		  (PRINC (CAR RULEPTR))
		  (PRINC '| |))
	     (SETQ TEMP (MATCHGROUP (CAR RULEPTR)))
	     (COND
	      (TEMP 
		    (SETQ SEMLIST (NCONC SEMLIST TEMP))
		    (SETQ DISCRULES
			  (COND (TYPEFLAG (CONS (CONS TYPEFLAG
						      (CAR RULEPTR))
						DISCRULES))
				(T (CONS (CONS (CAR P) (CAR RULEPTR))
					 DISCRULES))))))
	     (COND ((NULL (SETQ RULEPTR (CDR RULEPTR)))
		    (COND ((AND (NULL SEMLIST)
				USERFLAG
				(NOR (EQ TYPEFLAG 'RRULES)
				     (EQ (CADR P) 'REL)))
			   (NO-MATCHES)
			   (GO L0))
			  (T (RETURN SEMLIST))))
		   ((CAR RULEPTR) (GO L1))
		   ((NULL SEMLIST)
		    (SETQ RULEPTR (CDR RULEPTR))
		    (GO L1))
		   (T (RETURN SEMLIST))))) 

(DEFUN MATCHGROUP (RGROUP) 
       (COMMENT MATCHES A GROUP OF RULES AGAINST THE NODE P
		(BOUND IN MATCHER))
       (PROG (CONJ CLIST) 
	     (COND ((ATOM RGROUP)			;SOME RULES IN DICT DONT REALLY EXIST
		    (RETURN (AND (BOUNDP RGROUP) (RMATCH (EVAL RGROUP) RGROUP P MODE))))
		   ((EQ (CAR RGROUP) 'SPLIT)
		    (RETURN (MAPCAN (FUNCTION MATCHGROUP)
				    (CDR RGROUP)))))
	     (SETQ CONJ (CAR RGROUP))
	     (SETQ CLIST (MAPCAR (FUNCTION MATCHGROUP) (CDR RGROUP)))
	     (WHILE (MEMQ NIL CLIST) (SETQ CLIST (KILL NIL CLIST)))
	     (COND
	      ((NULL (CDR CLIST)) (RETURN (CAR CLIST)))
	      (T (RETURN (MAPCAR 
			  (FUNCTION (LAMBDA (SEMLIST) 
					    (SEMCONJ CONJ SEMLIST)))
			  (COMBINATIONS CLIST))))))) 

(DEFUN MEANING? (NPNODE) 
       (COND ((OR (ASSQ 'SSET
			(SETQ TEMP (ASSQ NPNODE TAGLIST)))
		  (ASSQ 'NIL TEMP)
		  (ASSQ 'NRULES TEMP)
		  (ASSQ 'TOPIC TEMP)
		  (GETTAG NPNODE 'USED)
		  (NOT USERFLAG))))) 

(DEFUN MEM FEXPR (*ARGS*) 
       ((LAMBDA (N MARKER) 
	 (COMMENT PREDICATE FOR USE IN CONDITIONS IN TEMPLATES)
	 (PROG (TEMP TEMP2 HEAD) 
	       (COND ((ATOM MARKER) (SETQ MARKER (LIST MARKER))))
	       (RETURN
		(OR
		 (MEMQ 
		  (SETQ HEAD (HEAD (SETQ TEMP (CDR (ASSQ N ALIST)))))
		  MARKER)
		 (INTERSECTION MARKER (MARKERS HEAD))
		 (AND
		  (ATOM (SETQ TEMP2 (CAR (CONSTITUENTS TEMP))))	;LOOK FOR (NP AND ...)
		  (DICTCHECK TEMP2 'CONJ)
		  (EVERY
		   (CDR (CONSTITUENTS TEMP))
		   (FUNCTION (LAMBDA (X) 
				     (INTERSECTION MARKER
						   (GET (HEAD X)
							'MARKERS))))
		   NIL))
		 (AND (OR (MEMQ HEAD
				'(ONES ONE AVERAGE MAXIMUM MINIMUM
				  MOST LEAST NUMBER))
			  (SUPERLATIVE N))
		      (SETQ TEMP2 (CADDAR (CDDDDR TEMP)))
		      (SETQ ALIST (APPEND (LIST (CONS N TEMP2)) ALIST))
		      (APPLY (FUNCTION MEM) (LIST N MARKER))
		      (SETQ ALIST (CDR ALIST)))
		 (AND (GET HEAD 'PRO)
		      (NEQ HEAD 'ONES)
		      (ANTECEDANT TEMP MARKER))))))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN NO-MATCHES NIL 
       (PROG (TEMP) 
	     (COND (TOPICFLAG (RETFROM 'MATCHER NIL)))
	     (SELECTQ
	      TYPEFLAG
	      (NP
	       (&PRIN1
		'I/ DON/'T/ UNDERSTAND/ THE/ DETERMINER/ STRUCTURE/ ON/ THE/ NOUN/ / 
		T))
	      ((NRULES SRULES)
	       (&PRIN1
		'I/ DON/'T/ UNDERSTAND/ YOUR/ USE/ OF/ THE/ WORD/ / 
		T))
	      (OTHERWISE 
	       (&PRIN1
	       'I/ DON/'T/ UNDERSTAND/ THE/ CONSTRUCTION/ WHOSE/ HEAD/ IS/ 
	       T)))
	     (&PRINT (HEAD P) T)
	     (&TERPRI T)
	L1   (&PRIN1 'DO/ YOU/ WANT/ TO/ QUIT/ OR/ BREAK? T)
	     (&TERPRI T)
	     (&PRIN1
	      'IF/ YOU/ BREAK/,/ MATCHER/ WILL/ BE/ REPEATED/ ON/ YOUR/ RETURN%/.
	      T)
	     (&TERPRI T)
	     (COND ((EQ (SETQ TEMP (*READ NIL)) 'QUIT)
		    (SETQ TAGLIST NIL)
		    (QUIT))
		   ((EQ TEMP 'BREAK) (HELPER I* NIL))
		   (T (&TERPRI T) (GO L1))))) 

(DEFUN NXTVAR NIL 
       (COMMENT GENERATES VARIABLE NAMES FOR USE IN QUANTIFIERS)
       (PROG (TEMP TEMP2) 
	     (SETQ TEMP VARIABLES)
	L1   (COND ((NOT (EQ (CDDR TEMP) NIL))
		    (SETQ TEMP (CDR TEMP))
		    (GO L1)))
	     (SETQ TEMP2 (CDR TEMP))
	     (RPLACD TEMP NIL)
	     (RPLACD TEMP2 VARIABLES)
	     (SETQ VARIABLES TEMP2)
	     (SETPLIST (CAR VARIABLES) NIL)
	     (RETURN (CAR VARIABLES)))) 

(DEFUN ORMATCH (TEMPLIST) 
       (COMMENT MATCHES OR/'ED TEMPLATES IN RMATCH)
       (PROG (VAL) 
	L1   (COND ((NULL TEMPLIST) (RETURN VAL))
		   ((AND VAL (EQ (CAAR TEMPLIST) 'DEFAULT))
		    NIL)
		   (T (SETQ VAL (NCONC VAL
				       (TEMPMATCH (CAR TEMPLIST) P)))))
	     (SETQ TEMPLIST (CDR TEMPLIST))
	     (GO L1))) 

(DEFUN PRED FEXPR (*ARGS*) 
       ((LAMBDA (SEMFORM) 
		(COMMENT PERFORMS QUANTIFIER GRABBING FOR A SEMANTIC
			 INTERPRETATION WHICH IS A PREDICATE -- USED
			 IN THE RHS OF A SEMANTIC RULE)
		(PROG (TEMP) 
		      (COND ((EQ (SETQ TEMP QUANT) 'DLT)
			     (RETURN SEMFORM))
			    (T (SETQ QUANT 'DLT)
			       (RETURN (DWRITE SEMFORM
					       'DLT
					       (COPY TEMP)))))))
	(CAR *ARGS*))) 

(DEFUN QUANT FEXPR (*ARGS*) 
       ((LAMBDA (SEMFORM) 
		(COMMENT PERFORMS QUANTIFIER LIFTING FOR A SEMANTIC
			 INTERPRETATION WHICH IS A QUANTIFIER --
			 USED IN THE RHS OF A SEMANTIC RULE)
		(PROG NIL 
		 L0   (COND ((EQ QUANT 'DLT)
			     (SETQ QUANT (COPY SEMFORM)))
			    ((ATOM QUANT)
			     (&PRIN1 'STRANGE/ QUANT/  T)
			     (&PRINT QUANT T)
			     (COND ((AND IHELP (HELPER I* HELPER))
				    (GO L0))
				   (T (RETURN 'DLT))))
			    (T (SETQ QUANT (DWRITE SEMFORM
						   'DLT
						   (COPY QUANT)))))
		      (RETURN QVAR)))
	(CAR *ARGS*))) 

(DEFUN QUIT NIL (THROW NIL SENTPROC-CATCH)) 

(DEFUN REFLOC (RHSFRAG RVECTOR) 
       (COMMENT MAKES REFLISTS FOR RHS & RVECTOR)
       (PROG (SUBP) 
	     (COND
	      ((ATOM RHSFRAG) (RETURN NIL))
	      ((SETQ SUBP (REFPTR RHSFRAG RVECTOR))
	       (RETURN
		(LIST (CONS SUBP
			    (CONS RHSFRAG
				  (INTERP SUBP (REFTYPE RHSFRAG)))))))
	      (T (RETURN (MAPCAN 
			  (FUNCTION (LAMBDA (RHSFRAG) 
					    (REFLOC RHSFRAG RVECTOR)))
			  RHSFRAG)))))) 

(DEFUN REFP (RHSFRAG) 
       (COMMENT PREDICATE FOR TESTING WHETHER A NODE IN THE RHS OF A
		RULE IS A REF -- I/.E/. A CALL FOR THE
		INTERPRETATION OF A SUBEXPRESSION)
       (OR (EQ (CAR RHSFRAG) '/#)
	   (AND (NUMBERP (CAR RHSFRAG)) (NUMBERP (CDR RHSFRAG))))) 

(DEFUN REFPTR (REF RVECTOR) 
       (COMMENT LIKE REFP BUT RETURNS THE POINTER TO THE MATCHING
		SUBEXPRESSION (TAKEN FROM RVECTOR))
       (COND ((EQ (CAR REF) '/#)
	      (COND ((ZEROP (CADR REF)) P)		;(# 0 SRULES)
		    (T (CDR (ASSQ (CADDR REF)		;(# <pattern#> <tag#>
				  (KTH RVECTOR (CADR REF)))))))
	     ((AND (NUMBERP (CAR REF)) (NUMBERP (CDR REF)))
	      (CDR (ASSQ (CDR REF) (KTH RVECTOR (CAR REF)))))
	     (T NIL))) 

(DEFUN REFQUANTS (REFVECTOR N) 
       (COMMENT CONSTRUCTS QUANTIFIER COLLAR FOR REFS IN THE RHS OF
		A SEMANTIC RULE -- ASSUMING THAT THEY/'RE SORTED)
       (COND ((NOT N) (SETQ N 1.) (SETQ SEMFOR (COPY '(DLT)))))
       (COND ((NULL REFVECTOR) 'DLT)
	     ((EQ (CADADR (CAR REFVECTOR)) 'DLT)
	      (REFQUANTS (CDR REFVECTOR) N))
	     ((ASSOC (CAAR REFVECTOR) (CDR REFVECTOR))
	      (REFQUANTS (CDR REFVECTOR) N))
	     ((OR (AND (EQ (CAR (CADADR (CAR REFVECTOR)))
			   'SSUNION)
		       (DWRITE (CADADR (CAR REFVECTOR))
			       'DLT
			       SEMU))
		  (DWRITE (CADADR (CAR REFVECTOR))
			  'DLT
			  SEMFOR))
	      (REFQUANTS (CDR REFVECTOR) N)
	      (CAR SEMFOR)))) 

(DEFUN REFSUB (REFVECTOR) 
       (COMMENT PRODUCES S/.Q PAIR FOR RHS & REFVECTOR BY
		SUBSTITUTING REFS AND EVALUATING)
       (PROG (SEM QUANT) 
	     (COMMENT NOTE: THE CALL TO EVAL MAY REBIND QUANT)
	     (SETQ QUANT (REFQUANTS REFVECTOR NIL))
	     (SETQ SEM (EVAL (REFSUB1 RHS REFVECTOR)))
	     (RETURN (LIST SEM QUANT)))) 

(DEFUN REFSUB1 (RHSFRAG REFVECTOR) 
       (COMMENT SUBSTITUTES INTERPRETATIONS FROM REFVECTOR FOR REFS
		IN RHSFRAG)
       (COND ((EQ RHSFRAG 'X) QVAR)
	     ((NLISTP RHSFRAG) RHSFRAG)
	     ((REFP RHSFRAG) (CAADR (ASSOC RHSFRAG REFVECTOR)))
	     (T (REFSUB2 RHSFRAG REFVECTOR)))) 

(DEFUN REFSUB2 (RHSFRAG REFVECTOR) 
       (COND ((NLISTP RHSFRAG) (REFSUB1 RHSFRAG REFVECTOR))
	     (T (CONS (REFSUB1 (CAR RHSFRAG) REFVECTOR)
		      (REFSUB2 (CDR RHSFRAG) REFVECTOR))))) 

(DEFUN REFTYPE (REF) 
       (COMMENT FUNCTION FOR EXTRACTING THE TYPE OF INTERPRETATION
		REQUIRED BY A REF)
       (COND ((EQ (CAR REF) '/#)
	      (COND ((ZEROP (CADR REF)) (CADDR REF))
		    (T (CADDDR REF))))
	     (T NIL))) 

(DEFUN RELTAG (PLIST) 
       (COMMENT TAGS RELATIVE PRONOUNS WITH QVAR INTERPRETATION)
       (COND ((NLISTP PLIST) NIL)
	     ((MEMQ (CAR PLIST) '(AND OR))
	      (MAPC (FUNCTION RELTAG) (CDR PLIST))
	      T)
	     ((ATOM (CAR PLIST)) (RELTAG (CDR PLIST)))
	     ((AND (EQ (CAAR PLIST) 'NP)
		   (LISTP (CAR (T/.SONS (CAR PLIST))))
		   (EQ (CAAR (T/.SONS (CAR PLIST))) 'DET)
		   (EQ (CAR (T/.SONS (CAR (T/.SONS (CAR PLIST)))))
		       'WHR))
	      (TAG (CAR PLIST) NIL (LIST (LIST QVAR 'DLT)))
	      T)
	     (T (COND ((RELTAG (T/.SONS (CAR PLIST))) T)
		      (T (RELTAG (CDR PLIST))))))) 

(DEFUN RMATCH (RULE RULENAME P MODE) 
       (PROG (TEMP KLIST MLIST SEMLIST TEMPLATE RHS RLOC TAGMATCH) 
	     (COMMENT MATCHES A SEMANTIC RULE AGAINST THE TREE P)
	BEGIN(SETQ RLOC RULE)
	     (SETQ KLIST (LIST NIL))
	     (COND ((ATOM (SETQ TEMP (CAR RLOC)))
		    (SETQ MODE TEMP)
		    (SETQ RLOC (CDR RLOC))))
	L0   (COND ((NULL (CDR RLOC)) (GO L1))
		   ((EQ (SETQ TEMPLATE (CAR RLOC)) '->)
		    (SETQ RLOC (CDR RLOC))
		    (GO L1))
		   ((EQ (CAR TEMPLATE) 'NOT)
		    (COND ((TEMPMATCH (CADR TEMPLATE) P) (RETURN NIL))
			  (T (SETQ MLIST (LIST NIL)))))
		   ((EQ (CAR TEMPLATE) 'OR)
		    (SETQ MLIST (ORMATCH (CDR TEMPLATE))))
		   (T (SETQ MLIST (TEMPMATCH TEMPLATE P))))
	     (COND
	      ((NULL MLIST) (RETURN NIL))
	      ((NULL (SETQ RLOC (CDR RLOC))) (RETURN NIL))
	      (T
	       (SETQ 
		KLIST
		(MAPCAN 
		 (FUNCTION
		  (LAMBDA (RVECTOR) 
		   (MAPCAR 
		    (FUNCTION (LAMBDA (ALIST) 
				      (APPEND RVECTOR (LIST ALIST))))
		    MLIST)))
		 KLIST))
	       (GO L0)))
	L1     (COND ((AND SEM-TRACE TEMP)
		      (TERPRI) (PRINC '|Match: |)
		      (PRINC RULENAME)
		      (TERPRI) (PRINC '|Node: |)
		      (PRINC P)
		      (TERPRI) (PRINC '|Rule: |)
		      (PRINC RULE)
		      (TERPRI)))
	     (SETQ RHS (CAR RLOC))
	     (COND
	      ((MEMQ TYPEFLAG '(NRULES RRULES))
	       (MAPC 
		(FUNCTION
		 (LAMBDA (RVECTOR) 
		  (MAPC (FUNCTION (LAMBDA (RVEC) 
					  (COND ((EQ (CADAR RVEC)
						     'ADJ)
						 (TAG (CDAR RVEC)
						      'USED
						      T)))))
			RVECTOR)))
		KLIST)))
	     (MAPC (FUNCTION (LAMBDA (PAIR) (TAG (CAR PAIR)
						 (CAADR PAIR)
						 (CDADR PAIR))))
		   TAGMATCH)
	     (SETQ SEMLIST
		   (MAPCAN 
		    (FUNCTION (LAMBDA (RVECTOR) (SEMSUB RHS RVECTOR)))
		    KLIST))
	     (COND (SEM-TRACE
		    (TERPRI) (PRINC '|RHS interpretation for: |)
		    (PRINC RULENAME)
		    (TERPRI) (PRINC '|Interpretation: |)
		    (PRINC SEMLIST)
		    (TERPRI)))
	     (COND ((NULL (CDR SEMLIST)) (RETURN SEMLIST))
		   ((MEMQ MODE '(SPLIT NIL)) (RETURN SEMLIST))
		   ((MEMQ MODE '(AND OR))
		    (RETURN (LIST (SEMCONJ MODE SEMLIST))))
		   ((EQ MODE 'FAIL)
		    (&PRIN1 'MULTIPLE/ MATCH/ IN/ FAIL/ MODE T)
		    (&TERPRI T)
		    (&PRINT P T)
		    (COND ((AND IHELP (HELPER M* HELPER)) (GO BEGIN)))
		    (RETURN SEMLIST))))) 

(DEFUN RULES (P TYPEFLAG) 
       (COMMENT DETERMINES LIST OF SEMANTIC RULES TO USE AND ALSO
		SETS MODE)
       (PROG (NMOD HEAD VAL LASTRUL) 
	     (COND ((NULL TYPEFLAG) (SETQ TYPEFLAG (CAR P))))
	     (COND ((OR (EQ (CAR P) 'NP)
			(AND (EQ (CAR P) 'ADJ)
			     (GET (SETQ NMOD (CADR (CADADR P)))
				  'N)))
		    (SETQ QVAR
			  (COND ((GETTAG P 'QVAR))
				(T (TAG P 'QVAR (NXTVAR)))))
		    (PUTPROP QVAR P 'NODE)
		    (SETQ MODE 'FAIL)
		    (COND ((ASSQ-CHECK-ATOMS 'NPR (CONSTITUENTS P))
			   (RETURN NPRRULE))
			  (NMOD (RETURN '(ADJ:SET NIL ADJ:MASS))))))
	     (SELECTQ TYPEFLAG
		      (NP (RETURN (DRULEF P)))
		      (VP (SETQ MODE 'AND))
		      ((S ALL) (SETQ MODE 'FAIL))
		      ((V ADV INTEGER UNIT N NPR ADJ)
		       (RETURN TERMRULE))
		      (OTHERWISE NIL))
	L1   (SETQ 
	      VAL
	      (SELECTQ
	       TYPEFLAG
	       (ALL DALL)
	       (SET SETRUL)
	       (SET? SETRUL?)
	       (SSET SSETRUL)
	       (AVERAGE '(D:AVERAGE))
	       (MAXIMUM '(D:MAXIMUM))
	       (MINIMUM '(D:MINIMUM))
	       (NUMBER '(D:NUMBER))
	       (OLDEST '(D:OLDEST))
	       (REFS? '(REFRULE? NIL REFRULE))
	       (REFS '(REFRULE))
	       (VP (GET (HEAD P) 'VRULES))
	       (S PRERULES)
	       (TOPIC TOPICRULES)
	       (OTHERWISE 
		(COND ((GET (SETQ HEAD (HEAD P)) TYPEFLAG))
		     ((MAPCAN 
		       (FUNCTION (LAMBDA (X) (DICTFETCH X)	;IN CASE NOT IN YET
					     (APPEND (GET X TYPEFLAG)
						     NIL)))
		       (GET HEAD 'MARKERS)))
		     (T NIL)))))
	     (COND ((EQ TYPEFLAG 'RRULES)
		    (SETQ VAL
			  (APPEND VAL
				  '(R:QREL R:REL R:PP R:ADJ)))
		    (COND ((EQ HEAD 'ONE)
			   (SETQ VAL
				 (APPEND VAL
					 (GET (HEAD (GET ANTEVAR
							 'NODE))
					      'RRULES)))))
		    (SETQ VAL (LIST (CONS 'AND VAL)))))
	     (COND ((AND (NULL VAL)
			 (NULL SYNFLAG)
			 (MEMQ TYPEFLAG '(NRULES SRULES))
			 USERFLAG
			 (SYNONYMS? HEAD TYPEFLAG))
		    (SETQ SYNFLAG T)
		    (GO L1))
		   (T (SETQ SYNFLAG NIL)))
	     (RETURN VAL))) 

(DEFUN SCOPEFINDER (FORM CONTEXT) 
       (COMMENT MAKES INTENSION AND SCOPEVARS ENTRIES ON PROPERTY
		LISTS OF VARIABLES IN QUANTIFIERS)
       (PROG (QUANT VBL CLASS PX QX TEMP INTENSION VARS) 
	L0   (COND
	      ((ATOM FORM) (RETURN NIL))
	      ((AND (EQ (CAR FORM) 'FOR)
		    (ATOM (CADDR FORM))
		    (CADDR FORM)
		    (EQ (CADDDR FORM) '//))
	       (SPREADQ (QUANT VBL TEMP CLASS TEMP PX TEMP QX)
			(CDR FORM))
	       (SETQ INTENSION
		     (COND ((EQ QUANT 'SOME)
			    (LIST 'EVERY
				  CLASS
				  (LIST 'AND PX QX)))
			   (T (LIST QUANT CLASS PX))))
	       (GO L1))
	      ((AND (EQ (CAR FORM) 'NUMBER)
		    (ATOM (CADR FORM))
		    (CADR FORM)
		    (EQ (CADDR FORM) '//))
	       (SPREADQ (VBL TEMP CLASS TEMP PX) (CDR FORM))
	       (SETQ INTENSION (LIST 'EVERY CLASS PX))
	       (GO L1))
	      ((AND (MEMQ (CAR FORM)
			  '(SETOF NPR* SETLIST SSUNION))
		    (ATOM (CADR FORM))
		    (CADR FORM)
		    (EQ (CADDR FORM) '//))
	       (SPREADQ (VBL TEMP CLASS TEMP PX) (CDR FORM))
	       (SETQ INTENSION (LIST (CAR FORM) CLASS PX))
	       (GO L1))
	      ((ATOM (CAR FORM))
	       (RETURN
		(MAPCAN 
		 (FUNCTION (LAMBDA (SUBFORM) 
				   (SCOPEFINDER SUBFORM CONTEXT)))
		 (CDR FORM))))
	      (T (RETURN NIL)))
	L1   (SETQ VARS (LIST VBL))
	     (COND ((AND VBL (ATOM VBL))
		    (PUTPROP VBL INTENSION 'INTENSION))
		   (T (&PRIN1 'ILLEGAL/ VARIABLE/ IN/ SCOPEFINDER/ 
			      T)
		      (&PRINT VBL T)
		      (COND ((AND IHELP (HELPER I* HELPER)) (GO L0))
			    (T (RETURN NIL)))))
	     (SETQ TEMP CONTEXT)
	L2   (WHILE TEMP
		    (COND ((AND (NOT (MEMQ (CAR TEMP)
					   (GET VBL
						'SCOPEVARS)))
				(FIND (CAR TEMP) INTENSION))
			   (ADDPROP VBL
				    'SCOPEVARS
				    (CAR TEMP)
				    NIL)))
		    (SETQ TEMP (CDR TEMP)))
	     (SETQ VARS (NCONC VARS (SCOPEFINDER CLASS CONTEXT)))
	     (SETQ VARS
		   (NCONC VARS (SCOPEFINDER PX (CONS VBL CONTEXT))))
	     (SETQ VARS
		   (NCONC VARS (SCOPEFINDER QX (CONS VBL CONTEXT))))
	     (RETURN VARS))) 
 

(DEFUN SCOPEVARS (X) 
       (COMMENT ACCUMULATES THE CLOSURE OF THE SCOPEVARS OF A
		VARIABLE)
       (PROG (TEMP VARS VAL) 
	     (SETQ VARS (SETQ TEMP (LIST X)))
	     (WHILE TEMP
		    (NCONC TEMP
			   (COPY (GET (CAR TEMP) 'SCOPEVARS)))
		    (SETQ TEMP (CDR TEMP)))
	     (MAP 
	      (FUNCTION (LAMBDA (X) 
				(COND ((MEMQ (CAR X) (CDR X)) NIL)
				      (T (SETQ VAL (CONS (CAR X)
							 VAL))))))
	      (CDR VARS))
	     (RETURN VAL))) 

(DEFUN SEM (P TYPEFLAG) (CAAR (INTERP P TYPEFLAG))) 

(DEFUN SEMCONJ (CONJ SEMLIST) 
       (PROG (SEM QUANT) 
	     (SETQ SEM (CONS CONJ (MAPCAR (FUNCTION CAR) SEMLIST)))
	     (SETQ QUANT (LIST 'DLT))
	     (MAPC 
	      (FUNCTION (LAMBDA (SQ) 
				(COND ((CADR SQ)
				       (SETQ QUANT
					     (DWRITE (CADR SQ)
						     'DLT
						     QUANT))))))
	      SEMLIST)
	     (RETURN (CONS SEM QUANT)))) 

(DEFUN SEMIANAPHOR (ANAPHOR) 
       (PROG (TEMPLATE PP1 PP2 ANTEC NODE FOOFLAG VLIST) 
	     (SETQ TEMPLATE '(NP/.PP (AND (EQU 1. *PREP*)
					  (MEM 2. *MARK*))))
	     (SETQ PP1 (CDR (ASSQ-CHECK-ATOMS 'PP (CDR ANAPHOR))))
	     (SETQ TEMPLATE (SUBST (CADR (ASSQ-CHECK-ATOMS 'PREP PP1))
				   '*PREP*
				   TEMPLATE))
	     (SETQ TEMPLATE (SUBST (MARKERS (HEAD (ASSQ-CHECK-ATOMS 'NP
							PP1)))
				   '*MARK*
				   TEMPLATE))
	     (COND
	      ((NOT
		(SETQ 
		 ANTEC
		 (CAR
		  (SCAN
		   ANTECEDANTS
		   (FUNCTION
		    (LAMBDA (X) 
			    (SETQ MATCHLIST NIL)
			    (AND (SETQ VLIST
				       (TEMPMATCH TEMPLATE
						  (SETQ NODE
							(GET (CAR X)
							     'NODE))))
				 (GET (CAR X)
				      'INTENSION))))))))
	       (&PRIN1 'I/ CANNOT/ FIND/ AN/ ANTECEDANT/ FOR/ 
		       T)
	       (&TERPRI T)
	       (&PRINT ANAPHOR T)
	       (&PRIN1 'DO/ YOU/ WANT/ ME/ TO/ QUIT/ OR/ BREAK?/ / 
		       T)
	       (COND ((EQ (*READ NIL) 'BREAK)
		      (HELPER I* SEMIANAPHOR))
		     (T (QUIT)))))
	L0   (COND ((NOT (SETQ PP2 (FIND 'PP NODE))))
		   ((NEQ (ASSQ-CHECK-ATOMS 'NP PP2)
			 (CDR (ASSQ 2. (CAR VLIST))))
		    (*RPLACA PP2 'FOO)
		    (SETQ FOOFLAG T)
		    (GO L0))
		   (T (RPLACD PP2 PP1)))
	L1   (COND ((NOT FOOFLAG))
		   ((NOT (SETQ PP2 (FIND 'FOO NODE))))
		   (T (*RPLACA PP2 'PP) (GO L1)))
	     (SETQ ITP (INTERP NODE NIL))
	     (RETURN (COND ((ATOM (CAAR ITP))
			    (SETQ QVAR (CAAR ITP))
			    (APPLY (FUNCTION QUANT) (CDAR ITP))
			    QVAR)
			   (T (CAAR ITP)))))) 

(DEFUN SEMSUB (RHS RVECTOR) 
       (PROG (REFLISTS REFVECTORS SEMLIST) 
	     (COND ((NULL (SETQ REFLISTS (REFLOC RHS RVECTOR)))
		    (RETURN (LIST (REFSUB NIL))))
		   ((SCAN REFLISTS
			  (FUNCTION (LAMBDA (X) (NULL (CDDAR X)))))
		    (RETURN NIL)))
	     (SETQ 
	      REFVECTORS
	      (COMBINATIONS
	       (MAPCAR 
		(FUNCTION
		 (LAMBDA (REFLIST) 
		  (CONS
		   (CDR REFLIST)
		   (MAPLIST 
		    (FUNCTION (LAMBDA (REFTAIL) 
				      (CONS (CADR REFLIST) REFTAIL)))
		    (CDDDR REFLIST)))))
		(MEMBERS (SORTREFS REFLISTS P)))))
	     (SETQ SEMLIST (MAPCAR (FUNCTION REFSUB) REFVECTORS))
	     (RETURN SEMLIST))) 

(DEFUN SORTREFS (REFLISTS P) 
       (COMMENT SORTS REFLISTS INTO ORDER OF LEFT-TO-RIGHT POSITION
		IN SENTENCE -- ANY NOT IN SENTENCE ARE ADDED AT THE
		END)
       (PROG (TEMP VAL) 
	     (SETQ VAL (SORTREFS1 REFLISTS P))
	     (SETQ TEMP REFLISTS)
	L1   (COND ((NULL TEMP) (RETURN VAL))
		   ((NOT (MEMQ (CAR TEMP) VAL))
		    (SETQ VAL (NCONC VAL (LIST (CAR TEMP))))))
	     (SETQ TEMP (CDR TEMP))
	     (GO L1))) 

(DEFUN SORTREFS1 (REFLISTS P) 
       (PROG (TEMP) 
	     (RETURN
	      (COND
	       ((ATOM P) NIL)
	       ((SETQ TEMP (GETREFS P REFLISTS))
		(NCONC TEMP
		       (MAPCAN 
			(FUNCTION (LAMBDA (X) (SORTREFS1 REFLISTS X)))
			(FRONTED? (T/.SONS P)))))
	       (T (MAPCAN 
		   (FUNCTION (LAMBDA (X) (SORTREFS1 REFLISTS X)))
		   (FRONTED? (T/.SONS P)))))))) 

;;;*** LAMBDA-IFYING MULTI-ARG FUNCTION IN A MAP (LAMBDA (*MAP*) (SCOPEFINDER *MAP* NIL))

(DEFUN SPROC (P) 
       (COMMENT SEMANTICALLY INTERPRETS SENTENCES -- CALLED BY TALKER)
       (PROG (INTERPS) 
	     (SETQ DISCRULES NIL)
	     (SETQ TAGLIST (SETQ TOPICFLAG NIL))
	     (SETQ INTERPS (MAPCAR (FUNCTION CAR) (INTERP P NIL)))
	     (SETQ NEWVARS
		   (MAPCAN (FUNCTION (LAMBDA (*MAP*) 
					     (SCOPEFINDER *MAP* NIL)))
			   INTERPS))
	     (SETQ ANTECEDANTS (SORT ANTECEDANTS (FUNCTION ANTORDER)))
	     (SETQ PREVARS VARIABLES)
	     (RETURN INTERPS))) 

(DEFUN SUPERLATIVE (N) 
       (PROG (TEMP) 
	     (RETURN (COND ((EQ 'NP
				(CAR (SETQ TEMP
					   (CDR (ASSQ N ALIST)))))
			    (MEMQ 'SUPERLATIVE
				  (DO L TEMP (CDR L) (NULL L)	;E.G. (NP (DET ..) (N ..))
				      (AND (LISTP (CAR L))	;SKIP OVER ATOMIC MARKERS
					   (EQ (CAAR L) 'N)	;FOUND THE NOUN?
					   (RETURN (CAR L)))) ))
			   ((EQ 'N (CAR TEMP))
			    (MEMQ 'SUPERLATIVE TEMP))
			   (T NIL))))) 

(DEFUN SSUNIONF FEXPR (*ARGS*) 
       ((LAMBDA (SEMFORM) (COND ((EQ SEMU '(DLT)) SEMFORM)
				(T (SETQ SEMFORM
					 (CAR (DWRITE SEMFORM
						      'DLT
						      SEMU)))
				   (SETQ SEMU (COPY '(DLT)))
				   SEMFORM)))
	(CAR *ARGS*))) 

(DEFUN SYNONYMS? (HEAD TYPEFLAG) 
       (PROG (TEMP) 
	     (&PRIN1 'I/ DO/ NOT/ UNDERSTAND/ THE/ WORD/ /  T)
	     (&PRINT HEAD T)
	     (&PRIN1
	      'DO/ YOU/ WANT/ ME/ TO/ INTERPRET/ YOUR/ REQUEST/ AS/ A/ TOPIC?/ / 
	      T)
	     (COND ((MEMQ (*READ NIL) '(YES T))
		    (&PRINT 'OK T)
		    (SETQ TOPICFLAG T)
		    (RETFROM 'MATCHER NIL)))
	     (&PRIN1 'CAN/ YOU/ TYPE/ A/ SYNONYM/ FOR/ /  T)
	     (&PRINT HEAD T)
	     (&PRIN1 'FROM/ ONE/ OF/ THE/ FOLLOWING: T)
	     (&TERPRI T)
	     (&PRINT (SELECTQ TYPEFLAG
			      (NRULES SEM-NOUNS)
			      (SRULES SEM-VERBS)
			      (OTHERWISE NIL))
		     T)
	     (&PRIN1 'OTHERWISE/ TYPE/ QUIT T)
	     (&TERPRI NIL)
	     (COND ((EQ (SETQ TEMP (*READ NIL)) 'QUIT)
		    (&PRINT 'TERMINATING T)
		    (QUIT))
		   (T (&PRINT 'THANKYOU T)
		      (RETURN (ADDPROP HEAD
				       'MARKERS
				       TEMP
				       NIL)))))) 

(DEFUN USED? (ADJ) (GETTAG ADJ 'USED)) 

(SETQ VARIABLES '(X20 X19
		      X18
		      X17
		      X16
		      X15
		      X14
		      X13
		      X12
		      X11
		      X10
		      X9
		      X8
		      X7
		      X6
		      X5
		      X4
		      X3
		      X2
		      X1)) 

(SETQ ANTECEDANTS (APPEND '(X20 X19
				X18
				X17
				X16
				X15
				X14
				X13
				X12
				X11
				X10
				X9
				X8
				X7
				X6
				X5
				X4
				X3
				X2
				X1) NIL)) 

(LISPXPRINT '(V: INTERVALS) T) 

(SETQ INTERVALS '(INTERFORMATS)) 

(DEFINEV (INTERFORMATS ((REFVECTOR =
				   REFPAIR/'S
				   --
				   ONE
				   FOR
				   EACH
				   REF
				   IN
				   THE
				   RHS
				   OF
				   A
				   RULE
				   --
				   SORTED
				   IN
				   ORDER
				   OF
				   SENTENCE
				   POSITION)
			(REFPAIR = (REF SQ-PAIR . GARBAGE))
			(REFLIST = (SUBP REF . SEMLIST))
			(SEMLIST = SQ-PAIR/'S)
			(SQ-PAIR = (SEM QUANT))
			(KLIST = RVECTOR/'S -- ONE FOR EACH WAY A RULE CAN MATCH)
			(RVECTOR = ALIST/'S -- ONE FOR EACH TEMPLATE OF A RULE)
			(ALIST = R/.P-PAIR/'S -- ONE FOR EACH REF IN A TEMPLATE)
			(R/.P-PAIR = (REF . POINTER))
			(MLIST =
			       ALIST/'S
			       --
			       ONE
			       FOR
			       EACH
			       WAY
			       A
			       TEMPLATE
			       CAN
			       MATCH)
			(TAGLIST = REFENTRY/'S)
			(REFENTRY = (REF . TAGENTRY/'S))
			(TAGENTRY = (TYPEFLAG . SEMLIST))
			(RLIST = (RGROUP/'S))
			(RGROUP =
				NIL
				OR
				RULE
				OR
				(CONJ RGROUP/'S)
				--
				NIL
				IS
				A
				BARRIER
				WHICH
				IS
				CROSSED
				ONLY
				IF
				NO
				RULES
				HAVE
				MATCHED)
			(CONJ = AND OR OR OR SPLIT OR FAIL)))) 


(DECLARE (GENPREFIX NASAFN)) 

(COMMENT DELETED ODDP - A MACLISP SYSTEM FUNCTION) 

(DEFUN *FLAG (X) 
       (COND ((MEMQ (CAR X) '(AND OR NOT))
	      (CONS (CAR X) (INTO (CDR X) (FUNCTION *FLAG))))
	     (T (APPEND X (LIST '*))))) 

(DEFUN ADJPHRSE (X) 
       (KEYPHRASE (CDR (FIRSTPART X
				  (CDR (MEMQ (ASSQ-CHECK-ATOMS 'N X)
					     X)))))) 

(DEFUN ANAPHORD (DET) 
       (MEMQ (CADR DET) '(THIS THAT THOSE THESE))) 

(DEFUN ASSOCNEXT (LISTV NTRY) 
       (PROG (PTR) 
	     (SETQ PTR LISTV)
	LP   (COND ((NULL PTR) (RETURN NIL))
		   ((EQ NTRY (CAAR PTR)) (RETURN PTR))
		   (T (SETQ PTR (CDR PTR)) (GO LP))))) 

(DEFUN AUTHOR: (X) (APPEND (LIST 'AUTHOR:) X)) 

(DEFUN AVERAGE? NIL 
       (COND (AVERAGEFLAG (SETQ AVERAGEFLAG NIL))
	     (T (&PRIN1 'DO/ YOU/ MEAN/ THE/ AVERAGE/ CONCENTRATION
			T)
		(&TERPRI T)
		(COND ((MEMQ (*READ NIL) '(YES T TRUE Y))
		       (SETQ QVAR (TAG P 'QVAR (NXTVAR)))
		       (SETQ AVERAGEFLAG T))
		      (T NIL))
		(&PRINT 'OK T)
		T))) 

(DEFUN DOCP (X) 
       (AND (EQ (GNC (SETQ X (MKSTRING X))) 'D)
	    (NUMBERP (GNC X))
	    (NUMBERP (GNC X))
	    (EQ (GNC X) '-)
	    (NUMBERP (MKATOM X)))) 

(DEFUN ISOTOPE (X) 
       (PROG (Y Z) 
	     (SETQ Y (MKSTRING X))
	L1   (COND
	      ((NUMBERP (SETQ Z (GLC Y))) (GO L1))
	      (T
	       (RETURN (COND ((MEMQ 'ELEMENT
				    (GET (SETQ Y
					       (MKATOM (CONCAT Y Z)))
					 'MARKERS))
			      Y)
			     (T NIL))))))) 

(DEFUN KEYPHRASE (TREELIST) 
       (COND
	((NULL TREELIST) NIL)
	((AND (ASSQ-CHECK-ATOMS 'AUX TREELIST)
	      (MEMQ (CAR TREELIST) '(Q REL IMP DCL NOM)))
	 (KEYPHRASE (CDR TREELIST)))
	((ATOM (CAR TREELIST))
	 (CONS (CAR TREELIST) (KEYPHRASE (CDR TREELIST))))
	((AND (MEMQ (CAAR TREELIST) '(DET))
	      (MEMQ (CAR (CADDAR TREELIST)) '(POSTART)))
	 (APPEND (KEYPHRASE (T/.SONS (POSTARTPHRS (CADDAR TREELIST))))
		 (KEYPHRASE (CDR TREELIST))))
	((MEMQ (CAAR TREELIST) '(NU DET TNS AUX NR))
	 (KEYPHRASE (CDR TREELIST)))
	(T (APPEND (KEYPHRASE (T/.SONS (CAR TREELIST)))
		   (KEYPHRASE (CDR TREELIST)))))) 

(DEFUN LINEP (NODE) 
       (AND (EQ (CADR NODE) 'LINE) (NUMBERP (CADDR NODE)) T)) 

(DEFUN NEWCLASS (AVAR) 
       (SUBST QVAR AVAR (CADR (GET AVAR 'INTENSION)))) 

(DEFUN NEWFRAG FEXPR (*ARGS*) 
       ((LAMBDA (NAME FRAG) (SET NAME FRAG)
			    (SETQ TREEFRAGS (CONS NAME TREEFRAGS))
			    NAME)
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN NEWPX (AVAR) 
       (PROG (INTENT) 
	     (SETQ INTENT (GET AVAR 'INTENSION))
	     (SUBST QVAR AVAR (CADDR INTENT))))		;??? NOT USED ??? (RETURN ...)

(DEFUN NEWRULE FEXPR (ARGS) 
       (COMMENT ADDS NEW SEMANTIC RULES TO SYSTEM AND INDEXES THEM
		APPROPRIATELY)
       (PROG (NAME RULE TYPE HEADS RULELIST) 
	     (SETQ NAME (CAR ARGS))
	     (SETQ RULE (CDR ARGS))
	     (SET NAME RULE)
	     (SETQ NEWRULES (CONS NAME NEWRULES))
	     (&PRIN1 'RULELIST?/  T)
	     (SELECTQ (SETQ RULELIST (*READ T))
		      ((N NO NIL) NIL)
		      (OTHERWISE
			(PROGN (COND ((NOT (MEMQ RULELIST RULELISTS))
				    (SETQ RULELISTS
					  (CONS RULELIST RULELISTS))
				    (SET RULELIST NIL)))
			     (SET RULELIST
				  (CONS NAME (EVAL RULELIST))))))
	     (&PRIN1 'TYPE?/  T)
	     (SETQ TYPE (*READ T))
	     (SELECTQ TYPE
		      ((N NIL NO) NIL)
		      (OTHERWISE
			(PROGN (&PRIN1 'HEADS?/  T)
			     (SETQ HEADS (*READ T))
			     (MAPC (FUNCTION (LAMBDA (*X*) 
						     (ADDPROP *X*
							      TYPE
							      NAME
							      NIL)))
				   HEADS))))
	     (RETURN NAME))) 

(DEFUN NPR FEXPR (ARGS) 
       (COND ((MEMQ (CAR ARGS)
		    '(SAMPLE ROCK SPECIMEN FRAGMENT))
	      (COND ((NUMBERP (CADR ARGS))
		     (PACK (LIST 'S (CADR ARGS))))
		    (T (CADR ARGS))))
	     ((MEMQ (CAR ARGS) '(DOCUMENT REFERENCE))
	      (COND ((AND (NUMBERP (CADR ARGS))
			  (NUMBERP (CADDR ARGS)))
		     (PACK (LIST 'D
				 (CADR ARGS)
				 '-
				 (CADDR ARGS))))
		    ((DOCP (CADR ARGS)) (CADR ARGS))
		    (T (PACK (LIST 'D (CADR ARGS))))))
	     ((MEMQ (CAR ARGS) '(LINE LINE/#))
	      (COND ((NUMBERP (CADR ARGS)) (CADR ARGS))
		    ((AND (MEMQ (CADR ARGS) '(NUMBER /#))
			  (NUMBERP (CADDR ARGS)))
		     (CADDR ARGS))
		    (T (CAR ARGS))))
	     (T (APPLY (FUNCTION TABFORM) ARGS)))) 

(DEFUN SAMPLEP (X) 
       (AND (EQ (GNC (SETQ X (MKSTRING X))) 'S)
	    (NUMBERP (MKATOM X)))) 

(DEFUN TABFORM FEXPR (*ARGS*) 
       ((LAMBDA (X) 
		(SELECTQ X
			 ((ACTINIUM AC) 'AC)
			 ((ALUMINUM AL) 'AL2O3)
			 (AMPHIBOLE 'AMPH)
			 ((ANTIMONY SB) 'SB)
			 ((ARMALCOLITE PSEUDOBROOKITE ARMOLCOLITE)
			  'ARM)
			 ((ARSENIC AS) 'AS)
			 ((ASTATINE AT) 'AT)
			 ((BARIUM BA) 'BA)
			 ((BERYLLIUM BE) 'BE)
			 ((BISMUTH BI) 'BI)
			 ((BORON B) 'B)
			 ((BROMINE BR) 'BR)
			 ((CADMIUM CD) 'CD)
			 ((CALCIUM CA) 'CAO)
			 ((CARBON C) 'C)
			 ((CERIUM CE) 'CE)
			 ((CESIUM CS) 'CS)
			 ((CHLORINE CL) 'CL)
			 ((CHROME-SPINEL ULVOSPINEL) 'SPINEL)
			 ((CHROMIUM CR) 'CR2O3)
			 ((COBALT CO) 'CO)
			 ((COLUMBIUM NB) 'NB)
			 ((COPPER CU) 'CU)
			 ((CRISTOBALITE TRIDYMITE QUARTZ)
			  'SILICA)
			 ((DEUTERIUM H2) 'D)
			 ((DYSPROSIUM DY) 'DY)
			 ((ERBIUM ER) 'ER)
			 ((EUROPIUM EU) 'EU)
			 ((FE0 FE) 'FE)
			 (FE3+ 'FE2O3)
			 ((FE-NI KAMACITE TENATITE) 'METAL)
			 (FLUORAPATITE 'APATITE)
			 ((FLUORINE F) 'F)
			 ((FRANCIUM FR) 'FR)
			 ((GADOLINIUM GD) 'GD)
			 ((GALLIUM GA) 'GA)
			 ((GERMANIUM GE) 'GE)
			 ((GOLD AU) 'AU)
			 ((HAFNIUM HF) 'HF)
			 ((HELIUM HE) 'HE)
			 ((HOLMIUM HO) 'HO)
			 ((HYDROGEN H) 'H)
			 (ILMENITE 'ILM)
			 ((INDIUM IN) 'IN)
			 ((IODINE I) 'I)
			 ((IRIDIUM IR) 'IR)
			 ((IRON FE2+) 'FEO)
			 ((K-FELDSPAR ALKALI-FELDSPAR) 'KFSP)
			 ((KRYPTON KR) 'KR)
			 ((LANTHANUM LA) 'LA)
			 ((LEAD PB) 'PB)
			 ((LEAD-URANIUM /206PB-238U
					/238U-206PB
					PB206//204)
			  '*PB206)
			 ((LITHIUM LI) 'LI)
			 ((LUTECIUM LU) 'LU)
			 ((MAGNESIUM MG) 'MGO)
			 ((MANGANESE MN2+) 'MNO)
			 (MN3+ 'MN2O3)
			 (MN4+ 'MNO2)
			 (MASKELYNITE 'MASK)
			 ((MERCURY HG) 'HG)
			 (MESOSTASIS 'MES)
			 ((MOLYBDENUM MO) 'MO)
			 ((NEODYMIUM ND) 'ND)
			 ((NEON NE) 'NE)
			 ((NICKEL NI) 'NIO)
			 ((NITROGEN N) 'N)
			 ((OLIVINE FORSTERITE FAYALITE FO FA)
			  'OLIV)
			 ((ORTHOPYROXENE HYPERSTHENE ENSTATITE EN FS)
			  'OPX)
			 ((OSMIUM OS) 'OS)
			 ((OXYGEN O) 'O)
			 ((PALLADIUM PD) 'PD)
			 ((PHOSPHORUS P) 'P)
			 ((PLAGIOCLASE ANORTHITE
				       BYTONITE
				       BYTOWNITE
				       LABRADORITE
				       AB
				       AN)
			  'PLAG)
			 ((POLONIUM PO) 'PO)
			 ((POTASSIUM K) 'K2O)
			 ((POTASSIUM-ARGON K-AR) '*K-AR)
			 ((PRASEODYMIUM PR) 'PR)
			 ((PROACTINIUM PA) 'PA)
			 ((PROMETHIUM PM) 'PM)
			 ((PYROXENE CLINOPYROXENE
				    PIGEONITE
				    AUGITE
				    FERROAUGITE
				    TITANO-AUGITE)
			  'CPX)
			 ((PYROXFERROITE PYROXIMANGITE PYROXMANGITE)
			  'TPX)
			 ((RADIUM RA) 'RA)
			 ((RADON RN) 'RN)
			 ((RHENIUM RE) 'RE)
			 ((RHODIUM RH) 'RH)
			 ((RUBIDIUM RB) 'RB)
			 ((RUTHENIUM RU) 'RU)
			 ((SAMARIUM SM) 'SM)
			 ((SCANDIUM SC) 'SC)
			 ((SELENIUM SE) 'SE)
			 ((SILICON SI) 'SIO2)
			 ((SILVER AG) 'AG)
			 ((SODIUM NA) 'NA)
			 ((SPHERULE BEAD SPHERE BALL) 'GLASS)
			 ((STRONTIUM SR) 'SR)
			 ((SULFUR S) 'S)
			 ((TANTALUM TA) 'TA)
			 ((TECHNETIUM TC) 'TC)
			 ((TELLURIUM TE) 'TE)
			 ((TERBIUM TB) 'TB)
			 ((THALLIUM TL) 'TL)
			 ((THORIUM TH) 'TH)
			 ((THULIUM TM) 'TM)
			 ((TIN SN) 'SN)
			 ((TITANIUM TI4+) 'TIO2)
			 (TI3+ 'TI2O3)
			 ((TITANOCHROMITE TITANIAN-CHROMITE)
			  'CHROMITE)
			 ((TRITIUM H3 T) 'T)
			 (TROILITE 'SULFIDE)
			 ((TUNGSTEN W) 'W)
			 ((URANIUM U) 'U)
			 ((VANADIUM V) 'V)
			 ((VESICLE VUG) 'VES)
			 ((WATER H2O) 'H2O)
			 ((XENON XE) 'XE)
			 ((YTTERBIUM YB) 'YB)
			 ((YTTRIUM Y) 'Y)
			 ((ZINC ZN) 'ZN)
			 ((ZIRCONIUM ZR) 'ZR)
			 (OTHERWISE X)))
	(CAR *ARGS*))) 




