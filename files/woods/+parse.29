;READ WOODS;MACROS > IN BEFORE TRYING TO THIS INTERPRETIVELY -*-LISP-*-

(DECLARE (COND ((NULL (MEMQ 'NEWIO (STATUS FEATURES)))
		(BREAK 'YOU-HAVE-TO-COMPILE-THIS-WITH-QCOMPL T))
	       ((OR (NULL (GET 'IF-FOR-MACLISP 'MACRO))
		    (GET 'POP 'MACRO))
		(LOAD '(MACROS > DSK WOODS)))))

(IF-FOR-LISPM
(DECLARE (QUOTED-ARGS 
  FORCE  PUSH  SCANSTACK  SYSCONJ  ADDL  ADDR 
  CAT  GETF  GETR  JUMP  LIFTR  NULLR 
  SENDR  SENDRQ  SETR  SETRQ  TO  TODO 
  WRD  CHECKF  COMPARATIVE  GETROOT  MARKER  NPCHECK 
  NPREP  PNCHECK  RESUMETAG  RFEAT  SCOMP  VPARTICLE 
  VPASSIVE  VPREP  VTRANS  HELPER  MAPCV  RENAME 
  SCANCV  SETQS  THOSEV  EDITD  EDITG  REMEX 
  CTYPE  PLURAL  COMPFORM  SUPFORM  /#  MEM 
  PRED  QUANT  SSUNIONF  NEWFRAG  TABFORM))
);LISPM

(DECLARE  (SPECIAL SEM-TRACE *SPOP *TRAIL REG WHERE *SQ-VAL*)
	  (*LEXPR CONCAT))
(DECLARE (*LEXPR APPLY* EVALA)(SPECIAL *LOC*))

(DECLARE  (SPECIAL *SPOP *TRAIL REG WHERE *SQ-VAL*)
(*LEXPR CONCAT))

(DECLARE (SPECIAL /#FLG * *ACFS *STATE *X* -FLG A0 A1 ABUF ACF/# ACFS
		  ACONFIG ACT ACTION ACTIONS ADJ AHELP ALIST ALT
		  ALTARC ALTARC1 ALTCONJ ALTLEX ALTNUM ALTS ALTWFS
		  ANAPHORISM ANAPHRLST ANTECEDANTS ANTEVAR ARC ARCS
		  ARGS ASSIST ATOM ATOMS AVERAGEFLAG BEG BEGIN
		  BLOCKS C2 CAND CAT CATEGORIES CLIST CMODE CONFIG
		  CONJ CONTEXT CONTINUE DALL DET DFILE
		  DICTFETCHFAILS DICTFILE DICTFILEBEG DICTFORM
		  DICTIONARY DISCRULES ECONSES ECONSES0 EDITDV
		  EDITGV EDO END ETIME ETIME0 ETIMEFLAG EXECCOMS
		  EXECUTE FAIL FEAT FEATS FEATURES FILE FILEFNS
		  FILELST FILEMACROS FILEVARS FIRSTFLAG FLAG FORCE
		  FORKNAME FORM FOUND GETFN GLOBALVARS GVARS H1
		  HEAD HEADRULES HEADS HELP HELPER HITFILE HOLD IB
		  ICONSES ICONSES0 IDO IHELP INPUTLOGFILE
		  INPUTLOGFLAG INTENSION INTERP INTERPS INTERVALS
		  IPRINT ITIME ITIME0 ITIMEFLAG ITP KLIST L0 L1 L2
		  L3 L4 LABEL LAMS LETFLG LEX LEXBACK LEXLIST
		  LEXMODE LEXTABLE LH LISPXHISTORY LIST LOC LOGFILE
		  LOGFLAG LOOP LOWFORK LP MACROS MARKER MARKERS
		  MATCHLIST MAXBLOCKS MAXPARSES MAXREPARSES MAXTIME
		  MCATEGORIES MID MINL MINLOC MLIST MODAL MODE
		  MODEVARS MODL MORE-MOST MORPHOLOGYCOMS
		  MORPHOLOGYFNS MORPHTABLE MORPHTESTS MTST
		  MYGLOBALVARS NAME NEWRULES NEWVARS NFLAG NLAMA
		  NLAML NLEX NODE NOMOVEFLAG NOUN NP NPRRULE NU
		  OLDALTS P PAREN// PARENCOUNT PARENS PARSE
		  PARSER10COMS PARSES PARSEXPRS PARSVALS PATH
		  PAUSEFLAG PCONSES PCONSES0 PCTFLG PHELP PMODE
		  PNCODE PPATH PPRINT PPT PREFERRED PREP PRERULES
		  PREVARS PROPS PS PTIME PTIME0 PTIMEFLAG
		  PUNCTUATION PUSH PUSHSTATE QBUF QUANT QVAR
		  READBUF RECORD REFLIST REFLISTS REGS REPARSE
		  REQUESTDEF RESOLVE RETURN RHS RULELIST RULELISTS
		  RVECTOR SCAN SCNFN SCNLST SCORE0 SCORE0SENTS
		  SCORE1 SCORE1SENTS SCORE2 SCORE2SENTS SCORE3
		  SCORE3SENTS SEARCH SEARCHFLAG SEM SEM-NOUNS
		  SEM-VERBS SEMFOR SEMSUB SEMU SENTENCE SENTENCES
		  SETFN SETRUL SETRUL? SIFLAG SKIP SMP SMP2
		  SPECIFIER SPLIT/# SPLITS SREGS SSETRUL STACK
		  STACKELT START STARTCLOCK STATE STRAIL STRING
		  STRINGPOS SUBLOC SUBSTITUTE SUCCESS SUCCESSFLAG
		  SYNFLAG SYSCONJ SYSPROPS T2 TACONFIG TAGLIST
		  TAGMATCH TAILS TEMP TEMPLATE TEMPTRAIL TERMRULE
		  TEST TOP TOPICFLAG TOPICRULES TOPIC\AND-NP
		  TOPIC\AND-S TRACE TRACEFILE TRAIL TRAILARC
		  TRAILLABEL TRAILS TRAILTYPE TRAILV TRAILVAL
		  TREEFRAGS TRULES TST TYPE TYPEFLAG UCFS UEXPRS
		  UFNS UMACROS UNSMASH UPRINT USERFLAG USERFNS V
		  VAL VALUES VARIABLE VARIABLES VARSFLAG VBL VCFS
		  VLIST WEIGHT WFSS WFST WFST3 WFST4 WORD X XPROPS
		  XTF XTP Y)) 

(DECLARE (*EXPR WHILEM WHEREIS USERFN USED? UNWIND TRAILS TRAIL1
		TRAIL TRACEFILE TOPLEVEL? TMATCH TIMEP TERM
		TEMPMATCH TALKER TAILS1 TAILS TAG SYNONYMS?
		SUSPENDW SUSPEND SUPERLATIVE SUBSET STORALT STEP
		SPROC SPREADQM SPOP SORTREFS1 SORTREFS SHOWTIME
		SETUP SETQSM SENTPROC SENDACTP SEMSUB SEMNET
		SEMIANAPHOR SEMCONJ SEM SDIFF SCOPEVARS SCOPEFINDER
		SCAN SBUILD SAMPLEP RULES RMATCH RESOLVE REQUESTDEF
		RELTAG RELATIVIZE RELATEDWORDS REFTYPE REFSUB2
		REFSUB1 REFSUB REFQUANTS REFPTR REFP REFLOC REDO
		QUIT QSTART QGO PUTLEX PUNCTALIZE PRINTPARSES PPT1
		PPT PPR PPP PPG PPD PPATH/.STACK PPATH/.REGS
		PPATH/.HOLD PPATH/.BACK POPCONJ POP PLOG PARSER
		PARSELIST ORMATCH ORFLAG NXTVAR NPBUILD NO-MATCHES
		NEXTWRD NEWPX NEWCLASS MORPHTSTCHECK MORPHTABCHECK
		MORPH MODESET MODAL MEMBSTACK MEMBERS MEANING?
		MATCHGROUP MATCHER MARKERS LONGBLOCK LOCEX LOC LOADFROM
		LINEP LEXPAIRS LEXIC LEXALIZE LEAVES LEAFMEMB
		LASTELT LAMTYPE KTH KILL KEYPHRASE ISOTOPE INTERP
		IMPORT IDENTITY HYPHENADJ HOLDSCAN HOLD HEAD GETTAG
		GETSENT GETREFS GETLEX FRONTED? FORCER FIRSTPART
		FIND FILEX FILEMATCH EVALLOC ENDTRACE ENDL? DWRITE
		DRULEF DOCP DICTFETCH DICTCHECK DICT? DETOUR
		DETBUILD DEFAULTSEM CONTRACTP CONSTITUENTS
		CONJSTARTS CONJSCOPE CONJOIN COMSAV COMBINATIONS
		CHOOSEALT CCHECK CATCHECK BUILD2 BUILD1 BACKUP
		BACKLEX AVERAGE? AUTHOR: ASSOCNEXT ASSIST ARGSOF
		ARGSAV ARCTEST ARCPICK ANTORDER ANTEQUANT
		ANTECEDANT ANAPHORD ALTLOC ALTCONJGEN ALTARCGEN
		ALT/.WEIGHT ALT/.STRING ALT/.STATE ALT/.STACK
		AGREEMENT ADJVERB ADJPHRSE ADDLEX ACT ABORT *FLAG)) 

(DECLARE (*FEXPR WRD WHILE VTRANS VPREP VPASSIVE VPARTICLE TRACER
		 TODO TO THOSEV TABFORM SYSCONJ SUPFORM SSUNIONF
		 SPREADQ SPLIT SHOW SETRQ SETR SETQS SENDRQ SENDR
		 SCOMP SCANSTACK SCANCV RFEAT RESUMETAG RESUME
		 RENAME REMEX QUANT Q PUSH PRED PNCHECK PLURAL
		 NULLR NPREP NPR NPCHECK NOR NEWRULE NEWFRAG MEM
		 MARKER MAPCV LIFTR JUMP HELPER GETROOT GETR GETF
		 FORCE FILE EQUIVALENCE EQU EDITG EDITD DEFINEV
		 DEFINEP DEFINEGL DEFINEG DEFINEDL DEFINEDICT DDEF
		 CTYPE COMPFORM COMPARATIVE CHECKF CHANGEWORD CAT
		 BUILDQ BUILD ADDR ADDL /#)) 

(COMMENT FUNCTIONS NOT DEFINED IN MACLISP OR SOURCE
	 (! *MAP
	    *MAPCON
	    &PRIN1
	    &PRIN2
	    &PRINT
	    *READ
	    *READC
	    *RPLACA
	    *SORT
	    &TERPRI
	    ADDPROP
	    ALTSTACK
	    APPLY*
	    BACKTRACE
	    BREAK1
	    CHANGENAME
	    CLOCK
	    CLOSEF
	    CONCAT
	    CONSCOUNT
	    CONTROL
	    COPY
	    DEFLIST
	    DSUBST
	    EDITE
	    ENDFILE
	    EVALA
	    EVERY
	    FILEPOS
	    FILEVARS
	    FNTYP
	    GETLOWER
	    GETV
	    GLC
	    GNC
	    HISTORYSAVE
	    INFILE
	    INFILEP
	    INTERSECTION
	    INTO
	    LAMBDA
	    LISPX
	    LISPXPRINT
	    LISPXREAD
	    LISTP
	    LOC
	    MAKEFILE
	    MKATOM
	    MKSTRING
	    NCHARS
	    NEQ
	    NEWFILE1
	    NFLCT-ADJ
	    NFLCT-ING
	    NLISTP
	    *NTH
	    OPENP
	    OUTFILE
	    OUTPUT
	    PACK
	    PARSEPARENS
	    PEEKC
	    PLIST
	    POSITION
	    POSTARTPHRS
	    PRINTDEF
	    PRINTFNS
	    PRINTLEVEL
	    PROMPTCHAR
	    RATOM
	    READP
	    READVISE
	    RETFROM
	    RUNFORK
	    SAVESET
	    SELECTQ
	    SFPTR
	    SOME
	    SPACES
	    STKNTH
	    STKSCAN
	    TCONC
	    UNPACK)) 


(DEFUN *RPLACA MACRO (X) (RPLACA X 'RPLACA))


(DEFUN SETQS MACRO (X) 
       ((LABEL FOO
	       '(LAMBDA (Y) 
			(LIST 'SETQ
			      (CAR Y)
			      (COND ((NULL (CDR Y)) (CADDR X)) (T (FUNCALL FOO (CDR Y)))))))
	(CADR X)))
 
(DEFUN SPREADQ MACRO (X)
(CONS 'SETQ (CONS '*LOC* (CONS (CADDR X)
 (MAPCAN '(LAMBDA (X) (CONS X (LIST '(CAR *LOC*) '*LOC* '(CDR *LOC*))))
         (CADR X))))))

(DEFUN WHILE MACRO (X)
(PROG (TAG)
 (SETQ TAG (GENSYM))
 (RETURN (LIST 'PROG NIL
 TAG	(LIST 'COND (APPEND (CDR X) (LIST (LIST 'GO TAG))))))))

(DEFUN T/.SONS MACRO (X) (RPLACA X 'CONSTITUENTS)) 

(DEFUN ALTARC/.TRAIL MACRO (X) (RPLACA X 'CADR)) 

(DEFUN T/.REF MACRO (X) (RPLACA X 'IDENTITY)) 

(DEFUN F/.REF MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN T/.SONS MACRO (X) (RPLACA X 'CONSTITUENTS)) 

(DEFUN F/.SONS MACRO (X) (RPLACA X 'CADR)) 

(DEFUN T/.NODE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN F/.NODE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN STACKELT/.REGS MACRO (X) (RPLACA X 'CADR)) 

(DEFUN POPARC/.FEATURES MACRO (X) (RPLACA X 'CADDDR)) 

(DEFUN POPARC/.FORM MACRO (X) (RPLACA X 'CADR)) 

(DEFUN ARC/.ACTIONS MACRO (X) (RPLACA X 'CDDDR)) 

(DEFUN ARC/.TEST MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN ARC/.LABEL MACRO (X) (RPLACA X 'CADR)) 

(DEFUN ARC/.TYPE MACRO (X) (RPLACA X 'CAR)) 

(DEFUN ALTARC/.ARCS MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN ALTARC/.ACONFIG MACRO (X) (RPLACA X 'CDDDR)) 

(DEFUN PATH/.STRING MACRO (X) (RPLACA X 'CADDR)) 

(DEFUN PATH/.VAL MACRO (X) (RPLACA X 'CAR)) 

(DEFUN PATH/.ARC MACRO (X) (RPLACA X 'CADR)) 

(DEFUN PPA MACRO (X) (RPLACA X 'TH/.CONFIG)) 

(DEFUN PPATH/.STRING MACRO (X) (RPLACA X 'CADR)) 

(DEFUN PPATH/.STATE MACRO (X) (RPLACA X 'CADDDR)) 

(DEFUN PPATH/.PATH MACRO (X) (RPLACA X 'LASTELT)) 

(DEFUN PPATH/.ARC MACRO (X) (RPLACA X 'CAR)) 

(DEFUN PPATH/.ACONFIG MACRO (X) (RPLACA X 'CDR)) 

(DEFUN STACKELT/.PPATH MACRO (X) (RPLACA X 'LASTELT)) 

(DEFUN DEFINEG-GRAMMAR MACRO (X) (RPLACA X 'DEFINEG)) 

(DEFUN DEFINEG-RULES MACRO (X) (RPLACA X 'DEFINEG)) 

(DEFUN EXECUTE MACRO (X) (RPLACA X 'REMEX)) 


(DECLARE (GENPREFIX EXTRA)) 

(DEFUN DEFINEV FEXPR (ARGS) 
       (MAPC (FUNCTION (LAMBDA (X) (SET (CAR X) (CADR X)))) ARGS)
       NIL) 

(DEFUN DEFINEG FEXPR (ARGS) 
       (MAPC (FUNCTION (LAMBDA (X) (SET (CAR X) (CDR X)))) ARGS)
       NIL) 

(DEFUN DEFINEDICT FEXPR (ARGS) 
       (MAPC 
	(FUNCTION (LAMBDA (X) 
			  (*MAP (FUNCTION (LAMBDA (Y) 
						  (PUTPROP (CAR X)
							   (CADR Y)
							   (CAR Y))))
				(CDR X)
				(FUNCTION CDDR))
			  (PUTPROP (CAR X) 'DEFINEDICT 'DICTFETCHED)))
	ARGS)
       NIL) 


(DECLARE (GENPREFIX PARSER)) 


(DEFUN ACT (ACTIONS NONTERMFLAG) 
       (COMMENT EXECUTES ACTIONS ON ARCS)
       (PROG (ACTION) 
	ACT  (COND ((NULL ACTIONS)
		    (COND (NONTERMFLAG (RETURN NIL))
			  (T (&PRIN1 'NON-TERMINATED/ ARC/ AT/ STATE/ 
				     T)
			     (&PRINT STATE T)
			     (&PRINT STRING T)
			     (RETURN '*HELP))))
		   (T (SETQ ACTION (CAR ACTIONS))))
	     (SETQ ACTIONS (CDR ACTIONS))
	     (SELECTQ (COND ((ATOM ACTION) (ACT (EVAL ACTION) T))
			    (T (EVAL ACTION)))
		      (*L0 (RETURN '*L0))
		      (*L1 (RETURN '*L1))
		      (*L2 (RETURN '*L2))
		      (*END (RETURN '*END))
		      (*HELP (RETURN '*HELP))
		      (OTHERWISE (GO ACT))))) 

(DEFUN ALT/.STACK (ALT) 
       (SELECTQ (CAR ALT)
		(ALTCONJ (CADAR (*NTH ALT 5.)))
		(ALTARC (KTH ALT 7.))
		(ALTWFS (KTH ALT 7.))
		(OTHERWISE NIL))) 

(DEFUN ALT/.STATE (ALT) 
       (SELECTQ (CAR ALT)
		((ALTARC ALTCAT) (KTH ALT 6.))
		(ALTWFS (KTH ALT 5.))
		(OTHERWISE NIL))) 

(DEFUN ALT/.STRING (ALT) 
       (SELECTQ (CAR ALT)
		((ALTARC ALTCAT) (KTH ALT 4.))
		(ALTCONJ (KTH ALT 4.))
		(ALTSUB (CADR ALT))
		(ALTCOMP (CDR ALT))
		(OTHERWISE NIL))) 

(DEFUN ALT/.WEIGHT (ALT) 
       (SELECTQ (CAR ALT) ((ALTARC ALTCAT) (KTH ALT 5.)) (OTHERWISE (CADR ALT)))) 

(DEFUN ALTARCGEN NIL 
       (COMMENT GENERATES ALTARC ALTERNATIVES --USED IN STEP)
       (COND (LEXMODE (WHILE (AND ARCS
				  (NOT (OR (MEMQ (CAAR ARCS)
						 '(JUMP POP))
					   (AND (EQ (CAAR ARCS)
						    TRAILTYPE)
						(EQ (CADAR ARCS)
						    TRAILLABEL)))))
			     (SETQ ARCS (CDR ARCS)))))
       (COND (ARCS (STORALT (CONS 'ALTARC
				  (CONS TRAIL (CONS ARCS ACONFIG)))
			    NIL)
		   (SETQ ARCS NIL)))) 

(DEFUN ALTCONJGEN (PPATH) 
       (COMMENT GENERATES ALTCONJ ALTERNATIVES -- USED IN CONJOIN)
       (COND (TRACE (TRACER PAUSEFLAG
			    (&PRIN1 'STATE/  NIL)
			    (&PRIN2 (PPATH/.STATE PPATH) NIL))))
       (STORALT (LIST 'ALTCONJ
		      WEIGHT
		      LEXMODE
		      (CDR STRING)
		      (LIST (LIST (PPATH/.STATE PPATH)
				  (CONS STACKELT (PPATH/.STACK PPATH))
				  (PPATH/.REGS PPATH)
				  (PPATH/.HOLD PPATH)
				  NIL))
		      NIL)
		NIL)) 

(DEFUN ALTLOC (ALTS STATE STACK) 
       (COMMENT LOCATES ALTERNATIVE FOR SELECTIVE MODIFIER PLACEMENT)
       (COND ((NULL ALTS) NIL)
	     ((AND (EQ (CAAR ALTS) 'ALTARC)
		   (EQ (ALT/.STATE (CAR ALTS)) STATE)
		   (EQ (ALT/.STACK (CAR ALTS)) STACK))
	      ALTS)
	     (T (ALTLOC (CDR ALTS) STATE STACK)))) 

(DEFUN ARCPICK (LOCX LOCY) 
       (COMMENT SELECTS ARC TO FOLLOW IN SELECTIVE MODIFIER PLACEMENT)
       (PROG (ARC) 
	     (SETQ ARC (CAR LOCY))
	     (SETQ ARC (CONS (CAR ARC)
			     (CONS (CADR ARC)
				   (CONS (BUILDQ (AND *SPOP /#)
						 (CADDR ARC))
					 (CDDDR ARC)))))
	     (*RPLACA (CDDAR LOCX)
		      (CONS ARC (KILL (CAR LOCY) (CADDAR LOCX))))
	     (RETURN (CAR LOCY)))) 

(DEFUN ARCTEST (ARC) 
       (PROG (OREGS TEMP) 
	     (SETQ OREGS REGS)
	     (COND ((OR (EQ (SETQ TEMP (ARC/.TEST ARC)) 'T)
			(EVAL TEMP))
		    (RETURN T))
		   (T (SETQ REGS OREGS) (RETURN NIL))))) 

(DEFUN ASSIST NIL 
       (COMMENT ATTEMPTS TO FORCE UNPARSABLE SENTENCES -- USED IN
		STEP)
       (PROG (TEMP CATS STATE *STATE STACK REGS HOLD PATH) 
	     (COND ((NULL ASSIST) (RETURN NIL)))
	     (SETQ TEMP (LONGBLOCK))
	     (SETQ STRING (CAR TEMP))
	     (SETQ LEX (CAR STRING))
	     (SETQ WEIGHT (CADR TEMP))
	     (COND ((NULL TEMP) (GO A1))
		   ((OR (LISTP LEX) (NUMBERP LEX) (NULL LEX)) (GO A0))
		   ((PLIST LEX) (GO A0)))
	     (SETQ CATS
		   (MAPCAN 
		    (FUNCTION (LAMBDA (X) 
				      (COND ((EQ (CAR X) 'CAT)
					     (LIST (CADR X)))
					    (T NIL))))
		    (EVAL (CADDR TEMP))))
	     (MAPC (FUNCTION (LAMBDA (CAT) (MORPH LEX CAT NIL))) CATS)
	     (COND ((NOT (GET LEX 'CATEGORIES)) NIL)
		   ((SETQ ACFS (STEP (CDDR TEMP) NIL))
		    (SETQ STRING (CDR STRING))
		    (RETURN 'L1))
		   (ALTS (RETURN 'ALT)))
	     (MAPC (FUNCTION (LAMBDA (CAT) (MORPH LEX CAT T))) CATS)
	     (COND ((NOT (GET LEX 'CATEGORIES)) NIL)
		   ((SETQ ACFS (STEP (CDDR TEMP) NIL))
		    (SETQ STRING (CDR STRING))
		    (RETURN 'L1))
		   (ALTS (RETURN 'ALT)))
	     (COND (AHELP (&PRINT 'ASSISTANCE: T)
			  (REQUESTDEF LEX))
		   (T (GO A0)))
	     (COND ((SETQ ACFS (STEP (CDDR TEMP) NIL))
		    (SETQ STRING (CDR STRING))
		    (RETURN 'L1))
		   (ALTS (RETURN 'ALT)))
	A0   (COND ((NULL FORCE) (GO A1)))
	     (MAPC 
	      (FUNCTION
	       (LAMBDA (Z) 
		(COND
		 ((NOT (EQ (CADDR Z) T))
		  (SETQ 
		   *STATE
		   (NCONC *STATE
			  (LIST (CONS (CAR Z)
				      (CONS (CADR Z)
					    (CONS (LIST 'FORCE
							(CADDR Z))
						  (CDDDR Z)))))))))))
	      (EVAL (CADDR TEMP)))
	     (COND ((NULL *STATE) (GO A1)))
	     (&PRIN1 'FORCING/ TESTS/ AT/ STATE/  NIL)
	     (&PRINT (CADDR TEMP) NIL)
	     (&PRINT (CAR TEMP) NIL)
	     (SETQ STRING (CAR TEMP))
	     (SETQ WEIGHT (CADR TEMP))
	     (COND ((SETQ ACFS (STEP (CONS '*STATE
					   (CDDDR TEMP))
				     NIL))
		    (SETQ STRING (CDR STRING))
		    (RETURN 'L1))
		   (ALTS (RETURN 'ALT)))
	A1   (COND ((NULL AHELP) (RETURN NIL)))
	     (SPREADQ (STRING WEIGHT STATE STACK REGS HOLD PATH) TEMP)
	     (&PRIN1 'BLOCKED/ AT/ STATE/ :/  T)
	     (&PRINT STATE T)
	     (&PRINT STRING T)
	     (COND ((HELPER A* ASSISTANCE)
		    (COND ((SETQ ACFS (STEP (CDDR TEMP) NIL))
			   (SETQ STRING (CDR STRING))
			   (RETURN 'L1))
			  (ALTS (RETURN 'ALT))
			  (T (&PRIN1 'NO/ GO/;/  T) (GO A1)))))
	     (RETURN NIL))) 

(DEFUN BACKUP NIL 
       (COMMENT FUNCTION FOR BACKING UP PATH IN ASSIST BREAK)
       (COND
	(PATH (SETQ TEMP (CDDR PATH))
	      (SPREADQ (STRING WEIGHT STATE STACK REGS HOLD PATH)
		       TEMP)
	      STATE)
	(STACK
	 (SETQ TEMP (PPATH/.ACONFIG (STACKELT/.PPATH (CAR STACK))))
	 (SPREADQ (STRING WEIGHT STATE STACK REGS HOLD PATH) TEMP)
	 STATE)
	(T (&PRINT 'CAN/'T T) NIL))) 

(DEFUN CATCHECK (CAT FLAG) 
       (COMMENT CHECKS WHETHER LEX CAN BE IN CATEGORY CAT/; RETURNS
		(FORM . FEATURES) PAIR)
       (PROG (TEMP) 
	     (COND ((OR (LISTP LEX) (NUMBERP LEX) (NULL LEX))
		    (GO MTST))
		   ((SETQ TEMP (DICTCHECK LEX CAT))
		    (GO END)))
	MTST (COND ((NOT (SETQ TEMP (CDR (ASSQ CAT MORPHTESTS))))
		    (RETURN NIL))
		   ((NOT (SETQ TEMP
			       (MAPCAN (FUNCTION MORPHTSTCHECK)
				       TEMP)))
		    (RETURN NIL)))
	END  (COND ((AND FLAG (CDR TEMP))
		    (STORALT (CONS 'ALTCAT
				   (CONS (CDR TEMP)
					 (CONS ARC ACONFIG)))
			     NIL)))
	     (RETURN (CAR TEMP)))) 

(DEFUN CONJOIN NIL 
       (PROG (C1 C2 TEMP TRAILS TAILS *ACFS *STRING PREFERRED) 
	     (COND ((OR (AND STRING (NULL STACK))
			(EQ STRING (CDR (PPATH/.STRING PPATH))))
		    (RETURN '*END))
		   ((NOT (MEMQ (SETQ C2 (CAR (CONSTITUENTS *)))
			       '(AND OR)))
		    (COND ((EQ (GETR CONJ NIL) '/,)
			   (RETURN '*END))
			  (T (SETR BODY (LIST *)))))
		   (T (COND ((EQ (SETQ C1 (GETR CONJ NIL)) C2)
			     (SETR BODY (CDR (CONSTITUENTS *))))
			    ((EQ C1 '/,)
			     (SETR BODY (CDR (CONSTITUENTS *)))
			     (SETR CONJ C2))
			    (T (SETR BODY (LIST *))))))
	     ((LAMBDA (PRINLEVEL PRINLENGTH)
		      (SETR PPATH2 (CDR VAL)))
	      3 3)
	     (SETR NODE (CAR *))
	     (SETR LEXMODE LEXMODE)
	     (SETQ STACK (APPEND (FIRSTPART (PPATH/.STACK PPATH)
					    STACK)
				 (CONS (LIST STATE
					     REGS
					     '((POPCONJ))
					     NIL
					     NIL
					     NIL)
				       STACK)))
	     (SPREADQ (STATE TEMP REGS HOLD PATH)
		      (PPATH/.CONFIG PPATH))
	     (SETQ TRAILS (TRAILS VAL))
	     (SETQ *STRING (PATH/.STRING (CAAR TRAILS)))
	     (WHILE
	      TRAILS
	      (SETQ TAILS
		    (NCONC TAILS
			   (COND ((CDR TRAILS)
				  (TAILS1 (CDR (CAR TRAILS))))
				 (T (TAILS (CDR (CAR TRAILS)))))))
	      (SETQ TRAILS (CDR TRAILS)))
	     (SETQ CONFIG (LIST STATE STACK REGS HOLD PATH))
	     (COND
	      (TRACE
	       (TRACER PAUSEFLAG
		       (&PRIN1 'RESTARTING/ FIRST/ PART/ OF/ CONJ
			       NIL))))
	     (SETQ *ACFS (LIST CONFIG))
	     (SETQ TEMP TAILS)
	L1   (COND ((NULL TEMP) (SETQ TEMP WEIGHT))
		   ((EQ (CAR (PATH/.STRING (CAAR TEMP)))
			(CAR (PPATH/.STRING (PPATH/.BACK PPATH))))
		    (SETQ PREFERRED (CADR TEMP))
		    (SETQ TEMP (ADD1 WEIGHT)))
		   (T (SETQ TEMP (CDR TEMP)) (GO L1)))
	     (MAPC 
	      (FUNCTION
	       (LAMBDA (TRAIL) 
		(COND
		 ((NOT (EQ TRAIL PREFERRED))
		  (COND
		   (TRACE (TRACER PAUSEFLAG
				  (&PRIN1 'AT/  NIL)
				  (&PRIN2 (PATH/.STRING (CAR TRAIL))
					  NIL))))
		  (STORALT (LIST 'ALTCONJ
				 TEMP
				 T
				 (PATH/.STRING (CAR TRAIL))
				 *ACFS
				 TRAIL)
			   NIL)))))
	      (REVERSE TAILS))
	     (COND
	      (PREFERRED
	       (COND
		(TRACE (TRACER PAUSEFLAG
			       (&PRIN1 'PREFERRED/ AT/  NIL)
			       (&PRIN2 (PATH/.STRING (CAR PREFERRED))
				       NIL))))
	       (STORALT (LIST 'ALTCONJ
			      WEIGHT
			      T
			      (PATH/.STRING (CAR PREFERRED))
			      *ACFS
			      PREFERRED)
			NIL)))
	     (RETURN '*END))) 

(DEFUN CONJSCOPE (SCOPEWORD CONJ) 
       (OR (AND (EQ SCOPEWORD 'BOTH) (EQ CONJ 'AND))
	   (AND (EQ SCOPEWORD 'EITHER) (EQ CONJ 'OR)))) 

(DEFUN CONJSTARTS (PPATH STATES) 
       (COMMENT COMPUTES RESTART CONFIGURATIONS FOR SYSCONJ)
       (PROG (CONJSTARTS PREFERRED0 PREFERRED1 PREFERRED2 FIRSTFLAG
	      LASTPPATH QUITFLAG TEMPSTACK) 
	     (SETQ FIRSTFLAG T)
	L1   (COND
	      ((OR (NULL PPATH) QUITFLAG)
	       (RETURN
		(NCONC CONJSTARTS
		       (MAPCAN (FUNCTION (LAMBDA (X) 
						 (COND (X (LIST X))
						       (T NIL))))
			       (LIST PREFERRED2
				     PREFERRED1
				     PREFERRED0)))))
	      ((SETQ LASTPPATH (CDR (LASTELT PPATH))) (GO L3))
	      (T (SETQ TEMPSTACK (PPATH/.STACK PPATH))))
	L2   (COND ((OR (NULL TEMPSTACK)
			(MEMQ (CAAR TEMPSTACK)
			      '(SYSCONJ SYSCONJ*)))
		    (SETQ QUITFLAG T)
		    (SETQ LASTPPATH NIL)
		    (GO L3))
		   ((NULL (SETQ LASTPPATH
				(STACKELT/.PPATH (CAR TEMPSTACK))))
		    (SETQ TEMPSTACK (CDR TEMPSTACK))
		    (GO L2)))
	L3   (COND ((OR (EQ (ARC/.TYPE (PPATH/.ARC LASTPPATH))
			    'JUMP)
			(AND FIRSTFLAG (NULL (LASTELT PPATH))))
		    (GO L4))
		   (FIRSTFLAG (SETQ FIRSTFLAG NIL) (GO L4)))
	     (COND
	      ((OR (NULL STATES) (MEMQ (PPATH/.STATE PPATH) STATES))
	       (COND ((AND (NULL PREFERRED0)
			   (CONJSCOPE (CAR (PPATH/.STRING LASTPPATH))
				      *))
		      (SETQ PREFERRED0 PPATH))
		     ((AND (NULL PREFERRED1)
			   (EQ (CAR (PPATH/.STRING PPATH))
			       (CADR STRING)))
		      (SETQ PREFERRED1 PPATH))
		     ((AND (NULL PREFERRED2)
			   (OR (NULL (LASTELT PPATH))
			       (NULL LASTPPATH)))
		      (SETQ PREFERRED2 PPATH))
		     (T (SETQ CONJSTARTS (CONS PPATH CONJSTARTS))))))
	L4   (SETQ PPATH LASTPPATH)
	     (GO L1))) 						       ;*** CONVERTING EQ WITH NUMERIC ARG TO =

(DEFUN CONSTITUENTS (NODE) 
       (COMMENT COMPUTES LIST OF CONSTITUENTS OF A NODE IN A TREE)
       (COND ((= PARENS 2.) (CADR NODE)) (T (CDR NODE)))) 

(DEFUN DETOUR NIL 
       (PROG (LOC LOCW MINLOC MINW VAL) 
	     (WHILE (AND ALTS (NULL (CAR ALTS)))
		    (SETQ ALTS (CDR ALTS)))
	     (COND ((NULL (SETQ MINLOC (SETQ LOC ALTS)))
		    (RETURN NIL)))
	     (SETQ VAL (CAR MINLOC))
	     (SETQ MINW (MAX WEIGHT (ALT/.WEIGHT (CDAR ALTS))))
	L1   (COND ((NULL LOC)
		    (SETQ OLDALTS (CONS (CAR MINLOC) OLDALTS))
		    (*RPLACA MINLOC NIL)
		    (RETURN VAL))
		   ((NULL (CAR LOC)) NIL)
		   ((EQ (SETQ LOCW (ALT/.WEIGHT (CDAR LOC))) WEIGHT)
		    (COND (VAL (SETQ OLDALTS (CONS VAL OLDALTS))
			       (*RPLACA MINLOC NIL)
			       (RETURN VAL))
			  (T (SETQ VAL (CAR LOC))
			     (SETQ OLDALTS (CONS (CAR LOC) OLDALTS))
			     (*RPLACA LOC NIL)
			     (RETURN VAL))))
		   ((LESSP LOCW MINW)
		    (SETQ MINW LOCW)
		    (SETQ MINLOC LOC)
		    (SETQ VAL (CAR MINLOC))))
	     (SETQ LOC (CDR LOC))
	     (GO L1))) 

(DEFUN DICTCHECK (LEX CAT) 
       (PROG (DICTFORM) 
	     (OR (NOT (SYMBOLP LEX))
		 (DICTFETCHED LEX)
		 (DICTFETCH LEX))
	     (COND ((NULL (SETQ DICTFORM (AND (SYMBOLP LEX)
					      (GET LEX CAT)))) 
		    (RETURN NIL))
		   ((ATOM DICTFORM) (GO L1))
		   ((ATOM (CAR DICTFORM)) (RETURN (LIST DICTFORM)))
		   (T (RETURN DICTFORM)))
	L1   (COND ((EQ CAT 'N)
		    (RETURN (LIST (SELECTQ DICTFORM
					   ((REG -S -ES -IES IRR MASS)
					    (CONS LEX
						  '((NUMBER SG))))
					   (OTHERWISE 
					    (CONS DICTFORM
						 '((NUMBER SG))))))))
		   ((EQ CAT 'V)
		    (RETURN (LIST (CONS LEX
					'((TNS PRESENT)
					  (PNCODE X3SG)
					  (UNTENSED))))))
		   ((EQ CAT 'ADJ) (RETURN (LIST (LIST LEX))))
		   ((EQ DICTFORM '*)
		    (RETURN (LIST (LIST LEX))))
		   (T (RETURN (LIST (LIST DICTFORM))))))) 

(DEFUN FORCE FEXPR (*ARGS*) 
       ((LAMBDA (FORM) (COND ((FORCER FORM T)
			      (&PRIN1 'FORCING:/  NIL)
			      (&PRINT FORM NIL)
			      T)
			     (T NIL)))
	(CAR *ARGS*))) 

(DEFUN FORCER (FORM FLAG) 
       (COMMENT FUNCTION FOR FORCING CONDITIONS ON ARCS IN ASSIST)
       (COND ((OR (ATOM FORM)
		  (MEMQ (CAR FORM) '(GETR SETR SENDR)))
	      (EVAL FORM))
	     (T (SELECTQ (CAR FORM)
			 (AND (SETQ FORM (CDR FORM))
			      (WHILE (AND FORM
					  (FORCER (CAR FORM) FLAG))
				     (SETQ FORM (CDR FORM)))
			      (COND (FORM NIL) (T T)))
			 (OR (SETQ FORM (CDR FORM))
			     (WHILE (AND FORM
					 (NOT (FORCER (CAR FORM)
						      FLAG)))
				    (SETQ FORM (CDR FORM)))
			     (COND (FORM T) (T NIL)))
			 (NOT (NOT (FORCER (CADR FORM) (NOT FLAG))))
			 (OTHERWISE (PROGN (EVAL FORM) FLAG)))))) 

(DEFUN HOLDSCAN (HLIST CAT TST) 
       (COMMENT SCANS HOLD LIST FOR ELEMENT OF TYPE CAT WHICH MEETS
		CONDITION TST)
       (PROG (HOLDELT * FEATURES) 
	L1   (SETQ * (CAR (SETQ HOLDELT (CAR HLIST))))
	     (SETQ FEATURES (CDR HOLDELT))
	     (COND ((AND * (EQ (CAR *) CAT) (EVAL TST))
		    (RETURN HOLDELT))
		   ((SETQ HLIST (CDR HLIST)) (GO L1))
		   (T (RETURN NIL))))) 

(DEFUN LEXIC (ALTS) 
       (COMMENT PERFORMS LEXICAL ANALYSIS FOR PARSER)
       (PROG (TEMP STRINGPOS) 
	     (SETQ STRINGPOS STRING)
	     (COND (ALTS (GO ALT))
		   ((SETQ ALTS (GETLEX STRING)) (GO ALT)))
	L0   (SETQ ALTS (LEXPAIRS STRINGPOS))
	     (PUTLEX STRINGPOS ALTS)
	     (MAPC (FUNCTION BACKLEX) ALTS)
	ALT  (SETQ STRING (CAR ALTS))
	     (SETQ LEX (CAR STRING))
	     (RETURN (CDR ALTS)))) 

(DEFUN LONGBLOCK NIL 
       (COMMENT SELECTS BLOCKED CONFIGURATION WHICH GOT FARTHEST
		THROUGH THE STRING -- USED IN ASSIST)
       (PROG (LOC TEMP MINL MINLOC) 
	     (WHILE (AND BLOCKS (NULL (CAR BLOCKS)))
		    (SETQ BLOCKS (CDR BLOCKS)))
	     (COND ((NULL BLOCKS) (RETURN NIL)))
	     (SETQ MINL (LENGTH (CAAR BLOCKS)))
	     (SETQ MINLOC (SETQ LOC BLOCKS))
	     (WHILE LOC
		    (COND ((LESSP (SETQ TEMP (LENGTH (CAAR LOC)))
				  MINL)
			   (SETQ MINL TEMP)
			   (SETQ MINLOC LOC)))
		    (SETQ LOC (CDR LOC)))
	     (SETQ TEMP (CAR MINLOC))
	     (*RPLACA MINLOC NIL)
	     (RETURN TEMP))) 

(DEFUN MEMBSTACK (PTR STACK) 
       (PROG NIL 
	L1   (COND ((EQ PTR (CADDDR (CAR STACK))) (RETURN T))
		   ((SETQ STACK (CDR STACK)) (GO L1))
		   (T (RETURN NIL))))) 				       ;*** LAMBDA-IFYING MULTI-ARG FUNCTION IN A MAP
								       ;/#4000 *** LAMBDA-IFYING MULTI-ARG FUNCTION IN A
								       ;MAP /#4000

(DEFUN PARSER (STRING MODE ALTS) 
       (PROG (*SPOP ACF/# ACFS ACTIONS ALT ALTFLAG ARCS HOLD IB LEX
	      LEXMODE REGS SPLIT/# STACK STARTCLOCK STATE T1 T3 TEMP
	      TRAIL TRAILV TRAILARC TRAILLABEL TRAILTYPE TRAILVAL
	      VALUES WEIGHT WFSL WFST3) 
	     (SETQ STARTCLOCK (CLOCK 2.))
	     (SETQ BLOCKS NIL)
	     (SETQ WEIGHT 1.)
	     (COND (ALTS (SETQ ALTFLAG T) (GO ALT)))
	     (SETQ WFST NIL)
	     (SETQ ACFS (LIST (LIST START NIL NIL NIL NIL)))
	L1   (COND (LEXMODE (GO LEX))
		   ((NULL STRING) (SETQ LEX NIL) (GO END))
		   ((ATOM STRING)
		    (SETQ STRING (LIST '/. STRING))
		    (COMMENT COMPENSATES FOR (A B C . D) INPUT)))
	     (SETQ TEMP NIL)
	LEX  (COND
	      (LEXMODE (SETQ STRING (PATH/.STRING (CAR TRAIL)))
		       (SETQ LEX (CAR STRING))
		       (SETQ TRAILARC (PATH/.ARC (CAR TRAIL)))
		       (SETQ TRAILTYPE (ARC/.TYPE TRAILARC))
		       (SETQ TRAILLABEL (ARC/.LABEL TRAILARC))
		       (SETQ TRAILVAL (PATH/.VAL (CAR TRAIL))))
	      ((SETQ TEMP (LEXIC TEMP))
	       (STORALT (LIST 'ALTLEX WEIGHT TEMP ACFS) NIL))
	      ((NOT (SYMBOLP LEX)))			;SENT MAY HAVE NUMBERS, LIST AS WORDS
	      ((NULL (PLIST LEX))
	       (SETQ 
		BLOCKS
		(APPEND
		 (MAPCAR 
		  (FUNCTION (LAMBDA (CONFIG) 
				    (CONS STRING
					  (CONS WEIGHT CONFIG))))
		  ACFS)
		 BLOCKS))
	       (COND (TRACE (TRACER PAUSEFLAG
				    (&PRIN1 'UNDEFINED/ LEX:/ 
					    NIL)
				    (&PRIN1 LEX NIL))))
	       (GO RETURN)))
	     (COND (TRACE (&TERPRI NIL)
			  (&PRIN1 'STRING/ =/  NIL)
			  (&PRINT STRING NIL)))
	     (COND ((CDR ACFS) (SETQ ACF/# 0.)) (T (SETQ ACF/# NIL)))
	     (COND ((SETQ ACFS
			  (MAPCAN (FUNCTION (LAMBDA (*MAP*) 
						    (STEP *MAP* NIL)))
				  ACFS))
		    (COND ((NOT LEXMODE)
			   (SETQ STRING (CDR STRING))
			   (GO L1))
			  ((SETQ TRAIL (CDR TRAIL)) (GO LEX))))
		   (MODE (GO ALT))
		   (T (&PRIN1 'NO/ ACTIVE/ PATHS T)
		      (&TERPRI T)
		      (&PRIN1 'STRING/ =/  T)
		      (&PRINT STRING T)
		      (GO HELP)))
	ALT  (SETQ LEXMODE NIL)
	     (COND ((SETQ TEMP (DETOUR))
		    (SETQ ALT (CDR TEMP))
		    (COND (TRACE (TRACER PAUSEFLAG
					 (&TERPRI NIL)
					 (&PRIN1 'STARTING/ 
						 NIL)
					 (&PRIN1 (CAR ALT) NIL)
					 (&PRIN1 '/ ALTERNATIVE/ 
						 NIL)
					 (&PRIN1 (CAR TEMP) NIL))))
		    (SELECTQ (CAR ALT)
			     ((ALTARC ALTCAT) (GO ALTARC))
			     (ALTWFS (GO ALTWFS))
			     (ALTLEX (GO ALTLEX))
			     ((ALTCONJ ALTCONJ*) (GO ALTCONJ))
			     (OTHERWISE 
				(PROGN (&PRINT 'UNDEFINED/ ALTERNATIVE
					    NIL)
				    (GO HELP)))))
		   (VALUES (GO RETURN))
		   ((AND (NOT ALTFLAG) BLOCKS)
		    (SELECTQ (ASSIST)
			     (L1 (GO L1))
			     (LEX (GO LEX))
			     (ALT (GO ALT))
			     (END (GO END))
			     (OTHERWISE (GO RETURN))))
		   ((MEMQ MODE '(T NIL))
		    (&PRIN1 'NO/ MORE/ ALTERNATIVES T)
		    (&TERPRI T)
		    (GO RETURN)))
	ALTCONJ
	     (SPREADQ (WEIGHT LEXMODE STRING ACFS TRAIL) (CDR ALT))
	     (GO L1)
	ALTLEX
	     (SPREADQ (WEIGHT TEMP ACFS) (CDR ALT))
	     (GO LEX)
	ALTARC
	     (COND (TRACE (&PRIN1 'STRING/ =/  NIL)
			  (&PRINT (ALT/.STRING ALT) NIL)))
	ALTARC1
	     (SETQ ACF/# NIL)
	     (COND ((NULL (SETQ ACFS (STEP NIL ALT)))
		    (COND ((EQ MODE 'ALL) (GO ALT))
			  (VALUES (GO RETURN))
			  (T (GO ALT))))
		   (LEXMODE (SETQ TRAIL (CDR TRAIL)) (GO LEX))
		   (STRING (SETQ STRING (CDR STRING)) (GO L1))
		   ((EQ MODE 'ALL) (GO ALT))
		   (VALUES (GO RETURN))
		   (T (GO ALT)))
	ALTWFS
	     (SPREADQ (WEIGHT WFSL WFST3 STATE ACTIONS) (CDR ALT))
	     (SETQ HOLD (KTH ALT 9.))
	     (COND
	      ((AND (CDR WFSL)
		    (SETQ T1
			  (SCAN (CDR WFSL)
				(FUNCTION (LAMBDA (X) 
						  (SUBSET (CAAR X)
							  HOLD))))))
	       (SETQ STRING (CADDAR T1))
	       (SETQ ARCS
		     (LIST (CONS 'DO
				 (CONS (LIST 'SETQQ
					     '*
					     (CADAR T1))
				       (CONS '(SETQ FEATURES NIL)
					     (CONS '(SETQ NOMOVEFLAG
							  T)
						   ACTIONS))))))
	       (*RPLACA (CDDR ALT) T1)
	       (SETQ ALT
		     (CONS STATE
			   (CONS ARCS
				 (CONS (CAR STRING)
				       (CONS STRING (*NTH ALT 7.))))))
	       (STORALT ALT NIL)
	       (GO ALTARC1))
	      ((AND
		(SETQ T1 (CADR WFST3))
		(SETQ 
		 T3
		 (SCAN
		  (CDR ALTS)
		  (FUNCTION
		   (LAMBDA (X) 
			   (MEMBSTACK WFST3 (ALTSTACK (CAR X))))))))
	       (SETQ ALT (CAR T3))
	       (*RPLACA T3 NIL)
	       (SETQ ALTS (CONS ALT ALTS))
	       (GO ALT))
	      (T1 (*RPLACA (CDR WFST3) NIL) (GO ALT))
	      (T (GO ALT)))
	HELP (COND ((HELPER P* HELPER) (GO L1)) (T (GO ALT)))
	END  (COND (TRACE (&TERPRI NIL)
			  (&PRIN1 'STRING/ =/  NIL)
			  (&PRINT STRING NIL)))
	     (COND ((CDR ACFS) (SETQ ACF/# 0.)) (T (SETQ ACF/# NIL)))
	     (SETQ ACFS (MAPCAN 
			 (FUNCTION (LAMBDA (*MAP*) (STEP *MAP* NIL)))
			 ACFS))
	     (COND ((EQ MODE 'ALL) (GO ALT))
		   (VALUES (GO RETURN))
		   (MODE (GO ALT))
		   (T (&PRIN1 'NO/ ACTIVE/ PATHS T)
		      (&TERPRI T)
		      (&PRIN1 'STRING/ =/  T)
		      (&PRINT STRING T)
		      (GO HELP)))
	RETURN
	     (RETURN (LIST VALUES ALTS)))) 

(DEFUN POP (POPVAL POPFEATURES) 
       (PROG (ACTIONS NOMOVEFLAG WFST3 *HOLD *TRAIL) 
	     (COND ((AND (EQ (CAAAR HOLD) 'MARK)
			 (EQ (CDAAR HOLD) STRING))
		    (SETQ HOLD (CDR HOLD))))
	     (COND ((CAR HOLD) (RETURN '*END)))
	     (COND (TRACE (TRACER PAUSEFLAG
				  (&PRIN1 'ABOUT/ TO/ POP
					  NIL))))
	     (SETQ * POPVAL)
	     (SETQ FEATURES POPFEATURES)
	     (COND
	      ((NULL STACK)
	       (COND
		((NULL STRING)
		 (COND (TRACE (TRACER PAUSEFLAG
				      (&PRIN1 'SUCCESS NIL))))
		 (SETQ VALUES (NCONC VALUES (LIST *)))
		 (SETQ SUCCESSFLAG T)
		 (RETURN '*END))
		(MODE (RETURN '*END))
		(T
		 (&PRIN1 'ATTEMPT/ TO/ POP/ EMPTY/ STACK/ AT/ STATE/ 
			 NIL)
		 (&PRINT STATE NIL)
		 (&PRINT STRING NIL)
		 (RETURN '*HELP)))))
	     (SETQ VAL (CONS (CONS * FEATURES) (CONS ARC ACONFIG)))
	     (SPREADQ (STATE REGS ACTIONS WFST4 *HOLD PPATH)
		      (CAR STACK))
	     (COND
	      (WFSS (COND (TRACE (TRACER PAUSEFLAG
					 (&PRIN1 'ABOUT/ TO/ PUT/ 
						 NIL)
					 (&PRIN1 (CAAR VAL) NIL)
					 (&PRIN1 '/ ON/ WFST
						 NIL))))
		    (NCONC WFST4
			   (LIST (LIST (SDIFF *HOLD (CDR HOLD))
				       VAL
				       STRING)))))
	     (SETQ STACK (CDR STACK))
	     (SETQ HOLD (CDR HOLD))
	     (SETQ NOMOVEFLAG T)
	     (SETQ CONFIG (CDDR (SETQ ACONFIG (CDR PPATH))))
	     (RETURN (ACT ACTIONS NIL)))) 			       ;*** CONVERTING EQ WITH NUMERIC ARG TO =

(DEFUN POPCONJ NIL 
       (COND (TRACE (TRACER PAUSEFLAG
			    (&PRIN1 'COMPLETING/ CONJ NIL))))
       (COND (STACK (SETQ HOLD (CONS NIL HOLD))))
       (COND
	((NOT (EQUAL HOLD (PPATH/.HOLD (GETR PPATH2 NIL))))
	 (COND (TRACE (TRACER PAUSEFLAG
			      (&PRIN1 'INCOMPATIBLE/ HOLD/ LISTS
				      NIL))))
	 '*END)
	(T
	 (STORALT
	  (LIST 'ALTARC
		NIL
		(SUBST (COND ((= PARENS 1.)
			      (CONS (GETR NODE NIL)
				    (CONS (GETR CONJ NIL)
					  (CONS * (GETR BODY NIL)))))
			     (T (LIST (GETR NODE NIL)
				      (CONS (GETR CONJ NIL)
					    (CONS *
						  (GETR BODY NIL))))))
		       'POPFORM
		       '((POP 'POPFORM T)))
		(PPATH/.STRING (GETR PPATH2 NIL))
		WEIGHT
		STATE
		STACK
		REGS
		HOLD
		PATH)
	  NIL)
	 '*END))) 

(DEFUN PPATH/.BACK (PPATH) 
       (COND ((CDR (LASTELT PPATH)))
	     (T (STACKELT/.PPATH (CAR (PPATH/.STACK PPATH)))))) 

(DEFUN PPATH/.HOLD (PPATH) (KTH PPATH 7.)) 

(DEFUN PPATH/.REGS (PPATH) (KTH PPATH 6.)) 

(DEFUN PPATH/.STACK (PPATH) (KTH PPATH 5.)) 

(DEFUN PUSH FEXPR (*ARGS*) 
       ((LAMBDA (PS) 
	 (PROG (T1 T2 T3) 
	       (COND (TRACE (TRACER PAUSEFLAG
				    (&PRIN1 'ABOUT/ TO/ PUSH
					    NIL))))
	       (COND
		((AND LEXMODE (NULL SREGS))
		 (COND (TRACE (TRACER PAUSEFLAG
				      (&PRIN1 'TAKING/  NIL)
				      (&PRIN2 PS NIL)
				      (&PRIN1 '/ FROM/ TRAIL
					      NIL))))
		 (SETQ TEMP (CAR TRAILVAL))
		 (SETQ * (CAR TEMP))
		 (SETQ FEATURES (CDR TEMP))
		 (RETURN (ACT ACTIONS NIL)))
		(LEXMODE
		 (COND (TRACE (TRACER PAUSEFLAG
				      (&PRIN1 'ABOUT/ TO/ REDO/ 
					      NIL)
				      (&PRIN2 PS NIL)
				      (&PRIN1 '/ FROM/ TRAIL
					      NIL))))
		 (SETQ TEMP (REDO (TRAIL TRAILVAL) SREGS))
		 (COND ((NULL TEMP) (RETURN '*END)))
		 (SETQ * (CAR TEMP))
		 (SETQ FEATURES (CDR TEMP))
		 (RETURN (ACT ACTIONS NIL))))
	       (COND
		((NULL WFSS) (GO PUSH))
		((AND
		  (SETQ T1
			(ASSOC SREGS
			       (CDR (ASSQ PS
					  (CDR (ASSQ STRING WFST))))))
		  (SETQ T2
			(SCAN (CDDR T1)
			      (FUNCTION (LAMBDA (X) (SUBSET (CAAR X)
							    HOLD))))))
		 (COND ((OR (CADR T1) (CDR T2))
			(STORALT (LIST 'ALTWFS
				       WEIGHT
				       T2
				       T1
				       STATE
				       ACTIONS
				       STACK
				       REGS
				       HOLD
				       PATH
				       TRAIL)
				 NIL)))
		 (COND (TRACE (TRACER PAUSEFLAG
				      (&PRIN1 'FOUND/  NIL)
				      (&PRIN1 (CAAR (CADDAR T2)) NIL)
				      (&PRIN2 '/ IN/ WFST
					      NIL))))
		 (COND
		  (UCFS
		   (STORALT
		    (LIST
		     'ALTARC
		     WEIGHT
		     STATE
		     (LIST (CONS 'DO
				 (CONS (LIST 'SETQQ
					     'VAL
					     (CADAR T2))
				       (CONS (LIST 'SETQQ
						   '*
						   (CAAR VAL))
					     (CONS '(SETQ FEATURES
							  (CDAR VAL))
						   (CONS '(SETQ FLAG
								T)
							 ACTIONS))))))
		     (CADDR (CAR T2))
		     STACK
		     REGS
		     HOLD
		     PATH
		     TRAIL)
		    NIL)
		   (RETURN '*END))
		  (T (SETQ VAL (CADAR T2))
		     (SETQ * (CAAR VAL))
		     (SETQ FEATURES (CDAR VAL))
		     (SETQ STRING (CADDAR T2))
		     (SETQ LEX (CAR STRING))
		     (SETQ FLAG T)
		     (RETURN (ACT ACTIONS NIL)))))
		((AND T1 (NOT (CADR T1))) (RETURN '*END))
		((CADR T1)
		 (STORALT (LIST 'ALTWFS
				WEIGHT
				(LAST T1)
				T1
				STATE
				ACTIONS
				STACK
				REGS
				HOLD
				PATH
				TRAIL)
			  NIL)
		 (RETURN '*END))
		((NOT (SETQ T1 (ASSQ STRING WFST)))
		 (SETQ WFST
		       (NCONC WFST
			      (LIST (LIST STRING
					  (LIST PS
						(SETQ T3
						      (LIST SREGS
							    T))))))))
		((NOT (SETQ T2 (ASSQ PS (CDR T1))))
		 (NCONC T1 (LIST (LIST PS (SETQ T3 (LIST SREGS T))))))
		((NOT (SETQ T3 (ASSOC SREGS (CDR T2))))
		 (NCONC T2 (SETQ T3 (LIST (LIST SREGS T))))))
	  PUSH (SETQ STACK (CONS (LIST STATE
				       REGS
				       ACTIONS
				       T3
				       HOLD
				       (CONS ARC ACONFIG))
				 STACK))
	       (SETQ STATE PS)
	       (SETQ REGS SREGS)
	       (SETQ SREGS NIL)
	       (SETQ HOLD (CONS NIL HOLD))
	       (SETQ PATH NIL)
	       (SETQ CONFIG (LIST STATE STACK REGS HOLD PATH))
	       (SETQ ACONFIG (CONS STRING (CONS WEIGHT CONFIG)))
	       (RETURN '*L1)))
	(CAR *ARGS*))) 

(DEFUN REDO (TRAIL REGS) 
       (COMMENT REDOES A COMPUTATION FOLLOWING A TRAIL STARTING WITH
		NEW REGS)
       (PROG (PATH LEX VAL ARC ACTIONS SREGS TEMP * FEATURES STATE
	      STRING CONFIG VCFS ARCS NOMOVEFLAG) 
	     (COMMENT EXTRA PROG VARIABLES PROVIDE A SAFE
		      ENVIRONMENT IN WHICH TO EXECUTE TO AND JUMP
		      FUNCTIONS)
	L0   (COND ((NULL TRAIL) (RETURN NIL)))
	     (SETQ PATH (CAR TRAIL))
	     (SETQ VAL (PATH/.VAL PATH))
	     (SETQ STATE (PPATH/.STATE (CDR PATH)))
	     (SETQ STRING (PATH/.STRING PATH))
	     (SETQ LEX (CAR STRING))
	     (SETQ * LEX)
	     (SETQ ARC (PATH/.ARC PATH))
	     (SETQ ACTIONS (ARC/.ACTIONS ARC))
	     (COND ((MEMQ (CAR ARC) '(VIR CAT))
		    (SETQ * (CAR VAL))
		    (SETQ FEATURES (CDR VAL))))
	     (COND ((NOT (ARCTEST ARC)) (RETURN NIL)))
	     (SELECTQ
	      (CAR ARC)
	      ((POP SPOP)
	       (RETURN (SETQ VAL
			     (CONS (EVAL (POPARC/.FORM ARC))
				   (EVAL (POPARC/.FEATURES ARC))))))
	      (PUSH (WHILE (EQ (CAAR ACTIONS) '*)
			   (SETQ ACTIONS (CDR ACTIONS)))
		    (COND ((EQ (CAAR ACTIONS) '!)
			   (ACT (CDAR ACTIONS) T)
			   (SETQ ACTIONS (CDR ACTIONS))))
		    (WHILE (SENDACTP (CAR ACTIONS))
			   (EVAL (CAR ACTIONS))
			   (SETQ ACTIONS (CDR ACTIONS)))
		    (COND ((NULL SREGS) (SETQ TEMP (CAR VAL)))
			  ((SETQ TEMP (REDO (TRAIL VAL) SREGS)))
			  (T (RETURN NIL))))
	      (OTHERWISE (SETQ TEMP VAL)))
	     (COND (TEMP (SETQ * (CAR TEMP))
			 (SETQ FEATURES (CDR TEMP))))
	     (SETQ NOMOVEFLAG T)
	     (COMMENT KEEPS TO ARCS FROM CONSTRUCTING NEW CONFIGS
		      AND RETURNING *END)
	     (SELECTQ (ACT ACTIONS (EQ (CAR ARC) 'JUMP))
		      (*END (RETURN NIL))
		      ((*L0 *L1 *L2) (RETURN (REDO (CDR TRAIL) REGS)))
		      (NIL
		       (COND ((EQ (CAR ARC) 'JUMP)
			      (RETURN (REDO (CDR TRAIL) REGS)))))
		      (OTHERWISE NIL))
	     (COND ((AND PHELP (HELPER R* (HELP IN REDO))) (GO L0))
		   (T (RETURN NIL))))) 

(DEFUN SCANSTACK FEXPR (*ARGS*) 
       ((LAMBDA (TEST) 
		(COMMENT SCANS THE STACK FOR AN ENTRY THAT SATISFIES
			 TEST -- USED IN LIFTR AND GETR)
		(PROG (LOC STATE REGS ACTIONS) 
		      (COND ((NULL (SETQ LOC STACK)) (RETURN NIL)))
		 L0   (SPREADQ (STATE REGS ACTIONS) (CAR LOC))
		      (COND ((EVAL TEST) (RETURN LOC))
			    ((SETQ LOC (CDR LOC)) (GO L0))
			    (T (RETURN NIL)))))
	(CAR *ARGS*))) 

(DEFUN SENDACTP (ACTION) (MEMQ (CAR ACTION) '(SENDR SENDRQ))) 

(DEFUN SPOP (POPVAL POPFEATURES) 
       (PROG (SLEX SSTRING SSTATE SARCS TREGS TACONFIG LOC1 LOC2
	      PUSHSTATE CANDS CAND KLIST MODL TAGLIST *SPOP
	      SACONFIG) 
	     (SETQ *SPOP T)
	     (COND ((AND (EQ (CAAAR HOLD) 'MARK)
			 (EQ (CDAAR HOLD) STRING))
		    (SETQ HOLD (CDR HOLD))))
	     (COND ((NOT SMP) (RETURN (POP POPVAL POPFEATURES)))
		   ((CAR HOLD) (RETURN '*L2)))
	     (SETQ TACONFIG
		   (PPATH/.ACONFIG (STACKELT/.PPATH (CAR STACK))))
	     (SETQ 
	      LOC1
	      (SCAN
	       ALTS
	       (FUNCTION (LAMBDA (ALTS) 
				 (AND (EQ (CAAR ALTS) 'ALTARC)
				      (EQ (ALTARC/.ACONFIG (CAR ALTS))
					  TACONFIG))))))
	     (COND ((NULL LOC1) (RETURN (POP POPVAL POPFEATURES))))
	     (SETQ 
	      LOC2
	      (SCAN
	       (ALTARC/.ARCS (CAR LOC1))
	       (FUNCTION
		(LAMBDA (ARCS) (AND (MEMQ (ARC/.TYPE (CAR ARCS))
					  '(POP SPOP))
				    (EVAL (ARC/.TEST (CAR ARCS))))))))
	     (SETQ TREGS REGS)
	     (SETQ REGS (STACKELT/.REGS (CAR STACK)))
	     (SETQ SLEX LEX)
	     (SETQ SSTRING STRING)
	     (SETQ SSTATE STATE)
	     (SETQ SACONFIG ACONFIG)
	     (SETQ SARCS (CONS (CONS 'POP (CDR ARC)) ARCS))
	     (SETQ CANDS
		   (LIST (CONS (GETR HEAD NIL)
			       (CONS 'ALTARC
				     (CONS TRAIL
					   (CONS SARCS ACONFIG))))))
	     (SETQ 
	      PUSHSTATE
	      (ARC/.LABEL (PPATH/.ARC (STACKELT/.PPATH (CAR STACK)))))
	     (SPREADQ (TRAIL ARCS
			     STRING
			     WEIGHT
			     STATE
			     STACK
			     REGS
			     HOLD
			     PATH)
		      (CDAR LOC1))
	     (SETQ ARC (ARCPICK LOC1 LOC2))
	     (SELECTQ (CAR ARC)
		      (POP (POP (EVAL (POPARC/.FORM ARC))
				(EVAL (POPARC/.FEATURES ARC))))
		      (SPOP (SPOP (EVAL (POPARC/.FORM ARC))
				  (EVAL (POPARC/.FEATURES ARC))))
		      (OTHERWISE NIL))
	SMP2 (SETQ ARCS (EVAL STATE))
	     (SETQ * LEX)
	     (SETQ FEATURES NIL)
	     (COND
	      ((SETQ 
		ARC
		(CAR
		 (SCAN
		  ARCS
		  (FUNCTION
		   (LAMBDA (ARCS) 
			   (AND (EQ (ARC/.TYPE (CAR ARCS))
				    'PUSH)
				(EQ (ARC/.LABEL (CAR ARCS)) PUSHSTATE)
				(EVAL (ARC/.TEST (CAR ARCS)))))))))
	       (SETQ ARCS (KILL ARC ARCS))
	       (SETQ CANDS
		     (CONS (LIST (GETR HEAD NIL)
				 'ALTARC
				 STRAIL
				 SARCS
				 SSTRING
				 WEIGHT
				 SSTATE
				 (CONS (LIST STATE
					     REGS
					     (ARC/.ACTIONS ARC)
					     NIL
					     NIL
					     NIL)
				       STACK)
				 TREGS
				 (CONS NIL HOLD)
				 PATH)
			   CANDS))))
	     (COND
	      ((AND
		STACK
		(NULL (CAR HOLD))
		(SETQ 
		 ARC
		 (CAR
		  (SCAN
		   ARCS
		   (FUNCTION
		    (LAMBDA (ARCS) 
			    (AND (MEMQ (ARC/.TYPE (CAR ARCS))
				       '(POP SPOP))
				 (EVAL (ARC/.TEST (CAR ARCS))))))))))
	       (SETQ ARCS (KILL ARC ARCS))
	       (STORALT (LIST 'ALTARC
			      TRAIL
			      ARCS
			      STRING
			      WEIGHT
			      STATE
			      STACK
			      REGS
			      HOLD
			      PATH)
			NIL)
	       (SELECTQ (CAR ARC)
			(POP (POP (EVAL (CADR ARC)) NIL))
			(SPOP (SPOP (EVAL (CADR ARC)) NIL))
			(OTHERWISE NIL))
	       (GO SMP2))
	      (ARCS (STORALT (LIST 'ALTARC
				   TRAIL
				   ARCS
				   STRING
				   WEIGHT
				   STATE
				   STACK
				   REGS
				   HOLD
				   PATH)
			     NIL)))
	     (SETQ MODL (LIST POPVAL))
	     (MAPC 
	      (FUNCTION
	       (LAMBDA (X) 
		(COND
		 ((SCAN
		   (GET (CAR X) 'FMODS)
		   (FUNCTION
		    (LAMBDA (Y) 
			    (CCHECK Y (TMATCH MODL (LIST (CAR Y)))))))
		  (STORALT (CDR X) NIL))
		 (T (SETQ KLIST (CONS X KLIST))))))
	      CANDS)
	     (COND
	      ((NOT (SETQ CANDS KLIST)) (RETURN '*END))
	      ((OR
		(SETQ 
		 KLIST
		 (SCAN
		  CANDS
		  (FUNCTION
		   (LAMBDA (X) 
		    (SCAN
		     (GET (CAAR X) 'DMODS)
		     (FUNCTION
		      (LAMBDA (Y) 
			      (CCHECK (CAR Y)
				      (TMATCH MODL
					      (LIST (CAAR Y)))))))))))
		(SETQ 
		 KLIST
		 (SCAN
		  CANDS
		  (FUNCTION
		   (LAMBDA (X) 
		    (SCAN
		     (GET (CAAR X) 'PMODS)
		     (FUNCTION
		      (LAMBDA (Y) 
			      (CCHECK (CAR Y)
				      (TMATCH MODL
					      (LIST (CAAR Y)))))))))))
		(SETQ KLIST CANDS))
	       (COND (TRACE (TRACER PAUSEFLAG
				    (&PRIN1 '(*) NIL))))
	       (SETQ CAND (CAR KLIST))
	       (MAPC 
		(FUNCTION (LAMBDA (X) (COND ((NOT (EQ X CAND))
					     (STORALT (CDR X) NIL)))))
		CANDS)
	       (SPREADQ (WEIGHT STATE
				ARCS
				LEX
				STRING
				STACK
				REGS
				HOLD
				PATH
				TRAIL)
			(CDDR CAND))
	       (RETURN (POP (EVAL (POPARC/.FORM (CAR ARCS)))
			    (EVAL (POPARC/.FEATURES (CAR ARCS))))))))) 

(DEFUN STEP (CONFIG ALT) 
       (PROG (UCFS SPLITS SPLIT/# VCFS NOMOVEFLAG TEMP TMP FEATURES
	      ACTIONS ACT STATE STACK * REGS SREGS ARC ARCS HOLD IB
	      PATH VAL ACONFIG PPATH SUCCESSFLAG) 
	     (COND (ALT (COND (TRACE (TRACER PAUSEFLAG
					     (&PRIN1 'STATE/ =/ 
						     NIL)
					     (&PRIN1 (ALT/.STATE ALT)
						     NIL))))
			(GO ALT)))
	     (SETQ ACONFIG (CONS STRING (CONS WEIGHT CONFIG)))
	     (COND (ACF/# (SETQ ACF/# (ADD1 ACF/#))))
	L0   (SPREADQ (STATE STACK REGS HOLD PATH) CONFIG)
	L1   (COND ((AND TRACE (NOT (EQ (CAR ARC) 'JUMP)))
		    (TRACER PAUSEFLAG
			    (&PRIN1 'ENTERING/ STATE/  NIL)
			    (&PRIN2 STATE NIL))))
	     (COND ((AND MAXTIME
			 (GREATERP (DIFFERENCE (CLOCK 2.) STARTCLOCK)
				   MAXTIME))
		    (SETQ BLOCKS (CONS ACONFIG BLOCKS))
		    (&PRIN1 'MAXTIME/ EXCEEDED T)
		    (&TERPRI T)
		    (&PRIN1 'ALTS/ AT/  T)
		    (&PRINT (LOC ALTS) T)
		    (SETQ ALTS NIL)
		    (RETURN NIL)))
	     (COND ((SETQ TEMP (AND (SYMBOLP LEX) (GET LEX 'LEXARCS)))
		    (SETQ ARCS (EVAL TEMP)))
		   ((NULL (SETQ ARCS (GETV STATE)))
		    (&PRIN1 'UNDEFINED/ STATE/  T)
		    (&PRINT STATE T)
		    (GO HELP)))
	     (COND
	      ((AND
		SYSCONJ
		(CAT CONJ)
		(NOT LEXMODE)
		(NOT
		 (SCAN
		  ARCS
		  (FUNCTION (LAMBDA (ARCS) 
				    (AND (EQ (ARC/.TYPE (CAR ARCS))
					     'CAT)
					 (EQ (ARC/.LABEL (CAR ARCS))
					     'CONJ)))))))
	       (SETQ ARCS '((CAT CONJ T (SYSCONJ NIL))))
	       (COND (TRACE (TRACER PAUSEFLAG
				    (&PRIN1 'INVOKING/ SYSCONJ
					    NIL)))))
	      ((AND (EQ MODE 'SPLIT) (CDR ARCS))
	       (COND (TRACE (TRACER PAUSEFLAG
				    (&PRIN1 'SPLIT NIL))))
	       (SETQ SPLITS
		     (CONS ARCS (CONS ACONFIG (CONS NIL SPLITS))))
	       (SETQ ARCS NIL)
	       (COND ((NULL SPLIT/#) (SETQ SPLIT/# 1.)))
	       (GO END)))
	L2   (COND (ARCS (SETQ ARC (CAR ARCS)) (SETQ ARCS (CDR ARCS)))
		   ((OR ALT VCFS SPLITS UCFS SUCCESSFLAG) (GO END))
		   (MODE (COND (TRACE (TRACER PAUSEFLAG
					      (&PRIN1 'BLOCKED
						      NIL))))
			 (SETQ BLOCKS (CONS ACONFIG BLOCKS))
			 (COND ((AND MAXBLOCKS
				     (NOT (LESSP (LENGTH BLOCKS)
						 MAXBLOCKS)))
				(&PRIN1 'MAXBLOCKS/ EXCEEDED T)
				(&TERPRI T)
				(&PRIN1 'LAST/ ALT/ WAS/  T)
				(&PRINT (CAAR OLDALTS) T)
				(SETQ OLDALTS (NCONC ALTS OLDALTS))
				(SETQ ALTS NIL)
				(RETURN NIL)))
			 (GO END))
		   (T (&PRIN1 'DEAD/ END/ AT/ STATE/  T)
		      (&PRINT STATE T)
		      (&PRINT STRING T)
		      (GO HELP)))
	L3   (SETQ * LEX)
	     (SETQ FEATURES NIL)
	     (SETQ SREGS NIL)
	     (SETQ NOMOVEFLAG NIL)
	     (SELECTQ
	      (ARC/.TYPE ARC)
	      (CAT (COND ((NOT LEXMODE)
			  (SETQ TEMP (CATCHECK (ARC/.LABEL ARC) T)))
			 ((NOT (EQ TRAILTYPE 'CAT)) (GO L2))
			 ((EQ (ARC/.LABEL ARC) TRAILLABEL)
			  (SETQ TEMP TRAILVAL))
			 (T (GO L2)))
		   (COND (TEMP (SETQ FEATURES (CDR TEMP))
			       (SETQ * (CAR TEMP))
			       (SETQ VAL TEMP)
			       (GO TST))
			 (T (GO L2))))
	      (PUSH
	       (COND (LEXMODE (COND ((NOT (AND (EQ TRAILTYPE
						   'PUSH)
					       (EQ TRAILLABEL
						   (ARC/.LABEL ARC))))
				     (GO L2)))))
	       (COND
		((ARCTEST ARC)
		 (ALTARCGEN)
		 (SETQ ACTIONS (ARC/.ACTIONS ARC))
		 (WHILE (EQ (CAAR ACTIONS) '*)
			(SETQ ACTIONS (CDR ACTIONS)))
		 (COND ((EQ (CAAR ACTIONS) '!)
			(SELECTQ (ACT (CDAR ACTIONS) T)
				 (*L0 (GO L0))
				 (*L1 (GO L1))
				 (*L2 (GO L2))
				 (*END (GO END))
				 (*HELP (GO HELP))
				 (OTHERWISE (SETQ ACTIONS (CDR ACTIONS))))))
		 (WHILE (SENDACTP (CAR ACTIONS))
			(EVAL (CAR ACTIONS))
			(SETQ ACTIONS (CDR ACTIONS)))
		 (SELECTQ (APPLY* (FUNCTION PUSH) (CADR ARC))
			  (*L0 (GO L0))
			  (*L1 (GO L1))
			  (*L2 (GO L2))
			  (*END (GO END))
			  (OTHERWISE 
			   (PROGN (&PRIN1 'ILLEGAL/ RETURN/ FROM/ PUSH
					 T)
				 (&TERPRI T)
				 (GO HELP)))))
		(T (GO L2))))
	      (POP (COND ((AND LEXMODE
			       (NOT (MEMQ TRAILTYPE
					  '(POP SPOP))))
			  (GO L2)))
		   (COND ((ARCTEST ARC)
			  (COND ((AND (EQ (CAAAR HOLD) 'MARK)
				      (EQ (CDAAR HOLD) STRING))
				 (SETQ HOLD (CDR HOLD))))
			  (COND ((OR (CAR HOLD)
				     (AND (NULL STACK) STRING))
				 (GO L2)))
			  (ALTARCGEN)
			  (SELECTQ (POP (EVAL (POPARC/.FORM ARC))
					(EVAL (POPARC/.FEATURES ARC)))
				   (*L0 (GO L0))
				   (*L1 (GO L1))
				   (*L2 (GO L2))
				   (*END (GO END))
				   (*HELP (GO HELP))
				   (OTHERWISE 
					  (PROGN (&PRIN1 '(*) T)
					  (&TERPRI T)
					  (GO HELP))))
			  (GO ACT))
			 (T (GO L2))))
	      (SPOP
	       (COND ((AND LEXMODE
			   (NOT (MEMQ TRAILTYPE '(POP SPOP))))
		      (GO L2)))
	       (COND
		((ARCTEST ARC)
		 (COND ((AND (EQ (CAAAR HOLD) 'MARK)
			     (EQ (CDAAR HOLD) STRING))
			(SETQ HOLD (CDR HOLD))))
		 (COND ((OR (CAR HOLD) (AND (NULL STACK) STRING))
			(GO L2)))
		 (ALTARCGEN)
		 (COND (TRACE (TRACER PAUSEFLAG
				      (&PRIN1 'ABOUT/ TO/ SPOP
					      NIL))))
		 (SELECTQ
		  (SPOP (EVAL (POPARC/.FORM ARC))
			(EVAL (POPARC/.FEATURES ARC)))
		  (*L0 (GO L0))
		  (*L1 (GO L1))
		  (*L2 (GO L2))
		  (*END (GO END))
		  (*HELP (GO HELP))
		  (OTHERWISE 
		     (PROGN (&PRIN1 'UNDEFINED/ RETURN/ FROM/ SPOP
				 T)
			 (&TERPRI T)
			 (GO HELP)))))
		(T (GO L2))))
	      (JUMP
	       (COND ((ARCTEST ARC)
		      (ALTARCGEN)
		      (SETQ PPATH (CONS ARC ACONFIG))
		      (SETQ VAL NIL)
		      (SETQ NOMOVEFLAG T)
		      (SELECTQ (ACT (ARC/.ACTIONS ARC) T)
			       (*L0 (GO L0))
			       (*L1 NIL)
			       (*L2 (GO L2))
			       (*END (GO END))
			       (*HELP (GO HELP))
			       (OTHERWISE 
				(PROGN (SETQ STATE (ARC/.LABEL ARC))
				      (SETQ PATH (CONS VAL PPATH))
				      (SETQ CONFIG
					    (CDDR (SETQ ACONFIG
							(LIST STRING
							      WEIGHT
							      STATE
							      STACK
							      REGS
							      HOLD
							      PATH))))
				      (SETQ ALT NIL))))
		      (COND (TRACE (TRACER PAUSEFLAG
					   (&PRIN1 'JUMP/ TO/ 
						   NIL)
					   (&PRIN2 STATE NIL))))
		      (GO L1))
		     (T (GO L2))))
	      (VIR (COND ((SETQ TEMP (HOLDSCAN HOLD
					       (ARC/.LABEL ARC)
					       (ARC/.TEST ARC)))
			  (ALTARCGEN)
			  (SETQ * (CAR TEMP))
			  (SETQ FEATURES (CDR TEMP))
			  (SETQ HOLD (KILL TEMP HOLD))
			  (SETQ NOMOVEFLAG T)
			  (SETQ ACTIONS (ARC/.ACTIONS ARC))
			  (SETQ VAL TEMP)
			  (GO ACT))
			 (T (GO L2))))
	      (WRD (COND (LEXMODE (COND ((NOT (MEMQ TRAILTYPE
						    '(WRD MEM)))
					 (GO L2)))))
		   (COND ((EQ * (ARC/.LABEL ARC)) (GO TST))
			 (T (GO L2))))
	      (MEM (COND (LEXMODE (COND ((NOT (MEMQ TRAILTYPE
						    '(WRD MEM)))
					 (GO L2)))))
		   (COND ((MEMQ * (ARC/.LABEL ARC)) (GO TST))
			 (T (GO L2))))
	      (TST
	       (COND (LEXMODE (COND ((NOT (AND (EQ TRAILTYPE
						   'TST)
					       (EQ TRAILLABEL
						   (ARC/.LABEL ARC))))
				     (GO L2)))))
	       (GO TST))
	      (SUSPEND
	       (COND
		((AND (ARCTEST ARC) ARCS)
		 (SETQ ACONFIG
		       (CONS STRING
			     (CONS (SUSPENDW WEIGHT
					     (EVAL (ARC/.LABEL ARC)))
				   CONFIG)))
		 (SETQ TEMP (CONS 'ALTARC
				  (CONS TRAIL (CONS ARCS ACONFIG))))
		 (COND (TRACE (TRACER PAUSEFLAG
				      (&PRIN1 'SUSPENDING NIL)
				      (&TERPRI NIL))))
		 (STORALT TEMP T)
		 (SETQ ARCS NIL)
		 (GO END))
		(T (GO L2))))
	      (SPLIT (SETQ SPLITS
			   (CONS (CDR ARC)
				 (CONS ACONFIG (CONS ARCS SPLITS))))
		     (SETQ ARCS NIL)
		     (COND (TRACE (TRACER PAUSEFLAG
					  (&PRIN1 'SPLIT/ ARC
						  NIL))))
		     (COND ((NULL SPLIT/#) (SETQ SPLIT/# 1.)))
		     (GO END))
	      (DO (*RPLACA ARC 'TST)
		  (RPLACD ARC
			  (CONS 'DO
				(CONS 'T (CDR ARC))))
		  (&PRIN1 'CHANGING/ DO/ ARC/ AT/ STATE/  T)
		  (&PRIN1 STATE T)
		  (&PRIN1 '/ TO/  T)
		  (&PRINT ARC NIL)
		  (GO L3))
	      (* (GO L2))
	      (OTHERWISE 
		(PROGN (&PRIN1 'UNDEFINED/ ARC T)
		     (&TERPRI T)
		     (&PRINT ARC T)
		     (GO HELP))))
	TST  (COND ((ARCTEST ARC)
		    (SETQ ACTIONS (ARC/.ACTIONS ARC))
		    (GO SUCCESS))
		   (T (GO L2)))
	SUCCESS
	     (ALTARCGEN)
	ACT  (COND (TRACE (TRACER PAUSEFLAG
				  (&PRIN1 'TAKING/  NIL)
				  (&PRIN2 (ARC/.TYPE ARC) NIL)
				  (SPACES 1. NIL)
				  (&PRIN2 (ARC/.LABEL ARC) NIL)
				  (&PRIN1 '/ ARC NIL))))
	     (SETQ PPATH (CONS ARC ACONFIG))
	     (SELECTQ (ACT ACTIONS NIL)
		      (*L0 (GO L0))
		      (*L1 (GO L1))
		      (*L2 (GO L2))
		      (*END (GO END))
		      (*HELP (GO HELP))
		      (OTHERWISE (GO HELP)))
	ALT  (SELECTQ
	      (CAR ALT)
	      (ALTARC (SPREADQ (TRAIL ARCS
				      STRING
				      WEIGHT
				      STATE
				      STACK
				      REGS
				      HOLD
				      PATH)
			       (CDR ALT))
		      (SETQ LEX (CAR STRING))
		      (COND (TRAIL (SETQ LEXMODE T)
				   (SETQ TRAILARC
					 (PATH/.ARC (CAR TRAIL)))
				   (SETQ TRAILTYPE
					 (ARC/.TYPE TRAILARC))
				   (SETQ TRAILLABEL
					 (ARC/.LABEL TRAILARC))
				   (SETQ TRAILVAL
					 (PATH/.VAL (CAR TRAIL)))))
		      (SETQ CONFIG
			    (CDDR (SETQ ACONFIG
					(ALTARC/.ACONFIG ALT))))
		      (GO L2))
	      (ALTCAT (SPREADQ (TEMP ARC
				     STRING
				     WEIGHT
				     STATE
				     STACK
				     REGS
				     HOLD
				     PATH)
			       (CDR ALT))
		      (SETQ LEX (CAR STRING))
		      (SETQ ARCS NIL)
		      (COND ((CDR TEMP)
			     (SETQ ALT (CONS (CAR ALT)
					     (CONS (CDR TEMP)
						   (CDDR ALT))))
			     (STORALT ALT NIL)))
		      (SETQ * (CAAR TEMP))
		      (SETQ FEATURES (CDAR TEMP))
		      (SETQ CONFIG
			    (CDDR (SETQ ACONFIG
					(ALTARC/.ACONFIG ALT))))
		      (GO TST))
	      (OTHERWISE NIL))
	HELP (COND ((HELPER S* HELPER) (GO L0)) (T (RETURN VCFS)))
	END  (COND (UCFS (SPREADQ (ACTIONS *
					   FEATURES
					   STRING
					   WEIGHT
					   STATE
					   STACK
					   REGS
					   HOLD
					   PATH)
				  (CAR UCFS))
			 (SETQ CONFIG
			       (CDDR (SETQ ACONFIG (CDDDAR UCFS))))
			 (SETQ UCFS (CDR UCFS))
			 (GO ACT))
		   ((CAR SPLITS)
		    (SETQ ARC (CAAR SPLITS))
		    (*RPLACA SPLITS (CDAR SPLITS))
		    (SETQ CONFIG (CDDR (SETQ ACONFIG (CADR SPLITS))))
		    (SPREADQ (STATE STACK REGS HOLD PATH) CONFIG)
		    (SETQ SPLIT/# (ADD1 (LENGTH VCFS)))
		    (GO L3))
		   (SPLITS (SETQ CONFIG
				 (CDDR (SETQ ACONFIG (CADR SPLITS))))
			   (SPREADQ (STATE STACK REGS HOLD PATH)
				    CONFIG)
			   (SETQ ARCS (CADDR SPLITS))
			   (SETQ SPLITS (CDDDR SPLITS))
			   (SETQ SPLIT/# (ADD1 (LENGTH VCFS)))
			   (COND (TRACE (TRACER PAUSEFLAG
						(&PRIN1 'ENDSPLIT
							NIL))))
			   (COND ((OR VCFS SUCCESSFLAG)
				  (ALTARCGEN)
				  (GO END)))
			   (COND ((NULL SPLITS) (SETQ SPLIT/# NIL)))
			   (GO L2))
		   (T (RETURN VCFS))))) 

(DEFUN STORALT (ALT NFLAG) 
       (PROGN
	(SETQ ALTNUM (ADD1 ALTNUM))
	(COND (TRACE (TRACER PAUSEFLAG
			     (&PRIN1 'STORING/  NIL)
			     (&PRIN2 (CAR ALT) NIL)
			     (&PRIN1 '/ ALTERNATIVE/  NIL)
			     (&PRIN1 ALTNUM NIL)
			     (COND (NFLAG (&PRIN1 '/ AT/ END/ OF/ ALTS
						  NIL))))))
	(COND (NFLAG (SETQ ALTS (NCONC ALTS (LIST (CONS ALTNUM ALT)))))
	      (T (SETQ ALTS (CONS (CONS ALTNUM ALT) ALTS)))))) 

(DEFUN SYSCONJ FEXPR (*ARGS*) 
       ((LAMBDA (STATES) 
		(PROG (STACKELT CONJSTARTS) 
		      (COND (TRACE (TRACER PAUSEFLAG
					   (&PRIN1 'STARTING/ SYSCONJ
						   NIL))))
		      (SETQ STACKELT
			    (BUILDQ (SYSCONJ (CONJ *)
					     ((CONJOIN))
					     NIL
					     NIL
					     /#)
				    PPATH))
		      (COND ((SETQ CONJSTARTS
				   (CONJSTARTS PPATH STATES))
			     (MAPC (FUNCTION ALTCONJGEN) CONJSTARTS)))
		      (RETURN '*END)))
	(CAR *ARGS*))) 

(DEFUN TAILS (LIST) 
       (COMMENT COMPUTES A LIST OF THE TAILS OF A LIST)
       (COND ((NULL LIST) NIL) (T (CONS LIST (TAILS (CDR LIST)))))) 

(DEFUN TAILS1 (LIST) 
       (COMMENT LIKE TAILS BUT OMITS THE SINGLETON TAIL)
       (COND ((NULL (CDR LIST)) NIL)
	     (T (CONS LIST (TAILS1 (CDR LIST)))))) 

(DEFUN TRAIL (PATH) 
       (COMMENT MAKES A LIST OF PATH ENTRIES IN ORDER OF TRANSITIONS)
       (COND ((NULL PATH) NIL)
	     (T (NCONC (TRAIL (LASTELT PATH)) (LIST PATH))))) 

(DEFUN TRAIL1 (PATH) 
       (COMMENT LIKE TRAIL BUT SKIPS JUMP & VIR ARCS)
       (COND ((NULL PATH) NIL)
	     ((MEMQ (ARC/.TYPE (PATH/.ARC PATH)) '(JUMP VIR))
	      (TRAIL1 (LASTELT PATH)))
	     (T (NCONC (TRAIL1 (LASTELT PATH)) (LIST PATH))))) 	       ;*** CONVERTING MAP TO *MAP

(DEFUN TRAILS (PATH) 
       (COMMENT MAKES LIST OF TRAILS AT DIFFERENT LEVELS FOR
		CONTINUING FIRST PART OF CONJ)
       (PROG (TEMPTRAIL) 
	     (SETQ TEMPTRAIL (LIST (TRAIL1 PATH)))
	     (*MAP
	      (FUNCTION
	       (LAMBDA (PATH) 
		(COND ((EQ (ARC/.TYPE (PATH/.ARC PATH)) 'PUSH)
		       (SETQ TEMPTRAIL
			     (NCONC TEMPTRAIL
				    (TRAILS (PATH/.VAL PATH))))))))
	      PATH
	      (FUNCTION
	       (LAMBDA (PATH) 
		       (COND ((NOT (EQ (ARC/.TYPE (PATH/.ARC PATH))
				       'PUSH))
			      (LASTELT PATH))
			     (T NIL)))))
	     (RETURN TEMPTRAIL))) 

(LISPXPRINT '(V: PARSVALS) T) 

(SETQ PARSVALS '(FORMATS PUNCTUATION START)) 

(DEFINEV (FORMATS ((ACFS = VCFS = CONFIG/'S)
		   (CONFIG = (STATE STACK REGS HOLD PATH))
		   (UCFS = UCF/'S)
		   (UCF = (ACTIONS * FEATURES . ACONFIG))
		   (STACK = STACKELT/'S)
		   (STACKELT = (STATE REGS ACTIONS WFST4 HOLD PPATH))
		   (PATH = (VAL . PPATH))
		   (PPATH = (ARC . ACONFIG))
		   (ACONFIG = (STRING WEIGHT . CONFIG))
		   (ALT =
			ALTARC
			OR
			ALTCAT
			OR
			ALTCONJ
			OR
			ALTLEX
			OR
			ALTWFS)
		   (ALTARC = (/'ALTARC/' TRAIL ARCS . ACONFIG))
		   (ALTCAT = (/'ALTCAT/' TEMP ARC . ACONFIG))
		   (ALTCONJ =
			    (/'ALTCONJ/' WEIGHT
					 LEXMODE
					 STRING
					 ACFS
					 TRAIL))
		   (ALTLEX = (/'ALTLEX/' WEIGHT LEXALT/'S ACFS))
		   (LEXALT = ALTSUB OR ALTCOMP)
		   (ALTSUB = (/'ALTSUB/' STRING SUBLIST))
		   (ALTCOMP = (/'ALTCOMP/' . STRING))
		   (ALTWFS =
			   (/'ALTWFS/' WEIGHT
				       WFSL
				       WFST4
				       STATE
				       ACTIONS
				       STACK
				       REGS
				       HOLD
				       PATH
				       TRAIL))
		   (WFST = WFST1/'S)
		   (WFST1 = (STRING . WFST2/'S))
		   (WFST2 = (STATE . WFST3/'S))
		   (WFST3 = (SREGS ALTFLAG . WFST4/'S))
		   (WFST4 = (HOLDELTS VAL NEWSTRING))
		   (TRAIL = PATH/'S)))
	 (PUNCTUATION (/. /, : /; ? ! /' // -))
	 (START S//)) 

(DECLARE (GENPREFIX ARCACT)) 

(DEFUN ABORT NIL 
       (COMMENT ABORT TERMINATOR FOR ARCS)
       (COND (TRACE (TRACER PAUSEFLAG (&PRIN1 'ABORTING NIL))))
       (COND ((OR UCFS VCFS) '*END)
	     (ARCS (SPREADQ (STRING WEIGHT STATE STACK REGS HOLD PATH)
			    ACONFIG)
		   (SETQ ALTS (CDR ALTS))
		   '*L2)
	     (T '*L2))) 

(DEFUN ADDL FEXPR (*ARGS*) 
       ((LAMBDA (REG EXPRESSION) 
	 (PROG (LOC) 
	       (SETQ LOC REGS)
	  L1   (COND ((EQ (CAR LOC) REG)
		      (SETQ REGS
			    (CONS REG
				  (CONS (CONS (EVAL EXPRESSION)
					      (CADR LOC))
					REGS)))
		      (RETURN NIL))
		     ((SETQ LOC (CDDR LOC)) (GO L1))
		     (T (SETQ REGS
			      (CONS REG
				    (CONS (LIST (EVAL EXPRESSION))
					  REGS)))
			(RETURN NIL)))))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN ADDR FEXPR (*ARGS*) 
       ((LAMBDA (REG EXPRESSION) 
	 (PROG (LOC) 
	       (SETQ LOC REGS)
	  L1   (COND
		((EQ (CAR LOC) REG)
		 (SETQ REGS
		       (CONS REG
			     (CONS (APPEND (CADR LOC)
					   (LIST (EVAL EXPRESSION)))
				   REGS)))
		 (RETURN NIL))
		((SETQ LOC (CDDR LOC)) (GO L1))
		(T (SETQ REGS
			 (CONS REG
			       (CONS (LIST (EVAL EXPRESSION)) REGS)))
		   (RETURN NIL)))))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN BUILD FEXPR (ARGS) 
       (PROG (X) 
	     (SETQ X (EVAL (CAR ARGS)))
	     (SETQ ARGS (CDR ARGS))
	     (RETURN (BUILD1 X)))) 

(DEFUN BUILDQ FEXPR (ARGS) 
       (PROG (X) 
	     (SETQ X (CAR ARGS))
	     (SETQ ARGS (CDR ARGS))
	     (RETURN (BUILD1 X)))) 

(DEFUN BUILD1 (X) 
       (COND ((EQ X '*) *)
	     ((EQ X '+)
	      (SETQ X (CAR ARGS))
	      (SETQ ARGS (CDR ARGS))
	      (APPLY* (FUNCTION GETR) X NIL))
	     ((EQ X '/#)
	      (SETQ X (CAR ARGS))
	      (SETQ ARGS (CDR ARGS))
	      (EVAL X))
	     ((NLISTP X) X)
	     ((EQ (CAR X) '@)
	      (MAPCAN (FUNCTION (LAMBDA (Y) (APPEND (BUILD1 Y) NIL)))
		      (CDR X)))
	     (T (BUILD2 X)))) 

(DEFUN BUILD2 (X) 
       (COND ((NLISTP X) (BUILD1 X))
	     (T (CONS (BUILD1 (CAR X)) (BUILD2 (CDR X)))))) 

(DEFUN CAT FEXPR (*ARGS*) 
       ((LAMBDA (CAT) (COND ((ATOM CAT) (CATCHECK CAT NIL))
			    (T (SOME CAT (FUNCTION (LAMBDA (X69) (CATCHECK X69 NIL))) NIL))))
	(CAR *ARGS*))) 

(DEFUN ENDL? NIL (NULL STRING)) 

(DEFUN EVALLOC (LOC) 
       (COND ((OR (NULL LOC) (EQ LOC '*)) *)
	     ((ATOM LOC) (APPLY* (FUNCTION GETR) LOC NIL))
	     (T (EVAL LOC)))) 

(DEFUN GETF FEXPR (*ARGS*) 
       ((LAMBDA (FEATURE) 
		(COMMENT GETS VALUE OF A FEATURE FROM FEATURE LIST)
		(PROG (TEMP) 
		      (COND ((NULL (SETQ TEMP (ASSQ FEATURE FEATURES)))
			     (RETURN NIL))
			    ((NULL (CDR TEMP)) (RETURN T))
			    (T (RETURN (CADR TEMP))))))
	(CAR *ARGS*)))
 						       ;*** CONVERTING EQ WITH NUMERIC ARG TO =

(IF-FOR-MACLISP
(DEFUN GETR FEXPR (*ARGS*)
	((LAMBDA (REG WHERE) 
	 (COMMENT GETS VALUE OF A REGISTER FROM REGISTER LIST)
	 (PROG (LOC NEAREST STACKLOC) 
	       (SETQ 
		LOC
		(COND
		 ((NULL WHERE) REGS)
		 ((EQ WHERE 'T)
		  (STACKELT/.REGS (LASTELT STACK)))
		 ((EQ WHERE 'NEAREST)
		  (SETQ NEAREST T)
		  (SETQ STACKLOC STACK)
		  REGS)
		 ((NOT (NUMBERP WHERE))
		  (STACKELT/.REGS (CAR (APPLY* (FUNCTION SCANSTACK)
					       WHERE))))
		 ((GREATERP WHERE 0.)
		  (STACKELT/.REGS (KTH STACK WHERE)))
		 ((= WHERE 0.) REGS)
		 ((GREATERP (SETQ WHERE
				  (PLUS WHERE (LENGTH STACK) 1.))
			    0.)
		  (STACKELT/.REGS (KTH STACK WHERE)))
		 (T NIL)))
	  L0   (COND ((EQ (CAR LOC) REG) (RETURN (CADR LOC)))
		     (LOC (SETQ LOC (CDDR LOC)) (GO L0))
		     ((AND NEAREST STACKLOC)
		      (SETQ LOC (STACKELT/.REGS (CAR STACKLOC)))
		      (SETQ STACKLOC (CDR STACKLOC))
		      (GO L0))
		     (T (RETURN NIL)))))
	(CAR *ARGS*)
	(CADR *ARGS*)) )
);MACLISP

(IF-FOR-LISPM
(DEFUN GETR (&QUOTE REG &OPTIONAL WHERE) 
	 (COMMENT GETS VALUE OF A REGISTER FROM REGISTER LIST)
	 (PROG (LOC NEAREST STACKLOC) 
	       (SETQ 
		LOC
		(COND
		 ((NULL WHERE) REGS)
		 ((EQ WHERE 'T)
		  (STACKELT/.REGS (LASTELT STACK)))
		 ((EQ WHERE 'NEAREST)
		  (SETQ NEAREST T)
		  (SETQ STACKLOC STACK)
		  REGS)
		 ((NOT (NUMBERP WHERE))
		  (STACKELT/.REGS (CAR (APPLY* (FUNCTION SCANSTACK)
					       WHERE))))
		 ((GREATERP WHERE 0.)
		  (STACKELT/.REGS (KTH STACK WHERE)))
		 ((= WHERE 0.) REGS)
		 ((GREATERP (SETQ WHERE
				  (PLUS WHERE (LENGTH STACK) 1.))
			    0.)
		  (STACKELT/.REGS (KTH STACK WHERE)))
		 (T NIL)))
	  L0   (COND ((EQ (CAR LOC) REG) (RETURN (CADR LOC)))
		     (LOC (SETQ LOC (CDDR LOC)) (GO L0))
		     ((AND NEAREST STACKLOC)
		      (SETQ LOC (STACKELT/.REGS (CAR STACKLOC)))
		      (SETQ STACKLOC (CDR STACKLOC))
		      (GO L0))
		     (T (RETURN NIL)))))
);MACLISP

(DEFUN HOLD (FORM FEATURES) 
       (COMMENT HOLDS FORM-FEATURES PAIR ON HOLD LIST)
       (SETQ HOLD (CONS (CONS FORM FEATURES) HOLD))) 

(DEFUN JUMP FEXPR (*ARGS*) 
       ((LAMBDA (S) 
		(COMMENT JUMP TERMINATOR FOR ARCS)
		(PROGN (SETQ STATE S)
		       (SETQ PATH (CONS VAL PPATH))
		       (SETQ CONFIG
			     (CDDR (SETQ ACONFIG (LIST STRING
						       WEIGHT
						       STATE
						       STACK
						       REGS
						       HOLD
						       PATH))))
		       (COND (TRACE (TRACER PAUSEFLAG
					    (&PRIN1 'JUMP/ TO/ STATE/ 
						    NIL)
					    (&PRIN2 STATE NIL))))
		       '*L1))
	(CAR *ARGS*))) 						       ;*** CONVERTING EQ WITH NUMERIC ARG TO =

(DEFUN LIFTR FEXPR (*ARGS*) 
       ((LAMBDA (REG FORM WHERE) 
	 (COMMENT SETS REGISTERS IN STACK ABOVE CURRENT PARSER LEVEL)
	 (PROG (LOC) 
	       (COND ((NULL WHERE) (SETQ LOC STACK))
		     ((EQ WHERE 'T) (SETQ LOC (LAST STACK)))
		     ((NOT (NUMBERP WHERE))
		      (SETQ LOC (APPLY* (FUNCTION SCANSTACK) WHERE)))
		     ((GREATERP WHERE 0.)
		      (SETQ LOC (*NTH STACK WHERE)))
		     ((= WHERE 0.) NIL)
		     ((GREATERP (SETQ WHERE
				      (PLUS WHERE (LENGTH STACK) 1.))
				0.)
		      (SETQ LOC (*NTH STACK WHERE))))
	       (COND ((NULL LOC)
		      (&PRIN1 'ILLEGAL/ LIFTR/ FROM/ STATE/ 
			      NIL)
		      (&PRINT STATE NIL)
		      (&PRINT STRING NIL)
		      (RETURN NIL)))
	       (SETQ 
		STACK
		(APPEND (FIRSTPART STACK LOC)
			(CONS (CONS (CAAR LOC)
				    (CONS (CONS REG
						(CONS (EVAL FORM)
						      (CADAR LOC)))
					  (CDDAR LOC)))
			      (CDR LOC))))
	       (RETURN NIL)))
	(CAR *ARGS*)
	(CADR *ARGS*)
	(CADDR *ARGS*))) 

(DEFUN NEXTWRD NIL (CADR STRING)) 

(DEFUN NULLR FEXPR (*ARGS*) 
       ((LAMBDA (REG WHERE) (NOT (APPLY* (FUNCTION GETR) REG WHERE)))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN RESUME FEXPR (ARGS) 
       (PROG (TEMP) 
	     (COND ((SETQ TEMP (GETF RESUME)) (SETQ SREGS (CDR TEMP)))
		   (T (RETURN NIL)))
	     (COND
	      (ARGS
	       (SETQ 
		SREGS
		(NCONC
		 (MAPCAN 
		  (FUNCTION (LAMBDA (X) (LIST X
					      (APPLY* (FUNCTION GETR)
						      X NIL))))
		  ARGS)
		 SREGS))))
	     (APPLY* (FUNCTION PUSH) (CAR TEMP)))) 

(DEFUN SENDR FEXPR (*ARGS*) 
       ((LAMBDA (REG FORM) 
		(COMMENT SETS THE VALUE OF A REGISTER IN THE SENDR
			 LIST -- USED TO INITIALIZE A PUSH)
		(SETQ SREGS (CONS REG (CONS (EVAL FORM) SREGS)))
		(COND (TRACE (TRACER NIL
				     (&PRIN2 '/; NIL)
				     (&PRIN2 (CADR SREGS) NIL)
				     (&PRIN2 '=> NIL)
				     (&PRIN2 (CAR SREGS) NIL))))
		SREGS)
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN SENDRQ FEXPR (*ARGS*) 
       ((LAMBDA (REG FORM) 
		(SETQ SREGS (CONS REG (CONS FORM SREGS)))
		(COND (TRACE (TRACER NIL
				     (&PRIN2 '/; NIL)
				     (&PRIN2 (CADR SREGS) NIL)
				     (&PRIN2 '=> NIL)
				     (&PRIN2 (CAR SREGS) NIL))))
		SREGS)
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN SETR FEXPR (*ARGS*) 
       ((LAMBDA (REG FORM) 
		(COMMENT SETQ THE VALUE OF A REGISTER IN REGISTER
			 LIST)
		(SETQ REGS (CONS REG (CONS (EVAL FORM) REGS)))
		(COND (TRACE (TRACER NIL
				     (&PRIN2 '/; NIL)
				     (&PRIN2 (CAR REGS) NIL)
				     (&PRIN2 '<- NIL)
				     (&PRIN2 (CADR REGS) NIL))))
		REGS)
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN SETRQ FEXPR (*ARGS*) 
       ((LAMBDA (REG FORM) 
		(SETQ REGS (CONS REG (CONS FORM REGS)))
		(COND (TRACE (TRACER NIL
				     (&PRIN2 '/; NIL)
				     (&PRIN2 (CAR REGS) NIL)
				     (&PRIN2 '<- NIL)
				     (&PRIN2 (CADR REGS) NIL))))
		REGS)
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN SPLIT FEXPR (SPLITARCS) 
       (PROG (TEMP) 
	     (COND (TRACE (TRACER PAUSEFLAG
				  (&PRINT 'SPLITTING NIL))))
	     (COND ((NULL SPLIT/#) (SETQ SPLIT/# 1.)))
	     (SETQ TEMP (CONS * (CONS FEATURES ACONFIG)))
	     (SETQ UCFS
		   (NCONC (MAPCAR 
			   (FUNCTION (LAMBDA (ACTIONS) 
					     (CONS ACTIONS TEMP)))
			   SPLITARCS)
			  UCFS))
	     (RETURN '*END))) 

(DEFUN SUSPEND (N) 
       (COMMENT SUSPENDS AN ANALYSIS PATH WITH AN INCREMENTED WEIGHT)
       (PROG (TEMP) 
	     (SETQ TEMP
		   (CONS 'ALTARC
			 (CONS TRAILV
			       (CONS (LIST (CONS 'DO ACTIONS))
				     (CONS STRING
					   (CONS (SUSPENDW WEIGHT N)
						 CONFIG))))))
	     (COND (TRACE (TRACER PAUSEFLAG
				  (&PRIN1 'SUSPENDING NIL)
				  (&TERPRI NIL))))
	     (STORALT TEMP T)
	     (RETURN '*END))) 

(DEFUN SUSPENDW (WEIGHT INCREMENT) (PLUS WEIGHT INCREMENT)) 

(DEFUN TIMEP (X) 
       (PROG (HOLD TEMP HOUR) 
	     (SETQ HOLD (UNPACK X))
	     (COND ((NOT (SETQ TEMP (MEMQ ': HOLD)))
		    (RETURN NIL))
		   (T (SETQ HOUR (PACK (FIRSTPART HOLD TEMP)))
		      (SETQ TEMP (PACK (CDR TEMP)))
		      (RETURN (AND (NUMBERP HOUR)
				   (NUMBERP TEMP)
				   (LESSP TEMP 48.)
				   (OR (LESSP HOUR 20.)
				       (AND (= HOUR 20.)
					    (= TEMP 0.))))))))) 

(DEFUN TO FEXPR (*ARGS*) 
       ((LAMBDA (S) 
	 (COMMENT NORMAL TERMINATOR FOR ARCS)
	 (PROG (TEMP) 
	       (COND ((AND (SETQ TEMP (HOLDSCAN HOLD 'MARK T))
			   (EQ STRING (CDR TEMP)))
		      (RETURN (ABORT))))
	       (SETQ STATE S)
	       (SETQ PATH (CONS VAL PPATH))
	       (SETQ CONFIG (CDDR (SETQ ACONFIG (LIST STRING
						      WEIGHT
						      STATE
						      STACK
						      REGS
						      HOLD
						      PATH))))
	       (SETQ ALT NIL)
	       (RETURN (COND (NOMOVEFLAG '*L1)
			     (STRING (SETQ VCFS
					   (NCONC VCFS (LIST CONFIG)))
				     '*END)
			     (TRACE (TRACER PAUSEFLAG
					    (&PRIN1 'END/ OF/ STRING
						    NIL))
				    '*END)
			     (T '*END)))))
	(CAR *ARGS*))) 

(DEFUN TODO FEXPR (*ARGS*) 
       ((LAMBDA (S) 
	 (COMMENT SPECIAL TERMINATOR FOR ARCS JUMPING TO A
		  NON-BRANCHING DO-ARC STATE)
	 (PROG (DOARCS) 
	       (SETQ DOARCS (EVAL S))
	       (COND
		((AND (NULL (CDR DOARCS))
		      (EQ (CAAR DOARCS) 'DO))
		 (RETURN (ACT (CDAR DOARCS) NIL)))
		(T (&PRIN1 'ILLEGAL/ TODO/ TRANSITION/ FROM/ STATE:/ 
			   T)
		   (&PRIN2 STATE T)
		   (&PRIN1 '/ TO/ STATE:/  T)
		   (&PRINT S T)
		   (RETURN '*HELP)))))
	(CAR *ARGS*))) 

(DEFUN TOPLEVEL? NIL (NULL STACK)) 

(DEFUN WRD FEXPR (*ARGS*) 
       ((LAMBDA (WRDS LOC) (COND ((ATOM WRDS) (EQ (EVALLOC LOC) WRDS))
				 (T (MEMQ (EVALLOC LOC) WRDS))))
	(CAR *ARGS*)
	(CADR *ARGS*))) 


(DECLARE (GENPREFIX GRAMMA)) 

(DEFUN ADJVERB NIL 
       (AND (NOT (ATOM (GETR V NIL)))
	    (EQ (CAR (GETR V NIL)) 'ADJ))) 

(DEFUN CHECKF FEXPR (*ARGS*) 
       ((LAMBDA (CAT FEATS) 
	 (AND
	  (SETQ CAT (DICTCHECK * CAT))
	  (COND
	   ((ATOM FEATS)
	    (SOME CAT
		  (FUNCTION (LAMBDA (PAIR) (ASSQ FEATS (CDR PAIR))))
		  NIL))
	   (T
	    (SOME
	     FEATS
	     (FUNCTION
	      (LAMBDA (FEAT) 
		      (SOME CAT
			    (FUNCTION (LAMBDA (PAIR) 
					      (ASSQ FEAT (CDR PAIR))))
			    NIL)))
	     NIL)))))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN COMPARATIVE FEXPR (*ARGS*) 
       ((LAMBDA (ADJ) (MEMQ 'COMPARATIVE (EVALLOC ADJ)))
	(CAR *ARGS*))) 

(DEFUN DETBUILD NIL 
       (COND ((GETR POSTART NIL)
	      (BUILDQ (DET (ART +) (@ (POSTART) +)) DET POSTART))
	     (T (BUILDQ (DET +) DET)))) 

(DEFUN FRONTED? (SONS) 
       (PROG (TEMP) 
	     (MAPC 
	      (FUNCTION (LAMBDA (X) 
				(COND ((AND (NOT (ATOM X))
					    (EQ (CAR X) 'PP)
					    (GETTAG (CADDR X)
						    'FRONTED))
				       (SETQ TEMP
					     (APPEND (LIST X) TEMP)))
				      (T (SETQ TEMP
					       (APPEND TEMP
						       (LIST X)))))))
	      SONS)
	     (RETURN TEMP))) 

(DEFUN GETROOT FEXPR (*ARGS*) 
       ((LAMBDA (WRD CAT) (CAAR (DICTCHECK (EVALLOC WRD) CAT)))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN MARKER FEXPR (*ARGS*) 
       ((LAMBDA (MARKER LOC) 
		(MEMQ MARKER (GET (EVALLOC LOC) 'MARKERS)))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN MODAL NIL (MEMQ * '(DO WILL-MODAL SHALL CAN MAY MUST))) 

(DEFUN NPBUILD NIL 
       (PROG (TEMP) 
	     (SETQ TEMP
		   (BUILDQ (@ (NP) /# /# (+ (NU +)) /# /#)
			   (COND ((GETR DET NIL)
				  (LIST (GETR DET NIL))))
			   (REVERSE (GETR ADJS NIL))
			   N
			   NU
			   (REVERSE (GETR NMODS NIL))
			   (COND ((GETR NR NIL)
				  (BUILDQ ((@ (NR) /#))
					  (REVERSE (GETR NR NIL)))))))
	     (RETURN (COND ((GETR NEG NIL) (BUILDQ (NP + /#) NEG TEMP))
			   (T TEMP))))) 

(DEFUN NPCHECK FEXPR (*ARGS*) 
       ((LAMBDA (NODE TERMINALS) 
		(MEMQ (CADR (ASSQ-CHECK-ATOMS NODE (CDR NP))) TERMINALS))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN NPREP FEXPR (*ARGS*) 
       ((LAMBDA (PREP) 
		(SETQ PREP (EVALLOC PREP))
		(COND ((LISTP PREP)
		       (COMMENT IS IT A PP?)
		       (SETQ PREP (CADADR PREP))))
		(MEMQ PREP (GET (CADR (GETR N NIL)) 'NPREPS)))
	(CAR *ARGS*))) 

(DEFUN PNCHECK FEXPR (*ARGS*) 
       ((LAMBDA (NP PNCODE) 
		(AND (SETQ NP (EVALLOC NP))
		     (OR (EQ NP 'THERE)
			 (SELECTQ (EVALLOC PNCODE)
				  (NIL T)
				  (ANY T)
				  (3SG (OR (NOR (NPCHECK NU (PL))
						(NPCHECK PRO (I YOU)))
					   (MEMQ (CAADR NP)
						 '(NOM S))))
				  (X3SG (OR (NPCHECK PRO (I YOU))
					    (NOT (NPCHECK NU (SG)))))
				  (1SG (NPCHECK PRO (I)))
				  (X13SG (OR (NPCHECK PRO (YOU))
					     (NOT (NPCHECK NU (SG)))))
				  (/13SG (OR (NOR (NPCHECK NU (PL))
						  (NPCHECK PRO (YOU)))
					     (MEMQ (CAADR NP)
						   '(NOM S))))
				  (OTHERWISE NIL)))))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN QSTART NIL 
       (OR (CAT QDET)
	   (CAT QWORD)
	   (MEMQ (GETROOT * V)
		 '(BE HAVE DO WILL-MODAL SHALL CAN MAY MUST)))) 

(DEFUN RELATIVIZE (FORM) 
       (COND ((NULL FORM))
	     ((EQ (CAR FORM) 'NP)
	      (*RPLACA (CDR (ASSQ-CHECK-ATOMS 'DET FORM)) 'WHR)
	      (RPLACD (ASSOCNEXT (CDR FORM) 'NU) NIL))
	     (T (RELATIVIZE (ASSQ-CHECK-ATOMS 'NP FORM))))
       FORM) 

(DEFUN RESUMETAG FEXPR (*ARGS*) 
       ((LAMBDA (STATE) 
		(LIST (LIST 'RESUME (CONS STATE REGS))))
	(CAR *ARGS*))) 

(DEFUN RFEAT FEXPR (*ARGS*) 
       ((LAMBDA (FEAT LOC) 
		(MEMQ FEAT (GET (EVALLOC LOC) 'FEATURES)))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN SBUILD NIL 
       (BUILDQ (@ (S +)
		  /#
		  (+ (@ (AUX (@ (TNS +) +)) /#) (@ (VP (V +)) /# /# /#)))
	       TYPE
	       (COND ((GETR NEG NIL) (LIST 'NEG)) (T NIL))
	       SUBJ
	       TNS
	       ASPECT
	       (COND ((GETR MODAL NIL) (BUILDQ ((MODAL +)) MODAL))
		     (T NIL))
	       V
	       (COND ((GETR OBJ NIL) (LIST (GETR OBJ NIL))) (T NIL))
	       (COND ((GETR COMPL NIL) (BUILDQ ((COMPL +)) COMPL))
		     (T NIL))
	       (REVERSE (GETR VMODS NIL)))) 

(DEFUN SCOMP FEXPR (*ARGS*) 
       ((LAMBDA (LOC) 
		(OR (MEMQ 'SCOMP
			  (SETQ LOC (GET (EVALLOC LOC)
					 'FEATURES)))
		    (MEMQ 'THATCOMP LOC)))
	(CAR *ARGS*))) 

(DEFUN SEMNET (N1 N2) 
       (OR T
	   (INTERSECTION (GET N1 'MARKERS)
			 (GET N2 'MARKERS)))) 

(DEFUN VPARTICLE FEXPR (*ARGS*) 
       ((LAMBDA (V PREP) 
		(CADR (ASSQ-CHECK-ATOMS (EVALLOC PREP)
			    (GET (EVALLOC V) 'PARTICLES))))
	(CAR *ARGS*)
	(CADR *ARGS*))) 

(DEFUN VPASSIVE FEXPR (*ARGS*) 
       ((LAMBDA (LOC) (OR (NOT (SETQ LOC (GET (EVALLOC LOC)
					      'FEATURES)))
			  (MEMQ 'PASSIVE LOC)))
	(CAR *ARGS*))) 

(DEFUN VPREP FEXPR (*ARGS*) 
       ((LAMBDA (PREP) (MEMQ (EVALLOC PREP)
			     (GET (GETR V NIL) 'VPREPS)))
	(CAR *ARGS*))) 

(DEFUN VTRANS FEXPR (*ARGS*) 
       ((LAMBDA (LOC) (AND (NOT (ADJVERB))
			   (OR (NOT (SETQ LOC (GET (EVALLOC LOC)
						   'FEATURES)))
			       (MEMQ 'TRANS LOC))))
	(CAR *ARGS*))) 

