;READ WOODS;MACROS > IN BEFORE TRYING TO THIS INTERPRETIVELY -*-LISP-*-

(DECLARE (COND ((NULL (MEMQ 'NEWIO (STATUS FEATURES)))
		(BREAK 'YOU-HAVE-TO-COMPILE-THIS-WITH-QCOMPL T))
	       ((OR (NULL (GET 'IF-FOR-MACLISP 'MACRO))
		    (GET 'POP 'MACRO))
		(LOAD '(MACROS > DSK WOODS)))))

(IF-FOR-LISPM
(DECLARE (QUOTED-ARGS 
  FORCE  PUSH  SCANSTACK  SYSCONJ  ADDL  ADDR 
  CAT  GETF  GETR  JUMP  LIFTR  NULLR 
  SENDR  SENDRQ  SETR  SETRQ  TO  TODO 
  WRD  CHECKF  COMPARATIVE  GETROOT  MARKER  NPCHECK 
  NPREP  PNCHECK  RESUMETAG  RFEAT  SCOMP  VPARTICLE 
  VPASSIVE  VPREP  VTRANS  HELPER  MAPCV  RENAME 
  SCANCV  SETQS  THOSEV  EDITD  EDITG  REMEX 
  CTYPE  PLURAL  COMPFORM  SUPFORM  /#  MEM 
  PRED  QUANT  SSUNIONF  NEWFRAG  TABFORM))
);LISPM

(DECLARE  (SPECIAL SEM-TRACE *SPOP *TRAIL REG WHERE *SQ-VAL*)
	  (*LEXPR CONCAT))
(DECLARE (*LEXPR APPLY* EVALA)(SPECIAL *LOC*))

(DECLARE (GENPREFIX SOME) (SPECIAL ^D OLDGCTIME OLDRUNTIME OLDTIME X Y L PROP)
)
(IF-FOR-LISPM
(DEFUN TIMER FEXPR (X) 
    NIL)
);LISPM

(IF-FOR-MACLISP
(DEFUN TIMER FEXPR (X) 
       (PROG (RT TT GCT *NOPOINT)
	(OR ^D (RETURN NIL))
	(SETQ *NOPOINT T)
	     (TERPRI)
	     (PRINC '/;/ GC/ TIME/ )
	     (TIMEPRINT (- (SETQ GCT (STATUS GCTIME)) OLDGCTIME))
	     (PRINC '/,/ RUN/ TIME/ )
	     (TIMEPRINT (- (SETQ RT (RUNTIME)) OLDRUNTIME))
	     (PRINC '/,/ REAL/ TIME/ )
	     (PRIN1 (-$ (SETQ TT (TIME)) OLDTIME))
	(PRINC '/,/ TIME-STEALING/ )
	(PRIN1 (QUOTIENT (- RT OLDRUNTIME) 1000000.0 (-$ TT OLDTIME)))
	     (TERPRI)
	     (SETQ OLDGCTIME GCT OLDRUNTIME RT OLDTIME TT)))
)(IF-FOR-MACLISP
(DEFUN TIMEPRINT (N) 
       (PRIN1 (// N 1000000.))
       (PRINC '/.)
       (PRIN1 (// (\ N 1000000.) 100000.)))
)
(IF-FOR-MACLISP

(DEFUN SLOW ()
 (NOUUO T)
 (*RSET T)
 (SSTATUS UUOLINKS))
)
(IF-FOR-MACLISP
(SLOW)
)
(IF-FOR-MACLISP
(DEFUN FAST ()
 (NOUUO NIL)
 (*RSET NIL))
)
(IF-FOR-MACLISP
(DEFUN EVALA %N (COND ((ATOM (ARG 1)) (EVAL (ARG 1))) (T (EVAL (FIXARGS (ARG 1))))))
);MACLISP
     

     
(IF-FOR-LISPM
   (DEFUN EVALA (&REST L) (EVAL (CAR L)))
);LISPM

  
(IF-FOR-MACLISP 
   (DEFUN APPLY* %N 
    (APPLY (ARG 1) (FIXARGS1 (ARG 1) 
			     (LISTIFY (- 1 %N)) )))
);MACLISP

(IF-FOR-LISPM
   (DEFUN APPLY* (&REST L) (APPLY (CAR L) (CDR L)))
);LISPM

(IF-FOR-MACLISP
(DEFUN FIXARGS (FORM)
	(CONS (CAR FORM)(FIXARGS1 (CAR FORM) (CDR FORM))))
)
(IF-FOR-MACLISP
(DEFUN FIXARGS1 (FUN ARGS) 
       (PROG (N) 
	     (COND ((ATOM FUN)
		    (COND ((SETQ N (ARGS FUN)))
			  (T (RETURN ARGS))))
		   ((EQ (CAR FUN) 'LAMBDA)
		    (SETQ N (CONS NIL (LENGTH (CADR FUN)))))
		   (T (BREAK BAD-FORM-TO-FIXARGS (PRINT (CONS FUN ARGS)))))
	     (COND
	      ((NULL (CAR N))
	       (COND ((= (LENGTH ARGS) (CDR N)))
		     ((> (LENGTH ARGS) (CDR N))
		      (BREAK TOO-MANY-ARGS-FIXARGS (PRINT (CONS FUN ARGS))))
		     ((< (LENGTH ARGS) (CDR N))
		      (SETQ ARGS
			    (APPEND ARGS
				    (LISTN (- (CDR N)
					      (LENGTH ARGS)))))
		      (BREAK FIXARGS (PRINT (CONS FUN ARGS))))))
	      (T (BREAK BAD-ARGS-PROP (PROGN (PRINC FUN) (PRINC '-)(PRINC N)))))
	     (RETURN ARGS)))
)
(IF-FOR-MACLISP
(SETQ OLDTIME (PLUS 0.0 (TIME)) OLDRUNTIME 0 OLDGCTIME 0)
)
(IF-FOR-MACLISP
(SETQ GC-DAEMON  'TIMER)
)
(IF-FOR-MACLISP
(TIMER)
)
(IF-FOR-MACLISP
(DEFUN EVERY N 							       ;LIST, PREDICATE, (NEXT-FCN)
       (PROG (L PRED NEXT-FN) 
	     (SETQ L (ARG 1.))
	     (SETQ PRED (ARG 2.))
	     (AND (> N 3.) (SETQ NEXT-FN (ARG 3.)))
	LOOP (COND ((NOT (APPLY* PRED (CAR L))) (RETURN NIL))
		   ((NULL (SETQ L (COND ((NULL NEXT-FN) (CDR L))
					(T (APPLY* NEXT-FN L)))))
		    (RETURN T))
		   (T (GO LOOP)))))
)
(IF-FOR-MACLISP
      ;LIST, PREDICATE, (NEXT-FCN)
(DEFUN SOME N 	
       (PROG (L PRED NEXT-FN) 
	     (SETQ L (ARG 1.))
	     (SETQ PRED (ARG 2.))
	     (AND (> N 3.) (SETQ NEXT-FN (ARG 3.)))
	LOOP (COND ((APPLY* PRED (CAR L)) (RETURN L))
		   ((NULL (SETQ L (COND ((NULL NEXT-FN) (CDR L))
					(T (APPLY* NEXT-FN L)))))
		    (RETURN NIL))
		   (T (GO LOOP)))))
)

(DEFUN ASSQ-CHECK-ATOMS (X L)
       (DO Y L (CDR Y) (NULL Y)
	   (AND (LISTP (CAR Y))
		(EQ (CAAR Y) X)
		(RETURN (CAR Y)))))

(IF-FOR-MACLISP
(DEFUN SYMBOLP (X) (AND (ATOM X) (NOT (NUMBERP X))))
);MACLISP

(DECLARE (SPECIAL OPEN-FILE))

;(DEFUN CLOSEF (FILE) (COND ((EQUAL FILE OPEN-FILE) (SETQ ^Q NIL OPEN-FILE NIL))))

;(DEFUN INFILE
;       (FILE)
;       (COND (OPEN-FILE (BREAK FILE-ALREADY-OPEN (PRINT OPEN-FILE))))
;       (ERRSET (APPLY 'UREAD FILE))
;       (SETQ OPEN-FILE (STATUS UREAD))
;       OPEN-FILE)

;(DEFUN INFILEP (X) (STATUS UREAD))

;(SETQ OPEN-FILE NIL)

;(DEFUN CHECK-FILE
;       (FILE)
;       (COND ((NULL FILE))
;	     ((EQ FILE T)(SETQ ^Q NIL))
;	     ((EQUAL FILE OPEN-FILE) (SETQ ^Q T))
;	     (T (BREAK BAD-FILE-CHECK-FILE T))))

(IF-FOR-MACLISP
(DEFUN SFPTR (FILE N) (FILEPOS FILE N))
);MACLISP

(IF-FOR-MACLISP
(DEFUN SCAN-FILE-FOR (CH FILE PTR END X1 X2)
   (PROG NIL
	 (OR PTR (SETQ PTR 0))
	 (FILEPOS FILE PTR)
	 (OR END (SETQ END (FILE-LENGTH FILE)))
   LUP (COND ((= PTR END) (RETURN NIL))
	     ((EQ (READCH FILE) CH) (RETURN PTR)))
       (SETQ PTR (1+ PTR))
       (GO LUP)))
)
(IF-FOR-MACLISP
(DEFUN FILE-LENGTH (FILE)
       (PROG (TEM)
	     (SETQ TEM (SYSCALL 4 'FILLEN FILE))   ;# BYTES, BYTE-SIZE, #WR-BYTES, WR-BYTE-SIZE
	     (RETURN (* (// (CADR TEM) 7.)
			(CAR TEM)))))
)
(IF-FOR-MACLISP
(DEFUN LISTP (X) (EQ (TYPEP X) 'LIST))
);MACLISP

(IF-FOR-MACLISP
(DEFUN NEQ (X Y) (NOT (EQ X Y)))
);MACLISP

(IF-FOR-MACLISP
(DEFUN NLISTP (X) (NOT (LISTP X)))
);MACLISP

(IF-FOR-MACLISP
(DEFUN NTH (X N) 
       (PROG NIL 
	LUP  (COND ((ZEROP N) (RETURN (CONS NIL X)))
		   ((= N 1.) (RETURN X))
		   ((NULL X) (RETURN NIL)))
	     (SETQ N (1- N) X (CDR X))
	     (GO LUP)))
);MACLISP


(DEFUN *MAP (%F1 %LL %F2) 
       (PROG (%L)
	     (SETQ %L %LL)
	LUP  (COND ((NULL %L) (RETURN %LL)))
	     (APPLY* %F1 %L)
	     (SETQ %L (APPLY* %F2 %L))
	     (GO LUP))) 

(DEFUN *MAPCON (%F1 %LL %F2) 
       (PROG (%L)
	     (SETQ %L %LL %LL NIL)
	LUP  (COND ((NULL %L) (RETURN %LL)))
	     (SETQ %LL (NCONC %LL (APPLY* %F1 %L)))
	     (SETQ %L (APPLY* %F2 %L))
	     (GO LUP)))

(DEFUN &PRIN1 (VAL FILE) (PRINC VAL)) 

(DEFUN &PRIN2 (VAL FILE) (PRINC VAL)) 

(DEFUN &PRIN3 (VAL FILE) (PRINC VAL)) 

(DEFUN &PRINT (VAL FILE) (PRINC VAL)(TERPRI)) 

(DEFUN *READ (X) (READ))

(DEFUN *READC (X) (READCH))

(DEFUN &TERPRI (FILE) (TERPRI)) 

(DEFUN ADDPROP (NAME PROP VAL FLG) 
       (COND (FLG (PUTPROP NAME (CONS VAL (GET NAME PROP)) PROP))
	     (T (PUTPROP NAME
			 (NCONC (GET NAME PROP) (LIST VAL))
			 PROP)))) 

(DEFUN ALTSTACK (X) (BREAK NO-FUNCTION-YET-ALTSTACK (PRINT X))) 

(DEFUN BACKTRACE EXPR NIL (BREAK ??? T)) 

(DEFUN BREAK1 EXPR NIL (BREAK ??? T)) 
(IF-FOR-LISPM
(DEFUN CLOCK (N) 
	0)
);LISPM

(IF-FOR-MACLISP
   (DEFUN CLOCK (N) 
	  (PLUS 0.0 (COND ((= N 0.) (TIMES (TIME) 1000.))
		((= N 1.) 0.)
		((= N 2.) (QUOTIENT (RUNTIME) 1000.))
		((= N 3.) (QUOTIENT (STATUS GCTIME) 1000.)))))
);MACLISP

(DEFUN CONCAT N
(PROG (X TEM I)
	(SETQ I 1)
LUP (COND ((> I N) (RETURN (CONS '/" TEM)))
	((ATOM (SETQ X (ARG I)))
	 (SETQ X (LIST X)))
	((NOT (EQ (CAR X) '/"))
	 (BREAK BAD-STRING-ARG-TO-CONCAT (PRINT X)))
	(T (SETQ X (CDR X))))
    (SETQ TEM (APPEND TEM X) I (1+ I))
    (GO LUP) )) 

(DEFUN CONSCOUNT NIL 0.) 

(DEFUN CONTROL (X) X) 

(DEFUN COPY (X) (SUBST NIL NIL X)) 

(DEFUN DEFLIST (L PROP) 
       (MAPC '(LAMBDA (P) (PUTPROP (CAR P) (CADR P) PROP)) L)) 

(DEFUN *ERRSET (X) (LIST X))

(DEFUN ENDFILE (X) (BREAK ??? T)) 

(DEFUN FILEVARS (X) (BREAK FILEVARS-??? T)) 
 

(DEFUN GETLOWER (X) (BREAK ??? T)) 

(DEFUN GLC (X)
 (PROG (VAL TEM)
	(STRING-CHECK X)
	(SETQ VAL (CAR (SETQ TEM (REVERSE (CDR X)))))
	(RPLACD X (NREVERSE (CDR TEM)))
	(RETURN VAL)))

(DEFUN GNC (X)
	(STRING-CHECK X)
	(PROG2 0 (CADR X) (RPLACD X (CDDR X))))

(DEFUN HISTORYSAVE (X1 X2 X3 X4) NIL) 

(DEFUN INTERSECTION (X Y) 
       (PROG (L) 
	     (MAPC '(LAMBDA (X) (AND (MEMBER X Y) (SETQ L (CONS X L))))
		   X)
	     (RETURN L))) 

(DEFUN INTO (X P) (BREAK ??? T)) 

(DEFUN LISTN (N)
(PROG (L)
  (DO I 1 (1+ I) (> I N)
	(SETQ L (CONS NIL L)))
  (RETURN L)))

(DEFUN LISPX (A B) (PRINC B) (&PRINT (EVAL A) NIL)) 

(DEFUN LISPXPRINT (V FILE) (PRINT V)) 

(IF-FOR-LISPM
(DEFUN LISPXREAD (&REST L) (READ))
);LISPM
(IF-FOR-MACLISP
(DEFUN LISPXREAD %N (READ))
);MACLISP

(DEFUN LOC (X) (BREAK LOC T))   ;(MAKNUM X) 

(DEFUN MAKEFILE (X) (BREAK ??? T)) 

(DEFUN MKATOM (X)
	(STRING-CHECK X)
	(READLIST (CDR X)))

(DEFUN MKSTRING (X)
	(CONS '/" (EXPLODE X)))

(DEFUN NCHARS (X) (LENGTH (EXPLODE X))) 

(DEFUN NEWFILE1  (X) (BREAK ??? T)) 


(DEFUN *NTH (X N) 
       (PROG NIL 
	LUP  (COND ((ZEROP N) (RETURN (CONS NIL X)))
		   ((= N 1.) (RETURN X))
		   ((NULL X) (RETURN NIL)))
	     (SETQ N (1- N) X (CDR X))
	     (GO LUP))) 

(DEFUN OPENP (X) NIL) 

(DEFUN OUTFILE (X) NIL) 

(DEFUN OUTPUT (X) NIL) 

(DEFUN PACK (X) (IMPLODE X)) 

(DEFUN PEEKC (X) (LISTEN)) 

(DEFUN POSITION (X) (BREAK ??? T)) 

(DEFUN POSTARTPHRS (X) (BREAK ??? T)) 

(DEFUN PRINTDEF (X) (APPLY 'GRINDEF X)) 

(DEFUN PRINTFNS (X) (BREAK ??? T)) 

(DEFUN PRINTLEVEL (X) (SETQ PRINLEVEL X)) 

(DEFUN PROMPTCHAR (CHAR FILE X) (PRINC CHAR)) 

(DEFUN PUTD (X Y) (BREAK ??? T)) 

(DEFUN RATOM (X) (READ)) 

(DEFUN READP (X) T) 

(DEFUN RETFROM (X V) (BREAK RETFROM-??? T)) 

(DEFUN RUNFORK (X) NIL) 

(DEFUN SPACES (N FILE) (DO I 1. (1+ I) (> I N) (TYO 32.))) 

(DEFUN STKNTH (X) (BREAK ??? T)) 

(DEFUN STKSCAN (X) (BREAK ??? T)) 

(DEFUN STRING-CHECK (X)
(COND ((EQ (CAR X) '/"))
	(T (BREAK BAD-STRING-ARG (PRINT X)))))

(DEFUN TCONC (A B) 
       (SETQ B (LIST B))
       (COND ((NULL A) (CONS B B))
	     ((NULL (CDR A)) (RPLACA A B) (RPLACD A B))
	     (T (RPLACD (CDR A) B) (RPLACD A B)))) 

(DEFUN UNPACK (X) (EXPLODE X)) 

(COMMENT 
(DEFUN *RPLACA (%A %V)
(COND ((ATOM %A)(BREAK ATOMIC-RPLACA (PRINT (LIST %A %V)))(SET %A %V) %A)
	(T (RPLACA %A %V)) )))


(DEFUN GETV (X) (COND ((ATOM X) (EVAL X))(T (BREAK BAD-GETV (PRINT X)))))

;(DEFUN DEFINE-ARGS FEXPR (X)
;(MAPC '(LAMBDA (Y) (COND
;  ((ARGS (CAR Y)))
;  ((NULL (CADDR Y)) (ARGS (CAR Y) (CONS 0  777)) )
;  (T (ARGS (CAR Y) (CADDR Y))))) X) 'DEFINE-ARGS)

(COMMENT 
----
(PUTPROP '*CAR (GET 'CAR 'SUBR) 'SUBR)

(DEFUN CAR (%X)
  (COND ((NULL %X) NIL)
        ((ATOM %X) (BREAK ATOMIC-CAR T)(EVAL %X))
        (T (*CAR %X))))

(SETQ CARS '(CADR CDAR CAAR CAAAR CAADR CADAR CADDR CDAAR CDADR CDDAR 
 CAAAAR CAAADR CAADAR CAADDR
 CADAAR CADADR CADDAR CADDDR CDAAAR CDAADR CDADAR CDADDR CDDAAR
 CDDADR CDDDAR))

(DEFUN MAKE-CAR NIL
(MAPC '(LAMBDA (NAME)
(PROG (L LL)
	(SETQ LL 'X L (DELQ 'R (CDR (EXPLODE NAME))))
	(PUTPROP NAME (LIST 'LAMBDA '(X) (PROG2 
	  (MAPC '(LAMBDA (X) (SETQ LL (LIST 
					(CDR (ASSQ X '((A . CAR) (D . CDR))))
				         LL)))
                 (REVERSE L)) LL) ) 'EXPR)
)) CARS))
----)



