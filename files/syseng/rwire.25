RELOCATABLE
TITLE WIRELIST RELOCATABLE! 

.GLOBAL NMOD,MODTYP,PWR,FF0,OUT,CAND,OR,AOI,FS,FSP,ICORE,MODVER

;INDICATOR REGISTER

;LEFT HALF
AR=400000	;ARITHMETIC MODE
RVAL==200000	;RUN NAME NOT NULL
IGOP==100000	;IGNORE SPECIAL PROPERTIES OF "( IN GETFLD

;RIGHT HALF

FLD==1	;SET IF FLD NOT NULL
SYL==2	;SET IF L-N SEEN IN CURRENT SYL
LET==4	;SET IF LET SEEN IN CURRENT SYL
DEF==10	;SET IF VAL DEFINED FROM GETFLD
PERI==100	;SET IF PERIOD SEEN
GRMF==400	;GSYL FROM MEMORY
;1000 BIT USED AT A.GST FOR MRSW

WRD==2000	
SF=200	;! A SEP OR NOT IN GSYL


TYIC==1	;IO CHANNEL ASSIGNMENTS
TYOC==2
PLTC==3
UTYIC==4
IMXC==5
LPTC==6
DISC==7	;DISPLAY CHANNEL
F1C==10	;LEVEL ONE AND TWO FILES
F2C==11
F3C==12
PRNTC==13	;DIRECTLY TO LINE PRINTER
ECHOCH==14
GETTY==2	;SYSTEM DEV=GE CONSOLE

NOPT==5	;NO OF 3OPT TRIES PER RUN
NWOPT==5	;NO OF WIRES START USING 3OPT
MXSEC==10	;MAX NO. OF SEC./MODULE
MXSSEC==10	;MAX NO. OF SSEC/SECT
MXPNTP==13
MXNSL==180.	;MAX NO OF SLOTS ON ANY BOARD
NRUNS==600.	;MAX NO OF SYM RUNS
MXPIN==300.	;MAX NO PINS/RUN
MXNCPN==100.*6	;MAX NO. CARD PINS
LRNST==NRUNS*2	;LENGTH OF TABLE FOR RUN NAME TEXT
	;ALLO 9 CHARS/RUN
MXSCM==8	;MAX NO SIMULATED COLUMNS
LUSRP==15	;LNGTH OF USR PDL
LPBUFL==200	;LENGTH OF BUFFER FOR LPTING FILES
HASHL==777	;LENGTH OF HASH TABLE FOR CROSS REFERENCE
LOUTBF==200	;LENGTH OF BLOCK CHARACTER OUTBUFFER


DEFINE CONC A,B
A!B!TERMIN

DEFINE FIX A,B
MULI A,400
TSC A,A
ASH A+1,B-243(A)
TERMIN

DEFINE FLOAT A
TLC A,232000
FADR A,A
TERMIN

.SIXO=77000,,
.DPT=76000,,
.CH=75000,,
.COLMN=74000,,
.7TYP=73000,,
.ICOLM==72000,,
.WAIT==71000,,
.DONE==70000,,
.RDPT==67000,,
ERRCON==66000,,
ERR==65000,,

EQUALS .RRTIME,TRN

DEFINE .GRIPE A,B/
IFSN A,,[ERRCON TYOC,[A,,[ASCIZ /B
/]]]
IFSE A,,[ERRCON TYOC,[ASEMIC,,[ASCIZ /B
/]]]
TERMIN

DEFINE .BARF A/
ERR [ASCIZ /A
/]
TERMIN

DEFINE CHECK LOC,L
IF1,[
IFN .-<LOC>-<L>,[PRINTX /BARF AT LOC
/]]
TERMIN

DEFINE .CR A
IFSE A,TYOC,PUSHJ P,TCR
IFSE A,,PUSHJ P,PCR
IFSN A,TYOC,IFSN A,,.BARF CR
TERMIN

;AC DEFS

FF=0
P=1
I=2
AA=3
A=4
B=5
C=6
D=7
T=10
TT=11
SYM=12
LINK=13
F=14
CH1=15
CH2=16
R=17


LERPDL==20
PDLL=100
MACL=1000
STRL==20	;LENGTH OF STRING STORAGE
DMDEFL==100	;MAX NO OF DMY ARGS IN DEFINE

DMYAGL==100	;MAX NO COMBINED DMYARGS ALL MACROS CURRENTLY
;EXPANDING OR PUSHED
MPDLL==100	;MAC PDL LENGTH
DSSIZ==40

;FF FLAGS
MACRCH=100000
UNRCHF==2000	;GETSYL
;MACRO PROC FLAGS

SCEND==200	;SCAN END
GENF==400	;GENERATED ARGS
LNSCN==1000	;ACTIVATE LINE SCAN ON LAST LINE
ALNSCN==2000	;LINE SCAN ACTIVE
;400000 SAYS COMMAS DO NOT BREAK ARG
RDRPTF==4000	;REPEAT
LCRIND=10000	;CR SEEN AFTER ]
;MAC PDL STRUCTURE IRP,IRPC,IRPS
;FIRST ENTRY STANDARD RETURN==AIRP3
;SECOND ENTRY  4.9==1 IF IRPC 4.8 = 1 IF AIRPS
;REST L H NO GROUPS
;RH POINTER TO BODY
;LH(WD1)=DMYAGT POINTER  RH==RETURN AIRP4

SMK=200
.INSRT HACTRN >

CONSTANTS
VARIABLES

ZZ==.
	LOC 41
	JSR ERROR
	JSR INT
.=ZZ

INT:	0
	0
	EXCH A,INT
	TRNN A,20000
	JRST INTD
	SOS INT+1
	.SUSET [.RMEMT,,A]
	LSH A,-10.
	.CORE 1(A)
	JRST INT1
INTD:	MOVE A,INT
	.DISMIS INT+1

INT1:	AOS A
	HRRM A,INT2
	PUSH P,B
	MOVE B,[440700,,[ASCIZ /NEED MORE CORE
/]]
	ILDB A,B
	JUMPE A,.+3
	PUSHJ P,TYO
	JRST .-3
	POP P,B
	MOVEI A,10.
	.SLEEP A,
INT2:	.CORE .
	JRST .-3
	JRST INTD


TTYI:	(SIXBIT /TTY/)
	SIXBIT /HACTRN/
	SIXBIT /INPUT/

TTYO:	(1+SIXBIT /TTY/)
	SIXBIT /HACTRN/
	SIXBIT /OUTPUT/

RPA:	SKIPE UREAD
	JRST UTYI

TYI:	.IOT TYIC,A
	CAIN A,^G
	JRST HACKGO
	CAIE A,^Q
	JRST MAPCH
	SETOM UREAD
UTYI:	.IOT UTYIC,A
	JUMPGE A,MAPCH
	SKIPGE UDEPTH	;EOF, WERE WE IN A .READ?
	JRST UTYI1
	.IOPOP UTYIC,
	SOSGE UDEPTH
UTYI1:	CLEARM UREAD
	PUSHJ P,CRLF
	JRST RPA

MAPCH:	CAIL A,141	;MAP LOWER CASE INTO UPPER CASE
	CAIL A,173
	POPJ	P,
	SUBI A,40
	POPJ	P,

A.READ:	PUSHJ P,FRD
	MOVEI T,0
	HRLM T,UTOB
	.IOPUSH UTYIC,
	.OPEN UTYIC,UTOB
	JRST A.RD1
	MOVE A,[UTYIC,,REALNM]
	.RCHST A,	;READ NAMES OF FILE BEING READ
	SETOM UREAD
	AOS UDEPTH
	JRST MNLUP

A.RD1:	.IOPOP UTYIC,
	.BARF FILE NOT FOUND

CRCK:	MOVE T,LIMBO1
	CAIE T,15
	CAIN T,12
	TLO FF,UNRCHF
	POPJ P,


REALNM:	0	;DEVICE
RNAM1:	0	;SIXBIT NAME OF FILE ACTUALLY BEING READ
RNAM2:	0
RSYSN:	0	;SYSTEM NAME OF INPUT FILE
RWDCNT:	0	;FILE INDEX POINTER

FRD:	PUSHJ P,CRCK
	MOVE C,FNAM1
	MOVE D,FNAM2
	SETOM FIRNAM'
FRD1:	PUSHJ P,SIXSYL
	CAIE T,^A
	CAIN T,^B
	JRST FRD6
	CAIN T,";
	JRST SYSN
	CAIN T,":
	JRST FRDEV
SFN:	TRZN I,SYL
	JRST SFN1
FRD6A:	AOSE FIRNAM
	MOVE C,D
	MOVE D,SYM
SFN1:	CAIN T,40
	JRST FRD1
	MOVEM C,FNAM1
	MOVEM D,FNAM2
	MOVEM C,FWNAM1
	POPJ P,

FRD6:	MOVE SYM,FNAM1-^A(T)
	JRST FRD6A

SYSN:	.WSNAM SYM,
	JRST FRD1

FRDEV:	HLRM SYM,UTOB
	JRST FRD1

SIXSYL:	TRZ I,SYL
	MOVEI SYM,0
	MOVE T,[440600,,SYM]
SXSYL1:	PUSHJ P,RCH
	CAILE A,40
	CAIL A,140
	JRST SXSYL2
	CAIE A,^A
	CAIN A,^B
	JRST SXSYL2
	CAIE A,":
	CAIN A,";
	JRST SXSYL2
	TRO I,SYL
	SUBI A,40
	TLNE T,760000
	IDPB A,T
	JRST SXSYL1

SXSYL2:	MOVE T,A
	POPJ P,

CRLF:	MOVEI A,15
	PUSHJ P,TYO
	MOVEI A,12
	PUSHJ P,TYO
	MOVEI A,"*
	JRST TYO

UTOB:	(SIXBIT /DSK/)
FNAM1:	SIXBIT /T/
FNAM2:	SIXBIT /T/

FWNAM:	SIXBIT /  !DSK/
FWNAM1:	SIXBIT /T/
FWNAM2:	SIXBIT /LIST/
	0
	0

VERSION:	.FNAM1
	.FNAM2

UREAD:	0	;-1 IF READING UTAPE
UDEPTH:	0	;LEVEL OF READ FILE
	;0 TOP LEVEL TYPE IN,  +N MEANS N NESTED READS
GEMODE:	0	;-1 MEANS AT GE CONSOLE

TSPAC:	MOVE A,0
TYOS:	ADDI A,40
TYO:	.IOT TYOC,A
	POPJ P,


A.LP2:	MOVEI A,10.
	.SLEEP A,
	HRREI A,-2
	ADDM A,(P)
	POPJ P,

A.LPT:	PUSH P,FNAM1
	PUSH P,FNAM2
	MOVE A,FWNAM2
	MOVEM A,FNAM2
	PUSHJ P,FRD
	.IOPUSH UTYIC,
	MOVEI T,2
	HRLM T,UTOB
	.OPEN UTYIC,UTOB
	JRST A.LFNF
A.LP3:	.OPEN LPTC,[SIXBIT /  #LPTLPT   OUT/]
	PUSHJ P,A.LP2
	HRROI A,[64241,,401406]	;CR LF FF
	.IOT LPTC,A
A.LP1:	MOVE A,[-LPBUFL,,LPBUF]
	.IOT UTYIC,A
	JUMPGE A,A.LP4
	MOVSI B,(^C_<44-7>)
	MOVEM B,(A)
A.LP4:	MOVE R,[A.LPC,,B]
	BLT R,ALPTP
	JRST B

A.LP5:	MOVE B,[-LPBUFL,,LPBUF]
	HRRZS ALPTP
	CAIN ALPTP,LPBUF+LPBUFL
	JRST A.LP6A
	SUBI ALPTP,LPBUF-1
	MOVNS ALPTP
	HRL B,ALPTP
	HRRI B,LPBUF
A.LP6:	.IOT LPTC,B
	.CLOSE LPTC,
	.CLOSE UTYIC,
	POP P,FNAM2
	POP P,FNAM1
	.IOPOP UTYIC,
	POPJ P,

A.LP6A:	.IOT LPTC,B
	JRST A.LP1

A.LPC:
OFFSET B-.
	ILDB R,ALPTP
	CAIE R,^C
	JRST .-2
	JRST A.LP5
ALPTP:	440700,,LPBUF
OFFSET 0
A.LFNF:	POP P,FNAM2
	POP P,FNAM1
	.IOPOP UTYIC,
	.BARF FILE NOT FOUND

LPBUF:	BLOCK LPBUFL
	^C_<44-7>

OUTCLS:	MOVEI A,14	;CLOSE OUT BLOCK OUTPUT
	PUSHJ P,UTYOA
	MOVEI A,^C
	MOVSI B,760000	;MASK TO TEST BYTEPNTR IN LAST CHARACTER POSITION
	PUSHJ P,UTYOA
	TDNE B,OUTPNR
	JRST .-2
	MOVEI A,OUTBF-1
	SUBI A,@OUTPNR
	HRLI A,OUTBF
	MOVSS A
	.IOT LPTC,A
	.CLOSE LPTC,
	POPJ P,

UTYOA:	SOSGE NOUTCH	;ROOM STILL IN BUFFER?
	JRST UTYOA1
	IDPB A,OUTPNR
	POPJ P,

UTYOA1:	MOVEM B,UTYOSV	;THIS BLOCK FULL
	MOVE B,[-LOUTBF,,OUTBF]
	.IOT LPTC,B
	MOVEI B,LOUTBF*5
	MOVEM B,NOUTCH
	MOVE B,[440700,,OUTBF]
	MOVEM B,OUTPNR
	MOVE B,UTYOSV
	JRST UTYOA	;OUTPUT CHARACTER THAT DIDNT FIT IN PREVIOUS BUFFER

UTYOSV:	0	;AC TEMPORARY
NOUTCH:	LOUTBF*5	;NO OF CHARS REMAINING TO BE FILLED IN BUFFER
OUTPNR:	440700,,OUTBF	;PNTR INTO BUFFER
OUTBF:	BLOCK LOUTBF	;BUFFER FOR CHARACTER BLOCK OUTPUT

U.CH:	HRRZ A,40
UTYO:	.IOT A	;OR JRST NC1 OR PUSHJ P,UTYOA
	SKIPL COLMF
	POPJ P,
	CAIE A,12
	AOS COLMCT
	CAIN A,15
	CLEARM COLMCT
	POPJ P,

U.DPT:	CLEARM ERRAC	;18 BOIT ARGUMENT IN EFF ADR OF UUO
U.RDPT:	HRRE A,40
	SKIPL B,A
	JRST U.D2
	MOVEI A,"-
	PUSHJ P,UTYO
	SOS ERRAC
	MOVM A,B
U.D2:	IDIVI A,10.
	HRLM A+1,(P)
	SOS ERRAC	;HAS COUNT OF # SPACES TO RIGHT JUSTIFY
	JUMPE A,U.D3
	PUSHJ P,U.D2
U.D4:	HLRZ A,(P)
	ADDI A,"0
	JRST UTYO


U.D3:	SKIPG B,ERRAC	;NEED ANY MORE SPACES?
	JRST U.D4
	MOVEI A,40
	PUSHJ P,UTYO
	SOJG B,.-1
	JRST U.D4

NC1:	CAIN A,12	;PUSHJED TO FOR EACH CHAR
	POPJ P,
	CAIE A,15	;IF END OF THIS COLUMNS LINE, GO TO NEXT COLMN
	JRST NC1A
	MOVEM A,UUOAC+A(R)
	MOVEM B,UUOAC+B(R)
NC1B:	AOS A,CCOLM	;NEXT COLMN TO RUN
	CAMGE A,NCOLM	;END OF REAL LINE
	JRST NC3	;GO TO NEXT USR
NC1D:	PUSH P,[NC3A]
NC1C:	CLEARM CCOLM	;END OF LINE
	MOVE B,[440700,,NCBUF]
NC4A:	CAMN B,NCP
	JRST NC4
	ILDB A,B	;OUTPUT LINE TO FILE
	PUSHJ P,NC2
	JRST NC4A

NC4:	MOVE B,[440700,,NCBUF]
	MOVEM B,NCP
	MOVEI A,15
	PUSHJ P,NC2
	MOVEI A,12
NC2:	.IOT A	;OR PUSHJ P,UTYOA
	POPJ P,

NC1A:	AOS CH1,COLMCT	;ADD CHARACTER TO THIS COLUMN
	CAMG CH1,CHCOLM	;FLUSH CHARS OFF RIGHT END OF COLUMN
	IDPB A,NCP
	POPJ P,


NC3:	MOVE A,USER
	IDIVI A,L
	MOVE B,USER	;SEE IF REST OF USERS THIS LINE ARE WAITING
NC3B:	ADDI B,L
	AOS A
	CAML A,NCOLM
	JRST NC1D	;NO MORE CRUD ON THIS LINE
	SKIPGE UWAIT(B)
	JRST NC3B
	MOVE A,CHCOLM	;FILL OUT REST OF COLM TO NEXT ACTIVE USR
	SUB A,COLMCT
	JUMPLE A,NC3A
	MOVEI B,40
	IDPB B,NCP
	SOJG A,.-1
NC3A:	CLEARM COLMCT
	MOVE R,CCOLM
	IMULI R,L
SWITCH:	CAMN R,USER
	JRST SWT1
	MOVE CH2,USER	;FLUSH "USER", LOAD "R"
	MOVEM C,UUOAC+C(CH2)
	MOVEM D,UUOAC+D(CH2)
	MOVEM P,UUOP(CH2)
	MOVE A,[UAC,,USRAC]
	ADD A,CH2
	BLT A,USRAC+17(CH2)
	MOVE A,ERROR
	MOVEM A,SUUOH(CH2)

	MOVE P,UUOP(R)
	MOVE A,SUUOH(R)
	MOVEM A,ERROR
	MOVE A,[UAC,,USRAC]
	ADD A,R
	MOVSS A
	BLT A,UAC+17
	MOVE D,[A,,UUOAC+A]
	ADD D,R
	MOVSS D
	BLT D,D
	MOVEM R,USER
	SKIPGE UWAIT(R)
	JRST NC1B	;FLUSH THIS GUYS OUTPUT UNTIL REST ARE DONE
	POPJ P,	;CONTINUE NEW USR

SWT1:	MOVE A,USER
	IDIVI A,L
	CAME A,CCOLM	;INTERNAL ERROR
	.VALUE
	HRRZ A,P
	CAIG A,USRPDL+LUSRP(R)
	CAIGE A,UUOP(R)
	.VALUE	;BAD PDL PTR
	MOVE A,UUOAC+A(R)
	MOVE B,UUOAC+B(R)
	POPJ P,
;.ICOLM #	;STARTS # PC'S AT THIS POINT,
;	EACH WITH OWN SET OF AC'S AND PDL
;.WAIT	;WAITS UNTIL ALL PC'S ARE AT THIS POINT
;	THEN STARTS THEM UP IN ORDER
;.DONE ADR	;SIGNALS END OF PRINTOUT,
;	TRANSFER OCCURS WHEN ALL PC'S HANG ON .WAIT

A.ICOL:	SETOM DONF	;INITIALIZE MULTI-COLM SIMULATOR
	MOVE A,[440700,,NCBUF]
	MOVEM A,NCP
	CLEARM CCOLM
	CLEARM NWAIT
	HRRZ A,40	;NO. OF COLMNS
	SKIPE A
	CAILE A,MXSCM
	JRST 4,.
	MOVEM A,NCOLM
	MOVEI A,120.	;WIDTH OF LPT PAPER
	IDIV A,NCOLM
	MOVEM A,CHCOLM
	MOVE A,ERROR
	MOVEM A,SUUOH
	MOVE A,[UAC,,USRAC]
	BLT A,USRAC+17
	CLEARM UWAIT
	MOVEI A,URET
	MOVEM A,USRPDL	;INITIAL RETURN
	MOVE A,[USRAC,,USRAC+L]
	BLT A,USRAC+L*MXSCM-1	;SET UP OTHER USERS
	MOVEI B,0
	MOVE A,[-LUSRP,,USRPDL]
A.IC1:	MOVEM A,UUOP(B)
	ADDI A,L
	ADDI B,L
	CAIGE B,L*MXSCM
	JRST A.IC1
	MOVEM P,PDLSV
	MOVE P,UUOP
	POPJ P,	;URET


A.WAIT:	SETOM UWAIT(R)
	AOS A,NWAIT
	CAMGE A,NCOLM
	JRST NC1B	;FLUSH THIS GUY TEMP
	PUSHJ P,NC1C	;END OF LINE
	SKIPL DONF
	JRST A.DN1
	CLEARB A,NWAIT	;EVERYONE WAITING, MORE CRUFT TO GO
A.WT1:	CLEARM UWAIT(A)
	ADDI A,L
	CAIGE A,L*MXSCM
	JRST A.WT1
	CLEARB R,COLMCT
	JRST SWITCH	;START WITH USER 0

A.DONE:	MOVE C,CCOLM
A.DN2:	SKIPL UWAIT(R)	;DONE WITH JOB,FLUSH ALL FURTHER COLMS
	AOS B,NWAIT
	SETOM UWAIT(R)
	ADDI R,L
	AOS C
	CAMGE C,NCOLM
	JRST A.DN2
	HRRZ A,40	;PLACE TO JRST TO WHEN DONE
	MOVEM A,DONPC
	CLEARM DONF
	CAMGE B,NCOLM
	JRST NC1B	;NOT QUITE DONE
A.DN1:	MOVE P,PDLSV
	MOVE A,DONPC
	MOVEM A,ERROR
	SETOM NCOLM	;FLUSH MULTI COLM MODE
	POPJ P,	;URET FROM A.ICOLM CALL


U.COLMN:	SKIPL COLMF
	POPJ P,
	MOVEI A,40
	HRRZ B,40
	PUSHJ P,UTYO
	CAMLE B,COLMCT
	JRST .-2
	POPJ P,

U.7TYP:	MOVE B,40
U.7TY1:	HRLI B,440700
	ILDB A,B
	JUMPE A,CPOPJ
	PUSHJ P,UTYO
	JRST .-3

U.SIXO:	HRRZ A,40
	CAIL A,A
	CAILE A,17
	SKIPA B,(A)
	MOVE B,UAC(A)
U.S2:	JUMPE B,CPOPJ
	MOVEI A,0
	LSHC A,6
	ADDI A,40
	PUSHJ P,UTYO
	JRST U.S2

UAC:	BLOCK 20
INTAC:	BLOCK 20
USRSTG==.
USRAC:	BLOCK 20
SUUOH:	0	;USER PC
UWAIT:	0	;-1 MEANS THIS COLM WAITING FOR END OF OTHERS
UUOAC=.-A
	BLOCK D+1-A	;STG FOR UUO LEVEL AC'S A,B,C,D
UUOP:	0	;FOR USER P
USRPDL:	URET	;RETURN FOR INITIAL HACK
	BLOCK LUSRP
L==.-USRSTG
	BLOCK L*<MXSCM-1>

COLMCT:	0	;CHAR POSIITION WITHIN COLM
NCOLM:	-1	;NUMBER OF COLMS SIMULATED ON PAPER,-1 IF FEATURE NOT ACTIVE
CCOLM:	0	;# OF SIMULATED COLM CURRENT
NWAIT:	0	;NO OF USERS WAITING
PDLSV:	0	;MAIN PRGM P, SAVED AT ICOLMN
CHCOLM:	0	;CHARS PER SIMULATED COLM
DONF:	-1	;-1 NOT DONE,0 WAITING FOR DONE
DONPC:	0	; PC TO TRANSFER TO WHEN DONE
NCP:	0	;INPUT PTR FOR NCBUF
NCBUF:	BLOCK 120./5
BAC==270400

URET:	MOVE A,[.IOT A]
	MOVEM A,UTYO	;RESET OUTPUT FROM [JRST NC1]
	MOVE 17,[UAC+A,,A]
	BLT 17,17
	JRST 2,@ERROR

COLMF:	0	;-1 MEANS COLMN IS COUNTED
FAULTC:	LPTC	;FAULT CHAN FOR UU0AC=0
ERRAC:	0	;AC FIELD OF UUO
TYOINS:	.IOT A	;DPBED INTO WITH CURRENT CHANNEL NO.

ERROR:	0
	MOVEM A,UAC+A
	MOVE A,[A+1,,UAC+A+1]
	BLT A,UAC+17
	LDB A,[330600,,40]
	JUMPE A,[.BREAK .]
	LDB B,[BAC,,40]
	MOVEM B,ERRAC
	CAIE A,<.RDPT>_-33	;.RDPT DOSENT SPECIFY OUTPUT CHNL IN AC
	SKIPN B
	MOVE B,FAULTC
	DPB B,[BAC,,TYOINS]
	ORCMI A,77
	CLEARM COLMF
	MOVE C,TYOINS	;CHANNEL TO .IOT TO
	CAIE B,LPTC	;BLOCK OUTPUT?
	CAIN B,PRNTC
	SKIPA	;COLUMN HACKING IN THESE TWO MODES
	JRST ERR4A
	SETOM COLMF	;ENABLE COLUMN COUNTING
	CAIN B,LPTC	;LPTC HAS BLOCK OUTPUT
	MOVE C,[PUSHJ P,UTYOA]
	MOVEM C,NC2
	SKIPLE NCOLM	;IN MULTIPLE PC MODE?
	MOVE C,[JRST NC1]
ERR4A:	MOVEM C,UTYO
ERR4:	MOVE R,CCOLM
	IMULI R,L
	MOVEM R,USER'
	PUSH P,[URET]
	AOJE A,U.SIXO	;ONLY AC'S SAVED AT UUO LEVEL FOR MULTI COLM ARE A,B,C,D
	AOJE A,U.DPT
	AOJE A,U.CH
	AOJE A,U.COLMN
	AOJE A,U.7TYP
	AOJE A,A.ICOL
	AOJE A,A.WAIT
	AOJE A,A.DONE
	AOJE A,U.RDPT
	AOJE A,A.GRIPE
	AOJN A,[.BREAK .]
	HRRZ B,40
	HRLI B,440700
	ILDB A,B
	JUMPE A,ERR2A
	PUSHJ P,TYO
	JRST .-3

ERR2:	SOS B,ERROR
	LDB A,[140600,,(B)]
	PUSHJ P,TYOS
	LDB A,[60600,,(B)]
	PUSHJ P,TYOS
	LDB A,[600,,(B)]
	PUSHJ P,TYOS	;START ALL OVER AGAIN
	PUSHJ P,TSPAC
ERR2A:	MOVE A,LIMBO1
	CAIE A,15
	SKIPN UREAD
	JRST ERR1A
	MOVEI B,"]	;LEAVE MARKER AT POSITION OF ERR
	IDPB B,LINP
	MOVEI B,"[
	IDPB B,LINP
	PUSHJ P,RCH
	CAIE A,15
	JRST .-2
ERR1A:	MOVE B,[440700,,LINBUF]
ERR1:	ILDB A,B
	CAIE A,14
	CAIN A,12
	JRST .+2
	PUSHJ P,TYO
	CAME B,LINP
	CAIN A,15
	JRST .+2
	JRST ERR1
	JRST ERR3A

A.GRIP:	MOVE A,40
	HLRZ B,(A)	;RETURN ADDRESS IN LH OF WORD POINTED TO BY UUO
	CAIL B,FS	;HALF HEARTED CHECK
	.VALUE
	HRRM B,ERROR	;CLOBBER FOR RETURN
	HRRZ B,(A)	;PNTR TO TEXT IN RT HALF OF C(E)
	PUSHJ P,U.7TY1
	PUSHJ P,OUTERR	;OUTPUT CURRENT INPUT LINE
	JRST URET
APRNTX:	MOVE A,LIMBO1
	CAIN A,40
	PUSHJ P,RCH
	MOVEM A,PRNTCH'
APRNTL:	PUSHJ P,RCH
	CAMN A,PRNTCH
	POPJ P,
	PUSHJ P,TYO
	JRST APRNTL

HACKGO:	MOVE P,[-PDLL,,PDL]
	.OPEN TYOC,TTYO
	.VALUE
	.STATUS TYOC,A
	ANDI A,77
	CLEARM GEMODE
	CAIN A,GETTY
	SETOM GEMODE
	.OPEN TYIC,TTYI
	.VALUE
	.SIXO TYOC,VERSION
	.CH TYOC,".
	.SIXO TYOC,VERSION+1
	.7TYP TYOC,[ASCIZ /    /]
	.SIXO TYOC,MODVER
	.CH TYOC,".
	.SIXO TYOC,MODVER+1
ERR3A:	SETOM UDEPTH
	CLEARM UREAD
	.IOPDL
ERR3:	MOVE P,[-PDLL,,PDL]
	PUSHJ P,CRLF
	MOVEI A,20000
	.SUSET [.SMASK,,A]
	CLEARB I,MDEPTH
	MOVEI A,DMYAGT
	MOVEM A,TOPP
	MOVEM A,BBASE
	MOVE A,[-NFOO,,STAB-3*NFOO]
	MOVEM A,SYMP
	MOVE A,[-MPDLL,,MACPDL]
	MOVEM A,MACP
	CLEARB FF,GENSM
	CLEARM ALLN
	MOVE A,[.IOT A]
	MOVEM A,UTYO
	SETOM NCOLM
	MOVEI A,LPTC
	MOVEM A,FAULTC
	.CLOSE F1C,
	.CLOSE F2C,
	.CLOSE F3C,
	.CLOSE LPTC,
	.CLOSE ECHOCH,

ASSEM1:	MOVE P,[-PDLL,,PDL]
	JRST MNLUP


MACTAB:	773767750000


	LOC MACTAB+MACL-1

STRSTO:	BLOCK STRL	;STRING STORAGE
DMYDEF:	BLOCK DMDEFL	;DMMY ARGS FOR MAC BEING DEFINED
DSTG:	BLOCK DSSIZ
DMYAGT:	BLOCK DMYAGL	;DMY ARG POINTER FOR MACROS BEING EXPANDED
TOPPP:
MACPDL:	BLOCK MPDLL
GCSV:	BLOCK 16

PDL:	BLOCK PDLL
ST:	BLOCK 3*SMK
NSYMS==0
STAB:

DEFINE ISYM C,B,D,E
LOC .-3
FOO11=SIXBIT /C/
FOO11	;FLUSH MORE THAN SIX CHAR
IFSE [B],[ A!C]
IFSN [B],[B]
IFSN [E],[E:	]
IFSE [D],0
IFSN [D],[D]

NSYMS==NSYMS+1
	LOC .-3
TERMIN

IF1,GSYM=0

IRPS A,,REPEAT DEFINE IRP TERMIN .QUOTE .STOP .RPCNT  PRINT SIXBIT ASCII .TAG .GO RADIX
ISYM A
TERMIN

ISYM PRINTX,APRNTX

ISYM IRPC,AIRP(400000)
ISYM IRPS,AIRP(200000)
ISYM .ISTOP,A.STOP(400000)
IRPS C,,G GE E LE N L,FOO,,IFG IFGE IFE IFLE IFN IFL
ISYM FOO,[JUMP!C A,COND
]
TERMIN
ISYM IFSN,[SKIPE SCOND]
ISYM IFSE,[SKIPN SCOND]
ISYM EQUALS


IRPS A,,.READ WIRE PUT .WIREL .UML .UNUSD END .MAP .LIST .LPT
ISYM A
TERMIN

IRPS A,,AUGAT PG13 CAMBION KG13 BOARD ALL CROSSREF LOCATE BACKPLANE RCROSS
ISYM A
TERMIN

IRPS A,,CRSRT PUTR RENAME ECHO EECHO CECHO .RAY NAUGAT
ISYM A
TERMIN

ISYM .R,A.READ

LOC STAB
NFOO==NSYMS

RCH:	TLZE FF,UNRCHF
	JRST RCH1
GETCHR:	TRNE FF,MACRCH
	JRST MRCH
	PUSHJ P,RPA
RCH2:	MOVEM A,LIMBO1
	IDPB A,LINP
	CAIE A,15
	JRST ECHO
RCHCR:	MOVE A,[440700,,LINBUF]
	MOVEM A,LINP
	MOVEI A,15
	MOVEM A,LIMBO1
ECHO:	SKIPE ECHOM
	SKIPN UREAD
	POPJ	P,
	CAIN A,15
	JRST ECHOCR
	SKIPN CRFLAG
	JRST ECHOUT
	SETZM CRFLAG
	CAIN A,^J
	JRST ECHOUT
	PUSH P,A
	MOVEI A,^J
	PUSHJ P,ECHOUT
	POP P,A
	CAIA
ECHOCR:	SETOM CRFLAG
ECHOUT:	.IOT ECHOCH,A
	POPJ P,

CRFLAG:	0


LINP:	440700,,LINBUF
LINBUF:	BLOCK 40

RCH1:	MOVE A,LIMBO1
	POPJ P,

CONS:	AOS A,FSP
	CLEARM (A)
	POPJ P,

NCONS:	PUSHJ P,CONS	;TAKE - NUMBER OF WORDS IN LH OF B AND SET UP CP1..CPN
	MOVEM A,CP1(B)
	AOBJN B,NCONS
	POPJ P,

REPEAT 20, CONC CP,\.RPCNT+1,:	0

PAT:
PATCH:	BLOCK 200

;MODULE TABLE
;;SIXBIT MODULE NAME
;;PTR TO DESC BLOCK

;DESC BLOCK FOR MODULE TYPE
;; 4.9 16 PIN SOCKET LH (PIN GND) RH (PIN VCC)
BVCC==600
BGND==220600
;;-# PINS,, PTR TO PIN TABLE
;; #SECTS,,PTR TO PIN NAME
LDHDR==3	;LNGTH OF HEADER
;  #SUBSECTION - SECTION 1
;  ...
;  #SUBSECTION - SECTION N
;PIN NAME TABLE
;  SIXBIT /NAME1/
;  ...
;  SIXBIT /NAME2/

;UMAP=>FS=>MODTYP+1=>DESC BLOCK

;;PIN TABLE (#PINS LONG)
BTYP==360600
;; LH 4.9 - 4.4 TYPE
;   1-GATE OUTPUT
;   2-FF1 OUTPUT
;   3-FF0 OUTPUT
;   4-AND GATE INPUT
;   5-OR GATE INPUT
;   6-AND OR INV INPUT
;   7-POWER PIN
;   10-CARD PIN
;   11-EXPANDER
;	12-OPEN COLLECTOR INVERTER
;	13 - RANDOM INPUT
;; 2.9 - 2.1 LOADING
BLOAD==111100
;	0 FOR SPECIAL  1-N FOR INPUT OR OUTPUT
;3.6-3.4 SECTION #
BSEC==250300
MSEC==70,,
;3.3-3.1 SUBSECT #
BSSEC==220300
MSSEC==7,,


;RESULT OF PUT STATEMENT
;; LOCN N OF UMAP CONTAINS
;	A,,PTR TO FREE STORAGE LIST AT MODULE INSTANCE
;;BLOCK IN FS
;; ,,PTR TO MODULE DESC TABLE AT NAME
;;  3WORD PER PIN -
;	WD1	LH PTR TO RUN NAME,,RH PTR TO NEXT PIN ON RUN
;	WD2	SLOT#,,PIN#
;	WD3	SEQUENCE # OF THIS RUN
NWPIN==3	;NO. OF WORDS PER PIN
;IN CASE PIN GOES TO GND
;	LH PTR TO CGND,,RH .
;GND ENTRY IN RNST DOES NOT POINT TO PIN
;IN CASE PIN GOES TO VCC
;LH POINTER TO CVCC,,RH .
;VCC ENTRY IN RNST DOES NOT POINT TO PIN

;;FORMAT OF SYMBOLIC RUN NAME TABLE
; 1ST WRD PTR TO TEXT
; 2 AND 3 , SLOT,,PIN FOR HIGH LEVEL AND LOW LEVEL
LRSYM==3

;FORMAT OF PIN SPEC
;"*" FOLLOWED BY RUN NAME
;	RUN NAME FOO- OR FOO(1)- OR FOO ETC.
;SLOT# AB-OUT
;(SLOT # PIN#)
;SLOT 0 STANDS FOR CARD PINS

;FORMAT OF LEVEL1 AND LEVEL2 FILES

;3 WDS PER WIRE
;WD1  SEQUENCE # OF THE RUN THIS WIRE IS ON
;WD2  SLOT#,,ABSOLUTE PIN#
;4.9 BIT SAYS THAT THIS WIRE IS ONLY ONE ON THIS PIN
;AND SHOULD BE WRAPPED AT LOWEST LEVEL
;WD3  SLOT,,PIN FOR OTHER END OF WIRE

;FORMAT OF SIGREF FILE
;TEXT OF SIGNAL NAME IN ASCIZ FORMAT
;1.1 BIT OF LAST WORD =1 FOR LOW LEVEL (-)
;NEXT WORD HAS COUNT OF NO. OF PINS IN RT HALF
;PER PIN
;1ST WD  SLOT,,PIN PACKED TO LEFT BY POINTERS BSLOT,,BPIN
;2ND WD  SIXBIT MODULE NAME
;3RD WD  SIXBIT PIN NAME

;NEXT WORD HAS TOTAL LOAD IN RH, 3.1 =1 IF SOURCE ON THIS RUN
;EOF IS A ZERO IN FIRST WORD OF TEXT

;FORMAT OF LOCATE
;ASSUMES CROSSREFERENCE FILES READ IN
;LOCATE NAME,REAL BOARD #,X,Y

;FORMAT OF BACKPLANE
;SIGNAL NAME,BD SLOT PIN,BD SLOT PIN
;	BD SLOT PIN,...
;SIGNAL NAME,...
;- (THIS MEANS END OF LIST)

;FORMAT OF REMOVE
;RENAME OLD SIG,NEW SIG,BD1,BD2,...
MXBDTP==6

ANAUGAT:MOVEI A,4
	JRST ABRD1
AAUGAT:	TDZA A,A
ACAMBI:	MOVEI A,1
ABRD1:	CAIL A,MXBDTP
	.BARF ILLEGAL BOARD TYPE
	MOVEM A,BOARDT
	MOVE B,BDSLOT(A)
	MOVEM B,MNSL
	MOVE B,BDPIN(A)
	MOVEM B,NCPIN
	MOVNS B
	HRLM B,DCARD1
	POPJ P,

AKG13:	MOVEI A,3
	JRST ABRD1

APG13:	MOVEI A,5
	JRST ABRD1

BOARDT:	0	;TYPE OF BOARD

ABOARD:	PUSHJ P,AGETFD
	JRST ABRD1

DSPXY:	XYAUG	;GET X,Y FOR TYPE BOARD
	XYCAMB
	XYCAMB
	XYAUC	;AUGAT KG13 (CONNECTOR)
	XYAUG
	XYPG13
CHECK DSPXY,MXBDTP

DSPCRD:	CRDAUG
	CRDCAM
	CRDSML
	CRDAUC
	CRDNAG
	CRPG13
CHECK DSPCRD,MXBDTP

MPCOLM:	60./6,,5	;LH NO. OF LINES PER ENTRY IN MAP
	60./7,,8	;RH NO. OF COLMNS IN MAP
	60./3,,8
	60./6,,5
	60./6,,5
	60./6,,5
CHECK MPCOLM,MXBDTP

BDSLOT:	60.	;NO. OF SLOTS
	56.
	24.
	60.
	60.
	180.
CHECK BDSLOT,MXBDTP

BDPIN:	62.	;NO. OF CARD PINS
	70.
	70.
	66.
	70.
	100.*6
CHECK BDPIN,MXBDTP

BDNAME:	[ASCIZ /AUGAT/]
	[ASCIZ /CAMBION/]
	[ASCIZ /SMALL CAMBION/]
	[ASCIZ /KG13 AUGAT/]
	[ASCIZ /NEW AUGAT/]
	[ASCIZ /AUGAT PG13/]
CHECK BDNAME,MXBDTP

AECHO:	SETOM ECHOM
	.OPEN ECHOCH,ECHOFN
	PUSHJ P,A.LP2
AECH1:	SKIPN UREAD
	PUSHJ P,CRLF
	POPJ P,

ACECHO:	.IOT ECHOCH,[14]
	.CLOSE ECHOCH,
AEECHO:	SETZM ECHOM
	JRST AECH1

ECHOM:	0	;-1 MEANS PRINT EXPANDED MACROS ON LINE PRINTER
ECHOFN:	1,,(SIXBIT /LPT/)
	SIXBIT /ECHO/
	SIXBIT /OUTPUT/

AALL:	JSP R,AOPEN
	 LPTC+3_4
	 [SIXBIT /ALL/]
FOO2=[.ASCII /WIRELIST OF *!RNAM1
/]
	 FOO2
	MOVEI A,FOO2
	PUSHJ P,COPYIN	;RECORD INPUT FILE ON LISTING
	SETOM ALLN
	PUSHJ P,A.UNUS
	PUSHJ P,A.WIRE
	.CH 14
	PUSHJ P,A.UML
	.CH 14
	PUSHJ P,A.MAP
	CLEARM ALLN
	PUSHJ P,OUTCLS
	POPJ P,

ALLN:	0	;-1 MEANS PRINT ALL ON ONE FILE

COPYIN:	HRRM A,COPY1	;COPY LAST FILE READ ONTO OUTPUT
	.CH 14
	JSP R,HEADR
COPY1:	 0
	.CH 14
	.IOPUSH UTYIC,
	MOVEI A,0
	HRLM A,UTOB	;CHAR INPUT
	.OPEN UTYIC,UTOB
	JRST AALL1
	.IOT UTYIC,A
	JUMPL A,AALL1	;EOF
	PUSHJ P,UTYOA
	JRST .-3
AALL1:	.IOPOP UTYIC,
	POPJ P,
;FORMAT OF CROSS REFENCE TABLES

;IN ORDER OF OCCURANCE IN FREE STORAGE:
;FIRST;  HASH ENTRY TABLE, HASHL LONG
;RH POINTS TO BEADED LIST FOR EACH TEXT STRING
;WITH THIS HASH ENTRY

;SECOND AREA POINTED TO BY ACRP0 AT BOTTOM, ACRP AT TOP+1
;1ST WORD  LH POINTER TO TEXT BLOCK
;	RH POINTER TO NEXT LINK ON THIS HASH ENTRY
;2ND WORD	LH BITS INDICATING OUTPUT ON THE BOARD CORRESPONDING TO BIT POSITION
;	RH BITS INDICATING THIS BOARD CONTAINS THIS SIGNAL NAME
;3RD WORD LINK TO PIN CHAIN IN RH
NLINKW==3

;THIRD AREA POINTED TO BY  ACRP1 AT BOTTOM, ACRP2 AT TOP+1
;VARIABLE # WORDS PER ENTRY, 7 BIT ASCIZ
;1.1 BIT OF LAST WORD = 0 FOR HIGH, =1 FOR LOW

;FOURTH AREA  POINTED TO BY ACRP3,ACRP4
;BEADED CHAIN FOR EACH SIGNAL, BEAD CONTAINING WORD/PIN - PINS ON ONE BOARD
;1ST WD  LH N0. OF PIN ENTRIES
	;RH LINK TO NEXT BOARD PIN LIST
;2ND WD LH BOARD NO.   RH LINK TO OTHER PIN LIST ON THIS BOARD IF ANY
;3RD WORD  PNTR TO OLD SIGNAL NAME IF RENAMED IN RH
;	LOAD FOR THIS BOARD ON LH
LCRHDR==3

;FOLLOWING WDS, 1WD/PIN
;4.9 - 4.3  SLOT #
BSLOT==350700
;4.2 - 3.5 PIN #
BPIN==260700
;3.4 - 2.5 HASH INDEX FOR MODULE NAME
BMODHS==151100
LHASH1==777
;2.4 - 1.5 HASH INDEX FOR PIN TYPE
BPINHS==41100
LHASH2==777
;1.4 =1 THIS PIN IS CROSSCONNECTED ON THE BACKPLANE
BPINCN==30100


ACRFIL:	SIXBIT /  $DSK/
	0
	SIXBIT /SIGREF/

NBOARD:	0	;NO. OF BOARDS BEING CROSS REFERENCED
BDARY:	BLOCK 18.	;SIXBIT NAMES OF BOARDS
NBDARY:	BLOCK 18.	;NUMERIC NAME OF BOARD (ACTUAL PHYSICAL BOARD)

XBDARY:	BLOCK 18.	;OFFSET OF BOARD IN .1" (INDEX BY NUMERIC NAME)
YBDARY:	BLOCK 18.
ALBRD:	0	;BOARD BEING LOCATED
BKSIGN:	0	;SIGNAL NAME LINK POINTER
BKPIN1:	0	;BOARD,SLOT,PIN
BKPIN2:	0
PINX1:	0	;COORD OF PIN1
PINY1:	0
PINX2:	0	;COORD OF PIN2
PINY2:	0
HASHP:	0	;POINTER TO FIRST WORD OF HASH ARRAY
HASHP1:	0	;HASH TBL FOR MODULE NAMES
HASHP2:	0	;HASH PNTR FOR PIN NAMES
ACRP:	0	;POINTER TO END OF LINK STORAGE AREA+1
ACRP0:	0	;POINTER TO FIRST WORD OF LINK STORAGE
ACRP1:	0	;POINTER TO TEXT STORAGE AREA
ACRP2:	0	;POINTER TO TOP+1 OF TEXT AREA
ACRP3:	0	;PNTR TO BOTTOM OF PIN AREA
ACRP4:	0	;PNTR TO TOP+1 OF PIN AREA
NAMES:	BLOCK 120./5	;SIGNAL NAME READ FROM FILE
	0
NNAMES:	0	;NO. OF WDS-1 IN TEXT STRING OF SIGNAL NAME
NSOURC:	0	;NO. OF SOURCES ON RUN
LINKBK:	0	;POINTER TO PREVIOUS LOCN OF LINK
CRPINP:	0	;PNTR TO CURRENT PIN LIST BEING COMPILED
LOADT:	0	;TOTAL LOADING FOR THIS SIGNAL NAME
ARLNK1:	0	;LINK OF SIGNAL NAME BEING RENAMED
ARLNK2:	0	;LINK OF "  " RENAMING TO
ACROSS:	PUSHJ P,ARCROSS
	JRST ACRSRT

ARCROSS:	SETOM NBOARD
	SETOM XBDARY
	MOVE A,[XBDARY,,XBDARY+1]
	BLT A,YBDARY+17.
ACR1:	PUSHJ P,GETSYL	;READ NAME OF FILE
	AOS A,NBOARD
	CAIL A,18.
	.BARF TOO MANY BOARDS
	MOVEM SYM,BDARY(A)	;SAVE IN ARRY
	MOVE A,LIMBO1	;LST CHARACTER READ
	CAIE A,15
	CAIN A,12
	JRST .+2	;END OF LINE
	JRST ACR1
	MOVE A,FSP
	AOS A
	MOVEM A,HASHP
	CLEARM (A)
	MOVEI B,1(A)
	HRL B,A
	BLT B,HASHL+LHASH1+LHASH2-1(A)	;CLEAR OUT HASH ARRAY
	ADDI A,HASHL
	MOVEM A,HASHP1
	HRRM A,ACPX1
	ADDI A,LHASH1
	MOVEM A,HASHP2
	HRRM A,ACPX2
	ADDI A,LHASH2
	MOVEM A,ACRP
	MOVEM A,ACRP0
	ADDI A,100*NLINKW
	MOVEM A,ACRP1	;LEAVE ROOM FOR 100 LINKS TO START WITH
	MOVEM A,ACRP2
	ADDI A,400	;LEAVE ROOM FOR TEXT TO START
	MOVEM A,ACRP3
	MOVEM A,ACRP4
	SETOM NWIR	;TEMP COUNTER
ACR3:	AOS A,NWIR
	CAMLE A,NBOARD	;LAST BOARD?
	POPJ P,
	MOVE A,BDARY(A)	;NAME OF BOARD AND FILE
	MOVEM A,ACRFIL+1
	.OPEN F3C,ACRFIL
	JRST ACR2	;FILE NOT FOUND
ACR5:	MOVEI T,0	;COUNT OF # WORDS IN NAME STRING
	.IOT F3C,B	;READ IN 1ST WORD OF NAME
	JUMPE B,ACRFN	;EOF
	SKIPA
ACR5A:	.IOT F3C,B
	CAIL T,120./5	;TOO MANY CHARS IN NAME
	JRST ACR5B
	MOVEM B,NAMES(T)
	TRNE B,177_1	;LAST WORD HAS NULL CHARACTER
	AOJA T,ACR5A
ACR5C:	PUSHJ P,SIGLUK
	PUSHJ P,ACRSLT	;NAME NOT FOUND, STORE NEW ENTRY
ACR7:	MOVEI A,1	;THE NAME EXISTS, MARK NEW INFO
	LSH A,@NWIR	;SHIFT BIT OVER TO CORRESPOND TO BOARD INDEX
	IORM A,1(CH1)	;BIT MARKS THIS BOARD HAS THIS SIGNAL
	.IOT F3C,CH2	;NO. OF PINS
	HRRZS CH2
	SKIPE CH2
	CAILE CH2,MXPIN	;ERROR CHECK
	JRST 4,.
	MOVEI D,2(CH1)	;PNTR TO LINK TO PIN CHAIN
ACP1:	HRRZ C,(D)
	HLRZ T,1(C)	;BOARD INDEX FOR THIS ENTRY
	CAMN T,NWIR	;IS THIS THE NO. OF THE BOARD
	JRST ACP2A
	JUMPE C,ACP2B	;FIRST PINS SEEN ON THIS BOARD-SIGNAL NAME
	MOVE D,C	;SAVE BACK PNTR
	JRST ACP1

ACP2B:	MOVE A,ACRP4	;WHERE PIN LIST WILL BE STORED
	MOVEM A,CRPINP
	HRRM A,(D)	;STORE BACK INTO CDR
	HRLZM CH2,(A)	;STORE PIN COUNT IN LH OF PIN BEAD
	AOS ACRP4
	HRLZ A,NWIR	;PUT BOARD INDEX ON THIS PIN BEAD
	MOVEM A,@ACRP4	;END OF PIN CHAIN
	AOS ACRP4
	CLEARM @ACRP4	;NOT RENAMED
	AOS ACRP4
ACP3:	.IOT F3C,C	;GET SLOT#,,PIN #
	.IOT F3C,D	;GET MODULE NAME
	JSP R,HASH
ACPX1:	 A,,HASHP1
	 LHASH1
	DPB A,[BMODHS,,C]
	.IOT F3C,D
	JSP R,HASH
ACPX2:	 A,,HASHP2
	 LHASH2
	DPB A,[BPINHS,,C]
	MOVEM C,@ACRP4	;SALT AWAY PACKED INFO
	AOS ACRP4
	SOJG CH2,ACP3	;READ NEXT PIN FROM FILE
	.IOT F3C,B	;NEXT WORD OF FILE HAS LOAD AND SOURCEP
	MOVE CH2,CRPINP
	HRLM B,2(CH2)	;RECORD LOAD FOR THIS BOARD
	AND B,[1,,]	;LEAVE ONLY SOURCE BIT
	LSH B,@NWIR
	IORM B,1(CH1)	;BIT SAYS THIS BOARD HAS SIGNAL SOURCE
	JRST ACR5

ACP2A:	MOVEI D,1(C)	;PNTR TO LINK
	HRRZ C,(D)	;GET NEXT SET OF PINS
	JUMPE C,ACP2B	;END OF CHAIN
	JRST ACP2A

;ADD LINK
;A HAS PNTR TO RPLACD INTO
;T HAS N-1 WORDS IN NAMES
;RETURN- CH1 HAS PNTR TO LINK

ACRSLT:	MOVE CH1,ACRP
	HRRM CH1,(A)	;MARK LAST CDR TO POINT TO HERE, NEW ENTRY
	MOVEI A,NLINKW
	ADD A,ACRP
	CAML A,ACRP1	;CHECK FOR OUT OF ROOM
	PUSHJ P,ACRUP	;RELOCATE TEXT UPWARDS
ACRS1:	MOVEI A,NLINKW	;UPDATE NOW,AFTER RELOCATING
	ADDM A,ACRP
	HRLZ B,ACRP2	;POINTER TO WHERE TEXT WILL GO
	MOVEM B,(CH1)
	CLEARM 1(CH1)	;BIT WORD
	CLEARM 2(CH1)	;LOAD WORD
	MOVE A,ACRP2
	ADDI A,1(T)
	CAML A,ACRP3	;SEE IF TEXT RUNNING INTO PIN AREA
	PUSHJ P,ACRUPP	;RELOCATE UPWARDS
ACRS2A:	MOVEI TT,0
ACRS2:	MOVE A,NAMES(TT)	;SALT NAMES INTO TEXT AREA
	MOVEM A,@ACRP2
	AOS ACRP2
	CAMGE TT,T
	AOJA TT,ACRS2
	POPJ P,

ACRFN:	.CLOSE F3C,	;END OF FILE
	JRST ACR3

ACR5B:	.7TYP TYOC,NAMES
	.GRIPE .+1, NAME TOO LONG
	CLEARB B,NAMES+120./5-1	;TRUNCATE NAMES
	JRST ACR5C

;TAKES SIXBIT IN D, RETURNS HASH INDEX IN A
;1ST WD  TABLE PNTR (INDEX OF A)
;2ND WD  TABLE LENGTH

HASH:	MOVE AA,D
	TSC AA,AA
	TLZ AA,400000	;AVOID NEGATIVE REMAINDER
	IDIV AA,1(R)	;DIVIDE BY LENGTH
HASH1:	SKIPN @(R)
	MOVEM D,@(R)	;SLOT UNOCCUPIED, GOBBLE
	CAMN D,@(R)	;FOUND ENTRY ALREADY THERE?
	JRST 2(R)	;RETURN
	CAML A,1(R)	;END OF TABLE?
	MOVNI A,1	;WRAP AROUND
	AOJA A,HASH1

ACRUP:	MOVE A,ACRP4	;EXPAND LINK AREA
	SUB A,ACRP1	;NUMBER OF WORDS TO BE MOVED UP
	HRLS A
	HRR A,ACRP4	;+#WORDS,,TOP WORD TO BE MOVED
	SOS A
	POP A,100*NLINKW(A)	;MOVE TABLE UP
	TLNE A,-1
	JRST .-2
	MOVEI D,100*NLINKW
	PUSHJ P,ACPINR	;" " " TO PIN AREA
	PUSHJ P,ACTXTR	;RELOCATE POINTERS TO TEXT AREA
	POPJ P,

ACTXTR:	HRRZ B,ACRP0	;FIRST ENTRY IN LINK ARRAY
ACRU1:	HLRZ C,(B)
	ADD C,D	;RELOCATE UPWARDS TO POINT TO TEXT THAT WAS MOVED
	HRLM C,(B)
	MOVEI A,2(B)	;PIN CHAIN PNTR
ACRU4:	HRRZ C,(A)	;PIN BEAD
	JUMPE C,ACRU2	;END OF THIS SIGNAL LIST
	CAMGE C,ACRP4
	CAMGE C,ACRP3
	JRST 4,.	;PNTR OUT OF PIN AREA
	HRRZ A,C
ACRU5:	HRRZ AA,2(C)	;RELOCATE RENAME PNTR (IF ANY)
	JUMPE AA,ACRU3
	ADD AA,D
	HRRM AA,2(C)
ACRU3:	HRRZ C,1(C)
	JUMPN C,ACRU5	;END OF PIN EXTENSIONS
	JRST ACRU4

ACRU2:	ADDI B,NLINKW
	CAMGE B,ACRP	;UP TO END OF LINKS?
	JRST ACRU1
	ADDM D,ACRP1
	ADDM D,ACRP2	;RELOCATE POINTER TO TEXT ARRAY
	POPJ P,	;CONTINUE TO SALT AWAY LINK

ACPINR:	PUSH P,T
	HRRZ B,ACRP0	;RELOCATE PIN CHAIN
	ADDM D,ACRP3
	ADDM D,ACRP4
ACPNR4:	MOVEI A,2(B)	;LOCN OF PNTR TO PIN CHAIN
ACPNR2:	HRRZ C,(A)	;PNTR TO NEXT PIN INSTANCE
	JUMPE C,ACPNR1	;END OF LIST, GO TO NEXT SIGNAL
	ADD C,D
	HRRM C,(A)
	CAMGE C,ACRP4	;IS PNTR STILL IN PIN AREA
	CAMGE C,ACRP3
	JRST 4,.
	MOVE A,C
	MOVE T,A	;LOCN OF PNTR TO ADDON LISTS
ACPNR3:	HRRZ C,1(T)
	JUMPE C,ACPNR2	;END, DO NEXT BOARDS PINS
	ADD C,D
	HRRM C,1(T)
	CAMGE C,ACRP4
	CAMGE C,ACRP3
	JRST 4,.
	MOVE T,C
	JRST ACPNR3

ACPNR1:	ADDI B,NLINKW
	CAMGE B,ACRP	;DONE ALL LINKS?
	JRST ACPNR4
	JRST POPTJ

ACRUPP:	MOVE A,ACRP4	;EXPAND TEXT AREA
	SUB A,ACRP3	;NO OF WORDS IN PIN AREA
	HRLS A
	HRR A,ACRP4
	SOS A
	POP A,1000(A)
	TLNE A,-1
	JRST .-2
	MOVEI D,1000
	PUSHJ P,ACPINR
	POPJ P,

ACR2:	.SIXO TYOC,ACRFIL+1
	.CH TYOC,40
	.SIXO TYOC,ACRFIL+2
	.CH TYOC,40
	.7TYP TYOC,[ASCIZ / - FILE NOT FOUND
/]
	JRST ACR3

ACRSRT:	JSP R,AOPEN
	 LPTC+3_4	;CHARACTER OUTPUT
	 [SIXBIT /CROSSR/]
	 FOO1==[.ASCII /CROSS REFERENCE LISTING FOR *!RNAM1, THIS VERSION *!VERSION
/]
	 FOO1
	MOVEI A,FOO1
	PUSHJ P,COPYIN
	HRRZ A,ACRP0
	HRRZ B,ACRP	;BEGINNING,END OF LINK AREA
	PUSHJ P,SORT	;SORT LINKS INTO ALPHABETICAL ORDER BY SIGNAL NAMES
	HRRZ CH1,ACRP0
	.CR
ACRS3:	HLRZ A,(CH1)	;TEXT OF NAME
	PUSHJ P,PSIGNM
	.CR
	SETOM NSOURC
	CLEARM LOADT
	HRRZ CH2,2(CH1)	;LINK TO PIN CHAIN
	MOVEI T,1	;BIT TO TEST IN WORD
	MOVEI TT,0	;INDEX CORRESPONDING TO BIT NUMBER
ACRSR1:	TDNN T,1(CH1)	;BOARD HAS THIS SIGNAL?
	JRST ACRSR2
	.COLMN @ATAB1
	.SIXO BDARY(TT)
	JUMPE CH2,[.BREAK .]	;NOPINS ON THIS BOARD
	HLRZ R,1(CH2)	;BOARD INDEX FOR THESE PINS
	CAME R,TT	;SHOULD CORRESPOND
	.VALUE
	MOVE R,CH2
ACRSR4:	HRRZ A,2(R)	;RENAME POINTER IF ANY
	SKIPN A	;NOT RENAMED
	JRST ACRSR5
	.COLMN @ATAB2
	.CH "(
	PUSHJ P,PSIGNM	;PRINT OUT SIGNAL NAME RENAMED FROM
	.CH 2)
ACRSR5:	.COLMN @ATAB3
	HRLZ F,T
	TDNE F,1(CH1)	;SOURCE ON THIS BOARD?
	.7TYP [ASCIZ /SOURCE/]
	TDNE F,1(CH1)
	AOS NSOURC
	.COLMN @ATAB4
	HLRE A,2(R)	;LOAD ON THIS BOARD
	ADDM A,LOADT
	PUSHJ P,PRNTN
	.CR
	HLRZ F,(R)	;NO. OFPINS
	MOVEI LINK,LCRHDR(R)	;PNTR TO FIRST PIN
ACRSR3:	.COLMN @ATAB1+1
	LDB A,[BPINCN,,(LINK)]	;IS THIS PIN CONNECTED ON BACKPLANE?
	SKIPN A
	.CH 40
	SKIPE A
	.CH "*
	.CH "(
	LDB A,[BSLOT,,(LINK)]	;SLOT #
	.DPT (A)
	.CH 40
	LDB A,[BPIN,,(LINK)]	;PIN #
	.DPT (A)
	.CH ")
	.COLMN @ATAB2+1
	LDB A,[BMODHS,,(LINK)]	;MODULE NAME
	ADD A,HASHP1
	.SIXO (A)
	.CH "-
	LDB A,[BPINHS,,(LINK)]	;PIN NAME
	ADD A,HASHP2
	.SIXO (A)
	.CR
	AOS LINK	;NEXT PIN
	SOJG F,ACRSR3
	.CR
	HRRZ R,1(R)	;OTHER PINS ON THIS BOARD?
	JUMPN R,ACRSR4
	HRRZ CH2,(CH2)	;NEXT BEAD ON PIN CHAIN
ACRSR2:	ROT T,1
	TLNN T,1	;DONE WITH 18. BITS
	AOJA TT,ACRSR1
	JUMPN CH2,[JRST 4,.]	;DIDNT GET ALL PINS PRINTED
	.COLMN @ATAB3
	.7TYP [ASCIZ /LOAD=/]
	.COLMN @ATAB4
	MOVE A,LOADT	;LOADING FOR ENTIRE SIGNAL
	PUSHJ P,PRNTN
	.COLMN @ATAB5
	SKIPL NSOURC
	SKIPLE LOADT
	JRST .+2
	.7TYP [ASCIZ /LOAD CAPACITY EXCEEDED /]
	SKIPLE NSOURC
	.7TYP [ASCIZ /MORE THAN ONE SOURCE /]
	SKIPGE NSOURC
	.7TYP [ASCIZ /NO SOURCE /]
	.CR
	.CR
	ADDI CH1,NLINKW	;NEXT SIGNAL
	CAMGE CH1,ACRP	;DONE ALL?
	JRST ACRS3
	PUSHJ P,OUTCLS
	POPJ P,


ATAB1:	10.
	11.
ATAB2:	20.
	22.
ATAB3:	30.
ATAB4:	40.
ATAB5:	50.

TSIGNM:	.7TYP TYOC,(A)
	MOVE B,(A)
	TRNE B,177_1	;LOOK FOR LAST WORD
	AOJA A,.-2
	TRNN B,1	;1.1 BIT = 0 => HIGH
	.CH TYOC,"+
	TRNE B,1
	.CH TYOC,"-
	POPJ P,

PSIGNM:	.7TYP (A)
	MOVE B,(A)
	TRNE B,177_1	;LOOK FOR LAST WORD
	AOJA A,.-2
	TRNN B,1	;1.1 BIT = 0 => HIGH
	.CH "+
	TRNE B,1
	.CH "-
	POPJ P,

;TAKES T = NO OF WORDS OF NAME
;TEXT OF NAME IN NAMES
;IF NOT OUND RETI;URN POINTER TO LOCN TO RPLACD NEW LINK INTO IN A
;SKIPS IF FOUND, CH1 HAS POINTER TO LINK
;CH2 HAS POINTER TO PREVIOUS LINK

SIGLUK:	MOVE AA,NAMES
	TSC AA,AA
	TLZ AA,400000
	IDIVI AA,HASHL	;HASH INTO A TABLE ENTRY
	ADD A,HASHP
	MOVE CH2,A
	SKIPN CH1,(A)	;ANY ENTRY?
	POPJ P,
ACR6:	MOVEM A,LINKBK	;SAVE POINTER FOR POSSIBLE RPLACDS
	HLRZ CH2,(CH1)	;POINTER TO TEXT
	MOVEI TT,0
ACR4:	MOVE A,(CH2)
	CAME A,NAMES(TT)
	JRST ACRNQ	;NAMES ARE NOT EQUAL
	AOS CH2
	CAME TT,T
	AOJA TT,ACR4
	MOVE CH2,LINKBK
	JRST POPJ1


ACRNQ:	MOVE A,CH1	;POINTER BACK TO CDR TO BE RPLACD
	HRRZ CH1,(CH1)	;GET NEXT ENTRY
	JUMPN CH1,ACR6	;NOT AT END OF STRING
	POPJ P,

RSIGNAM:	MOVE T,[10700,,NAMES-1]
RSIGN2:	TLNN T,760000	;START NEW WORD
	CLEARM 1(T)
	PUSHJ P,ARCH
	CAIE A,",
	CAIN A,15
	JRST RSIGN1
	CAIN A,"-
	TLO T,40	;RECORD MINUS SIGN IN UNUSED BIT OF BYTE PNTR
	CAIN A,"-
	JRST RSIGN2
	CAIE A,"+
	IDPB A,T
	JRST RSIGN2

RSIGN1:	MOVEI A,0
	IDPB A,T
	TLNE T,760000	;FILL REST OF WORD WITH ZEROS
	JRST .-2
	MOVEI A,1
	TLNE T,40	;WAS THERE A MINUS SIGN?
	IORM A,(T)
	SUBI T,NAMES
	HRRZS T
	POPJ P,

;READ BOARD,SLOT,PIN  RETURN IN A
RDBSP:	CLEARM ALBRD
	PUSHJ P,AGETFD
	DPB A,[360600,,ALBRD]
	PUSHJ P,AGETFD
	DPB A,[221400,,ALBRD]
	PUSHJ P,AGETFD
	HLL A,ALBRD
	POPJ P,

I
ABACKP:	JSP R,AOPEN
	 LPTC+3_4
	 [SIXBIT /BACKPL/]
	 FOO2==[.ASCII /BACKPLANE WIRING FOR *!RNAM1, THIS VERSION *!VERSION
/]
	 FOO2
	MOVEI A,FOO2
	PUSHJ P,COPYIN
ABACK2:	CLEARM NAMES
ABACK5:	PUSHJ P,RCH
	CAIN A,11
	JRST ABACK1	;READ ANOTHER PIN PAIR, ASSUME SAME SIGNAL NAME
	CAIE A,",
	CAIN A,15
	JRST ABACK5	;FLUSH OVER BREAK CHARS
	CAIN A,12
	JRST ABACK5
	TLO FF,UNRCHF	;REGURGITATE 1ST CHAR OF SIGNAL NAME
	PUSHJ P,RSIGNAM
	SKIPN A,NAMES	;IS THIS NULL NAME?
	JRST ABACK2	;IGNORE
	SOJE A,ABACKE	;END OF LIST, SINGLE MINUS SIGN
	MOVEM T,NNAMES
	PUSHJ P,SIGLUK	;LOOK UP SIGNAL NAME
	.GRIPE ABACK6,UNKNOWN SIGNAL NAME
	MOVEM CH1,BKSIGN
ABACK1:	PUSHJ P,RDBSP	;GET BOARD,SLOT,PIN
	MOVEM A,BKPIN1
	PUSHJ P,BKCHKP	;CHECK TO SEE IF PIN IS ON THIS SIGNAL RUN
	PUSHJ P,RDBSP
	MOVEM A,BKPIN2
	PUSHJ P,BKCHKP
	MOVE A,BKPIN2
	MOVE B,BKPIN1
ABACK7:	PUSHJ P,BDCOMP	;CALCULATE DISTANCE
	MOVE A,BKPIN1
	MOVE B,BKPIN2
	MOVE T,PINX1
	SUB T,PINX2	;X DIFFERENCE BETWEEN PINS
	MOVM CH1,T
	HRLS CH1	;BINARY POINT 18.
	IDIV CH1,C	;SIN OF ANGLE
	CAMG CH1,[.5_18.]	;IS ANGLE OF WIRE < 60 DEGREES
	JRST ABACK4
ABACK3:	SKIPG T	;IS A TO RIGHT OF B
	EXCH A,B
	ADDI C,WRAPMG	;EXTRA INSULATION
	.DPT (C)
	.COLMN 8
	PUSHJ P,PNBSP	;PRINT OUT PIN
	.COLMN 20.
	EXCH A,B
	PUSHJ P,PNBSP
	.COLMN 32.
	MOVEI A,NAMES
	PUSHJ P,PSIGNM
	.CR
	TLO FF,UNRCHF	;UNRCH TAB IF NEXT
	JRST ABACK5

ABACK6:	MOVEI A,[0]-1
	MOVEM A,BKSIGN	;DUMMY LINK,NO BOARDS
	PUSHJ P,RDBSP
	PUSH P,A
	PUSHJ P,RDBSP
	POP P,B
	JRST ABACK7

ABACKE:	JRST OUTCLS

ABACK4:	MOVE T,PINY2
	SUB T,PINY1
	JRST ABACK3

PNBSP:	.CH "(
	LDB C,[360600,,A]	;BOARD #
	.DPT (C)
	.CH 40
	LDB C,[221400,,A]	;SLOT #
	.DPT (C)
	.CH 40
	.DPT (A)
	.CH ")
	POPJ P,

;CHECK PIN IN A TO MAKE SURE IT IS ON THIS SIGNAL NAME

BKCHKP:	MOVE R,NBOARD
	LDB C,[360600,,A]	;BOARD #
	LDB B,[221400,,A]	;SLOT #
	HRRZ D,A	;PIN #
	CAME C,NBDARY(R)	;SEE IF THIS "BOARD" NAME IS ON PHYSICAL BOARD WERE LOOKING FOR
BKCH5:	SOJGE R,.-1
	JUMPL R,BKCH7
	MOVE CH1,BKSIGN
	MOVEI T,1
	LSH T,(R)	;BIT CORRESPONDING TO BOARD NAME
	TDNN T,1(CH1)	;IS THIS BOARD SHOWN PRESENT ON LINK BLOCK?
	JRST BKCH5	;TRY OTHER BOARD NAMES
	HRRZ CH2,2(CH1)	;GO DOWN PIN CHAIN LOOKING FOR THIS BOARD
BKCH6:	HLRZ T,1(CH2)	;GET BOARD NAME INDEX OFF THIS PIN LIST
	CAME T,R	;RIGHT PIN LIST
	JRST BKCH1	;NO, CHECK REST OF CHAIN
BKCH4:	HLRZ SYM,(CH2)	;NO. OF PINS IN LIST
	MOVNS SYM
	HRLI SYM,LCRHDR(CH2)	;PNTR TO PIN LIST
	MOVSS SYM	;AOBJN PTR
BKCH3:	LDB T,[BSLOT,,(SYM)]
	CAME T,B
	JRST BKCH2
	LDB T,[BPIN,,(SYM)]
	CAMN T,D
	JRST BKCH8	;WIN
BKCH2:	AOBJN SYM,BKCH3
	HRRZ CH2,1(CH2)	;SEE IF PIN LIST HAS EXPANSIONS
	JUMPN CH2,BKCH4
	JRST BKCH5	;TRY OTHER BOARD NAMES THAT MIGHT BE ON SAME PHYSICAL BOARD

BKCH1:	HRRZ CH2,(CH2)	;NEXT BOARD ON LIST
	JUMPN CH2,BKCH6
	.VALUE	;BOARD WAS MARKED IN LINK, WHAT HAPPENED TO IT

BKCH7:	MOVEI A,NAMES
	PUSHJ P,TSIGNM
	.GRIPE CPOPJ, SIGNAL NOT ON BOARD

OUTERR:	MOVE B,[440700,,LINBUF]	;TYPE OUT CURRENT INPUT LINE
	ILDB A,B
	PUSHJ P,TYO
	CAIE A,15
	CAMN B,LINP
	JRST .+2
	JRST .-5
	CAIN A,15
	POPJ P,
	MOVEI A,15
	PUSHJ P,TYO
	MOVEI A,12
	JRST TYO

BKCH8:	MOVEI T,1	;FOUND PIN
	DPB T,[BPINCN,,(SYM)]	;MARK PIN AS CROSSCONNECTED
	POPJ P,

SORT:	MOVEI D,0	;INDEX FOR WORD IN STRING BEING TESTED
	HRRM D,SORTX
	HRRM D,SORTX1
	MOVSI C,400000	;BIT IN WORD BEING TESTED
SORT1:	HRLM B,(P)	;SAVE PNTR TO END OF THIS BLOCK
	CAIL A,-NLINKW(B)	;MORE THAN ONE ENTRY?
	JRST SORT7
	PUSH P,A
SORT3:	HLRZ T,(A)
SORTX:	TDNN C,.(T)
	JRST SORT4	;TOP ENTRY < , LEAVE ALONE
	SUBI B,NLINKW	;BOTTOM ENTRY EITHER OK OR WILL BE FIXED
	HLRZ TT,(B)	;PNTR TO TEXT STRING
SORTX1:	TDNE C,.(TT)
	JRST SORT2	;BOTTOM WORD >, LEAVE ALONE
	REPEAT NLINKW,[
	MOVE F,.RPCNT(A)
	EXCH F,.RPCNT(B)
	MOVEM F,.RPCNT(A)]
SORT4:	ADDI A,NLINKW	;CHECKED TOP ENTRY GO TO NEXT
SORT2:	CAME A,B
	JRST SORT3
	POP P,A
	ROT C,-1	;MOVE TO NEXT BIT
	JUMPL C,SORTN	;END OF WORD, TRY NEXT
	PUSHJ P,SORT1	;SORT UPPER HALF (0)
	HLRZ B,(P)	;A NOW HAS POINTER TO MIDDLE
	PUSHJ P,SORT1	;SORT LOWER HALF
SORT6:	ROT C,1	;RESTORE
SORT7:	HLRZ A,(P)	;CLOBBER A FOR BUM ABOVE
	POPJ P,

SORTN:	PUSHJ P,SORTN2	;SKIP OVER ENTRIES THAT DONT HAVE FURTHER CHARACTERS
	HLRZ B,(P)
	PUSHJ P,SORTN2
	JRST SORT6

SORTN2:	CAIL A,(B)	;AT LEAST ONE ENTRY IN TOP HALF
	JRST SORTN1
	HLRZ T,(A)
	MOVE F,@SORTX	;TOP ENTRY TEXT WORD
	TRNE F,177_1	;IS THIS LAST TEXT WORD OF STRING
	JRST SORTN1
	ADDI A,NLINKW	;FLUSH THIS, NO MORE SRT NECESSARY
	JRST SORTN2

SORTN1:	PUSH P,SORTX
	PUSH P,SORTX1
	AOS D
	HRRM D,SORTX
	HRRM D,SORTX1
	PUSHJ P,SORT1
	POP P,SORTX
	POP P,SORTX1
	SOS D
	POPJ P,

ALOCAT:	PUSHJ P,GETSYL	;READ BOARD NAME
	MOVE A,NBOARD
	CAME SYM,BDARY(A)
	SOJGE A,.-1
	SKIPGE A
	.BARF BOARD UNDEFINED
	MOVEM A,ALBRD
	PUSHJ P,AGETFD
	MOVE B,ALBRD
	MOVEM A,NBDARY(B)
	MOVEM A,ALBRD
	PUSHJ P,AGETFD
	MOVE B,ALBRD
	SKIPL XBDARY(B)
	CAMN A,XBDARY(B)
	SKIPA
	.BARF BOARD X'S DISAGREE
	MOVEM A,XBDARY(B)
	PUSHJ P,AGETFD
	MOVE B,ALBRD
	SKIPL YBDARY(B)
	CAMN A,YBDARY(B)
	SKIPA
	.BARF BOARD Y'S DISAGREE
	MOVEM A,YBDARY(B)
	POPJ P,


ARENAM:	PUSHJ P,RSIGNAM	;FIND OLD SIGNAL
	PUSHJ P,SIGLUK
	JRST ARENM1	;NAME DOESNT EXIST
	MOVEM CH1,ARLNK1	;SAVE LOCN OF LINK
	PUSHJ P,RSIGNAM
	PUSHJ P,SIGLUK
	PUSHJ P,ARENM2	;NAME DOESNT EXIST, CREATE LINK
	MOVEM CH1,ARLNK2
ARENM3:	PUSHJ P,GETSYL	;READ BOARD TO RENAM SIGNAL ON
	MOVE T,NBOARD
	CAME SYM,BDARY(T)
	SOJGE T,.-1
	JUMPL T,ARENM4	;BOARD NOT FOUND, BARF
	MOVE A,ARLNK1	;SIGNAL NAME TO UNSPLICE FROM
	PUSHJ P,UNSPLICE
	MOVE A,ARLNK1
	HLRZ A,(A)	;GET TEXT NAME OFF OLD SIGNAL
	HRRM A,2(CH1)	;REMEMBER OLD NAME
	MOVE A,ARLNK2
	PUSHJ P,SPLICE
ARENM5:	MOVE A,LIMBO1
	CAIE A,15
	CAIN A,12
	POPJ P,
	JRST ARENM3

ARENM4:	.SIXO TYOC,SYM
	.7TYP TYOC,[ASCIZ / - BOARD NOT KNOWN
/]
	JRST ARENM5

ARENM1:	MOVEI A,NAMES
	PUSHJ P,TSIGNM
	.BARF NAME DOESNT EXIST

ARENM2:	MOVE A,CH2	;RPLACD BACK INTO
	JRST ACRSLT	;ADD LINK

;UNSPLICE PIN LIST, A HAS PNTR TO LINK
;T HAS INDEX OF BOARD
;TT HAS SOURCE BIT ON RETURN
;CH1 HAS PNTR TO PIN BLOCK REMOVED

UNSPLIC:	MOVEI B,1
	LSH B,(T)
	ANDCAM B,1(A)
	MOVSS TT,B
	AND TT,1(A)	;PICK UP SOURCE BIT
	SKIPE TT
	MOVEI TT,1
	MOVEI B,2(A)	;LOCN OF START OF PIN CHAIN IN LINK
UNSPL1:	HRRZ CH1,(B)	;NEXT BEAD ON CHAIN
	JUMPE CH1,[.BREAK .]
	HLRZ D,1(CH1)	;BOARD INDEX
	CAME D,T
	JRST UNSPL2
	HRRZ D,(CH1)	;GET CDR OF THIS BEAD
	HRRM D,(B)	;CHAIN NOW POINTS AROUND THIS BEAD
	POPJ P,

UNSPL2:	MOVE B,CH1
	JRST UNSPL1

;T HAS INDEX OF BOARD
;TT HAS SOURCE BIT
;CH1 HAS PNTR TO BEAD TO BE ADDED
;A HAS LINK PNTR

SPLICE:	MOVEI B,1
	LSH B,(T)
	IORM B,1(A)	;MARK BOARD AS ON THIS SIGNAL NAME
	MOVSS B
	SKIPE TT	;ADD SOURCE BIT
	IORM B,1(A)
	MOVEI B,2(A)
SPLIC3:	HRRZ C,(B)
	JUMPE C,SPLIC1	;END OF LIST, ADD ON
	HLRZ D,1(C)	;BOARD #
	CAMN D,T	;BOARD THERE, ADD EXTENSION
	JRST SPLIC2
	CAMG D,T	;FOUND LOCN ON LIST BOARD BELONGS
	JRST SPLIC4
SPLIC1:	HRRM C,(CH1)	;CLOBBER NEW BEAD TO POINT TO CDR OF CHAIN
	HRRM CH1,(B)	;CLOBBER HEAD OF CHAIN TO POINRT TO NEW BEAD
	POPJ P,

SPLIC2:	HRRZ D,1(C)	;PNTR TO PIN EXTENSION LIST
	HRRM D,1(CH1)	;ADD NEW BEAD TO EXTENSION
	HRRM CH1,1(C)
	POPJ P,

SPLIC4:	MOVE B,C
	JRST SPLIC3

AWIRE:	CLEARM RDPIN
	PUSHJ P,RPSPC
	JRST AWR1
	PUSH P,A
	MOVEM A,AWLST
AWR1B:	PUSHJ P,RPSPC
	JRST AWR2
	PUSHJ P,GPNAM
	JRST AWR3
	MOVE T,B	;PNTR TO RING AT OCCURANCE OF NAME
	MOVE D,C	;PNTR TO NAME
	EXCH A,(P)
	PUSHJ P,GPNAM
	JRST WRCNC	;NO NAME ON SECOND
	CAMN T,B	;SAME OCCUR OF ONE
	.GRIPE AWRERR, WIRE ALREADY THERE
	CAME D,C
	JRST AWR1D
AWR1F:	HRRZS (B)	;CLOBBER SECOND OCC OF NAME
	JRST WRCNC


AWR3:	EXCH A,(P)	;NO NAME ON FIRST
	PUSHJ P,GPIN	;CHECK FOR SAME PIN ON RUN
	CAMN B,(P)
	.GRIPE AWRERR, WIRE ALREADY THERE
	HRRZ B,(B)
	CAME B,A
	JRST .-4
WRCNC:	POP P,D
	HRRZ B,(D)
	HRRZ C,(A)
	HRRM C,(D)
	HRRM B,(A)
	JRST AWR1A

AWR1:	PUSH P,A
AWR1C:	PUSHJ P,RPSPC
	.GRIPE , UNDEFINED RUN NAMES
AWR2A:	MOVEM A,AWLST
	PUSH P,A
	PUSHJ P,GPNAM
	JRST AWRS
	CAMN C,-1(P)
	JRST 4,.	;NAME ON PIN RING,UNDEF
	MOVEI T,0	;FIRST PIN WAS UDEFINED RUN
	SUB P,[1,,1]
	JRST AWR1D


AWRS:	POP P,B	;SLOT#-PIN#
	POP P,C	;DEFINE RUN NAME
	HRLM C,(A)	;PUT NAME ON RING
	CAIE C,CVCC	;LEAVE ONLY MARKER ON VCC PINS
	CAIN C,CGND	;LEAVE ONLY MARKER ON GND PINS
	JRST AWR2B
	MOVEM B,(C)
AWR1A:	MOVE A,LIMBO1
	CAIE A,",
	JRST MNLUP
	PUSH P,AWLST
	JRST AWR1B

AWR2:	EXCH A,(P)
	JRST AWR2A	;PUT DEFINED PIN IN A,PTR TO RUN NAME IN (P)

AWLST:	0	;LAST PIN WIRED TO


AWR2B:	MOVE A,LIMBO1
	CAIE A,",
	JRST MNLUP
	PUSH P,C
	JRST AWR1C	;READ NEXT PIN

AWR1D:	PUSH P,FAULTC
	MOVEI A,TYOC
	MOVEM A,FAULTC	;CAUSE PRINTING TO TTY
	MOVE A,1(B)	;PICK UP SLOT,,PIN OF FIRST RUN
	PUSHJ P,PRUNM
	JUMPE T,AWR1G	;FIRST PIN NOT DEFINED YET
	MOVE A,1(T)	;SLOT,,PIN OF SECOND RUN
	PUSHJ P,PRUNM
AWR1G:	POP P,FAULTC
	.GRIPE .+1,SHORT
AWRERR:	SUB P,[1,,1]	;FLUSH EXTRA SLOT ON PDL
	JRST AWR1A	;IGNORE THIS WIRE COMMAND

APUTR:	AOSA PUTRFG
APUT:	SETOM PUTRFG
	PUSHJ P,GETSYL
	MOVE A,[-NMOD,,MODTYP]
APT2:	CAMN SYM,(A)
	JRST APUT1
	AOS A
	AOBJN A,APT2
	.GRIPE , UNDEFINED IC TYPE

APT3:	SKIPA A,PMODTP
APUT1:	MOVEM A,PMODTP
	HRRZ A,1(A)
	HLRZ B,2(A)
	MOVEM B,NSEC'
	MOVEM A,SECP'
	PUSHJ P,AGETFD
	SKIPLE A
	CAMLE A,MNSL
	.GRIPE APT6A, NON-EX SLOT
	SKIPE UMAP(A)
	.GRIPE APT6A, SLOT ALREADY OCCUPIED
	PUSH P,A	;SLOT #
	MOVEM A,PSLOT'
APT7:	PUSHJ P,CONS
	HRRZ B,PMODTP	;PNTR TO MODTYP
	MOVEM B,(A)
	POP P,B
	MOVEM A,UMAP(B)
	MOVE C,PMODTP
	HRRZ C,1(C)
	HLLZ C,1(C)	;-#PINS,,
	HRLS B	;SLOT #
APT8:	PUSHJ P,CONS
	MOVEM A,(A)	;PIN RING, INITIALLY POINTS TO SELF
	PUSHJ P,CONS
	HRRI B,1(C)
	MOVEM B,(A)	;SLOT#,,PIN#
	PUSHJ P,CONS	;SLOT FOR SEQUENCE #
	AOBJN C,APT8
	CLEARM NSC1'
APT6:	MOVE A,LIMBO1
	CAIN A,15
	POPJ P,
	SKIPL PUTRFG
	JRST APT3
	PUSHJ P,RRNAM
	JRST APT6	;NO NAME
	.GRIPE , SIGNAL NAME ALREADY DEFINED
	AOS C,NSC1
	CAMLE C,NSEC
	.GRIPE ,MORE NAMES THAN SECTIONS

APT5:	MOVE D,SECP
	SKIPL HILO
	AOS B	;PTR TO COMPLEMENTARY RUN NAME
	HRL T,PSLOT	;SLOT #,,
	HRRI T,1
	HRRZ TT,PSLOT
	HRRZ TT,UMAP(TT)
	AOS TT	;PNTR TO PIN RINGS
	MOVE D,1(D)	;PTR TO PIN TBL
APT5B:	LDB C,[BSEC,,(D)]
	CAME C,NSC1	;FIND ALL OUTPUTS THIS SEC
	JRST APT5A
	LDB C,[BTYP,,(D)]
	CAIE C,2	;FF1
	CAIN C,1	;GATE OUT
	JRST APT5C
	CAIE C,3	;FF0
	JRST APT5A
	SKIPE (B)
	.GRIPE , SIGNAL NAME ALREADY DEFINED
	HRLM B,(TT)	;PUT NAME ON PIN RING
	MOVEM T,(B)
APT5A:	AOS T
	ADDI TT,NWPIN
	AOBJN D,APT5B
	JRST APT6

APT5C:	SKIPE (A)
	.GRIPE , SIGNAL NAME ALREADY DEFINED
	MOVEM T,(A)
	HRLM A,(TT)
	JRST APT5A

APT6A:	SKIPL PUTRFG	;IF SLOT WAS OCCUPIED
	JRST APT6	;TRY NEXT SLOT
	JRST ASEMIC

ASEMC1:	PUSHJ P,RCH
ASEMIC:	MOVE A,LIMBO1	;TREAT REST OF LINE AS COMMENT
	CAIE A,15
	CAIN A,12
	JRST MNLUP
	JRST ASEMC1

PUTRFG:	0	;-1 FOR PUT, + FOR PUTR
PMODTP:	0	;PNTR TO MODULE NAME ENTRY

;READS PIN SPECIFICATION
;RETURNS SLOT#,,PIN# IN A
;SKIPS IF PIN DEFINED
;  OTHERWISE A HAS PTR TO NEW RUN NAME TABLE ENTRY
; B HAS PTR TO RUN NAME+1

RPSPC:	SKIPE RDPIN
	JRST RSPN	;IF IN CONTINUED EXPLICIT MODE
	PUSHJ P,RCH
	CAIN A,"*
	JRST RPRRN	;RUN NAME ASKED FOR
	CAIN A,"(
	AOSA RDPIN'	;ENTER EXPLICIT MODE
	TLOA FF,UNRCHF
	JRST RPNOPR
	PUSHJ P,AGETFD
	HRLM A,SLOTSV'
	PUSH P,A	;SLOT #
	SKIPL A
	CAMLE A,MNSL
	.GRIPE , NON-EX SLOT
	SKIPN T,UMAP(A)
	.GRIPE , EMPTY SLOT
	HRRZ T,(T)
	HRRZ T,1(T)	;PTR TO MODULE DESC BLK
	PUSH P,T
	SETZB CH1,CH2
	HLRZ A,2(T)	;NO OF SECTION
	MOVEM A,NSEC
	SOJ A,RPS1
	PUSHJ P,ARCH	;READ SECTION ID
	SUBI A,"A-1
	CAIG A,"Z-"A+1
	SKIPG A
	JRST RPS2
	DPB A,[BSEC,,CH1]
	TLO CH2,(MSEC)
RPS1:	PUSHJ P,ARCH
	SUBI A,"A-1
	CAIG A,"Z-"A+1
	SKIPG A
	JRST RPS2
	DPB A,[BSSEC,,CH1]
	TLO CH2,(MSSEC)
RPS2:	PUSH P,CH1
	PUSH P,CH2
	PUSHJ P,AGSYL
	POP P,CH2
	POP P,CH1
	MOVEI A,0
	MOVE T,(P)
	HRRZ TT,2(T)	;PNTR TO PIN NAME
	MOVE T,1(T)	;PNTR TO PIN ID
	TRNE TT,400000	;SEE IF DESCRIPTOR EXISTS
	.BARF ILLEGAL MODULE DESCRIPTOR

RPS4:	MOVE D,(T)
	AND D,CH2	;AND OFF SECTION AND SUBSECTION
	CAMN D,CH1
	CAME SYM,(TT)
	JRST RPS3
	SKIPE A
	.GRIPE , AMBIGUOUS PIN NAME
	MOVE A,TT	;PTR TO PIN NAME
RPS3:	AOS TT
	AOBJN T,RPS4
	SKIPN A
	.GRIPE , UNDEFINED PIN NAME
	MOVE T,(P)	;DESCRIPTOR BLOCK POINTER
	HRRZ T,2(T)
	SUBI A,-1(T)
RPP2:	HRL A,-1(P)
	SUB P,[2,,2]
	MOVEI B,0	;NOT SYM RUN NAME
	JRST POPJ1

BGETFD:	TLO I,AR+IGOP	;LIKE AGETFD BUT ALLOWS NULL FIELDS
	PUSHJ P,GETFLD	;IN WHICH CASE DOSEN'T SKIP
	TLZ I,AR+IGOP
	TRNN I,FLD
	POPJ P,
	JRST POPJ1

RPRRN:	PUSHJ P,RRNAM
	.GRIPE , NULL RUN NAME
	SKIPA A,(A)	;DEFINED RUN NAME
	POPJ P,
	JRST POPJ1

RSPN:	MOVE A,LIMBO2'	;CHECK PREVIOUS DELIMINATOR
	CAIE A,40
	CAIN A,",
	JRST RPPN
RPNOPR:	PUSHJ P,BGETFD	;LAST DELIM WAS "(, GET SLOT #
	HLR A,SLOTSV	;NULL FIELD, GET LAST SLOT #
	SKIPL A
	CAMLE A,MNSL
	.GRIPE , NON-EX SLOT
	SKIPN T,UMAP(A)
	.GRIPE , EMPTY SLOT
	HRRZ T,(T)
	HRRZ T,1(T)	;PTR TO MODULE DESC BLK
	MOVEM T,PNNSAV
	HRLM A,SLOTSV	;SAVE AWAY
	MOVE C,LIMBO1
	CAIE C,40
	CAIN C,",	;CHECK WHETHER EXPECT NEW PIN # FIELD OR USE OLD NUMBER
RPPN:	PUSHJ P,BGETFD	;GET PIN NUMBER
RPPN2:	HRRZ A,PINSAV'	;GET OLD PIN #
	HRRZM A,PINSAV
	MOVE B,PNNSAV'
	HLRE B,1(B)	;GET NO OF PINS
	MOVNS B
	SKIPLE A
	CAMLE A,B
	.GRIPE , NON-EX PIN
	HLL A,SLOTSV	;COMPOSITIFY
	MOVEI C,",
	EXCH C,LIMBO1	;MAKE AWIRE THINK THAT THE DELIM WAS ",
	MOVEM C,LIMBO2	;SAVE AWAY REAL DELIM
	CAIN C,40
	JRST POPJ1
	CAIE C,",
	CAIN C,"(
	JRST POPJ1
	MOVEM C,LIMBO1	;END OF CONTINUED MODE; IF THIS IS CAR RET, LE AWIRE SEE IT
	CLEARM RDPIN	;LEAVE CONTINUED MODE
RPPN1:	CAIE C,15
	CAIN C,",
	JRST POPJ1	;SUITABLE DELIM FOR AWIRE, RETURN
	PUSH P,A
	PUSHJ P,ARCH	;GET NEXT CHAR
	POP P,A
	MOVE C,LIMBO1
	JRST RPPN1


;RETURNS PTR TO CORRECT ENTRY IN A
;PTR TO SYM NAME+1 IN B
;SKIPS IF DEFINED
;SKIPS 2 IF NOT DEFINED

RRNAM:	HRRZ D,TEXP
	HRLI D,440700
	CLEARM HILO
	TLZ I,RVAL
RRN1:	PUSHJ P,ARCH
RRN1A:	CAIE A,15
	CAIN A,",
	JRST RRN2
	CAIN A,"(
	JRST RRPN
	CAIN A,"+
	JRST RRN1
	CAIN A,"-
	JRST RRMNS
	TLNN I,RVAL
	CAIE A,40
	JRST .+2
	JRST RRN1	;IGNORE LEADING SPACES
	TLO I,RVAL
	CAIN A,"'
	JRST RRN3
RRN4:	CAMN D,[10700,,TEXTB+LRNST-1]
	.BARF RUN NAME SCE
	IDPB A,D
	MOVE A,LIMBO1
	CAIE A,15
	CAIN A,",
	JRST RRN2
	CAIE A,40
	JRST RRN1
	PUSHJ P,ARCH	;SKIP OVER N-1 SPACES
	CAIN A,40
	JRST .-2
	JRST RRN1A


FRCH==20
RRN3:	PUSH P,D
	PUSHJ P,SGSYL
	POP P,D
	MOVE A,[-SPCHL,,FRCH]
	CAMN SYM,SPCHT-FRCH(A)
	JRST RRN4
	AOBJN A,.-2
	.GRIPE ,UNDEFINED CHARACTER TYPE

SPCHT:	IRPS A,,TO NE NOT AND OR
	SIXBIT /A/
	TERMIN
SPCHL==.-SPCHT

ARCH:	MOVE A,[B,,ARAC+B]
	BLT A,ARAC+17
	PUSHJ P,RCH
ARCH1:	MOVS 17,[B,,ARAC+B]
	BLT 17,17
	POPJ P,
ARAC:	BLOCK 20

SGSYL:	MOVE A,[B,,ARAC+B]
	BLT A,ARAC+17
	PUSHJ P,GSYL
	MOVEM SYM,ARAC+SYM
	MOVEM T,ARAC+T
	JRST ARCH1

RRN2:	TLZN I,RVAL
	POPJ P,	;NULL NAME
	MOVEI A,0
	IDPB A,D
	TLNE D,760000
	JRST .-2
	MOVEI D,1(D)
	EXCH D,TEXP
	MOVE A,RRSP
RRL1:	SUBI A,LRSYM
	CAIGE A,RRNST
	JRST RRUND
	MOVE B,D
	MOVE C,(A)
RRL2:	MOVE CH1,(B)
	CAME CH1,(C)
	JRST RRL1
	TRNN CH1,376	;0 IN LST CHR
	JRST RRLF
	AOS B
	AOJA C,RRL2

RRLF:	MOVEM D,TEXP	;ERASE NEWER DEFINITION
	MOVEI A,1(A)
RRU1:	MOVE B,A
	SKIPGE HILO
	AOS A
	SKIPN (A)
POPJ2:	AOS (P)
	JRST POPJ1

RRUND:	MOVE A,RRSP
	CAIL A,RRNST+LRSYM*NRUNS
	.BARF TOO MANY RUN NAMES
	MOVEM D,@RRSP
	AOS A,RRSP
	CLEARM (A)
	CLEARM 1(A)
	AOS RRSP
	AOS RRSP
	JRST RRU1


RRPN:	PUSH P,D
	PUSHJ P,AGETFD
	POP P,D
	CAIN A,1
	JRST .+3
	SKIPN A
	SETCMM HILO
	MOVE A,LIMBO1
	CAIE A,")
	TLO FF,UNRCHF
	JRST RRN1

RRMNS:	SETCMM HILO
	JRST RRN1

HILO:	0	;O FOR HIGH ASSERTION


A.WIRE:	.SUSET [.RRUNT,,A]
	MOVEM A,STRTIM
	MOVEI F,3
A.W4B:	JSP R,AOPEN
	 @CHNTB(F)
	 FILTB(F)
	 [.ASCII /WIRE LIST *!RNAM1, THIS VERSION *!VERSION /]
	SOJGE F,A.W4B
	.7TYP [ASCIZ /BOARD TYPE IS /]
	MOVE A,BOARDT
	.7TYP @BDNAME(A)
	PUSHJ P,PCR
	MOVE A,LIMBO1
	CAIE A,12
	CAIN A,15
	AOSA FASTM
	SETOM FASTM
	MOVEI B,1
	MOVEM B,RSEQN	;B HAS SLOT#,RSEQN IS SEQUENCE NO. OF RUN
	MOVEI B,0
A.W4:	SKIPN C,UMAP(B)
	JRST A.W1
	HRRZS C
	HRRZ D,(C)
	HRRZ D,1(D)
	HLRE D,1(D)	;NO. OF PINS THIS MODULE
	AOS C	;PTR TO FIRST PIN INSTANCE
	MOVEM D,NPINS
A.W2:	SKIPGE 1(C)
	JRST A.W5
	MOVE D,C
	MOVEI A,0
A.W3:	CAILE A,MXPIN
	JRST A.W3A
	MOVE CH1,1(D)
	MOVEM CH1,WRTAB(A)
	MOVE F,RSEQN
	MOVEM F,2(D)	;RECORD SEQUENCE
	MOVSI CH1,400000
	IORM CH1,1(D)	;MARK PIN AS OUTPUTED
	HRRZ D,(D)	;FOLLOW REST OF RING
	CAME D,C
	AOJA A,A.W3
	MOVEM A,NWIR
	JUMPE A,A.W3D	;ONLY ONE PIN
	PUSH P,C
	PUSH P,B
	MOVE A,[REPEAT 12.,[5*]5#SIXBIT /FOOBAR/]
	MOVEM A,RAND2	;ESTABLISH CONSISTENCY OF RESULTS BETWEEN VARIOUS RUNS
	PUSHJ P,OPFMX	;OPTIMIZE
A.W3C:	PUSHJ P,PRUN	;PRINT OUT RUN
	POP P,B
	POP P,C
	AOS RSEQN
A.W5:	ADDI C,NWPIN
	AOSGE NPINS
	JRST A.W2
A.W1:	CAMGE B,MNSL
	AOJA B,A.W4
	IRPS F,,F1C F2C F3C
	.IOT F,[0]	;SET EOF
	.CLOSE F,
	 TERMIN


	MOVEI B,0	;RESET MARKERS
A.W4A:	SKIPN C,UMAP(B)
	JRST A.W1A
	HRRZ D,(C)
	HRRZ D,1(D)
	HLRE D,1(D)
	AOS C	;PNTR TO PIN ENTRY IN FREE STORAGE
	MOVSI CH1,400000
A.W2A:	ANDCAM CH1,1(C)
	ADDI C,NWPIN
	AOJL D,A.W2A
A.W1A:	CAMGE B,MNSL
	AOJA B,A.W4A
	.CH 14
	JRST PPWR0

A.W3D:	HLRZ A,(D)	;PIN RING, PNTR TO RUN NAME (IF ANY)
	JUMPE A,A.W5	;NO NAME, FLUSH THIS PIN
	CAIE B,0	;WIRELIST VCC PINS ON SOCKET ZERO
	CAIE A,CVCC	;BUT DON'T ELSEWHERE
	CAIN A,CGND	;DONT WIRELIST GROUND PINS
	JRST A.W5
	CLEARM WIRT	;SIMULATE OPT (INDEX POINTS TO WRTAB(0))
	PUSH P,C	;NORMALIZE PDL
	PUSH P,B
	JRST A.W3C

WRAPMG==3	;.3" INSULATION WRAPPING MARGIN FOR PINS
MXWRIN==50.	;MAX LENGTH OF UNSTRIPPED WIRE
WRINSL==20.	;2" INSULATION MIN STRIPPED

WVCCP:	0	;PNTR TO VCC AT POINTER TRIPLE AREA
WLVL1P:	0	;"  "  " LEVEL1
WLVL2P:	0	;"   "   " LEVEL2
WLENGP:	0(T)	;PNTR TO BEGINNING OF LENGTH HISTOGRAM
WPHASE:	0	;0 OR LEVEL1, 1 FOR LEVEL2
	;OR 0 VCC, 1 LVL1, 2 LVL2 IN PRINTOUT

WINCHBF=.-1
	BLOCK MXWRIN

PWRTAG:	0	;# THAT CURRENT WIRE LENGTH IS REFFERED TO SYMBOLICALLY

PWMSG:	[ASCIZ /POWER-GROUND
/]
	[ASCIZ /LEVEL1
/]
	[ASCIZ /LEVEL2
/]


PWRTB:	IRPS A,,GND 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 VCC
	SIXBIT /A/
	TERMIN
PWRTOT:	0	;TOTAL WIRE USED, .1"
PPWXL:	0	;STOPPING POINT FOR PPWX
PPWXP:	WVCCP+1	;END
	WLVL2P+1

PPWXP1:	WVCCP	;START
	WLVL1P

PWR2CM:	4	;SPACING BETWEEN SLOT# AND PIN#S
	7
	7
PPGV:	0	;-1 FOR POWER SEARCH, 0 FOR GROUND SEARCH

PPWR0:	MOVE A,FSP
	AOS A
	MOVEM A,WVCCP
	SETOM SLTN
PPWL0:	AOS CH1,SLTN	;GO THROUGH SLOTS,MAKE UP VCC TABLE
	CAMLE CH1,MNSL
	JRST PPWL2	;DO LEVEL1,LEVEL2
	SETOM PPGV
	MOVEI CH2,17.	;SET UP FIRST PIN NUMBER AS VCC
	MOVEM CH2,WRTAB
PPWL0A:	CLEARM NWIR	;INITIALIZE POINTER INTO WRTAB
	HRLM CH1,WRTAB	;GIVE FIRST PIN SOCKET NUMBER
PPWL6:	SKIPN CH2,UMAP(CH1)	;SLOT OCCUPIED
	JRST PPWL0
	HRRZ F,(CH2)	;MODULE DEFINITION
	HRRZ F,1(F)	;MODULE DESCRIPTOR
	MOVE LINK,1(F)	;-NPINS,,PNTR TO PIN DESCRIPTOR
	MOVE SYM,2(F)	;PNTR TO OIN NAME
	AOS CH2	;POINT TO FIRST PIN ENTRY IN FREE STORAGE
PPWL1:	LDB A,[BTYP,,(LINK)]	;PIN TYPE
	CAIN A,PWR
	JRST PPWR	;POWER PIN
	HLRZ A,(CH2)	;GET RUN NAME FROM PIN RING
	CAIN A,CGND	;WIRED TO GND?
	SKIPE PPGV	;IT IS!! WELL IS THAT WHAT WE'RE LOOKING FOR?
	JRST .+2	;OH WELL
	JRST MRKPWQ	;GOODY
	CAIN A,CVCC	;MAY BE IT'S WIRED TO VCC
	SKIPL PPGV	;IT IS!! WELL IS THAT WHAT WE WANT?
	JRST PPWL3	;OH WELL MAY BE NEXT PIN
MRKPWQ:	HRRZ A,(CH2)	;THE VERY THING WE'RE LOOKING FOR
	CAIE A,(CH2)	;ONLY PIN ON RUN?
	JRST 4,.	;LOSE
	JRST MRKPWR	;RECORD THIS PIN

PPWL3:	ADDI CH2,NWPIN	;GO TO NEXT PIN
	AOS SYM
	AOBJN LINK,PPWL1
	SKIPG NWIR	;ANY GND WIRES
	JRST PPWL6E	;NO
	SKIPN SLTN	;SKIP OVER SLOW OPTIMIZE FOR SLOT ZERO
	PUSHJ P,FSTOPT	;POWER AND GROUND
	PUSHJ P,OPFMX	;OPTIMIZE RUN IN WRTAB
	SETOM WPHASE	;FLAG, LEVEL1 LEVEL2
	MOVEI CH1,1	;FIRST TWO PINS WIRED ON BOTTOM
	SKIPN SLTN
	MOVEI CH1,3	;IGNORE SLOT ZERO POWER PIN
PPWL6B:	CAMLE CH1,NWIR
	JRST PPWL6A
	MOVE B,WIRT-1(CH1)
	MOVE B,WRTAB(B)
	HRRZ A,B
	CAIE A,17.
	CAIN A,0
	JRST .+2	;DON'T BUGGER POWRE PINS
	PUSHJ P,ABSPNO
	MOVE A,B
	MOVE B,WIRT(CH1)
	MOVE B,WRTAB(B)
	PUSHJ P,ABSPNO
	PUSHJ P,ACOMP
	ADDI C,WRAPMG	;EXTRA INSULATION FOR WRAPPING AROUND PINS
	PUSHJ P,SALT
	ADDI CH1,2	;GO TO NEXT PIN PAIR
	JRST PPWL6B

FSTOPT:	MOVE CH1,NWIR
	MOVEM CH1,WIRT(CH1)
	SOJGE CH1,.-1
	JRST POPJ1

PPWL6A:	AOSE WPHASE	;LEVEL 2
	JRST PPWL6E
	MOVEI CH1,2	;2ND PIN PAIR
	JRST PPWL6B

PPWL6E:	AOSLE CH1,PPGV
	JRST PPWL0
	CLEARM WRTAB
	MOVE CH1,SLTN
	JRST PPWL0A

PPWR:	MOVE A,(SYM)	;NAME OF PIN IN MODULE DESCRIPTOR
	SKIPE PPGV	;VCC OR GND?
	JRST PPWR1
	CAME A,[SIXBIT /GND/]
	JRST PPWL3
MRKPWR:	MOVE B,1(CH2)	;SLOT,,PIN
	AOS A,NWIR	;INDEX INTO WRTAB
	MOVEM B,WRTAB(A)
	JRST PPWL3

SALT:	IRPS ABC,,A B C
	AOS FSP
	MOVEM ABC,@FSP
	TERMIN
	POPJ P,

PPWR1:	CAME A,[SIXBIT /VCC/]
	JRST PPWL3
	JRST MRKPWR

PPWL2:	CLEARB R,WPHASE	;DO LEVEL1
PPWL4:	MOVE A,FSP	;SAVE POINTER INTO BEGINNING OF THIS AREA
	AOS A
	MOVEM A,WLVL1P(R)
	MOVE A,[SIXBIT /LEVEL1LEVEL2/](R)
	MOVEM A,FWNAM2
	MOVEI A,4	;UNIT MODE INPUT
	DPB A,[220300,,FWNAM]
	.OPEN F1C,FWNAM	;LEVEL INPUT FILE
	.VALUE	;LOSE
	.FDELE FWNAM	;DELETE WHILE READING
	JFCL
PPWL5:	.IOT F1C,A	;SEQUENCE #
	JUMPE A,PPWL2A	;EOF
	.IOT F1C,A
	.IOT F1C,B	;PIN #1,PIN #2
	TLZ A,400000	;FLUSH BIT THAT SAYS THIS IS ONLY WRAP ON PIN
	TLZ B,400000
	ADD P,[5,,5]	;CREATE EXTRA SLOTS ON PDL
	PUSHJ P,DCXY1	;COMPUTE X,Y
	MOVEM C,-4(P)	;SAVE X,Y FOR COMPARISON
	MOVEM D,-3(P)
	PUSH P,C
	PUSH P,D
	EXCH A,B
	PUSHJ P,DCXY1	;X,Y FOR SECOND PIN
	MOVEM C,-4(P)
	MOVEM D,-3(P)
	MOVEI T,PPWL5A
	MOVEM T,-2(P)
	JRST DCOMP1

PPWL5A:	MOVE T,-3(P)	;X,Y FOR A IN -3,-2(P)
	SUB T,-1(P)	;X,Y FOR B IN -1,0(P)
	MOVM CH1,T
	HRLS CH1	;SHIFT BINARY POINT TO LEFT
	IDIV CH1,C	;SIN OF ANGLE
	CAMG CH1,[.5_18.]	;ANGLE < 60 DEGREES
	JRST PPWL5B
PPWL5C:	SKIPG T	;IS A RIGHT OF B?
	EXCH A,B	;MAKE RIGHTMOST IN A
	ADDI C,WRAPMG	;LENGTHEN FOR WRAPPING INSULATION AROUND PIN
	PUSHJ P,SALT
	SUB P,[4,,4]	;RESTORE PDL
	JRST PPWL5

PPWL5B:	MOVE T,(P)	;Y FOR PIN A
	SUB T,-2(P)	;Y FOR PIN B
	JRST PPWL5C	;CHECK FOR A ABOVE B (Y LESS THAN)

PPWL2A:	AOS R,WPHASE	;ADVANCE LEVEL
	CAIG R,1	;DONE WITH LEVEL1,LEVEL2
	JRST PPWL4
	.CLOSE F1C,
	CLEARM WPHASE
	PUSHJ P,PPWX	;WIRE LENGTHS, UNCUT
	PUSHJ P,PWRLX	;VCC WIRES
	AOS WPHASE	;DO LEVEL1,LEVEL2
	PUSHJ P,PPWX
	PUSHJ P,PWRLX	;LEVEL1
	AOS WPHASE
	PUSHJ P,PWRLX	;LEVEL2
	JRST A.W1B	;CLOSE OUTPUT FILE AND RETURN

PPWX:	CLEARM PWRTOT
	MOVE A,FSP	;PRINT UNCUT WIRE LENGTHS
	AOS A
	HRRM A,WLENGP	;POINTER TO LENGTH HISTOGRAM
	MOVE B,A
	HRLI B,1(B)	;(P+1)P
	MOVSS B
	CLEARM (A)
	BLT B,MXWRIN*10.-1(A)	;CLEAR OUT LENGTH ARRAY
	MOVE R,WPHASE
	HRRZ A,@PPWXP1(R)	;BEGINNING
	MOVEM A,PPWXL	;SET END TEST
	HRRZ R,@PPWXP(R)	;GET PNTR TO END OF WIRE DATA
	CAMN R,PPWXL	;NO WIRES
	POPJ P,
PPWL:	SUBI R,3
	MOVE T,2(R)	;LENGTH OF WIRE+WRAPMG
	CAIGE T,1+WRAPMG
	.VALUE	;COULDNT BE THIS SHORT
	AOS @WLENGP	;COUNT OF THIS WIRE LENGTH
	CAME R,PPWXL	;DONE YET?
	JRST PPWL
	.CH 14	;PRINT OUT WIRE SIZES
	JSP R,HEADR
	 [.ASCII /WIRE LENGTHS FOR *!RNAM1
THIS VERSION *!VERSION
/]
	.CR
	.7TYP [.ASCII /LENGTHS OF STRIPPED WIRES
ALLOWING !<WRINSL/10.> .!<WRINSL-<WRINSL/10.>*10.> INCHES OF STRIPPING
/]
	.CR
	.CR
	CLEARM PWRTAG
	MOVEI T,1+WRAPMG	;LENGTH OF MIN=.1"
	MOVEI CH1,10.	;START WITH 1" OR LESS INSULATION
PWNO6:	PUSH P,T
	MOVEI T,-10.(CH1)
	MOVEI A,0
	HRLI T,-10.
PWNO6C:	SKIPN B,@WLENGP	;ADD NO. OF WIRES WITHIN THIS INCH
	JRST PWNO6D
	MOVE C,B
	IDIVI C,8.	;12.5%
	ADDI B,2(C)
	ADDI A,2(B)	;ACCUMULATE TOTAL
PWNO6D:	AOBJN T,PWNO6C
	POP P,T
	JUMPE A,PWNO6A	;NO. WIRES THIS LENGTH
	MOVE B,A
	IMULI B,WRINSL(CH1)	;TOTAL LENGTH OF WIRE
	ADDM B,PWRTOT
	MOVEI CH2,WRINSL(CH1)	;TOTAL UNSTRIPPED
	IDIVI CH2,10.	;CONVERT TO INCHES
	.DPT (CH2)
	.7TYP [ASCIZ / INCHES, UNSTRIPPED  -  /]
	.COLMN 40.
	.DPT (A)	;NO. OF UNCUT WIRES THIS LENGTH
	.CR
PWNO5:	SKIPN A,@WLENGP	;GET COUNT
	JRST PWNO1	;LENGTH NOT USED
	.COLMN 20.
	CAIN T,1+WRAPMG
	JRST PWNOB	;BARE WIRE
	MOVE B,T	;PRINT INSULATION SIZE
	IDIVI B,10.	;CONVERT TO INCHES
	.DPT (B)
	.CH ".
	.DPT (C)
PWNO5A:	.COLMN 30.
	MOVE B,A
	IDIVI B,8.	;GET 10% OF COUNT
	ADDI A,2(B)
	.DPT (A)	;PRINT COUNT
;	.COLMN 36.
;	HRRZ A,PWRTAG
;	.RDPT 2,(A)
;	HRROM A,@WLENGP
	AOS PWRTAG
	.COLMN 42.
	.CH "(
	.CH 40
	.CH ")
	.CR
PWNO1:	CAIGE T,-1(CH1)	;SEE IF TO NEXT UNSTRIPPED SIZE
	AOJA T,PWNO5
	.CR
PWNO6B:	ADDI CH1,10.	;ADD AN INCH
	CAIGE CH1,MXWRIN*10.
	AOJA T,PWNO6
	.COLMN 40.
	MOVE A,PWRTOT
	IDIVI A,10.
	.DPT (A)
	.7TYP [ASCIZ / INCHES TOTAL
/]
	POPJ P,

PWRLX:	MOVE R,WPHASE	;PRINT OUT WRLIST FOR LEVEL IN WPHASE
PWRL3A:	.CH 14
	.7TYP @PWMSG(R)	;HEADING
	.CR
	HRRZ CH1,WVCCP(R)	;GET PNTR TO PIN ARRAY
PWRL3:	HRRZ CH2,WVCCP+1(R)	;SEE IF TO NEXT TYPE OF RUN
	CAML CH1,CH2
	POPJ P,
	MOVE T,2(CH1)	;LENGTH OF THIS WIRE
	SKIPGE A,@WLENGP	;SEE IF MOST COMMON
	JRST PWRMC	;YES,PRINT
	MOVE A,T	;LENGTH
	CAIN A,1+WRAPMG	;BARE WIRE
	JRST PWRMC1
;	IDIVI A,10.	;CONVERT TO IN.
	.RDPT 4,(A)	;PRINT RIGHT JUSTIFIED
;	.CH ".
;	.DPT (B)	;TENTHS OF INCHES
PWRL3B:	.COLMN 7
	.CH "(
	.CH 40
	.CH ")
	.COLMN 11.
	HLRZ A,(CH1)	;SLOT OF FIRST
	.DPT (A)
	HLRZ B,1(CH1)	;SLOT OF SECOND
	CAMN B,A	;DIFFERENT SLOTS
	JRST PWRL2
	.CH "-
	.DPT (B)	;SECOND SLOT
PWRL2:	HRRZ A,PWR2CM(R)	;SPACING BETWEEN COLUMN
	.COLMN 11.(A)
	MOVE A,(CH1)
	PUSHJ P,PPIN
	.CH "-
	MOVE A,1(CH1)
	PUSHJ P,PPIN
	.CR
	.CR
	ADDI CH1,3	;NEXT WIRE
	JRST PWRL3

PWRMC1:	.COLMN 2
	.7TYP [ASCIZ /BARE/]
	JRST PWRL3B

PWRMC:	.COLMN 2
	.RDPT 4,(A)
	JRST PWRL3B

PWNOB:	.7TYP [ASCIZ /BARE/]
	JRST PWNO5A

PWNO6A:	MOVEI T,-1(CH1)	;SKIP TO NEXT UNCUT INCH SIZE
	JRST PWNO6B


A.W1B:	SKIPL ALLN
	PUSHJ P,OUTCLS
	.SUSET [.RRUNT,,A]
	SUB A,STRTIM
	MULI A,4096.
	DIV A,[1000.*10000.]
	IDIVI A,100.
	.DPT TYOC,(A)
	.CH TYOC,".
	.DPT TYOC,(B)
	.7TYP TYOC,[ASCIZ / SECONDS
/]
	POPJ P,

NPINS:	0	;-N PINS IN THIS MOD
RSEQN:	0	;SEQUENCE # FOR RUNS
STRTIM:	0	;STARTING RUNTIME
FASTM:	0	;+ SLOW, -1 MEANS NO OPTIMIZATION

CHNTB:	LPTC+3_4	;MUST BE LAST OPENED
	F1C+5_4
	F2C+5_4
	F3C+5_4

FILTB:	IRPS A,,WRLIST LEVEL1 LEVEL2 SIGREF
	SIXBIT /A/
	TERMIN

A.W3A:	MOVEI A,TYOC
	MOVEM A,FAULTC
	MOVE A,1(D)
	PUSHJ P,PRUNM
	JFCL
	.BARF TOO MANY PINS ON RUN

PPIN:	TLZN A,-1	;SEE IF CONNECTOR PIN
	JRST PPIN1
	.SIXO PWRTB(A)
	POPJ P,

PPIN1:	.DPT (A)
	POPJ P,

PRUN:	CLEARM ILLDTP
	CLEARM LOAD
	CLEARM WIRLN
	MOVE T,NWIR
PRN0:	MOVE A,WIRT(T)	;PUT SLOT,,PIN IN OPT ORDER
	MOVE A,WRTAB(A)
	MOVEM A,WIRT(T)
	SOJGE T,PRN0
	CLEARM PRLVL
	MOVE T,NWIR	;FIND OUT WHETHER FIRST WIRE GOES ON TOP OR BOTTOM
	JUMPE T,PRN1E
;SOURCES WILL BE WIRED SO THAT ONLY ONE WIRE
;NEED BE REMOVED TO DISCONNECT SOURCE FROM LOADS

	MOVEI F,1	;START WITH 1ST WIRE ON 2ND LVL
	CAIN T,1
	SOJA F,PRN1C	;ONLY ONE WIRE, PUT ON BOTTOM LEVEL
	MOVE C,WIRT
	PUSHJ P,SRCP	;SEE IF FIRST PIN CONNECTED TO SOURCE
	JRST PRN1A	;NOT SOURCE HERE,CHECK OTHER END
PRN1C:	MOVEM F,PRLVL
	MOVEI A,0
	MOVSI B,400000	;MARK ENDS OF RUN TO BE WRAPPED AT BOTTOM OF PIN
	IORM B,WIRT
	IORM B,WIRT(T)
PRN1B:	MOVE B,RSEQN
	XCT IOUT(F)	;OUTPUT SEQUENCE #
	MOVE B,WIRT(A)
	PUSHJ P,ABSPNO
	XCT IOUT(F)	;OUTPUT WIRE PAIR ON LEVEL1 OR LEVEL2 FILE
	MOVE B,WIRT+1(A)
	PUSHJ P,ABSPNO
	XCT IOUT(F)
	TRC F,1	;NEXT WIRE ON OTHER LEVEL
	CAIGE A,-1(T)
	AOJA A,PRN1B
	MOVSI B,400000
	ANDCAM B,WIRT
	ANDCAM B,WIRT(T)


PRN1E:	.CH "#
	.CH 40
	.DPT @RSEQN
	PUSHJ P,PCR
	CLEARB T,LDTYP
	MOVE A,WIRT(T)
	PUSHJ P,PRNM
	JFCL
	SKIPGE A,LSTNAM
	JRST PRN1	;NO SIGNAL NAME THIS RUN
PRN5:	MOVE B,(A)
	TRZ B,1
	TRNN B,177_1	;LAST WORD OF STRING?
	JRST .+3
	.IOT F3C,B
	AOJA A,PRN5
	MOVE C,LSTSGN
	CAIN C,2	;LOW LEVEL
	TRO B,1
	.IOT F3C,B
	HRRZ C,NWIR	;NO. OF WIRES
	AOS C
	.IOT F3C,C	;OUTPUT TO FILE
PRN1:	SKIPGE LSTNAM
	JRST PRN5A
	MOVEI C,0
	MOVE B,WIRT(T)	;SLOT,,PIN
	PUSHJ P,ABSPNO	;DIDDLE 14 PIN DIPS
	DPB B,[BPIN,,C]	;PACK INTO ONE WD
	MOVSS B
	DPB B,[BSLOT,,C]
	.IOT F3C,C
PRN5A:	.COLMN @TAB	;PIN LOCATION
	HLRZ B,WIRT(T)
	.CH "(
	SKIPN B
	.7TYP [ASCIZ /CONN/]
	SKIPE B
	.DPT (B)
	.CH "-
	HRRZ A,WIRT(T)	;GET POINTER TO MODULE DESCRIPTOR
	HRRZ B,UMAP(B)
	HRRZ B,(B)
	HRRZ B,1(B)
	SKIPL (B)	;IS THIS 14 PIN DIP
	AOS A	;ADJUST PIN NO FOR DIP AT BOTTOM OF SOCKET
	.DPT (A)
	.CH ")
	HRRZ A,WIRT(T)
	.COLMN @TAB.5
	SKIPGE (B)	;NOT 14 PIN DIP
	JRST PRN1D
	.CH "[
	.DPT (A)
	.CH "]
PRN1D:	.COLMN @TAB1
	LDB A,[100,,PRLVL]
	SKIPN T
	SUBI A,2	;FIRST PIN
	CAMN T,NWIR
	ADDI A,2	;LAST PIN
	.SIXO PLVLTB+2(A)
	AOS PRLVL
	.COLMN @TAB2	;IC TYPE-IN/OUT
	HLRZ A,WIRT(T)
	HRRZ A,UMAP(A)
	HRRZ A,(A)	;SYM BLOCK FOR MOD
	MOVE B,(A)
	.SIXO B
	SKIPL LSTNAM	;IF SIGNAL NAME EXISTES, OUTPUT TO FILE
	.IOT F3C,B
	.CH "-
	HRRZ A,1(A)	;PNTR TO PIN DESCRIPTOR
	HRRZ LINK,2(A)	;PTR TO PIN NAME TBL
	HRRZ B,WIRT(T)	;PIN NUMBER
	ADDI LINK,-1(B)
	MOVE D,(LINK)	;PIN NAME
	SKIPL LSTNAM
	.IOT F3C,D
	.SIXO D
	HRRZ LINK,1(A)	;POINTER TO PIN DESCRIPTOR TABLE
	ADDI B,-1(LINK)	;PIN DESCRIPTOR
	LDB D,[BTYP,,(B)]	;PIN TYPE
	.COLMN @TAB3
	LDB C,[BLOAD,,(B)]
	MOVE CH1,LOAD
	SKIPL D
	CAIL D,LADDLD
	JRST 4,.	;BAD LOAD TYPE
	XCT ADDLD(D)
	MOVEM CH1,LOAD
	JUMPE C,PRN4A
	MOVE A,C
	PUSHJ P,PRNTN	;LOAD FOR THIS PIN
PRN4A:	MOVE A,LDTYP
	ANDCM A,LDPMT(D)
	SKIPE A
	.SIXO [SIXBIT /**/]
	SKIPE A
	SETOM ILLDTP
	MOVEI A,1
	LSH A,(D)
	IORM A,LDTYP


	.COLMN @TAB4
	SKIPN T
	JRST PRN4
	MOVE C,WIRT(T)
	MOVE D,WIRT-1(T)
	PUSHJ P,DCOMP
	ADDM C,WIRLN
	MOVE A,C
	PUSHJ P,PRNTN
	.SIXO [SIXBIT / IN./]
PRN4:	PUSHJ P,PCR
	CAMGE T,NWIR
	AOJA T,PRN1
	.COLMN @TAB3
	MOVE A,LOAD
	PUSHJ P,PRNTN
	.COLMN @TAB4
	MOVE A,WIRLN
	PUSHJ P,PRNTN
	.SIXO [SIXBIT / IN./]
	.COLMN @TAB5
	MOVE A,LDTYP
	TRNN A,2016	;OC,FF0,FF1,OUT
	JRST PRN2
	SKIPGE LOAD
	.7TYP [ASCIZ /LOAD CAPACITY EXCEEDED /]
	TRNN A,4560
	.7TYP [ASCIZ /NO LOAD/]
PRN3:	SKIPGE ILLDTP
	.7TYP [ASCIZ /ILLEGAL LOAD COMBINATION /]
	MOVE T,NWIR
	CAIGE T,NWOPT-1
	JRST PRN3A
	.CH 40
	MOVE A,NWINS
	.DPT 1(A)
	.CH "/
	.DPT NOPT

PRN3A:	PUSHJ P,PCR
	SKIPGE LSTNAM
	JRST PCR
	MOVE C,LDTYP
	MOVEI B,0
	TRNE C,2016	;OC,FFO,FF1,OUT
	TLO B,1
	HRR B,LOAD	;CUMMULATIVE LOADING
	.IOT F3C,B
	JRST PCR	;RETURN


IOUT:	.IOT F1C,B
	.IOT F2C,B
	.IOT F1C,B

PRN1A:	MOVE C,WIRT(T)	;CHECK END OF RUN FOR SOURCE
	PUSHJ P,SRCP
	SOJA F,PRN1C	;NOTHING SPECIAL, WIRE 1ST WIRE ON 1ST LVL
	TRNN T,1	;ODD # WIRES, 1ST ON 2ND LVL
	SOJA F,PRN1C	;EVEN #, 1ST WIRE ON 1ST LVL => LAST ON 2ND
	JRST PRN1C


ABSPNO:	PUSH P,T	;CONVERT SLOT#,,PIN# TO SLOT#,,ABSOLUTE PIN#
	HLRZ T,B	;SLOT #
	TRZ T,400000	;FLUSH 1WRAP BIT
	HRRZ T,UMAP(T)	;POINTER TO INSTANCE IN FREE STORAGE
	HRRZ T,(T)	;PNTR TO MODLE DEFINITION SLOT
	HRRZ T,1(T)	;PNTR TO MODULE DESCRIPTOR
	SKIPL (T)	;4.9 BIT SAYS THIS IS A 16 PIN DIP
	AOS B
POPTJ:	POP P,T
	POPJ P,

PN.SEQ:	PUSH P,B	;SLOT,,PIN IN A,  GIVES SEQNO. IN A
	PUSHJ P,GPIN	;GET POINTER TO PIN OCCURANCE IN FREE STORAGE
	MOVE A,2(B)	;SEQ #
	JRST POPBJ

GPIN:	HLRZ B,A	;TAKES SLOT#,,PIN# RET PNTR TO PIN RING
	SKIPN B,UMAP(B)
	JRST 4,.
	MOVEI A,-1(A)
	IMULI A,NWPIN
	AOS B
	ADDB A,B
	POPJ P,

GPNAM:	PUSHJ P,GPIN	;RET PNTR TO RUN NAME IN C
AWNAM:	HLRZ C,(B)
	JUMPN C,POPJ1
	HRRZ B,(B)
	CAME A,B
	JRST AWNAM
	POPJ P,

SRCP:	PUSH P,A
	PUSHJ P,GPTYP	;SLOT,,PIN IN C
	LDB A,[BTYP,,(C)]	;SKIP IF THIS PIN A SOURCE
	CAIN A,ICARD
	JRST POPAJ1
	CAIG A,FF0
	CAIGE A,OUT
	JRST POPAJ
POPAJ1:	POP P,A
	JRST POPJ1

PRNM:	SETOM LSTNAM
	PUSHJ P,GPNAM	;TAKES SLT,,PIN IN A, PRINTS SYMBOLIC RUN NAME
	POPJ P,
	SUBI C,RRNST
	IDIVI C,LRSYM
	IMULI C,LRSYM
	MOVE A,RRNST(C)
	MOVEM A,LSTNAM	;REMEMBER LAST RUN NAME
	MOVEM D,LSTSGN	;HIGH=1 LOW=2
	.7TYP (A)	;RUN NAME
	SKIPN D
	JRST 4,.
	CAIN D,1
	.CH "+
	CAIN D,2
	.CH "-
	JRST POPJ1

GPTYP:	HLRZ D,C	;SLOT,,PIN IN C, RETURNS PTR TO PIN TYP
	HRRZ D,UMAP(D)
	HRRZ D,(D)
	HRRZ D,1(D)	;DESC BLOCK
	HRRZ D,1(D)	;PIN TBL
	ADDI C,-1(D)
	POPJ P,


PRNTN:	JUMPGE A,.+3
	.CH "-
	MOVMS A
	IDIVI A,10.
	.DPT (A)
	.CH ".
	.DPT (A+1)
	POPJ P,


PRN2:	TRNE A,400
	JRST PRN3	;CARD PIN MAYBE OK
	TRNE A,160
	.7TYP [ASCIZ /NO OUTPUT/]
	JRST PRN3

PCR:	.CH 15
	.CH 12
	POPJ P,

TCR:	.CH TYOC,15
	.CH TYOC,12
	POPJ P,

WRTAB:	BLOCK MXPIN	;SLOT#-PIN# ON RUN
NWIR:	0	;NO OF PINS IN WRTAB
NWIR1:	0	;" -1
LOAD:	0	;TOTAL LOAD ON THIS RUN
LDTYP:	0	;BIT FOR EACH TYPE OF LOAD
WIRLN:	0	;TOTAL WIRE LNGHT
PRLVL:	0	;LVL 1ST WIRE IS ON
ILLDTP:	0	;-1 IF ILLEGAL LOAD COMBINATION SEEN ON THIS RUN
LSTNAM:	0	;POINTER TO RUN NAME LAST PRINTED
LSTSGN:	0	;1 FOR +, 2 FOR -

TAB:	12.	;(SLOT,,PIN)
TAB.5:	22.	;IC REAL PIN NO.
TAB1:	28.	;WIRE LEVEL
TAB2:	31.	;TYPE-PIN
TAB3:	46.	;LOADING
TAB4:	53.	;LENGTH
TAB5:	62.	;MESSAGE

PLVLTB:	IRP A,,[.,\,.!,!.,/,!]	;FIRST PIN, OTHER, LAST PIN
	SIXBIT ?A?
	TERMIN
;BIT FOR EACH PIN TYPE
;IF BIT IS ON, THEN THIS PIN CAN BE CONNECTED TO CORRESPONDING PIN TYPE

RADIX 2

LDPMT:	0
	1100101110000	;ONLY INPUTS, CARD PIN
	1100101110000
	1100101110000
	1110101111110	;IN,OU,CARD
	1110101111110
	1110101111110
	1100000000000	;POWER
	1110101111110	;CARD PIN
	1101000000000	;XPANDR
	1110101110000	;OPEN COLLECTOR, CARD,INPUT
	1111111111111
RADIX 8.
CHECK LDPMT,MXPNTP+1

TTYP:	IRPS A,,0 OUT FF1 FF0 CAND OR AOI PWR CARD XPANDR OC IN
	SIXBIT /A/
	TERMIN
CHECK TTYP,MXPNTP+1

;CH1 HAS CUMULATIVE LOAD ON RUN
;C HAS LOAD IN PIN SPECIFICATION
ADDLD:	JRST 4,.
	ADD CH1,C
	ADD CH1,C
	ADD CH1,C
	SUB CH1,C
	SUB CH1,C
	SUB CH1,C
	CLEARB C,CH1
	MOVEI C,0
	CLEARB C,CH1
	ADD CH1,C
	SUB CH1,C
CHECK ADDLD,MXPNTP+1

LADDLD==.-ADDLD

DCOMP:	PUSH P,D	;CALL WITH PIN PAIR IN C,D
	PUSHJ P,DCXY	;GET X,Y COORD OF FORST PIN
	PUSH P,D	;SAVE Y
	EXCH C,-1(P)	;SAVE X,GET SECON PIN
	PUSHJ P,DCXY
DCOMP1:	SUB C,-1(P)	;X2-X1
	SUB D,(P)	;Y2-Y1
	FLOAT C
	FLOAT D
	FMPR C,C
	FMPR D,D
	MOVEM A,-1(P)	;SAVE A IN EMPTY SLOT
	MOVEM B,(P)
	MOVE A,C
	FADR A,D	;(X2-X1)**"+(Y2-Y1)**2
	PUSHJ P,SQRT
	FIX A,1	;FIX WITH BINARY POINT MOVED OVER FOR ROUNDING
	AOS B
	LDB C,[014300,,B]	;PICK UP ROUNDED DISTANCE
POPBAJ:	POP P,B
	POP P,A
	POPJ P,

DCXY:	PUSH P,B	;SLT,,PIN IN C, FORM X,Y IN C,D
	MOVE B,C
	PUSHJ P,ABSPNO
	PUSHJ P,DCXY1
POPBJ:	POP P,B
	POPJ P,

DCXY1:	PUSH P,B
	HLRZ C,B	;SAVE SLOT #
	SKIPL B
	CAMLE C,MNSL
	.VALUE	;GARBAGE SLOT #
	HRRZS B
	MOVE F,BOARDT	;TYPE FO BOARD
	JUMPE C,@DSPCRD(F)
	JRST @DSPXY(F)	;B HAS PIN #  C HAS SLOT #

;COORDS OF BOARD
;X POSITIVE TO RIGHT IF PINS ARE FACING
;Y POSITIVE DOWN

XYAUG:	SOS C	;SLOT 1 = ROW 0,COLUMN 0
	IDIVI C,10.	;10 SLOTS PER ROW
	MOVNS D	;SLOTS ARE NUMBERED FROM RIGHT TO LEFT ON THIS BOARD
	ADDI D,9.	;REVERSE FOR POSITIVE X COORD
	AOS C	;OFFSET FIRST ROW DOWN FOR CONNECTOR PINS AT TOP
XYSLT:	IMULI C,10.	;1" VERTICAL SPACING BETWEEN ROWS
	IMULI D,5	;.5" HORZ SPACING BETWEEN SLOTS
	ADD C,YPOF(B)	;OFFSET FOR Y LOCATION IN SLOT
	CAIGE B,9	;THIS PIN IN RIGHT HAND ROW
	ADDI D,3	;SPACE OVER .3"
	EXCH C,D	;X IN C,Y IN D
	JRST POPBJ

XYAUC:	SOJ C,		;MIRROR IMAGE AUGAT BOARD W/ CONNECTOR
	IDIVI C,10.
	AOJ C,
	JRST XYSLT

XYCAMB:	SOS C	;SLOT 1 IS IN ROW 0, COLUMN 0
	IDIVI C,8.	;8 SLOTS PER ROW
	JRST XYSLT

YPOF:	REPEAT 9,.RPCNT
	REPEAT 9,8-.RPCNT

ACOMP:	PUSHJ P,DCXY1	;SLOTS IN A,B ABSOLUTE
	PUSH P,C	;SAVE X,Y FOR DCOMP1
	PUSH P,D
	EXCH B,A
	PUSHJ P,DCXY1
	EXCH A,B
	JRST DCOMP1

;TAKES BOARD # IN 4.9-4.4
;SLOT # IN 4.3-3.1 PIN IN RH
;RETURNS DISTANCE IN C

BDCOMP:	LDB T,[360600,,B]	;BOARD #
	TLZ B,770000	;FLUSH BOARD #
	PUSHJ P,DCXY1
	ADD C,XBDARY(T)	;OFFSET BY BOARD LOCN
	ADD D,YBDARY(T)
	MOVEM C,PINX2
	MOVEM D,PINY2
	PUSH P,C
	PUSH P,D
	EXCH B,A
	LDB T,[360600,,B]
	TLZ B,770000
	PUSHJ P,DCXY1
	EXCH A,B
	ADD C,XBDARY(T)
	ADD D,YBDARY(T)
	MOVEM C,PINX1
	MOVEM D,PINY1
	JRST DCOMP1

XYPG13:	SOS C
	IDIVI C,30.	;GET GROUP # IN C
	MOVNS C
	ADDI C,5
	IMULI C,6
	PUSH P,C
	MOVE C,D	;GET SLOT # OF GROUP IN C
	IDIVI C,5	;GET HORZ ROW IN D,VERT IN C
	ADD D,(P)	;ADD HORZ ROW TO OFFSET FOR GROUP
	SUB P,[1,,1]
	JRST XYSLT	;VERT ROW IN C, HORIZ ROW IN D

;FLOATING POINT SQUARE ROOT FUNCTION

SQRT:	MOVEM B,BSAV
	MOVMS A
	JUMPLE A,SQ2
	ASHC A,-33
	SUBI A,201
	ROT A,-1
	HRRM A,SQ1
	LSH A,-43
	ASH B,-10
	FSC B,177(A)
	MOVEM B,SSSST
	FMP B,S1(A)
	FAD B,S2(A)
	MOVE A,SSSST
	FDV A,B
	FAD B,A
	FSC B,-1
	MOVE A,SSSST
	FDV A,B
	FADR A,B
SQ1:	FSC A,0
SQ2:	MOVE B,BSAV
	POPJ P,

S1:	0.8125
	0.578125
S2:	0.302734
	0.421875

SSSST: 0
BSAV:	0

CRDCAM:	SKIPLE B
	CAMLE B,NCPIN
	.VALUE	;LOSING PIN
	HLRZ D,CRDXY-1(B)	;CONNECTOR PINS ON CAMBION
	HRRZ C,CRDXY-1(B)
	JRST POPBJ

;TWO PATTERNS INTERLEAVED IN EACH OF 7 GROUPS
;PATTERN FOR 1-35 INTERLEAVED WITH 36-70
;. 3	3 .
;4 .	. 1
;. 1	5 .
;5 .	. 2
;. 2	4 .

;PIN 1 COORD X=3.5" , Y=7.3" FROM SLOT 1,PIN 16

DEFINE MXY1
	CY,,CX
	CY+4,,CX
	CY-4,,CX
	CY+2,,CX-2
	CY-2,,CX-2
	CX==CX-5	;IN GROUPS ORDERED FROM RIGHT TO LEFT

TERMIN
DEFINE MXY2
	CY-2,,CX
	CY+2,,CX
	CY-4,,CX-2
	CY+4,,CX-2
	CY,,CX-2
	CX==CX-5
TERMIN

CX==35.
CY==73.

CRDXY:	REPEAT 3,MXY1
	REPEAT 4,MXY2
CX==35.
	REPEAT 3,MXY2
	REPEAT 4,MXY1

;PIN 35 .2 " IN X, 3.3" IN Y
CRDSML:	SKIPL B
	CAMLE B,NCPIN
	.VALUE
	SOS B
	IDIVI B,35.
	MOVNS C
	ADDI C,34.+2
	SKIPN B
	SKIPA D,[33.]
	MOVEI D,32.
	JRST POPBJ


;AUGAT CONNECTOR PINS ARE LABELED 1-31 TOP ROW LEFT TO RIGHT
;32-63 ON BOTTOM ROW
CRDAUG:	TRNN B,-1
	JRST CRDA1	;GROUND PIN ON CONNECTOR
	MOVEI C,-1(B)	;PIN #
	IDIVI C,31.	;31 PINS PER ROW
	ADDI D,9	;FIRST PIN .9" TO RIGHT OF "0" COLUMN OF PINS
CRDA2:	IMULI C,3	;SECOND ROW LOWER BY .3"
	ADDI C,4	;FIRST ROW .6" ABOVE FIRST SLOT,.4" BELOW ORIGIN
	EXCH C,D
	JRST POPBJ

CRDA1:	MOVEI D,7.	;GND PIN ON 2ND ROW
	MOVEI C,7.	;.2" LEFT OF (0 1)
	JRST POPBJ

CRDAUC:	MOVEI C,-1(B)	;CONNECTOR AUGAT
	IDIVI C,22.	;22 PINS PER ROW (3 ROWS)
	CAIN C,2	;3RD ROW
	AOJ D,	;IS INSET ONE PIN
	IMULI C,2	;.2 SPACE BETIXT ROWS
	ADDI D,3	;OFFSET FROM EDGE BY .3
	ADDI C,2	;OFFSET BELOW BY .2
	EXCH C,D
	JRST POPBJ

;AUGAT CARD PINS WERE NUMBERED ON LATER AUGAT BOARDS
;UNFORTUNATELY AUGAT ADOPTED A CONVENTION DIFFERENT
;FROM THE ONE ABOVE (CRDAUG), HENCE THE NEW BOARD TYPE

CRDNAG:	MOVEI C,-1(B)	;NORMALIZE, START AT 0
	IDIVI C,35.	;35. PINS PER ROW
	MOVNS D		;MIRROR IMAGE
	ADDI D,35.+7	;AND TRANSLATE
	JRST CRDA2

CRPG13:	MOVEI C,-1(B)
	IDIVI C,100.	;EACH GROUP'S CONNECTOR PINS START AT 100 MULTIPLE
	MOVNS C
	ADDI C,5
	IMULI C,6*5
	MOVE B,C
	MOVE C,D
	IDIVI C,50.
	IMULI C,2
	CAIL D,14.
	AOS C
	CAIL D,14.
	SUBI D,13.
	ADD B,D
	ADD B,D
	IMULI C,2	;VERT OFFSET
	MOVE D,C
	MOVE C,B
	JRST POPBJ
;ORDER WIRE RUN
;BRUTE FORCE  TIME==N!  (!!)

BRUTE:	PUSHJ P,DCFILL
	MOVE D,NWIR
	MOVEI A,-1(D)
	MOVEM A,NWIR1	;NWIRES-2
	MOVSI A,200000
	MOVEM A,COST	;SET INITIAL COST TO INFINITY
	MOVEI C,0	;DISTANCE
	MOVEI A,-1	;DUMMY FOR FIRST PIN
	MOVSI CH1,400000	;FLAG FOR MARKING PIN USED ON RUN DURING RECURSION
BRL1:	PUSH P,A	;SAVE CURRENT END OF ROW
	PUSH P,C	;SAVE COST
	MOVE B,A	;MAKE B PREVIOUS PIN ON RUN
	MOVEI A,0	;SEARCH FOR NEW PIN NEXT ON RUN
BRUL:	SKIPGE @DMARP	;THIS PIN ALREADY ON RUN
	SOJA D,BRL2A	;FLUSH, TEMPORARILY SET TO NEXT LEVEL
	IORM CH1,@DMARP	;MARK THIS PIN USED
	ADD C,@DMARP1	;ADD COST OF THIS PIN
	SOJGE D,BRL1	;TEST FOR ALL PINS ON RUN
	CAMGE C,COST	;MORE WINNING THAN PREVIOUS BEST?
	JRST BRLN	;GOBBLE
BRL2:	ANDCAM CH1,@DMARP	;NO, UNMARK THIS PIN
	MOVE C,(P)	;RESTORE COST
BRL2A:	CAMGE A,NWIR	;LOOKED AT ALL POSSIBILITIES FOR NEW PIN
	AOJA A,[AOJA D,BRUL]	;NO,RESET TO CURRENT LEVEL
	SUB P,[1,,1]	;YES, RESET PDL OVER COST
	POP P,A	;RESTORE CURRENT PIN
	MOVE B,-1(P)	;RESTORE PREVIOUS PIN
	CAMGE D,NWIR1	;FINISHED LOOKING FOR POSSIBILITIES AT TOP LEVEL?
	AOJA D,BRL2	;NOT TOP LEVEL, BACK UP TP PREVIOUS LEVEL
	POPJ P,

BRLN:	MOVEM C,COST	;BEST RUN SO FAR
	MOVE C,NWIR	;INDEX INTO WIRT
	MOVEI T,-1(P)	;POINTER TO PREVIOUS PIN ON PDL
	MOVEM A,WIRT(C)	;CURRENT PIN
BRLN1:	MOVE TT,(T)	;PIN FROM PDL
	MOVEM TT,WIRT-1(C)
	SUBI T,2	;BACK UP OVER COST TO NEXT PIN
	SOJG C,BRLN1
	JRST BRL2

WIRT:	BLOCK MXPIN	;PNTR TO WRTAB IN OPT ORDER
WIRP:	0	;PTR TO SAVE FIRST IN CREATION OF RANDOM RUN
WIRTB:	BLOCK MXPIN
WIRPB:	0
COST:	0	;BEST COST IN SRCH
;FILL MARGIN TABLES WITH DISTANCE COMPUTED BETWEEN PINS

DCFILL:	MOVE TT,FSP
	AOS TT
	HRRM TT,DMARP
	HRRM TT,DMARP1
	MOVE T,NWIR	;N-1
	ADDI TT,2(T)	;1ST ELEMENT OF DATA TABLE, LEAVE ROOM FOR MARGIN TABLE
	HRLI TT,B	;PUT IN INDEX FOR INDIRECTING
	MOVEI A,0
	CLEARM -1(TT)	;SPECIAL FOR NON-MOVABLE PINS
	MOVEM TT,@DMARP	;FIRST MARGIN POINTER
	ADDI TT,2(T)	;ELEMENTS/COLMN(N+1), EXTRA FOR NON-MOVE PIN
	CAMGE A,NWIR
	AOJA A,.-4
DCFL3:	MOVE A,NWIR	;COMPUTE SQUARE ARRAY CONTAINING DISTANCES BETWEEN PINS
DCFL2:	MOVE B,A	;ONLY NEED TO COMPUTE TRIANGULAR HOWEVER
DCFL1:	MOVE C,WRTAB(A)
	MOVE D,WRTAB(B)
	PUSHJ P,DCOMP
	MOVEM C,@DMARP1
	EXCH A,B
	MOVEM C,@DMARP1	;FILL OTHER HALF OF SQUARE
	EXCH A,B
	SOJGE B,DCFL1
	SOJGE A,DCFL2
	POPJ P,

DMARP:	FS(A)
DMARP1:	@FS(A)

;POINTER TO BEGINNING TABLE
OBTBL:	IRPS Z,,A B C D
	.(Z)
	TERMIN

OETBL:	.(TT)	;COST FOR END POINT
	.(T)

OPTBL:	IRPS Z,,B B A A T T T T TT TT TT TT
	@.(Z)
	TERMIN
;PTR TO MARGIN TABLES INDEX BY C,D,C,D,  A,B,C,D,A,ETC
;THIS ROUTINE OPTIMIZES RUN

;CALL WITH
;NWIRE:	# OF PINS -1
;WRTAB:	ARRAY HAS SLOT#,,PIN # (RELATIVE)
;ANSWER IN WIRT: WHICH CONTAINS INDEX INTO WRTAB IN OPTIMAL ORDER

OPFMX:	MOVE T,NWIR
	CLEARM WIRT	;IN CASE ONE PIN,  OPTIMAL =0 IN FIRST INDEX
	JUMPE T,CPOPJ
	AOS T
	CAIGE T,NWOPT
	JRST BRUTE
	MOVE TT,FSP	;SET UP MARGIN TABLES
	AOS TT
	MOVSI A,-4
	HRRM TT,OBTBL(A)
	AOBJN A,.-1
	CLEARM (TT)
	HRRI A,1(TT)
	HRL A,TT
	ADD TT,T
	HRRM TT,OETBL
	HRRM TT,OETBL+1
	ADD TT,T
	BLT A,-1(TT)	;CLEAR END TABLES FOR NOW
IRPS Z,,4 10
	HRRM TT,OPTBL+Z	;(A)
TERMIN
	ADD TT,T
IRPS Z,,4 10
	HRRM TT,OPTBL+Z+1	;(B)
TERMIN
	ADD TT,T
	MOVE A,TT
	ADD A,T
IRPS Z,,0 2 6 12
	HRRM TT,OPTBL+Z	;(C)
	HRRM A,OPTBL+Z+1	;(D)
TERMIN

	MOVE TT,A
	ADD TT,T
	MOVSI A,A
OPFL1:	MOVE B,A
	HRR B,TT
	HRRZ C,OPTBL+4(A)
	MOVE D,T
OPFL1A:	MOVEM B,(C)
	ADD B,T
	AOS C
	SOJG D,OPFL1A
	CAMGE A,[D,,3]
	AOBJP A,OPFL1
	HRRZM B,FSP1
	HRRZ A,OPTBL+5	;(B)
	HRRM A,DMARP1
	PUSHJ P,DCFL3	;COMPUTE DIST
	MOVEI A,NOPT
	MOVEM A,NOPTC
	MOVSI A,200000
	MOVEM A,COST
	CLEARM NWINS
OPFLA:	MOVE T,NWIR
	AOS T
	MOVEI A,0	;RANDOMIZE
	MOVEM A,WIRT+1(A)
	CAMGE A,NWIR
	AOJA A,.-2
	MOVEM A,WIRT
	MOVEI TT,100
OPFL2:	PUSHJ P,RAND	;CUT RING AND TRANSPOSE
	HRRZS A
	IDIV A,T
	MOVE C,A
	IDIV C,T
	MOVE A,WIRT(B)
	CAMN A,D
	JRST OPFL2A	;ADJACENT FROBS
	MOVE C,D
OPFL2B:	EXCH C,WIRT(A)	;REVERSE ORDER OF LINKS
	EXCH A,C
	CAME A,D
	JRST OPFL2B
	MOVEM C,WIRT(B)
OPFL2A:	SOJG TT,OPFL2
	PUSHJ P,OPT
	PUSHJ P,CCOST
	CAMGE F,COST
	JRST OPFB	;THIS 3OPT WAS BETTER
	CAMN F,COST
	AOS NWINS
OPFL3A:	SOSLE NOPTC
	JRST OPFLA
	MOVEI B,0
	MOVE A,WIRPB
OPFL3C:	HRRZ A,WIRTB(A)
	MOVEM A,WIRT(B)	;SET UP WIRE TOHAVE PINS IN OPTIMAL ORDER
	CAME A,WIRPB
	AOJA B,OPFL3C
	POPJ P,

OPFB:	MOVEM F,COST
	MOVE A,[WIRT,,WIRTB]
	BLT A,WIRTB+MXPIN-1
	MOVE A,OPTP
	MOVEM A,WIRPB
	JRST OPFL3A

RAND:	MOVE A,RAND1
	FMPRB A,RAND2
	POPJ P,

RAND1:	REPEAT 12.,[5*]5#SIXBIT /BARFOO/
RAND2:	REPEAT 12.,[5*]5#SIXBIT /FOOBAR/
FSP1:	0	;FREE PTR AFTER DISTANCE MATRIX
NWINS:	0	;NO. WINNING 3OPT

CCOST:	MOVE A,OPTP	;COMPUTE LENGTH OF CURRENT WIRE
	HRRZ A,WIRT(A)	;FIRST WIRE
	MOVE F,@OBTBL
OPFL3:	HRRZ C,WIRT(A)
	ADD F,@OPTBL+2	;A,C
	MOVE A,C
	CAME A,OPTP
	JRST OPFL3
	MOVE TT,A
	ADD F,@OETBL	;(TT)
	POPJ P,
;LOOK FOR 3RD ORDER PERMUTATIONS MORE OPTIMAL THAN CURRENT LOOP

OPT:	PUSHJ P,DISINI	;THIS HACK HAS BUGS FOR 3-OPT STEPS WHERE NONE OF PNTRS
	MOVSI CH2,200000	;IS AT THE "ENDS" OF CURRENT WIRE
	MOVEM CH2,OPCOST
	MOVEI TT,0
	MOVEM TT,OPTP
	HRRZ A,WIRT
OPTL4:	MOVE B,NWIR
	SOS B
	MOVEM B,NWIR2
	CLEARM ECOST
OPTL1:	MOVE B,A
	HRRZ C,WIRT(B)
OPTL2:	MOVE D,C
	HRRZ T,WIRT(D)
OPTL3:
ZZ==0
IRPS C,,0 4,XR,,0 1
	MOVE CH1,@OETBL+XR
IRPS X,,0 2,Y,,0 1
REPEAT 4,[	MOVE F,CH1
	ADD F,@OBTBL+X+<.RPCNT#1>_-<Y#1>&1
	ADD F,@OPTBL+.RPCNT
	ADD F,@OPTBL+4+C+X#2+<.RPCNT#1>_<-Y>&1
IFN ZZ,[	CAMGE F,CH2
	JSP LINK,FIND
]IFE ZZ,[	MOVE CH2,F
	SUB CH2,ECOST
]ZZ==ZZ+1
]
	TERMIN
	TERMIN
	MOVE D,T
	HRRZ T,WIRT(T)
	CAME D,TT
	JRST OPTL3
	MOVE B,C
	HRRZ C,WIRT(C)
	CAME C,TT
	JRST OPTL2
	MOVN F,@OETBL
	SUB F,@OBTBL	;- COST OF END LINES NOW
	ADD F,@OPTBL+10
	MOVE TT,A
	HRRZ A,WIRT(A)
	ADD F,@OETBL
	ADD F,@OBTBL	;COST OF NEW LINKS
	SUB F,@OPTBL+10
	ADDM F,ECOST
	SOSLE NWIR2
	JRST OPTL1
	SKIPN A,DEBUG
	POPJ P,
	JUMPL A,OPT1
	JSP R,DWIRE
	0,,0
OPT1:	SKIPN DBGW
	POPJ P,
	JRST TYI


OPTP:	0	;CONTAINS POINTER TO BEGINNING OF LOOP-1
NWIR2:	0	;NO OF WIRES -2
NOPTC:	0	;NO. OF RUNS TO GO
ECOST:	0	;COST OF LINKS,NEW MUST BE BETTER BY THIS MUCH
OPCOST:	0	;OPT COST FOR CHECK AT FIND
DCOST:	0	;COST OF RUN BEING DISPLAYED
;GET HERE IF PERMUTATION LOOKS MORE OPTIMAL

BXR==220400
FIND:	SKIPL DEBUG
	JRST FND1
	MOVEI R,AC
	BLT R,AC+16
	JSP R,DWIRE
	0,,0
FND1:	HRRZ F,-3(LINK)
	LDB AA,[BXR,,(F)]
	HRRZ F,(F)
	LDB SYM,[BXR,,(F)]
	HRRZ F,-5(LINK)
	LDB CH1,[BXR,,(F)]	;PTR TO BEG OF FIRST
	TRNE CH1,1	;CH1 PTR TO 1ST NEAR END
	PUSHJ P,FNDR1
	TRNN SYM,1	;SYM PTR TO 2ND FAR END
	PUSHJ P,FNDR2
	TRNE AA,1	;AA PTR TO 3RD NEAR END
	PUSHJ P,FNDR3
	MOVE F,(SYM)
	MOVE LINK,(AA)
	MOVEM LINK,WIRT(F)	;2ND=>3RD
	TRC AA,1	;FAR END OF 3RD
	MOVE F,(AA)
	MOVEM F,OPTP
	MOVE LINK,(CH1)
	MOVEM LINK,WIRT(F)	;3RD=>1ST
	TRC CH1,1	;FAR END OF 1ST
	TRC SYM,1	;NEAR END OF 2ND
	MOVE F,(CH1)
	MOVE LINK,(SYM)
	MOVEM LINK,WIRT(F)	;1ST=>2ND
	SKIPL DEBUG
	JRST FND2
	JSP R,DWIRE
	0,,1000
	MOVE F,DCOST
	CAML F,OPCOST
	.VALUE
	MOVEM F,OPCOST
	MOVE A,DISP1	;RESET DISPLAY INPUT POINTER FOR NEXT DISPLAY
	MOVEM A,DISP
FND2:	MOVE TT,OPTP
	HRRZ A,WIRT(TT)
	JRST OPTL4	;CHECKOUT


FNDR1:	MOVE F,CH1	;REVERSE PNTRS,NOW GOES -CH1=>CH1
	MOVE R,(CH1)
FNDR1B:	TRC F,1
	MOVE F,(F)
FNDR1A:	EXCH LINK,WIRT(F)
	EXCH LINK,F
	CAME LINK,R
	JRST .-3
	POPJ P,

FNDR2:	MOVE F,(SYM)
	MOVE R,SYM
	TRC R,1
	MOVE R,(R)
	JRST FNDR1A

FNDR3:	MOVE F,AA
	MOVE R,(AA)
	JRST FNDR1B
DWIRE:	MOVEI AA,DISAC	;DISPLAY WIRE PATH ON SCREEN
	BLT AA,DISAC+17	;SAVE AC'S
	MOVEI LINK,11	;POINT MODE FOR IDS
	HLRZ A,(R)	;Y ORIGIN
	MOVEM A,DY'
	DPB A,[251700,,LINK]	;X ORIGIN
	HRRZ A,(R)	;DISPLAY START AT X0,Y0
	MOVEM A,DX'
	DPB A,[61700,,LINK]
	IDPB LINK,DISP
	PUSHJ P,CCOST	;COMPUTE THE COST OF THIS RUN
	MOVEM F,DCOST
	MOVE A,F
	PUSHJ P,DDPT	;DISPLAY COST
	MOVE A,OPTP
	CLEARM CDX'
	CLEARM CDY'
	MOVEI LINK,11	;PT MODE
DW1:	HRRZ A,WIRT(A)
	PUSHJ P,DWPOS	;DISPALAY POSITION OF HIS END
	SKIPGE DEBUG
	PUSHJ P,DWNAM	;DONT TAG LINKS IF DISPLAYING ONLY RESULTS
	CAME A,OPTP	;END OF CHAIN?
	JRST DW1
	MOVEI A,241	;DISPLAY POPJ
	IDPB A,DISP
	SOS DISP	;RESET POINTER SO FURTHER DISPLAY FLUSHES POPJ
	MOVEI A,DISPDL
	MOVEM A,43	;SET UP DISPLAY PDL FOR SYS
	.OPEN DISC,[SIXBIT /  !IDS/]
	JRST DW2
	MOVE A,FSP1	;BEGINNING OF DISPLAY LIST
	.IOT DISC,A
DW2:	PUSH P,R	;SAVE RETURN FOR LATER POPJ
	MOVE R,[DISAC+A,,A]
	BLT R,R
	JRST POPJ1

DEBUG:	0	;0 NO DEBUG
	;-1 DISPLAY ALL OPT STEPS
	;+ DISPLAY ONLY RESULTS
DBGW:	0	;-1 WAIT AFTER DISPLAYING
DISAC:	BLOCK 20
DISPDL:	BLOCK 20
AC:	BLOCK 20	;FOR DEBUG


DISINI:	MOVE A,FSP1	;INITIALIZE DISPLAY LIST
	HRLI A,IDCOD	;SET UP CODE FOR IDS
	MOVE B,FSP1
	BLT A,LDCOD-1(B)
	ADDI B,LDCOD
	HRLI B,444400
	MOVEM B,DISP'	;DISPLAY INPUT POINTER
	MOVEM B,DISP1'
	POPJ P,

DDPT:	IDIVI A,10.	;DECIMAL PRINT TO SCOPE
	HRLM B,(P)
	SKIPE A
	PUSHJ P,DDPT
	HLRZ A,(P)
	ADDI A,"0
	LSH A,44-7	;PUT INTO LEFTMOST CHAR POSITION
	IDPB A,DISP
	POPJ P,

IDCOD:	-1,,10641	;SET START MODE
	0,,40641	;VEC SCALE
	0,,30641	;INCR SCALE
	0,,60641	;340 X
	0,,70641	;340 Y
LDCOD==.-IDCOD


DWPOS:	MOVE C,WRTAB(A)	;SLOT,,PIN OF THIS PIN
	PUSHJ P,DCXY	;GET X,Y LOCATION ON BOARD
	ASH D,3	;MAKE DISPALY 12.8" HIGH
	ASH C,3
	ADD D,DY	;DISPLAY ORIGIN
	ADD C,DX
	SUB D,CDY	;FORM DELTA Y @FOR RELATIVE VECTOR
	ADDM D,CDY	;UPDATE CURRENT Y POSTION
	DPB D,[251700,,LINK]	;FORM DISPLAY VECTOR WORD
	SUB C,CDX
	ADDM C,CDX
	DPB C,[61700,,LINK]
	IDPB LINK,DISP
	MOVEI LINK,23	;VECTOR MODE
	POPJ P,

;PIN IN A, DISPLAY AC POINTER IF ANY
DWNAM:	MOVEI B,A	;DISPLAY AC THAT POINTS TO THIS END OF LINK
	MOVE C,DWNT-A(B)	;CHARACTER WORD NAME OF AC
	CAMN A,DISAC(B)	;DOES THIS AC POINT TO PIN A?
	IDPB C,DISP
	CAIGE B,TT
	AOJA B,.-4
	MOVEI B,11	;MOVE BACK, COMPENSATE FOR CHANGE IN POSITION BY CHARACTER SPACING
	MOVE C,CDY
	DPB C,[251700,,B]
	MOVE C,CDX
	DPB C,[61700,,B]
	IDPB B,DISP
	POPJ P,

DWNT:	IRPS A,,A B C D T TT
	ASCII /A/+40_<44-7>
	TERMIN
;TAKES SLOT,,PIN IN A
;SKIPS IF PRINTS NAMEM A HAS PNTR TO PIN RING

PRUNM:	PUSHJ P,PRNM
	CAMN A,(A)	;NO CONNECTION
	JRST PCR
PRUN2:	HRRZ A,(A)	;LOOK FOR NEXT PI ON RUN
	MOVE C,1(A)	;SLOT,,PIN
	PUSHJ P,SRCP	;IS THIS A SOURCE?
	JRST PRUN1
PRUN3:	.CH "(
	HLRZ C,1(A)
	.DPT (C)
	.CH 40
	HRRZ C,1(A)
	.DPT (C)
	.CH ")
	JRST PCR

PRUN1:	HRRZ A,(A)
	CAME A,B	;FOUND NO OUTPUT ON THIS RUN
	JRST PRUN2
	HRRZ A,(A)	;NEXT PIN AS CONNECTION
	JRST PRUN3


;PRINT OUT LIST OF SLOTS, SHOWING SIGNAL ATTACHED T EACH PIN
A.UML:	.SUSET [.RRUNT,,A]
	MOVEM A,STRTIM
	JSP R,AOPEN
	 LPTC+3_4
	 [SIXBIT /UML/]
	 [.ASCII /UML *!RNAM1, THIS VERSION *!VERSION /]
	.7TYP [ASCIZ /CONNECTOR PINS
/]
	MOVEI T,1
	MOVEI TT,CARD+2
A.UM1:	.DPT (T)
	.COLMN 5
	MOVE A,(TT)
	PUSHJ P,PRUNM
	ADDI TT,NWPIN
	CAMGE T,NCPIN
	AOJA T,A.UM1
	PUSHJ P,PCR
	.CH 14
	CLEARM LSTAL
	JSP R,HEADR
	[.ASCII /MODULE UTILIZATION CHART *!RNAM1, THIS VERSION *!VERSION
/]
A.UM1A:	CLEARM SLTN'
	CLEARM MMAP	;MODE SWT FOR MAP
	.ICOLM 4	;SIMULATE 4 COMS PER PAGE
A.UM2:	AOS CH1,SLTN
	CAMLE CH1,MNSL
	.DONE A.UM2C	;CLOSE FILE
	.7TYP [ASCIZ /***********************
/]
	.DPT (CH1)
	.COLMN 5
	SKIPGE LSTAL
	JRST A.UP1
	SKIPN CH2,UMAP(CH1)
	JRST A.UM2B
	HRRZ CH2,(CH2)
A.UM3A:	.SIXO (CH2)	;NAME IN MODTYP
	PUSHJ P,PCR1
	HRRZ CH2,1(CH2)	;DESC BLOCK
	MOVEI T,1
A.UM3:	SKIPGE MMAP
	JRST A.MP4
	.COLMN 8
	.7TYP [ASCIZ /SEC /]
	.CH "A-1(T)
	PUSHJ P,PCR1
	MOVEI TT,0
A.UM3B:	JUMPE TT,A.UM4
	.COLMN 6
	.7TYP [ASCIZ /SUBSEC /]
	.CH "A-1(TT)
	PUSHJ P,PCR1
A.UM4:	MOVEI F,1
	MOVE LINK,1(CH2)	;PIN TBL PTR
	HRRZ SYM,2(CH2)	;PIN NAME PTR
A.UM6:	LDB A,[BSEC,,(LINK)]
	CAME A,T
	JRST A.UM5
	SKIPGE MMAP
	JRST A.MP1
	LDB A,[BSSEC,,(LINK)]
	CAME A,TT
	JRST A.UM5
	.CH 40
	.DPT (F)
	.COLMN 5
	.SIXO (SYM)
	.COLMN 12.
	HRLZ A,CH1
	HRR A,F	;SLOT,,PIN
	SKIPGE LSTAL
	JRST A.UPAT
	PUSH P,A
	PUSHJ P,PN.SEQ
	.CH "[	;PRINT SEQUENCE NO. OF RUN THIS PIN BELONGS
	.DPT (A)
	.CH "]
	.COLMN 18.
	POP P,A
	PUSHJ P,PRUNM

A.UM5:	AOS F
	AOS SYM
	AOBJN LINK,A.UM6
	SKIPGE MMAP
	JRST A.MP5
	MOVE A,CH2
	ADDI A,LDHDR-1(T)
	CAMGE TT,(A)	;TT> #SUBSECTIONS
	AOJA TT,A.UM3B
A.UM7:	HLRZ A,2(CH2)
	CAMGE T,A	;T> #SECTIONS
	AOJA T,A.UM3
A.UM2B:	SKIPGE MMAP
	JRST A.MP2
A.UM2A:	.WAIT	;END OF ITEM, WAIT FOR OTHER COLMS
	JRST A.UM2

A.UPAT:	HRRZ C,A
	HRRZ D,1(CH2)	;PNTR TO PIN TBL
	ADDI C,-1(D)
	LDB A,[BTYP,,(C)]
	.SIXO TTYP(A)
	.CH 40
	LDB A,[BLOAD,,(C)]
	PUSHJ P,PRNTN
	PUSHJ P,PCR
	JRST A.UM5

A.UP1:	CAILE CH1,NMOD
	.DONE A.W1B
	MOVE CH2,CH1
	ASH CH2,1
	ADDI CH2,MODTYP-2
	JRST A.UM3A

A.UM2C:	SKIPL LSTAL
	JRST A.W1B	;NOT .LIST, CLOSE BLOCK OUTPUT
	.CLOSE PRNTC,
	POPJ P,

A.LIST:	.SUSET [.RRUNT,,A]
	MOVEM A,STRTIM
	.OPEN PRNTC,[SIXBIT /  !LPTLIST  ALL/]
	.VALUE
	PUSH P,FAULTC
	MOVEI A,PRNTC
	MOVEM A,FAULTC
	SETOM LSTAL
	JSP R,HEADR
	[.ASCII /TTL DEFINITIONS   THIS VERSION *!VERSION
/]
	PUSHJ P,A.UM1A
	POP P,FAULTC
	POPJ P,

LSTAL:	0	;-1 => MODE TO LIST ALL DEFINED IC , TYPE LOAD

A.MAP:	.SUSET [.RRUNT,,A]
	MOVEM A,STRTIM
	JSP R,AOPEN
	 LPTC+3_4
	 [SIXBIT /MAP/]
	 [.ASCII /MODULE MAP *!RNAM1, THIS VERSION *!VERSION /]
	SETOM MMAP
	CLEARM LSTAL
	CLEARM SLTN
	MOVE A,BOARDT
	HLRZ B,MPCOLM(A)
	MOVEM B,NLNMP
	HRRZ B,MPCOLM(A)
	.ICOLM (B)
	PUSH P,[0]	;FLAG FOR SECTION USED
	PUSH P,[0]	;FOR LINE COUNTER, FLUSHED AT .DONE
	JRST A.UM2

A.MP1:	HRRZ A,UMAP(CH1)
	MOVEI B,-1(F)
	IMULI B,NWPIN
	ADDI A,1(B)
	CAMN A,(A)
	JRST A.UM5	;N.C.
	SETOM -1(P)	;SECTION USED
	HRLZ C,CH1
	HRR C,F
	MOVE R,C
	PUSHJ P,SRCP
	JRST A.UM5
	MOVE A,R
	PUSHJ P,PRNM	;PRINT NAME,IF ANY, THIS PIN IS SRCE
	JRST A.UM5
	PUSHJ P,PCR1
	JRST A.UM7	;GO TO NEXT SEC

A.MP2:	MOVE A,NLNMP
	SUBI A,2
	CAMG A,(P)
	JRST A.MP3
	PUSHJ P,PCR1
	JRST .-3

A.MP3:	CLEARM (P)
	CLEARM -1(P)
	.7TYP [ASCIZ /GND /]
	LDB A,[220600,,(CH2)]
	.DPT (A)
	.COLMN 8
	.7TYP [ASCIZ /VCC /]
	LDB A,[600,,(CH2)]
	.DPT (A)
	JRST A.UM2A

PCR1:	SKIPL MMAP
	JRST PCR
	AOS -1(P)
	PUSHJ P,PCR
	.CH "!
	POPJ P,

A.MP5:	SKIPL -1(P)
	.7TYP [ASCIZ /------/]
	PUSHJ P,PCR1
	JRST A.UM7

A.MP4:	.CH "A-1(T)
	.CH 40
	CLEARM -1(P)
	JRST A.UM4

MMAP:	0	;-1 MEANS MAP, 0 => UML
NLNMP:	0	;NO. OF LINES PER ENTRY FOR MAP
;CODE TO PRODUCE RAYTHEON WIRE WRAP FORMAT

A.RAY:	JSP R,AOPEN
	LPTC+3_4
	[SIXBIT /RAY/]
	[.ASCII /RAY *!RNAM1 THIS VERSION *!VERSION /]
	.7TYP [ASCIZ /CONNECTOR PINS
/]
	MOVEI T,1
	MOVEI TT,CARD+2
	SETZM SLTN
A.RY1:	MOVE A,(TT)
	PUSHJ P,GRUNMP
	JRST A.RY1A	;NO SIGNAL NAME FOR THIS PIN
	PUSHJ P,PRAYC
A.RY1A:	ADDI TT,NWPIN
	CAMGE T,NCPIN
	AOJA T,A.RY1
	CLEARM LSTAL
	CLEARM SLTN
A.RY2:	AOS CH1,SLTN
	CAMLE CH1,MNSL
	JRST A.RY3
	SETZM VCF
	SETZM GNDF
	SKIPN CH2,UMAP(CH1)
	JRST A.RY2	;SLOT NOT USED
	HRRZ CH2,(CH2)
	HRRZ CH2,1(CH2)
	MOVEI T,1
	MOVE LINK,1(CH2)
	MOVE SYM,2(CH2)
A.RY5:	LDB A,[BTYP,,(LINK)]
	CAIN A,PWR
	JRST RAYPWR
	PUSHJ P,GRUNMP
	JRST A.RYE
RAYP1:	PUSHJ P,PRAYC
A.RYE:	AOS T
	AOS SYM
	AOBJN LINK,A.RY5
	SKIPGE GNDF
	PUSHJ P,GGEN
	SKIPGE VCF
	PUSHJ P,VGEN
	JRST A.RY2

A.RY3:	JRST A.W1B	;FINISHED.

VGGEN1:	CAIE F,5
	.VALUE
	PUSH P,CH1
	MOVE F,SLTN
	SOS F
	IDIVI F,30.
	AOS CH1
	.CH "A(F)
	MOVE B,CH1
	POP P,CH1
	JRST VGGEN2


GGEN:	SKIPA A,["G]
VGEN:	MOVEI A,"V
	SKIPN B,SLTN
	POPJ P,
	.CH "T
	.CH "T
	.COLMN 14.
	PUSH P,F
	MOVE F,BOARDT
	CAIE F,3
	JRST VGGEN1
VGGEN2:	POP P,F
	CAIGE B,10.
	.CH "0
	.DPT (B)
	.COLMN 20.
	.CH "0
	.CH (A)
	.COLMN 30.
	.CH "$
	.CH (A)
	MOVE A,SLTN
	.DPT (A)
	JRST RAYCE
GRUNMP:	HRL A,SLTN
	HRR A,T
	PUSH P,A
	PUSHJ P,GPNAM
	JRST POPAJ
	SUBI C,RRNST
	IDIVI C,LRSYM
	IMULI C,LRSYM
	MOVE A,RRNST(C)
	MOVEM A,LSTNAM
	MOVEM D,LSTSGN
	POP P,A
	JRST POPJ1

VCCCK:	SKIPA B,[440700,,[ASCIZ /VCC/]]
GNDCK:	MOVE B,[440700,,[ASCIZ /GND/]]
	HRRZ A,LSTNAM
	HRLI A,440700
GCK1:	ILDB C,A
	ILDB D,B
	CAME C,D
	JRST POPJ1
	JUMPN C,GCK1
	POPJ P,

VCCLD:	.CH "$
	.CH "V
	MOVE A,SLTN
	.DPT (A)
	SETOM VCF'
	JRST RAYCE

GNDLD:	.CH "$
	.CH "G
	MOVE A,SLTN
	.DPT (A)
	SETOM GNDF'
	JRST RAYCE

PRAYC:		.CH "T
	.CH "T
	.COLMN 14.
	SKIPN F,SLTN
	JRST CNPRT
	PUSH P,CH1
	SOS F
	IDIVI F,30.
	AOS CH1
	.CH "A(F)
	MOVE F,CH1
	POP P,CH1
	CAIGE F,10.
	.CH "0
	.DPT (F)
PRYPIN:	HRRZ B,A
	HRL B,SLTN
	PUSHJ P,ABSPNO
	HRRZ F,B
PRYPN1:	.COLMN 20.
	CAIGE F,10.
	.CH "0
	SKIPN SLTN
	JRST PRY1
	.DPT (F)
PRY2:	.COLMN 30.
	MOVE F,LSTNAM
	PUSHJ P,GNDCK
	JRST GNDLD
	PUSHJ P,VCCCK
	JRST VCCLD
	.7TYP (F)
	MOVE F,LSTSGN
	CAIN F,1
	.CH "+
	CAIN F,2
	.CH "-
RAYCE:	.COLMN 73.
	PUSHJ P,PCR
	POPJ P,

CNPRT:	MOVE F,BOARDT
	CAIE F,3
	JRST CNP1
	.CH "I
	.CH "0
	JRST PRYPIN

CNP1:	CAIE F,5
	.VALUE
	HRRZ F,A
	PUSH P,CH1
	IDIVI F,100.
	.CH "A(F)
	MOVE F,CH1
	POP P,CH1
	.CH "J
	CAIG F,50.
	.CH "1
	CAILE F,50.
	.CH "2
	CAILE F,50.
	SUBI F,50.
	JRST PRYPN1


PRY1:	PUSH P,F
	MOVE F,BOARDT
	CAIE F,3
	JRST PRYPN3
	POP P,F
	CAILE F,44.
	JRST PRY1A
PRYPN2:	.DPT (F)
	JRST PRY2

PRYPN3:	POP P,F
	JRST PRYPN2
PRY1A:	.CH "0
	MOVE A,CONLET-45.(F)
	.CH (A)
	JRST PRY2


CONLET:	"A
	"B
	"C
	"D
	"E
	"F
	"H
	"J
	"K
	"L
	"M
	"N
	"P
	"R
	"S
	"T
	"U
	"V
	"W
	"X
	"Y
	"Z

RAYPWR:	MOVE A,(SYM)
	CAME A,[SIXBIT /GND/]
	JRST RAYVCC
	MOVEI A,[ASCIZ /GND/]
RAYV1:	MOVEM A,LSTNAM
	MOVE A,T
	JRST RAYP1

RAYVCC:	CAME A,[SIXBIT /VCC/]
	JRST 4,.
	MOVEI A,[ASCIZ /VCC/]
	JRST RAYV1

;PRINT HEADER ASCIZ POINTED TO BY WORD AFTER CALL
;IF * IS SEEN THEN FOLLOWING NUMBER IN TEXT
;IS TAKEN AS A POINTER TO A PAIR OF SIXBIT WORDS TO BE PRINTED
;PRINTS TIME AND DATE AT END OF MESSAGE
HEADR:	MOVE A,(R)
	HRLI A,440700
HEADL:	ILDB CH1,A
	JUMPE CH1,PTIME
HEAD1:	CAIN CH1,"*
	JRST PFNAM
	.CH (CH1)
	JRST HEADL

PFNAM:	MOVEI C,0
PFNML:	ILDB CH1,A
	CAIG CH1,"9
	CAIGE CH1,"0
	JRST PFNM1
	ASH C,3
	ADDI C,-"0(CH1)
	JRST PFNML
PFNM1:	ADDI C,$R.	;FUDGE RELOCATION
	.SIXO (C)
	.CH 40
	.SIXO 1(C)
	JRST HEAD1

PTIME:	.RTIME A,
	JUMPL A,PTIME1
	DPB A,[301400,,CTIME+1]
	LSH A,-14
	DPB A,[61400,,CTIME]
	LSH A,-14
	DPB A,[301400,,CTIME]
	.SIXO CTIME
	.SIXO CTIME+1
	.CH 40
	.RDATE A,
	DPB A,[221400,,CDATE]
	PUSH P,A
	LDB T,[220100,,(P)]
	IMULI T,10.
	LDB A,[140400,,(P)]
	ADD A,T
	.SIXO MONTHS-1(A)
	.SIXO CDATE
	POP P,A
	AND A,[777700,,]
	.SIXO A
PTIME1:	PUSHJ P,PCR
	JRST 1(R)

CTIME:	SIXBIT /  :  :  /
CDATE:	SIXBIT / 00,19/
MONTHS:	IRPS S,,[JAN,FEB,MARCH,APRIL
MAY,JUNE,JULY,AUG,SEPT,OCT,NOV,DEC]
	SIXBIT /S/
TERMIN

;CALL:
;	CHN # (CAN BE INDIRECT IMMED) +OPEN BITS_4
;	SIXBIT FNAM2
;	HEADING
AOPEN:	MOVEI B,@(R)
	DPB B,[BAC,,AOPN1]
	MOVE C,@1(R)
	MOVEM C,FWNAM2
	LDB C,[40300,,B]
	DPB C,[220300,,FWNAM]
	ANDI B,17
	CAIN B,LPTC	;CHECK FOR CHARACTER BLOCK OUTPUT
	JRST AOPN3
AOPN1:	.OPEN 0,FWNAM
	.VALUE
AOPN2:	ADDI R,3
	PUSH P,R
	CAIE B,LPTC	;CHAR MODE
	POPJ P,
	PUSH P,FAULTC
	MOVEM B,FAULTC
	MOVE B,-1(R)
	MOVEM B,.+2
	JSP R,HEADR
	0
	POP P,FAULTC
	POPJ P,

AOPN3:	CAIE C,3	;BLOCK OUTPUT
	JRST 4,.
	SKIPGE ALLN	;FLUSH RE-OPENS IN ALL MODE
	JRST AOPN2
	MOVEI C,LOUTBF*5
	MOVEM C,NOUTCH
	MOVE C,[440700,,OUTBF]
	MOVEM C,OUTPNR
	JRST AOPN1
MXNHI==40	;MAX NO OF PINS TIED HIGH ON ONE RUN

A.UNUS:	CLEARM SLTN	;FILL IN UNUSED PINS	;GO THROUGH ALL UNUSED SLOTS
UNU3:	AOS CH1,SLTN
	CAMLE CH1,MNSL
	POPJ P,
	MOVNI F,1	;FIRST PASS SET UP WSST TABLE
	CLEARM WSST
	MOVE A,[WSST,,WSST+1]
	BLT A,WSST+MXSEC*MXSSEC-1
UNU1A:	SKIPN CH2,UMAP(CH1)	;IS SLOT OCCUPIED
	JRST UNU3	;NO
	HRRZ A,(CH2)
	HRRZ A,1(A)	;POINTER TO MODULE DESCRIPTOR
	HLL CH2,1(A)	;-NPINS,,MODULE INSTANCE
	AOS CH2	;FIRST PIN ENTRY IN FREE STORAGE
UNU1:	MOVE C,1(CH2)	;SLOT,,PIN
	PUSHJ P,GPTYP	;GET PI;OINTER TO PIN SPECIFICATION
	LDB T,[BSEC,,(C)]	;GET SECTION # OF THIS PIN
	JUMPE T,UNU2	;PIN NOT USED ON IC
	LDB TT,[BSSEC,,(C)]
	SKIPN TT
	AOS TT	;IF NO SUB-SECTION, THEN ASSUME 1
	JUMPL F,UNU4	;JUST SETUP SUBSECTION TABLE NOW
	HRRZ A,(CH2)	;DOES PIN RING POIN TO SELF
	CAIE A,(CH2)	;N.C.
	JRST UNU2	;WIRE CONNECTED HERE, DO NOTHING
	HLRZ A,(CH2)
	CAIN A,CGND
	JRST UNU2	;THIS PIN WIRED TO GROUND
	CAIN A,CVCC
	JRST UNU2	;THIS PIN WIRED TO VCC
	JUMPN A,UNU2	;SIGNAL NAME, MAY BE USED
	LDB A,[BTYP,,(C)]	;TYPE OF PIN, DISPATCH
	CAIN A,CAND
	JRST UNAND
	CAIN A,OR
	JRST UNOR
	CAIN A,AOI	;CHECK FOR UNKNOWN PIN TYPE
	SKIPGE B,@WSSECT(T)	;PIN ALREADY GROUNDED
	JRST UNU2	;INPUT ALREADY GND
	JUMPG B,UNAND	;OTHER PINS USED, TIE PIN HIGH
	HRRZ B,WSSECT(T)	;CHECK ALL SUBSECTIONS
	HRLI B,-MXSSEC
	SKIPE 1(B)
	JRST UNOR2	;AT LEAST ONE SSEC USED
	AOBJN B,.-2
	JRST UNU2	;DO NOTHING IF THIS SECTON NOT USED AT ALL
UNOR2:	SETOM @WSSECT(T)	;TIE TO GND
UNOR1:	MOVEI A,CGND
	HRLM A,(CH2)
UNU2:	ADDI CH2,NWPIN-1
	AOBJN CH2,UNU1
	AOJE F,UNU1A	;SUBSECTION TABLE SET UP, GO DO SECOND PASS
	JRST UNU3	;TRY NEXT SLOT


UNAND:	SKIPG @WSSECT(T)
	JRST UNU2	;OTHER PIN TIED TO GND OR SSEC NOT USED
	SKIPN A,@CHIGHP
	JRST UNA1	;CROCK FOR CAUSING RUN NAME TO POINT TO LOOP
	PUSHJ P,GPIN	;POINTER TO PIN RING
	HRRZ B,(A)	;SPLICE IN THIS PIN AFTER PIN POINTED TO BY RUN NAME
	HRRM CH2,(A)	;RING POINTS TO NEW PIN
	HRRM B,(CH2)	;NEW PIN POINTS TO RING
	AOS A,NHIGH	;CHECK FOR MAX# OF PINS ON THIS HIGH RUN
	CAIGE A,MXNHI
	JRST UNU2
	MOVEI B,[ASCIZ /HIGH/]
	MOVEM B,@RRSP	;DEFINE NEW RUN "HIGH"
	AOS A,RRSP
	CAIL A,RRNST+LRSYM*NRUNS
	.BARF TOO MANY RUN NAMES - .UNUSED
	MOVEM A,CHIGHP
	CLEARM (A)
	CLEARM 1(A)
	AOS RRSP
	AOS RRSP
	CLEARM NHIGH
	JRST UNU2

UNA1:	MOVE D,1(CH2)	;SLOTT,,PIN IN HIGH NOT DEFINED
	MOVEM D,@CHIGHP	;HIGH+ POINTS TO THIS PIN
	HRRZ D,CHIGHP
	HRLM D,(CH2)	;RING POINTS BACK TO NAME
	JRST UNU2

UNU4:	HRRZ A,(CH2)	;MARK SUB-SECTION TABLE
	HLRZ B,(CH2)
	CAIN B,CGND
	JRST UNU4A	;PIN WIRED TO GROUND
	SKIPN B	;IF PIN HAS NAME,IT IS USED
	CAIE A,(CH2)	;PIN RING ONLY POINTS TO SELF, PIN UNUSED
	AOS @WSSECT(T)	;NOT NULL CONNECTION
	JRST UNU2

UNU4A:	CAIE A,(CH2)
	JRST 4,.
	SKIPN @WSSECT(T)	;OTHER PINS IN SUBSECTION HAVE LOGIC?
	SETOM @WSSECT(T)	;NO, MARK SUBSECTION WIRED TO GROUND
	JRST UNU2

UNOR:	SKIPG @WSSECT(T)	;ASSUME THAT ONLY TWO SUBSECTION FOR OR
	JRST UNU2
	JRST UNOR1	;OTHER PINS USED, GND THIS ONE

CHIGHP:	CHIGH	;POINTS TO FIRST HIGH RUN
NHIGH:	0	;NO. OF PINS ON HIGH RUN
WSSECT=.-1
REPEAT MXSEC,WSST+.RPCNT*MXSSEC-1(TT)
WSST:	BLOCK MXSEC*MXSSEC
;-1 TIED TO GND
;0 N.C.
;+ CONNECTED TO PIN

AEND:	.SUSET [.RMEMT,,A]	;RESET WORLD
	LSH A,-10.
	SUBI A,ICORE
	JUMPE A,AEND2
	.DPT TYOC,(A)
	.7TYP TYOC,[ASCIZ / EXTRA BLOCKS OF CORE USED
/]
AEND2:	.CORE ICORE	;REINITIALIZE
	.VALUE
	MOVEI A,FS
	MOVEM A,FSP
	MOVE A,MNSL
	CLEARM UMAP+1(A)
	SOJGE A,.-1
	MOVN A,NCPIN
	HRLS A
	HRRI A,CARD+1
	MOVEI B,1
AEND1:	HRRZM A,(A)
	MOVEM B,1(A)
	CLEARM 2(A)
	AOS B
	ADDI A,NWPIN-1
	AOBJN A,AEND1
	MOVEI A,TEXTB+3
	MOVEM A,TEXP
	MOVEI A,RRNST+3*LRSYM
	MOVEM A,RRSP
	CLEARM CGND
	CLEARM CGND+1
	CLEARM CHIGH
	CLEARM CHIGH+1
	CLEARM CVCC
	CLEARM CVCC+1
	CLEARM NHIGH
	MOVEI A,CHIGH
	MOVEM A,CHIGHP
	MOVE A,[REPEAT 12.,[5*]5#SIXBIT /FOOBAR/]
	MOVEM A,RAND2
	JRST ERR3	;RESET MACRO POINTERS,GENSYM

MNSL:	60.	;NO OF SLOTS ON CARD
NCPIN:	62.	;NO. OF CARD PINS
;POINTED TO BY "0" ENTRY IN UMAP
CARD:	DCARD
	REPEAT MXNCPN,[	.
	0,,.RPCNT+1
	0	;SEQ NO.
	REPEAT NWPIN-3,0
	]

ICARD==10	;PIN TYPE FOR CONNECTOR PINS
DCARD:	SIXBIT /CARD/	;DUMMY MODULE DEF
	.+1
	400000,,	;DUMMY DESC BLOCK (NOT 14 PIN DIP)
DCARD1:	-62.,,.+2
	0,,DCARD2
	REPEAT MXNCPN,ICARD_36
RADIX 10.
DCARD2:	REPEAT MXNCPN,CONC SIXBIT /PIN,\<.RPCNT+1>,/
RADIX 8

UMAP:	CARD
	BLOCK MXNSL	;CONTAINS MODULE INSTANCE

TEXP:	TEXTB+3
TEXTB:	ASCIZ /GND/
	ASCIZ /HIGH/
	ASCIZ /VCC/
	.=TEXP+LRNST

RRSP:	RRNST+3*LRSYM
RRNST:	TEXTB
CGND:	0
	0
	TEXTB+1
CHIGH:	0
	0
	TEXTB+2
CVCC:	0
	0
	BLOCK LRSYM*<NRUNS-3>


VARIAB
CON:
CONSTA
END HACKGO
