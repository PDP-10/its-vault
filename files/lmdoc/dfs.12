NOTE ON DISTRIBUTED FILE SYSTEMS (WITH PROVISION FOR MULTIPLE FILE COMPUTERS
  AND MULTIPLE COPIES OF FILES).

   WE START OFF WITH SOME BASIC IDEAS BORROWED FROM XEROX-PARC.
1)  AS FAR AS THE FILE COMPUTER SYSTEM IS CONCERNED, ALL FILE NAMES
  ARE FIXED LENGTH INTEGERS (PROBABLY 72. BITS IN OUR CASE).
2)  ALL FILE MODIFICATION OPERATIONS CONSIST OF "TRANSACTIONS". 
  THE TRANSACTION IS FIRST OPENED BY A PROCESS WISHING TO MODIFY
  A FILE, SOME NUMBER OF PRIMITIVE OPERATIONS TAKE PLACE UNDER THE
  TRANSACTION, AND FINALLY THE TRANSACTION IS CLOSED.  MODIFICATIONS TO
  SEVERAL FILES CAN TAKE PLACE UNDER ONE TRANSACTION.
  THE FILE COMPUTER
  SYSTEM GUARENTEES THAT EITHER THE TRANSACTION WILL BE COMPLETELY CARRIED
  OUT OR NONE OF IT WILL.  NO PROCESS WILL EVER "SEE" THE FILE IN A
  STATE INTERMEDIATE TO THE TRANSACTION.  ALSO, NO MATTER WHAT CRASHES
  WHEN, THE FILE WILL NEVER BE LEFT IN A INTERMEDIATE STATE.
3)  THE SOLE LOCKING PRIMITIVE IMPLEMENTED SAYS "LOCK <N> BYTES OF FILE <M>
  STARTING AT BYTE <P>.

  THE REST OF THIS NOTE IS INDEPENDANT OF XEROX (I DONT KNOW IF ITS IDENTICAL,
SIMILAR OR COMPLETELY DIFFERENT).

   WE ASSUME THERE ARE SOME NUMBER OF FILE COMPUTERS, LINKED BY COMMUNICATION
CHANNEL(S) (FREQUENTLY, FOR EXAMPLE, AN ETHERNET CHANNEL).
ALTHOUGH THE SPECIFIC NUMBER OF FILE COMPUTERS IS NOT IMPORTANT,
WE ASSUME IT IS SMALL ENOUGH THAT N-SQUARE LOSSAGE IS NOT SIGNIFICANT. (IE IT
IS PERMISSIBLE FOR EVERY FILE COMPUTER TO "KNOW" ABOUT EVERY OTHER FILE COMPUTER,
AND ON OCCASION, SEND MESSAGES TO ALL OTHER FILE COMPUTERS, ETC.).

   THE MAIN PURPOSE IN HAVING MULTIPLE FILE COMPUTERS IS TO ASSURE CONTINUED
ACCESS TO FILES IF ONE (OR MORE) OF THEM GO DOWN.  A SECONDARY PURPOSE IS TO
BE ABLE TO INCREASE OVERALL FILE SYSTEM THROUGHPUT BY ADDING MORE FILE COMPUTERS.
   ANOTHER IMPORTANT POINT IS THAT ALL F.C.S MAY NOT BE CONNECTED BY COMMUNICATION LINKS
OF EQUAL BANDWIDTH, ETC.  FOR EXAMPLE, ONE MIGHT HAVE SEVERAL ETHERNETS, EACH
WITH ITS OWN F.C., LINKED TOGETHER BY RELATIVELY SLOW SPEED LONG DISTANCE
PHONE LINES.
   WITH REFERENCE TO THIS LAST CASE, THE F.C. SYSTEM MUST GIVE SOME CONSIDERATION
TO WHAT HAPPENS IF THE LONG DISTANCE LINES FAIL, PARTITIONING THE FILE-COMPUTERS.
THIS MODE OF FAILURE PRESENTS EVEN MORE PROBLEMS THAN A SIMPLE F.C. FAILURE.
(ONE COULD CONSIDER THE SIMPLE F.C. FAILURE A PARTICULAR CASE OF A PARTITION.
HOWEVER, IN THE CASE OF THE PARTITION, WE DESIRE TO MAINTAIN SOME OPERATION
WITHIN EACH PARTITION WHICH INTRODUCES NEW PROBLEMS.).

   TO THE USER OF THE F.C. SYSTEM, ALL F.C. S APPEAR IDENTICAL.  ANY REQUEST
MAY BE MADE OF ANY OF THEM, ETC (ALTHOUGH IN SOME CASES THE USER MAY BE
REFERRED BY ONE F.C. TO ANOTHER.).

   EACH F.C. IS PERMANENTLY ASSIGNED ITS F.C. NUMBER.  F.C. NUMBERS ARE
USED IN INTRA-F.C. TRANSACTIONS AND ARE NOT VISIBLE TO THE USER.
EACH ACTIVE F.C. KNOWS THE F.C. NUMBER OF EACH OTHER ACTIVE F.C.
F.C. NUMBERS ARE USED TO ENABLE THE F.C. S TO COORDINATE THEMSELVES IN CERTAIN SITUATIONS
(FOR EXAMPLE, TO SELECT A NEW SECOND WHEN EITHER THE SECOND OR THE LEADER
IS DECLARED DEAD).  F.C. NUMBERS ARE NOT THE SAME AS NETWORK ADDRESSES,
ALTHOUGH AT ANY INSTANT EACH ACTIVE F.C. NUMBER CORRESPONDS TO A PARTICULAR
NETWORK ADDRESS.

   IN ANALOGY WITH ROCK-CLIMBING, AT A PARTICULAR MOMENT ONE F.C. IS DESIGNATED THE
"LEADER" AND ONE THE "SECOND".  THESE DESIGNATIONS DO NOT AFFECT ACTUAL FILE HANDLING.
THE LEADER HAS THE ADDITIONAL DUTY OF PROBING THE UPNESS OF ALL THE REST OF THE F.C.
S, AND THE SECOND HAS THE DUTY OF PROBING THE LEADER.  THE LEADER IS THE OFFICIAL
HOME OF THE "TIME STAMP", AND IS IN CHARGE OF "CHECKING OUT" NEW F.C. 'S THAT 
MAY APPEAR ON THE NET, TO ASSURE THAT THEY ARE "CURRENT" BEFORE THEY ARE OPENED FOR
USE.  NORMALLY, WE ASSUME ALL F.C. S CONTAIN THE CODE NECESSARY TO ACT AS LEADER
AND/OR SECOND, ALTHOUGH IF IT IS DESIRABLE TO HAVE A F.C. WITHOUT SUCH CAPABILITY,
IT IS EASY TO PROVIDE FOR A MECHANISM WHEREBY A F.C. MAY "PASS" IF ITS TURN
TO BE SECOND COMES UP.

   THE DEATH OF A F.C. VS THE PARTITIONING OF THE NETWORK.
     IF A F.C. FAILS TO RESPOND TO THE UPNESS PROBES OF THE LEADER, ETC,
THE ASSUMPTION MUST INITIALLY BE MADE THAT THE NETWORK HAS BECOME PARTITIONED.
HOWEVER, IN SOME CASES THE REMAINING F.C. S MAY BE ABLE TO DETERMINE THAT
IT IS REALLY JUST THAT F.C. THAT HAS CEASED OPERATION (OR THE F.C. IN QUESTION
MAY HAVE BROADCAST THAT IT WAS GOING DOWN, ETC).  THE IMPORTANCE OF THIS
DISTINCTION IS THAT IF THE F.C. IS DOWN, ITS FILES ARE (HOPEFULLY) IN A STATIC
STATE, WHILE IF PARTITIONED, WE WISH THE PARTITION TO REMAIN IN OPERATION AS
MUCH AS POSSIBLE.

   THE CONCEPT OF A "LIFE".
     EACH BYTE RECEIVED BY THE DISTRIBUTED-FILE-SYSTEM FROM THE USER IS DEFINED
TO HAVE "LIFE". LIFE IS AN INDIVISIBLE THING.  WHEN A FILE IS COPIED, THE LIFE
STAYS WITH JUST ONE
COPY.  (ACTUALLY, THOUGH, EACH BYTE LOGICALLY HAS ITS INDEPENDANT LIFE.
SO ONE COULD DECLARE BYTES 0,2,4 OF COPY A TO BE LIVING, AND 1, 3, 5 OF COPY B, ETC.)
"LIFELESS" DATA ARE JUST FOR BACKUP, ETC, THEY ARE NOT USED FOR ACTIVE
COMPUTATION UNLESS THE LIVING COPY BECOMES INACESSIBLE.  IN THE LATER CASE, IT
REQUIRES A SPECIAL CONSULTION AMONG THE F.C.S TO CLEAR LIFELESS DATA, AND SPECIAL
RECORDS ARE KEPT SO AS TO UPDATE THE LIVING DATA WHEN IT AGAIN BECOMES ACCESSIBLE.
     WHEN THE NETWORK BECOMES PARTITIONED, COMPUTATION ON "LIVING" DATA MAY
GO ON.  

    WHEN IT PROVES IMPOSSIBLE TO FIND "THE" LIVING DATA, EVIDENTLY IT MUST RESIDE
EITHER IN A DOWN F.C. OR IN A F.C. INACCESSIBLE DUE TO PARTITIONING.
IF WE CAN DETERMINE THAT ITS IN A DOWN F.C., A SIMPLE SOLUTION IS AVAILABLE.
WE SIMPLY GIVE LIFE TO ONE OF THE AVAILABLE COPIES AND BROADCAST A SPECIAL
MESSAGE TO ALL F.C.S THAT LIFE HAS BEEN SNATCHED AWAY FROM F.C. <N>, FILE <M>, ETC.
LATER, WHEN THAT F.C. REAPPEARS AND IS CHECKED OUT, IT WILL BE INFORMED
OF THE TRANSACTION.
    HOWEVER, IF THE LIVE COPY MAY BE IN A STILL OPERATING PARTITIONED
SUBNET, THERE IS IN GENERAL NO WAY TO AVOID POSSIBLE LOSSAGE.  THE BEST
THAT CAN BE DONE IS TO WARN THE USER OF THE SITUATION, FOLLOWED BY
EXTENSIVE RECORD KEEPING SHOULD HE ELECT TO PROCEED.  WHEN THE NETWORK
REJOINS, ANY TRANSACTIONS WHICH IN FACT CONFLICT ARE SENT BACK TO
THEIR SOURCE AND CANCELED AS FAR AS THE FILE-COMPUTER-SYSTEM IS CONCERNED.

   ALL DATA IN THE F.C. CONSISTS OF PAGES.  IN THE SIMPLEST CASE,
<FILE-NUMBER>, <PAGE-NUMBER> SUFFICES TO IDENTIFY ANY PAGE.  HOWEVER,
WE ALSO PERMIT TREE STRUCTURED FILES, WHICH ARE REFERENCED SORT OF LIKE
ROW-SPARSE ARRAYS.  THUS WE HAVE <FILE-NUMBER> <LEVEL-1-INDEX> ... <PAGE-NUMBER>.
THERE IS PROBABLY SOME FIXED LIMIT ON THE NUMBER OF INDEXES WHICH PROBABLY
ARISES FROM THE DESIRE TO BE ABLE TO COMPLETELY SPECIFY A PAGE NUMBER WITHIN
A FIXED LENGTH PACKET.

   TO AVOID ALL KINDS OF LOSSAGE, IT IS NECESSARY THAT THE FILE SYSTEM AS A WHOLE
HAVE A SINGLE "LIFE" (REPRESENTED, FOR EXAMPLE, BY AN INCREMENTING INTEGER).
IF A F.C. GOES DOWN, AFTER COMMING UP AGAIN IT MUST BE UPDATED BY THE REMAINING
F.C. S BEFORE BECOMMING USABLE AGAIN (THIS IS CALLED "CHECKING IT OUT").  
IF THE "LAST" F.C. GOES DOWN, EITHER
IT MUST BE THE FIRST BROUGHT BACK UP,  OR ALL TRANSACTIONS OCCURING BETWEEN
THE TIME THE FIRST-BACK-UP WENT DOWN AND THE LAST-WENT-DOWN MUST BE ABANDONED.
(OF COURSE, THIS DOES NOT PRECLUDE SOME SORT OF SALVAGING AND RE-WRITING OPERATION
AFTER THE LAST-WHEN-DOWN COMES BACK UP, BUT THIS LATTER OPERATION WOULD NOT BE
PROTECTED BY THE SYSTEM).

   A FILE MAY BE IN ONE OF THE FOLLOWING STATES RELATIVE TO A PARTICULAR F.C.

  1) UNKNOWN
  2) ACQUANTED..  A SMALL ENTRY EXISTS ON THE GIVEN F.C. WHICH GIVES THE
       CURRENT TIMESTAMP FOR THE FILE, AND MAY GIVE A HINT(S) AS TO WHICH
       F.C.(S) THE FILE RESIDES.  THE FILE ITSELF IS NOT RESIDENT HOWEVER.
  3) TRANSACTED.. AS ABOVE, PLUS THE F.C. RETAINS THE TRANSACTION RECORD
       NECESSARY TO UPDATE A GIVEN TIMESTAMP OF THE FILE INTO ANOTHER
       GIVEN TIMESTAMP.
  4) RESIDENT.. THE F.C. HOLDS THE FILE.

  ALTHOUGH A FILE MAY BE STORED ON ONLY ONE FILE COMPUTER (IF ITS NOT SUCH A CRUCIAL
  FILE AND ONE DOESNT WISH TO PAY FOR MULTIPLE STORAGE), THE SYSTEM ALWAYS
  ATTEMPTS TO HAVE AT LEAST TWO F.C. S ACQUANTED WITH THE FILE.

  WHEN OPENING THE FILE, THE USER SPECIFIES BOTH THE DESIRED NUMBER OF COPIES OF
THE FILE TO KEEP (OR ALL), AND THE DESIRED NUMBER OF F.C.S. TO MAKE ACQUANTED ON
(OR ALL).  FOR FILES WHICH GET UPDATED FREQUENTLY AND WHICH WOULD CAUSE
MAJOR LOSSAGE WERE AN OLD VERSION TO BE "ACCEPTED", IT IS RECOMMENDED THAT
THE FILE BE MADE AT LEAST ACQUANTED ON ALL F.C.S.

ROUGHLY, THE FOLLOWING ARE THE MAJOR STEPS IN ACCESSING AND MODIFYING A FILE..
A) FILE DISPATCHING.
    THIS CONSISTS OF SELECTING A FILE COMPUTER TO MANAGE THE ACCESS TO THE DESIRED
  FILE. (FOR A PREVIOUSLY EXISTING FILE, THIS WILL BE ONE THAT CONTAINS A COPY
  OF THE FILE.)  THIS STEP IS NOT COMPLETE UNTIL ALL FILE COMPUTERS HAVE
  BEEN INFORMED THAT <N> IS THE CURRENT MANAGER FOR FILE <M>.  (THIS IS NECESSARY
  TO AVOID UNPROTECTED REFERENCES BEING MADE TO A COPY OF THE FILE STORED ON ANOTHER
  FILE COMPUTER.  KNOWING THAT F.C. <N> IS THE MANAGER, ALL REFERENCES TO FILE N
  ARE REFERRED TO HIM.)  ALL F.C. S THAT HOLD A COPY OF THE FILE SO INFORM THE MANAGER.
  IF THE MANAGER F.C. SHOULD CRASH DURING THE PROGRESS OF THE TRANSACTION, THE
  TRANSACTION WILL BE LOST.
		FM DATABASE.. ENTRY NEEDED ONLY IF F.C. IN QUESTION HAS COPY OF FILE
  SHOULD TWO F.C.S ATTEMPT TO BECOME MANAGER OF THE SAME FILE AT THE SAME TIME,
  THE ONE WITH THE LOWER F.C. NUMBER DEFERS TO THE OTHER.
B) OPENING A TRANSACTION.
	        TM DATABASE..
C) PRIMITIVE TRANSACTION OPS.
		READ PAGE, WRITE PAGE, INSERT PAGE, APPEND PAGE (INSERT AT END).
		EXTRACT-PAGE REPLACE-PAGE.
		READ-BYTES, WRITE-BYTES.
		LOCK-BYTES (TO READ-ONLY OR TO NO-ACCESS).  
		   (DOES IT BUY ANYTHING TO SAY LOCK-BYTES MAY NOT CROSS PAGE BOUNDARIES?)
     IF A USER EXTRACTS A PAGE, HE IS ACTUALLY CONSIDERED TO POSSESS THE CURRENT
  COPY OF THE PAGE, AND REQUESTS FOR IT WILL BE REFERRED TO HIM BY THE FILE
  MANAGER.  HE TERMINATES THIS STATE BY DOING EVENTUALLY A REPLA