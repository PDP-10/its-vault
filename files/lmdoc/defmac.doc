	Documentation on Super Winning DEFMACRO.		ALAN 3/18/78

	The installed version of DEFMACRO includes some new features that
attempt to give DEFMACRO some of the hair of &MUMBLEs. This new DEFMACRO is 
completely compatable with the old DEFMACRO, except that the symbols &OPTIONAL,
&REST, &AUX and &LIST-OF are treated specially when the appear in the pattern.

1) &REST

	At first you may not see the reason for &REST. "(DEFMACRO FROB (FOO &REST BAR)...)"
is 100% the same as "(DEFMACRO FROB (FOO . BAR)...)" and "(DEFMACRO FROB (&REST X)...)"
is just the same as "(DEFMACRO FROB X ...)". So what good is it?  To allow you to use
&AUX and for clarity. Nothing says you must use this form (the old form HAS to still work),
it's just there if you need it!
	Note that in the two examples above FOO and BAR can be replaced by arbitrary
patterns. That is to say: "(DEFMACRO FROB (A &REST (B C)) ...)" is like 
"(DEFMACRO FROB (A B C) ...)".

2) &AUX

	&AUX allows you to have extra variables in the pattern that will be initialized
to NIL or something you specify. For example:

(DEFMACRO FOO (A &REST B &AUX (C 'PLUS))
	  `(,C ,A . ,B))

makes "(FOO 2 3 4)" into "(PLUS 2 3 4)".  (In this example A was bound to 2, B was bound
to (3 4) and C was bound to PLUS.) If instead of "(C 'PLUS)" I had said "(C PLUS)" then C
would have been bound to whatever value PLUS had when the macro was expanded. Similarly
if I had said just "C" then C would have been bound to NIL.
	As with the variables in the examples for &REST A, B and C can be replaced with
any pattern. This leads to a certain ambiguity (does "... &AUX (A B)" mean that the pattern
"(A B)" is to be matched to NIL? Or does it mean that "A" is to be matched to the value of 
B?  To solve this problem the convention is that "(<pattern> <init>)" is assumed wherever
possible.

3) &OPTIONAL

(DEFMACRO ZOTZ (A &OPTIONAL (B 'FROB))
	  `(QWERTY ,A ,B))

This defines a macro that turns "(ZOTZ EX)" into "(QWERTY EX FROB)" and turns 
"(ZOTZ EX 34)" into "(QWERTY EX 34)". The "(B 'FROB)" works in the same way as
in &AUX except that the pattern in initialized to a piece of the form if it exists.

4) &LIST-OF

	INFINITE HAIR! For example the standard LET macro could have been 
defined by:

(DEFMACRO LET (&LIST-OF (X Y) &REST BODY)
	  `((LAMBDA ,X . ,BODY)
	    . ,Y))

	&LIST-OF applies ONLY to the next argument (this differs from &OPTIONAL and
&AUX which act like "switches" and from &REST which can only be used once.)
	&LIST-OF works after &OPTIONAL and &REST. (For &OPTIONAL the convention
of assuming "(<pattern> <default>)" whenever possible is still used.) Examples:

(DEFMACRO FUNNY (&OPTIONAL &LIST-OF ((A B) '((1 2) (3 4))))
	  `(LIST ',A ',B))

(FUNNY) ==> (LIST '(1 3) '(2 4))
(FUNNY ((Q W) (E R) (T Y))) ==> (LIST '(Q E T) '(W R Y))

(DEFMACRO SILLY (&REST &LIST-OF (X Y))
	  `(MAPCAR 'LIST
		   ',X
		   ',Y))

(SILLY (A B) (C D)) ==> (MAPCAR 'LIST '(A C) '(B D))
(SILLY) ==> (MAPCAR 'LIST 'NIL 'NIL)

	Note that in all cases "... &LIST-OF <thing> ..." is the same as "... <thing> ..."
if <thing> is a symbol (and ONLY if <thing> is a symbol.

5) Features!

	To define a displacing macro use DEFMACRO-DISPLACE instead of DEFMACRO.

	If the value of DEFMACRO-CHECK-ARGS is non-null, then DEFMACRO will define
macros that check to see if they have the correct number of arguments.
(DEFMACRO-CHECK-ARGS is T by default)