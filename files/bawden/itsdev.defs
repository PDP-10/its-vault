; -*- Midas -*-

; Definitions for ITSDEV protocol.

; Chaosnet contact name:
define chname prefix
prefix!ITSDEV!termin

; TCP port number:
define tcport prefix
prefix!723!termin	; must be exactly 3 octal digits

; ITSDEV is designed for the convenience of PDP10's running the ITS
; operating system.  It allows a remote user process to access a single ITS
; channel.

; Both the input and output byte-streams are divided into "blocks" of 32
; 8-bit bytes.
;
; Each block is used to encode 7 36-bit words plus a 4-bit "opcode", using
; the following scheme:
;
; +-------+-------+-------+-------+-------+-------+-------+-------+-------+
; | high0 |                              low0                             |
; +-------+-------+-------+-------+-------+-------+-------+-------+-------+
; | high1 |                              low1                             |
; +-------+-------+-------+-------+-------+-------+-------+-------+-------+
; | high2 |                              low2                             |
; +-------+-------+-------+-------+-------+-------+-------+-------+-------+
; | high3 |                              low3                             |
; +-------+-------+-------+-------+-------+-------+-------+-------+-------+
; | high4 |                              low4                             |
; +-------+-------+-------+-------+-------+-------+-------+-------+-------+
; | high5 |                              low5                             |
; +-------+-------+-------+-------+-------+-------+-------+-------+-------+
; | high6 |                              low6                             |
; +-------+-------+-------+-------+-------+-------+-------+-------+-------+
; 
;                                     +
; 
;                                 +-------+
;                                 | opcod |
;                                 +-------+
; 
;                                     =
; 
;     +-------+-------+-------+-------+-------+-------+-------+-------+
;     | opcod | high6 | high5 | high4 | high3 | high2 | high1 | high0 |
;     +-------+-------+-------+-------+-------+-------+-------+-------+
;     |                              low0                             |
;     +-------+-------+-------+-------+-------+-------+-------+-------+
;     |                              low1                             |
;     +-------+-------+-------+-------+-------+-------+-------+-------+
;     |                              low2                             |
;     +-------+-------+-------+-------+-------+-------+-------+-------+
;     |                              low3                             |
;     +-------+-------+-------+-------+-------+-------+-------+-------+
;     |                              low4                             |
;     +-------+-------+-------+-------+-------+-------+-------+-------+
;     |                              low5                             |
;     +-------+-------+-------+-------+-------+-------+-------+-------+
;     |                              low6                             |
;     +-------+-------+-------+-------+-------+-------+-------+-------+
;
; (As usual, these 32-bit words are transmitted high-order byte first.)
; 
; Over Chaosnet (or any packet-oriented protocol), a block is not allowed
; to cross a packet boundary.
 
; 4-bit opcodes for command blocks:

..bop==:0,,17

opdata==:0	; 7 words of data: <w0> - <w6>.
		; No response.
oplast==:1	; <w6> words of data: <w0> - <w5>.
		; Responds with RSVALS or RSERROR.
opread==:2	; Requests <w0> words of data.
		; Responds with a series of RSDATA blocks, terminated by an
		; RSLAST, followed by either an RSVALS or RSERROR block.
		; Or perhaps just an RSERROR block.
opsync==:3	; Synchronize.  Also flush out any buffered network output.
		; Responds with an RSSYNC that echoes back <w0> - <w6>.
		; (Normally there is no need to use this for flushing
		; network output because that is done whenever the server
		; is about to block waiting for network input.  However, if
		; you were about to issue a command that would cause the
		; server to block for some other reason (perhaps waiting
		; for device input), then you might send an OPSYNC first to
		; be sure you get any other buffered response blocks first.)
opopen==:4	; Open <w0>:<w3>;<w1> <w2>.  Mode in RH(<w4>).
		; Responds with RSVALS or RSERROR.
opclose==:5	; Close channel.
		; Responds with RSVALS or RSERROR.
opscall==:6	; Perform .CALL <w6> with LH(<w5>) arguments (1 - 6).
		; Bits in RH(<w5>).  First argument is CHDEV, <w0> - <w4>
		; are the remaining arguments.
		; If 4.9(<w5>) is set, then <w0> - <w4> are the only
		; LH(<w5>) arguments.
		; Responds with RSVALS or RSERROR.
opxcall==:7	; Perform extended command named <w6>.
		; All extended commands respond with RSVALS or RSERROR.
oplink==:8	; Make link from <w0>:<w3>;<w1> <w2> to <w0>:<w6>;<w4> <w5>.
		; Responds with RSVALS or RSERROR.
opmax==:9	; First unused opcode.

; 4-bit opcodes for response blocks:

..brs==:0,,17

rsdata==:0	; Same format as OPDATA.
rslast==:1	; Same format as OPLAST.
rsvals==:2	; <w0> - <w6> are values.
rserror==:3	; Reports error <w6>.   <w0> words were discarded in case
		; this is a response to an OPLAST.
rslose==:4	; Irrecoverable lossage.
rssync==:5	; Respond to OPSYNC.

; Extended commands

; LOGIN		; Login with XUNAME <w0>, XJNAME <w1>, and SNAME <w2> from
		; "terminal" <w3>.  Client version number in <w4> and
		; program name in <w5>.
		; Returns UNAME in <w0> and JNAME in <w1> and server
		; version number in <w3>.  
; MTAPE		; Perform .MTAPE [CHDEV,,[<w0>]],.
		; Returns value in <w0>.
; RENAME	; Rename <w0>:<w3>;<w1> <w2> to <w0>:<w3>;<w4> <w5>.
