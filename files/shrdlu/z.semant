

(DEFUN ADDLIS
       (NEW OLD)
       (PROG (LISTT XX)
	     (MAPC (FUNCTION (LAMBDA (A) (AND (SETQ XX (CHECK A (CAR OLD)))
					      (SETQ LISTT
						    (CONS (CONS XX (CDR OLD))
							  LISTT)))))
		   NEW)
	     (RETURN LISTT)))

(DEFUN ADDP (P) (PROG (LOOP)
		      (COND ((MEMQ P PROP) (RETURN T)))
		      (SETQ PROP (CONS P PROP))
		      (SETQ LOOP (GET P (Q PROP)))
		 LOOP (COND ((NULL LOOP) (SETQ LOOP (GET P (Q SYS))))
			    ((ADDP (CAR LOOP)) (SETQ LOOP (CDR LOOP)) (GO LOOP))
			    ((RETURN NIL)))
		 SYS  (COND ((NULL LOOP) (RETURN T))
			    ((MEMQ (CAR LOOP) SYS))
			    ((ADDP (CAR LOOP)) (SETQ SYS (CONS (CAR LOOP) SYS))
					       (SETQ LOOP (CDR LOOP))
					       (GO SYS)))))

(DEFUN AGREE (P X) (COND ((EQ PP (Q IT))
			  (COND (P (AND (ISQ X NS) (NOT (ISQ X PRONG))))
				((MEMBER (CAADR X) (Q (NS 1 (EXACTLY 1)))))))
			 (P (ISQ X NPL))
			 ((ATOM (CAADR X))
			  (OR (MEMQ (CAADR X) (Q (NPL ALL SG-PL)))
			      (AND (NUMBERP (CAADR X)) (NOT (EQ 1 (CAADR X))))))
			 ((NOT (EQ 1 (CADAAR (CDR X)))))))

(DEFUN ATO (X) (COND ((ATOM (CAR X)) (CDR X)) (X)))

(DEFUN ATO2 (X) (COND ((ATOM X) X) ((CADDR X))))

(DEFUN ATOMIZE (INTER) (AND INTER
			    ((LAMBDA (X) (PROG2 (PUTPROP X INTER (Q SM)) X))
			     (MAKESYM (Q ATM)))))
(DEFUN BACKREFX
 NIL
 (PROG (XX)
       (SETQ BACKREF2 NIL)
       (MAPC
	(FUNCTION (LAMBDA (X)
			  (AND (GET (CAR X) (Q BIND))
			       (GET (CAR X) (Q NG))
			       (RPLACA (CDDDR X) (SETQ XX (GET (CAR X) (Q NG))))
			       (OR (MEMQ (CADADR (INTERP XX)) (Q (NO ALL)))
				   (NOT (RPLACA (CDADR (INTERP XX)) (Q DEF)))
				   (BACKR2 (INTERP XX)
					   (PUTPROP XX
						    ((LAMBDA (Y)
							     (COND ((CDR Y) Y)
								   ((CAR Y))))
						     (GET (CAR X) (Q BIND)))
						    (Q REFER))))
			       (SETQ BACKREF2 (CONS X BACKREF2)))))
	BACKREF)
       (SETQ BACKREF NIL)
       (MAPC (FUNCTION (LAMBDA (X)
			       (SETQ XX (CADR (SASSQ X
						     (CADR (CADDDR ANS))
						     (FUNCTION SASS))))
			       (PUTPROP X XX (QUOTE LASTT))
			       (REMPROP X (Q BIND))))
	     (QUOTE (IT THEY ONE)))
       (SETQ LASTSENTNO (ADD1 LASTSENTNO))
       (AND (NULL (IMPERF)) (SETQ LASTEVENT (CAR (CADDDR ANS))))
       (SETQ LASTIME (CADR (OR (ASSQ (QUOTE TIME) FE) (LIST NIL LASTIME))))))
(DEFUN BACKR2
 (NG REFER)
 (PROG (X YY XX)
       (SETQ X (CDDAAR NG))
  GO   (COND
	((NULL X) (RETURN T))
	((NOT (EQ (CAAR X) (QUOTE THGOAL))))
	((PROG (XX)
	       (SETQ
		YY
		(MAPCAR (FUNCTION (LAMBDA (Z)
					  (COND ((ATOM Z) Z)
						((NOT (MEMQ (CAR Z)
							    (QUOTE (THV THNV))))
						 Z)
						((EQ (CADR Z) (CADDR NG))
						 (QUOTE ***))
						((SETQ XX T)))))
			(CADAR X)))
	       (RETURN XX)))
	((MAPC (FUNCTION (LAMBDA (Z)
				 (AND (SETQ XX (THVAL (LIST (QUOTE THGOAL)
							    (SUBST Z
								   (QUOTE ***)
								   YY))
						      NIL))
				      (PUTPROP1 XX LASTSENTNO (QUOTE WHO)))))
	       (LISTIFY REFER))))
       (SETQ X (CDR X))
       (GO GO)))

(DEFUN BINDIFY (X) (LIST (Q THPUTPROP)
			 (LIST (Q QUOTE) X)
			 (LIST (QUOTE THV) X)
			 (LIST (Q QUOTE) (Q BIND))))

(DEFUN BINDINGS
       (XX)
       (COND ((ATOM XX))
	     ((MEMQ (CAR XX) (QUOTE (THV THNV)))
	      (OR (MEMQ (CADR XX) BOUND)
		  (SETQ UNBOUND (UNION (CDR XX) UNBOUND))))
	     ((EQ (CAR XX) (Q THPROG))
	      ((LAMBDA (BOUND) (BINDINGS (CDDR XX))) (APPEND (CADR XX) BOUND)))
	     ((EQ (CAR XX) (QUOTE THFIND))
	      ((LAMBDA (BOUND) (BINDINGS (CDDDDR XX)))
	       (APPEND (CADDR XX) BOUND)))
	     ((MAPC (FUNCTION BINDINGS) XX)))
       XX)
(DEFUN BUILD
 NIL
 (SETQ
  LIST1
  (CONS
   (LIST (CHECK (LIST(CADDR AA))
		(LIST NIL
		      (NCONC (LIST (PLUS (BU2 MAP1)
					 (BU2 MAP2)
					 (BU2 MAP3)
					 (COND ((CDDDR AA)
						(EVAL (CAR (CADDDR AA))))
					       (0))))
			     (AND (CDDDR AA)
				  (OR (EQ AMBL T)
				      (SETQ AMBL ((LAMBDA (X)
							  (COND ((MEMBER X AMBL)
								 (CONS X AMBL))
								(T)))
						  (LIST MAP1 MAP2 MAP3 TIME))))
				  ((LAMBDA (X)
					   (PUTPROP X
						    (AND (CADDDR AA)
							 (CADR (CADDDR AA)))
						    (Q AMBIG))
					   (LIST (LIST AMBIG X)))
				   (MAKESYM (Q AMB))))
			     (BU1 MAP1)
			     (BU1 MAP2)
			     (BU1 MAP3)
			     (AND ITREF (LIST (LIST (Q IT) ITREF)))
			     (AND THEYREF (LIST (LIST (Q THEY) THEYREF)))
			     (AND (OR ITREF THEYREF) (Q (PRONREF))))
		      NIL))
	 NIL
	 (NUMSUB (COND ((EQ (CAADR AA) (Q #EVAL)) (EVAL (CADADR AA)))
		       ((CADR AA))))
	 (COND ((ATOM REL) NIL)
	       ((MEMQ MAP1 REL) MAP1)
	       ((MEMQ MAP2 REL) MAP2)
	       ((MEMQ MAP3 REL) MAP3)
	       ((CAR REL)))
	 (AND (NOT (ATOM REL)) RELPREP))
   LIST1)))

(DEFUN BU1 (X) (PROG (XX)
		     (MAPC (FUNCTION (LAMBDA (Z) (OR (ATOM Z)
						     (MEMQ (CAR Z)
							   (Q (IT THEY ONE)))
						     (SETQ XX (CONS Z XX)))))
			   (AND X (CADAR (INTERP X))))
		     (RETURN XX)))

(DEFUN BU2 (X) (COND ((NULL X) 0) ((CAADAR (INTERP X)))))

(DEFUN B2 (X) (LIST (CAR X) (FROM (CADR X) (CADDR X)) (CADDDR X)))
(DEFUN CHECK
 (NEW OLD)
 (PROG (PROP SYS XX PROVE NEWP)
       (COND ((EQ (CADADR OLD) (Q CONJ))
	      (MAPC (FUNCTION (LAMBDA (X) (OR (CHECK NEW (CAR (INTERP X)))
					      (SETQ PROP T))))
		    (CADDR OLD))
	      (RETURN (NOT PROP)))
	     ((NULL NEW) (RETURN OLD))
	     ((AND (CDR NEW) (CDDR NEW)) (OR (EVAL (CADDR NEW)) (RETURN NIL))))
       (SETQ NEWP (CAR NEW))
       (SETQ PROP (CDADR OLD))
       (SETQ SYS (CADDR OLD))
       (SETQ PROVE (CAR OLD))
  UP   (COND ((NULL NEWP)
	      (AND (CDR NEW) (MAPC (FUNCTION NEWPV)
				   (COND ((EQ (CAADR NEW) (QUOTE #EVAL))
					  (EVAL (CADADR NEW)))
					 ((CADR NEW)))))
	      (RETURN (LIST PROVE
			    (CONS (PLUS (CAADR OLD)
					(COND ((AND (CDR NEW)
						    (CDDR NEW)
						    (CDDDR NEW))
					       (EVAL (CAR (CADDDR NEW))))
					      (0)))
				  (NCONC (AND (CDR NEW)
					      (CDDR NEW)
					      (CDDDR NEW)
					      (OR (EQ AMBL T)
						  (SETQ AMBL
							(COND ((MEMQ OLD AMBL)
							       T)
							      ((CONS OLD
								     AMBL)))))
					      (PUTPROP (SETQ XX
							     (MAKESYM (Q AMB)))
						       (AND (CDR (CADDDR NEW))
							    (CADR (CADDDR NEW)))
						       (Q AMBIG))
					      (LIST (LIST AMBIG XX)))
					 PROP))
			    SYS)))
	     ((ADDP (CAR NEWP)) (SETQ NEWP (CDR NEWP)) (GO UP)))))

(DEFUN FEXPR
       CLEANOUT
       (LIST)
       (MAPC (FUNCTION (LAMBDA (A)
			       (CLEANX A 0 (GET A (Q MAKESYM)))
			       (PUTPROP A 0 (Q MAKESYM))))
	     LIST))
(DEFUN CLEANX (A B C) (PROG (I)
			    (PUTPROP A B (QUOTE MAKESYM))
			    (RETURN (AND B C (DO I
						 B
						 (ADD1 I)
						 (GREATERP I C)
						 (EVAL (LIST (Q REMOB)
							     (MAKESYM A))))))))

(DEFPROP CLEANOUT (NIL CLEANOUT ATM TIME AMB X NG) VALUE)

(DEFUN FEXPR
 CMEANS
 (B)
 (PROG (MAP1 MAP2 MAP3 ITREF AMBIG AMBL THEYREF IT1 IT2 TH1 TH2)
       (SETQ AMBIG (MAKESYM (Q AMB)))
       (MAPC
	(FUNCTION
	 (LAMBDA (AA)
	  (COND
	   ((NULL (CAR AA)) (BUILD))
	   ((MAPC
	     (FUNCTION
	      (LAMBDA (MAP1)
	       (AND
		(CHECK (ATO (CAAR AA)) (CAR (INTERP MAP1)))
		(CPREF (CADAR (INTERP MAP1)) NIL)
		(COND
		 ((NULL (CDAR AA)) (BUILD))
		 ((MAPC
		   (FUNCTION
		    (LAMBDA (MAP2)
		     (AND
		      (CHECK (ATO (CADAR AA)) (CAR (INTERP MAP2)))
		      (CPREF (CADAR (INTERP MAP2)) 1)
		      (COND
		       ((NULL (CDDAR AA)) (BUILD))
		       ((MAPC
			 (FUNCTION (LAMBDA (MAP3)
					   (AND (CHECK (ATO (CADDAR AA))
						       (CAR (INTERP MAP3)))
						(CPREF (CADAR (INTERP MAP3)) T)
						(BUILD))))
			 (COND ((ATOM (CAADDR (CAR AA)))
				(EVAL (CAADDR (CAR AA))))
			       (SMOB2))))))))
		   (COND ((ATOM (CAADAR AA)) (EVAL (CAADAR AA))) (SMOB1))))))))
	     (COND ((ATOM (CAAAR AA)) (EVAL (CAAAR AA))) (SMSUB)))))))
	B)
       (COND ((NULL AMBL))
	     ((EQ AMBL T) (PUTPROP AMBIG (LIST WHO (FROM NB N)) (Q AMBIG)))
	     ((MAPC (FUNCTION (LAMBDA (X) (RPLACA (CDAR X)
						  (CONS (CAADAR X)
							(CDDR (CADAR X))))))
		    LIST1)))))
(DEFUN CPREF
       (X Y)
       (PROG (IT THEY)
	     (OR (MEMQ (Q PRONREF) X) (RETURN T))
	     (MAPC (FUNCTION (LAMBDA (Y) (COND ((EQ (CAR Y) (Q IT))
						(SETQ IT (CADR Y)))
					       ((EQ (CAR Y) (Q THEY))
						(SETQ THEY (CADR Y))))))
		   X)
	     (COND ((NULL Y) (SETQ ITREF (SETQ IT1 IT))
			     (SETQ THEYREF (SETQ TH1 THEY))
			     (RETURN T))
		   ((NUMBERP Y) (COND ((AND IT1 IT (NOT (EQ IT1 IT))))
				      ((AND TH1 THEY (NOT (EQ TH1 THEY))))
				      (T (SETQ ITREF (OR (SETQ IT2 IT) IT1))
					 (SETQ THEYREF (OR (SETQ TH2 THEY) TH1))
					 (RETURN T)))
				(RETURN NIL))
		   ((EQ Y (Q RELATE))
		    (COND ((AND ITREF IT (NOT (EQ ITREF IT))))
			  ((AND THEYREF THEY (NOT (EQ THEYREF THEY))))
			  (T (SETQ ITREF IT) (SETQ THEYREF THEY) (RETURN T)))
		    (RETURN NIL))
		   ((AND IT2 IT (NOT (EQ IT2 IT))))
		   ((AND TH2 THEY (NOT (EQ THEY TH2))))
		   (T (SETQ ITREF (OR IT IT2))
		      (SETQ THEYREF (OR THEY TH2))
		      (RETURN T)))))

(DEFUN FINDCONTRAST (X) (COND ((NULL CONTRAST) (REVERSE X))
			      ((NULL X) NIL)
			      ((FINDCONTRAST (CDR X)))
			      ((AND (EQ (CAR CONTRAST)
					(GET (CADDDR (CAR X)) (QUOTE CONTRAST)))
				    (NOT (EQ (CADR CONTRAST) (CADDDR (CAR X)))))
			       (REVERSE (CDR X)))))

(DEFUN FINDIFY
       (P VAR VARLIST BODY)
       ((LAMBDA (X)
		(COND (DISCOURSE (LIST (Q THPUTPROP2) VAR X (QUOTE BIND))) (X)))
	(APPEND (LIST (Q THFIND) P (LIST (QUOTE THV) VAR) VARLIST)
		BODY
		(AND DISCOURSE
		     (MEMBER P (Q (ALL 1 (EXACTLY 1))))
		     (MAPCAR (FUNCTION BINDIFY) (SETDIF VARLIST (LIST VAR)))))))

(DEFUN FINDNATOM
       (X)
       (PROG NIL
	GO   (COND ((NULL X) (RETURN NIL)) ((ATOM (CAR X))) ((RETURN (CAR X))))
	     (SETQ X (CDR X))
	     (GO GO)))

(DEFUN FINDPARSE
       (X)
       (SETQ X (FASSOC (QUOTE CADDDR) X BACKREF2))
       (AND X (PTFIND (CADR X) (CADDR X) T)))
(DEFUN FORGET
       FEXPR
       (A)
       (SETQ LASTSENT (SETQ LASTREL
			    (SETQ BACKREF
				  (SETQ BACKREF2

					(SETQ LASTIME (SETQ LASTPLACE NIL))))))
					(SETQ LASTSENTNO 0)
       (OR A (NULL MAKEINTERN) (EVAL CLEANOUT))
       (MAPC (QUOTE (LAMBDA (XX) (MAPC (QUOTE (LAMBDA (Y) (REMPROP XX Y)))
				       (QUOTE (BIND LASTT)))))
	     (QUOTE (IT THEY ONE)))
       (COND (NOMEM) ((MAPC (QUOTE PLNRCLEAN) EVENTLIST) (THFLUSH HISTORY)
							 (STARTHISTORY)))
       T)

(DEFUN GOALIZE
       (X)
       (COND ((AND (EVAL (GET (CAR X) (Q MULTIPLE)))
		   (PROG (XX)
			 (MAPC (QUOTE (LAMBDA (Y) (OR (ATOM Y)(EQ(CAR Y)'THV) (SETQ XX T)))) X)
			 (RETURN XX)))
	      ((LAMBDA (Z) (LIST (CONS (QUOTE THAND) (MAPCAR (FUNCTION CAR) Z))
				 (CADAR Z)))
	       (GOAL1 NIL X)))
	     ((GET (CAR X) (QUOTE NOGOAL)) (LIST X 0))
	     ((LIST (APPEND (LIST (Q THGOAL) (GOAL2 X)) (THMLIST X))
		    (PRIORITY X)))))

(DEFUN GOALIZE2 (X Y) (COND (Y (LIST (NOTIFY T (CAR (GOALIZE X))) (PRIORITY X)))
			    ((GOALIZE X))))

(DEFUN GOAL1
       (XX YY)
       (COND ((NULL YY) (LIST (GOALIZE (REVERSE XX))))
	     ((NOT(OR (ATOM (CAR YY))
(EQ(CAAR YY)'THV)))
	      (MAPCAN (FUNCTION (LAMBDA (X) (GOAL1 (CONS X XX) (CDR YY))))
		      (CAR YY)))
	     ((GOAL1 (CONS (CAR YY) XX) (CDR YY)))))

(DEFUN GOAL2 (X) (MAPCAR (FUNCTION (LAMBDA (Y) (OR (AND (ATOM Y)
							(GET Y (Q SM))
							(GET Y (Q REFER)))
						   Y)))
			 X))

(DEFUN IMPERF NIL (AND (* U (CLAUSE) DL PV (VG))
		       (OR (ISQ PT ING)
			   ((LAMBDA (X) (AND X (CDR X)))
			    (MEMQ (QUOTE PRES) (FINDNATOM (FE PT)))))))

(DEFUN INTERP (X) (COND ((ATOM X) (GET X (Q SM))) (X)))
(DEFUN ITIFY
 (P ITVAL X)
 (PROG (Y)
       (COND ((ATOM X)) ((CDR X) (ERT ITIFY)) ((SETQ X (CAR X))))
       (SETQ Y (GET X (Q SM)))
       (PUTPROP
	X
	(CONS
	 (LIST (CAAR Y)
	       (CONS ITVAL
		     (UNION (MAPCAR (FUNCTION (LAMBDA (X) (COND ((ATOM X) X)
								((Q PRONREF)))))
				    (CADAR Y))
			    (LIST (Q PRONREF) (LIST P X))))
	       (CADDAR Y))
	 (CDR Y))
	(Q SM))
       (RETURN X)))

(DEFUN LASTEV (X) (ERT LASTEV (X) UNDEFINED))

(DEFUN LASTPROCESS(X)X)

(DEFUN LISTIFY (X) (COND ((ATOM X) (LIST X)) (X)))

(SETQ MAKEINTERN T)

(DEFUN MAKESYM
       (A)
       (PUTPROP A (ADD1 (OR (GET A (Q MAKESYM)) 0)) (Q MAKESYM))
       (SETQ A (MAKNAM (APPEND (OR (GET A (Q EXPLO))
				   (PUTPROP A (EXPLODE A) (Q EXPLO)))
			       (EXPLODE (GET A (Q MAKESYM))))))
       (COND (MAKEINTERN (INTERN A)) (A)))

(DEFUN MAPLC
       (XX YY ZZ)
       (COND ((NULL ZZ) (EVAL (CONS YY XX)))
	     ((MAPC (FUNCTION (LAMBDA (X) (MAPLC (CONS X XX) YY (CDR ZZ))))
		    (CAR ZZ)))))

(DEFUN NATOM
       (X)
       (PROG (A)
	     (SETQ A LISTT)
	     (COND ((EQ X (QUOTE IT)) (RETURN (QUOTE THEY)))
		   ((EQ X (QUOTE THEY)) (GO ON)))
	UP   (COND ((EQ (CAAR A) X)) ((SETQ A (CDR A)) (GO UP)) ((RETURN NIL)))
	ON   (COND ((NOT (ATOM (CAR A))) (RETURN (CAAR A)))
		   ((SETQ A (CDR A)) (GO ON))
		   ((RETURN NIL)))))

(DEFUN NEWPV (X) (SETQ PROVE (ORDERSM (GOALIZE (NUMSUB X)) PROVE)))

(DEFUN NEWWORD NIL (EVAL (SUBST (CADDAR (NB H))
				(QUOTE *)
				(QUOTE (NMEANS ((#NEWWORD) ((#NEWWORD *))))))))

(DEFUN NGLIST
       (X)
       (PROG (Y) (PUTPROP (SETQ Y (MAKESYM (Q NG))) X (Q SM)) (RETURN Y)))
(DEFUN NMEANS
       FEXPR
       (XX)
       (PROG (AMBIG AMBL)
	     (SETQ AMBIG (MAKESYM (Q AMB)))
	     (SETQ LIST2
		   (MAPCAN (FUNCTION (LAMBDA (INTER) (ADDLIS XX INTER))) LIST1))
	     (COND ((NULL AMBL))
		   ((EQ AMBL T)
		    (PUTPROP AMBIG (LIST WHO (FROM NB N)) (Q AMBIG)))
		   ((MAPC (FUNCTION (LAMBDA (X) (RPLACD (CADAR X)
							(CDDR (CADAR X)))))
			  LIST2)))
	     (RETURN LIST2)))

(DEFUN NOTIFY (P X) (COND (P (COND ((NUMBERP (CAR X))
				    (LIST (CAR X) (NOT2 (CADR X))))
				   ((NOT2 X))))
			  (X)))

(DEFUN NOT2 (X) (COND ((EQ (CAR X) (Q THNOT)) (CADR X)) ((LIST (Q THNOT) X))))

(DEFUN NOUNCUT (X Z) (PROG (Y)
		      UP   (COND ((NULL X) (ERT NOUNCUT))
				 ((MEMQ (CAR X) Z) (RETURN NIL))
				 ((MEMQ (QUOTE PRON) (FE X)) (RETURN NIL))
				 ((NOT (SETQ Y (CONS (CAR X) Y))))
				 ((MEMQ (QUOTE NOUN) (FE X))
				  (RETURN (REVERSE Y))))
			   (SETQ X (CDR X))
			   (GO UP)))

(DEFUN NUMSUB
       (A)
       (DELQ (QUOTE :NOW)
	     (MAPCAR (FUNCTION (LAMBDA (B) (COND ((EQ B (Q #1)) (ATO2 MAP1))
						 ((EQ B (Q #2)) (ATO2 MAP2))
						 ((EQ B (Q #3)) (ATO2 MAP3))
						 ((EQ B (Q ***))
						  (COND ((EQ (CAADDR INTER)
							     (QUOTE THNOV))
							 (CADR (CADDR INTER)))
							((LIST (QUOTE THV)
							       (CADDR INTER)))))
						 ((EQ B (Q *TIME)) TIME)
						 (B))))
		     A)))

(DEFUN ORDERSM (A B) (COND ((EQ (CAAR A) (QUOTE #SUBST)) (SUBSTX (CDAR A) B))
			   ((NULL B) (LIST NIL (CADR A) (CAR A)))
			   ((LESSP (CADR A) (CADR B)) (APPEND B (LIST (CAR A))))
			   ((CONS (CAR B)
				  (CONS (CADR A) (CONS (CAR A) (CDDR B)))))))

(DEFUN ORDSM (LIST X) (COND ((NULL LIST) (LIST X))
			    ((NOT (LESSP (CAR X) (CAAR LIST))) (CONS X LIST))
			    ((CONS (CAR LIST) (ORDSM (CDR LIST) X)))))
(DEFUN ORD2 (X Y) (COND ((NUMBERP (CADR X)) (ORDERSM X Y))
			((APPEND Y (CDR X)))))

(DEFUN PLNRCLEAN
       (X)
       (MAPC (QUOTE (LAMBDA (Y) (MAPC (QUOTE (LAMBDA (Z) (THREMOVE (CAR Z))))
				      (CDDR Y))))
	     (GET X (QUOTE THASSERTION))))

(DEFUN PMAKE
 (VARLIST BODY VAR P NUM)
 (PROG (LIST1 LIST2 X)
       (OR (SETQ X (CDR (SASSQ (Q #SAME) BODY (FUNCTION SASS2)))) (GO GO))
       (SETQ VARLIST (SETDIF VARLIST X))
       (MAPC (FUNCTION (LAMBDA (X) (COND ((AND (EQ (CAR X) (Q THGOAL))
					       (NULL (MEET (CADR X) VARLIST)))
					  (SETQ LIST1 (CONS X LIST1)))
					 ((SETQ LIST2 (CONS X LIST2))))))
	     BODY)
       (SETQ BODY (REVERSE LIST2))
  GO   (RETURN (PROGIFY X
			(NCONC LIST1
			       (LIST (NOTIFY (EQ (CAR NUM) (Q <))
					     (FINDIFY (COND ((EQ P (Q ALL))
							     (Q ALL))
							    ((FINDNUM NUM)))
						      VAR
						      VARLIST
						      BODY))))
			T))))

(DEFUN PRIORITY (RELATION) (OR (EVAL (GET (CAR RELATION) (Q PRIORITY))) 0))

(DEFUN PROGIFY
       (XX YY ZZ)
       (SETQ ZZ (AND ZZ DISCOURSE XX (MAPCAR (FUNCTION BINDIFY) XX)))
       (COND ((AND XX (NULL (CDR YY)))
	      (COND ((EQ (CAAR YY) (Q THFIND))
		     ((LAMBDA (DISCOURSE) (FINDIFY (CADAR YY)
						   (CADDAR YY)
						   (APPEND XX (CADDDR (CAR YY)))
						   (APPEND (CDDDR YY) ZZ)))
		      NIL))
		    ((EQ (CAAR YY) (Q THPROG))
		     (PROGIFY (APPEND XX (CADAR YY))
			      (COND (ZZ (APPEND (CDDR XX) ZZ)) ((CDDR XX)))
			      NIL))
		    ((EQ (CADAR YY) (Q THAND))
		     (PROGIFY XX
			      (COND (ZZ (APPEND (CDAR YY) ZZ)) ((CDAR YY)))
			      NIL))
		    ((CONS (QUOTE THPROG) (CONS XX (APPEND YY ZZ))))))
	     (XX (CONS (QUOTE THPROG) (CONS XX (APPEND YY ZZ))))
	     ((NULL (CDR YY)) (CAR YY))
((CONS 'THAND YY))))
(DEFUN P1
 (A BB)
 (PROG (B ITEM BOUND XX)
       (COND ((NULL A) (GO RET))
	     ((EQ (CAR A) (Q #HASPROP))
	      (AND (GET (CADR A) (QUOTE REFER))
		   (RETURN (COND ((CDDDR (CAAR (SETQ ITEM (GET (CADDR A)
							       (QUOTE NG)))))
				  (LIST (PROGIFY NIL (CDDAAR ITEM) NIL)))
				 ((CDDAAR ITEM)))))
	      (SETQ ITEM (SETDIF (CAAAR (SETQ B (GET (CADDR A) (Q SM))))
				 (LIST (CADDR B))))
	      (AND DISCOURSE
		   (ASSQ (SETQ XX (CADDR (INTERP (CADR A)))) BACKREF)
		   (PUTPROP XX (CADR A) (Q NG)))
	      (AND BB (RETURN (LIST 0 (NOTIFY T (PROGIFY ITEM (CDDAAR B) T)))))
	      (SETQ VARS (APPEND ITEM VARS))
	      (RETURN (SUBST (CADDR (INTERP (CADR A))) (CADDR B) (CDAAR B)))))
       (SETQ B A)
  UP   (COND
	((NOT (OR (AND (EQ (SETQ ITEM (CAR B)) REL)
		       (ATOM (CADDR (INTERP REL)))
		       (PUTPROP (CADDR (INTERP REL)) REL (Q NG)))
		  (NOT (ATOM ITEM))
		  (AND (GET ITEM (Q REFER))
		       (OR (NOT DISCOURSE)
			   (NOT (ASSQ ITEM BACKREF))
			   (ATOM (CADDR (INTERP ITEM)))
			   (PUTPROP (CADDR (INTERP ITEM)) ITEM (Q NG))))
		  (AND (* C U (NG)) (MEMQ ITEM (SM PT)))
		  (NOT (SETQ ITEM (GET ITEM (Q SM))))
		  (EQ (CADADR ITEM) (QUOTE CONJ))))
	 (AND (EQ (CADADR ITEM) (Q ALL)) (SETQ BB (SETQ NEG T)))
	 (AND (EQ (CADADR ITEM) (Q NO)) (SETQ BB T))
	 (PUTPROP (CADDR ITEM) (CAR B) (Q NG))
	 (RETURN
	  (NOTIFY
	   BB
	   (COND ((AND (NOT BB) (MEMQ (CAADR ITEM) (Q (NS NPL SG-PL))))
		  (SETQ VARS (CONS (CADDR ITEM) VARS))
		  (CDR (ORD2 (P1 (CDR B) NIL) (CAAR ITEM))))
		 ((PROG (VARS X)
			(SETQ VARS (CAAAR ITEM))
			(SETQ X (ORD2 (P1 (CDR B) NIL) (CAAR ITEM)))
			(RETURN (LIST 0
				      (COND ((OR (AND BB
						      (MEMQ (CAADR ITEM)
							    (Q (NS NPL SG-PL))))
						 (EQ (CADADR ITEM) (Q ALL)))
					     (PROGIFY VARS (CDDR X) T))
					    ((PMAKE VARS
						    (CDDR X)
						    (CADDR ITEM)
						    (CADADR ITEM)
						    (CAADR ITEM))))))))))))
	((SETQ B (CDR B)) (GO UP)))
  RET  (RETURN (GOALIZE2 (MAPCAR (FUNCTION P2) (CADAR CLAUSE)) (OR BB NEG)))))
(DEFUN P2 (A) (PROG (X) (RETURN (COND ((NOT (ATOM A)) A)
				      ((SETQ X (GET A (Q REFER)))
				       (COND ((CDR X) X) ((CAR X))))
				      ((SETQ X (GET A (Q SM)))
				       (COND ((EQ (CADADR X) (QUOTE CONJ)) A)
					     ((LIST (QUOTE THV) (CADDR X)))))
				      (A)))))

(DEFUN PUTREF
       (X)
       (AND (NOT (GET X (QUOTE REFER)))
	    (GET X (QUOTE SM))
	    (PUTPROP X (LIST (QUOTE THV) (CADDR (INTERP X))) (QUOTE REFER))))

(DEFUN PUTREF2 (X) (AND (PUTREF X) (RPLACA (CDADR (INTERP X)) (QUOTE INDEF))))



(DEFUN RELATE
 (CLAUSE NG P)
 (PROG (REL VARS X NEG ITREF ONEREF THEYREF)
       (AND (ATOM (SETQ REL (CAAR CLAUSE))) (GO OK))
       (SETQ VARS (CADAR CLAUSE))
  GO   (AND (ATOM (CAR VARS))
	    (EQ (GET (CAR VARS) (Q SM)) REL)
	    (SETQ REL (CAR VARS))
	    (GO OK))
       (AND (SETQ VARS (CDR VARS)) (GO GO))
  OK   (CPREF (CADAR NG) (Q RELATE))
       (OR (CPREF (CADR CLAUSE) (Q RELATE)) (RETURN NIL))
       (COND ((NOT (EQ (CAR (SETQ VARS (CADAR CLAUSE))) (QUOTE #SUBST))))
	     ((CQ CLAUSE)
	      (RETURN (SETQ LIST1
			    (CONS (NCONC (LIST (CAR NG)
					       (CADR NG)
					       (SUBSTX (CDR VARS) (CADDR NG)))
					 (CDDDR NG))
				  LIST1))))
	     ((CQ NG) (MAPC (QUOTE PUTREF2) VARS)
		      (SETQ NG
			    (CONS (CONS (SUBSTX (CDR VARS) (CAAR NG)) (CDAR NG))
				  (CDR NG)))
		      (MAPC (QUOTE REMREF) VARS)))
       (SETQ VARS (CAAAR NG))
       (SETQ X (P1 (CADAR CLAUSE) (AND(NOT(CQ POLAR))(CADDAR CLAUSE))))
       (RETURN
	(COND
	 (P (PUTPROP (SETQ REL (COND ((GET P (QUOTE SM)) P) ((MAKESYM (Q NG)))))
		     (CONS (LIST (CONS VARS (CDR (ORD2 X (CAAR NG))))
				 (CONS (CAADR CLAUSE)
				       (APPEND (AND (OR ITREF THEYREF)
						    (Q (PRONREF)))
					       (AND ITREF
						    (LIST (LIST (Q IT) ITREF)))
					       (AND THEYREF
						    (LIST (LIST (Q THEY)
								THEYREF)))
					       (AND ONEREF
						    (LIST (LIST (QUOTE ONE)
								ONEREF)))
					       (UNION (CDADAR NG)
						      (BU1 (LIST CLAUSE)))))
				 (CADDAR NG))
			   (CDR NG))
		     (Q SM))
	    (SETQ LIST1 (CONS REL LIST1)))
	 ((SETQ NEG (MEMQ (CADADR (INTERP REL)) (QUOTE (NO ALL))))
	  (NOTIFY T
		  (PROGIFY (CAAAR NG)
			   (ORD2 (LIST 0
				       (NOTIFY (EQ (CAR NEG) (QUOTE ALL))
					       (PROGIFY (SETDIF VARS (CAAAR NG))
							(COND ((NUMBERP (CAR X))
							       (CDR X))
							      (X))
							NIL)))
				 (CDDAAR NG)))))
	 ((PMAKE VARS (CDDR (ORD2 X (CAAR NG))) (CADDR NG) (Q ALL) NIL))))))


(DEFUN REMPROVE
       (Y)
       (PROG (X)
	     (SETQ X (INTERP Y))
	     (RETURN (LIST (CONS (LIST (LIST (CADDR X)) 0) (CDAR X))
			   (CADR X)
			   (COND ((GET Y (QUOTE REFER))
				  (LIST (QUOTE THNOV) (GET Y (QUOTE REFER))))
				 ((CADDR X)))
			   (CADDDR X)
			   Y))))


(DEFUN REMREF (X) (AND (EQ (CAR (GET X (QUOTE REFER))) (QUOTE THV))
		       (REMPROP X (QUOTE REFER))))

(DEFUN FEXPR SAY (A) (MAPC (FUNCTION (LAMBDA (X) (PRINC X) (PRINC (Q / )))) A))

(DEFPROP #SUBST T NOGOAL)

(DEFUN SUBSTX (A B) (COND ((NULL A) B)
			  ((SUBST (OR (GET (CAR A) (QUOTE REFER)) (CAR A))
				  (CADR A)
				  (SUBSTX (CDDR A) B)))))

(DEFUN SUBTOP
       (XX YY Z)
       (MAPCAR (FUNCTION (LAMBDA (W) (COND ((EQ W YY) XX) (W)))) Z))

(DEFUN SWITCHES NIL (MAPC (FUNCTION (LAMBDA (XX)
					    (PRINT XX)
					    (PRINC (QUOTE =/ ))
					    (ERRSET (PRINC (EVAL XX)))
					    (PRINC (QUOTE / ))
					    (ERRSET (SET XX (READ)) NIL)))
			  SWITCHES))

(MAPC (FUNCTION SET)
      (SETQ SWITCHES (QUOTE (NOSTOP WALLP
				    PARSEBREAK
				    PARSETRACE
				    SMN
				    PLANNERSEE
				    DISCOURSE
				    IASSUME
				    TIMID
				    NOMEM
				    DOIT
				    MAKEINTERN
				    RECORD
				    MOVIE)))
      (QUOTE (NIL NIL NIL NIL NIL T T T 200 T NIL NIL NIL NIL)))

(SETQ MODAL NIL)

(DEFUN THMLIST
       (RELATION)
(PROG(X)
(RETURN(AND(SETQ X(GET(CAR RELATION)'THMLIST))
(EVAL(COND((NUMBERP(CAAR X))(CADR(ASSQ(LENGTH RELATION)X)))(X)))))))

(DEFUN THPUTPROP2 FEXPR (X) (THPUTPROP (CAR X)
				       (THVAL (CADR X) THALIST)
				       (CADDR X)))

(DEFUN THVAL2
       (WHO AA)
       (PROG (RESULT X)
(SETQ AA(LASTPROCESS AA))
	     (SETQ THLEVEL (QUOTE (T)))
	     (SETQ X (SETQ RESULT (QUOTE (NIL))))
	     (COND (PLANNERSEE (DISP AA) (OR NOSTOP (ERT FOR PLANNER))))
	     (RETURN (COND ((EQ RESULT X) (THVAL AA (QUOTE ((EV COMMAND)))))
			   (RESULT)))))

(DEFUN WHO (X) (COND ((NULL WHO))
		     ((ATOM X))
		     ((NOT (SETQ X (GET X (QUOTE WHO)))) NIL)
		     ((EQ WHO (QUOTE HE)))
		     ((LESSP (CAR WHO) X LASTSENTNO))))



(DEFUN SMADJ
 (XX)
(PROG(YY)
(SETQ YY(AND(CQ COMP)(CQ ADJG)))
(RETURN (COND
  ((EQ (CAR XX) (QUOTE AND))
   (MAPC (QUOTE (LAMBDA (Y) (EVAL Y) (SETQ LIST1 LIST2))) (CDR XX)))
  ((EQ (CAR XX) (QUOTE OR))
   (SETQ
    LIST2
    (MAPCAN
     (QUOTE
      (LAMBDA (Y)
       (PROG (LIST1 LIST2 AA YY ZZ)
	     (SETQ AA (LIST (REMPROVE (SETQ Y (INTERP Y)))))
	     (MAPC
	      (QUOTE
	       (LAMBDA (Z)
		(SETQ LIST1 AA)
		(EVAL Z)
		(COND (LIST2 (SETQ ZZ (CONS (COND ((CDDDR (CAAAR LIST2))
						   (CONS (QUOTE THAND)
							 (CDDR (CAAAR LIST2))))
						  ((CADDR (CAAAR LIST2))))
					    ZZ)))
		      ((SETQ YY T)))))
	      (CDR XX))
	     (RETURN (AND (NULL YY)
			  (LIST ((COND (YY (QUOTE NGLIST))
				       ((QUOTE INTERP)))
				 (CONS (CONS (APPEND (CAAR (COND (YY
								  (CAR AA))
								 (Y)))
						     (LIST (CONS (QUOTE THOR)
								 ZZ)))
					     (CDAAR LIST2))
				       (CDR Y)))))))))
     LIST1)))
  ((AND YY (SETQ LIST1 (MAPCAR (QUOTE REMPROVE) LIST1)) NIL))
  ((EVAL XX)
   (AND
    YY
    (SETQ
     LIST2
     (MAPCAR
      (QUOTE
       (LAMBDA (X)
	(COND ((CDR (CDDAAR X)) (NGLIST X))
	      ((LIST (LIST (COND ((SETQ XX (GET (CAR LIST1) (QUOTE REFER))) NIL)
				 ((CAR LIST1)))
			   (MAPCAR (QUOTE (LAMBDA (Y)
						  (OR (GET Y (QUOTE REFER))
						      (AND (EQ (CAR Y)
							       (QUOTE THV))
							   (EQ (CADR Y)
							       (CADDAR LIST2))
							   (CAR LIST1))
						      X)))
				   (CADAR (CDDAAR X)))
			   (AND (ISQ (* C U) NEG) (QUOTE NEG)))
		     NIL
		     NIL)))))
      LIST2))))))))

(DEFUN SMADJCOMP NIL (COND ((* C PV (SUBJ)) (AND (ISQ PT DEF) (SETQ XX T)))
			   ((ISQ (* C U) SUBREL) (* U))
			   ((ISQ PT SUBJQ) (* C PV (QUEST)))
			   ((ERT SMPREP COMP NO SUBJ))))
(DEFUN SMADJG
 NIL
 (SETQ
  LIST2
  (MAPCAR
   (FUNCTION
    (LAMBDA (X)
	    (RPLACA (CDDDR X)
		    (LIST (QUOTE SMADJG2)
			  (CADR (SASSQ (QUOTE MEASURE)
				       (GET (CADDDR (CAR (NB LOOP)))
					    (QUOTE SMNTC))
				       (QUOTE (LAMBDA NIL
						      (ERT SMADJG MEASURE)))))))
	    X))
   LIST1)))

(DEFUN SMADJG2
 FEXPR
 (A)
 (PROG (XX)
       (SETQ A (CAR A))
       (RETURN
	(RPLACD
	 (LAST (CAAR INTER))
	 (LIST
	  (LIST
	   (QUOTE THNOT)
	   (PROGIFY
	    (CONS (SETQ XX (MAKESYM (QUOTE X)))
		  (SETDIF (CAAAR INTER) (LIST (CADDR INTER))))
	    (APPEND (SUBST XX (CADDR INTER) (CDDAAR INTER))
		    (LIST (LIST (QUOTE THGOAL)
				(NCONC (LIST (QUOTE #MORE)
					     (CAAR A)
					     (LIST (QUOTE THV)
						   (COND ((CADDAR A) XX)
							 ((CADDR INTER))))
					     (LIST (QUOTE THV)
						   (COND ((CADDAR A)
							  (CADDR INTER))
							 (XX))))
				       (AND (EVAL (GET (CAAR A)
						       (QUOTE CHANGEABLE)))
					    (QUOTE (*TIME))))
				(QUOTE (THUSE TC-MORE)))))
	    NIL)))))))

(DEFUN SMADJQ
       NIL
       (SETQ SM (LIST (LIST LASTEVENT (QUOTE (0)) NIL)))
       ((LAMBDA (NOFLAG) (ANSWER NIL)) (QUOTE SMADJQ)))

(DEFUN SMADJGS NIL (PROG (LIST1 LIST2)
			 (SMADJCOMP)
			 (SETQ LIST1 (SM PT))
			 (SMADJ (SM H))
			 (RETURN (SETQ SM LIST2))))
(DEFUN SMBIND
       NIL
       (PROG (SM X Y START END)
	     (AND (CDR (SETQ SM (SM H))) (ERT AMBIG SMBIND))
	     (OR (SETQ SM (FINDEVENTS (CAR SM))) (RETURN NIL))
	     (SETQ START (GET (CAR SM) (QUOTE START)))
	     (SETQ END (GET (CAR SM) (QUOTE END)))
	     (SETQ Y (CADR (OR (ASSQ (QUOTE TIME) FE) (ERT SMBIND TIME))))
	     (AND (CAR (SETQ X (SM (* H DF))))
		  (RPLACA (CDDDR Y) (EVAL (CAR X))))
	     (AND (CADR X) (RPLACA (CDDDDR Y) (EVAL (CADR X))))
	     (RETURN T)))

(DEFUN SMCL1
 NIL
 (PROG (SMSUB SMOB1 SMOB2 SMOBL SMCOMP SKP LIST1 TIME REL PP XX RELPREP)
       (SETQ SMSUB (COND ((CQ SUBREL) (SETQ REL (SM (* C U))))
			 ((CQ SUBJQ) (SETQ REL (SM (* H PV (QUEST)))))
			 ((CQ IMPER) (Q (SHRDLU)))
			 ((CQ SUBUPREL) (SETQ REL (SM (* C U (NSUBR) U))))
			 ((* H PV (SUBJ)) (SM PT))
			 ((MEET FE (QUOTE (TO ING)))
			  (OR (* C PV (SUBJ)) (ERT SMCL1 TO-ING))
			  (SM PT))
			 ((ERT SMCL1 SMSUB))))
       (COND ((MEET (Q (THERE ITRNS)) FE) (GO DONE))
	     ((CQ ITRNSL) (GO LOC))
	     ((CQ INT) (GO COMP)))
       (SETQ SMOB1 (COND ((CQ PASV)
			  (SETQ SMOB1 SMSUB)
			  (SETQ SMSUB (COND ((CQ AGENT) (SM (OR T3 (* H DLC))))
					    ((Q (UNKNOWN)))))
			  SMOB1)
			 ((CQ OBJ1Q) (SETQ REL (SM (* H PV (QUEST)))))
			 ((CQ OBJ1REL) (SETQ REL (SM (* C U))))
			 ((CQ OBJ1UPREL) (SETQ REL (SM (* C U (NSUBR) U))))
			 ((* H PV (OBJ1)) (SM PT))
			 ((ERT SMCL1 OBJ1))))
       (COND ((CQ TRANS) (GO DONE)) ((CQ TRANSL) (GO LOC)))
       (SETQ SMOB2
	     (COND ((CQ OBJ2REL) (SETQ REL (SM (* C U))))
		   ((CQ OBJ2UPREL) (SETQ REL (SM (* C U (NSUBR) U))))
		   ((CQ OBJ2Q) (SETQ REL (SM (* H PV (QUEST)))))
		   ((CQ OBJ2TO)
		    (PROG2 NIL SMOB1 (SETQ SMOB1 (SM (* H PV (OBJ2TO))))))
		   ((CQ OBJ2TOQ)
		    (PROG2 NIL
			   SMOB1
			   (SETQ REL (SETQ SMOB1 (SM (* H PV (QUEST) DLC))))))
		   ((* H PV (OBJ2)) (SM PT))
		   ((ERT SMCL1 OBJ2))))
       (GO DONE)
  LOC  (SETQ SMOBL (COND ((CQ LOBREL) (SETQ REL (SM (* C U))))
			 ((CQ LOBQ)
			  (SETQ REL (SM (OR (* H PV (QUEST)) (* H PV (QADJ))))))
			 ((* H PV (LOBJ)) (SM PT))
			 ((ERT SMCL1 LOBJ))))
       (GO DONE)
  COMP (SETQ SMCOMP
	     (COND ((CQ COMPREL) (SETQ REL (SM (* C U))))
		   ((CQ COMPQ)
		    (SETQ REL (SM (OR (* H PV (QUEST)) (* H PV (QADJ))))))
		   ((* H PV (COMP)) (SM PT))
		   ((ERT SMCL1 COMP))))
  DONE (OR
	REL
	(CQ QADJ)
	(AND (CQ TIMEQ) (SETQ REL (SM (* H PV (QUEST)))))
	(AND (CQ PREPQ) (SETQ REL (SM (FINDQ (* H PV (QUEST) DLC)))))
	(MAP
	 (FUNCTION
	  (LAMBDA (A)
	   ((LAMBDA (X) (AND X
			     (NULL REL)
			     (NOT (EQ (CADADR (SETQ XX (GET (CAR X) (Q SM))))
				      (Q DEF)))
			     (NOT (GET (CAR X) (Q REFER)))
			     (NOT (MEMQ (CAADR XX) (QUOTE (NO ALL))))
			     (NOT (AND (NULL PP)
				       (OR (EQ (CADADR XX) (Q CONJ))
					   (AND (NUMBERP (CAADR XX))
						(NOT (EQ (CAADR XX) 1)))
					   (AND (NOT (ATOM (CAADR XX)))
						(NOT (MEMBER (CAADR XX)
							     (Q ((EXACTLY 1)
								 (< 2)))))))))
			     (SETQ REL X)))
	    (COND ((AND (EQ (CAAAR A) (Q NG)) (NOT (MEMQ (Q COMP) (CAAR A))))
		   (SETQ RELPREP NIL)
		   (SM A))
		  ((AND (EQ (CAAAR A) (QUOTE CLAUSE))
			(MEET (FE A) (QUOTE (SUBJ OBJ))))
		   (SM A))
		  ((EQ (CAAAR A) (Q PREPG))
		   (OR REL(SETQ RELPREP (FROM (NB A) (NB (H A)))))
		   (SM (CADDDR (CAR A))))))))
	 (REVERSE H)))
       (OR REL
	   (AND (SETQ PP (NOT PP)) (GO DONE))
	   (AND (CQ PASV)
		(EQUAL SMSUB (Q (UNKNOWN)))
		(SETQ REL SMSUB)
		(SETQ RELPREP (QUOTE (BY)))))
       (SETQ WHO (LISTIFY (CADDDR (CDDAR MVB))))
       (SETQ TIME (CADR (ASSQ (QUOTE TIME) FE)))
       (EVAL (CADR (SASSQ (CAR (MEET FE (Q (ITRNS TRANS
						  INT
						  TRANSL
						  TRANS2
						  THERE
						  ITRNSL))))
			  (SM MVB)
			  (FUNCTION (LAMBDA NIL (ERT SMCL1 VERB))))))
       (SETQ SM LIST1)
       (MAP (FUNCTION SMCL11) H)
       (RETURN SM)))
(DEFUN SMCL11
       (HERE)
       (COND ((MEMQ HERE SKP))
	     ((NULL (CAAR HERE)))
	     ((OR (ISQ HERE VG) (ISQ HERE AUX)) (AND (ISQ HERE NEG) (FQ NEG)))
	     ((MEET (CAAR HERE) (Q (THERE AUX VG LOBJ COMP PRT))))
	     ((ISQ HERE NG) (AND (COND ((ISQ HERE TIME))
				       ((AND (CQ NSUBQ) (ISQ HERE QUEST)
(ISQ(H HERE)TIM1))
(RQ NSUBQ)
(FQ TIMEQ)
					(MAPC (QUOTE PUTREF) (SM HERE))))
				 (SMTIME)))
	     ((ISQ HERE QADJ) (OR (MEET (Q (LOBQ COMPQ)) FE) (EVAL (SM HERE))))
	     ((ISQ HERE BOUND))
	     ((ISQ HERE BINDER))
	     ((ISQ HERE QUEST))
	     ((ISQ HERE CLAUSE)
	      (OR (MEET (FE HERE) (QUOTE (SUBJ OBJ))) (ERT SMCL11 CLAUSE)))
	     ((ISQ HERE PREPG)
	      (OR (ISQ HERE AGENT) (SMPREP NIL) (ERT SMCL11 SMPREP)))
	     ((ERT SMCL11 HERE))))

(SETQ RELPREP NIL)
(DEFUN SMCL2
 NIL
 (PROG (LIST1 XX)
       (SMPREPREL)
       (MAPC
	(FUNCTION
	 (LAMBDA (INTER)
	  (SETQ LIST1
		(CONS (LIST (LIST (CADDDR INTER)
				  (NCONC (MAPCAR (QUOTE SMCL3) (CADDR INTER))
					 (COND ((AND (CAR INTER) (CAAR INTER))
						(LIST (ATOMIZE (CAAR INTER))))))
				  (AND (CQ NEG) (QUOTE NEG)))
			    (CADAR INTER)
			    (CADDDR (CDR INTER)))
		      LIST1))))
	SM)
       (RETURN (AND LIST1
		    (SETQ SM
			  (COND ((MEET FE (QUOTE (SUBTO SUBING ING TO REPORT)))
				 (MAPCAR (FUNCTION SMCL4) LIST1))
				(LIST1)))))))

(DEFUN SMCL3 (X) (COND ((AND (EQ (CAR X) (QUOTE #TIME))
			     (EQ (CADR X) (QUOTE PAST))
			     (NULL (CADDR X))
			     (NULL (CADDDR X))
			     (EQ (CADR LASTIME) (QUOTE PAST)))
			LASTIME)
		       (X)))

(DEFUN SMCL4
       (X)
       (PROG (Y Z XX YY ZZ LIST1)
	     (SETQ Y (MAKESYM (QUOTE EVX)))
	     (SETQ Z (AND (* C DLC (MEET (FE PT) (QUOTE (UPREL UPQUES))))
			  (NOT (* C DLC (MEET (FE PT)
					      (QUOTE (DOWNREL DOWNQUES)))))))
	     (SETQ XX (MAKESYM (QUOTE NG)))
	     (SETQ YY (CONS (LIST (COND ((CQ UPREL) (CAAR X)) (XX))
				  (CONS (CAADAR X) (CONS XX (CDADAR X)))
				  (CADDAR X))
			    (CDR X)))
	     (PUTPROP XX
		      (SETQ ZZ (SUBST Y
				      (QUOTE FINDEVENTS)
				      (INTERP (QUOTE FINDEVENTS))))
		      (QUOTE SM))
	     (COND ((CQ UPREL) (PUTPROP XX YY (QUOTE UPREL)) (RETURN XX))
		   (Z (PUTPROP XX YY (QUOTE DOWNREL)) (RETURN XX))
		   ((RETURN (CAR (RELATE YY ZZ T)))))))
(DEFUN SMCONJ
       NIL
       (PROG (LIST1)
	     (COND ((ISQ RE MAJOR) (RETURN T))
		   ((ISQ RE NG))
		   ((OR (ISQ RE ADJ) (ISQ RE RSQ))
		    (RETURN (SETQ SM (CONS (COND((ATOM PREV)PREV)((CADR PREV)))
 (MAPLIST (FUNCTION SM) RE))))))
	     (MAPLC NIL (FUNCTION SMCONJ2) (MAPLIST (FUNCTION SM) RE))
	     (RETURN (AND LIST1 (SETQ SM LIST1)))))

(DEFUN SMCONJ2
 FEXPR
 (AA)
 (SETQ LIST1
       (CONS (NGLIST (LIST (CAR (INTERP (CAR AA)))
			   (LIST (COND ((OR (MEMQ (QUOTE AND) (FROM NBB N))
					    (ISQ RE NPL))
					(Q NPL))
				       ((Q NS)))
				 (Q CONJ)
				 (LIST PREV))
			   AA
			   NIL))
	     LIST1))
 (AND
  (ERRSET (MAPC (FUNCTION (LAMBDA (X)
				  (SETQ AA
					(APPEND (LISTIFY (OR (GET X
								  (QUOTE REFER))
							     (ERR NIL)))
					A))))
		AA))
  (PUTPROP (CAR LIST1) AA (QUOTE REFER))))

(DEFUN SMIT
       (PP)
       (PROG (X SAVE ZZ)
	     (OR DISCOURSE (ERT SMIT))
	     (AND MVB
		  (ISQ MVB DO)
		  (CQ OBJ1)
		  (PUTPROP (SETQ X (MAKESYM (QUOTE NG)))
			   (GET (QUOTE FINDEVENTS) (QUOTE SM))
			   (QUOTE SM))
		  (PUTPROP X (CADR LASTEVENT) (QUOTE REFER))
		  (RETURN (SETQ SM (LIST X))))
	     (COND ((GET PP (Q BIND))
		    (RETURN (SETQ SM
				  (MAPCAR (FUNCTION (LAMBDA (Y) (ITIFY PP 0 Y)))
					  (GET PP (Q BIND))))))
		   ((GET PP (Q LASTT))
		    (RETURN (SETQ SM (PUTPROP PP
					      (LIST (ITIFY PP
							   1000
							   (GET PP (Q LASTT))))
					      (Q BIND))))))
	TOP  (AND (OR (* C U U (NG) U U (NG)) (* C U U (NG) U (COMP) PV (SUBJ)))
		  (AGREE T PT)
		  (RETURN (SMIT2)))
	     (COND ((* C U (BOUND) U DLC)
		    (PTSV SAVE)
		    (AND (* PV (OBJ2)) (SMIT2))
		    (AND (* PV (OBJ1)) (SMIT2))
		    (AND (* PV (SUBJ)) (SMIT2))
		    (AND (NULL SM) (PTRS SAVE) (* PV (QUEST)) (SMIT2))
		    (AND (NULL SM) (PTRS SAVE) (ISQ PT RSQ) (* U) (SMIT2))
		    (AND SM (RETURN SM))))
	     (AND (OR (AND (ISQ LASTSENT SUBJQ) (* LASTSENT DLC PV (QUEST)))
		      (* LASTSENT DLC PV (SUBJ)))
		  (AGREE T PT)
		  (SETQ X (SMIT3))
		  (SMIT4 X 300))
	     (* LASTSENT DLC)
	UP   (COND ((NOT (* PV (NG))) (GO ON))
		   ((OR (ISQ PT SUBJ)
			(AND (ISQ PT QUEST) (ISQ LASTSENT SUBJQ))))
		   ((AND (AGREE T PT) (SETQ X (SMIT3)) (SMIT4 X 100))))
	     (AND (* PV) (GO UP))
	ON   (AND LASTREL
		  (NULL ZZ)
		  (NOT (AND X (EQ LASTREL (CADDDR X))))
		  (AGREE NIL (GET LASTREL (Q SM)))
		  (SETQ SM (CONS (ITIFY PP 200 LASTREL) SM)))
	     (OR SM (MAPC (FUNCTION (LAMBDA (X)
					    (AND (* LASTSENT)
						 (PTFIND (CADR X) (CADDR X) T)
						 (AGREE T PT)
						 (SETQ SM
						       (CONS (ITIFY PP
								    0
								    (CADDDR X))
							     SM)))))
			  BACKREF2))
	     (RETURN (SETQ SM (PUTPROP PP (REVERSE SM) (Q BIND))))))

(DEFUN SMIT3
       NIL
       (FASSOC (FUNCTION (LAMBDA (X) (AND (EQ (CADR X) (NB PT)) (CADDR X))))
	       (N PT)
	       BACKREF2))

(DEFUN SMIT4 (X Y) (SETQ SM (CONS (ITIFY PP
					 (PLUS Y (COND ((EQ (CADDDR X) LASTREL)
							(SETQ ZZ 200))
						       (0)))
					 (CADDDR X))
				  SM)))
(DEFUN SMIT2
 NIL
 (AND
  (AGREE T PT)
  (SETQ
   SM
   (NCONC
    (MAPCAR (FUNCTION (LAMBDA (Y)
			      (PROG (XX)
				    (PUTPROP (SETQ XX (NGLIST (INTERP Y)))
					     (COND ((GET Y (QUOTE REFER)))
						   ((LIST (QUOTE THV)
							  (CADDR (INTERP Y)))))
					     (QUOTE REFER))
				    (RETURN XX))))
	    (SM PT))
    SM))))

(DEFUN SMNGOF
 NIL
 (SETQ
  SM
  (MAPCAR
   (FUNCTION NGLIST)
   (MAPCAR
    (FUNCTION
     (LAMBDA (XX)
	     ((LAMBDA (Y)
		      (LIST (LIST (LIST (CAAAR Y)
					100
					(LIST (QUOTE THAMONG)
					      (LIST (QUOTE THV) (CADDR Y))
					      (LIST (QUOTE QUOTE)
						    (GET XX (QUOTE REFER)))))
				  (CADAR Y)
				  (CADDAR Y))
			    (LIST (COND ((CQ NUM) (SM (* H PV (NUM))))
					((ISQ NB BOTH) 2)
					((Q NPL)))
				  (COND ((* H PV (QNTFR)) (EVAL (SM PT)))
					((Q INDEF)))
				  (COND ((CQ HOWMANY) (Q (HOWMANY)))
					((CQ QDET) (Q (WHICH)))))
			    (CADDR Y)
			    NIL))
	      (INTERP XX))))
    (SM (* H DLC))))))
(DEFUN SMNG1
       NIL
       (PROG (LIST1 LIST2 VAR SKP LOOP)
	     (AND (CQ INCOM) (ISQ H DET) (RETURN (EVAL (SM H))))
	     (SETQ LIST1
		   (LIST (LIST (LIST (LIST (LIST (SETQ VAR (MAKESYM (Q X)))) 0)
				     (COND ((ISQ H TPRON) (QUOTE (0 #VAGUE)))
					   ((QUOTE (0))))
				     NIL)
			       (LIST (COND ((CQ NUMD)
					    ((LAMBDA (NUM)
						     (EVAL (SM (* H
								  PV
								  (NUMD)))))
					     (SM (* H PV (NUM)))))
					   ((CQ NUM) (SM (* H PV (NUM))))
					   ((CQ NPL) (COND ((ISQ NB BOTH) 2)
							   ((CQ NS) (Q SG-PL))
							   ((Q NPL))))
					   ((Q NS)))
				     (COND ((CQ QNTFR)
					    (EVAL (SM (* H PV (QNTFR)))))
					   ((CQ TPRON)
					    (EVAL (SM (* H PV (TPRON)))))
					   ((CQ DEF) (Q DEF))
					   ((CQ DET) (Q INDEF))
					   ((Q NDET)))
				     (COND ((CQ HOWMANY) (Q (HOWMANY)))
					   ((CQ QDET) (Q (WHICH)))))
			       VAR
			       (COND ((CQ ORD) (EVAL (SM (* H PV (ORD)))))))))
	     (SETQ LOOP H)
	     (COND ((ISQ H TPRON) (GO LOOP2)) ((CQ INCOM) (SMONE) (GO LOOP)))
	     (SETQ WHO (LIST (CADDAR (NB H))))
	     (EVAL (SM LOOP))
	LOOP (COND ((NULL (SETQ LIST1 LIST2)) (RETURN NIL)))
	     (SETQ LIST2 NIL)
	LOOP2(COND ((NULL (SETQ LOOP (CDR LOOP)))
		    (RETURN (AND LIST1
				 (SETQ SM (MAPCAR (FUNCTION NGLIST) LIST1)))))
		   ((MEMQ LOOP SKP))
		   ((OR (ISQ LOOP COMPAR) (ISQ LOOP SUP))
		    (OR (SMADJG) (ERT SMNG1 /-- SMADJG))
		    (GO LOOP))
		   ((MEMQ (CAAAR LOOP) (Q (ADJ CLASF)))
		    (SETQ WHO (LIST (CADDAR (NB H))))
		    (SMADJ (SM LOOP))
		    (GO LOOP))
		   ((ISQ LOOP POSS) (SMPOSS LIST1) (GO LOOP)))
	     (GO LOOP2)))
(DEFUN SMNG2
       NIL
       (PROG (LIST1 ZZ)
	     (SETQ ZZ (QUOTE SMNG2))
	     (SMPREPREL)
	     (AND DISCOURSE
		  (SETQ BACKREF (CONS (LIST (CADDR (INTERP (CAR SM))) NB N NIL)
				      BACKREF)))
	     (DEFPROP THTRUE WHO EXPR)
	     (MAPC (FUNCTION SMNG3) SM)
	     (REMPROP (QUOTE THTRUE) (QUOTE EXPR))
	     (RETURN (COND (LIST1 (SETQ SM LIST1))
			   ((SETQ NOFLAG (CONS ZZ (FROM NB N))) NIL)))))

(DEFUN SMNG3
       (VAR)
       (PROG (LIST MUNG INTER UNBOUND LIST2)
	     (REMPROP VAR (QUOTE REFER))
	     (SETQ INTER (GET VAR (Q SM)))
	     (AND (CADDDR INTER) (OR (EVAL (CADDDR INTER)) (RETURN NIL)))
	     (OR (EQ (CADADR INTER) (Q DEF))
		 (RETURN (SETQ LIST1 (CONS VAR LIST1))))
	     (AND (MEMQ (QUOTE #DIRECTION) (CADAR INTER))
		  (PUTPROP VAR
			   (RPLACA (OR (ASSQ (QUOTE #DIRECTION) (CDAAR INTER))
				       (CONS NIL (ERT SMNG3 DIRECTION)))
				   (QUOTE #LOC))
			   (QUOTE REFER))
		  (RETURN (SETQ LIST1 (CONS VAR LIST1))))
	     (PUTPROP (CADDR INTER) VAR (Q NG))
	     (SETQ LIST
		   (FINDIFY (Q ALL) (CADDR INTER) (CAAAR INTER) (CDDAAR INTER)))
	     ((LAMBDA (BOUND) (MAPC (QUOTE BINDINGS) (CDDAAR INTER)))
	      (CAAAR INTER))
	     (COND (UNBOUND (PUTPROP VAR
				     (LIST (CAR INTER)
					   (LIST (COND ((EQ (CAADR INTER)
							    (Q NS))
							(Q (EXACTLY 1)))
						       ((NUMBERP (CAADR INTER))
							(LIST (Q EXACTLY)
							      (CAADR INTER)))
						       ((EQ (CAAADR INTER)
							    (Q EXACTLY))
							(CAADR INTER))
						       ((Q ALL)))
						 (Q INDEF))
					   (CADDR INTER)
					   (CADDDR INTER))
				     (Q SM))
			    (GO DONE)))
	     (SETQ WHO NIL)
	UP   (COND ((NOT (SETQ LIST2 (THVAL2 WHO LIST))) (GO MUNG2))
		   ((NUMBERP (CAADR INTER))
		    (COND ((LESSP (LENGTH LIST2) (CAADR INTER)) (GO MUNG2))
			  ((GREATERP (LENGTH LIST2) (CAADR INTER)) (GO MUNG))))
		   ((EQ (CAADR INTER) (Q NS))
		    (COND ((NULL LIST2) (GO MUNG2)) ((CDR LIST2) (GO MUNG))))
		   ((MEMQ (CAADR INTER) (Q (NPL SG-PL))))
		   ((ERT SMNG3)))
	     (PUTPROP VAR
		      (COND ((CDR LIST2) LIST2) ((CAR LIST2)))
		      (QUOTE REFER))
	DONE (RETURN (SETQ LIST1 (CONS VAR LIST1)))
	MUNG2(OR DISCOURSE (RETURN NIL))
	     (AND (MEMQ WHO (Q (HE NIL))) (SETQ ZZ (QUOTE WHICH)) (RETURN NIL))
	     (SETQ MUNG T)
	MUNG (AND (MEMQ WHO (Q (HE NIL))) (MUNG LIST LIST2))
	     (SETQ WHO (COND ((EQ WHO NIL) (Q HE))
			     ((EQ WHO (Q HE))
			      (LIST (SUB1 LASTSENTNO) (ADD1 LASTSENTNO)))
			     ((OR (NOT MUNG) (EQ (CAR WHO) 1)) (RETURN NIL))
			     ((CONS (SUB1 (CAR WHO)) (CDR WHO)))))
	     (SETQ MUNG NIL)
	     (GO UP)))

(DEFUN SMONE
       NIL
       (PROG (CONTRAST X)
	     (SETQ X H)
	GO   (COND ((SETQ CONTRAST (GET (CADDDR (CAR (NB X))) (QUOTE CONTRAST)))
		    (SETQ CONTRAST (LIST CONTRAST (CADDDR (CAR (NB X))))))
		   ((SETQ X (CDR X)) (GO GO)))
	UP   (OR (AND (* C U U (NG)) (SMONE2 (LIST (LIST NIL (NB PT) N))))
		 (SMONE2 BACKREF)
		 (SMONE2 ANSNAME)
		 (SMONE2 BACKREF2)
		 (COND (CONTRAST (SETQ CONTRAST NIL) (GO UP)))
		 (AND (* LASTSENT DLC PV (NG))
		      (SMONE2 (LIST NIL (NB PT) (N PT))))
		 (ERT SMONE))
	     (RETURN T)))

(DEFUN SMONE2 (X) (PROG (Y)
			(OR X (RETURN NIL))
		   UP	(SETQ Y (NOUNCUT (CADAR X) (AND (CDDAR X) (CADDAR X))))
			(OR (SETQ Y (FINDCONTRAST Y))
			    (AND (SETQ X (CDR X)) (GO UP))
			    (RETURN NIL))
			(AND (ISQ Y NUM) (RETURN NIL))
			(EVAL (CADR (OR (ASSQ (QUOTE NOUN) (CADAR Y))
					(ERT SMONE2))))
		   GO	(AND (SETQ Y (CDR Y))
			     (MEMQ (QUOTE ADJ) (CAAR Y))
			     (SETQ LIST1 LIST2)
			     (EVAL (CADR (ASSQ (QUOTE ADJ) (CADAR Y))))
			     (GO GO))
			(RETURN LIST2)))
(DEFUN SMPOSS
 (LISTT)
 (PROG (SMSUB SMOB1 TIME REL)
       (SETQ WHO (FROM (NB LOOP) (N LOOP)))
       (SETQ SMSUB (SM LOOP))
       (SETQ TIME (Q :NOW))
       (REMPROP (Q ATOM) (Q REFER))
       (SETQ SMOB1 (SETQ REL (Q (ATOM))))
       (MAPC
	(FUNCTION
	 (LAMBDA (INTER)
	  (PROG (LIST1 SM)
		(PUTPROP (Q ATOM) INTER (Q SM))
		(EVAL (CADR (OR (ASSQ (QUOTE TRANS)
				      (CADR (OR (ASSQ (QUOTE VB)
						      (GET (QUOTE HAVE)
							   (QUOTE SMNTC)))
						(ERT SMPOSS))))
				(ERT SMPOSS))))
		(SETQ SM LIST1)
		(SMCL2)
		(SETQ LIST1 NIL)
		(MAPC (FUNCTION (LAMBDA (A) (RELATE A INTER T))) SM)
		(SETQ LIST2 (NCONC (MAPCAR (FUNCTION INTERP) LIST1) LIST2)))))
	LISTT)))
(DEFUN SMPREP
 (PP)
 (PROG (SMOB1 PTS LIST1 LIST2 LIST3 SMSUB REL XXP XX TIME PREP)
       (COND ((OR NOMEM (NULL DISCOURSE)) (SETQ TIME (QUOTE :NOW)))
	     ((* C U (AND (SETQ XXP (ASSQ (QUOTE TIME) (FE PT)))
			  (NOT (EQ (CADR XXP) (QUOTE SEC)))
			  (SETQ TIME (CADR XXP)))))
	     ((ERT SMPREP TIME)))
       (SETQ SMSUB (COND ((EQ PP (Q LOBJ)) (Q (PLACE)))
			 ((EQ PP (Q THERE)) LIST)
			 ((MEMQ PP (QUOTE (COMP ADJCOMP))) (SMADJCOMP) (SM PT))
			 (SM)))
       (COND ((EQ PP (QUOTE ADJ))
	      (AND (MEET (FE H) (QUOTE (AS COMPAR))) (GO ON))
	      (* H))
	     ((EQ PP (QUOTE ADJCOMP))
	      (AND (MEET FE (QUOTE (AS COMPAR))) (GO ON))
	      (* C))
	     ((GO ON)))
       (SETQ LIST1 (MAPCAR (FUNCTION REMPROVE) SMSUB))
       (SETQ WHO (LISTIFY (CADDAR (NB (* DLC PV (ADJ))))))
       (EVAL (SM PT))
       (RETURN (AND LIST2 (SETQ SM (MAPCAR (FUNCTION NGLIST) LIST2))))
  ON   (SETQ SMOB1 (SM (COND ((MEMQ PP (Q (LOBJ ADJCOMP COMP))) (* H PV (NG)))
			     ((EQ PP (QUOTE PREPREL))
			      (PROG2 (* C U (PREPREL) U U) PT (* DL)))
			     (PP (* H DLC PV (NG)))
			     ((* H PV (EQ PT HERE) DLC)))))
       (AND (OR (ISQ PT QUEST) (ISQ PT RELPREPG)) ((ERT PUTQUES UNDEFINED)))
       (PTSV PTS)
       (SETQ WHO (NB PT))
       (SETQ WHO (FROM (NB (* U)) WHO))
       (SETQ
	PREP
	(COND ((MEMQ PP (QUOTE (ADJ ADJCOMP)))
	       (CONS (Q CMEANS)
		     (MAPCAR (FUNCTION SMPREP3)
			     (CADR (SASSQ (QUOTE MEASURE)
					  (CADAR (NB (COND ((EQ PP (QUOTE ADJ))
							    (* H DLC PV (ADJ)))
							   ((* C
							       DLC
							       PV
							       (ADJ))))))
					  (QUOTE (LAMBDA NIL
							 (ERT SMPREP
							      MEASURE))))))))
	      ((MEMQ (CAAR (SM PT)) (QUOTE (T NIL)))
	       (CADR (SASSQ (AND PP (NOT (EQ PP (Q P))))
			    (SM PT)
			    (FUNCTION (LAMBDA NIL (ERT SMPREP UNDEFINED))))))
	      ((SM PT))))
       (MAPC (FUNCTION SMPREP4) SMSUB)
       (RETURN (AND LIST3 (SETQ SM LIST3)))))
(DEFUN SMPREPREL
       NIL
       (PROG (X Y) (RETURN (AND (* C U (PREPREL) U)
				(NOT (EQ (CAR (SETQ X (SM PT))) (QUOTE USED)))
				(MAPC (QUOTE PUTREF) (SETQ Y (SM (* U))))
				(SMPREP (QUOTE PREPREL))
				(MAPC (QUOTE REMREF) Y)
				(RPLACA X (QUOTE USED))))))

(DEFUN SMPREP2
 NIL
 (PROG (LISTT XX)
       (MAPC
	(FUNCTION
	 (LAMBDA (INTER)
		 (PROG (SM)
		       (SETQ SM (LIST (SETQ XX (CADR (CADDR INTER)))))
		       (SMPREP (Q THERE))
		       (MAPC (FUNCTION (LAMBDA (X)
					       (SETQ LISTT
						     (CONS (SUBST X XX INTER)
							   LISTT))))
			     SM))))
	SM)
       (RETURN (AND LISTT (SETQ SM LISTT)))))

(DEFUN SMPREP3 (X) (LIST (LIST (LIST (CADR X)) (LIST (CADR X)))
			 (NCONC (LIST (COND ((COND (PP (CQ AS)) ((ISQ H AS)))
					     (Q #ASMUCH))
					    ((Q #MORE)))
				      (CAR X)
				      (COND ((CADDR X) (Q #1)) ((Q #2)))
				      (COND ((CADDR X) (Q #2)) ((Q #1))))
				(AND (EVAL (GET (CAR X) (QUOTE CHANGEABLE)))
				     (QUOTE (*TIME))))
			 NIL))

(DEFUN SMPREP4
       (VAR)
       (PROG (INTER LIST1 LIST2 SKIP)
	     (SETQ SMSUB (LIST VAR))
	     (SETQ REL
		   (COND ((NULL XX) SMSUB) ((ISQ (CAR PTS) DEF) NIL) (SMOB1)))
	     (SETQ INTER (INTERP VAR))
	     (PTRS PTS)
	     (EVAL PREP)
	GO   (AND (* PV) (COND ((ISQ PT PREPADV) (EVAL (SM PT))) (T)) (GO GO))
	     (AND (OR SKIP (MEMQ PP (QUOTE (COMP ADJCOMP)))) (GO RET))
	     (PROG (SM) (SETQ SM LIST1) (SMCL2) (SETQ LIST2 SM))
	     (SETQ LIST1 NIL)
	     (MAPC (FUNCTION (LAMBDA (X) (RELATE X INTER T))) LIST2)
	RET  (SETQ LIST3 (NCONC LIST1 LIST3))))
(DEFUN SMPROP
 NIL
 (PROG (NAME)
       (PUTPROP (SETQ NAME (MAKESYM (QUOTE NG)))
		(GET (QUOTE NAME) (QUOTE SM))
		(QUOTE SM))
       (PUTPROP NAME (CADDAR NB) (QUOTE REFER))
       (RETURN
	(SETQ
	 SM
	 (CONS
	  NAME
	  (OR (LIST (EVAL(GET (CADDAR NB) (QUOTE PROPN))))
	      (MAPCAR (FUNCTION (LAMBDA (X)
					(PROG (Y)
					      (SETQ Y (MAKESYM (QUOTE NG)))
					      (PUTPROP Y
						       (GET (QUOTE UNKNOWNSG)
							    (QUOTE SM))
						       (QUOTE SM))
					      (PUTPROP Y X (QUOTE REFER))
					      (RETURN Y))))
		      ((LAMBDA (X)
			       (AND X
				    (SETQ BACKREF
					  (CONS (LIST (QUOTE UNKNOWN) NB N NIL)
						BACKREF))
				    X))
		       (THVAL (QUOTE (THFIND ALL
					     (THV X)
					     (X)
					     (THGOAL (#CALL (THV X) (THV Y)))))
			      (LIST (LIST (QUOTE Y) (CADDAR NB))))))))))))
(DEFUN SMRSQ
 (A B)
 (PROG (LIST1 X AA YY)
       (COND ((EQ (CAR A) (QUOTE AND)) (SETQ AA (CADR A)) (SETQ A (CDDR A)))
	     ((SETQ AA A) (SETQ A NIL)))
  UP2  (AND (ISQ H DOWNREL) (GO DOWNREL))
  UP   (MAPC
	(FUNCTION (LAMBDA (INTER)
			  (MAPC (FUNCTION (LAMBDA (NINT)
						  (COND ((EQ INTER (CAAR NINT))
							 (RELATE NINT
								 (INTERP INTER)
								 T)))))
				AA)))
	B)
       (COND ((AND LIST1
		   (SETQ A (SUBLIS (MAPCAR (QUOTE CONS) B (REVERSE LIST1)) A)))
	      (SETQ AA (CAR A))
	      (SETQ A (CDR A))
	      (SETQ B LIST1)
	      (SETQ LIST1 NIL)
	      (GO UP2)))
       (RETURN (AND LIST1 (SETQ SM LIST1)))
  DOWNREL
       (* C DLC)
       (PTSV YY)
       (MAPC (FUNCTION (LAMBDA (X) (RELATE X (INTERP (CAAR X)) (CAAR X)))) AA)
       (SETQ LIST1 NIL)
  BACK (PTRS YY)
       (OR (* DLC DLC (CLAUSE)) (ERT SMRSQ *))
       (PTSV YY)
       (COND ((GET (CAR (SM PT)) (QUOTE DOWNREL))
	      (MAPC (FUNCTION (LAMBDA (X)
				      (RELATE (SETQ X (GET X (QUOTE DOWNREL)))
					      (INTERP (CAAR X))
					      (CAAR X))))
		    (SM PT))
	      (GO BACK))
	     ((GET (CAR (SM PT)) (QUOTE UPREL))
	      (SETQ AA (MAPCAR (FUNCTION (LAMBDA (X) (GET X (QUOTE UPREL))))
			       (SM PT)))
	      (GO UP))
	     ((ERT SMRSQ DOWNREL)))))
(DEFUN SMTHAT
 NIL
 (AND LASTANSEV
      (SETQ SM (LIST (MAKESYM (QUOTE NG))))
      (PUTPROP (CAR SM) (GET (QUOTE FINDEVENTS) (QUOTE SM)) (QUOTE SM))
      (PUTPROP (CAR SM)
	       (APPEND (CAR (OR (THVAL (QUOTE (THOR (THGOAL ((THV X) (THV EV)))
						    (THGOAL ((THV X) (THV EV)
								     (THNV Y)))
						    (THGOAL ((THV X) (THV EV)
								     (THNV Y)
								     (THNV Z)))
						    (THGOAL ((THV X)
							     (THV EV)
							     (THNV Y)
							     (THNV Z)
							     (THNV W)))))
				       (APPEND (LIST (LIST (QUOTE X)
							   (GET LASTANSEV
								(QUOTE TYPE)))
						     (LIST (QUOTE EV)
							   LASTANSEV))
					       (QUOTE ((Y NIL) (Z NIL)
							       (W NIL)))))
				(ERT SMTHAT)))
		       (QUOTE (*TIME)))
	       (QUOTE REFER))))

(DEFUN SMTIME (HERE) (SETQ SM (MAPCAR (QUOTE (LAMBDA (X)
						     ((OR (GET (CAADDR X)
							       (QUOTE TIMEVAL))
							  (ERT SMTIME))
						      HERE
						      X)))
				      SM)))

(DEFUN SMTIMW NIL (PROG (XX) (RETURN (EVAL (SM H)))))
(DEFUN SMVG
       (A)
       (PROG (X Y XXP IMPERF)
	     (SETQ X (OR (ASSQ (QUOTE TIME) (FE (* C U (CLAUSE))))
			 (ERT SMVG TIME)))
	     (SETQ Y (COND ((EQ A (QUOTE AUX))
			    (OR (MEET (FE H) (QUOTE (FUT PAST MODAL PRES)))
				(QUOTE (PRES))))
			   ((FINDNATOM FE))))
	     (SETQ IMPERF
		   (AND MVB
			(OR (ISQ MVB IMPERF)
			    (CDR (OR (MEMQ (QUOTE PRES) Y) (QUOTE (NIL)))))))
	     (COND ((MEET Y (QUOTE (FUT MODAL)))
		    (COND ((AND (ISQ (* C U (CLAUSE)) MAJOR)
				(EQ A (QUOTE AUX))
				(EQ (CADR X) (QUOTE :NOW))
				(CQ IMPERSM)
				(SETQ MODAL T)))
			  ((SETQ NOFLAG (QUOTE FUT))
			   (SETQ MODAL (MEMQ (QUOTE MODAL) Y))
			   (RETURN T))))
		   ((MEET Y (QUOTE (PAST TO ING)))
		    (COND ((EQ (CADR X )(QUOTE :NOW))
			   (RPLACA (CDR X) (SMVG2 X Y)))
			  ((MEMQ (CADR X) (QUOTE (FUT MODAL))) (ERT SMVG FUT))
			  ((EQ (CADR X) (QUOTE SEC))
			   (OR (* C U (AND (SETQ XXP
						 (ASSQ (QUOTE TIME) (FE PT)))
					   (NOT (EQ (CADR XXP) (QUOTE SEC)))))
			       (ERT SMVG UP))
			   (RPLACA (CDR X) (COND ((EQ (CADR XXP) (QUOTE :NOW))
						  (SMVG2 XXP Y))
						 ((CADR XXP)))))
			  (T)))
		   ((EQ (CADR X) (QUOTE :NOW)))
		   ((EQ (CADR X) (QUOTE SEC)) (RPLACA (CDR X) (QUOTE :NOW)))
		   ((ERT SMVG WHO?)))
	     (RETURN T)))

(DEFUN SMVG2 (X Y) (APPEND (LIST (QUOTE #TIME) Y IMPERF)
			   (COND ((EQ (CADR X )(QUOTE :NOW)) (LIST NIL NIL))
				 ((CDDDR (CADR X))))))
