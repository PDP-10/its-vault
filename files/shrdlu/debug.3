(DEFUN BARF ()
(LABELTRACE CLAUSE NG PREPG ADJG VG CONJOIN)
(SETQ LABELTRACE T NOSTOP T BUILD-SEE T PARSENODE-SEE T PLANNERSEE 'NOSTOP)
(OR(GET 'TRACE 'FEXPR)(LOADFL TRACE > DSK COMLAP))
(TRACE PARSE CALLSM )
(THTRACE THEOREM THGOAL)
(UWRITE DSK SHRDLU)
(IOC R))

(DEFUN UNBARF()
(SETQ LABELTRACE NIL PARSENODE-SEE NIL BUILD-SEE NIL PLANNERSEE NIL)
(UNTRACE PARSE CALLSM)
(THUNTRACE)
(UFILE BARF >))




(DEFUN BLINK(X)
(PRINT 'BLINK)(PRINC X))

(DEFUN MOVETO (X Y Z)
(PRINT 'MOVETO)(PRINC (LIST X Y Z)))


(DEFUN GRASP (X)(PRINT 'GRASP)(PRINC X))


(DEFUN UNGRASP()(PRINT 'UNGRASP))

(DEFUN GB FEXPR(A)
(MAPC '(LAMBDA(X)
(APPLY 'GRINDEF (COND((GET X 'BREXPR)(LIST '(BREXPR) X))((GET X 'THEOREM)(LIST '(THEOREM) X))((GET X 'INTERPRET)(LIST '(INTERPRET) X))((LIST X)))))A))

(DEFUN LB FEXPR(A)(SETQ LABELBREAK(APPEND A LABELBREAK)))


(DEFUN FORGET()())


(DEFUN PDA NIL 
 (PROG (X) 
  (SETQ X (CAR (SM ANSWER)))
  (DISP
   (SETQ
    FOO
    (PLNR-DESCRIBE (CONS X
			 (RELATIONS? (COND ((REL? X))
					   (T (TERPRI)
					      (SPRINT (RELATIONS? X)
						      LINEL
						      0)
					      (PRINT 'REL?)
					      (PUTPROP X
						       (READ)
						       'REL=)))))
		   (VARIABLE? (REL? X))
		   (LIST (VARIABLE? (REL? X))))))
T (RETURN T)))

(DEFUN DC NIL (DP (CAR C)))


(DEFUN DSA NIL (DP (CAR (SM ANSWER))))

(DEFUN T FEXPR (A) (ERT T???))

(DEFUN RPT '(/,NUM /,ITEM)
(COND((NOT(NUMBERP /,NUM))(ERT RPT))
((MINUSP /,NUM)(ERT RPT))
((ZEROP /,NUM)NIL)
((CONS (EVAL /,ITEM )(RPT (SUB1 /,NUM) /,ITEM)))))

(DEFUN P FEXPR (A)
(RETURN(SETQ RESULT(PRINT (RPT (COND((CDR A)(CADR A))(1))'(MAKESYM (CAR A)))))))



 

(DEFPROP W WBREAK FEXPR)



(DEFUN DA (X)
(AND (GET X 'THASSERTION)(DISP (APPLY 'APPEND(MAPCAR 'CDDR (APPLY 'APPEND(MAPCAR 'CDR (CDR(GET X 'THASSERTION)))))))))


(DEFUN TELLABLE FEXPR(X)
(PUTPROP(CAR X) T 'TELLABLE)
(PUTPROP (CAR X) '((2 '((THTBF THTRUE)))(3'((THTBF THTRUE)))(3 '((THTBF THTRUE)))) 'THMLIST)
(CAR X))


(DEFUN DG
       FEXPR
       (A)
       (COND ((NULL A) (DG GRAM))
	     ((CDR A)
	      (SETQ GRAMUNIT
		    (SETQ GRAM (GET (CAR A) (QUOTE INTERPRET))))
	      (DGP (SETQ GRAM (MEMQ (CADR A) GRAM))))
	     ((NUMBERP (CAR A))
	      (DO I
		  0
		  (ADD1 I)
		  (EQUAL I (CAR A))
		  (AND GRAM (SETQ GRAM (CDR GRAM))))
	      (DGP GRAM))
	     ((SETQ GRAM (GET (CAR A) (QUOTE INTERPRET)))
	      (DGP (SETQ GRAMUNIT GRAM)))
	     ((SETQ GRAM (MEMQ (CAR A) GRAMUNIT)) (DGP GRAM))
	     (T (QUOTE TAG-NOT-FOUND))))

(DEFUN DGP
       (X)
       (TYO 14)
       (MAPC (QUOTE (LAMBDA (X Y) (OR (EQ (CAR X) (QUOTE PASSING))
				      (TERPRI)
				      (SPRINT X LINEL 0))))
	     X
	     (QUOTE (A A A A A A A A A A)))
       (TERPRI)
       T)
;;;############################################################
;;;
;;;                         BREAK
;;;                    (TRACE UTILITIES)
;;;
;;;#############################################################





(DEFUN WBREAK FEXPR (A) (MAPC (QUOTE BREAK1) A) T)
(DEFUN BREAK1
 (A)
 (PROG (X Y Z W)
       (COND ((ATOM A)) ((SETQ Y (CADR A)) (SETQ A (CAR A))))
       (PRINT A)
       (OR (SETQ X (GETL A (QUOTE (EXPR FEXPR SUBR FSUBR LSUBR))))
	   (RETURN (PRINC (QUOTE UNDEFINED))))
       (AND (MEMQ (CAR X) (QUOTE (EXPR FEXPR)))
	    (EQ (CAADDR (CADR X)) (QUOTE BREAK2))
	    (RETURN (PRINC (QUOTE ALREADY/ BROKEN))))
       (PUTPROP A
		(LIST (QUOTE LAMBDA)
		      (COND ((SETQ W (MEMQ (CAR X)
					   (QUOTE (FEXPR FSUBR))))
			     (QUOTE (/0A)))
			    ((QUOTE /0A)))
		      (LIST (QUOTE BREAK2)
			    (QUOTIFY A)
			    (QUOTE /0A)
			    (QUOTIFY (CAR X))
			    (QUOTIFY (AND (MEMQ (CAR X)
						(QUOTE (EXPR FEXPR)))
					  (CADADR X)))
			    (QUOTIFY (SETQ Z (GENSYM)))
			    (QUOTIFY (OR Y T))))
		(QUOTE BREXPR))
       (RPLACA (GETL A (QUOTE (BREXPR)))
	       (COND (W (QUOTE FEXPR)) ((QUOTE EXPR))))
       (PUTPROP Z (CADR X) (CAR X))
       (RPLACA X (QUOTE BREXPR))
       (RETURN (SETQ BREAKLIST (CONS A BREAKLIST)))))

(DEFUN UNBREAK
 FEXPR
 (A)
 (MAPC
  (QUOTE (LAMBDA (X)
		 (PROG (Y Z)
		       (AND (SETQ Y (GETL X (QUOTE (EXPR FEXPR))))
			    (EQ (CAADDR (CADR Y)) (QUOTE BREAK2))
			    (SETQ Z (GETL X (QUOTE (BREXPR))))
			    (REMPROP X (CAR Y))
			    (RPLACA Z
				    (CADR (CADDDR (CADDR (CADR Y)))))
			    (PRINT X)
			    (SETQ BREAKLIST (DELQ X BREAKLIST))))))
  (OR A BREAKLIST))
 T)

(SETQ BREAKLIST NIL)

(DEFUN LABELTRACE
 FEXPR
 (A)
 (MAPC
  '(LAMBDA (X)
	   (PROG (BODY)
		 (PRINT X)
		 (COND ((GET X 'LABELTRACED) (PRINC 'ALLREADY-)
					     (GO TRACED))
		       ((GET X 'INTERPRET)
			(SETQ BODY (CDR (GET X 'INTERPRET))))
		       ((GET X 'EXPR)
			(SETQ BODY (CDDR (CADDR (GET X 'EXPR)))))
		       (T (PRINC 'CAN/'T/ BE-) (GO TRACED)))
		 (MAP '(LAMBDA (Y)
			(AND (ATOM (CAR Y))
			     (RPLACD Y (CONS (LIST 'PASSING
						   (LIST 'QUOTE
							 (CAR Y)))
					     (CDR Y)))))
		      BODY)
		 (PUTPROP X T 'LABELTRACED)
	    TRACED
		 (PRINC 'LABELTRACED)))
  A))

(DEFUN PASSING
       (A)
       (SETQ LASTLABEL A)
	(AND (COND ((ATOM LABELTRACE)
		   (AND LABELTRACE (PRINT 'PASSING) (PRINC A)))
		  ((MEMQ A LABELTRACE) (PRINT 'PASSING) (PRINC A)))
	    (COND ((ATOM LABELBREAK)
		   (AND LABELBREAK (ERT LABELBREAK)))
		  ((MEMQ A LABELBREAK) (ERT LABELBREAK)))))

(SETQ LABELTRACE NIL)

(SETQ LABELBREAK NIL)
(DEFUN UNLABELTRACE
       FEXPR
       (A)
       (MAPC '(LAMBDA (X)
		      (PROG (BODY)
			    (PRINT X)
			    (COND ((NOT (GET X 'LABELTRACED))
				   (PRINC 'ISN/'T/ ALLREADY-)
				   (GO TRACED))
				  ((GET X 'INTERPRET)
				   (SETQ BODY
					 (CDR (GET X 'INTERPRET))))
				  ((GET X 'EXPR)
				   (SETQ BODY
					 (CDDR (CADDR (GET X
							   'EXPR)))))
				  (T (PRINC 'CAN/'T/ BE-)
				     (GO TRACED)))
			    (MAP '(LAMBDA (Y)
					  (AND (ATOM (CAR Y))
					       (RPLACD Y (CDDR Y))))
				 BODY)
			    (PUTPROP X NIL 'LABELTRACED)
			    (PRINC 'UN)
		       TRACED
			    (PRINC 'LABELTRACED)))
	     A))
(DEFUN BREAK2
       (/0NAME /0ARG /0TYPE /0VARS /0FN /0COND)
       (PROG (VALUE /0XX)
	     (SETQ /0ARG
		   (COND ((MEMQ /0TYPE (QUOTE (FEXPR FSUBR))) (LIST /0ARG))
			 ((MAPCAR (QUOTE ARG)
				  (REVERSE (MEMQ /0ARG
						 (QUOTE (7 6 5 4 3 2 1))))))))
	     (SETQ /0VARS (COND (/0VARS)
				((EQ /0TYPE (QUOTE FSUBR)) (QUOTE (ARG)))
				((MAPCAR (QUOTE PROG2)
					 /0ARG
					 (QUOTE (ARG1 ARG2
						      ARG3
						      ARG4
						      ARG5
						      ARG6
						      ARG7))))))
	     (EVAL (LIST (QUOTE PROG) /0VARS (QUOTE (BREAK3))))
	     (RETURN VALUE)))

(DEFUN BREAK3
       NIL
       (MAPC (QUOTE (LAMBDA(/0X /0Y)(SET /0X /0Y))) /0VARS /0ARG)
       (AND (SETQ /0XX (EVAL /0COND))
	    (ERTEX (LIST (QUOTE ENTERING) /0NAME /0TYPE /0VARS)NIL))
       (SETQ * (SETQ  VALUE
	     (APPLY /0FN (COND ((MEMQ /0TYPE (QUOTE (FEXPR FSUBR))) (CAR /0ARG))
			       (/0ARG)))))
       (AND /0XX  (ERTEX (LIST (QUOTE EXITING) /0NAME)NIL)))





(DEFUN ED FEXPR (L) 
 (PROG (OLD PP) 
       (MAPC '(LAMBDA (P) 
		      (AND (GET (CAR L) P)
			   (SETQ PP P)
			   (PUTPROP (CAR L)
				    (SUBST (CADDR L)
					   (CADR L)
					   (SETQ OLD
						 (GET (CAR L) P)))
				    P)))
	     '(FEXPR EXPR MACRO))
       (RETURN (NOT (EQUAL OLD (GET (CAR L) PP))))))
