
;;;############################################################
;;;
;;;                         BREAK
;;;                    (TRACE UTILITIES)
;;;
;;;#############################################################



;;;******************  WARNING ****************


(PROG(^Q ^W)(PRINC'/
/ / / / / / / / / / / *************WARNING************/
THIS/ VERSION/ OF/ BREAK/ USES/ "*VALUE"/ EVERYWHERE/ IT/ USED/

TO/ USE/ "VALUE"/ --/ IT/ IS/ WHAT/ YOU/ LOOK/ AT/ OR/ SET/ ON/ EXITING/ THE/

FUNCTION/ --/ I/ DISCOVERED/ THAT/ HAVING/ A/ VARIABLE/ NAMED/ "VALUE"/

INTERFERED/ WITH/ SOME/ OF/ MY/ BUGS/
/
/ --/ TYPE/ ANY/ CHARACTER/ TO/ CONTINUE/ -- )(READCH))



(OR (GETL 'ERT ' (FEXPR FSUBR))


(DEFUN ERT FEXPR(/,X)
(PROG(NOSTOP)(RETURN(ERTEX /,X NIL)))))

(DEFUN ERTEX (/,ERTA /,ERR?) 
 (PROG (/,LISTEN /,L2 * ^W ^Q) 
  (AND NOSTOP (RETURN T))
  (PRINT '>>>)
  (MAPC (FUNCTION PRINT2) /,ERTA)
  (PRINT 'LISTENING)
LISTEN
  (COND ((NOT (ERRSET (SETQ /,LISTEN (READ)))))
	((MEMQ /,LISTEN '(T P NIL)) (AND /,ERR? (ERR NIL))
				     (RETURN /,LISTEN))
	((EQ (CAR /,LISTEN) 'RETURN)
	 (RETURN (EVAL (CADR /,LISTEN))))
	((MEMQ (CAR /,LISTEN) '(C CHANGE))
	 (COND ((NULL (CDR /,LISTEN)) (SETQ * (PRINT /,L2))
				      (GO LISTEN))
	       ((NULL (CDDR /,LISTEN))
		(ERRSET (SETQ /,L2
			      (SETQ *
				    (PRINT (EVAL (CADR /,LISTEN))))))
		(GO LISTEN))
	       ((SETQ * (PRINT (SETQ /,LISTEN (SUBST (CADDR /,LISTEN)
						     (CADR /,LISTEN)
						     /,L2)))))))
	((EQ /,LISTEN 'PUSH)
	 (SETQ /,ERTPDL (CONS /,L2 /,ERTPDL))
	 (GO LISTEN))
	((EQ /,LISTEN 'POP)
	 (COND ((ATOM /,ERTPDL) (PRINT '*****OVERPOP****)
				(GO LISTEN))
	       ((SETQ /,L2 (SETQ * (PRINT (CAR /,ERTPDL))))
		(SETQ /,ERTPDL (CDR /,ERTPDL))
		(GO LISTEN))))
	((EQ /,LISTEN 'RUN)
	 (SETQ /,LISTEN /,L2)))
  (ERRSET (SETQ * (PRINT (EVAL /,LISTEN))))
  (SETQ /,L2 /,LISTEN)
  (GO LISTEN)))


(DEFUN PRINT2(X)(PRINC '/ )(PRINC X))


(DEFUN WBREAK FEXPR (A) (MAPC (QUOTE BREAK1) A) T)
(DEFUN BREAK1
 (A)
 (PROG (X Y Z W)
       (COND ((ATOM A)) ((SETQ Y (CADR A)) (SETQ A (CAR A))))
       (PRINT A)
       (OR (SETQ X (GETL A (QUOTE (EXPR FEXPR SUBR FSUBR LSUBR))))
	   (RETURN (PRINC (QUOTE UNDEFINED))))
       (AND (MEMQ (CAR X) (QUOTE (EXPR FEXPR)))
	    (EQ (CAADDR (CADR X)) (QUOTE BREAK2))
	    (RETURN (PRINC (QUOTE ALREADY/ BROKEN))))
       (PUTPROP A
		(LIST (QUOTE LAMBDA)
		      (COND ((SETQ W (MEMQ (CAR X)
					   (QUOTE (FEXPR FSUBR))))
			     (QUOTE (/0A)))
			    ((QUOTE /0A)))
		      (LIST (QUOTE BREAK2)
			    (QUOTIFY A)
			    (QUOTE /0A)
			    (QUOTIFY (CAR X))
			    (QUOTIFY (AND (MEMQ (CAR X)
						(QUOTE (EXPR FEXPR)))
					  (CADADR X)))
			    (QUOTIFY (SETQ Z (GENSYM)))
			    (QUOTIFY (OR Y T))))
		(QUOTE BREXPR))
       (RPLACA (GETL A (QUOTE (BREXPR)))
	       (COND (W (QUOTE FEXPR)) ((QUOTE EXPR))))
       (PUTPROP Z (CADR X) (CAR X))
       (RPLACA X (QUOTE BREXPR))
       (RETURN (SETQ BREAKLIST (CONS A BREAKLIST)))))

(DEFUN QUOTIFY (X) (COND ((MEMQ X (QUOTE (T NIL))) X)
			 ((LIST (QUOTE QUOTE) X))))
(DEFUN UNBREAK
 FEXPR
 (A)
 (MAPC
  (QUOTE (LAMBDA (X)
		 (PROG (Y Z)
		       (AND (SETQ Y (GETL X (QUOTE (EXPR FEXPR))))
			    (EQ (CAADDR (CADR Y)) (QUOTE BREAK2))
			    (SETQ Z (GETL X (QUOTE (BREXPR))))
			    (REMPROP X (CAR Y))
			    (RPLACA Z
				    (CADR (CADDDR (CADDR (CADR Y)))))
			    (PRINT X)
			    (SETQ BREAKLIST (DELQ X BREAKLIST))))))
  (OR A BREAKLIST))
 T)

(SETQ BREAKLIST NIL)

(DEFUN LABELTRACE
 FEXPR
 (A)
 (MAPC
  '(LAMBDA (X)
	   (PROG (BODY)
		 (PRINT X)
		 (COND ((GET X 'LABELTRACED) (PRINC 'ALLREADY-)
					     (GO TRACED))
		       ((GET X 'INTERPRET)
			(SETQ BODY (CDR (GET X 'INTERPRET))))
		       ((GET X 'EXPR)
			(SETQ BODY (CDDR (CADDR (GET X 'EXPR)))))
		       (T (PRINC 'CAN/'T/ BE-) (GO TRACED)))
		 (MAP '(LAMBDA (Y)
			(AND (ATOM (CAR Y))
			     (RPLACD Y (CONS (LIST 'PASSING
						   (LIST 'QUOTE
							 (CAR Y)))
					     (CDR Y)))))
		      BODY)
		 (PUTPROP X T 'LABELTRACED)
	    TRACED
		 (PRINC 'LABELTRACED)))
  A))

(DEFUN PASSING
       (A)
       (SETQ LASTLABEL A)
	(AND (COND ((ATOM LABELTRACE)
		   (AND LABELTRACE (PRINT 'PASSING) (PRINC A)))
		  ((MEMQ A LABELTRACE) (PRINT 'PASSING) (PRINC A)))
	    (COND ((ATOM LABELBREAK)
		   (AND LABELBREAK (ERT LABELBREAK)))
		  ((MEMQ A LABELBREAK) (ERT LABELBREAK)))))

(SETQ LABELTRACE NIL)

(SETQ LABELBREAK NIL)
(DEFUN UNLABELTRACE
       FEXPR
       (A)
       (MAPC '(LAMBDA (X)
		      (PROG (BODY)
			    (PRINT X)
			    (COND ((NOT (GET X 'LABELTRACED))
				   (PRINC 'ISN/'T/ ALLREADY-)
				   (GO TRACED))
				  ((GET X 'INTERPRET)
				   (SETQ BODY
					 (CDR (GET X 'INTERPRET))))
				  ((GET X 'EXPR)
				   (SETQ BODY
					 (CDDR (CADDR (GET X
							   'EXPR)))))
				  (T (PRINC 'CAN/'T/ BE-)
				     (GO TRACED)))
			    (MAP '(LAMBDA (Y)
					  (AND (ATOM (CAR Y))
					       (RPLACD Y (CDDR Y))))
				 BODY)
			    (PUTPROP X NIL 'LABELTRACED)
			    (PRINC 'UN)
		       TRACED
			    (PRINC 'LABELTRACED)))
	     A))
(DEFUN BREAK2
       (/0NAME /0ARG /0TYPE /0VARS /0FN /0COND)
       (PROG (*VALUE /0XX)
	     (SETQ /0ARG
		   (COND ((MEMQ /0TYPE (QUOTE (FEXPR FSUBR))) (LIST /0ARG))
			 ((MAPCAR (QUOTE ARG)
				  (REVERSE (MEMQ /0ARG
						 (QUOTE (7 6 5 4 3 2 1))))))))
	     (SETQ /0VARS (COND (/0VARS)
				((EQ /0TYPE (QUOTE FSUBR)) (QUOTE (ARG)))
				((MAPCAR (QUOTE PROG2)
					 /0ARG
					 (QUOTE (ARG1 ARG2
						      ARG3
						      ARG4
						      ARG5
						      ARG6
						      ARG7))))))
	     (EVAL (LIST (QUOTE PROG) /0VARS (QUOTE (BREAK3))))
	     (RETURN *VALUE)))

(DEFUN BREAK3
       NIL
       (MAPC (QUOTE (LAMBDA(/0X /0Y)(SET /0X /0Y))) /0VARS /0ARG)
       (AND (SETQ /0XX (EVAL /0COND))
	    (ERTEX (LIST (QUOTE ENTERING) /0NAME /0TYPE /0VARS)NIL))
       (SETQ *VALUE
	     (APPLY /0FN (COND ((MEMQ /0TYPE (QUOTE (FEXPR FSUBR))) (CAR /0ARG))
			       (/0ARG))))
       (AND /0XX  (ERTEX (LIST (QUOTE EXITING) /0NAME)NIL)))





(DEFUN ED FEXPR (L) 
 (PROG (OLD PP) 
       (MAPC '(LAMBDA (P) 
		      (AND (GET (CAR L) P)
			   (SETQ PP P)
			   (PUTPROP (CAR L)
				    (SUBST (CADDR L)
					   (CADR L)
					   (SETQ OLD
						 (GET (CAR L) P)))
				    P)))
	     '(FEXPR EXPR MACRO))
       (RETURN (NOT (EQUAL OLD (GET (CAR L) PP))))))
