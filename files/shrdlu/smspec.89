


;;;############################################################
;;;
;;;                         SMSPEC
;;;                    (SEMANTIC SPECIALISTS)
;;;
;;;############################################################

(DEFUN SMTIME NIL (ERT SMTIME NOT WRITTEN YET))

(DEFUN SMTIME2 NIL (ERT SMTIME2 NOT WRITTEN YET))

(DEFUN SMNEWNOUN()
(OBJECT(MARKERS: (#NEWNOUN) PROCEDURE: ((#NEWWORD)))))

(DEFUN SMNEWPROPN()
(SMSET (LIST(NEWCOPY 'NAME-OSS))))

(DEFUN SMCONJ NIL 

		  ;;FOR ALL CONJOINED THINGS -- IT CURRENTLY ONLY
		  ;;HANDLES THINGS WHICH HAVE AN OSS OR RSS STRUCTURE
		  ;;AS THEIR SEMANTICS. THIS DOES NOT INCLUDE SINGLE
		  ;;WORDS OF MOST TYPES. IT USES RECURSION
		  (PROG (%SM) (SMCONJ2 NIL H) (RETURN (SMSET %SM))))

(DEFUN SMCONJ2 (INTERPLIST RESTLIST) 

       ;;INTERPLIST IS THE LIST OF INTERPRETATIONS FOR THE CONJUNCTS
       ;;HANDLED SO FAR -- THIS FUNCTION WILL BE CALLED ONCE FOR EACH
       ;;POSSIBLE COMBINATION. THE MARKERS FOR THE CONJOINED
       ;;STRUCTURE ARE THOSE OF THE FIRST CONJUNCT -- NEEDS MORE
       ;;SOPHISTICATION. RESTLIST IS THE REST OF NODES YET TO BE
       ;;HANDLED.
       (PROG (%X) 
	     (OR RESTLIST
		 (RETURN (SETQ %SM
			       (CONS (BUILD 
					 RSSNODE= (AND (RSS? INTERP)
						       (MAKESYM 'RSS))
 					 OSSNODE= (AND (OSS? INTERP)
						       (MAKESYM 'OSS))
 					 MARKERS= (MARKERS? INTERP) 
					 SYSTEMS= (SYSTEMS? INTERP) 
					 REL= (REL? INTERP)
					 AND= (AND (OR(CQ BUT)(CQ AND))
						   INTERPLIST) 
					 OR= (AND (OR(CQ OR)(CQ NOR)) INTERPLIST))
				     %SM))))			       ;WHEN THERE IS NO RESTLIST, WE HAVE LOOPED TO
	     (MAPCAR '(LAMBDA (INTERP) 				       ;THE END OF THE LIST OF CONJUNCTS, AND THE
			      (SMCONJ2 (CONS INTERP INTERPLIST)	       ;RESULTING INTERPRETATION IS OK.
				       (CDR RESTLIST)))
		     (SM  RESTLIST))))			       ;THE MAPPING IS DOWN THE LIST OF INTERPRETATIONS
								       ;FOR A SINGLE CONJUNCT WHILE THE RECURSION GETS
								       ;US DOWN THE LIST OF CONJUNCTS.  THUS WE GET
								       ;EVERY POSSIBLE COMBINATION OF THE
								       ;INTERPRETATIONS. -- ISN'T LISP
								       ;SUPER-DUPER-WONDERFUL! NOTICE THAT INTERP IS
								       ;GETTING PICKED UP AS A FREE VARIABLE BY
								       ;SMCONJ2, EVEN THOUGH IT IS BOUND ONLY INSIDE A
								       ;MAPCAR INSIDE SMCONJ2. THIS WORKS BECAUSE THE
								       ;CLAUSE CONTAINING IT CAN NEVER GET CALLED
								       ;EXCEPT BY RECURSION,

(DEFUN SMVG NIL 

		;;CALLED INSIDE ANY VG
		(PROG (TSS TENSE) 
		      (SETQ TSS (GETR 'TIME (MOVE-PT C U (CLAUSE))))
		      (AND (CQ NEG) (ADD-F-PT 'NEG PT))		       ;NEG IS TRANSFERRED FROM THE VG TO THE CLAUSE IN
		      (SETQ TENSE (GETR 'TENSE C))		       ;WHICH IT IS EMBEDDED.
		      (COND ((MEMBER TENSE
				     '((PRESENT) (IMPER) (INFINITIVE)))
			     T)
			    ((EQUAL TENSE '(MODAL))
(SETQ GLOBAL-MESSAGE '(THAT DOESN/'T MAKE ANY SENSE TO ME/.))			     (ADD-F-PT 'MODAL PT))		       ;CLAUSES ARE ALSO MARKED AS MODAL.
((AND (EQUAL TENSE '(FUTURE))(ISQ PT QUEST)(EQUAL (REFER? (CAR (SM (GETR 'SUBJECT PT)))) '(:SHRDLU))) ; FUTURE QUESTIONS WITH "YOU" SUBJECT IS REALLY IMPERATIVE
 (SETQ TENSE '(PRESENT))
 (REMOVE-F-PT 'QUEST PT)	; THE CLAUSE IS NO LONGER QUESTION
 (ADD-F-PT 'IMPER PT))		; BUT RATHER, IMPERATIVE
			    ((SETDIF TENSE '(PAST PRESENT))
			     (GLOBAL-ERR '(I
					 DON/'T
					 KNOW
					 HOW
					 TO
					 HANDLE
					 TENSES
					 INVOLVING
					 FUTURE
					 EVENTS
					 OR
					 MODALS
					 OTHER
					 THAN
					 IN
					 THE
					 PRESENT))))
		      (PUTPROP TSS TENSE 'TENSE=)
		      (RETURN T)))

(DEFUN SMADJGQSHORT NIL (ERT SMADJQSHORT NOT WRITTEN YET))

(DEFUN SMPRON (NODE) (EVAL (SM NODE ))(COND ((NULL SM ) (SETQ GLOBAL-MESSAGE
(APPEND '(I DON/'T KNOW  WHAT ") (FROM (NB H)(N H))
'(" REFERS TO))))) SM )





(DEFUN SMVAUX NIL 
       (COND ((ISQ H NEG) (FQ NEG)) (T))
       (PUTPROP (GETR 'TIME C)
		(OR (MEET (FE H) '(PRESENT PAST MODAL))
		    (ERTERR SMVAUX /-- FUNNY TENSE))
		'TENSE=))

(DEFUN SMADV NIL (ERT SMADV NOT WRITTEN YET))

(DEFUN SMPLACE NIL (ERT SMPLACE NOT WRITTEN YET))

(DEFUN SMTOADJ NIL (ERT SMTOADJ (UNCT) NOT WRITTEN YET))
(DEFUN SMPROP ()
;;THIS IS THE SEMANTICS FOR PROPER NOUNS.  IT PRODUCES TWO INTERPRETATIONS.
;;ONE IS THE OPAQUE REFERENCE TO THE NAME ITSELF, AS IN
;;"CALL IT SAM".  THE OTHER IS THE TRANSPARENT REFERENT AS IN
;;"PICK UP SAM".
(SMSET (LIST (BUILD
 OSSNODE= (MAKESYM 'OSS)
 VARIABLE= 'NAME
 DETERMINER= (1 DEF NIL)
 PARSENODE= C
 MARKERS= (#NAME)
 REFER=  (LIST (WORD(NB H))))
(BUILD 
 OSSNODE= (MAKESYM 'OSS)
 DETERMINER= (1 DEF NIL)
 PARSENODE= C 
 VARIABLE= (MAKESYM 'X)
 RELATIONS= (LIST(LIST '#NAME OSSNODE= (WORD(NB H)))))))
(SMNG2))


(DEFUN SMADJ (WORD-BEING-INTERPRETED) 

		       ;; THIS FUNCTION TAKES AS INPUT THE PARSE NODE
		       ;;FOR AN ADJECTIVE - NOT COMPARATIVE OR
		       ;;SUPERLATIVE.  IT JUST EVAL'S THE DEFINITION. 
		       ;;THAT DEFINITION (WHICH SHOULD BE AN NMEANS)
		       ;;MAP'S DOWN THE LIST OF OSS'S IN THE FREE
		       ;;VARIABLE "SM".  IT CHECKS FOR MARKER
		       ;;COMPATIBILITY AND ATTACHES ITS "PLANNER" TO
		       ;;THAT OF THE OSS.  IT SHOULD MAKE UP NEW
		       ;;OSS'S IN CASE OF MULTIPLE INTERPRETATIONS OF
		       ;;THE PHRASE.  THE OSS'S IT CREATES ARE LEFT
		       ;;IN THE FREE VARIABLE "SM".  THIS FUNCTION
		       ;;CALLED BY: SMNG1 IT NEEDS TO BE HAIRED UP
		       ;;FOR CONJOINED ADJECTIVES LIKE "GREEN AND RED
		       ;;BALL".
		       (EVAL (SM WORD-BEING-INTERPRETED)))			       ; EVALUATE THE DEFINITION OF THE ADJECTIVE


;;---------------------------------------------
;;;--------------------------------------------

(DEFUN SMADJG-PREPG NIL 					       ;HANDLES ADJECTIVE GROUPS AND PREPGS BOTH AS
 (PROG (X SMSUB) 						       ;COMPLEMENTS AND QUALIFIERS
  (AND (OR (CQ AGENT) (CQ OF)) (RETURN T))			       ;DO NOTHING FOR "BY" PHRASES IN PASSIVE CLAUSES
  (SETR 'LOGICAL-SUBJECT					       ;OR "OF" PHRASES LIKE IN THREE OF THE BLOCKS.
	(COND ((CQ COMP) (GETR 'SUBJECT (MOVE-PT C U (CLAUSE))))	       ;SEMANTIC SUBJECT IS THE SUBJECT OF AN INTENSIVE
	      ((CQ LOBJ) (OR (GETR 'OBJ1 (MOVE-PT C U (CLAUSE)))
			     (GETR 'SUBJECT PT)))		       ;OR THE NG TO WHICH THE GROUP IS A QUALIFIER, OR
	      ((ISQ (MOVE-PT C U (NOT (ISQ PT COMPONENT)) U) NG) PT)	       ;THE CLAUSE OF WHICH IT IS AN ADJUNCT.
	      ((ISQ PT CLAUSE) PT)
	      ((ERTERR SMADJG-PREPG FUNNY POSITION)))
	C)
  (SETQ SMSUB (SM (GETR 'LOGICAL-SUBJECT C)))
  (AND (CQ ADJG)
       (GETR 'OBJ1 C)
       (SETR 'ADJGHEAD
	     (COMPARE-BUILD (GETR 'HEAD C)
			    (COND ((CQ AS) '#ASMUCH)
				  ((CQ THAN) '#MORE)
				  ((ERTERR SMADJG-PREPG FUNNY TYPE))))
	     C))
  (COND
   ((GETR 'OBJ1 C) (SMCL1) (RETURN SM))
   ((RETURN (SMSET (PROG (SM) 
			 (SMSET
			       (MAPCAR 
				'(LAMBDA (OSS) 
					 (BUILD 
					     OSSNODE= (MAKESYM 'OSS) 
					     MARKERS= (MARKERS? OSS) 
					     SYSTEMS= (SYSTEMS? OSS) 
					     VARIABLE= (VARIABLE?
							OSS) 
					     REFER= (REFER? OSS) 
					     REL= OSS 
					     REFER= (REFER? OSS) 
					     DETERMINER= '(NS-PL INDEF
								 NIL))
)				SMSUB))
			 (EVAL (COND ((OR (CQ COMPAR) (CQ SUP))
				      (FINDMEASURE (GETR 'HEAD
							 C)))
				     (T (SM (GETR 'HEAD C)))))
			 (RETURN SM))))))))



;;;--------------------------------------------

(DEFUN SMIT (PRONOUN) 						       ; PRONOUN IS (IT THEY ONE)
       (PROG (CANDIDATES AMBIGUITIES ) 					       ; A NODE LIST OF POSSIBLE REFERENTS
	     (OR DISCOURSE (ERT SMIT: DISCOURSE SWITCH NOT ON))
	     (AND MVB						       ;IS THIS A "DO IT!" COMMAND?
		  (ISQ MVB DO)
		  (CQ OBJ1)
		  (RETURN (SMSET LASTEVENT)))			       ;IF SO, RETURN THE LAST EVENT MENTIONED
	     (COND ((GET PRONOUN 'BIND)				       ;IF THIS PRONOUN HAS BEEN USED BEFORE IN THIS
		    (MAP (FUNCTION (LAMBDA (BINDNODE) 		       ;SENTENCE THEN USE THE SAME CANDIDATES
					   (SMIT2 BINDNODE 0.)))
			 (GET PRONOUN 'BIND))
		    (RETURN SM))
		   ((SMIT2 (GET PRONOUN 'LASTBIND) 0.)		       ; IF THIS PRONOUN WAS USED IN THE PREVIOUS
		    (GO DONE))					       ;SENTENCE
	     ((OR (MOVE-PT C U U (NG) U U (NG))			       ;LOOK FOR A STRUCTURE LIKE  " A BLOCK WHICH IS
		      (MOVE-PT C U U (NG) U (COMP) PV (SUBJ)))	       ;TALLER THAN ANYTHING WHICH SUPPORTS IT" OR "A 
			(SMIT2 PT 0)
			(MOVE-PT C U U (NG))
			(COND	((ISQ PT DEF)
				 (ADD-F-PT 'INDEF PT)
				 (REMOVE-F-PT 'DEF PT)
				 (MAPC '(LAMBDA(INTERP)(PUTPROP INTERP '((EXACTLY 1) INDEF NIL) 'DETERMINER=)) (SM PT))))
			  (RETURN SM))			       ;BLOCK TALLER THAN ANYTHING WHICH SUPPORTS IT"
	           ((OR (MOVE-PT C U (BOUND) U)
			(MOVE-PT C
			   U
			   (AND (ISQ PT CLAUSE) (ISQ PT COMPONENT))
			   U
			   DLC))
		    (SMIT2 (GETR 'OBJ2 PT) 0.)
		    (SMIT2 (GETR 'OBJ1 PT) 0.)
		    (SMIT2 (GETR 'SUBJECT PT) 0.)
		    (AND (NULL SM)
			 (ISQ PT RSQ)
			 (SMIT2 (GETR 'RELHEAD PT) 0.))
		    (AND SM (RETURN SM))))
	     (SMIT2 (GETR 'SUBJECT LASTSENT) 192.)
	     (SMIT2 (PARSENODE? LASTREL) 128.)				       ;TRY REL (I.E. QUESTION FOCUS ) OF THE LAST
								       ;SENTENCE.
	     (MOVE-PT LASTSENT DLC)					       ;GO THROUGH TOP LEVEL NG'S OF LAST SENTENCE
	UP   (COND ((NOT (MOVE-PT PV (NG))) (GO ON)) (ELSE (SMIT2 PT 64.)))
	     (AND (MOVE-PT PV) (GO UP))
	ON   

(OR SM						       ; IF WE HAVEN'T YET FOUND A REFERENT
		 (MAP 
		  (FUNCTION (LAMBDA (ANSNODE) (SMIT2 ANSNODE 0.)))   ;MAP DOWN THE ANSREF (NG'S IN LAST ANSWER)
		  ANSNAME))


(OR SM						       ; IF WE HAVEN'T YET FOUND A REFERENT
		 (MAP 
		  (FUNCTION (LAMBDA (BACKNODE) (SMIT2 BACKNODE 0.)))   ;MAP DOWN THE BACKREF2 (NG'S IN LAST SENTENCE)
		  BACKREF2))


					       ;LIST
	DONE (PUTPROP PRONOUN CANDIDATES 'BIND)
(OR (CDR SM) (REMPROP (CAR SM) 'AMBIGUITIES= ))	     (RETURN SM)))

(DEFUN SMIT2 (NODE PLAUSIBILITY) 
 (AND
  NODE	; MAKE SURE NODE IS REALLY THERE

    (GETR 'HEAD NODE)		; QUEST NODES (SUCH AS "WHAT") OR OTHER NODES WITHOUT HEAD NOUNS ARE NOT SUITABLE FOR REFERENTS
  (NOT (MEMQ(CAR NODE) CANDIDATES))					       ; MAKE SURE THAT NODE HASN'T ALREADY BEEN USED
								       ;AS REFERENT
  (COND ((EQ PRONOUN 'IT)
	 (AND (ISQ NODE NS) (NOT (ISQ NODE PRONG))))
	(ELSE (ISQ NODE NPL)))					       ; MAKE SURE NODE AND PRONOUN AGREE IN NUMBER
  (SETQ CANDIDATES (CONS(CAR NODE) CANDIDATES))
  (SMSET
   (NCONC
    (MAPCAR 
     (FUNCTION (LAMBDA (REFERENT-OSS) 
		       (BUILD 
			   OSSNODE= (MAKESYM 'OSS) 
			   MARKERS= (MARKERS? REFERENT-OSS) 
			   SYSTEMS= (SYSTEMS? REFERENT-OSS) 
			   PLAUSIBILITY= PLAUSIBILITY 
				AMBIGUITIES= (LIST(LIST OSSNODE= (FROM (NB NODE)(N NODE)) C))
			   REFER= (REFER? REFERENT-OSS) 
			   VARIABLE= (VARIABLE? REFERENT-OSS) 	       ; INPUT PARAMETER
			   PARSENODE= C 			       ; USE THE REFERENT'S REFERENT IF IT HAS ONE
			   DETERMINER= (LIST (COND ((ISQ C NPL) 'NPL)
						   ('NS))
					     'INDEF
					     NIL) 
			   RELATIONS= (LIST			       ; DONE SO THAT IF VARIBLE IS BOUND, PLANNER
				       (LIST			       ;GENERATOR WILL USE IT
					'#REFERS
					(VARIABLE? REFERENT-OSS))))))  ; RELATION SAYS THAT THIS OSS "REFERS" TO THE
     (SM NODE))							       ;OSS WHOSE VARIABLE NAME IS GIVEN END OF BUILD
    SM))))

(DEFUN SMNGOF NIL 

 ;; USED TO PROCESS NOUN GROUPS LIKE= "THREE OF THE BLOCKS" "BOTH OF
 ;;THEM"
 ;;;
 ;; SINCE THE OBJECT OF THE "OF" MUST BE DEFINITE(SYNTACTICALLY) AND
 ;;HAS ALREADY BEEN PROCESSED, THE PLANNER CODE BUILT IS JUST A
 ;;THAMONG EXPRESSION OF THE LIST OF POSSIBLE REFERENTS OF THE "OF"
 ;;OBJECT
 ;;;
 (SMSET
  (MAPBLAND
   (FUNCTION (LAMBDA (OFOSS) 
		     (BUILD 
			 OSSNODE= (MAKESYM 'OSS) 
			 VARIABLE= (VARIABLE? OFOSS) 
			 SYSTEMS= (SYSTEMS? OFOSS) 
			 MARKERS= (MARKERS? OFOSS) 
			 PARSENODE= C 
			 DETERMINER= (LIST (COND ((CQ NUM)
						  (SM (MOVE-PT H PV (NUM))))
						 ((ISQ NB BOTH) 2.)
						 ('NPL))
					   (COND ((MOVE-PT H PV (QNTFR))
						  (EVAL (SM PT)))
						 ('INDEF))
					   (COND ((CQ HOWMANY)
						  'HOWMANY)
						 ((CQ QDET)
						  'WHICH))) 
			 RELATIONS= (LIST
				     (LIST 'THAMONG
					   (LIST 'THV
						 (VARIABLE? OFOSS))
					   (LIST 'QUOTE
						 (REFER? OFOSS)))))))
   (SM (MOVE-PT H DLC)))))						       ;MAP DOWN THE LIST OF "OF" OBJECT
								       ;INTERPRETATIONS



;;;=============================================================

(DEFUN SMNG1 NIL 

       ;;; SMNG1 IS CALLED AS SOON AS TJHE HEAD OF A NOUN GROUP IUS
       ;;PARSED.  IT FIRST BUILDS A SKELETON OSS CONTAINING ONLY THE
       ;;DETERMINERS AND ORDINALS.  IT THEN EVAL'S THE DICTIONARY
       ;;DEFINITION OF THE HEAD NOUN WHICH SHOULD BUILD OSS'S FOR
       ;;EACH POSSIBLE INTERPRETATION OF THE NOUN.  IT THEN CYCLES
       ;;THROUGH ALL THE GOODIES IN FROUNT OF THE HEAD NOUN, EVALING
       ;;THEIR DEFINITIONS.  THE FREE VARIABLE "SM" IS USED TO KEEP
       ;;THE LIST OF OSS'S DURING THIS ENTIRE PROCESS.  ; NOTE THE
       ;;SPECIAL HANDLING OF TPRONS (ANYTHING SOMETHING ETC.) AND OF
       ;;SUPERLATIVE AND COMPARATIVE ADJECTIVES.  ;
       (PROG ( WORD-BEING-INTERPRETED  DETERS) 
	     (SETQ DETERS
		   (LIST (COND ((CQ NUMD)
				((LAMBDA (NUM) 
					 (EVAL (SM (MOVE-PT H PV (NUMD)))))
				 (SM (MOVE-PT H PV (NUM)))))
			       ((CQ NUM) (SM (MOVE-PT H PV (NUM))))
			       ((CQ NPL) (COND ((ISQ NB BOTH) 2.)
					       ((CQ NS) 'SG-PL)
					       ('NPL)))
			       ('NS))
			 (COND ((CQ QNTFR)
				(EVAL (SM (MOVE-PT H PV (QNTFR)))))
			       ((CQ TPRON)
				(EVAL (SM (MOVE-PT H PV (TPRON)))))
			       ((CQ DEF) 'DEF)
			       ((CQ DET) 'INDEF)
			       ('NDET))
			 (COND ((CQ HOWMANY) 'HOWMANY)
			       ((CQ QDET) 'WHICH))))

	     ;;;
	     (SMSET (LIST (BUILD 
			      OSSNODE= (MAKESYM 'OSS) 
			      PARSENODE= C 
			      VARIABLE= (MAKESYM 'X) 
			      MARKERS= (AND (CQ TPRON)
					    '(#VAGUE #PHYSOB #THING)) 
				RELATIONS= (AND (CQ TPRON) (LIST(LIST '#PHYSOB OSSNODE=)))
			      DETERMINER= DETERS)))		       ;BUILD AN INITIAL OSS
	     (SETQ  WORD-BEING-INTERPRETED  H)					       ;SETUP TO LOOP THROUGH ADJECTIVES
	     (COND ((ISQ H TPRON) (GO LOOP))			       ;IF ITS A TPRON, ITS WAS EVALED ABOVE SO SKIP
		   ((CQ INCOM) (SMONE) (GO LOOP)))		       ;INCOMPLETES SUCH AS "PICK UP TWO"
	     (SMSET (EVAL (SM  WORD-BEING-INTERPRETED )))			       ;EVAL THE HEAD NOUN
	LOOP (COND ((NULL SM) (RETURN NIL)))			       ;IF AN ADJECTIVE ELIMINATES ANY POSSIBLE
	     (COND ((NULL (SETQ  WORD-BEING-INTERPRETED  (CDR  WORD-BEING-INTERPRETED ))) (RETURN SM))   ;INTERPRETATION FOR THIS NG, FAIL IF WE'VE
		   ((OR (ISQ  WORD-BEING-INTERPRETED  COMPAR) (ISQ  WORD-BEING-INTERPRETED  SUP))	       ;LOOPED THRU ALL THE MODIFIERS,  THEN RETURN THE
								       ;LIST OF POSSIBLE INTERPRETATIONS.  IF ITS A
								       ;COMPARATIVE OR
		    (EVAL (FINDMEASURE  WORD-BEING-INTERPRETED ))		       ;SUPERLATIVE ADJECTIVE
		    (GO LOOP))
		   ((OR (ISQ  WORD-BEING-INTERPRETED  ADJ) (ISQ  WORD-BEING-INTERPRETED  CLASF))	       ; IF ITS AN ADJECTIVE OR CLASSIFIER
		    (SMADJ  WORD-BEING-INTERPRETED )				       ;THEN EVAL THE DICTIONARY DEFINITION OF IT
		    (GO LOOP))
		   ((ISQ  WORD-BEING-INTERPRETED  POSS) (SMPOSS) (GO LOOP)))
	     (GO LOOP)))



;;;=============================================================

(DEFUN SMNG2 NIL 

		 ;; CALLED FROM NG WHEN ALL QUALIFIERS HAVE BEEN
		 ;;FOUND.  BASICALLY, IT SAVE THE NG ON THE
		 ;;BACKREF(ERENCE) LIST, AND CALLS SMNG3 (ON EACH
		 ;;POSSIBLE NG INTERPRETATION) TO EVAL ANY DEFINITE
		 ;;NOUN GROUPS EG.  "THE RED BLOCK." AS USUAL, THE
		 ;;INITIAL OSS LIST IS IN "SM" AND THE FINAL OSS LIST
		 ;;IS PUT IN "SM" ;
		 (AND (NOT (CQ ANSNAME))		; DON'T USE FAKEY ANSWER NAME NODES FOR REFERENCE
		    (GETR 'HEAD C)	; QUEST NODES ARE NOT SUITABLE REFERENTS
		      DISCOURSE
		     (SETQ BACKREF (CONS (CAR C) BACKREF))) ;SAVE THIS NG AWAY FOR POSSIBLE LATER BACK
		 (SMSET(MAPBLAND (FUNCTION SMNG3) SM)))			       ;REFERENCE  GO THRU ALL THE POSSIBLE
								       ;INTERPRETATIONS OF THIS NOUN GROUP

(DEFUN SMNG3 (OSS) 

 ;; TAKES AN OSS AS ARGUMENT AND TRIES TO FIND ITS REFERENCE IF THE
 ;;NOUN GROUP IS DEFINITE.  EXCEXT FOR SPECIAL "ONLY DEFINITE"
 ;;DEFINITES SUCH AS "THE RIGHT" AND "THE THING"
 (PROG (FINDER MUNG INTER LIST CANDIDATES UNBOUND) 
       (COND
((NOT(EQ (QUANTIFIER? OSS) 'DEF))(RETURN OSS))
				       ;IF ITS NOT DEFINITE OR IT ALREADY HAS A REFERENT MARKED,
((REFER? OSS)(RETURN OSS))
((CQ ANSNAME) (RETURN OSS))	; IF ITS KLUDGY ANSWER NAME, JUST RETURN IT
)
					       ; JUST RETURN IT
       (SETQ FINDER
	     (PLNR-FINDIFY 'ALL
			   (VARIABLE? OSS)
			   (LIST (VARIABLE? OSS))
			   (PLNR-DESCRIBE (RELATIONS? OSS)
					  (VARIABLE? OSS)
					  (LIST (VARIABLE? OSS)))))    ; BUILDS UP THFIND EXPRESSION
       (PUTPROP OSS FINDER 'PLNRCODE=)
       (SETQ WHO NIL)
  UP   (COND ((NOT (SETQ CANDIDATES (THVAL2 WHO FINDER))) (GO TOOFEW))
	     ((NUMBERP (NUMBER? OSS))
	      (COND ((LESSP (LENGTH CANDIDATES) (NUMBER? OSS))
		     (GO TOOFEW))
		    ((GREATERP (LENGTH CANDIDATES) (NUMBER? OSS))
		     (GO TOOMANY))))
	     ((EQ (NUMBER? OSS) 'NS)
	      (COND ((NULL CANDIDATES) (GO TOOFEW))
		    ((CDR CANDIDATES) (GO TOOMANY))))
	     ((MEMQ (NUMBER? OSS) '(NPL SG-PL)))
	     ((ERT SMNG3= SCREWY NUMBER PROPERTY OF OSS)))

       ;;;
       (PUTPROP OSS CANDIDATES 'REFER=)
  DONE (RETURN OSS)

       ;;;
       
  TOOFEW							       ; WE DIDN'T FIND ANY (OR ENOUGH) REFERENTS FOR
								       ;THE NG
(COND       ((OR (NULL DISCOURSE) (NULL WHO))
(SETQ GLOBAL-MESSAGE (APPEND '(I DON/'T KNOW WHAT YOU MEAN BY ")
(FROM NB N)'("/.))) (RETURN NIL))				       ;IF WE AREN'T REMEMBERING SENTENCES, FORGET IT
       ( (MEMQ WHO '(HE NIL))				       ;IF WE JUST TRIED TO FIND EVERYTHING (OR
								       ;EVERYTHING THAT "HE" KNOWS ABOUT)
	    (SETQ
  GLOBAL-MESSAGE (APPEND  '(I DON/'T KNOW WHICH)
(CDR(FROM NB N)) '(YOU MEAN/.)))					       ;THEN FAIL
	    (RETURN NIL)))
       (SETQ MUNG T)						       ; ELSE SET UP TO EXPAND THE SENTENCES WE'RE
       
  TOOMANY							       ;LOOKING AT
       (AND (MEMQ WHO '(HE NIL)) (SETQ FINDER(PLNR-MUNG FINDER CANDIDATES)))	       ;RESTRICT THE POSSIBLE REFERENTS TO BE AMUNG THE
       (SETQ WHO						       ;LIST ALREADY FOUND
	     (COND ((EQ WHO NIL) 'HE)
		   ((EQ WHO 'HE)
		    (LIST (SUB1 LASTSENTNO) (ADD1 LASTSENTNO)))
		   ((OR (NOT MUNG) (EQ (CAR WHO) 1.))  (SETQ WHO 'HE)(GO TOOFEW))
		   ((CONS (SUB1 (CAR WHO)) (CDR WHO)))))
       (SETQ MUNG NIL)
       (GO UP)))

(DEFUN SMONE NIL 
       (PROG (CONTRAST X) 
	     (SETQ X H)						       ; SET  X TO DAUGHTERS OF CURRENT NODE
	GO   (COND ((SETQ CONTRAST
			  (GET (ROOT (NB X)) 'CONTRAST))
		    (SETQ CONTRAST (LIST CONTRAST (ROOT (NB X)))))
		   ((SETQ X (CDR X)) (GO GO)))
	UP   (OR (AND (MOVE-PT C U U (NG)) (SMONE2 (LIST(CAR PT))))
(SMONE2 (PARSENODE? LASTREL))
		 (SMONE2 BACKREF)
		 (SMONE2 ANSNAME)
		 (SMONE2 BACKREF2)
		 (COND (CONTRAST (SETQ CONTRAST NIL) (GO UP)))
		 (AND (MOVE-PT LASTSENT DLC PV (NG)) (SMONE2(LIST (CAR PT))))
		 (ERT SMONE= CAN/'T FIND REFERENT FOR "ONE"))
	     (RETURN SM)))

(DEFUN SMONE2 (X) 

       ;; SMONE2 TAKES IN A LIST OF NOUN GROUP NODES AND TRIES TO SEE
       ;;IF ANY OF THOSE NOUN GROUPS COULD BE THE REFERENT FOR "ONE".
       (PROG ( WORD-BEING-INTERPRETED ) 
	    UP	 (COND ((NULL X) (RETURN NIL))			       ;IF X IS EMPTY, FAIL
		       ((SETQ WORD-BEING-INTERPRETED  (SMONE3 X)))			       ;TRY TO SEE IF FIRST NG OF X SATIFIES CONTRAST
		       (ELSE (SETQ X (CDR X)) (GO UP)))		       ;AND/OR COULD BE REFERENT  ELSE TRY NEXT NG IN X

		 ;; AT THIS POINT WORD-BEING-INTERPRETED  IS (SHOULD BE) A LIST A WORD
		 ;;NODES OF THE NG WHICH IS THE REFERENT FOR "ONE" WE
		 ;;NOW PROCEED TO BUILD UP AN OSS FOR THE "ONE" NG
		 ;;THE LIST IS IN ORDER(NOUN ADJ ...  ADJ ETC NUM
		 ;;DET) ONLY THE NOUN AND THE ADJ'S ARE USED
		 (OR (ISQ WORD-BEING-INTERPRETED  NOUN)
		     (BUG SMONE2: REFERENT OF "ONE" IS SCREWED UP))
		 (EVAL (SM WORD-BEING-INTERPRETED ))					       ; EVAL THE NOUN DEFINITION
	    GO	 (AND (SETQ WORD-BEING-INTERPRETED  (CDR WORD-BEING-INTERPRETED ))
		      (ISQ WORD-BEING-INTERPRETED  ADJ)				       ; IF WE REACHED END OF ADJECTIVES, STOP
		      (EVAL (SM WORD-BEING-INTERPRETED ))
		      (GO GO))
		 (RETURN SM)))

(DEFUN SMONE3 (ONENG) 

       ;; SMONE3 TAKES AN NG WHICH IS A POSSIBLE REFERENT FOR "ONE". 
       ;;IT FIRST CUTS THE NG TO BE ONLY (NOUN ADJ ...  ADJ ETC) I.E. 
       ;;IT STRIPS OF QUALIFYING PHRASES.  IF THERE IS NO CONTRAST
       ;;THEN THIS MUNGED NG IS RETURNED AS THE REFERENT.  IF THERE
       ;;IS A CONTRAST, THEN IT CHECKS TO SEE IF THE NG SATISFIES
       ;;THAT CONTRAST.
       (PROG (NGWORDS X) 
	     (OR (ISQ ONENG NG)
		 (BUG SMONE3: ONE REFERENT IS NOT A NG))
	     (SETQ NGWORDS (H ONENG))
	LOOP (COND ((NULL NGWORDS) (RETURN NIL))		       ; FAIL IF NG HAS NO NOUN HEAD
		   ((ISQ NGWORDS NOUN))				       ; IF FIND NOUN HEAD OF NG, WIN
		   (ELSE (SETQ NGWORDS (CDR NGWORDS)) (GO LOOP)))
	     (OR CONTRAST (RETURN NGWORDS))			       ; IF THERE IS NO CONTRAST, REFERENT WINS BY
	     (SETQ X (REVERSE NGWORDS))				       ;DEFAULT
	LOOK (COND ((AND (EQ (CAR CONTRAST)
			     (GET (ROOT (NB X)) 'CONTRAST))
			 (NOT (EQ (CADR CONTRAST) (ROOT (NB X)))))
		    (RETURN (REVERSE (CDR X))))
		   ((SETQ X (CDR X)) (GO LOOK))
		   (ELSE (RETURN NIL)))))			       ; FAIL IF NO WORD SUPPLYS CONTRAST

(DEFUN SMPOSS NIL 
       (PROG (X) (RETURN (AND (SETQ X (SMPOSS2 C (MOVE-PT H PV (POSS))))
			      (SMRELATE X)))))

(DEFUN SMPOSS2 (HEADNODE MODNODE) 
       (PROG (X SM SMSUB SMOB1 SMOB2 SMOBL SMCOMP RELLIST) 
	     (SETQ SMSUB (SM MODNODE))
	     (SETQ RELLIST (SETQ SMOB1 (SM HEADNODE)))
	     (SMSET (#HAVE))
	     (RETURN (AND SM
			  (SETQ X (MAKESYM 'NODE))
			  (PUTPROP X SM 'SEMANTICS)
			  (LIST X)))))


;; SMPOSS WORKS BY ACTING LIKE SMCL1 AND SETTING UP AN RSS (HAVE X Y) .  NODE IS THE NODE OF THE POSSESSIVE WHICH HAS
;;ALREADY BEEN SEMANTICALLY PROCESSED. ITS SM CONTAINS THE OSS'S FOR WHOSE DOING THE POSSESSING. THE SM CURRENTLY
;;ACTIVE IS THE THING BEING POSSESSED.
;;;=============================================================

(DEFUN SMRELATE (NODE) 

 ;; RELATES A DESCRIPTIVE RSS TO ANOTHER RSS OR OSS ADDING IT TO THE
 ;;LIST OF RELATIONS.  IT TAKES THE LIST OF SS IN SM, AND REPLACES SM
 ;;WITH THE NEW LIST OF MODIFIED SS"S.  THE MODIFYING RSS"S HAVE TO
 ;;HAVE ONE OF THE SM SS"S AS A REL (WHICH SHOULD ALWAYS BE TRUE IF
 ;;THE WERE SET UP PROPERLY).
 ((LAMBDA (X) (AND X (SMSET X)))
  (MAPCAR 
   '(LAMBDA (RSS) 
	    (PROG (REL) 
		  (OR (MEMQ (SETQ REL (REL? RSS)) SM)
		      (ERTERR SMRELATE - TO WHOM?))
		  (RETURN (BUILD 
			      OSSNODE= (AND (OSS? REL)
					    (MAKESYM 'OSS)) 
			      RSSNODE= (AND (RSS? REL)
					    (MAKESYM 'RSS)) 
			      MARKERS= (OR
					(AND (RELMARKERS? RSS)
					     (CAR (RELMARKERS? RSS)))
					(MARKERS? REL)) 
			      SYSTEMS= (OR
					(AND (RELMARKERS? RSS)
					     (CADR (RELMARKERS? RSS)))
					(SYSTEMS? REL)) 
			      PLAUSIBILITY= (PLAUSIBILITY? RSS) 
			      PARSENODE= (PARSENODE? REL) 
			      AMBIGUITIES= (AMBIGUITIES? RSS) 
			      VARIABLE= (VARIABLE? REL) 
			      NEGATIVE= (NEGATIVE? REL) 
			      DETERMINER= (DETERMINER? REL) 
			      RELATIONS= (CONS RSS
					       (RELATIONS? REL)) 
			      REL= (REL? REL)))))
   (SM NODE))))

;;;------------------------------------------------------


(DEFUN SMCL1 NIL 
       (PROG (SMSUB SMOB1 SMOB2 SMOBL SMCOMP RELLIST) 

	     ;;;
	     ;;;        SET UP GLOBAL VARIABLES WHICH CONSIST OF POINTERS TO THE SEMANTIC DEFINITIONS
	     ;;;     OF THE VARIOUS NOUN-GROUPS (ALSO RSNG'S) REQUIRED BY THE TRANSITIVITY OF THE VERB
	     (SETQ SMSUB
		   (COND ((SETQ SMSUB
				(GETR 'LOGICAL-SUBJECT C))
			  (SM SMSUB))
			 ((CQ IMPER) '(SHRDLU-OSS))
			 ((NOT (CQ PASV))
			  (SM (OR (GETR 'SUBJECT C)
				  (ERTERR SMCL1 /-- NO SUBJECT))))
			 ((CQ AGENT) (ERTERR SMCL1 /-- AGENT MISSING))
			 ('(UNKNOWN-OSS-BY))))
	     (SETQ SMOB1
		   (SM (COND ((CQ PASV) (GETR 'SUBJECT C))
			     ((GETR 'OBJ1 C)))))
	     (SETQ SMOB2 (SM (GETR 'OBJ2 C)))
	     (SETQ SMOBL (SM (GETR 'LOBJ C)))
	     (SETQ SMCOMP (SM (GETR 'COMP C)))			       ;NATURALLY SEVERAL OF THESE GLOBAL VARIABLES
	     (OR SMSUB						       ;(BOUND IN THIS PROG AND ACCESSED IN DEEPER
		 (AND (MEET '(THERE ITRNS) FE)			       ;ONES) ARE NIL AT THIS POINT IN THE PROCEDURE.
		      (GO CHECK)))				       ;THE FOLLOWING CHECKS ARE PRIMARILY FOR
								       ;DEBUGGING PURPOSES (HENSE THE "ERT") TO INSURE
								       ;THAT THE NON-NIL REGISTERS AND THE TRANSITIVITY
	     (OR SMOB1
		 (AND (OR (CQ TRANS) (NOT (CQ CLAUSE))) (GO CHECK)))   ;OF THE VERB ARE BEING MATCHED IN EVERY CASE. 
	     (OR (AND SMOB1 SMOB2) (AND (CQ TRANS2) (GO CHECK)))
	     (OR (AND SMOB1 SMOBL) (AND (CQ TRANSL) (GO CHECK)))
	     (OR SMCOMP (AND (CQ INT) (GO CHECK)))
	     (GO REL)
	CHECK(ERT BUG: SMCL1 TRANSITIVITY)
	REL  (SETQ RELLIST
		   (SM (COND ((CQ RSQ) (GETR 'RELHEAD C))
			     ((OR (CQ PREPG) (CQ ADJG))
			      (GETR 'LOGICAL-SUBJECT C))
			     ((CQ QUEST) (GETR 'RELHEAD C)))))
	     (AND (NOT RELLIST)
		  (OR (CQ POLAR) (CQ DECLAR))
		  (SETQ X (RELFIND C))
		  (OR (EQUAL X SMSUB)
		      (EQUAL X SMOB1)				       ; FIND RELATIVE ELEMENT FOR POLAR CLAUSES WHICH
								       ;CONTAIN INDEFINITE. APPLIES TO TOPLEVEL CLAUSES
		      (EQUAL X SMOB2)				       ;SINCE ONLY THEY CAN HAVE FEATURES POLAR OR
		      (EQUAL X SMOBL)				       ;DECLAR.
		      (EQUAL X SMCOMP)
		      (ERTERR SMCL1 /-- POLAR REL DOESN/'T MATCH))
		  (SETQ RELLIST X))

	     ;;;
	     (SETQ TIME (GETR 'TIME (MOVE-PT C U (CLAUSE))))

	     ;;;
	     (SETQ SENSE-OF-VERB				       ;THIS REFERS TO THE SEMANTIC SENSE OF THE VERB
		   (COND ((CQ PREPG) (SM(SETQ  WORD-BEING-INTERPRETED  (GETR 'HEAD C))))
			 ((CQ ADJG) (SM(SETQ  WORD-BEING-INTERPRETED  (GETR 'ADJGHEAD C))))
			 ((CADR (ASSQ (CAR (MEET FE '(ITRNS TRANS      ;WHICH WILL PROPABLY  VARY WITH ITS
								       ;TRANSITIVITY. THE VALUE THAT IS FINALLY
								       ;DETERMINED REPRESENTS ALL POSSIBLE SENSES OF
								       ;THE MEANING OF THE WORD THAT ARE APPROPRIATE TO
								       ;THE TRANSITIVITY FIGURED OUT BY THE SYNTACTIC
							    INT	       ;PROGRAMS
							    TRANSL
							    TRANS2
							    THERE
							    ITRNSL)))
				      (SM (SETQ  WORD-BEING-INTERPRETED  (GETR 'MVB C))))))))
	     (SMSET (EVAL SENSE-OF-VERB))			       ;THIS DETERMINES THE APPROPRIATE SEMANTIC
								       ;INTERPRETATION(S) FOR THE CLAUSE BY CHECKING
								       ;THE RESTRICTIONS OF EACH DEFINITION AGAINST THE
								       ;MARKERS OF THE VARIOUS CANDIDATES FOR SMSUB,
								       ;SMOB1, ETC.  THE VALUE OF THE EVALUATION IS A
								       ;LIST OF RELATION-SEMANTIC-STRUCTURES, ONE FOR
								       ;EACH PLAUSIBLE INTERPRETATION

	     ;;; ;
	     (MAP (FUNCTION SMCL-MODIFIERS) H)			       ;SMCL-MODIFIERS WILL EXAMINE ALL OF THE
	     (RETURN SM)))					       ;CONSTITUENTS OF THE CLAUSE THAT WERE NOT
								       ;INVOLVED IN THE BUILDRSS AND WILL EVALUATE THE
								       ;MEANINGS OF EACH IN TURN FOR THEIR EFFECT ON
								       ;THE ESTABLISHED SM, THE PARSING TREE, OR
								       ;ANYTHINGELSE THAT WOULD BE APPROPRIATE THE
								       ;VALUE OF SMCL1 IS NON-NIL ONLY IF SOME
								       ;REASONABLE MEANING HAS BEEN FOUND FOR THE
								       ;CLAUSE

(DEFUN SMCL2 NIL 

		 ;; THERE USED TO BE A CALL TO SMPREPREL AT THIS
		 ;;POINT, BUT IT HAS GONE AWAY PENDING FURTHER
		 ;;THOUGHT. 
		 (MAP (FUNCTION SMCL-MODIFIERS) H)		       ;AS IN SMCL1 WE NEED TO SCAN THE CONSTITUENTS OF
								       ;THE CLAUSE AND ALLOW THEM TO MAKE WHATEVER
								       ;MODIFICATION ARE APPROPRIATE

		 ;;;
		 )



(DEFUN SMCL-MODIFIERS ( WORD-BEING-INTERPRETED ) 					       ;AS IN CONSTITUENT

       ;; THIS PROCEDURE IS BASICLY ONE LARGE DISPATCH TABLE WHICH
       ;;ARRANGES THAT THE PROPER KIND OF PROCESSING HAPPEN TO THE
       ;;APPROPRIATE CONSTITUENT.  SOME SHOULD BE IGNORED SINCE THEY
       ;;HAVE ALREADY BEEN DEALT WITH AND OTHERS SHOULD BE EVALUATED
       ;;AS MODIFIERS OR FOR THEIR SIDE-EFFECTS ;
       (COND ((NULL (GET  WORD-BEING-INTERPRETED  'FEATURES)))			       ;IF THE CONSTITUENT HAS A NULL FEATURE LIST THEN
								       ;IT IS A FUNCTION WORD (IE. (PARSE NIL FOR))
								       ;WHICH SHOULD BE IGNORED
	     ((OR (ISQ  WORD-BEING-INTERPRETED  VG) (ISQ  WORD-BEING-INTERPRETED  AUX))
	      (AND (ISQ  WORD-BEING-INTERPRETED  NEG)
		   (FQ NEG)
		   (BUILDRSS  WORD-BEING-INTERPRETED  'NEG 'NEG)))			       ;THIS HAS THEEFFECT OF CHECKING IFTHEVERB IS
								       ;NEGATIVE AND THEN ARRANGING THAT THE FEAURE
								       ;LIST OF THEWHOLE CLAUSE AND OF ITS MEANING
								       ;AGREE. ******* MAYBE SOMEONE ELSE SHOULD DO IT
								       ;??????????????
	     ((MEET FE '(THERE LOBJ COMP PRT SUBJ OBJ1 OBJ2)))	       ;IGNORE ALL CONSTITUENTS WITH THESE FEATURES
	     ((ISQ  WORD-BEING-INTERPRETED  NG) (AND (COND ((ISQ  WORD-BEING-INTERPRETED  TIM))	       ;SKIPS TO THE OTHER PART OF THE "AND" TO CALL
					((AND (CQ REL-NOT-FOUND)       ;ANOTHER SEMANTIC SPECIALIST CF. REFERENCE IN
					      (ISQ  WORD-BEING-INTERPRETED  QUEST)	       ;CLAUSE.SEC
					      (ISQ (H  WORD-BEING-INTERPRETED ) TIM1))    ;EG. "DAY" IN "WHAT DAY IS..."
					 (RQ REL-NOT-FOUND)	       ;TIE UP AS SYNTACTIC LOOSE END
					 (FQ TIMEQ))

					;;GIVE IT A REFERENCE PROP. 
					;;-WHY ?????????
					)
				  (SMTIME)))
	     ((ISQ  WORD-BEING-INTERPRETED  PREPG) (OR (ISQ  WORD-BEING-INTERPRETED  AGENT)		       ;IN WHICH CASE IT WAS ALREADY PROCESSED
				    (SMPREP NIL)		       ;MIGHT GO AWAY IN A FEW DAYS
				    (ERT SMCL-MOD BADPREPG)))	       ;BUG CHATCHER
	     ((ISQ  WORD-BEING-INTERPRETED  QADJ)
	      (OR (MEET FE '(LOBJ COMPQ)) (EVAL (SM  WORD-BEING-INTERPRETED ))))	       ;MIGHT WANT TO CHANGE THAT

	     ;;;
	     ((ISQ  WORD-BEING-INTERPRETED  BOUND))				       ; THE REST ARE HOOKS FOR WHEN WE FIGURE
	     ((ISQ  WORD-BEING-INTERPRETED  BINDER))				       ;OUTWHATTO DO WITH THEM
	     ((ISQ  WORD-BEING-INTERPRETED  QUEST))
	     ((ISQ  WORD-BEING-INTERPRETED  CLAUSE))
	     ((ERT SMCL-MODIFIERS ATTEMPTED TO PROCESS AN
		   UNEXPECTED TYPE OF CONSTITUENT))))

(DEFUN SMBIND NIL 
       (PROG (TSS EVENT START END)
	     (AND (CDR ( SM H))		       ;does the sm have more than one value???
		  (ERTSTOP I DON/'T KNOW WHAT TO DO WITH AMBIGUOUS
			   BOUND CLAUSES))
	     (COND ((ISQ (MOVE-PT H DF) TIME)			       ;dispatch table to match the appropriate action
								       ;with each binder  move to the first word of the
								       ;clause (to the binder) and check for the
								       ;feature time

		    ;;(maybe also check for the sm being marked as an
		    ;;event???)
		    (SETQ TSS (GETR 'TIME C))
		    (OR (SETQ EVENT (FINDEVENTS (CAR (SM H))))
			 (GLOBAL-ERR '(NO SUCH THING EVER HAPPENED))
)
(SETQ EVENT(CAR EVENT))
		    (SETQ START (GET EVENT 'START))
		    (SETQ END (GET EVENT 'END))
		    (EVAL (SM PT))(RETURN T)))))

(DEFUN SMBINDER (START-EV END-EV)
;;CALLED FOR A ABINDER - THE FIRST ARGUMENT GIVES
;;THE BEGINNING, SECOND THE END.
;;A TYPICAL USE IS THE DEFINITION OF "AFTER",
;;WHICH IS (SMBINDER END NIL)
;;I.E. THE EVENT STARTS AFTER THE END OF THE BOUND EVENT,
;;WITH NO SPECIFICATION ON WHEN IT ENDS.
(PUTPROP TSS START-EV 'START=)
(PUTPROP TSS END-EV 'END=))
