(DEFUN BREAK3
       NIL
       (MAPC (QUOTE (LAMBDA(/0X /0Y)(SET /0X /0Y))) /0VARS /0ARG)
       (AND (SETQ /0XX (EVAL /0COND))
	    (ERTEX (LIST (QUOTE ENTERING) /0NAME /0TYPE /0VARS)NIL))
       (SETQ * (SETQ  VALUE
	     (APPLY /0FN (COND ((MEMQ /0TYPE (QUOTE (FEXPR FSUBR))) (CAR /0ARG))
			       (/0ARG)))))
       (AND /0XX  (ERTEX (LIST (QUOTE EXITING) /0NAME)NIL)))


(DEFUN DA (X)
(AND X(DISP (APPLY 'APPEND(MAPCAR 'CDDR (APPLY 'APPEND(MAPCAR 'CDR (CDR(GET X 'THASSERTION)))))))))


(DEFUN PROPNAME(X)(EQ(CAR(EXPLODE X)) '=))
(DEFUN STU()
(DEPOSIT 346 055441512371)
(DEPOSIT 6045 255000000000)
(DEPOSIT 6140 255000000000))

(SSTATUS SYNTAX 15 500000)
(SSTATUS SYNTAX 30 500000)
(DEFUN THRUTEXT ()

(PROG()(IOC Q)GO (OR(EQUAL(TYO(TYI))77)(GO GO))))
(DEFUN DP (X) 
 (PROG (PLIST) 
  (TERPRI)
  (TERPRI)
  (PRINC '[)
  (PRINC X)
  (PRINC '])
  (SETQ PLIST (CDR X))
A (COND ((MEMQ (CAR PLIST) '(PNAME VALUE)) (GO B)))
  (TERPRI)
  (TAB 4.)
  (PRINC (CAR PLIST))
(SPRINT (CADR PLIST)(*DIF LINEL 18.) 18.)
B (COND ((SETQ PLIST (CDDR PLIST)) (GO A)))
  (TERPRI)
 (AND DPSTOP (ERT))
  (RETURN
   '*
)))(DEFUN LISTNAMES (PHRASE SPEC NAMES) 

       ;;PHRASE IS THE INITIAL THING TO COMPARE FOR USING "ONE", SPEC
       ;;IS EITHER DEF OR INDEF, AND THE NAMES ARE OF DATA-BASE
       ;;OBJECTS.  LISTNAMES PUTS OUT AN ACTION LIST, AS WELL AS
       ;;PUTTING THINGS ONTO THE BACKREF.  IT IS CALLED AFTER THE
       ;;ANSWER HAS BEEN DECIDED ON.
       (PROG (COUNT EXAM X RES ANS COMMA?) 
	     (SETQ NAMES (MAPCAR '(LAMBDA (X) (NAMEOBJ X SPEC))
				 NAMES))			       ;NAMEOBJ RETURNS A LIST OF THE OBJECT AND THE
	UP   (SETQ COUNT 1.)					       ;INSTRUCTIONS FOR NAMING IT.
	     (SETQ EXAM (CAR NAMES))
	     (SETQ NAMES (CDR NAMES))
	BACK (COND ((SETQ X (ASSOC (CAR EXAM) NAMES))
		    (SETQ NAMES (DELQ X NAMES))
		    (SETQ COUNT (ADD1 COUNT))
		    (SETQ EXAM (LIST (CAR EXAM)
				     (APPEND (CADR X) (CADR EXAM))))
		    (GO BACK))					       ;WHEN THERE ARE TWO OBJECTS WITH THE SAME
)	     (SETQ RES (CONS (CONS(PLURALIZE (CAR EXAM) COUNT)(CDR EXAM)) RES))	       ;ENGLISH DESCRIPTIONS, A JOINT OBJECT IS
								       ;PRODUCED COMBINING THE OBJECTS. THE COUNT IS
								       ;LATER USED TO PUT IN THE APPROPRIATE NUMBER,
								       ;AND THE DESCRIPTION IS CHECKED TO SEE IF "ONE"
								       ;CAN BE USED. ADD THE ONE JUST PRODUCED TO THE
								       ;RESULT LIST.
	     (AND NAMES (GO UP))				       ;TRY ANOTHER.
	     (SETQ RES (MAPCAR 
			'(LAMBDA (PHRASE2) 
(COND((PROPNAME(CAADR PHRASE2))(CAR PHRASE2))
(T				 (ANSNAME PHRASE2)		       ;ANSNAME PARSES THE PHRASE AND PUTS THE
				 (ONECHECK (CAR PHRASE2)))))		       ;ANSONE SUBSTITUTES "ONE" IF POSSIBLE
			RES))
	     (SETQ ANS (CAR RES))
	OUTPUT
	     (COND ((NULL (SETQ RES (CDR RES))) (RETURN ANS))
		   ((CDR RES) (SETQ COMMA? T)(SETQ ANS (APPEND ANS
						'((PRINC '/,))
						(CAR RES))))
		   ((SETQ ANS (APPEND ANS
(AND COMMA? '((PRINC '/,)))
				      '((SAY AND))
				      (CAR RES)))))
	     (GO OUTPUT)))
(DEFUN NAMEOBJ (ITEM SPEC) 

 ;;NAMES THE OBJECT IN ENGLISH -- GENERATES LIST OF THINGS TO BE
 ;;EVALUATED.  SPEC IS EITHER 'INDEF OR 'DEF OR 'DESCRIBE
 (PROG (TYPE: TYPELIST TYPE NAME: COLOR: COLORLIST SIZE: SIZELIST
	CUBE NAME X) 
(COND( (SETQ X (ASSOC ITEM '((:SHRDLU I) (:FRIEND YOU))))
	    (RETURN (LIST (ANSAY (CDR X)) (LIST ITEM))))		       ;  SPECIAL CASE CHECK
((EQ(CAR(EXPLODE ITEM))'=)(RETURN(LIST(ANSAY(READLIST
      (CDR(EXPLODE ITEM))))(LIST ITEM)))))
       (THVAL2 NIL '(THGOAL(#NAMEOBJ)(THUSE TC-NAMEOBJ)))
       (OR TYPELIST (ERT NAMEOBJ /-- OBJECT WITH NO #IS ASSERTION))    

(COND((EQ SPEC 'DESCRIBE)
(RETURN(LIST(ANSAY (NCONC
(LIST 'A)(AND SIZE:(LIST SIZE:))
(AND COLOR: (LIST(CUTOFF(CADDAR COLOR:))))
(AND TYPE:(LIST(CUTOFF (CADDAR TYPE:))))))(LIST ITEM)))))
       (DISPUT TYPE:)						       ;DISPUT CHECKS TO SEE IF DISCOURSE IS BEING
								       ;KEPT, AND IF SO PUTS THE RELEVANT SENTENCE
								       ;NUMBER AS A PROPERTY ON THE ASSERTION.
       (COND ((EQ (SETQ TYPE (CADDAR TYPE:)) '#NAME)
	      (RETURN (LIST (ANSAY (LIST ITEM))(LIST ITEM))))		       ;A NAME IS ITS OWN NAME
	     ((MEMQ '#PROPERTY (GET TYPE 'SYS))
	      (RETURN (LIST (ANSAY (LIST (CUTOFF ITEM)))(LIST ITEM))))       ;CUTOFF CUTS THE # OFF OF NAMES LIKE #RED AND
								       ;#POINTED WHICH ARE USED FOR PROPERTIES.
	     ((NOT (CDR TYPELIST))
	      (RETURN (LIST (ANSAY (LIST 'THE (CUTOFF TYPE)))(LIST ITEM))))				       ; THERE IS ONLY ONE OBJECT OF THIS TYPE (E.G.
	     (CUBE (SETQ NAME '(CUBE)))				       ;TABLE, BOX, HAND)
	     ((SETQ NAME (LIST (CUTOFF TYPE)))))		       ;E.G. #BLOCK BECOMES BLOCK.
       (AND NAME: (RETURN (LIST (ANSAY (LIST 'THE
					     (CAR NAME)
					     'NAMED
					     (CADDAR NAME:)))
				(LIST ITEM))))				       ;E.G. THE BLOCK NAMED SUPERBLOCK.
       (DISPUT COLOR:)						       ;IF WE HAVEN'T RETURNED YET, COLOR
       (SETQ NAME (CONS (CUTOFF (CADDAR COLOR:)) NAME))	       ;WILL BE NEEDED TO FULLY DESCRIBE THE OBJECT.
 (OR (CDR COLORLIST)
     (RETURN (LIST (ANSAY (CONS 'THE NAME))(LIST ITEM))))		       ;THERE ARE NO OTHERS OF THE SAME COLOR.
							       ;IF THERE ARE, WE MUST USE SIZE AS WELL
 (SETQ NAME (CONS SIZE: NAME))
 (RETURN
  (LIST
   (COND
    ((NULL (CDR SIZELIST)) (ANSAY (CONS 'THE NAME)))		       ;THE SIZE MANAGES TO FINISH SPECIFYING IT.
    ((EQ SPEC 'INDEF) (ANSAY (CONS 'A NAME)))			       ;IN THE INDEFINITE CASE WE DON'T CARE IF THIS
								       ;ISN'T A FULL SPECIFICATION.
    ((SETQ X (THVAL2 NIL '(THFIND ALL
				  $?X
				  (X (Y ITEM))
				  ($G (#SUPPORT $?Y $?X)))))
     (CONS (APPEND '(SAY THE) NAME)
	   (CONS '(SAY WHICH SUPPORTS)
		 (LISTNAMES NIL 'INDEF X))))			       ;IF IT SUPPORTS ANYTHING, NAME THEM.
    ((CONS (APPEND '(SAY THE) NAME)
	   (CONS '(SAY WHICH IS TO THE RIGHT OF)
		 (COND ((SETQ X
			      (THVAL2 NIL
				      '(THFIND ALL
					       $?X
					       (X (Y ITEM))
					       ($G (#AT $?X ?))	       ;MAKE SURE IT IS AN ITEM WITH A LOCATION.
					       ($G (#LOC #RIGHT
							 $?Y
							 $?X)
						   (THUSE TC-LOC)))))
			(LISTNAMES NIL 'INDEF X))
		       ('((SAY NOTHING))))))))
    (LIST ITEM)))))
î(SETQ LINEL 65.)
(SETQ DPSTOP NIL)
(SETQ =LINE '==================================================)
(SETQ ALTMODE (LIST (ASCII 33) (ASCII 175) (ASCII 176)))
(SETQ GLOBAL-SWITCHES
		'(NOSTOP DPSTOP PARSEBREAK LABELBREAK ANSWER? DOIT
		DISCOURSE NOMEM IASSUME PLANNERSEE BUILD-SEE PARSENODE-SEE))

(SETQ REGISTERS '(SMSUB SMOB1 SMOB2 SOBL SMCOMP))
(MAPC '(LAMBDA (X) (SET X '<EMPTY>)) REGISTERS)
(MAPC '(LAMBDA (X) (PUTPROP X 'OFF 'TURNED)) MASTER-SWITCHES)

(DEFUN DTABLE (L)
   (PRINT =LINE)
   (MAPC '(LAMBDA (X) (PRINTC (TAB 5.) X (TAB 22.) '= (EVAL X))
                  (COND ((GET X 'TURNED)(TAB 30.)(PRINC (LIST (GET X 'TURNED))))))
         L)
   (PRINTC =LINE))

î

(DEFPROP PRINTC 
 (LAMBDA(L)
  (PROG (TEST)
	(TERPRI)
   =>   (COND ((NULL L) (RETURN NIL)))
	(SETQ TEST (EVAL (CAR L)))
	(COND ((EQ TEST (QUOTE <TAB>))) (T (PRINC TEST) (PRINC (QUOTE / ))))
	(SETQ L (CDR L))
	(GO =>))) 
FEXPR)

(DEFPROP TAB 
 (LAMBDA(N)
  (PROG (P)
	(COND ((GREATERP N LINEL) (RETURN (QUOTE <TAB>))))
   A    (SETQ P (DIFFERENCE LINEL CHRCT))
	(COND ((NOT (GREATERP N P)) (RETURN (QUOTE <TAB>))))
	(PRINC (QUOTE / ))
	(GO A))) 
EXPR)
(DEFUN ETAOIN NIL 
 (PROG (WORD NEWWORD CHAR OPENQUOTE WRD LAST NEXT Y WORD1 X RD POSS) 
  THRU (SETQ QPENQUOTE NIL)
       (SETQ SENT (SETQ WORD (SETQ PUNCT (SETQ POSS NIL))))
       (PRINT 'READY)
       (TERPRI)
  CHAR (COND 
            ((EQUAL (TYIPEEK) 30)(READCH) (ERTSTOP)(GO THRU))
            ((EQ (SETQ CHAR (READCH)) '/ ) (GO WORD))		       ;DELIMITER
	     ((MEMQ CHAR ALTMODE)
	      (COND ((MEMQ (SETQ CHAR (READCH)) ALTMODE) (ERTSTOP)
						  (GO THRU))	       ;ALTMODE-ALTMODE
		    ((EQ CHAR 'C) (TYO 12.) (GO DO))		       ;ALTMODE-C
		    ((EQ CHAR 'R) (TERPRI) (GO DO))		       ;ALTMODE-R
		    ((AND (EQ CHAR 'S) SAVESENT)		       ;ALTMODE-S CAUSES THE LAST SENTENCE TYPED IN TO
		     (SETQ SENT (CAR SAVESENT))			       ;RETURNED AS THE SENTENCE TO BE INTERPRETED
		     (SETQ PUNCT (CDR SAVESENT))
		     (%)
		     (RETURN SENT))
((EQ CHAR 'N)(SETQ NEWWORD(NOT NEWWORD))(GO CHAR));ALTMODE-N COMPLEMENTS THE NEWWORD FLAG, WHICH
;DETERMINES WHETHER UNRECOGNIZED WORDS WILL BE CONSIDERED
;SPELLING ERRORS OR NEW WORDS.
((EQ CHAR 'Q)(IOC Q)(SETQ IGNORE NIL)(GO THRU))
;ALTMODE-Q CAUSES READIN FROM DISK FILE.
((EQ CHAR 'I)(SETQ IGNORE T)(IOC Q)(GO THRU));ALTMODE-I IGNORES
;SENTENCE READ FROM FILE.
		    ((GO THRU))))
	     ((EQ CHAR RUBOUT)
	      (COND (WORD (PRINC (CAR WORD)) (SETQ WORD (CDR WORD)))
		    (SENT (PRINT (CAR SENT)) (SETQ SENT (CDR SENT))))
	      (GO CHAR))
	     ((EQ CHAR CARRET) (GO WORD))
	     ((MEMQ CHAR PUNCL) (SETQ PUNCT CHAR)		       ;DELIMITER
				(AND WORD (GO WORD))
				(GO PUNC)))
       (AND (OR (AND (EQ CHAR '/') (SETQ CHAR '"))		       ;WITHIN THIS "AND" ARE ALL THE CHARACTERS THAT
		(NUMBERP CHAR)					       ;ARE UNDERSTOOD BY THE SYSTEM
		(AND (EQ CHAR '=) (NULL WORD))
		(MEMQ CHAR VOWEL)
		(MEMQ CHAR CONSO))
	    (SETQ WORD (CONS CHAR WORD)))
       (GO CHAR)
  DO   (PRINT 'READY)
       (TERPRI)
       (MAPC (FUNCTION (LAMBDA (X) (PRINT2 X))) (REVERSE SENT))
       (PRINC '/ )
       (MAPC (FUNCTION PRINC) (REVERSE WORD))
       (GO CHAR)
  WORD (COND ((NULL WORD) (GO CHAR))
((EQUAL WORD '(P L E H))(HELP)(GO THRU))
	     ((AND (SETQ WRD (ERRSET (READLIST (REVERSE WORD))))
		   (NUMBERP (SETQ WRD (CAR WRD))))
	      (SETQ SENT (CONS WRD SENT))
	      (BUILDWORD WRD
			 (OR (AND (ZEROP (SUB1 WRD)) '(NUM NS))
			     '(NUM))
			 (LIST 'NUM WRD)
			 NIL))					       ;NO ROOT FOR NUMBERS
	     ((NULL WRD) (SETQ WRD (REVERSE WORD)) (GO NO))
	     ((GET WRD 'FEATURES))				       ;IF A WORD HAS FEATURES, IT'S PROPERTIES 
	     ((SETQ X (GET WRD 'IRREGULAR))			       ;ARE ALL SET UP IN THE DICTIONARY
	      (BUILDWORD WRD (MOD (FE X) (CDR X)) (SM X) (CAR X)))
	     ((EQ (CAR (LAST WORD)) '=)
	      (BUILDWORD WRD
			 (COND ((MEMQ '" WORD)
				'(PROPN NS POSS))
			       ('(PROPN NS)))
			 '((PROPN T))
			 NIL))
	     ((GO CUT)))
       (GO WRD)

       ;;;---------------------------------------------
       ;;;              MORPHOLOGY CODE
       ;;;--------------------------------------------
       
  CUT  (COND ((STA WORD '(T " N))
	      (SETQ RD (CDDDR WORD))
	      (SETQ WORD (CONS '* WORD))
	      (GO TRY))
	     ((STA WORD '(S ")) (SETQ WORD (CDDR WORD))
				(SETQ POSS WRD)
				(GO WORD))
	     ((STA WORD '(")) (SETQ WORD (CDR WORD))
			      (SETQ POSS WRD)
			      (GO WORD))
	     ((STA WORD '(Y L)) (SETQ RD (CDDR WORD)) (GO LY))
	     ((STA WORD '(G N I)) (SETQ RD (CDDDR WORD)))
	     ((STA WORD '(D E)) (SETQ RD (CDDR WORD)))
	     ((STA WORD '(N E)) (SETQ RD (CDDR WORD)))
	     ((STA WORD '(R E)) (SETQ RD (CDDR WORD)))
	     ((STA WORD '(T S E)) (SETQ RD (CDDDR WORD)))
	     ((STA WORD '(S)) (SETQ RD (CDR WORD)) (GO SIB))
	     (T (GO NO)))
       (SETQ LAST (CAR RD))
       (SETQ NEXT (CADR RD))
       (COND ((AND (MEMQ LAST CONSO)
		   (NOT (MEMQ LAST LIQUID))
		   (EQ LAST NEXT))
	      (SETQ RD (CDR RD)))
	     ((EQ LAST 'I) (SETQ RD (CONS 'Y (CDR RD))))
	     ((OR (AND (MEMQ LAST CONSO)
		       (MEMQ NEXT VOWEL)
		       (NOT (EQ NEXT 'E))
		       (MEMQ (CADDR RD) CONSO))
		  (AND (MEMQ LAST LIQUID)
		       (MEMQ NEXT CONSO)
		       (NOT (MEMQ NEXT LIQUID)))
		  (AND (EQ LAST 'H) (EQ NEXT 'T))
		  (AND (MEMQ LAST '(C G S J V Z))
		       (OR (MEMQ NEXT LIQUID)
			   (AND (MEMQ NEXT VOWEL)
				(MEMQ (CADDR RD) VOWEL)))))
	      (SETQ RD (CONS 'E RD))))
       (GO TRY)
  LY   (COND ((AND (MEMQ (CAR RD) VOWEL)
		   (NOT (EQ (CAR RD) 'E))
		   (MEMQ (CADR RD) CONSO))
	      (SETQ RD (CONS 'E RD))))
       (COND ((MEMQ 'ADJ
		    (GET (SETQ ROOT (READLIST (REVERSE RD)))
			 'FEATURES))
	      (BUILDWORD WRD
			 '(ADV VBAD)
			 NIL					       ;TEMP NIL SEMANTICS
			 ROOT)					       ;ROOT IS THE ADJECTIVE
	      (GO WRD)))
       (GO NO)
  SIB  (SETQ LAST (CAR RD))
       (SETQ NEXT (CADR RD))
       (COND ((NOT (EQ LAST 'E)))
	     ((EQ NEXT 'I)
	      (SETQ RD (CONS 'Y (CDDR RD))))
	     ((EQ NEXT 'X) (SETQ RD (CDR RD)))
	     ((AND (EQ NEXT 'H)
		   (NOT (EQ (CADDR RD) 'T)))
	      (SETQ RD (CDR RD)))
	     ((AND (MEMQ NEXT '(S Z)) (EQ NEXT (CADDR RD)))
	      (SETQ RD (CDDR RD))))
  TRY  (COND ((OR (SETQ FEATURES
			(GET (SETQ ROOT (READLIST (REVERSE RD)))
			     'FEATURES))
		  (AND (SETQ X (GET ROOT 'IRREGULAR))
		       (SETQ FEATURES (MOD (GET (SETQ ROOT (CAR X))
						'FEATURES)
					   (CDR X)))))
	      (BUILDWORD WRD
			 (MOD FEATURES (GET (CAR WORD) 'MOD))
			 (GET ROOT 'SEMANTICS)
			 ROOT))
	     ((EQ (CAR RD) 'E) (SETQ RD (CDR RD)) (GO TRY))
	     ((GO NO)))

       ;;;----------------------------------------------------
       ;;;  BUILD UP THE PROCESSED LIST OF WORDS TO BE RETURNED
       ;;;----------------------------------------------------
       
  WRD  (SETQ SENT
	     (COND (POSS (COND ((OR (MEMQ 'NOUN
					  (SETQ FEATURES
						(GET WRD 'FEATURES)))  ;IF IT'S A NOUN
				    (MEMQ 'PROPN FEATURES))	       ;OR A PROPER NOUN
				(BUILDWORD POSS
					   (APPEND (MEET FEATURES      ;MARK IT AS POSSESSIVE 
							 (GET 'POSS
							      'ELIM))
						   '(POSS))
					   (GET WRD 'SEMANTICS)
					   ROOT)
				(CONS POSS SENT))
			       ((BUILDWORD '"S			       ; CAN WE GENERALIZE IT???
					   '(VB BE V3PS PRES)
					   (GET 'BE 'SEMANTICS)
					   'BE)
				(CONS '"S (CONS WRD SENT)))))
		   ((CONS WRD SENT))))
  PUNC (COND (PUNCT (COND((AND(EQ PUNCT '?)(NULL SENT))(HELP)(GO THRU))
 ((EQ PUNCT '")
			   (SETQ OPENQUOTE (NULL OPENQUOTE))
			   (SETQ SENT (CONS '" SENT)))
			  ((AND (NULL OPENQUOTE) (MEMQ PUNCT FINAL))
			   (RETURN (CAR (SETQ SAVESENT
					      (CONS (REVERSE SENT)     ;RETURN POINT !!!!!!!!!!!!!
						    PUNCT)))))
			  ((SETQ SENT (CONS PUNCT SENT))))))
       (SETQ PUNCT NIL)
       (SETQ WORD (SETQ POSS NIL))
       (GO CHAR)
  NO   (COND(NEWWORD(BUILDWORD WRD '(NOUN NS PROPN) 
'((NOUN(SMNEWNOUN))(PROPN(SMNEWPROPN))) WRD)(GO PUNC)))
(TERPRI)
       (SAY *SORRY/, I DON/'T KNOW THE WORD ")
       (PRINC WRD)
       (PRINC '/ "/.)
       (TERPRI)
       (SAY PLEASE TYPE <CONTROL X> AND CONTINUE THE SENTENCE/.)
  NOGO (OR(EQUAL (TYI) 30)(GO NOGO))
    (SETQ PUNCT NIL WORD NIL)
       (GO DO)))


(DEFPROP THERT ERT FEXPR)
(DEFUN ERT FEXPR(/,ERT)(ERTEX /,ERT NIL))

(DEFUN ERTERR FEXPR (/,ERT) (ERTEX /,ERT T))

(DEFUN BUG FEXPR (/,ERT) (ERTEX (CONS 'BUG!!!!!!!!!! /,ERT) T))



(DEFUN ERTEX (/,ERTA /,ERR?) 
 (PROG (/,LIST /,LISTEN /,L2 * ^W ^Q) 
  (AND NOSTOP (NOT (EQ NOSTOP '/,NOSTOP)) (RETURN T))
  (PRINT '>>>)
  (MAPC (FUNCTION PRINT2) /,ERTA)
LISTEN 
       (SETQ /,LIST NIL)
       (AND ZOGUSER  (PRINT 'LISTENING--->))
LIST2
       
(COND
((EQUAL(TYIPEEK)30)(READCH)(RETURN T))
((AND /,LIST (EQUAL(TYIPEEK)15))(READCH)(SETQ /,LISTEN
  (REVERSE /,LIST)))
((MEMBER (TYIPEEK) '(40 12))(READCH)(GO LIST2))
((EQUAL (TYIPEEK)15)(COND(/,LIST (SETQ /,LISTEN
(REVERSE /,LIST))(GO END))(T(READCH)(READCH)
(GO LIST2))))
 ((NOT (ERRSET (SETQ /,LISTEN (READ))))(GO LIST2)))

(OR(ATOM /,LISTEN)(AND(MEMBER (TYIPEEK) '(15 30))(READCH)))
(AND (ATOM /,LISTEN)(SETQ /,LISTEN (OR (GET /,LISTEN 'ABBREV)/,LISTEN)))
(COND((COND(/,LIST (SETQ /,LIST (CONS /,LISTEN /,LIST)))
((MEMQ /,LISTEN '(SHOW TELL))(SETQ /,LIST(LIST /,LISTEN))))
     (COND ((EQUAL (TYIPEEK) 12)(SETQ /,LISTEN (REVERSE /,LIST)))
(T(GO LIST2))))
 ((EQ /,LISTEN 'GO)(IOC G))
((MEMQ /,LISTEN '(HELP ?))(HELP)(GO LISTEN))
	((MEMQ /,LISTEN '(T P NIL)) (AND /,ERR? (ERR NIL))
				     (RETURN /,LISTEN))
	((EQ (CAR /,LISTEN) 'RETURN)
	 (RETURN (EVAL (CADR /,LISTEN))))
	((MEMQ (CAR /,LISTEN) '(C CHANGE))
î	 (COND ((NULL (CDR /,LISTEN)) (SETQ * (PRINT /,L2))
				      (GO LISTEN))
	       ((NULL (CDDR /,LISTEN))
		(ERRSET (SETQ /,L2
			      (SETQ *
				    (PRINT (EVAL (CADR /,LISTEN))))))
		(GO LISTEN))
	       ((SETQ * (PRINT (SETQ /,LISTEN (SUBST (CADDR /,LISTEN)
						     (CADR /,LISTEN)
						     /,L2)))))))
	((EQ /,LISTEN 'PUSH)
	 (SETQ /,ERTPDL (CONS /,L2 /,ERTPDL))
	 (GO LISTEN))
	((EQ /,LISTEN 'POP)
	 (COND ((ATOM /,ERTPDL) (PRINT '*****OVERPOP****)
				(GO LISTEN))
	       ((SETQ /,L2 (SETQ * (PRINT (CAR /,ERTPDL))))
		(SETQ /,ERTPDL (CDR /,ERTPDL))
		(GO LISTEN))))
((EQ /,LISTEN 'RUN)(SETQ /,LISTEN /,L2))
((AND ZOGUSER(ATOM /,LISTEN))(PRINT /,LISTEN)
(SAY ISN/'T A COMMAND/.)
(TERPRI)(GO LISTEN))
)
END
(ERRSET (SETQ * (PRINT(EVAL /,LISTEN))))
(SETQ /,L2 /,LISTEN )
(GO LISTEN)))

'======END-OF-SCUTIL====== 
(SETQ ZOGUSER T)
(SETQ ERRLIST '((SETQ ERRLIST '((SHRDLU)))(ERT SHRDLU COMMAND STATE/,
 TYPE HELP <CR> FOR
INSTRUCTIONS/.)))
                                                                                                                                                                                                   