

(DEFPROP CONSO (NIL B C D F G H J K L M N P Q R S T V X Z) VALUE)

(DEFPROP CUT
	 (LAMBDA (A)
		 (PROG (B C)
		       (SETQ B N)
		  LOOP (COND ((EQ A B) (SETQ CUT A)
				       (SETQ NN (NOT (EQ CUT N)))
				       (RETURN T))
			     ((EQ B END) (RETURN NIL))
			     ((SETQ B (CDR B)) (GO LOOP))
			     ((NULL A) (SETQ CUT NIL) (SETQ NN N) (RETURN T)))))
	 EXPR)

(DEFPROP PDEFINE
	 (LAMBDA (A) (PUTPROP (CAR A) (MACR (CADR A)) (Q EXPR)) (CAR A))
	 FEXPR)

(DEFPROP DEFLIST
	 (LAMBDA (LIST)
		 (MAPC (FUNCTION (LAMBDA (A)
					 (PUTPROP (CAR A) (CADR A) (CAR LIST))))
		       (CDR LIST))
		 (CAR LIST))
	 FEXPR)

(DEFPROP DISP
	 (LAMBDA (/0A)
		 (AND (STATUS TTY) (TYO 14))
		 (TERPRI)
		 (AND (CDR /0A)
		      (PRINC (CAR /0A))
		      (PRINC (Q / >>/ ))
		      (PRINC (CADR /0A))
		      (TERPRI))
		 (SPRINT (COND ((CDR /0A) (GET (CAR /0A) (CADR /0A)))
			       ((MEMQ (CAR /0A) (Q (BACKREF2 BACKREF)))
				(MAPCAR (FUNCTION B2) (EVAL (CAR /0A))))
			       ((EVAL (CAR /0A))))
			 LINEL
			 0)
		 (Q *))
	 FEXPR)

(DEFPROP ERT
	 (LAMBDA (/0ERTA )
		 (PROG (/0LISTEN ^W ^Q)
		       (AND NOSTOP (ERR NIL))
		       (PRINT (QUOTE >>>))
		       (MAPC (FUNCTION PRINT2) /0ERTA)
		       (PRINT (Q LISTENING))
		  LISTEN
		       (COND ((NOT(ERRSET (SETQ /0LISTEN (READ)))))
			     ((MEMQ /0LISTEN (QUOTE (T %P P)))
			      (RETURN T))
			     ((NULL /0LISTEN) (RETURN NIL))
			     ((EQ (CAR /0LISTEN) (QUOTE RETURN))
			      (RETURN (EVAL (CADR /0LISTEN))))
			     (T (ERRSET(PRINT (EVAL /0LISTEN)))))
		       (GO LISTEN)))
	 FEXPR)

(DEFPROP ERTSTOP
	 (LAMBDA (ERTA) ((LAMBDA (NOSTOP) (EVAL (CONS (Q ERT) ERTA))) NIL))
	 FEXPR)
(DEFPROP ETAOIN
 (LAMBDA NIL
  (PROG (WORD CHAR WRD LAST NEXT Y WORD1 X RD POSS)
   THRU	(SETQ SENT (SETQ WORD (SETQ PUNCT (SETQ POSS NIL))))
	(PRINT (Q READY/
)) CHAR	(COND ((EQ (SETQ CHAR (READCH)) (Q / )) (GO WORD))
	      ((EQ CHAR (Q ))
	       (COND ((EQ (SETQ CHAR (READCH)) (Q )) (ERT) (GO THRU))
		     ((EQ CHAR (QUOTE C)) (TYO 14) (GO DO))
		     ((EQ CHAR (Q R)) (TERPRI) (GO DO))
((AND(EQ CHAR 'S)SAVESENT)

(SETQ SENT(CAR SAVESENT))(SETQ PUNCT(CDR SAVESENT))
(%)   (RETURN   SENT))
		     ((GO THRU))))
	      ((EQ CHAR RUBOUT)
	       (COND (WORD (PRINC (CAR WORD)) (SETQ WORD (CDR WORD)))
		     (SENT (PRINT (CAR SENT)) (SETQ SENT (CDR SENT))))
	       (GO CHAR))
	      ((EQ CHAR (Q /
)) (GO WORD)) ((OR (NULL WORD) (AND (OR (EQ (QUOTE /-) (CAR WORD))
					(EQ (QUOTE /+) (CAR WORD))
					(NUMBERP (CAR WORD)))
				    (NOT (MEMQ (QUOTE /.) WORD)))))
	      ((OR (EQ CHAR (QUOTE /-)) (EQ CHAR (QUOTE //))) (GO WORD))
	      ((AND WORD (EQ CHAR (QUOTE /')) (SETQ CHAR (QUOTE "))))
	      ((MEMQ CHAR PUNCL) (GO PUNCT)))
	(AND (OR (EQ CHAR (QUOTE "))
		 (NUMBERP CHAR)
		 (AND (EQ CHAR (Q =)) (NULL WORD))
		 (GREATERP -227777777777
			   (CAR (GET CHAR (QUOTE PNAME)))
			   -374000000001))
	     (SETQ WORD (CONS CHAR WORD)))
	(GO CHAR)
   DO	(PRINT (Q READY/
))	(MAPC (FUNCTION (LAMBDA (X) (PRINT2 (CADDR X)))) (REVERSE SENT))
	(PRINC (Q / ))
	(MAPC (FUNCTION PRINC) (REVERSE WORD))
	(GO CHAR)
   PUNCT(COND (WORD (SETQ PUNCT CHAR) (GO WORD))
	      ((SETQ SENT (CONS (LIST (Q (SPEC)) NIL CHAR) SENT)) (GO CHAR)))
   WORD	(COND ((NULL WORD) (GO CHAR))
	      ((EQUAL WORD (QUOTE (/.))) (SETQ PUNCT (QUOTE /.)) (GO PUNC))
	      ((AND (SETQ WRD (ERRSET (READLIST (REVERSE WORD))))
		    (NUMBERP (SETQ WRD (CAR WRD))))
	       (SETQ SENT
		     (CONS (LIST (OR (AND (ZEROP (SUB1 WRD)) (QUOTE (NUM NS)))
				     (QUOTE (NUM)))
				 (LIST (QUOTE NUM) WRD)
				 WRD
				 WRD)
			   SENT))
	       (AND (EQ (QUOTE /.) (CAR WORD)) (SETQ PUNCT (QUOTE /.)))
	       (GO PUNC))
	      ((NULL WRD) (SETQ WRD (REVERSE WORD)) (GO NO))
	      ((SETQ X (GET WRD (Q WORD)))
	       (SETQ WORD1 (LIST X (OR SMN (GET WRD (Q SMNTC))) WRD WRD)))
	      ((SETQ X (GET WRD (Q WORD1)))
	       (SETQ WORD1 (LIST (MOD (GET (CAR X) (Q WORD)) (CDR X))
				 (OR SMN (GET (CAR X) (Q SMNTC)))
				 WRD
				 (CAR X))))
	      ((EQ (CAR (LAST WORD)) (Q =))
	       (SETQ WORD1 (LIST (COND ((MEMQ (Q ") WORD) (Q (PROPN NS POSS)))
				       ((Q (PROPN NS))))
				 (Q ((PROPN T)))
				 WRD)))
	      ((GO CUT)))
	(GO WRD)
   CUT	(COND ((STA WORD (Q (T " N))) (SETQ RD (CDDDR WORD))
				      (SETQ WORD (CONS (Q *) WORD))
				      (GO TRY))
	      ((STA WORD (Q (S "))) (SETQ WORD (CDDR (SETQ POSS WORD)))
				    (GO WORD))
	      ((STA WORD (Q ("))) (SETQ WORD (CDR (SETQ POSS WORD))) (GO WORD))
	      ((STA WORD (Q (Y L))) (SETQ RD (CDDR WORD)) (GO LY))
	      ((STA WORD (Q (G N I))) (SETQ RD (CDDDR WORD)))
	      ((STA WORD (Q (D E))) (SETQ RD (CDDR WORD)))
	      ((STA WORD (Q (N E))) (SETQ RD (CDDR WORD)))
	      ((STA WORD (Q (R E))) (SETQ RD (CDDR WORD)))
	      ((STA WORD (Q (T S E))) (SETQ RD (CDDDR WORD)))
	      ((STA WORD (Q (S))) (SETQ RD (CDR WORD)) (GO SIB))
	      (T (GO NO)))
	(SETQ LAST (CAR RD))
	(SETQ NEXT (CADR RD))
	(COND ((AND (MEMQ LAST CONSO) (NOT (MEMQ LAST LIQUID)) (EQ LAST NEXT))
	       (SETQ RD (CDR RD)))
	      ((EQ LAST (Q I)) (SETQ RD (CONS (Q Y) (CDR RD))))
	      ((OR (AND (MEMQ LAST CONSO)
			(MEMQ NEXT VOWEL)
			(NOT (EQ NEXT (Q E)))
			(MEMQ (CADDR RD) CONSO))
		   (AND (MEMQ LAST LIQUID)
			(MEMQ NEXT CONSO)
			(NOT (MEMQ NEXT LIQUID)))
		   (AND (EQ LAST (QUOTE H)) (EQ NEXT (Q T)))
		   (AND (MEMQ LAST (Q (C G S J V Z)))
			(OR (MEMQ NEXT LIQUID)
			    (AND (MEMQ NEXT VOWEL) (MEMQ (CADDR RD) VOWEL)))))
	       (SETQ RD (CONS (Q E) RD))))
	(GO TRY)
   LY	(COND ((AND (MEMQ (CAR RD) VOWEL)
		    (NOT (EQ (CAR RD) (Q E)))
		    (MEMQ (CADR RD) CONSO))
	       (SETQ RD (CONS (Q E) RD))))
	(COND ((AND (SETQ X (GET (READLIST (REVERSE RD)) (Q WORD)))
		    (MEMQ (Q ADJ) X))
	       (SETQ WORD1 (LIST (Q (ADV VBAD)) NIL WRD))
	       (GO WRD)))
	(GO NO)
   SIB	(SETQ LAST (CAR RD))
	(SETQ NEXT (CADR RD))
	(COND ((NOT (EQ LAST (Q E))))
	      ((EQ NEXT (Q I)) (SETQ RD (CONS (Q Y) (CDDR RD))))
	      ((EQ NEXT (Q X)) (SETQ RD (CDR RD)))
	      ((AND (EQ NEXT (QUOTE H)) (NOT (EQ (CADDR RD) (Q T))))
	       (SETQ RD (CDR RD)))
	      ((AND (MEMQ NEXT (Q (S Z))) (EQ NEXT (CADDR RD)))
	       (SETQ RD (CDDR RD))))
   TRY	(COND ((OR (SETQ X (GET (SETQ Y (READLIST (REVERSE RD))) (Q WORD)))
		   (AND (SETQ X (GET Y (Q WORD1)))
			(SETQ X (MOD (GET (SETQ Y (CAR X)) (Q WORD)) (CDR X)))))
	       (SETQ WORD1 (LIST (MOD X (GET (CAR WORD) (Q MOD)))
				 (OR SMN (GET Y (Q SMNTC)))
				 WRD
				 Y)))
	      ((EQ (CAR RD) (Q E)) (SETQ RD (CDR RD)) (GO TRY))
	      ((GO NO)))
   WRD	(SETQ SENT (COND (POSS (COND ((OR (MEMQ (Q NOUN) (CAR WORD1))
					  (MEMQ (Q PROPN) (CAR WORD1)))
				      (CONS (LIST (APPEND (MEET (CAR WORD1)
								(GET (Q POSS)
								     (Q ELIM)))
							  (Q (POSS)))
						  (CADR WORD1)
						  (READLIST (REVERSE POSS)))
					    SENT))
				     ((CONS (LIST (Q (VB BE V3PS PRES))
						  NIL
						  (QUOTE IS))
					    (CONS WORD1 SENT)))))
			 ((CONS WORD1 SENT))))
	(AND (OR (EQ CHAR (QUOTE //)) (EQ CHAR (QUOTE /-)))
	     (SETQ SENT (CONS (LIST (QUOTE (SPEC)) CHAR CHAR CHAR) SENT)))
   PUNC	(COND (PUNCT (COND ((MEMQ PUNCT FINAL) (RETURN
(CAR(SETQ SAVESENT
(CONS(REVERSE SENT)PUNCT)))))
			   ((SETQ SENT (CONS (LIST (Q (SPEC)) NIL PUNCT) SENT))
			    (SETQ PUNCT NIL)))))
	(SETQ WORD (SETQ POSS NIL))
	(GO CHAR)
   NO	(SAY /
*SORRY/, I DON/'T KNOW THE WORD ")
	(PRINC WRD)
	(SAY / "/./
 PLEASE TYPE TWO SPACES/.)
   NOGO	(COND ((EQ CHAR (Q )) (READCH) (ERT) (GO THRU)))
	(OR (EQ (SETQ CHAR (READCH)) (Q / )) (GO NOGO))
	(OR (EQ (SETQ CHAR (READCH)) (Q / )) (GO NOGO))
	(GO THRU)))
 EXPR)

(DEFUN ETNEW NIL (AND (EQ (CAR WORD) (QUOTE "))
		      (EQ (CAR (LAST WORD)) (QUOTE "))
		      (SETQ WORD1
			    (LIST (QUOTE (NOUN NS))
				  (QUOTE ((NOUN (NEWWORD))))
				  (SETQ WORD1
					(READLIST (CDR (REVERSE (CDR WORD)))))
				  WORD1))))

(DEFPROP F (LAMBDA (A) (COND ((MEMBER A FE) T) ((SETQ FE (CONS A FE))))) EXPR)

(DEFPROP FASSOC
	 (LAMBDA (W X Y Z)
		 (PROG (S)
		       (SETQ S Y)
		  UP   (COND ((NULL S) (RETURN (APPLY Z NIL)))
			     ((EQ X (APPLY W (LIST (CAR S)))) (RETURN (CAR S))))
		       (SETQ S (CDR S))
		       (GO UP)))
	 EXPR)

(DEFPROP FINAL (NIL /. ? !) VALUE)

(DEFPROP FINDB
	 (LAMBDA (X Y)
		 (COND ((NULL X) NIL) ((EQ Y (CDR X)) X) (T (FINDB (CDR X) Y))))
	 EXPR)

(DEFUN FQ FEXPR (A) (MAPCAR (FUNCTION (LAMBDA (X) (OR (MEMQ X FE)
						      (SETQ FE (CONS X FE)))))
			    A))

(DEFPROP FROM
	 (LAMBDA (A B) (COND ((OR (NOT A) (EQ A B)) NIL)
			     (T (CONS (CADDAR A) (FROM (CDR A) B)))))
	 EXPR)
(DEFUN ISX (A B) (MEMBER B (CAAR A)))

(DEFPROP ISQ (LAMBDA (A) (MEMQ (CADR A) (CAAR (EVAL (CAR A))))) FEXPR)

(DEFPROP LIQUID (NIL L R S Z V) VALUE)

(DEFPROP M (LAMBDA (A) (SETQ ME (CONS A ME))) EXPR)


(DEFUN MEET (A MEET) (PROG (SET)
		      GO   (COND ((NULL A) (RETURN (REVERSE SET)))
				 ((MEMQ (CAR A) MEET)
				  (SETQ SET (CONS (CAR A) SET))))
			   (SETQ A (CDR A))
			   (GO GO)))

(DEFPROP MOD (LAMBDA (A B) (UNION (SETDIF A (CADR B)) (CAR B))) EXPR)

(DEFPROP MP (LAMBDA (A) (SETQ MESP A)) FEXPR)

(DEFPROP MQ (LAMBDA (A) (SETQ ME (CONS A ME))) FEXPR)

(DEFPROP NEXTW (LAMBDA (A) (EQ (CADDAR N) (CAR A))) FEXPR)

(DEFPROP NILL (LAMBDA NIL NIL) EXPR)

(DEFPROP NQ (LAMBDA (A) (MEMQ (CAR A) (CAAR N))) FEXPR)

(DEFPROP P (LAMBDA (A) (PRCSS (EVAL (CONS (Q *) A)))) FEXPR)

(DEFPROP PARSE
	 (LAMBDA (A)
		 (COND ((EQ (CAR A) (Q CLAUSE))
			(PROG (MVB) (RETURN (PARSE2 A (MEMQ (Q MAJOR) A)))))
		       ((MEMQ (CAR A) (Q (NG VG PREPG ADJG))) (PARSE2 A NIL))
		       ((PARSE3 A NIL))))
	 FEXPR)

(DEFPROP PARSEREL
	 (LAMBDA (A B C)
		 (PROG (D E)
		       (SETQ D A)
		  GO   (COND ((NULL D) (RETURN NIL))
			     ((NOT (ISX C (CAAR D))))
			     ((SETQ E (EVAL (APPEND (Q (PARSE CLAUSE RSNG))
						    (CDAR D)
						    B)))
			      (RETURN E)))
		       (SETQ D (CDR D))
		       (GO GO)))
	 EXPR)
(DEFPROP PARSE2
 (LAMBDA (REST P)
	 (PROG (UN END RE SPEC NBB)
	       (COND ((EQ (SETQ NBB N) CUT) (RETURN NIL)))
	       (SETQ END CUT)
	       (OR P (SETQ PD (CONS (LIST FE NB NIL H SM CUT) PD)))
	       (COND ((MEMQ (Q SPECL) (CAAR N))
		      (EVAL (APPEND (GET (CADDDR(CAR N)) (Q SPECL))
				    (LIST REST CUT (Q PARSE))))))
	       (COND ((EQ (CAR SPEC) (Q SKIP)) (GO SKIP))
		     ((EQ (CAR SPEC) (Q DONE)) (GO DONE))
		     ((EQ (CAR SPEC) (Q LOSE)) (SETQ N NBB) (GO LOSE))
		     ((NULL (CAR (SETQ RE
				       (LIST (EVAL (LIST (SETQ UN
							       (CAR REST))))))))
		      (SETQ RE NIL)
		      (SETQ N NBB)
		      (GO LOSE)))
	  SKIP (COND ((EQ N CUT)) ((MEMQ (Q SPEC) (CAAR N))
				   (EVAL (APPEND (GET (CADDAR N) (Q SPEC))
						 (LIST REST CUT (Q PARSE))))))
	  DONE (OR P (SETQ C (LIST (LIST (REVERSE FE)
					 NB
					 N
					 (SETQ H (APPEND RE H))
					 SM))))
	  LOSE (COND (P (GO OK)))
	       (SETQ NN (NOT (EQ N (SETQ CUT (CADDDR (CDDAR PD))))))
	       (SETQ PD (CDR PD))
	  OK   (COND ((AND RE (MEMQ UN PARSETRACE))
		      (PRINT (Q (PARSE SUCCEDED)))
		      (PRINT UN)
		      (PRINT (FROM (CADAR RE) N))
		      (AND (MEMQ UN PARSEBREAK) (ERTSTOP BREAK))))
	       (RETURN RE)))
 EXPR)
(DEFPROP PARSE3
 (LAMBDA (A P)
	 (PROG (XP LABL RE SPEC NBB)
	       (COND ((EQ (SETQ NBB N) CUT) (MQ CUT) (RETURN NIL))
		     ((MEMQ (Q SPECL) (CAAR N))
		      (EVAL (APPEND (GET (CADDDR(CAR N)) (Q SPECL))
				    (LIST A CUT (Q PARSE))))
		      (COND ((EQ (CAR SPEC) (Q SKIP)) (GO SKIP))
			    ((EQ (CAR SPEC) (Q LOSE)) (SETQ N NBB) (RETURN NIL))
			    ((EQ (CAR SPEC) (Q DONE)) (GO DONE)))))
	       (COND ((CAR (SETQ XP A)))
		     ((EQ (CADR A) (CADDAR N)) (GO OK))
		     ((SETQ N NBB) (RETURN NIL)))
	  LOOP (COND ((NOT (ATOM (CAR XP))) (SETQ LABL (CONS (CAAR XP) LABL)))
		     ((EQ (CAR XP) (Q NULL)))
		     ((MEMQ (CAR XP) (CAAR N)))
		     ((MEMQ (CAR XP) UNMKD))
		     ((M (CAR XP)) (SETQ N NBB) (RETURN NIL)))
	       (COND ((SETQ XP (CDR XP)) (GO LOOP)))
	  OK   (SETQ RE (LIST (LIST (MEET (APPEND (CAAR N) LABL)
					  (GET (CAR A) (Q ELIM)))
				    N
				    (CDR N)
				    (Q WORD)
				    (OR SMN
					(NULL (CAR A))
					(AND (NULL (CADAR N)) (UNDEFINED))
					(CADR (SASSOC (CAR A)
						      (CADAR N)
						      (FUNCTION UNDEFINED))))
				    (CADDDR (CAR N)))))
	       (SETQ N (CDR N))
	  SKIP (SETQ NN (NOT (EQ N CUT)))
	       (COND ((AND NN (MEMQ (Q SPEC) (CAAR N)))
		      (EVAL (APPEND (GET (CADDAR N) (Q SPEC))
				    (LIST A CUT (Q PARSE))))))
	  DONE (RETURN (COND (P RE) (T (SETQ C
					     (LIST (LIST FE
							 NB
							 N
							 (SETQ H (APPEND RE H))
							 SM))))))))
 EXPR)
(DEFPROP POP
 (LAMBDA (A)
	 (COND ((OR (NULL A) (NULL (CAR A)))
		(COND ((NULL H) NIL)
		      ((SETQ N (CADAR H))
		       (SETQ H (CDR H))
		       (SETQ C (LIST (LIST FE N NB H SM)))
		       (SETQ NN (NOT (EQ N CUT)))
		       (OR SMN
			   (PROG (XX)
				 (MAPC (FUNCTION (LAMBDA (Y)
							 (OR (MEMQ (CAADR Y) N)
							     (SETQ XX
								   (CONS Y
									 XX)))))
				       BACKREF)
				 (SETQ BACKREF XX)))T)))
	       ((EVAL (CONS (Q POPTO) A)) (POP))))
 FEXPR)

(DEFPROP POPTO
	 (LAMBDA (A) (PROG (XX)
			   (SETQ XX H)
		      LOOP (COND ((EVAL (CONS (Q ISQ) (CONS (Q XX) A))))
				 ((SETQ XX (CDR XX)) (GO LOOP))
				 ((MQ POPTO) (RETURN NIL)))
		      EX   (COND ((EQ XX H) (RETURN C)) ((POP) (GO EX)))))
	 FEXPR)

(DEFPROP PRC (LAMBDA (A) (LIST (FROM (CADAR A) (CADDAR A)) (CAAR A))) EXPR)

(DEFPROP PRINT2
	 (LAMBDA (A) (PROG2 (PRINC (COND ((GREATERP CHRCT (FLATSIZE A)) (Q / ))
					 ((Q /
/ / ))))		    (PRINC A)))
	 EXPR)

(DEFPROP PRINT3
	 (LAMBDA (A)
		 (AND (LESSP CHRCT (FLATSIZE A)) (PRINC (Q /
/ / )))		 (PRINC A)
		 (OR (ZEROP CHRCT) (PRINC (Q / ))))
	 EXPR)

(DEFPROP PR1
	 (LAMBDA (A) (COND ((ATOM (H A)) (LIST (CADDAR (NB A)) (FE A)))
			   ((PR2 (SM A))
			    (LIST (FROM (NB A) (N A))
				  (FE A)
				  (SM A)
				  (COND ((ATOM (H A)) (Q /  ))
					((MAPLIST (FUNCTION PR1)
						  (REVERSE (H A)))))))))
	 EXPR)
(DEFPROP PR2
 (LAMBDA (A)
	 (OR (ATOM A)
	     (MAPC (FUNCTION (LAMBDA (B)
				     (AND (GET B (Q SM))
					  (OR (MEMQ B ALIST)
					      (SETQ ALIST
						    (CONS (LIST B
								(GET B (Q SM))
								(GET B
								     (Q REFER)))
							  ALIST))))))
		   A)))
 EXPR)

(DEFPROP PT (LAMBDA (A) (PRC (EVAL (CONS (Q *) A)))) FEXPR)

(DEFPROP PTFIND
	 (LAMBDA (X YY Z) (PROG (FOO)
				(SETQ FOO (CAR X))
			   UP	(COND ((* U) (GO UP)) ((EQ (NB PT) X) (GO ON)))
			   DOWN	(OR (* DL PV (MEMQ FOO (NB PT))) (RETURN NIL))
			   ON	(COND ((NOT (EQ X (NB PT))) (GO DOWN))
				      ((EQ YY T))
				      ((* DF (EQ (N PT) YY)))
				      ((RETURN NIL)))
			   CHECK(COND ((EVAL Z) (RETURN PT))
				      ((NOT (EQ YY T)))
				      ((* DF) (GO CHECK)))))
	 EXPR)

(DEFPROP PTRS (LAMBDA (A) (PROG2 (SETQ PT (CAR A)) (SETQ PTR (CDR A)))) EXPR)

(DEFPROP PTSV (LAMBDA (A) (SET (CAR A) (CONS PT PTR))) FEXPR)

(DEFPROP PUNCL (NIL /. /, ? : ; " !) VALUE)

(DEFUN PUTF(X Y)
(RPLACD A(COND((ATOM B)(CONS B A))
((APPEND B A)))))

(DEFPROP RQ (LAMBDA (A) (SETQ FE (SETDIF FE A))) FEXPR)

(SETQ RUBOUT (INTERN (LIST (CAR NIL) (Q PNAME) (LIST -4000000000))))

(DEFPROP SASS (LAMBDA NIL (Q (NIL NIL))) EXPR)

(DEFPROP SASS2 (LAMBDA NIL (QUOTE (NIL))) EXPR)

(DEFPROP SAY (LAMBDA (A) (MAPC (FUNCTION PRINT3) A)) FEXPR)

(DEFUN SETDIF (A SETDIF) (PROG (SET)
			  GO   (COND ((NULL A) (RETURN (REVERSE SET)))
				     ((MEMQ (CAR A) SETDIF))
				     ((SETQ SET (CONS (CAR A) SET))))
			       (SETQ A (CDR A))
			       (GO GO)))




(DEFPROP SHRDLU
	 (LAMBDA NIL
		 (PROG (END SPEC
			    AMB
			    PC
			    TIMAMB
			    BOTH
			    CUT
			    WHO
			    PT
			    PMARK
			    PTW
			    PTR
			    SENT
			    PUNCT
			    H
			    N
			    NB
			    FE
			    SM
			    PD
			    RE
			    MES
			    MESP
			    UNMKD
			    C
			    CUT
			    CURTIME
			    STATE)
		       (OR SMN (AND DISCOURSE (FORGET)))
		  EX   (SETQ LASTSENT C)
		       (OR SMN (CLEANX (Q AMB)
				       (GET (Q AMB) (Q OLD))
				       (PUTPROP (Q AMB)
						(GET (Q AMB) (Q NEW))
						(Q OLD))))
		       (OR SMN
			   (PUTPROP (Q AMB) (GET (Q AMB) (Q MAKESYM)) (Q NEW)))
		  EX2(SETQ BACKREF NIL)
  (SETQ N (SETQ SENT (ETAOIN)))
		       (PRINT (Q *))
		       (AND WALLP (IOC WR) (%) (IOC VT))
		       (SETQ END (SETQ NOFLAG NIL))
		  FOO  (SETQ PD NIL)
		       (COND ((NULL (SETQ C (ERRSET (PARSE CLAUSE MAJOR)))))
			     ((SETQ PT (SETQ C (CAR C)))
			      (SETQ FE (FE C))
			      (SETQ NB SENT)
			      (SETQ H (H C))
			      (SETQ MES (Q NOPE))
			      (COND (NOFLAG (ANSWER NOFLAG) (SETQ SMN NIL)))
			      (AND SMN (ERTSTOP OK))
			      (AND (EQ (Q ALL) WALLP) (IOC WR) (WALLP C))
			      (IOC VT)
			      (GO EX))
			     (NOFLAG (SETQ SMN (SETQ N SENT)) (GO FOO)))
(COND(NOFLAG(PRINT NOFLAG))
(			     (SAY /
*I DON/'T UNDERSTAND)))
(OR NOSTOP(ERT))(GO EX2)))
	 EXPR)

(DEFPROP STA
	 (LAMBDA (A B) (PROG NIL GO (COND ((NULL B) (RETURN T))
					  ((NULL A))
					  ((EQ (CAR A) (CAR B)) (SETQ A (CDR A))
								(SETQ B (CDR B))
								(GO GO)))))
	 EXPR)

(DEFUN TIMER()(PRINT(RUNTIME)))

(DEFUN TRNSF FEXPR (A) (SETQ FE (UNION (MEET A (CAAR PT)) FE)))

(DEFPROP UNDEFINED
	 (LAMBDA NIL (PROG2 (PRINC (CADDAR N)) (ERTSTOP UNDEFINED)))
	 EXPR)

(DEFUN UNION (A B) (PROG (SET)
			 (SETQ SET (REVERSE A))
		    GO	 (COND ((NULL B) (RETURN (REVERSE SET)))
			       ((MEMQ (CAR B) SET))
			       ((SETQ SET (CONS (CAR B) SET))))
			 (SETQ B (CDR B))
			 (GO GO)))


(DEFPROP VOWEL (NIL A E I O U Y) VALUE)

(DEFPROP WALLP
	 (LAMBDA (A) (PROG (ALIST LINEL)
			   (SETQ LINEL WPLINEL)
			   (AND (STATUS TTY) (TYO 14))
			   (TERPRI)
			   (SPRINT (LIST (PR1 A) (REVERSE ALIST)) LINEL 0)))
	 EXPR)



(DEFPROP %
	 (LAMBDA NIL
		 (PRINT (Q *))
		 (MAPC (FUNCTION (LAMBDA (X) (PRINC (Q / )) (PRINC (CADDR X))))
		       SENT)
		 (PRINC PUNCT)
		 (PRINT (Q *)))
	 EXPR)


(DEFPROP *
	 (LAMBDA (L)
		 (PROG (XX YY L2 EXEC SAVE)
		       (SETQ EXEC L)
		       (PTSV SAVE)
		  TEST1(COND ((AND (CDR EXEC) (NOT (ATOM (CADR EXEC))))
			      (GO TEST)))
		  LOOK1(SETQ XX (CAR EXEC))
		  LOOK (COND ((EQ XX (Q H)) (OR (*H*) (GO FAIL)) (GO EX))
			     ((EQ XX (Q C)) (SETQ PT C)
					    (SETQ PMARK NIL)
					    (GO EX))
			     ((EQ XX (Q PC)) (SETQ PT PC)
					     (SETQ PMARK NIL)
					     (GO EX))
			     ((EQ XX (Q LASTSENT)) (SETQ PT LASTSENT)
						   (SETQ PMARK NIL)
						   (GO EX))
			     ((EQ XX (Q U)) (OR (*U*) (GO FAIL)))
			     ((EQ XX (Q DL)) (OR (*DL*) (GO LOOK)))
			     ((EQ XX (Q DLC)) (OR (*DLC*) (GO FAIL))
					      (SETQ PMARK NIL))
			     ((EQ XX (Q DF))
			      (SETQ L2 (CONS (Q DL) (CONS (Q FR) L2)))
			      (SETQ XX (Q DL))
			      (GO LOOK))
			     ((EQ XX (Q FR)) (COND ((* PV) (GO LOOK))))
			     ((EQ XX (Q NX))
			      (COND ((OR PMARK
					 (EQ (CAR PTR) (Q V))
					 (EQ PT PC)
					 (EQ PT C)
					 (EQ PT LASTSENT))
				     (GO FAIL))
				    ((EQ (CAR PTR) (Q PV))
				     (SETQ L2 (CONS (Q U) (CONS (Q DL) L2)))
				     (SETQ XX (Q U))
				     (GO LOOK))
				    ((SETQ PT (CAR PTR)) (SETQ PTR (CDR PTR)))))
			     ((EQ XX (Q PV))
			      (COND ((OR (EQ PT C) PMARK)
				     (SETQ L2 (CONS (Q U) (CONS (Q DLC) L2)))
				     (SETQ XX (Q U))
				     (GO LOOK))
				    ((AND PT (CDR PT)) (SETQ PTR (CONS PT PTR))
						       (SETQ PT (CDR PT)))
				    ((GO FAIL))))
			     ((ERTSTOP * ILLEGAL INSTRUCTION)))
		  EX   (COND ((OR (NULL L2) (NULL (SETQ L2 (CDR L2))))
			      (GO TEST)))
		       (SETQ XX (CAR L2))
		       (GO LOOK)
		  TEST (COND ((NULL (CDR EXEC)) (RETURN PT))
			     ((ATOM (CADR EXEC)) T)
			     ((COND ((CDADR EXEC) (EVAL (CADR EXEC)))
				    (T (ISX PT (CAADR EXEC))))
			      (SETQ EXEC (CDR EXEC)))
			     (T (GO LOOK1)))
		       (COND ((SETQ EXEC (CDR EXEC)) (GO TEST1)))
		       (RETURN PT)
		  FAIL (PTRS SAVE)
		       (RETURN NIL)))
	 FEXPR)

(DEFPROP **
	 (LAMBDA (L)
		 (PROG (EXEC SAVE XX)
		       (SETQ SAVE PTW)
		       (SETQ EXEC L)
		  TEST1(COND ((AND (CDR EXEC) (NOT (ATOM (CADR EXEC))))
			      (GO EX)))
		  LOOK1(SETQ XX (CAR EXEC))
		  LOOK (COND ((EQ XX (Q N)) (SETQ PTW N))
			     ((EQ XX (Q LASTSENT)) (SETQ PTW (NB LASTSENT)))
			     ((EQ XX (Q FW)) (SETQ PTW (CADAR PT)))
			     ((EQ XX (Q AW))
			      (COND ((OR PMARK (EQ PT C)) (GO FAIL))
				    ((SETQ PTW (CADDAR PT)) (SETQ XX (Q PW))
							    (GO LOOK))))
			     ((EQ XX (Q LW))
			      (COND ((OR PMARK (EQ PT C)) (GO FAIL))
				    ((SETQ PTW (CADDAR PT)) (SETQ XX (Q PW))
							    (GO LOOK))))
			     ((EQ XX (Q NW))
			      (COND ((SETQ PTW (CDR PTW)))
				    ((SETQ PTW (FINDB SENT NIL)) (GO FAIL))))
			     ((EQ XX (Q PW)) (COND ((SETQ PTW (FINDB SENT PTW)))
						   ((SETQ PTW SENT) (GO FAIL))))
			     ((EQ XX (Q SFW)) (SETQ PTW SENT))
			     ((EQ XX (Q SLW)) (SETQ PTW (FINDB SENT NIL)))
			     ((ERTSTOP ** ILLEGAL INSTRUCTION)))
		  EX   (COND ((NULL (CDR EXEC)) (RETURN PTW))
			     ((ATOM (CADR EXEC)) T)
			     ((COND ((CDADR EXEC) (EVAL (CADR EXEC)))
				    (T (ISX PTW (CAADR EXEC))))
			      (SETQ EXEC (CDR EXEC)))
			     (T (GO LOOK1)))
		       (COND ((SETQ EXEC (CDR EXEC)) (GO TEST1)))
		       (RETURN PTW)
		  FAIL (SETQ PTW SAVE)
		       (RETURN NIL)))
	 FEXPR)

(DEFUN *H*
       NIL
       (COND (H (SETQ PTR (LIST (Q V) C)) (SETQ PT H) (SETQ PMARK NIL) T)))
(DEFUN *U*
       NIL
       (COND ((OR (EQ PT PC) (EQ PT LASTSENT)) NIL)
	     ((EQ PT C) (AND PD (PROG2 (SETQ PMARK T) T (SETQ PT PD))))
	     (PMARK (COND ((NULL (CDR PT)) NIL)
			  ((SETQ PTR (CONS PT PTR)) (SETQ PT (CDR PT)) T)))
	     (T (PROG NIL
		 SS   (COND ((EQ (CAR PTR) (Q VP)) (SETQ PMARK T))
			    ((NOT (EQ (CAR PTR) (Q V))) (GO SSS)))
		      (SETQ PT (CADR PTR))
		      (SETQ PTR (CDDR PTR))
		      (RETURN T)
		 SSS  (COND ((SETQ PTR (CDR PTR)) (GO SS)) ((ERTSTOP PVP)))))))

(DEFUN *DL* NIL (COND ((OR (EQ PT C) (NULL PMARK)) (SETQ XX (Q DLC)) NIL)
			((EQ PT PD) (SETQ PT C) (SETQ PTR (SETQ PMARK NIL)) T)
			((SETQ PT (CAR PTR)) (SETQ PTR (CDR PTR)) T)))

(DEFUN *DLC*
       NIL
       (COND ((EQ PT C) (COND (H (SETQ PTR (LIST (Q V) C)) (SETQ PT H) T)))
	     ((EQ (CADDDR (CAR PT)) (Q WORD)) NIL)
	     ((NULL (CADDDR (CAR PT))) NIL)
	     ((SETQ PTR (CONS (COND (PMARK (Q PV)) (T (Q V))) (CONS PT PTR)))
	      (SETQ PT (CADDDR (CAR PT))))))


(SETQ NOMEM(SETQ PLANNERSEE(SETQ NOFLAG (SETQ SMN T))))
(SETQ LASTIME
(SETQ PARSETRACE
      (SETQ PARSEBREAK
	    (SETQ NOSTOP (SETQ WALLP (SETQ DISCOURSE (SETQ IASSUME NIL)))))))

(SETQ LASTSENTNO 0)

(SETQ WPLINEL 55)
(SETQ SAVESENT NIL)
(DEFLIST ELIM
	 (ADV (ADV PREPADV TIMW TIM2 ADVADV VBAD PLACE LOBJ))
	 (DET (DET NPL NS PART DEF INDEF NEG DEM INCOM OFD QNTFR NONUM QDET))
	 (ADJ (ADJ SUP COMPAR))
	 (NOUN (NOUN POSS MASS NPL NS TIM1 TIME MONTH))
	 (NUM (NUM NPL NS))
	 (NUMD (NUMD NUMDAN NUMDAT NUMDALONE))
	 (PREP (PREP MOTOR PLACE NEED2))
	 (PRON (PRON POSS SUBJ OBJ NS NPL NFS NEG DEFPOSS REL))
	 (PROPN (PROPN POSS NS NPL))
	 (VB (VB MVB
		 AUX
		 QAUX
		 MODAL
		 WILL
		 BE
		 DO
		 HAVE
		 ING
		 EN
		 INF
		 V3PS
		 VFS
		 VPL
		 PAST
		 PRES
		 NEG
		 ITRNS
		 TRANS
		 TRANSL
		 TRANS2
		 TRANSL2
		 INT
		 ITRNSL
		 INGOB
		 TOOB
		 SUBTOB
		 REPOB
		 INGOB2
		 TOOB2
		 SUBTOB2
		 REPOB2
		 VPRT
		 TO2))
	 (BINDER (BINDER))
	 (CLASF (CLASF))
	 (POSS (NOUN NPL NS MASS NFS PRON))
	 (ORD (ORD TIMORD))
	 (PREP2 (PREP2))
	 (PRONREL (NPL NS PRONREL))
	 (PRT (PRT))
	 (QADJ (PLACE QADJ))
	 (TPRON (TPRON NS NPL NEG)))
(DEFLIST MOD
	 (G ((ING) (INF)))
	 (D ((PAST EN) (INF MODAL AUX)))
	 (R ((COMPAR) NIL))
	 (T ((SUP) NIL))
	 (N ((EN) (INF)))
	 (S ((PRES V3PS NPL) (NS INF MODAL AUX MASS)))
	 (* ((NEG) NIL)))
(DEFUN SASSQ(X Y Z)(OR(ASSQ X Y)(APPLY Z NIL)))


(PUTPROP (QUOTE Q) (GET (QUOTE QUOTE) (QUOTE FSUBR)) (QUOTE FSUBR))

(PUTPROP (Q FE) (GET (Q CAAR) (Q SUBR)) (Q SUBR))

(PUTPROP (Q NB) (GET (Q CADAR) (Q SUBR)) (Q SUBR))

(PUTPROP (Q N) (GET (Q CADDAR) (Q SUBR)) (Q SUBR))

(DEFPROP H (LAMBDA (A) (CADDDR (CAR A))) EXPR)

(DEFPROP SM (LAMBDA (A) (CADDDR (CDAR A))) EXPR)

(DEFPROP CQ (LAMBDA (A) (MEMQ (CAR A) FE)) FEXPR)

