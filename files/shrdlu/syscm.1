



;;;############################################################
;;;
;;;                         SYSCOM
;;;
;;;############################################################

(DEFUN NTH(NUM LIST)
(COND((ATOM LIST)(ERT NTH - ILLEGAL LIST))
((LESSP NUM 1)(ERT NTH - ILLEGAL NUMBER)))
(PROG()UP(COND((EQUAL NUM 1)(RETURN (CAR LIST)))
((SETQ LIST(CDR LIST))(SETQ NUM(SUB1 NUM))(GO UP))
(T(ERT NTH - LIST TOO SHORT)))))


(DEFUN PRINT2(X)(PRINC '/ )(PRINC X))

(DEFUN QUOTIFY (X) (COND ((MEMQ X (QUOTE (T NIL))) X)
			 ((LIST (QUOTE QUOTE) X))))
(DEFUN PARSEVAL (A) (EVAL (CONS 'PARSE A)))
(SETQ GP-DUMP NIL)

(DEFUN SHRDLU NIL 
       (PROG (END AMB TIMAMB BOTH BACKREF BACKREF2 ANSNAME LASTREL 
		 WHO PT PTW SENT PUNCT IGNORE H N NB
	      FE SM RE MES MESP C CUT CURTIME STATE GLOBAL-MESSAGE) 
	     (CLEANOUT TSS EVX  NODE ANS  OSS RSS X)				       ;FLUSH OLD GENSYMS
	     (COND (FIRSTSW (SW)  
(COND ((NOT WANT-DISPLAY) (NO340)))
 (COND (GP-DUMP (DISINI '1) (MAPC 'DISGOBBLE GP-DUMP) (SUMMARIZE-SCENE) )
( T 
(SETQ PH-TURN-ON NIL
  GP-LINES NIL
  GP-SURFACE NIL
  GP-HANDIT NIL
  GP-NEWOBLOCAT NIL  
  PH-BLOCKS NIL)
 (GP-INITIAL)))
(SETQ FIRSTSW NIL)))		       ;DO THE SWITCH SETTING ROUTINE FIRST TIME AFTER
								       ;NEW CORE IMAGE (FIRSTSW = T FROM GLOBAL)
                                ;ALSO START UP THE DISPLAY PACKAGE
	     (OR SMN (AND DISCOURSE (FORGET)))
	LOOP (SETQ SENTNO (ADD1 SENTNO))
		(SETQ LASTSENTNO (ADD1 LASTSENTNO))
		(SETQ LASTSENT C)
	     (SETQ GLOBAL-MESSAGE NIL)
	     (CLEANUP ANS AMB NODE OSS RSS X)			       ;REMOVE OLD GENSYMS
	     (SETQ BACKREF NIL)
 UP  (SETQ RUNTIME (RUNTIME))
 	     (SETQ N (SETQ SENT (ETAOIN)))			       ;SEND OUT READY MESSAGE AND TAKE IN ONE SENTENCE
	     (PRINT *1)						       ;OF INPUT
						       ;THIS IS PART OF A MECHANISM FOR READING MASSIVE
								       ;LISTS OF SENTENCES AUTOMATICLY OFF OF DSK
								       ;FILES. BEFORE CALLING (SHRDLU) YOU OPEN THE
								       ;SENTENCE FILE FOR READING WHEN ETAOIN SAYS
								       ;"READY/" YOU TYPE CONTROL-Q WHICH ALOWS ETAOIN
								       ;TO READ IN ONE SENTENCE. THE (IOC S) HERE TURNS
								       ;OFF THE READIN SWITCH SO THAT FURTHER INPUT
								       ;COMES FROM THE TTY, AND YOU RETYPE CTRL-Q AT
								       ;THE NEXT "READY/"

(AND ^Q (%))
(IOC S)
(AND IGNORE (GO UP))
	     ;;;
	     (SETQ C (SETQ MES NIL))				       ;REINITIALIZE
	     (COND ((AND((COND(NOSTOP 'ERRSET)('LIST))(SETQ PT (SETQ C (PARSEVAL PARSEARGS))))C)
		    (SETQ FE (FE C))
		    (SETQ NB SENT)
		    (SETQ H (H C))
		    (SETQ MES 'NOPE)
		    (SETQ INTERPRETATION (SM C))
		    (COND (SMN (TIMER)(ERT PARSING COMPLETED) (GO LOOP))
     ((NOT ANSWER?)(TIMER)(ERT ANALYSIS COMPLETED))
   (((COND(NOSTOP 'ERRSET)('LIST))(ANSWER C))(TIMER)(ERT ))
    ((APPLY 'SAY (OR GLOBAL-MESSAGE '(I DON/'T UNDERSTAND/.)))
     (TIMER)(ERT))))
    ((APPLY 'SAY (OR GLOBAL-MESSAGE '(I DON/'T UNDERSTAND/.)))
     (TIMER)(ERT)))
	     (GO LOOP)))



(DEFUN TIMER()
(PRINT 'TIME-USED)
(PRINC(QUOTIENT (DIFFERENCE (RUNTIME) RUNTIME) 1000000.0)))


(DEFUN INTEROGATE (MESSAGE) 
       (PROG (CH) 
	MES  (PRINT MESSAGE)
	     (COND ((EQ (SETQ CH (READCH)) 'Y) (RETURN T))
		   ((EQ CH '?)
		    (EVAL (GET 'FLUSH 'EXPLANATION))
		    (GO MES))
		   (T (RETURN NIL)))))




(DEFUN ETAOIN NIL 
 (PROG (WORD NEWWORD CHAR OPENQUOTE WRD LAST NEXT Y WORD1 X RD POSS) 
  THRU (SETQ QPENQUOTE NIL)
       (SETQ SENT (SETQ WORD (SETQ PUNCT (SETQ POSS NIL))))
       (PRINT 'READY)
       (TERPRI)
  CHAR (COND ((EQ (SETQ CHAR (READCH)) '/ ) (GO WORD))		       ;DELIMITER
	     ((EQ CHAR ')
	      (COND ((EQ (SETQ CHAR (READCH)) ') (ERTSTOP)
						  (GO THRU))	       ;ALTMODE-ALTMODE
		    ((EQ CHAR 'C) (TYO 12.) (GO DO))		       ;ALTMODE-C
		    ((EQ CHAR 'R) (TERPRI) (GO DO))		       ;ALTMODE-R
		    ((AND (EQ CHAR 'S) SAVESENT)		       ;ALTMODE-S CAUSES THE LAST SENTENCE TYPED IN TO
		     (SETQ SENT (CAR SAVESENT))			       ;RETURNED AS THE SENTENCE TO BE INTERPRETED
		     (SETQ PUNCT (CDR SAVESENT))
		     (%)
		     (RETURN SENT))
((EQ CHAR 'N)(SETQ NEWWORD(NOT NEWWORD))(GO CHAR));ALTMODE-N COMPLEMENTS THE NEWWORD FLAG, WHICH
;DETERMINES WHETHER UNRECOGNIZED WORDS WILL BE CONSIDERED
;SPELLING ERRORS OR NEW WORDS.
((EQ CHAR 'Q)(IOC Q)(SETQ IGNORE NIL)(GO THRU))
;ALTMODE-Q CAUSES READIN FROM DISK FILE.
((EQ CHAR 'I)(SETQ IGNORE T)(IOC Q)(GO THRU));ALTMODE-I IGNORES
;SENTENCE READ FROM FILE.
		    ((GO THRU))))
	     ((EQ CHAR RUBOUT)
	      (COND (WORD (PRINC (CAR WORD)) (SETQ WORD (CDR WORD)))
		    (SENT (PRINT (CAR SENT)) (SETQ SENT (CDR SENT))))
	      (GO CHAR))
	     ((EQ CHAR CARRET) (GO WORD))
	     ((MEMQ CHAR PUNCL) (SETQ PUNCT CHAR)		       ;DELIMITER
				(AND WORD (GO WORD))
				(GO PUNC)))
       (AND (OR (AND (EQ CHAR '/') (SETQ CHAR '"))		       ;WITHIN THIS "AND" ARE ALL THE CHARACTERS THAT
		(NUMBERP CHAR)					       ;ARE UNDERSTOOD BY THE SYSTEM
		(AND (EQ CHAR '=) (NULL WORD))
		(MEMQ CHAR VOWEL)
		(MEMQ CHAR CONSO))
	    (SETQ WORD (CONS CHAR WORD)))
       (GO CHAR)
  DO   (PRINT 'READY)
       (TERPRI)
       (MAPC (FUNCTION (LAMBDA (X) (PRINT2 X))) (REVERSE SENT))
       (PRINC '/ )
       (MAPC (FUNCTION PRINC) (REVERSE WORD))
       (GO CHAR)
  WORD (COND ((NULL WORD) (GO CHAR))
	     ((AND (SETQ WRD (ERRSET (READLIST (REVERSE WORD))))
		   (NUMBERP (SETQ WRD (CAR WRD))))
	      (SETQ SENT (CONS WRD SENT))
	      (BUILDWORD WRD
			 (OR (AND (ZEROP (SUB1 WRD)) '(NUM NS))
			     '(NUM))
			 (LIST 'NUM WRD)
			 NIL))					       ;NO ROOT FOR NUMBERS
	     ((NULL WRD) (SETQ WRD (REVERSE WORD)) (GO NO))
	     ((GET WRD 'FEATURES))				       ;IF A WORD HAS FEATURES, IT'S PROPERTIES 
	     ((SETQ X (GET WRD 'IRREGULAR))			       ;ARE ALL SET UP IN THE DICTIONARY
	      (BUILDWORD WRD (MOD (FE X) (CDR X)) (SM X) (CAR X)))
	     ((EQ (CAR (LAST WORD)) '=)
	      (BUILDWORD WRD
			 (COND ((MEMQ '" WORD)
				'(PROPN NS POSS))
			       ('(PROPN NS)))
			 '((PROPN T))
			 NIL))
	     ((GO CUT)))
       (GO WRD)

       ;;;---------------------------------------------
       ;;;              MORPHOLOGY CODE
       ;;;--------------------------------------------
       
  CUT  (COND ((STA WORD '(T " N))
	      (SETQ RD (CDDDR WORD))
	      (SETQ WORD (CONS '* WORD))
	      (GO TRY))
	     ((STA WORD '(S ")) (SETQ WORD (CDDR WORD))
				(SETQ POSS WRD)
				(GO WORD))
	     ((STA WORD '(")) (SETQ WORD (CDR WORD))
			      (SETQ POSS WRD)
			      (GO WORD))
	     ((STA WORD '(Y L)) (SETQ RD (CDDR WORD)) (GO LY))
	     ((STA WORD '(G N I)) (SETQ RD (CDDDR WORD)))
	     ((STA WORD '(D E)) (SETQ RD (CDDR WORD)))
	     ((STA WORD '(N E)) (SETQ RD (CDDR WORD)))
	     ((STA WORD '(R E)) (SETQ RD (CDDR WORD)))
	     ((STA WORD '(T S E)) (SETQ RD (CDDDR WORD)))
	     ((STA WORD '(S)) (SETQ RD (CDR WORD)) (GO SIB))
	     (T (GO NO)))
       (SETQ LAST (CAR RD))
       (SETQ NEXT (CADR RD))
       (COND ((AND (MEMQ LAST CONSO)
		   (NOT (MEMQ LAST LIQUID))
		   (EQ LAST NEXT))
	      (SETQ RD (CDR RD)))
	     ((EQ LAST 'I) (SETQ RD (CONS 'Y (CDR RD))))
	     ((OR (AND (MEMQ LAST CONSO)
		       (MEMQ NEXT VOWEL)
		       (NOT (EQ NEXT 'E))
		       (MEMQ (CADDR RD) CONSO))
		  (AND (MEMQ LAST LIQUID)
		       (MEMQ NEXT CONSO)
		       (NOT (MEMQ NEXT LIQUID)))
		  (AND (EQ LAST 'H) (EQ NEXT 'T))
		  (AND (MEMQ LAST '(C G S J V Z))
		       (OR (MEMQ NEXT LIQUID)
			   (AND (MEMQ NEXT VOWEL)
				(MEMQ (CADDR RD) VOWEL)))))
	      (SETQ RD (CONS 'E RD))))
       (GO TRY)
  LY   (COND ((AND (MEMQ (CAR RD) VOWEL)
		   (NOT (EQ (CAR RD) 'E))
		   (MEMQ (CADR RD) CONSO))
	      (SETQ RD (CONS 'E RD))))
       (COND ((MEMQ 'ADJ
		    (GET (SETQ ROOT (READLIST (REVERSE RD)))
			 'FEATURES))
	      (BUILDWORD WRD
			 '(ADV VBAD)
			 NIL					       ;TEMP NIL SEMANTICS
			 ROOT)					       ;ROOT IS THE ADJECTIVE
	      (GO WRD)))
       (GO NO)
  SIB  (SETQ LAST (CAR RD))
       (SETQ NEXT (CADR RD))
       (COND ((NOT (EQ LAST 'E)))
	     ((EQ NEXT 'I)
	      (SETQ RD (CONS 'Y (CDDR RD))))
	     ((EQ NEXT 'X) (SETQ RD (CDR RD)))
	     ((AND (EQ NEXT 'H)
		   (NOT (EQ (CADDR RD) 'T)))
	      (SETQ RD (CDR RD)))
	     ((AND (MEMQ NEXT '(S Z)) (EQ NEXT (CADDR RD)))
	      (SETQ RD (CDDR RD))))
  TRY  (COND ((OR (SETQ FEATURES
			(GET (SETQ ROOT (READLIST (REVERSE RD)))
			     'FEATURES))
		  (AND (SETQ X (GET ROOT 'IRREGULAR))
		       (SETQ FEATURES (MOD (GET (SETQ ROOT (CAR X))
						'FEATURES)
					   (CDR X)))))
	      (BUILDWORD WRD
			 (MOD FEATURES (GET (CAR WORD) 'MOD))
			 (GET ROOT 'SEMANTICS)
			 ROOT))
	     ((EQ (CAR RD) 'E) (SETQ RD (CDR RD)) (GO TRY))
	     ((GO NO)))

       ;;;----------------------------------------------------
       ;;;  BUILD UP THE PROCESSED LIST OF WORDS TO BE RETURNED
       ;;;----------------------------------------------------
       
  WRD  (SETQ SENT
	     (COND (POSS (COND ((OR (MEMQ 'NOUN
					  (SETQ FEATURES
						(GET WRD 'FEATURES)))  ;IF IT'S A NOUN
				    (MEMQ 'PROPN FEATURES))	       ;OR A PROPER NOUN
				(BUILDWORD POSS
					   (APPEND (MEET FEATURES      ;MARK IT AS POSSESSIVE 
							 (GET 'POSS
							      'ELIM))
						   '(POSS))
					   (GET WRD 'SEMANTICS)
					   ROOT)
				(CONS POSS SENT))
			       ((BUILDWORD '"S			       ; CAN WE GENERALIZE IT???
					   '(VB BE V3PS PRES)
					   (GET 'BE 'SEMANTICS)
					   'BE)
				(CONS '"S (CONS WRD SENT)))))
		   ((CONS WRD SENT))))
  PUNC (COND (PUNCT (COND ((EQ PUNCT '")
			   (SETQ OPENQUOTE (NULL OPENQUOTE))
			   (SETQ SENT (CONS '" SENT)))
			  ((AND (NULL OPENQUOTE) (MEMQ PUNCT FINAL))
			   (RETURN (CAR (SETQ SAVESENT
					      (CONS (REVERSE SENT)     ;RETURN POINT !!!!!!!!!!!!!
						    PUNCT)))))
			  ((SETQ SENT (CONS PUNCT SENT))))))
       (SETQ PUNCT NIL)
       (SETQ WORD (SETQ POSS NIL))
       (GO CHAR)
  NO   (COND(NEWWORD(BUILDWORD WRD '(NOUN NS PROPN) 
'((NOUN(SMNEWNOUN))(PROPN(SMNEWPROPN))) WRD)(GO PUNC)))
(TERPRI)
       (SAY *SORRY/, I DON/'T KNOW THE WORD ")
       (PRINC WRD)
       (PRINC '/ "/.)
       (TERPRI)
       (SAY PLEASE TYPE TWO SPACES/.)
  NOGO (COND ((EQ CHAR ') (READCH) (ERTSTOP) (GO DO)))		       ;CONVENIENT BREAK POINT IF DESIRED
       (OR (EQ (SETQ CHAR (READCH)) '/ ) (GO NOGO))
       (OR (EQ (SETQ CHAR (READCH)) '/ ) (GO NOGO))
       (GO DO)))

(DEFUN % NIL 							       ;THIS FUNCTION PRINTS THE CURRENT SENTENCE
       (PRINT *2)
       (MAPC 'PRINT3
	     SENT)
       (PRINC PUNCT)
       (PRINT *3))

(DEFUN BCWL FEXPR (A) 						       ;DEFINES COMBINATIONS OF WORDS
 (MAPC 
  '(LAMBDA (X) 
    (MAPC 
     '(LAMBDA (Y) 
       (BUILDWORD (INTERN (MAKNAM (NCONC (EXPLODE (CAR X))
					 (CONS '-
					       (EXPLODE (CAR Y))))))
		  (CONS 'COMBINATION (CADR Y))
		  (CADDR Y)
		  (LIST (CAR X) (CAR Y))))
     (CDR X)))
  A)
 T)

(DEFUN BUILDWORD (WORD FEATURES SEMANTICS ROOT) 
       (PUTPROP WORD FEATURES 'FEATURES)
       (PUTPROP WORD (OR SMN SEMANTICS) 'SEMANTICS)
       (AND ROOT (PUTPROP WORD ROOT 'ROOT))
       WORD)

(DEFUN BUILDWORDLIST FEXPR (A) 					       ;DEFINES WORDS
       (MAPC '(LAMBDA (X) 					       ;ROOT IS OPTIONAL
		      (PRINT (BUILDWORD (CAR X)
					(CADR X)
					(CADDR X)
					(AND (CDDDR X) (CADDDR X)))))
	     A))

(SETQ CARRET '/
)

(DEFUN CLEANOUT FEXPR (LIST) 					       ;REMOB'S ALL GENSYMS OF THE MEMBERS OF LIST
       (MAPC (FUNCTION (LAMBDA (A) 
			       (CLEANX A 0. (GET A 'MAKESYM))
			       (PUTPROP A 0. 'MAKESYM)))
	     LIST))


(DEFUN CLEANUP FEXPR (SYMBOL-LIST) 

       ;;CLEANUP IS USED TO GET RID OF GENSYMS NO LONGER NEEDED ALL
       ;;GENSYMS FROM THE NUMBER "OLD" TO THE NUMBER "NEW" ARE
       ;;REMOB'ED THE "OLD" AND "NEW" PROPERTIES ARE UPDATED
       (MAPC '(LAMBDA (SYMBOL) 
		      (CLEANX SYMBOL
			      (GET SYMBOL 'OLD)
			      (PUTPROP SYMBOL
				       (GET SYMBOL 'NEW)
				       'OLD))
		      (PUTPROP SYMBOL
			       (GET SYMBOL 'MAKESYM)
			       'NEW))
	     SYMBOL-LIST))

(DEFUN CLEANX (A B C) 

       ;; CLEANX REMOB'S GENSYMS OF THE SYMBOL "A" FROM B+1 UP TO AND
       ;;INCLUDING C
       (PROG (SAVE I) 
	     (SETQ B (OR B 0.))
	     (SETQ SAVE (GET A 'MAKESYM))
	     (AND C
		  (GREATERP C B)
		  (PUTPROP A B 'MAKESYM)
		  (DO I
		      B
		      (ADD1 I)
		      (EQUAL I C)
		      (EVAL (LIST 'REMOB (MAKESYM A)))))
	     (RETURN (PUTPROP A SAVE 'MAKESYM))))

(DEFUN COMBINATION? FEXPR (WORDS) 

       ;;THIS FUNCTION CHECKS TO SEE IF THE WORDS PASSED AS ARGS FORM
       ;;A COMBINATION SUCH AS "STACK-UP" OR "ON-TOP-OF" COMBINATIONS
       ;;ARE IN THE DICTIONARY AS A SINGLE ATOM COMPOSED OF THE WORDS
       ;;IN THE COMBINATION SEPARATED BY DASHES ALL COMBINATIONS HAVE
       ;;THE FEATURE "COMBINATION" AND HAVE A ROOT WHICH IS A LIST OF
       ;;THE WORDS IN THE COMBINATION
       (PROG (COMBINE) 
	     (MAPC '(LAMBDA (X) 
			    (SETQ COMBINE
				  (NCONC COMBINE
					 (CONS '-
					       (EXPLODE (EVAL X))))))
		   WORDS)
	     (SETQ COMBINE (LIST (INTERN (MAKNAM (CDR COMBINE)))))
	     (AND (ISQ COMBINE COMBINATION) (RETURN COMBINE))
	     (RETURN NIL)))

(SETQ CONSO '(B C D F G H J K L M N P Q R S T V W X Z))

(DEFPROP DEFLIST
	 (LAMBDA (LIST) (MAPC (FUNCTION (LAMBDA (A) 
						(PUTPROP (CAR A)
							 (CADR A)
							 (CAR LIST))))
			      (CDR LIST))
			(CAR LIST))
	 FEXPR)

(DEFPROP DISP
	 (LAMBDA (/0A) 
		 (AND (STATUS TTY) (TYO 12.))
		 (TERPRI)
		 (AND (CDR /0A)
		      (PRINC (CAR /0A))
		      (PRINC '/ >>/ )
		      (PRINC (CADR /0A))
		      (TERPRI))
		 (SPRINT (COND ((CDR /0A) (GET (CAR /0A) (CADR /0A)))
			       ((EVAL (CAR /0A))))
			 LINEL
			 0.)
		 *4)
	 FEXPR)

(DEFUN FEXPR DSAY (L) (APPLY 'SAY L))

(DEFUN ERT FEXPR(/,ERT)(ERTEX /,ERT NIL))

(DEFUN ERTERR FEXPR (/,ERT) (ERTEX /,ERT T))

(DEFUN BUG FEXPR (/,ERT) (ERTEX (CONS 'BUG!!!!!!!!!! /,ERT) T))






(DEFUN ERTSTOP  FEXPR(/,ERT)
(PROG(/,BAR /,FOO)
(PROG(NOSTOP);ALL THIS NONSENSE IS TO ALLOW
;THE GLOBAL VARIABLE NOSTOP TO BE SET FROM WITHIN AN ERTSTOP.

(SETQ NOSTOP '/,NOSTOP)
(SETQ /,BAR(ERTEX /,ERT NIL))
(SETQ /,FOO NOSTOP))
(OR(EQ /,FOO '/,NOSTOP)(SETQ NOSTOP /,FOO))
(RETURN /,BAR)))



(DEFUN GLOBAL-ERR (X)

(ERTEX (SETQ GLOBAL-MESSAGE X) T))

(DEFUN ETNEW NIL (AND (EQ (CAR WORD) '")
		      (EQ (CAR (LAST WORD)) '")
		      (SETQ WRD (READLIST (CDR (REVERSE (CDR WORD)))))
		      (BUILDWORD WRD
				 '(NOUN NS)
				 '((NOUN (NEWWORD)))
				 NIL)))



(SETQ FINAL' (/. ? !))

(DEFPROP FINDB
	 (LAMBDA (X Y) (COND ((NULL X) NIL)
			     ((EQ Y (CDR X)) X)
			     (T (FINDB (CDR X) Y))))
	 EXPR)

(DEFPROP FROM
	 (LAMBDA (A B) (COND ((OR (NOT A) (EQ A B)) NIL)
			     (T (CONS (WORD A) (FROM (CDR A) B)))))
	 EXPR)

(SETQ LIQUID '(L R S Z V))

(DEFUN MAKESYM (A) 

       ;; FUNCTION MAKESYM MAKES UP A GENSYM OF ITS ARG
       (PUTPROP A (ADD1 (OR (GET A 'MAKESYM) 0.)) 'MAKESYM)
       (SETQ A (MAKNAM (APPEND (OR (GET A 'EXPLO)
				   (PUTPROP A (EXPLODE A) 'EXPLO))
			       (EXPLODE (GET A 'MAKESYM)))))
       (COND (MAKEINTERN (INTERN A)) (A)))

(DEFUN MEET (A MEET) 

		     ;; MEET RETURNS THE INTERSECTION OF 2 LISTS
		     ;;TREATED AS SETS
		     (PROG (SET) 
		      GO   (COND ((NULL A) (RETURN (REVERSE SET)))
				 ((MEMQ (CAR A) MEET)
				  (SETQ SET (CONS (CAR A) SET))))
			   (SETQ A (CDR A))
			   (GO GO)))

(DEFPROP MOD (LAMBDA (A B) (UNION (SETDIF A (CADR B)) (CAR B))) EXPR)

(DEFPROP PR1
	 (LAMBDA (A) 
		 (COND ((ATOM (H A)) (LIST (WORD (NB A)) (FE A)))
		       ((PR2 (SM A))
			(LIST (FROM (NB A) (N A))
			      (FE A)
			      (SM A)
			      (COND ((ATOM (H A)) '/ )
				    ((MAPLIST (FUNCTION PR1)
					      (REVERSE (H A)))))))))
	 EXPR)

(DEFPROP
 PR2
 (LAMBDA (A) 
  (OR (ATOM A)
      (MAPC 
       (FUNCTION (LAMBDA (B) 
			 (AND (GET B 'SM)
			      (OR (MEMQ B ALIST)
				  (SETQ ALIST
					(CONS (LIST B
						    (GET B 'SM)
						    (GET B 'REFER))
					      ALIST))))))
       A)))
 EXPR)

(DEFPROP PRINT2
	 (LAMBDA (A) 
		 (PROG2 (PRINC (COND ((GREATERP CHRCT (FLATSIZE A))
				      '/ )
				     ('/
/ / )))			(PRINC A)))
	 EXPR)

(DEFPROP PRINT3
	 (LAMBDA (A) (AND (LESSP CHRCT (FLATSIZE A)) (PRINC '/
/ / ))		     (PRINC A)
		     (OR (ZEROP CHRCT) (PRINC '/ )))
	 EXPR)

(DEFUN PRINTC FEXPR (L)
;;PRINT UTILITY. EVALUATES AND PRINCS AN ;INDEFINITE LIST OF ARGUMENTS
(PROG () (TERPRI)
A (PRINC (EVAL (CAR L)))
     (PRINC '/   )
     (COND ((NULL (SETQ L (CDR L))) (RETURN T )))
     (GO A)))

(SETQ PUNCL '(/. /, ? : /; " !))

(SETQ RUBOUT (ASCII 127.))

(DEFPROP SAY (LAMBDA (A) (MAPC (FUNCTION PRINT3) A)) FEXPR)

(DEFUN SETDIF (A SETDIF) (PROG (SET) 
			  GO   (COND ((NULL A) (RETURN (REVERSE SET)))
				     ((MEMQ (CAR A) SETDIF))
				     ((SETQ SET (CONS (CAR A) SET))))
			       (SETQ A (CDR A))
			       (GO GO)))

(DEFPROP STA
	 (LAMBDA (A B) (PROG NIL 
			    GO	 (COND ((NULL B) (RETURN T))
				       ((NULL A))
				       ((EQ (CAR A) (CAR B))
					(SETQ A (CDR A))
					(SETQ B (CDR B))
					(GO GO)))))
	 EXPR)


(DEFPROP UNDEFINED
	 (LAMBDA NIL (PROG2 (PRINC (WORD N)) (ERTSTOP UNDEFINED)))
	 EXPR)

(DEFUN UNION (A B) (PROG (SET) (SETQ SET (REVERSE A))
			  GO   (COND ((NULL B) (RETURN (REVERSE SET)))
				     ((MEMQ (CAR B) SET))
				     ((SETQ SET (CONS (CAR B) SET))))
			       (SETQ B (CDR B))
			       (GO GO)))

(DEFPROP VOWEL (NIL A E I O U Y) VALUE)



(DEFPROP WALLP
	 (LAMBDA (A) (PROG (ALIST LINEL) 
			   (SETQ LINEL WPLINEL)
			   (AND (STATUS TTY) (TYO 12.))
			   (TERPRI)
			   (SPRINT (LIST (PR1 A) (REVERSE ALIST))
				   LINEL
				   0.)))
	 EXPR)

(DEFUN DEFS FEXPR (L) (PROG (A) (AND (NULL (CDR A)) (RETURN))
				(SETQ A (CAR L))
				(SETQ L (CDR L))
			   LOOP	(PUTPROP A (CADR L) (CAR L))
				(COND ((SETQ L (CDDR L)) (GO LOOP)))
				(RETURN A)))

(DEFUN TAB (N) 
       (PROG (COL NN) 
	     (SETQ COL (DIFFERENCE LINEL CHRCT))
	     (SETQ NN (DIFFERENCE N COL))
	     (COND ((MINUSP NN) (TERPRI) (TAB N)) ((SPACE NN)))))

(DEFUN SPACE (N) (PROG (NN) 
		       A    (COND ((GREATERP N 0.) (PRINC '/ )
						   (SETQ N (SUB1 N))
						   (GO A)))))

(DEFUN DP (X) 
 (PROG (PLIST) 
  (TERPRI)
  (TERPRI)
  (PRINC '[)
  (PRINC X)
  (PRINC '])
  (SETQ PLIST (CDR X))
A (COND ((EQ (CAR PLIST) 'PNAME) (GO B)))
  (TERPRI)
  (TAB 2.)
  (PRINC (CAR PLIST))
  (TAB 18.)
  (PRINC (CADR PLIST))
B (COND ((SETQ PLIST (CDDR PLIST)) (GO A)))
  (TERPRI)
  (RETURN
   '==================================================================
==)))