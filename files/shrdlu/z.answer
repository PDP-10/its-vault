

(DEFUN ANSWER
       (A)
       (PROG (SM2 SM1 GAP TYPE ANSBACK ANSBACK2)
	     (DISME)
	     (COND (A (PRINT (QUOTE *))
		      (COND ((EQ (CAR NOFLAG) (QUOTE SMNG2))
			     (DSAY I DON/'T UNDERSTAND WHAT YOU MEAN BY ")
			     (MAPC (QUOTE DPRINT3) (CDR NOFLAG)))
			    ((EQ (CAR NOFLAG) (QUOTE WHICH))
			     (DSAY I DON/'T KNOW WHICH)
			     (MAPC (QUOTE DPRINT2) (CDDR NOFLAG))
			     (DSAY YOU MEAN))
			    ((DSAY NO)))
		      (GO LOOP))
		   ((NULL SM) (RETURN NIL))
		   ((NULL (CDR SM)) (ANS2 (ANS1 (CAR SM))) (GO LOOP)))
	     (SETQ SM2 (AORD SM))
	GO   (COND ((WIN (SETQ SM1 (ORDSM SM1 (ANS1 (CAR SM2))))
			 (SETQ SM2 (CDR SM2)))
		    (RETURN (ANS2 (YELL SM1))))
		   ((OR (CQ IMPERSM) (CQ IMPER)) (SETQ SM1 NIL)))
	     (GO GO)
	LOOP (DPRINC (QUOTE /.))
	LOOP2(AND (NULL N) (ZEROP (LISTEN)) (SLEEP 10) (GO LOOP2))
	     (RETURN T)))

(DEFUN ANSTELL
       (INT)
       (PROG (XX  Z)
(SETQ Z    (MAPCAR (QUOTE (LAMBDA (X)
(COND((GET X 'REFER))
((GET X 'SM)(SETQ XX(CONS X XX))X)(X))))
		    (CADAR INT)))
	     (COND ((NULL XX)
		    (COND ((CADDAR INT) (ANSTHM Z NIL NIL T)) ((THADD Z NIL))))
		   ((CDR XX) (ERTSTOP ANSTELL))
		   ((NOT (SETQ XX (GET (CADDR Z) (QUOTE SM))))
		    (ERTSTOP ANSTELL 2))
		   ((COND ((CADDAR INT)
			   (AND (MEMQ (CAADR XX) (QUOTE (NPL NS SG-PL)))
				(MEMQ (CADADR XX) (QUOTE (NDET INDEF)))))
			  ((MEMQ (CADADR XX) (QUOTE (NDET ALL)))))
		    (ANSTHM (LIST (CAR Z) (CADR Z) (LIST 'THV(CADDR XX)))
			    (CAAAR XX)
			    (CDDAAR XX)
			    (OR (CADDAR INT) (EQ (CADADR XX) (QUOTE NO)))))
		   ((ERT ANSTELL 3)))
	     (RETURN T)))

(DEFUN ANSTHM
       (CONSE VAR BODY NEG)
       (PROG (X)
	     (PUTPROP (SETQ X (MAKESYM (QUOTE TH)))
		      (APPEND (LIST (QUOTE THCONSE) VAR CONSE)
			      BODY
			      (AND NEG (QUOTE ((THFAIL THGOAL)))))
		      (QUOTE THEOREM))
	     (RETURN (THADD X NIL))))
(DEFUN ANSX
 (TYPE ANS)
 (PROG (NUM LENGTH)
       (AND REL (SETQ NUM (CAADR REL)))
       (SETQ LENGTH (LENGTH ANS))
       (RETURN
	(COND
	 ((OR (CQ DECLAR) (CQ POLAR) (NULL (MEET FE (QUOTE (IMPER QUEST)))))
	  (COND ((OR (NULL REL) (MEMQ(CADADR REL) (QUOTE (NO ALL))))
		 (LIST (COND (ANS (QUOTE YES))
			     (MODAL (QUOTE I/ DON/'T/ KNOW))
			     ((QUOTE NO)))
		       NIL
		       NIL))
		((MEMQ NUM (QUOTE (NS SG-PL)))
		 (COND ((NULL ANS) (ANSXNO))
		       ((CDR ANS) (LIST (QUOTE YES) LENGTH ANS))
		       ((LIST (QUOTE YES) NIL ANS))))
		((EQ NUM (QUOTE NPL))
		 (COND (ANS (LIST (QUOTE YES) LENGTH ANS)) ((ANSXNO))))
		((NUMBERP NUM)
		 (COND ((EQ NUM LENGTH) (LIST (QUOTE YES) NIL ANS))
		       ((LESSP LENGTH NUM) (LIST (QUOTE NO/,/ ONLY) LENGTH ANS))
		       ((LIST NIL LENGTH ANS))))
		((EQ (CAR NUM) (QUOTE EXACTLY))
		 (COND ((EQ NUM LENGTH) (LIST (QUOTE YES) NIL ANS))
		       ((LIST (QUOTE NO) LENGTH NIL))))
		((EQ (CAR NUM) (QUOTE >))
		 (COND ((GREATERP LENGTH (CADR NUM))
			(LIST (QUOTE YES) LENGTH NIL))
		       ((LIST (QUOTE NO/,/ ONLY) LENGTH NIL))))
		((EQ (CAR NUM) (QUOTE <))
		 (COND ((LESSP LENGTH (CADR NUM)) (LIST (QUOTE YES) LENGTH NIL))
		       ((LIST (QUOTE NO) LENGTH NIL))))
		((ERT ANSX NUM))))
	 ((MEMQ (QUOTE HOWMANY) TYPE) (LIST NIL LENGTH NIL))
	 ((MEMQ (QUOTE WHICH) TYPE)
	  (COND ((NULL ANS) (LIST NIL 0 NIL))
		((AND (NUMBERP NUM) (NOT (EQ NUM LENGTH)))
		 (LIST NIL LENGTH ANS))
		((LIST NIL NIL ANS))))
	 ((MEMQ (QUOTE WHO) TYPE)
	  (COND (ANS (LIST NIL NIL ANS)) ((QUOTE (NOONE NIL NIL)))))
	 ((MEMQ (QUOTE WHAT) TYPE)
	  (COND (ANS (LIST NIL NIL ANS)) ((QUOTE (NOTHING NIL NIL)))))
	 ((MEMQ (QUOTE WHEN) TYPE) (COND ((NULL ANS) (QUOTE (NEVER NIL NIL)))
					 ((CDR ANS) (LIST NIL NUM ANS))
					 ((LIST NIL NIL ANS))))
	 ((MEMQ (QUOTE WHERE) TYPE) (COND ((NULL ANS) (QUOTE (NOWHERE NIL NIL)))
					  ((CDR ANS) (LIST NIL NUM ANS))
					  ((LIST NIL NIL ANS))))
	 ((MEET (QUOTE (HOW WHY)) TYPE)
	  (COND (ANS (LIST NIL NIL ANS))
		((QUOTE (I/ CAN/'T/ EXPLAIN/ A/ NON-EXISTENT/ EVENT NIL NIL)))))
	 ((ERT ANSX TYPE))))))

(DEFUN ANSXNO NIL (COND (MODAL (QUOTE (I/ DON/'T/ KNOW NIL NIL)))
			((QUOTE (NO NIL NIL)))))
(DEFUN ANSNOT(X Y)
(COND(X(LIST(LIST 'THNOT(COND((CDR Y)(CONS 'THAND Y))
(Y)))))
(Y)))
(DEFUN ANS1
 (INT)
 (PROG  (X Y Z PROB REL ANS ANS1 ANS2 VARS CLAUSE NEG PLAN)
(SETQ Z(CADAR INT))
       (SETQ PROB (CAADR (SETQ CLAUSE INT)))
       (COND ((CQ QADJ) (SETQ TYPE (LIST (CADDAR (NB (* C DLC PV (QADJ))))))
			(SETQ ANS1 (ANSX TYPE (SETQ ANS2 (FINDEVENTS INT))))
			(GO ANSY))
	     ((OR (CQ IMPERSM) (CQ IMPER))
	      (SETQ ANS2 (AND (THVAL2 NIL (CAR (GOALIZE  Z )))
			      (OR DOIT PLAN)))
	      (SETQ ANS1 (QUOTE IMPER))
	      (GO OK))
	     ((AND (CQ DECLAR)
		   (COND ((EQ (CAR Z) (QUOTE #DEFINITION))
			  (APPLY (QUOTE #DEFINITION) (CDR Z)))
			 ((EVAL (GET (CAR Z) (QUOTE TELLABLE)))
			  (ANSTELL INT))))
	      (SETQ ANS1 (QUOTE (I/ UNDERSTAND NIL NIL)))
	      (GO OK))
	     ((SETQ REL (INTERP (CAAR INT))) (GO REL))
	     ((OR (CQ DECLAR) (CQ POLAR))


(SETQ ANS(COND ((EQ (CAR Z) (QUOTE #HASPROP))
(SETQ X(INTERP(CADR Z)))
(SETQ VARS(COND((GET(CADR Z)'REFER)NIL)((ERT ANS1 #HASPROP)(CAAAR X ))))
(SETQ NEG(EQ(SETQ Y
(CADADR X ))'ALL))


				    (ANSNOT (MEMQ Y '(ALL NO))
(SUBST
(OR(GET(CADR Z)'REFER)
(LIST 'THV(CADDR(INTERP(CADDAR INT)))))
(LIST 'THV(CADDR(INTERP(CADDAR INT))))
(CDDAAR (INTERP (CADDR  Z))))))
				   ((
(LAMBDA(X)(COND((NUMBERP(CAR X))(CDR X))((LIST(CAR X)))))  (P1 Z
						   (AND(NOT(CQ POLAR)) (CADDAR INT)))))))

	      (SETQ ANS
(NOTIFY NEG
		    (PROGIFY VARS
			     ANS
			     NIL)))
	      (SETQ TYPE (QUOTE POLAR))
	      (GO ANSX))
	     ((ERT ANS2 TYPE)))
  REL  (SETQ TYPE (CONS (QUOTE REL) (CADDR (CADR REL))))
       (SETQ ANS (RELATE INT REL NIL))
  ANSX (SETQ ANS1 (ANSX TYPE (SETQ ANS2 (THVAL2 NIL ANS))))
  ANSY (COND ((NULL DISCOURSE))
	     ((NULL (CDR SM)))
	     ((CQ QADJ))
	     ((NOT (PUTPROP (QUOTE THTRUE) (QUOTE WHO) (QUOTE EXPR))))
	     ((EQUAL ANS1 (ANSX TYPE (THVAL2 (LIST (DIFFERENCE LASTSENTNO 2)
						   (ADD1 LASTSENTNO))
					     ANS)))
	      (SETQ PROB (*DIF PROB 500)))
	     ((EQUAL ANS1 (ANSX TYPE (THVAL2 (QUOTE HE) ANS)))
	      (SETQ PROB (*DIF PROB 200))))
       (REMPROP (QUOTE THTRUE) (QUOTE EXPR))
  OK   (RETURN (LIST PROB ANS1 ANS2 INT))))

(SETQ GAP NIL)
(DEFUN ANS2
       (ANS)
       (PROG (X VAGUE)
	     (SETQ LASTANSEV NIL)
	     (SETQ ANSNAME NIL)
	     (AND IASSUME
		  (OR (MEMQ (QUOTE IT) GAP) (IASS (QUOTE IT)))
		  (OR (MEMQ (QUOTE THEY) GAP) (IASS (QUOTE THEY))))
	     (AND GAP (%))
	     (PRINT (QUOTE *))
	     (COND ((NULL ANS) (RETURN (COND (MODAL (DSAY I DON/'T KNOW))
					     ((DPRINT2 (QUOTE NO))))))
		   ((OR (CQ IMPERSM) (CQ IMPER))
		    (SETQ LASTIME THTIME)
		    (OR DOIT
			(EVLIS (MAPC (FUNCTION (LAMBDA (X)
						       (AND RECORD (OPRINT X))))
				     (REVERSE (CADDR ANS)))))
		    (COND ((CADDR ANS) (DSAY OK)) ((DSAY I CAN/'T)))
		    (GO OK))
		   ((CAADR ANS) (SETQ X (DPRINT2 (CAADR ANS)))))
	     (AND MODAL (GO OK))
	     (COND ((CADADR ANS)
		    (SETQ VAGUE (MEMQ (QUOTE #VAGUE)
				      (CADAR (INTERP (CAR (CADDDR ANS))))))
		    (AND X (DPRINT3 (QUOTE /,)))
		    (MAPC (QUOTE DPRINT2) (CADDR (CADDDR ANS)))
		    (DPRINC (COND ((ZEROP (CADADR ANS))
				   (COND ((MEMQ (QUOTE REL) TYPE)
					  (COND (VAGUE (QUOTE NOTHING))
						((QUOTE NONE))))
					 ((QUOTE NO))))
				  ((NAMENUM (CADADR ANS)))))
		    (COND ((MEMQ (QUOTE WHEN) TYPE) (DSAY TIMES))
			  ((MEMQ (QUOTE WHERE) TYPE) (DSAY PLACES))
			  ((MEMQ (QUOTE WHY) TYPE) (DSAY REASONS))
			  ((MEMQ (QUOTE HOW) TYPE) (DSAY WAYS))
			  (VAGUE (DSAY THINGS))
			  ((DSAY OF THEM)))))
       (COND ((CADDR (CADR ANS))
	      (AND X (DPRINT3 
(COND((CADADR ANS)'/:)('/,))))
	      (MAPC (FUNCTION DPRINT2) (CADDR (CADDDR ANS)))
	      (MAPC (FUNCTION DPRINT2)
		    (NAMES (CADDR (CADR ANS))
			   (AND (MEMQ (QUOTE WHICH) TYPE) (QUOTE DEF))))))
       OK
       (COND ((NULL DISCOURSE))
	     ((EQ NOFLAG (QUOTE SMADJQ)))
	     (T (SETQ LASTREL (CAAR (CADDDR ANS))) (BACKREFX)))
       (RETURN T)))
(DEFUN AORD (LIST) (PROG (C A)
			 (OR LIST (RETURN NIL))
			 (SETQ A (LIST NIL (CAR LIST)))
			 (SETQ LIST (CDR LIST))
		    UP	 (OR LIST (RETURN (CDR A)))
			 (SETQ C A)
		    GO	 (COND ((OR (NULL (CDR C))
				    (NOT (LESSP (CAADAR LIST)
						(CAADAR (CDR C)))))
				(RPLACD C (CONS (CAR LIST) (CDR C))))
			       ((SETQ C (CDR C)) (GO GO)))
			 (SETQ LIST (CDR LIST))
			 (GO UP)))

(SETQ DOIT NIL)

(DEFUN CUTOFF (X) (READLIST (CDR (EXPLODE X))))

(OR(ERRSET EVENTLIST)(SETQ EVENTLIST NIL))

(DEFUN FINDBACKR
       (X)
       (PROG (Y)
	     (COND ((EQ ANSBACK2 T) (RETURN NIL))
		   (ANSBACK2 (RETURN (AND (SETQ Y (ASSOC X ANSBACK2))
					  (CADR Y)))))
	     (SETQ Y BACKREF)
	UP   (COND ((NULL Y) (RETURN NIL))
		   ((EQUAL X (GET (CAAR Y) (QUOTE BIND))) (RETURN T)))
	     (SETQ Y (CDR Y))
	     (GO UP)))
(DEFUN FINDCHOOSE
 (NG X ANS2)
 (PROG (HAVE NEED XX ANS LOOP)
       (SETQ NG (INTERP NG))
       (COND ((EQ (CADADR NG) (QUOTE ALL)) (RETURN (THVAL (FINDIFY (QUOTE ALL)
								   (CADDR NG)
								   (CAAAR NG)
								   (CDDAAR NG))
							  NIL)))
	     ((EQ (CADADR NG) (QUOTE CONJ)) (GO CONJ)))
       (OR (ATOM (SETQ NEED (FINDNUM (CAADR NG)))) (SETQ NEED (CADR NEED)))
       (SETQ HAVE 0)
  GO   (COND
	((OR (EQ HAVE NEED)
	     (AND (GREATERP HAVE NEED)
		  (SETQ ANS (FINDREDUCE ANS (DIFFERENCE HAVE NEED)))))
	 (GO DONE))
	((EQ X (QUOTE NOMORE)) (RETURN NIL))
	((SETQ
	  HAVE
	  (LENGTH
	   (SETQ
	    ANS
	    (APPEND
	     (THVAL (FINDIFY (LIST 1 (DIFFERENCE NEED HAVE) T)
			     (CADDR NG)
			     (CAAAR NG)
			     (APPEND (CDDAAR NG)
				     (SUBST (CADDR NG)
					    (QUOTE ***)
					    (QUOTE ((NOT (OR (MEMQ (THV ***)
								   ANS)
							     (MEMQ (THV ***)
								   ANS2))))))
				     (AND X (SUBST (CADDR NG)
						   (QUOTE *)
						   (CAR X)))))
		    THALIST)
	     ANS))))
	 (SETQ X (COND (X (CDR X)) ((QUOTE NOMORE))))
	 (GO GO)))
  CONJ (SETQ LOOP (CADDR NG))
  UP   (COND ((GET (CAR LOOP) (QUOTE REFER))
	      (SETQ ANS (APPEND (GET (CAR LOOP) (QUOTE REFER)) ANS)))
	     ((SETQ XX (FINDCHOOSE (INTERP (CAR LOOP)) X (APPEND ANS2 ANS)))
	      (SETQ ANS (APPEND XX ANS))))
       (COND ((AND ANS (MEMQ (QUOTE OR) (CADDR (CADR NG)))))
	     ((SETQ LOOP (CDR LOOP)) (GO UP))
	     (ANS)
	     ((RETURN NIL)))
  DONE (AND (ATOM (CADDR NG)) (PUTPROP (CADDR NG) (REVERSE ANS) (QUOTE BIND)))
       (RETURN (REVERSE ANS))))
(DEFUN FINDEVENTS
       (X)
       (PROG NIL
	     (COND ((GET (CADADR (CAR X)) (QUOTE WHY))
		    (RETURN (LIST (CADADR (CAR X)))))
		   ((EQ (QUOTE FINDEVENTS) (CADADR (CAR X))))
		   ((RPLACA (CDAR X)
			    (APPEND (LIST (CAADAR X) (QUOTE FINDEVENTS))
				    (CDADAR X)))))
	     (RPLACA (CAR X) (QUOTE FINDEVENTS))
	     (RETURN (THVAL2 NIL (RELATE X (INTERP (QUOTE FINDEVENTS)) NIL)))))

(DEFUN FINDNUM (X) (COND ((NUMBERP X) X)
			 ((EQ (CAR X) (QUOTE EXACTLY))
			  (LIST (CADR X) (ADD1 (CADR X)) NIL))
			 ((EQ (CAR X) (QUOTE >)) (ADD1 (CADR X)))
			 ((EQ (CAR X) (QUOTE <)) (CADR X))
			 ((EQ X (QUOTE NS)) 1)
			 ((EQ X (QUOTE NPL)) 2)
			 ((ERT FINDNUM))))

(DEFUN FINDREDUCE (X Y) (PROG NIL
			 UP   (SETQ X (CDR X))
			      (COND ((ZEROP (SETQ Y (SUB1 Y))) (RETURN X))
				    ((GO UP)))))

(DEFPROP IASS
	 (LAMBDA (X)
		 (PROG (XX)
		       (OR (SETQ XX (CADR (SASSQ X
						 (CADR (CADDDR ANS))
						 (FUNCTION SASS))))
			   (RETURN T))
		       (SAY /
BY)		       (PRINC (COND ((EQ X (Q IT)) (Q "IT"))
				    ((MEMQ (Q THEY) (FROM SENT NIL)) (Q "THEY"))
				    ((Q "THEM"))))
		       (SAY /, I ASSUME YOU)
		       (PRINC (Q MEAN))
		       (MAPC (FUNCTION PRINT2) (PARAP XX))
		       (RETURN (PRINC (Q /./
)))))	 EXPR)

(DEFUN MUNG
       (LIST MUNG)
       (SETQ MUNG (LIST (QUOTE QUOTE) MUNG))
       (AND DISCOURSE (SETQ LIST (CADDR LIST)))
       (COND ((EQ (CAAR (CDDDR LIST)) (QUOTE THAMONG))
	      (RPLACD (CDAR (CDDDDR LIST)) MUNG))
	     ((RPLACD (CDDDR LIST)
		      (CONS (LIST (QUOTE THAMONG) (LIST 'THV (CADR (CADDR LIST))) MUNG)
			    (CDDDDR LIST))))))
(DEFUN NAME
 (XX)
 (THPROG
  ((X XX) (P (EQ PP (QUOTE DEF))) (REL NIL) Y LIST TEMP Z)
  (COND
   ((NULL (THV X)) (THRETURN (QUOTE (NIL NIL))))
   ((EQ (THV X) (QUOTE I)) (THRETURN (QUOTE ((I) (:SHRDLU)))))
   ((AND (EQ PP (QUOTE EV))
	 (OR (NULL (ERRSET (MAPC (FUNCTION (LAMBDA (X)
						   (AND (EQ (GET X
								 (QUOTE REFER))
							    (THV X))
							(ERR NIL))))
				 (GET (QUOTE IT) (QUOTE BIND)))))
	     (AND (NULL (GET (QUOTE IT) (QUOTE BIND)))
		  (EQ (GET (GET (QUOTE IT) (QUOTE LASTT)) (QUOTE REFER))
		      (THV X)))))
    (THRETURN (LIST (QUOTE (IT)) (LIST (THV X)))))
   ((THVSETQ (THNV TEMP) (ASSQ (THV X) ANSBACK))
    (THRETURN (LIST (CADR (THV TEMP)) (LIST (THV X)))))
   ((AND (MEMQ (QUOTE REL) TYPE)
	 (THVSETQ (THNV REL)
		  (* H PV (MEMQ (CAAR (CADDDR ANS)) (SM PT)) DLC PV (NOUN))))
    (THVSETQ (THNV REL) (FROM (NB (* U)) (N (THV REL)))))
   (T))
  (THVSETQ (THNV TEMP) (THGOAL (#IS (THV X) (THNV Y))))
  (PUTPROP1 (THV TEMP) LASTSENTNO (QUOTE WHO))
  (THVSETQ (THNV LIST) (THFIND ALL (THV Z) (Z) (THGOAL (#IS (THV Z) (THV Y)))))
  (COND ((EQ (THV Y) (QUOTE #NAME)) (THRETURN (LIST (LIST (THV X)) (THV X))))
	((MEMQ (THV Y) (QUOTE (#COLOR #SHAPE)))
	 (THRETURN (LIST (LIST (CUTOFF (THV X))) (THV X))))
	((THVSETQ (THNV Z) (LIST (CUTOFF (THV Y))))))
  (OR (AND (EQ (THV Y) (QUOTE #BLOCK))
	   (#EQDIM (THV X))
	   (THVSETQ (THNV Z) (QUOTE (CUBE)))
	   (THVSETQ (THNV LIST) (THFIND ALL
					(THV Z)
					(Z)
					(THAMONG (THV Z) (THV LIST))
					(#EQDIM (THV Z)))))
      T)
  (NAME1)
  (THCOND ((THVSETQ (THNV TEMP) (THGOAL (#CALL (THV X) (THNV Y))))
	   (PUTPROP1 (THV TEMP) LASTSENTNO (QUOTE WHO))
	   (THVSETQ (THNV Z) (APPEND (THV Z) (LIST (QUOTE NAMED) (THV Y))))
	   (THVSETQ (THNV LIST) (LIST (THV X)))
	   (NAME2 T))
	  ((THSUCCEED)))
  (OR (THVSETQ (THNV TEMP) (THGOAL (#COLOR (THV X) (THNV Y))))
      (ERT NAME #COLOR))
  (PUTPROP1 (THNV TEMP) LASTSENTNO (QUOTE WHO))
  (THVSETQ (THNV LIST) (THFIND ALL
			       (THV Z)
			       (Z)
			       (THAMONG (THV Z) (THV LIST))
			       (THGOAL (#COLOR (THV Z) (THV Y)))))
  (THVSETQ (THNV Z) (CONS (CUTOFF (THV Y)) (THV Z)))
  (NAME1)
  (THVSETQ (THNV TEMP) (NAMESIZE (SIZE (THV X))))
  (THVSETQ (THNV LIST) (THFIND ALL
			       (THV Z)
			       (Z)
			       (THAMONG (THV Z) (THV LIST))
			       (EQ (THV TEMP) (NAMESIZE (SIZE (THV X))))))
  (THVSETQ (THNV Z) (CONS (THV TEMP) (THV Z)))
  (NAME1)
  (OR (THV P) (NAME2 NIL))
  (THCOND ((THVSETQ (THNV Y) (THFIND ALL
				     (THV Z)
				     (Z)
				     (THGOAL (#SUPPORT (THV X) (THV Z)))))
	   (THVSETQ (THNV Z) (APPEND (THV Z)
				     (QUOTE (WHICH SUPPORTS))
				     (NAMES (THV Y) NIL)))
	   (THVSETQ (THNV LIST) (LIST (THV X)))
	   (NAME2 T))
	  ((THVSETQ (THNV Y) (THFIND ALL (THV Z) (Z) (THGOAL (#LOC #RIGHT
								   (THV X)
								   (THV Z))
							     (THUSE TC-LOC))))
	   (THVSETQ (THNV Y) (NAMES (THV Y) NIL)))
	  ((THVSETQ (THNV Y) (QUOTE (NOTHING)))))
  (THRETURN (LIST (APPEND (QUOTE (THE))
			  (THV Z)
			  (QUOTE (WHICH IS TO THE RIGHT OF))
			  (THV Y))
		  (LIST (THV X))))))

(DEFUN NAME1
       NIL
       (AND (MEMQ (CAR (THV Z)) (THV REL))
	    (MEMBER (CDR (THV Z)) (QUOTE (NIL (ONE))))
	    (THVSETQ (THNV Z) (QUOTE (ONE))))
       (NAME2 T))

(DEFUN NAME2
       (X)
       (OR (AND X (CDR (THV LIST)) (THFINALIZE THPROG))
	   (NOT (SETQ ANSBACK (CONS (LIST (THV X)
					  (COND (ANSBACK (CONS (QUOTE THAT)
							       (LAST (THV Z))))
						((QUOTE (IT)))))
				    ANSBACK)))
	   (THRETURN (LIST (CONS (COND (X (QUOTE THE)) ((QUOTE A)))
				 (COND ((EQUAL (THV Z) (QUOTE (ONE)))
					(QUOTE (ONLY ONE)))
				       ((THV Z))))
			   (THV LIST)))))
(DEFUN NAMEHOW
 (XX)
 (PROG (LIST1)
       (MAPC (FUNCTION (LAMBDA (Y) (AND (EQ (GET Y (QUOTE WHY)) XX)
					(NOT (MEMQ (GET Y (QUOTE TYPE))
						   (QUOTE (#PICKUP #PUT))))
					(SETQ LIST1 (CONS Y LIST1)))))
	     EVENTLIST)
       (OR XX (RETURN (QUOTE (I CAN/'T ANALYZE HOW))))
       (RETURN
	(CONS
	 (QUOTE BY)
	 (APPEND
	  (NAMEVENT (CAR LIST1) (QUOTE ING))
	  (APPLY
	   (QUOTE APPEND)
	   (MAPCAR (FUNCTION (LAMBDA (X)
				     (CONS (QUOTE ;)
					   (CONS (QUOTE THEN)
						 (NAMEVENT X (QUOTE ING))))))
		   (CDR LIST1))))))))

(DEFUN NAMENUM (NUM) (CADR (OR (ASSQ NUM (QUOTE ((2 TWO) (3 THREE)
							 (4 FOUR)
							 (5 FIVE)
							 (6 SIX)
							 (7 SEVEN)
							 (10 EIGHT)
							 (11 NINE)
							 (12 TEN))))
			       (LIST NIL NUM))))

(DEFUN NAMEREASON
       (X)
       (COND ((NULL (SETQ X (GET X (QUOTE WHY)))) (ERT NAMEREASON))
	     ((EQ X (QUOTE ESP)) (QUOTE (I DON/'T
					   KNOW
					   /--
					   THE
					   ESP
					   DEVICE
					   BLEW
					   UP
					   DURING
					   THE
					   LAST
					   SYSTEM
					   CRASH)))
	     ((EQ X (QUOTE COMMAND)) (QUOTE (BECAUSE YOU ASKED ME TO)))
	     ((NAMEVENT X (QUOTE TO)))))
(DEFUN NAMES
 (X PP)
 (PROG (Y Z NUM NAME)
       (OR X (ERT NAMES))
       (COND
	((MEMQ (CAR X) EVENTLIST)
	 (SETQ LASTANSEV (SETQ X (CAR X)))
	 (RETURN (COND ((MEMQ (QUOTE WHEN) TYPE) (NAMETIME X))
		       ((MEMQ (QUOTE WHY) TYPE) (NAMEREASON X))
		       ((MEMQ (QUOTE HOW) TYPE) (NAMEHOW X))
		       ((ERT NAME EVENT)))))
	((AND (EQ PP (QUOTE EV)) (SETQ Y (FINDBACKR X)))
	 (RETURN (CADAR (SETQ ANSBACK
			      (CONS (LIST X
					  (COND ((AND ANSBACK (NOT (ATOM Y))) Y)
						((OR (ATOM X) (NULL (CDR X)))
						 (QUOTE (IT)))
						((QUOTE THEM))))
				    ANSBACK)))))
	((OR (ATOM X) (AND (NULL (CDR X)) (SETQ X (CAR X))))
	 (OR (SETQ Y (THVAL (QUOTE (NAME X)) NIL)) (ERT NAMES THVAL))
	 (AND DISCOURSE(SETQ ANSNAME (CONS (NAMET (CAR Y)) ANSNAME)))
	 (RETURN (CAR Y)))
	((OR
	  (NOT (SETQ XX X))
	  (NULL (ERRSET (MAPC (FUNCTION (LAMBDA (X)
						(AND (EQUAL (GET X
								 (QUOTE REFER))
							    XX)
						     (ERR NIL))))
			      (GET (QUOTE THEY) (QUOTE BIND)))))
	  (AND (NULL (GET (QUOTE THEY) (QUOTE BIND)))
	       (EQUAL (GET (GET (QUOTE THEY) (QUOTE LASTT)) (QUOTE REFER)) XX)))
	 (RETURN (QUOTE (THEY))))
	((SETQ Y (MAPCAR (FUNCTION (LAMBDA (Z) (OR (THVAL (QUOTE (NAME Z)) NIL)
						   (ERT NAMES THVAL Z))))
			 X)))
	((ERT NAMES)))
       (SETQ ANSNAME (APPEND (MAPCAR (FUNCTION NAMET)
				     (SETQ Y (MAPCAR (FUNCTION CAR) Y)))
			     ANSNAME))
  UP   (SETQ Z (CAR Y))
       (SETQ Y (CDR Y))
       (SETQ NUM 1)
  GO   (COND ((MEMBER Z Y) (SETQ NUM (ADD1 NUM)) (SETQ Y (DELETE Z Y)) (GO GO)))
       (AND NAME
	    (OR (NULL Y) (SETQ NAME (CONS (QUOTE /,) NAME)))
	    (NULL Y)
	    (SETQ NAME (CONS (QUOTE AND) NAME)))
       (SETQ
	NAME
	(APPEND
	 (REVERSE
	  (COND ((EQ NUM 1) Z)
		((CONS (NAMENUM NUM)
		       (MAPLIST (FUNCTION (LAMBDA (X)
						  (COND ((CDR X) (CAR X))
							((PLURALIZE (CAR X))))))
				(COND ((EQ (CAR Z) (QUOTE A)) (CDR Z)) (Z)))))))
	 NAME))
       (AND Y (GO UP))
       (RETURN (REVERSE NAME))))

(DEFUN NAMESIZE (X) (SETQ X (APPLY (QUOTE PLUS) X)) (COND ((LESSP X 301)
							   (QUOTE SMALL))
							  ((LESSP X 500)
							   (QUOTE MIDDLE-SIZED))
							  ((QUOTE LARGE))))

(DEFUN NAMET (X) (LIST NIL
		       (MAPCAR (FUNCTION (LAMBDA (Y) (LIST (GET Y (QUOTE WORD))
							   (GET Y (QUOTE SMNTC))
							   Y
							   Y)))
			       X)
		       NIL))

(DEFUN NAMETIME
       (X)
       (PROG (Y) UP (COND ((NOT (MEMQ (GET X (QUOTE WHY))
				      (QUOTE (COMMAND ESP))))
			   (SETQ Y (OR Y T))
			   (SETQ X (GET X (QUOTE WHY)))
			   (GO UP))
			  ((EQ Y (QUOTE BEFORE))
			   (RETURN (CONS (QUOTE BEFORE)
					 (NAMEVENT X (QUOTE PAST)))))
			  (Y (RETURN (APPEND (QUOTE (WHILE I WAS))
					     (NAMEVENT X (QUOTE ING)))))
			  ((EQ X (CAR EVENTLIST)) (RETURN (QUOTE (JUST NOW))))
			  ((SETQ X (CAR (FINDB EVENTLIST (MEMQ X EVENTLIST))))
			   (SETQ Y (QUOTE BEFORE))
			   (GO UP)))))
(DEFUN NAMEVENT
       (EVENT TYPE)
       (PROG (THALIST EV SUBJ OBJ1 OBJ2)
	     (OR (SETQ EV (GET (GET EVENT (QUOTE TYPE)) (QUOTE NAMEVENT)))
		 (ERT NAMEVENT))
	     (OR (THVAL (LIST (QUOTE THGOAL)
			      (COND ((EQ (CAR EV) 2) (QUOTE (? (THV EVENT))))
				    ((EQ (CAR EV) 3)
				     (QUOTE (? (THV EVENT) (THNV SUBJ))))
				    ((EQ (CAR EV) (QUOTE I3))
				     (QUOTE (? (THV EVENT) (THNV OBJ1))))
				    ((EQ (CAR EV) 4) (QUOTE (? (THV EVENT)
							       (THNV SUBJ)
							       (THNV OBJ1))))
				    ((EQ (CAR EV) (QUOTE I4))
				     (QUOTE (? (THV EVENT)
					       (THNV OBJ1)
					       (THNV OBJ2))))
				    ((EQ (CAR EV) 5) (QUOTE (? (THV EVENT)
							       (THNV SUBJ)
							       (THNV OBJ1)
							       (THNV OBJ2))))
				    ((ERT NAMEVENT DATA))))
			(SETQ THALIST (LIST (LIST (QUOTE EVENT) EVENT)
					    (LIST (QUOTE SUBJ)
						  (COND ((NUMBERP (CAR EV)) NIL)
							((QUOTE I))))
					    (LIST (QUOTE OBJ1) NIL)
					    (LIST (QUOTE OBJ2) NIL))))
		 (ERT NAMEVENT THVAL))
	     (MAPC (FUNCTION (LAMBDA (X) (AND (CADR X)
					      (SET (CAR X)
						   (NAMES (LISTIFY (CADR X))
							  (QUOTE EV))))))
		   (CDR THALIST))
	     (SETQ ANSBACK2 (OR ANSBACK T))
	     (SETQ LASTANSEV EVENT)
	     (RETURN (APPEND (COND ((EQ TYPE (QUOTE PAST)) SUBJ)
				   ((EQ TYPE (QUOTE TO)) (QUOTE (TO))))
			     (EVAL (CADR EV))))))
(DEFPROP PARAP
 (LAMBDA (X)
	 (PROG (Y)
	       (SETQ Y (COND ((OR (EQ X (GET (Q IT) (Q LASTT)))
				  (EQ X (GET (Q THEY) (Q LASTT))))
			      (Q (THE SAME THING)))
			     ((SETQ Y (SUBLIS (QUOTE ((YOU . I) (I . YOU)
								(ARE . AM)))
					      (OR (FASSOC (FUNCTION CADDDR)
							  X
							  BACKREF
							  (FUNCTION NILL))
						  (FASSOC (FUNCTION CADDDR)
							  X
							  BACKREF2
							  (FUNCTION NILL)))))
			      (FROM (CADR Y) (CADDR Y)))
			     ((ERT IASSUME))))
	       (RETURN (COND ((MEMQ (CAR Y)
				    (Q (THE THOSE THIS THAT THESE YOUR MY)))
			      Y)
			     ((MEMQ (CAR Y) (Q (A AN SOME ANY)))
			      (CONS (Q THE) (CDR Y)))
			     ((MEMQ (CAR Y) (Q (SOMETHING ANYTHING)))
			      (CONS (Q THE)
				    (CONS (Q THING)
					  (COND ((NULL (CDR Y)) NIL)
						((EQ (CADR Y) (Q (WHICH THAT)))
						 (CDR Y))
						((CONS (Q WHICH)
						       (CONS (Q IS)
							     (CDR Y))))))))
			     ((CONS (Q THE) Y))))))
 EXPR)

(DEFUN PLURALIZE (X) (READLIST (APPEND (EXPLODE X) (QUOTE (S)))))

(DEFUN PRTPUT (X Y) (COND ((CDR Y) (CONS X Y)) ((APPEND Y (LIST X)))))

(DEFUN VBFIX
       (X PP)
       (COND ((EQ TYPE (QUOTE ING))
	      (SETQ X (REVERSE (EXPLODE X)))
	      (READLIST (REVERSE (APPEND (QUOTE (G N I)) (VBFIX2 X) X))))
	     ((EQ TYPE (QUOTE PAST))
	      (OR (GET X (QUOTE PAST))
		  (AND (SETQ X (REVERSE (EXPLODE X)))
		       (READLIST (REVERSE (APPEND (QUOTE (D E))
						  (VBFIX2 X)
						  X))))))
	     ((EQ TYPE (QUOTE TO)) X)))

(DEFUN VBFIX2
       (X)
       (AND PP (MEMQ (CAR X) CONSO) (MEMQ (CADR X) VOWEL) (LIST (CAR X))))
(DEFUN WIN (SM1 SM2) (OR (NULL SM2)
			 (GREATERP (CAAR SM1) (PLUS TIMID (CAADAR SM2)))
			 (AND (CQ IMPER) (CADDAR SM1))))

(DEFUN YELL
 (SM1)
 (PROG (XX LISTT PRON NUM USED AMB X)
  GO   (COND ((NULL SM1) (ERT YELL))
	     ((OR (NULL (CDR SM1))
		  (GREATERP (CAAR SM1) (PLUS TIMID (CAADR SM1))))
	      (RETURN (CAR SM1))))
       (SETQ LISTT (CADR (CADDDR (CAR SM1))))
       (SETQ X (QUOTE IT))
  BACK (COND ((YELL1 X)) ((SETQ X (NATOM X)) (GO BACK)) ((ERT YELL NO)))
       (MAPC (QUOTE (LAMBDA (X)
			    (AND (SETQ XX (ASSQ (CAR USED) (CADR (CADDDR X))))
				 (OR (MEMQ (CADR XX) AMB)
				     (SETQ AMB (CONS (CADR XX) AMB))))))
	     SM1)
       (OR (CDR AMB) (GO BACK))
       (SETQ XX NIL)
       (SETQ GAP (CONS (CAR USED) GAP))
       (DISME)
       (DSAY I/'M NOT SURE WHAT YOU MEAN BY ")
       (COND (PRON (DPRINT3 (CAR USED)))
	     ((MAPC (QUOTE DPRINT3) (CAR (GET (CAR USED) (QUOTE AMBIG))))))
       (DPRINT3 (QUOTE "))
       (COND (PRON)
	     ((DSAY IN THE PHRASE ")
	      (MAPC (QUOTE DPRINT3) (CADR (GET (CAR USED) (QUOTE AMBIG))))
	      (DPRINT3 (QUOTE "))))
       (DSAY /. DO YOU MEAN:)
       (SETQ NUM 0)
       (MAPC (QUOTE (LAMBDA (X)
			    (SETQ XX
				  (CONS (LIST (PROG2 (DPRINT (SETQ NUM
								   (ADD1 NUM)))
						     NUM)
					      X)
					XX))
			    (DPRINT3 (QUOTE -))
			    (MAPC (QUOTE DPRINT3) (GET X (QUOTE AMBIG)))))
	     AMB)
       (DPRINC (QUOTE ?))
  NO   (OR (SETQ AMB (CADR (SASSQ (READCH) XX (FUNCTION SASS))))
	   (AND (DSAY /
PLEASE TYPE ONE OF THE NUMBERS) (GO NO)))
       (DISME)
       (SETQ LISTT NIL)
  UP   (COND ((NULL SM1) (SETQ SM1 (REVERSE LISTT)) (GO GO))
	     ((OR (NULL (SETQ XX (ASSQ (CAR USED) (CADR (CADDDR (CAR SM1))))))
		  (EQ (CADR XX) AMB))
	      (SETQ LISTT (CONS (CAR SM1) LISTT))))
       (SETQ SM1 (CDR SM1))
       (GO UP)))
(DEFUN YELL1 (X) (COND ((MEMQ X USED) NIL)
		       ((ASSQ X LISTT) (SETQ PRON (MEMQ X (QUOTE (IT THEY))))
				       (SETQ USED (CONS X USED)))))
