(defun start-life ()
       (terpri) (princ '|Input the dimensions, please:|)
       (let ((r (read)))
	    (let ((life (*array nil 'fixnum (car r) (cadr r))))
	         (do () ((null (inputp))) (tyi))
	         (randomfill life)
		 (generate life))))

(defun randomfill (life)
       (readch)
       (let ((i (cadr (arraydims life)))
	     (j (caddr (arraydims life))))
	    (let ((p (// (* i j) 3.)))
		 (do n 0. (1+ n) (= n p)
		     (store (arraycall fixnum life
				       (random i) (random j))
			    1.)))))
(defun inputp () (funcall standard-input ':listen))
(defun neighbors (i j life)
       (let ((m (cadr (arraydims life)))
	     (n (caddr (arraydims life))))
	    (do ((s 0. (cond ((or (minusp i) (minusp j)
				  (= m i) (= n j)
				  (emp (arraycall fixnum life i j)))
			      s)
			     (t (1+ s))))
		 (i (1- i) (+ i (car x)))
		 (j   j    (+ j (car y)))
		 (x '(0  1  1  0  0 -1 -1  0) (cdr x))
		 (y '(1  0  0 -1 -1  0  0  0) (cdr y)))
		((null x) s))))
(defun emp (n) (or (null n) (evenp n)))
(defun generate (life)
  (let ((m (cadr (arraydims life)))
	(n (caddr (arraydims life))))
    (color:clear)
    (do i 0 (1+ i) (= i m)
	(do j 0 (1+ j) (= j n)
	    (cond ((emp (arraycall fixnum life i j)) nil)
		  (t (color:rectangle (* 20. i) (* 20. j) 15. 15. 7)))))
    (do ((gennum 1. (incre gennum)))
	((inputp))
      (do i 0 (1+ i) (= i m)
	  (do j 0 (1+ j) (= j n)
	      (let ((p (neighbors i j life)))
		(cond ((emp (arraycall fixnum life i j))
		       (cond ((= p 3)
			      (store (arraycall fixnum life i j)
				     2.))))
		      (t (cond ((or (> 2. p) (> p 3.))
				(store (arraycall fixnum life i j)
				       3.))))))))
      (do i 0 (1+ i) (= i m)
	  (do j 0 (1+ j) (= j n)
	      (cond ((equal (arraycall fixnum life i j) 2)
		     (store (arraycall fixnum life i j) 1)
		     (color:rectangle (* 20. i) (* 20. j) 15. 15. gennum))
		    ((equal (arraycall fixnum life i j) 3)
		     (store (arraycall fixnum life i j) 0)
		     (color:rectangle (* 20. i) (* 20. j) 15. 15. 0))))))))


(defun incre (n) (cond ((= n 15.) 1.)
		       (t (1+ n))))
