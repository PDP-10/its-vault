;NOXGP
;SKIP 1

Command characters defined in the EMACS editor (as of 04/25/81):
   Commands not listed here are self-inserting,
   illegal, or trivial aliases of other commands
   (as, Control-x for Control-X, or Control-I for Tab).

Backspace
	runs the built-in function ^R Backward Character.
	Move back one character.
	With argument, move that many characters backward.
	Negative args move forward.

Tab	runs the function ^R Indent According to Mode.
	Indents suitably for the major mode.
	In Fundamental mode, just inserts a Tab.

Linefeed
	runs the function ^R Indent New Line.
	Inserts CRLF, then indents the second line.
	Any spaces before the inserted CRLF are deleted.
	Uses the definitions of CR and Tab to do the work,
	except that if there is a Fill Prefix it is used to indent.
	An argument is passed on to the definition of Tab.

Return	runs the function ^R CRLF.
	Insert CRLF, or move onto blank line.
	A blank line is one containing only spaces and tabs
	(which are killed if we move onto it).  Single blank lines
	(followed by nonblank lines) are not eaten up this way.
	In auto-fill mode, we may break the line before the last word.
	A pre-comma arg inhibits this.

Altmode	runs the function ^R Prefix Meta.
	Sets Meta-bit of following character. 
	Turns a following A into a Meta-A.
	If the Metizer character is Altmode, it turns ^A
	into Control-Meta-A.  Otherwise, it turns ^A into plain Meta-A.
	A precomma argument means return the modified character;
	otherwise, we execute its definition.
	The value of the arg should be the metizer character itself
	so we can tell whether it was an altmode.

Control-
	runs the function SAIL Character Mode.
	Enables or disables display of SAIL graphics.
	They are single-column graphics for characters 0 through 37.
	A positive argument turns display of SAIL graphics on;
	zero or negative, turns it off.
	With no argument, the mode is toggled.

Control-Altmode
	runs the built-in function ^R Exit.
	Exit normally from a subsystem or a level of editing.
	At top level, exit from EMACS like ^R Return to Superior, which see.

Control-Space
	runs the function ^R Set/Pop Mark.
	Sets or pops the mark.
	With no ^U's, pushes . as the mark.
	With one ^U, pops the mark into .
	With two ^U's, pops the mark and throws it away.

Control-%
	runs the function ^R Replace String.
	Replace string with another.  Reads args with minibuffer.
	Calls the Replace String command. 

Control-;
	runs the function ^R Indent for Comment.
	Move to or create comment.
	Moves to start of existing comment or creates new one,
	and indents it to start in Comment Column.
	An existing double semicolon comment
	is aligned like a line of code.  
	An existing triple semicolon comment is not moved.
	An existing comment starting in column 0 is not moved.
	With argument <n>, aligns the existing comments in the
	next <n> lines, but does not create comments.
	Comment Begin holds the string inserted to start a comment.
	Comment Start holds the string recognized as starting an old one.
	Comment End holds the string inserted to end a comment.
	Comment Rounding holds the macro used when the code goes
	past the comment column, to compute a new (larger) comment column
	from the width of the code (default is "+1").

Control-<
	runs the function ^R Mark Beginning.
	Set mark at beginning of buffer.

Control-=
	runs the function What Cursor Position.
	Print various things about where cursor is.
	Print the X position, the Y position,
	the octal code for the following character,
	point absolutely and as a percentage of the total file size,
	and the virtual boundaries, if any.

Control->
	runs the function ^R Mark End.
	Set mark at end of buffer.

Control-@
	runs the function ^R Set/Pop Mark.
	Sets or pops the mark.
	With no ^U's, pushes . as the mark.
	With one ^U, pops the mark into .
	With two ^U's, pops the mark and throws it away.

Control-A
	runs the built-in function ^R Beginning of Line.
	Move point to beginning of line.

Control-B
	runs the built-in function ^R Backward Character.
	Move back one character.
	With argument, move that many characters backward.
	Negative args move forward.

Control-C
	runs the function ^R Prefix Control-Meta.
	Sets Control- and Meta-bits of following character.
	Turns a following A (or C-A) into a Control-Meta-A.
	A precomma argument means return the modified character;
	otherwise, we execute its definition.

Control-D
	runs the built-in function ^R Delete Character.
	Delete character after point.
	With argument, kill that many characters (saving them).
	Negative args kill characters backward.

Control-E
	runs the built-in function ^R End of Line.
	Move point to end of line.

Control-F
	runs the built-in function ^R Forward Character.
	Move forward one character.
	With argument, move that many characters forward.
	Negative args move backward.

Control-G
	runs the built-in function ^R Quit.
	Abort execution of any command.
	Discards any numeric argument, prefix characters,
	or partially typed command.  Stops running commands instantly.

Control-K
	runs the function ^R Kill Line.
	Kill to end of line, or kill an end of line.
	At the end of a line (only blanks following) kill through the CRLF.
	Otherwise, kill the rest of the line but not the CRLF.
	With argument (positive or negative), kill specified number of lines.
	An argument of zero means kill to beg of line, nothing if at beg.
	Killed text is pushed onto the kill ring for retrieval.

Control-L
	runs the function ^R New Window.
	Choose new window putting point at center, top or bottom.
	With no argument, chooses a window to put point at the center
	(FS %CENTER says where).  An argument gives the line to put
	point on;  negative args count from the bottom.
	C-U as argument redisplays the line containing point.

Control-M
	runs the built-in function ^R Self Insert for Formatting Character.
	Insert the character used to invoke this.
	Always simply inserts, even in overwrite mode.

Control-N
	runs the function ^R Down Real Line.
	Move down vertically to next real line.
	Continuation lines are skipped.  If given after the
	last LF in the buffer, makes a new one at the end.

Control-O
	runs the built-in function ^R Open Line.
	Insert a CRLF after point.
	Differs from ordinary insertion in that point remains
	before the inserted characters.
	With argument, inserts several CRLFs.

Control-P
	runs the function ^R Up Real Line.
	Move up vertically to next real line.
	Continuation lines are skipped.

Control-Q
	runs the function ^R Quoted Insert.
	Reads a character and inserts it.

Control-R
	runs the function ^R Reverse Search.
	Incremental Search Backwards.
	Like ^R Incremental Search but in reverse.

Control-S
	runs the function ^R Incremental Search.
	Search for character string as you type it.
	C-Q quotes special characters.  Rubout cancels last character.
	C-S repeats the search, forward, and C-R repeats it backward.
	C-R or C-S with search string empty changes the direction of search
	or brings back search string from previous search.
	Altmode exits the search; with search string empty
	it switches to non-incremental ^R String Search.
	Other Control and Meta chars exit the search and then are executed.
	If not all the input string can be found, the rest is not discarded.
	You can rub it out, discard it all with C-G, exit,
	or use C-R or C-S to search the other way.
	Quitting a successful search aborts the search and moves point back;
	quitting a failing search just discards whatever input wasn't found.

Control-T
	runs the function ^R Transpose Characters.
	Transpose the characters before and after the cursor.
	For more details, see ^R Transpose Word, reading "character" for "word".
	However: at the end of a line, with no argument, the preceding
	two characters are transposed.

Control-U
	runs the function ^R Universal Argument.
	Sets argument or multiplies it by four.
	Followed by digits, uses them to specify the
	argument for the command after the digits.
	If not followed by digits, multiplies the argument by four.

Control-V
	runs the function ^R Next Screen.
	Move down to display next screenful of text.
	With argument, moves window down <arg> lines (negative moves up).
	Just minus as an argument moves up a full screen.

Control-W
	runs the function ^R Kill Region.
	Kill from point to mark.
	Use ^R Un-Kill and ^R Un-Kill Pop to get it back.

Control-X
	is an escape prefix command with these subcommands:

  ^X ^B runs the function List Buffers.
	List numbers, names, files and modes of all buffers.
  ^X ^C runs the function ^R Return to Superior.
	Go back to EMACS's superior job.
	With argument, saves visited file first.
	Otherwise, does auto save if auto save mode is on.
	Runs Exit Hook (if any) going out,
	and Return from Superior Hook coming back.
  ^X ^D runs the function ^R Directory Display.
	Display current buffer's file's directory.
	Uses whatever directory display macro the user has
	selected (value of Directory Lister).  With non-zero argument,
	reads directory name from terminal.
  ^X ^F runs the function Find File.
	Visit a file in its own buffer.
	If the file is already in some buffer, select that buffer.
	Otherwise, visit the file in a buffer named after the file.
  ^X Tab runs the function ^R Indent Rigidly.
	Shift text in region sideways as a unit.
	All the lines in the region (first character between point and mark)
	have their indentation incremented by the numeric argument
	of this command (which may be negative).
	Exception: lines containing just spaces and tabs become empty.
  ^X ^L runs the function ^R Lowercase Region.
	Convert point to mark to lower case.
  ^X ^N runs the function ^R Set Goal Column.
	Set (or flush) a permanent goal for vertical motion.
	With no argument, makes the current column the goal for vertical
	motion commands.  They will always try to go to that column.
	With argument, clears out any previously set goal.  Only
	^R Up Real Line and ^R Down Real Line are affected.
  ^X ^O runs the function ^R Delete Blank Lines.
	Kill all blank lines around this line's end.
	If done on a non-blank line, kills all spaces and tabs
	at the end of it, and all following blank lines
	(Lines are blank if they contain only spaces and tabs).
	If done on a blank line, deletes all preceding blank lines as well.
  ^X ^P runs the function ^R Mark Page.
	Put point at top of page, mark at end.
	A numeric arg specifies the page: 0 for current, 1 for next,
	-1 for previous, larger numbers to move many pages.
	Page Delimiter contains the string used to
	separate pages (or several alternatives, separated by ^O).
  ^X ^Q runs the function ^R Set File Read-Only.
	Make file read-only, or not.
	The argument or lack of one is interpreted just as by Visit File:
	no argument makes file writable, positive arg makes file read-only,
	negative arg makes file and buffer read-only.
  ^X ^R runs the function ^R Visit File.
	Visit new file in selected buffer.
	Nonzero numeric argument means file is read-only.
	Nonzero precomma argument means always at least offer to save old file.
	File name is string argument.
  ^X ^S runs the function ^R Save File.
	Save visited file on disk if modified.
	An argument means do an auto-save type save.
	"1," as argument indicates that this call was not explicitly
	requested, and the user should be asked to confirm if
	the file has become a lot smaller.  "2," means an Auto Save,
	which should abort rather than query if anything might be wrong.
  ^X ^T runs the function ^R Transpose Lines.
	Transpose the lines before and after the cursor.
	For more details, see ^R Transpose Words, reading "Line" for "Word".
  ^X ^U runs the function ^R Uppercase Region.
	Convert point to mark to upper case.
  ^X ^V runs the function ^R Visit File.
	Visit new file in selected buffer.
	Nonzero numeric argument means file is read-only.
	Nonzero precomma argument means always at least offer to save old file.
	File name is string argument.
  ^X ^W runs the function Write File.
	Store buffer in specified file.
	This file becomes the one being visited.
	Specify filename as string argument.
	Precomma arguments have hairy meanings; see the code.
  ^X ^X runs the function ^R Exchange Point and Mark.
	Exchange positions of point and mark.
  ^X Altmode runs the function ^R Re-execute Minibuffer.
	Re-execute the last minibuffered commands.
	With a numeric argument N, re-executes the N'th most recent minibuffer.
  ^X # runs the function ^R Change Font Region.
	Puts the region in a different font (R).
	The font to change to is specified with a numeric argument.
	Inserts ^F<n> before and ^F* after.
	A negative arg removes font changes in or next to region.
  ^X ( runs the function ^R Start Kbd Macro.
	Begin defining a keyboard macro.
	This version just loads the KBDMAC library and then calls it.
  ^X . runs the function ^R Set Fill Prefix.
	Defines Fill Prefix from current line.
	All of the current line up to point becomes the value
	of Fill Prefix.  Auto Fill Mode and Linefeed insert the
	prefix on each line;  ^R Fill Region assumes that each
	non-blank line starts with the prefix (which is ignored
	for filling purposes).
	To stop using a Fill Prefix, do ^R Set Fill Prefix
	at the front of a line.
  ^X 1 runs the function ^R One Window.
	Display only one window.
	Normally, we display what used to be in the top window,
	but a numeric argument says to display what was in the bottom one.
  ^X 2 runs the function ^R Two Windows.
	Show two windows and select window two.
	An argument > 1 means give window 2 the same buffer as in Window 1.
	A pre-comma argument means keep the cursor in window 1.
  ^X 3 runs the function ^R View Two Windows.
	Show two windows but stay in first.
  ^X 4 runs the function ^R Visit in Other Window.
	Find buffer, tag or file in other window.
	Follow this command by B or C-B and a buffer name,
	F or C-F and a file name, or T or . and a tag name.
	We find the buffer, tag or file in the other window,
	creating the other window if necessary.
  ^X ; runs the function ^R Set Comment Column.
	Set comment column to num arg or current hpos.
	Just C-U as argument sets comment column from position of previous comment
	and then makes or moves a comment to that position on this line.
  ^X = runs the function What Cursor Position.
	Print various things about where cursor is.
	Print the X position, the Y position,
	the octal code for the following character,
	point absolutely and as a percentage of the total file size,
	and the virtual boundaries, if any.
  ^X A runs the function ^R Append to Buffer.
	Append region to specified buffer.
	The buffer's name is read from the tty;  it is created if nonexistent.
	A numeric argument causes us to "prepend" instead.
	We always insert the text at that buffer's pointer, but when
	"prepending" we leave the pointer before the inserted text.
  ^X B runs the function Select Buffer.
	Select or create buffer with specified name.
	Can accept the buffer name as a string arg, or the buffer number
	as a numeric arg, or a string pointer as arg (when used as a subroutine).
	If there is a buffer with that name, it is selected.
	Otherwise, a buffer with that name is created and selected.
	When a new buffer is selected the first time, if Buffer Creation Hook
	is nonzero, it is run after the buffer is selected.
	A precomma arg is the prompt string to use.
  ^X D runs the function ^R Dired.
	Run Dired for the directory of the current visited file.
	With no argument, edits that directory.
	With an argument of 1, shows only the versions of the file in the buffer.
	With an argument of 4, asks for input, which may contain device colon,
	directory semicolon, and a file name, only versions of that file are shown.
  ^X F runs the function ^R Set Fill Column.
	Set fill column to numeric arg or current column.
	If there is an argument, that is used.
	Otherwise, the current position of the cursor is used.
	The Fill Column variable controls where Auto Fill mode
	and ^R Fill Paragraph put the right margin.
  ^X G runs the function ^R Get Q-reg.
	Get contents of Q-reg (reads name from tty).
	Usually leaves the pointer before, and the mark after, the text.
	With argument, puts point after and mark before.
	A precomma argument becomes the first character of the q-reg name.
  ^X H runs the function ^R Mark Whole Buffer.
	Set point at beginning and mark at end of buffer.
	Pushes the old point on the mark first, so two pops restore it.
	With arg, puts point at end and mark at beginning.
  ^X I runs the function ^R Info.
	Invoke INFO.
  ^X K runs the function Kill Buffer.
	Kill the buffer with specified name.
	Takes name as a string (suffix) argument, or reads it from terminal.
	Alternatively, the name (as string pointer) or the buffer
	number may be given as a prefix argument.
	If the buffer has changes in it, we offer to write it out.
  ^X L runs the function ^R Count Lines Page.
	Count lines on this page (or whole buffer).
	Print total lines on page, then (before+after) indicating how
	the page is split by point.
	With argument, we do the same thing to the whole buffer.
  ^X M runs the function Send Mail.
	Mail a message, using your favorite mail-reading program.
	If you abort the message, you can resume by giving this
	command a nonzero argument.
	Refer to the Read Mail command.
  ^X N runs the function ^R Narrow Bounds to Region.
	Narrow buffer bounds to point and mark.
  ^X O runs the function ^R Other Window.
	Switch to the other window.
	In two-window mode, moves cursor to other window.
	In one-window mode, exchanges contents of visible window
	with remembered contents of (invisible) window two.
	An argument means switch windows but select the same
	buffer in the other window.
  ^X P runs the function ^R Narrow Bounds to Page.
	Narrow buffer bounds to display one page.
	Numeric arg specifies which page:  0 means this one,
	1 means the next one, -1 means the previous one.
	No arg means next page, or current page if bounds are wide open.
	Args larger than one move several pages.
	Page Delimiter contains the string used to
	separate pages (or several alternatives, separated by ^O).
  ^X R runs the function Read Mail.
	Read mail using your favorite mail-reader.
	Passes a string argument to the mail-reader.
	If the variable Mail Reader Library exists,
	it is the name of the mail-reader library.
	Otherwise, on Twenex, if Mail Reader Program exists,
	run that program in a subfork; and an argument means
	kill the subfork.  The default is RMAIL on ITS, MM on Twenex.
	
	A precomma arg of 1 means just mail one message.
	A precomma arg of 2 tells RMAIL to exit to DDT when done.
  ^X T runs the function ^R Transpose Regions.
	Transpose regions defined by cursor and last 3 marks.
	To transpose two non-overlapping regions, set the mark successively at three
	of the four boundaries, put point at the fourth, and call this function.
	On return, the cursor and saved marks retain their original order, but are
	adjusted to delineate the interchanged regions.  Thus two consecutive
	calls to this function will leave the buffer unchanged.
  ^X W runs the function ^R Set Bounds Full~.
	Widen virtual bounds to display whole buffer.
  ^X X runs the function ^R Put Q-reg.
	Put point to mark into q-reg (reads name from tty).
	With an argument, the text is also deleted.
	A precomma argument becomes the first character of the q-reg name.
  ^X [ runs the function ^R Previous Page.
	Move to previous page delimiter.
	See the description of ^R Mark Page.
  ^X ] runs the function ^R Next Page.
	Move to next page delimiter.
	See the description of ^R Mark Page.
  ^X ^ runs the function ^R Grow Window.
	Make this window (or minibuffer) use more lines.
	Argument is number of extra lines (can be negative).
  ^X _ runs the function ^R Underline Region.
	Puts underlines a la R around the region.
	A negative argument removes underlines in or next to region.
	Underline Begin and Underline End may be set to the strings
	or characters to be used to begin and end underlines.
  ^X Rubout runs the function ^R Backward Kill Sentence.
	Kills back to beginning of sentence.
	Accepts numeric argument of either sign.

Control-Y
	runs the function ^R Un-kill.
	Re-insert the last stuff killed.
	Puts point after it and the mark before it.
	An argument n says un-kill the n'th most recent
	string of killed stuff (1 = most recent).  A null
	argument (just C-U) means leave point before, mark after.

Control-Z
	runs the function ^R Return to Superior.
	Go back to EMACS's superior job.
	With argument, saves visited file first.
	Otherwise, does auto save if auto save mode is on.
	Runs Exit Hook (if any) going out,
	and Return from Superior Hook coming back.

Control-\
	runs the function ^R Prefix Meta.
	Sets Meta-bit of following character. 
	Turns a following A into a Meta-A.
	If the Metizer character is Altmode, it turns ^A
	into Control-Meta-A.  Otherwise, it turns ^A into plain Meta-A.
	A precomma argument means return the modified character;
	otherwise, we execute its definition.
	The value of the arg should be the metizer character itself
	so we can tell whether it was an altmode.

Control-]
	runs the function Abort Recursive Edit.
	Abnormal exit from recursive editing command.
	The recursive edit is exited and the command that invoked it is aborted.
	For a normal exit, you should use ^R Exit, NOT this command.
	The command can put a string in Abort Resumption Message
	to tell the user how to resume the command after aborting it.

Control-^
	runs the function ^R Prefix Control.
	Sets Control-bit of following character.
	This command followed by an = is equivalent to a Control-=.
	A precomma argument means return the modified character;
	otherwise, we execute its definition.

Meta-Linefeed
	runs the function ^R Indent New Comment Line.
	Inserts CRLF, then starts new comment.
	The indentation and the number of comment-start characters
	are copied from the previous line's comment.
	If done when not in a comment, acts like ^R Indent New Line.

Meta-Return
	runs the function ^R Back to Indentation.
	Move to end of this line's indentation.

Meta-Altmode
	runs the function ^R Execute Minibuffer.
	Read and run TECO commands.
	Uses the minibuffer to read them.  Pushes the command string
	onto a ring buffer in Q.N.  An explicit argument initializes
	the minibuffer with the command from the top of that ring buffer.
	Once inside the minibuffer, ^R Prefix Control-Meta C-Y pops to previous saved
	minibuffer commands, going around the ring.

Meta-#	runs the function ^R Change Font Word.
	Puts the previous word in a different font (R).
	The font to change to is specified with a numeric argument.
	No arg means move last font change forward past next word.
	A negative arg means move last font change back one word.

Meta-$	runs the function ^R Correct Word Spelling.
	Check and correct spelling of previous word.
	g(m.aAUX~DOC~ & Correct Word Spelling)jk

Meta-%	runs the function ^R Query Replace.
	Query Replace using the minibuffer.
	Calls the Query Replace command. 

Meta-'	runs the function ^R Upcase Digit.
	Convert last digit to shifted character.
	Looks on current line back from point, and previous line.
	The first time you use this command, it asks you to type
	the row of digits from 1 to 9 and then 0, holding down Shift,
	to determine how your keyboard is set up.

Meta-(	runs the function ^R Make ().
	Insert () putting point between them.
	Also make a space before them if appropriate.
	With argument, put the ) after the specified number
	of already existing s-expressions.  Thus, with argument 1,
	puts extra parens around the following s-expression.

Meta-)	runs the function ^R Move Over ).
	Move over a ), updating indentation.
	Any indentation before the ) is deleted.
	LISP-style indentation is inserted after the ).

Meta-.	runs the function ^R Find Tag.
	Jump to the definition of a tag.
	This version loads the TAGS package and then calls it.

Meta-/	runs the function ^R Describe.
	Prints the documentation of a command (not a function).
	The command character is read from the terminal.
	Alternatively, the command char and definition may be fed as
	numeric args, in which case the character's name is not printed.

Meta-;	runs the function ^R Indent for Comment.
	Move to or create comment.
	Moves to start of existing comment or creates new one,
	and indents it to start in Comment Column.
	An existing double semicolon comment
	is aligned like a line of code.  
	An existing triple semicolon comment is not moved.
	An existing comment starting in column 0 is not moved.
	With argument <n>, aligns the existing comments in the
	next <n> lines, but does not create comments.
	Comment Begin holds the string inserted to start a comment.
	Comment Start holds the string recognized as starting an old one.
	Comment End holds the string inserted to end a comment.
	Comment Rounding holds the macro used when the code goes
	past the comment column, to compute a new (larger) comment column
	from the width of the code (default is "+1").

Meta-<	runs the function ^R Goto Beginning.
	Go to beginning of buffer (leaving mark behind).
	With arg from 0 to 10, goes that many tenths of the file
	down from the beginning.  Just C-U as arg means go to end.

Meta-=	runs the function ^R Count Lines Region.
	Type number of lines from point to mark.

Meta->	runs the function ^R Goto End.
	Go to end of buffer (leaving mark behind).
	With arg from 0 to 10, goes up that many tenths of the file from the end.

Meta-?	runs the function ^R Describe.
	Prints the documentation of a command (not a function).
	The command character is read from the terminal.
	Alternatively, the command char and definition may be fed as
	numeric args, in which case the character's name is not printed.

Meta-@	runs the function ^R Mark Word.
	Set mark 1 (or n) words from point.

Meta-A	runs the function ^R Backward Sentence.
	Move to beginning of sentence.
	A sentence is ended by a ., ? or ! followed by
	two spaces or a CRLF (with optional space), with
	any number of "closing characters" ", ', ) and ] between.
	A sentence also starts at the start of a paragraph.

Meta-B	runs the function ^R Backward Word.
	Move backward over one word

Meta-C	runs the function ^R Uppercase Initial.
	Put next word in lower case, but capitalize initial.
	With arg, applies to that many words backward or forward.
	If backward, the cursor does not move.

Meta-D	runs the function ^R Kill Word.
	Kill next word.

Meta-E	runs the function ^R Forward Sentence.
	Move to end of this sentence.
	A sentence is ended by a ., ? or ! followed by
	two spaces or a CRLF (with optional space), with
	any number of "closing characters" ", ', ) and ] between.
	A sentence also ends at the end of a paragraph.

Meta-F	runs the function ^R Forward Word.
	Move forward over one word

Meta-G	runs the function ^R Fill Region.
	Fill text from point to mark.
	Fill Column specifies the desired text width.
	Fill Prefix if nonzero is a string that goes
	at the front of each line and is not included in the filling.
	See ^R Set Fill Column and ^R Set Fill Prefix.
	An explicit positive argument causes adjusting instead of filling.
	Fill Extra Space List lists the punctuations which get two spaces.

Meta-H	runs the function ^R Mark Paragraph.
	Put point and mark around this paragraph.
	In between paragraphs, puts it around the next one.  See documentation
	on ^R Backward Paragraph for paragraph definition.

Meta-I	runs the function ^R Tab to Tab Stop.
	Insert filling till next tab stop.
	Filling may be whitespace, or an arbitrary pattern of characters,
	as controlled by the tab stop definitions.  See Edit Tab Stops,
	which is used to define the tab stops for this function.

Meta-J	runs the function ^R Indent New Comment Line.
	Inserts CRLF, then starts new comment.
	The indentation and the number of comment-start characters
	are copied from the previous line's comment.
	If done when not in a comment, acts like ^R Indent New Line.

Meta-K	runs the function ^R Kill Sentence.
	Kill forward to end of sentence.
	Accepts numeric argument of either sign.

Meta-L	runs the function ^R Lowercase Word.
	Convert one word to lower case, moving past it.
	With arg, applies to that many words backward or forward.
	If backward, the cursor does not move.

Meta-M	runs the function ^R Back to Indentation.
	Move to end of this line's indentation.

Meta-N	runs the function ^R Down Comment Line.
	Move to start of next line's comment.
	Equivalent to ^R Down Real Line followed by ^R Indent For Comment.

Meta-P	runs the function ^R Up Comment Line.
	Move to start of previous line's comment.
	Equivalent to ^R Up Real Line followed by ^R Indent For Comment.

Meta-Q	runs the function ^R Fill Paragraph.
	Fill (or adjust) this (or next) paragraph.
	Point stays the same (but text may move past it due to filling).
	A positive numeric argument says adjust rather than fill.

Meta-R	runs the function ^R Move to Screen Edge.
	Jump to top or bottom of screen.
	Like ^R New Window except that point is changed instead of the window.
	With no argument, jumps to the center, according to FS %CENTER.
	An argument specifies the number of lines from the top,
	(negative args count from the bottom).

Meta-S	runs the function ^R Center Line.
	Center this line's text within the line.
	With argument, centers that many lines and moves past.
	The width is Fill Column.

Meta-T	runs the function ^R Transpose Words.
	Transpose the words before and after the cursor.
	With a positive argument it transposes the words before and
	after the cursor, moves right, and repeats the specified number of
	times, dragging the word to the left of the cursor right.  With a
	negative argument, it transposes the two words to the left of
	the cursor, moves between them, and repeats the specified number of
	times, exactly undoing the positive argument form.  With a zero
	argument, it transposes the words at point and mark.

Meta-U	runs the function ^R Uppercase Word.
	Convert one word to upper case, moving past it.
	With arg, applies to that many words backward or forward.
	If backward, the cursor does not move.

Meta-V	runs the function ^R Previous Screen.
	Move up to display previous screenful of text.
	With arg, move window back <arg> lines.

Meta-W	runs the function ^R Copy Region.
	Stick region into kill-ring without killing it.
	Like killing and getting back, but doesn't mark buffer modified.

Meta-X	runs the function ^R Extended Command.
	Read an extended command from the terminal with completion.
	This command reads the name of a function, with completion,
	followed by the string arguments for the function.  Then the
	function is called.  Completion is done as the function name is typed
	(for more information type the HELP key while entering the name).
	Follow the function name with a  and then the arguments; end with <cr>.
	For customization info see the source code.

Meta-Y	runs the function ^R Un-kill Pop.
	Correct after ^R Un-kill to use an earlier kill.
	Requires that the region contain the most recent killed stuff,
	as it does immediately after using ^R Un-kill.
	It is deleted and replaced with the previous killed stuff,
	which is rotated to the front of the ring buffer in ..K.
	With 0 as argument, just deletes the region with no replacement,
	but the region must still match the last killed stuff.

Meta-[	runs the function ^R Backward Paragraph.
	Move backward to start of paragraph.
	Paragraphs are delimited by blank lines or by lines which
	start with a delimiter in Paragraph Delimiter or in Page Delimiter.
	If there is a fill prefix, any line that doesn't start with it
	starts a paragraph.
	Lines which start with ".", "\", "-", "@" or "'", if that
	first character is matched by Paragraph Delimiter, count as
	blank lines in that they separate paragraphs and are not part of them.

Meta-\	runs the function ^R Delete Horizontal Space.
	Delete all spaces and tabs around point.

Meta-]	runs the function ^R Forward Paragraph.
	Move forward to end of paragraph.
	See documentation on ^R Backward Paragraph.

Meta-^	runs the function ^R Delete Indentation.
	Kill CRLF and indentation at front of line.
	Leaves one space in place of them.  With argument,
	moves down one line first (killing CRLF after current line).

Meta-_	runs the function ^R Underline Word.
	Puts underlines around the previous word (R).
	If there is an underline begin or end near that word,
	it is moved forward one word.
	An argument specifies the number of words, and the direction:
	positive means forward.
	Underline Begin and Underline End may be set to the strings
	or characters to be used to begin and end underlines.

Meta-~	runs the function ^R Buffer Not Modified.
	Pretend that this buffer hasn't been altered.

Meta-Rubout
	runs the function ^R Backward Kill Word.
	Kill last word.

Control-Meta-Backspace
	runs the function ^R Mark Defun.
	Put point and mark around this defun (or next).

Control-Meta-Tab
	runs the function ^R Indent for LISP.
	Indent this line for a Lisp-like language.
	With arg, moves over and indents that many lines.
	The variable Lisp Indent Language (default "Lisp") controls the dialect.
	Handlers may be defined per-dialect to make this function win for other
	Lisp-like languages.  With a pre-comma arg, return indentation level instead
	of changing anything and don't treat ;;; comments specially.

Control-Meta-Return
	runs the function ^R Back to Indentation.
	Move to end of this line's indentation.

Control-Meta-Altmode
	runs the built-in function ^R Self Insert.
	Insert the character used to invoke this.
	With an argument, insert the character that many times.
	The precise operation is affected by whether Overwrite mode is in effect.

Control-Meta-(
	runs the function ^R Backward Up List.
	Move up one level of list structure, backward.

Control-Meta-)
	runs the function ^R Forward Up List.
	Move up one level of list structure, forward.

Control-Meta-;
	runs the function ^R Kill Comment.
	Kills the comment (if any) on the current line.
	With argument, applies to specified number of lines, and moves past them.

Control-Meta-?
	runs the function ^R Documentation.
	General source of helpful information.

Control-Meta-@
	runs the function ^R Mark Sexp.
	Set mark 1 (or n) s-expressions from point.

Control-Meta-A
	runs the function ^R Beginning of Defun.
	Move to beginning of this or previous defun.
	Leaves the mark behind, in case typed by accident.
	With a negative argument, moves forward to the beginning of a defun.
	The beginning of a defun is any ( in column 0.

Control-Meta-B
	runs the function ^R Backward Sexp.
	Move backward past one S-expression (or several).

Control-Meta-C
	runs the built-in function ^R Exit.
	Exit normally from a subsystem or a level of editing.
	At top level, exit from EMACS like ^R Return to Superior, which see.

Control-Meta-D
	runs the function ^R Down List.
	Move down one level of list structure, forward.

Control-Meta-E
	runs the function ^R End of Defun.
	Move to end of this or next defun.
	Leaves the mark behind, in case typed by accident.
	With argument of 2, finds end of following defun.
	With argument of -1, finds end of previous defun, etc.
	A defun is a list whose ( falls in column 0.
	Its end is after the CRLF following its ).

Control-Meta-F
	runs the function ^R Forward Sexp.
	Move forward past one S-expression (or several).

Control-Meta-G
	runs the function ^R Format Code.
	Calls Grind Sexp or MACSYMA Grind depending on the current MODE.

Control-Meta-H
	runs the function ^R Mark Defun.
	Put point and mark around this defun (or next).

Control-Meta-I
	runs the function ^R Indent for LISP.
	Indent this line for a Lisp-like language.
	With arg, moves over and indents that many lines.
	The variable Lisp Indent Language (default "Lisp") controls the dialect.
	Handlers may be defined per-dialect to make this function win for other
	Lisp-like languages.  With a pre-comma arg, return indentation level instead
	of changing anything and don't treat ;;; comments specially.

Control-Meta-K
	runs the function ^R Kill Sexp.
	Kill next s-expression.

Control-Meta-M
	runs the function ^R Back to Indentation.
	Move to end of this line's indentation.

Control-Meta-N
	runs the function ^R Forward List.
	Move forward past one list (or several).

Control-Meta-O
	runs the function ^R Split Line.
	Move rest of this line vertically down.
	Inserts a CRLF, and then enough tabs/spaces so that
	what had been the rest of the current line is indented as much as
	it had been.  Point does not move, except to skip over indentation
	that originally followed it. 
	With argument, makes extra blank lines in between.

Control-Meta-P
	runs the function ^R Backward List.
	Move backward past one list (or several).

Control-Meta-Q
	runs the function ^R Indent SEXP.
	Lisp Indent each line contained in the next s-expr.
	A numeric argument temporarily sets LISP Indent Offset.
	A pre-comma argument means indent this line and all
	remaining lines up to Z (used by <n>Tab as subroutine).

Control-Meta-R
	runs the function ^R Reposition Window.
	Reposition screen window appropriately.
	Tries to get all of current paragraph, defun, etc. on screen.
	Never moves the pointer.

Control-Meta-T
	runs the function ^R Transpose Sexps.
	Transpose the S-expressions before and after the cursor.
	For more details, see ^R Transpose Words, reading "Sexp" for "Word".

Control-Meta-U
	runs the function ^R Backward Up List.
	Move up one level of list structure, backward.

Control-Meta-V
	runs the function ^R Scroll Other Window.
	Scroll other window up several lines.
	Specify the number as a numeric argument, negative for down.
	The default is a whole screenful up.  Just Meta-Minus as argument
	means scroll a whole screenful down.

Control-Meta-W
	runs the function ^R Append Next Kill.
	Make following kill commands append to last batch.
	Thus, C-K C-K, cursor motion, this command, and C-K C-K,
	generate one block of killed stuff, containing two lines.

Control-Meta-X
	runs the function ^R Instant Extended Command.
	Run extended command; let it read its own arguments.
	This command is the same as ^R Extended Command except that
	it does not read any string arguments; the function itself does so.
	This allows special processing such as completion to be done
	on arguments which are function names or filenames.

Control-Meta-[
	runs the function ^R Beginning of Defun.
	Move to beginning of this or previous defun.
	Leaves the mark behind, in case typed by accident.
	With a negative argument, moves forward to the beginning of a defun.
	The beginning of a defun is any ( in column 0.

Control-Meta-\
	runs the function ^R Indent Region.
	Indent all lines between point and mark.
	With argument, indents each line to exactly that column.
	Otherwise, does Tab on each line.
	A line is processed if its first character is in the region.
	The mark is left after the last line processed.
	May be given a subroutine to use on each line instead of
	indenting by making the subroutine a prefix arg before a
	comma.  The subroutine should not move down a line.  It can
	expect MM & Indent to be in QK.

Control-Meta-]
	runs the function ^R End of Defun.
	Move to end of this or next defun.
	Leaves the mark behind, in case typed by accident.
	With argument of 2, finds end of following defun.
	With argument of -1, finds end of previous defun, etc.
	A defun is a list whose ( falls in column 0.
	Its end is after the CRLF following its ).

Control-Meta-^
	runs the function ^R Delete Indentation.
	Kill CRLF and indentation at front of line.
	Leaves one space in place of them.  With argument,
	moves down one line first (killing CRLF after current line).

Control-Meta-Rubout
	runs the function ^R Backward Kill Sexp.
	Kill last s-expression.



Commands in file EMACS:

Apropos
   C	M-X AproposFOO<cr> lists functions with names containing FOO.
	If you supply a numeric argument, subroutines and
	MM ... variables are not mentioned.

Where Is
   C	List the commands that run a given function.
	M-X Where Is^R Forward Word<cr> will tell which character
	moves forward one word.  You can supply the function as a
	numeric arg instead of the name as a string arg.

Info
   C	Read documentation files using INFO.
	Non-null string arg is pathname made out of Menu item names
	separated by spaces.

List Loaded Libraries
   C	List all loaded libraries' names.

List Variables
   C	List names and values of all or some variables.
	A suffix string argument is a substring to filter variable names with.
	Given a buffer as a prefix argument, we insert the list into it.
	Any arg inhibits the initial header and final "Done".
	A nonzero precomma arg says consider only vars whose names start
	with "MM ".

Describe
   C	M-X DescribeFOO<cr> documents function FOO.
	Prints the full name and full documentation
	of the specified function or variable name.
	The function to be described can also be given as a prefix arg
	in TECO code, as in M.MFOO MMDescribe, and if a character is being
	described, it can be specified by the pre-comma prefix arg, either
	as a 9-bit number or a string giving a q-register name.

List Redefinitions
   C	Describe how current mode differs from fundamental.
	All variables and commands which are redefined locally
	in this buffer are described briefly.

Tecdoc
   C	Document TECO command.
	g(m.aPURIFY~DOC~ Tecdoc)jk

LISP Mode
   C	Set things up for editing LISP code.
	Puts ^R Indent for LISP on Tab, puts tab-hacking rubout on Rubout.
	Paragraphs are delimited only by blank lines.

MIDAS Mode
   C	Set things up for editing MIDAS code.
	C-M-N and C-M-P go to next and previous label.
	C-M-A and C-M-E go to AC and EA fields, respectively.
	C-M-D deletes next word and its terminator (eg, "FOO:").
	Paragraphs are delimited only by blank lines.

TECO Mode
   C	Set things up for editing TECO code.
	g(m.aPURIFY~DOC~ TECO Mode)jk

TEX Mode
   C	Set up for editing TEX input files.
	g(m.aTEX~DOC~ TEX Mode)jk

Scribe Mode
   C	Set up for editing Scribe source text.
	g(m.aSCRIBE~DOC~ Scribe Mode)jk

Text Mode
   C	Set things up for editing English text.
	Tab does ^R Tab to Tab Stop.  There are no comments.
	Auto Fill does not indent new lines.

Edit Tabular Text
   C	Temporarily set up for editing a table.
	Makes Auto Fill indent the next line,
	makes Tab be ^R Tab to Tab Stop.

Edit Indented Text
   C	Temporarily set up for editing indented text.
	Good when body of text is indented, but topics appear at the margin.
	Tab is ^R Indent Relative;  auto fill indents lines.
	Paragraphs start only with blank lines.  Rubouts hack tabs.

Fundamental Mode
   C	Return to EMACS's initial mode.

Macsyma Mode
   C	Enter a mode for editing Macsyma code.
	Modifies the delimiter dispatch, ..D, appropriate for Macsyma syntax,
	puts special rubout on rubout, sets parameters for comment hackery,
	and defines Tab to be ^R Indent Nested.

MUDDLE Mode
   C	Enter a mode for editing MUDDLE code.
	g(m.aMUDDLE~DOC~ Muddle Mode)jk

PL1 Mode
   C	Set up to edit PL/1 code.
	g(m.aPL1~DOC~ PL1 Mode)jk

Debug Mode
   C	Invoke TDEBUG for debugging TECO code.
	Show two windows with buffer in window 1, and current function code
	in window 2.  Meta-D gets minibuffer which is stepped through.
	Arg is line number to split screen at.

Auto Fill Mode
   C	Break lines between words at the right margin.
	A positive argument turns Auto Fill mode on;
	zero or negative, turns it off.  With no argument, the mode is toggled.
	When Auto Fill mode is on, lines are broken at spaces
	to fit the right margin (position controlled by Fill Column).
	You can set the Fill Column with the ^R Set Fill Column.

Atom Word Mode
   C	Make word commands deal with LISP atoms.
	A positive argument turns Atom Word mode on;
	zero or negative, turns it off.  With no argument, the mode is toggled.
	When Atom Word mode is on, word commands define a word to mean
	a Lisp atom.  This affects which characters are delimiters.

Overwrite Mode
   C	Make printing characters overwrite existing text.
	A positive argument turns Atom Word mode on;
	zero or negative, turns it off.  With no argument, the mode is toggled.
	In overwrite mode, printing characters replace a character
	instead of pushing the following characters over to the right.
	Rubout replaces the preceding character with a space.
	To insert use ^R Quoted Insert.

Indent Tabs Mode
   C	Enables or disables use of tabs as indentation.
	A positive argument turns use of tabs on;
	zero or negative, turns it off.
	With no argument, the mode is toggled.

SAIL Character Mode
   C	Enables or disables display of SAIL graphics.
	They are single-column graphics for characters 0 through 37.
	A positive argument turns display of SAIL graphics on;
	zero or negative, turns it off.
	With no argument, the mode is toggled.

Word Abbrev Mode
   C	Turns word abbreviation mode on or off.
	g(m.aWORDAB~DOC~ Word Abbrev Mode)jk

Read Word Abbrev File
   C	Load in file of word abbreviations.
	g(m.aWORDAB~DOC~ Read Word Abbrev File)jk

Replace String
   C	Replace one string with another, globally.
	M-X ReplaceFOOBAR replaces each FOO after point with a BAR.
	A numeric argument means replace only FOOs which are
	surrounded by delimiter characters.  Works by calling Query Replace
	and pretending you typed a !.

Query Replace
   C	Replace string, asking about each occurrence.
	M-X Query replaceFOOBAR displays the next FOO;  you say what to do.
	Space => replace it with BAR and show next FOO.
	Rubout => don't replace, but show next FOO.
	Comma => replace this FOO and show result, waiting for next command.
	Period => replace this FOO and exit.  Altmode => just exit.
	^ => return to site of previous FOO (actually, jump to mark).
	^W => kill this FOO and enter recursive editing level.
	^R => enter recursive editing level.  ^L => redisplay screen.
	Exclamation mark => replace all remaining FOOs without asking.
	Any other character exits and is read again.
	To restart Query Replace after exit,
	use ^R Re-execute Mini or run the minibuffer with an argument.
	If Case Replace is nonzero, BAR will be capitalized or all caps 
	if the FOO found was (but only if FOO is typed all lower case).
	With arg, Query Replace will replace only FOOs that are
	bounded on both sides by delimiter characters (according to ..D).
	The TECO expression 1,MM Query ReplaceFOOCommands executes Commands
	as TECO commands to perform the replacement.  The commands should return
	a pair of values which delimit the range of the buffer changed.  "H" is
	safe.  To include Altmodes in the commands, quote them with ^]'s.
	The commands can use Q2 and Q4 without saving them.

Keep Lines
   C	Delete all lines not containing specified string.
	Give the TECO search string to search for as a string argument.

Delete Non-Matching Lines
   C	Delete all lines not containing specified string.
	Give the TECO search string to search for as a string argument.

Flush Lines
   C	Delete all lines containing specified string.
	Give the TECO search string to search for as a string argument.

Delete Matching Lines
   C	Delete all lines containing specified string.
	Give the TECO search string to search for as a string argument.

List Matching Lines
   C	Displays text lines after point which contain a given string arg.
	An arg <n> means type <n> lines before and after each occurrence.

Count Occurrences
   C	Counts occurrences of a pattern, after point.
	Takes pattern as string arg.

Tabify
   C	Convert spaces after point to tabs.
	g(m.aAUX~DOC~ Tabify)jk

Untabify
   C	Converts all tabs after point to spaces.
	Numeric arg specifies tab stop spacing.

Load Library
   C	Load a library of functions.
	Takes filename as string arg;  default FN2 is :EJ.
	Tries both the specified (or home) directory and EMACS.
	An argument means don't run the library's & Setup function.
	Pre-comma argument means create variable <libname> Library Filename
	for Dump Environment's use.
	Returns a pointer to the file in core.

Run Library
   C	Run a specific function from a specific library file.
	M-X Run Library<Lib name><Function name> runs the function
	named <Function name> out of the library <Library name>,
	which is loaded temporarily (unless it is already in core).
	If <Function name> is null, "<ENTRY>" is used.
	TECO programs should use M.A instead of this function.

Kill Libraries
   C	Delete some loaded libraries from core.
	Offers to kill each library, one by one, most recently loaded first.
	Keeps asking until the first time you say no.
	Before killing a library, we call its & Kill <libname> Library
	function (if any) with string-pointer to the library as argument.

List Library
   C	List contents of a library not necessarily loaded.
	M-X List Library<filename> is the format.

Compare Windows
   C	Compare text in two windows.
	g(m.aAUX~DOC~ & Compare Windows)jk

DIRED
   C	Edit a directory.
	g(m.aDIRED~DOC~ & DIRED Enter)jk

Edit Directory
   C	Edit a directory.
	g(m.aDIRED~DOC~ & DIRED Enter)jk

Reap File
   C	Delete old versions of a file.
	g(m.aDIRED~DOC~ Reap File)jk

Clean Directory
   C	Delete old versions in a directory.
	g(m.aDIRED~DOC~ Clean Directory)jk

Compare Directories
   C	Compare directories on different ITS machines.
	fsosteco"n iNot implemented on Twenex.'
	   "# g(m.aDIRED~DOC~ Compare Directories)jk'

Kill Variable
   C	Eliminates definition of specified variable.

Edit Options
   C	Edit values of permanent options.
	Displays a table of the variables which are options,
	and their values, and lets you edit the values.
	A variable is an option if its comment starts with "*" or "!*".
	When you exit the recursive edit with ^R Exit, the values are updated.
	To abort, use Abort.

List Files
   C	Brief directory listing.
	g(m.aDIRED~DOC~ List Files)jk

List Directories
   C	List names of all disk directories.

RMAIL
   C	Read mail using your favorite mail-reader.
	Passes a string argument to the mail-reader.
	If the variable Mail Reader Library exists,
	it is the name of the mail-reader library.
	Otherwise, on Twenex, if Mail Reader Program exists,
	run that program in a subfork; and an argument means
	kill the subfork.  The default is RMAIL on ITS, MM on Twenex.
	
	A precomma arg of 1 means just mail one message.
	A precomma arg of 2 tells RMAIL to exit to DDT when done.

Read Mail
   C	Read mail using your favorite mail-reader.
	Passes a string argument to the mail-reader.
	If the variable Mail Reader Library exists,
	it is the name of the mail-reader library.
	Otherwise, on Twenex, if Mail Reader Program exists,
	run that program in a subfork; and an argument means
	kill the subfork.  The default is RMAIL on ITS, MM on Twenex.
	
	A precomma arg of 1 means just mail one message.
	A precomma arg of 2 tells RMAIL to exit to DDT when done.

Send Mail
   C	Mail a message, using your favorite mail-reading program.
	If you abort the message, you can resume by giving this
	command a nonzero argument.
	Refer to the Read Mail command.

Edit Syntax Table
   C	Delimiter syntax table editor.
	g(m.aAUX~DOC~ Edit Syntax Table)jk

View Variable
   C	Type out contents of q-register or variable.
	M-X View Var<variable name> is the format.

View Q-Register
   C	Type out contents of q-register or variable.
	M-X View Var<variable name> is the format.

View Buffer
   C	View a buffer moving by screenfulls.
	Buffer name is string argument; null arg means selected buffer.
	Space moves to next screen, Backspace moves back a screen.
	Return exits leaving point in current screen.
	Anything else exits and restores point to where it was before;
	and if it isn't Rubout, it is executed as a command.
	
	Also useful on fast storage scopes like the Tektronix.
	However, Backspace is only available on real displays.

View File
   C	View a file sequentially on the screen.
	Type Space to see the next screenful, or Backspace to back up.
	Anything else exits.  Spacing past last screenful exits.
	On non-displays, Backspace is not available.
	Does not set the file's reference date.
	
	Pre-comma argument means view the current buffer contents
	and don't change the buffer or Q..J.

Insert Date
   C	Insert the current time and date after point.
	A date in FS IF CDATE format can be given as a numeric
	argument, to use instead of the current date.
	The mark is put after the inserted text.

Visit Tag Table
   C	Select a tag table file.
	g(m.aTAGS~DOC~ & Visit Tag Table)jk

Dissociated Press
   C	Print interesting random text based on text in buffer.
	Arg is number of words of continuity at jumps,
	or minus number of characters of continuity.

Compile
   C	Recompile the file you are visiting.
	We first offer to write out each file, unless there is a numeric arg.
	A string arg is used to specify extra switches -- it may be null.
	How is compilation done?  If Compile Command is nonzero, it is
	executed as TECO commands.  It can find the filename in Q1.
	It MUST exit with a , as there will be things left on the stack for it.
	Otherwise, we run the compiler, taking its name from the variable
	Compiler Filename or the major mode, and taking switches from the
	variable Compiler Switches (default is no switches).  After running
	it, we execute After Compilation Hook if it is defined.

View Mail
   C	Read your own or other user's mail file.
	User name is string argument;  null means your own.
	Uses View File.

Undo
   C	Undo last major change, kill, or undo.
	Point is left before the undone change and the mark is left after.
	Insertion cannot be undone, nor deletion (as opposed to killing).
	If you change the buffer by insertion or deletion before you undo,
	you will get slightly wrong results, but probably still useful.
	A nonzero arg means don't query, just do it.

Set Variable
   C	Set the value of a named variable.
	The name of the variable is a string argument.
	If you supply a numeric argument, that is the new value.
	Otherwise, a second string is the new value.
	You may abbreviate the name of the variable
	if you are sure it already exists.

Set Key
   C	Put a function on a key.
	The function name is a string argument.
	The key is always read from the terminal (not a string argument).
	It may contain metizers and other prefix characters.

What Page
   C	Print the current page and line number in the file.

View Directory
   C	Print file directory.
	Takes directory name as string arg.
	Uses and sets the TECO default filenames.

Make Space
   C	Delete things to make space.
	Offers to delete the kill ring, buffers, etc.
	Even if you answer "no" to all offers,
	some internal wasted space is reclaimed.

What Available Space
   C	Print amount of free address space left.

Abort Recursive Edit
   C	Abnormal exit from recursive editing command.
	The recursive edit is exited and the command that invoked it is aborted.
	For a normal exit, you should use ^R Exit, NOT this command.
	The command can put a string in Abort Resumption Message
	to tell the user how to resume the command after aborting it.

Edit Tab Stops
   C	Edit the tab stops used by ^R Tab to Tab Stop.
	The bottom two lines just number the columns for your benefit.
	The first two lines, stored in Tab Stop Definitions, are meaningful.
	Periods or colons in the first line mark the tab stop columns.
	A colon means tab out with whitespace;  a period means tab out by
	copying text from the second line (you must put the text there).

Grind Sexp
   C	Grind the sexp after the pointer.
	g(m.aGRIND~DOC~ Grind Sexp)jk

Grind MACSYMA Code
   C	Format (indent) MACYSMA code. 
	g(m.aGRIND~DOC~ MACSYMA Grind)jk

Visit File
   C	Visit new file in selected buffer.
	File name is string argument.
	Nonzero numeric argument makes file read-only;
	negative makes buffer read-only too.
	Nonzero precomma argument means always at least offer to save old file.
	We execute Visit File Hook if it is nonzero.
	All visiting of files is by means of this function.

Find File
   C	Visit a file in its own buffer.
	If the file is already in some buffer, select that buffer.
	Otherwise, visit the file in a buffer named after the file.

Auto Save Mode
   C	Turn Auto Save on or off.
	Zero or negative argument => Auto Save mode is turned off.
	Positive argument => it is turned on.  No arg => toggle mode on or off.
	We save under the filenames you visited, if possible,
	when Auto Save Visited File is nonzero.  Otherwise, we save
	under the filenames in Auto Save Filename.
	When you visit a file, Auto Save is turned on or off according to
	the value of Auto Save Default.

Revert File
   C	Undo changes to a file.
	Reads back the file being edited from disk
	(or the most recent save file, if that isn't the same thing).
	A numeric argument means don't ignore the Auto Save files.
	A nonzero pre-comma argument waives confirmation.

Write Region
   C	Write region to file.
	Specify filenames with a suffix string argument.
	Two numeric arguments may be used to specify the region,
	which otherwise is from point to mark.

Write File
   C	Store buffer in specified file.
	This file becomes the one being visited.
	Specify filename as string argument.
	Precomma arguments have hairy meanings; see the code.

Set Visited Filename
   C	Change visited filename, without writing file.
	What EMACS believes to be the name of the visited file
	is set from a string argument.  No file's name is actually changed.

Delete File
   C	Delete a file.  Filename is argument.
	Invoke with ^R Instant Extended Command to see the defaults.

Kill File
   C	Delete a file.  Filename is argument.
	Invoke with ^R Instant Extended Command to see the defaults.

Copy File
   C	Copy a file.
	Arguments are old filename and new filename.
	The defaults are left set to the old filename.

Rename File
   C	Rename a file.
	Arguments are old filename and new filename.
	The defaults are left set to the old filename.

Insert File
   C	Insert contents of file into existing text.
	File name is string argument.  Example:  M-X Insert FileFOO BAR.
	The pointer is left at the beginning, and the mark at the end.

Append to File
   C	Append region to end of specified file.
	The range to write can also be specified with numeric args.

Prepend to File
   C	Append region to start of specified file.
	The range to write can also be specified with numeric args.

Make Prefix Character
   C	Make definition for a ^R command prefix.
	For usage conventions, look at the source code.

Backtrace
   C	View the functions which are active on the stack.
	Displays one invoked function, copied into a buffer,
	with point at the PC.  Then reads a command character:
	 Linefeed or D goes down the stack (to earlier invocations),
	 ^ or U goes up to more recent invocations,
	 ^R calls ^R on what you see,  ^L clears the screen,
	 B calls ^R on the buffer that was being edited,
	 V displays a q-register's contents,
	  runs a minibuffer, X starts an extended command, Q exits.
	 C continues erring function.  Period lets you move PC, then continues.

Top Level
   C	Return to the top level EMACS command loop or to TECO.
	With no arg, returns to the top level EMACS command loop.
	With an arg, returns to TECO's command level.

Select Buffer
   C	Select or create buffer with specified name.
	Can accept the buffer name as a string arg, or the buffer number
	as a numeric arg, or a string pointer as arg (when used as a subroutine).
	If there is a buffer with that name, it is selected.
	Otherwise, a buffer with that name is created and selected.
	When a new buffer is selected the first time, if Buffer Creation Hook
	is nonzero, it is run after the buffer is selected.
	A precomma arg is the prompt string to use.

List Buffers
   C	List numbers, names, files and modes of all buffers.

List Locals
   C	List a specific buffer's local variables' names.
	Takes name of buffer as a string argument.
	Default is current buffer.

Kill Buffer
   C	Kill the buffer with specified name.
	Takes name as a string (suffix) argument, or reads it from terminal.
	Alternatively, the name (as string pointer) or the buffer
	number may be given as a prefix argument.
	If the buffer has changes in it, we offer to write it out.

Make Local Variable
   C	Make a variable local to the current buffer.
	Example:  M.LFoo Variable (since this function lives in .L).
	The variable name must be given in full, not abbreviated.
	Its local value starts off the same as its global value.
	However, a numeric argument to this function sets the local value.
	"1," as arg means assume that the local doesn't exist yet.
	"2," means make a permanent local that won't go away when major mode changes.

Make Local Q-register
   C	Make a q-register local to the current buffer.
	String argument should be name of q-register, as in "A" or ".^RA".
	It can also be "FS" followed by the name of a TECO FS flag.
	"1," as arg means assume that the local doesn't exist yet.

Kill Local Variable
   C	Kill one of the current buffer's local variables.
	The global value is restored.

Kill Local Q-register
   C	Kill one of the current buffer's local q-registers.
	The global value is restored.  See Make Local Q-register for more info.

Save All Files
   C	Offer to write back each buffer which may need it.
	For each buffer which is visiting a file and which
	has been written, you are asked whether to save it.
	A numeric arg means don't ask;  save everything.

Kill Some Buffers
   C	Offer to kill each buffer, one by one.
	If the buffer contains a modified file and you say to kill it,
	you are asked whether to write the file out first.

Rename Buffer
   C	Change the name of the current buffer.
	New name is suffix string arg;  null arg means use FN1 of visited file.

Insert Buffer
   C	Insert contents of another buffer into existing text.
	Specify buffer name as string argument.



Commands in file TAGS:

Find Tag
   C	Visit a tag (string argument).
	Jump to the definition of the tag, switching files if necessary.
	If we do not switch files, we leave behind a mark.
	A string pointer to the tag name may be given as a
	prefix arg.  A precomma arg says look for a second occurrence
	of the tag (search tag table from previous tag, not beginning)

? Save Tag Table
   C	Write out the tag table if it has been changed.

Next File
   C	Select the next file in the tags table.
	Each of the files described by the selected tags table
	is visited one by one if you repeat this macro.
	With an argument, we visit the first file in the tag table.
	With any pre-comma arg (eg 1,) we returns -1 if successful or
	0 if there were no more files (otherwise an error).
	A pre-comma arg with the 2 bit set (eg 2,) will use
	*Tags Search* buffer if file not in core and qTags Find File
	is not in the set {0,2} -- good for things like Tag Search which tend
	to run out of core easily for large tags file searches

Tags Search
   C	Search through all files in a Tags file.
	Sets up Control-. to continue the search to the next
	occurance of the string through all the files in the current
	tags table.  If no more files left, beeps and returns to
	original buffer.  Example: MMTags Search$FOO$$ 

Tags Query Replace
   C	Query Replace through all files in a Tags file.
	Takes two string arguments just like Query Replace.
	Sets up Control-. to continue the Query Replace to the next
	occurance of the string through all the files in the current
	tags table, in case you exit the Query Replace before it is finished.
	"!" means replace all the remaining instances in the current file only.
	If no more files left, beeps and returns to the original buffer.

Tags File List
   C	Insert list of names of the files in the tag table.
	The list comes from the currently-visited tag table,
	and is sorted alphabetically.  Point is left before and mark after.

List Tags
   C	List all tags in current or specified file.
	Specify file with a string arg.  All files in the tag table
	which contain that argument string will be listed.

Tags Apropos
   C	List all known tags whose names contain STRINGARG.
	Tags Apropos knows about the following languages:
	TECO, PALX, LISP, MIDAS, FAIL, MUDDLE, MACSYMA, TJ6, R.

Tags Rescan
   C	Recompute the tag table and reload it.

Args
   C	Print a function's arglist and comments.
	The function is specified as a string argument.
	The line on which the function is defined is printed
	together with any preceding lines of comments.
	Usually this will describe a subroutine and its arguments and results.

View Arglist
   C	Print a function's arglist and comments.
	The function is specified as a string argument.
	The line on which the function is defined is printed
	together with any preceding lines of comments.
	Usually this will describe a subroutine and its arguments and results.

What Tag?
   C	Name of current function from tag table.
	Print in the echo area the name of the closest preceding tag.



Commands in file TMACS:

Type Mailing List
   C	Prints an entry in ITS mailing list file.
	This works on any ITS machine.  (.MAIL.;NAMES > has the ITS mailing
	    lists.)
	For instance, M-X Type Mailing Listbug-random-program<cr> will show
	    you who is on the bug-random-program mailing list on your machine.
	If string argument is of form <name>@<site>, <site>:.MAIL.;NAMES is
	    used.  Only final @ indicates site, so you can do something like:
	    M-X Type Mailing List$BUG-@@AI$
	A numeric argument limits depth of recursion on EQV-LIST members.
	    (Default depth is 3.)
	<name>@<site> entries in EQV-LIST are not followed.
	Prints "Done." when done, since it sometimes is slow.  Giving a
	    pre-comma numeric argument inhibits done-printing, for use as a
	    subroutine.

Graph Buffer
   C	Call ^R Buffer Graph to show schematic of buffer.

=Abbrev
   C	Define or delete M-X abbreviations.
	M-X =Abbrev$IF$Insert File$ will define M-X IF = Insert File$
	    to be M-X Insert File$, evaluated by name each time
	    M-X IF$ is used.  Thus if a new Insert File is created or loaded,
	    that one will be used.  This works nicely with command-completion.
	C-U 0 M-X =Abbrev$IF$ and
	C-U - M-X =Abbrev$IF$ will remove definition for M-X IF$.

Send Mail
   C	Mail a message, using your favorite mail-sending program.
	*** This function is obsolete -- the new EMACS has the capability this
	    one provided.  This remains here only until old EMACSes are gone.
	If you abort the message, you can resume by giving this command a
	    nonzero argument.
	The variable Mail Sender Library, if non-0, should be set to the mail
	    sending library name.  The mail sender used by default is RMAIL on
	    ITS, and MM on Twenex.
	Note that this TMACS version is a replacement for the EMACS one --
	    this allows you to use different libraries for reading and sending
	    mail.

Lock File
   C	Lock current buffer's file.
	"Lock" the file in the current buffer by creating FN1 *LOCKED*.
	Will complain if FN1 *LOCKED* already exists, and will tell who has it
	    locked (since FN1 *LOCKED* contains that person's xuname).
	Fails the critical-race test.
	This assumes that others will cooperate and use M-X Lock File$ and the
	    matching M-X Unlock File$.

Unlock File
   C	"Unlock" file in buffer locked by M-X Lock File.

Flush Variables
   C	Kill some variables specified by search string.
	Kill variables whose name contains the string argument.
	String argument actually is a TECO search string, and so you can flush
	    variables containing "foo" OR "bar" by using the string argument
	    "foobar".
	The list to be flushed is typed, asking Y, N, or ^R?
	    N means abort, ^R allows editing of the list.

List unused ^R characters
   C	Unused C-, M-, and C-M- characters.
	If numeric argument then list unused prefix commands.

0
   C	Does nothing, returns nothing...
	...but is good for something:
	If you want to give some Teco commands from the bottom of the screen,
	you can call ^R Extended Command (or any such "Meta-X") and give the
	Teco commands as the "string argument".

UnSAILify
   C	Turn SAIL file into readable form.
	M-X UnSAILify interchanges underscore and backarrow; this is good for
	    mail.
	1 M-X UnSAILify goes further and fixes lossage caused by image FTPing
	    a SAIL file.

Uncontrolify
   C	Turn control chars into uparrowed chars.
	This is good for listing a file with control characters in it on a
	    line printer which would not show control characters well.
	String argument is a string of characters NOT to change.
	TABs are turned into spaces.  CRLF pairs are left alone.

Abort Recursive Edit
   C	Abnormal exit from recursive editing command.
	The recursive edit is exited and the command that invoked it is
	    aborted.
	For a normal exit, you should use ^R Exit, NOT this command.
	The command can put a string in Abort Resumption Message
	to tell the user how to resume the command after aborting it.
	If the option variable Less Asking is non-0, no message will be
	    printed, and you will not be asked for confirmation.

Revert File
   C	Undo changes to a file.
	Reads back the file being edited from disk
	(or the most recent save file, if that isn't the same thing).
	A numeric argument means ignore the Auto Save files.
	If the option variable Less Asking is non-0, you will not be asked for
	    confirmation.
	A nonzero pre-comma argument also waives confirmation.

Save Trees
   C	Compress a listing with form feeds.
	Replaces some ^L's in buffer by 4 blank lines, in an attempt
	to fill  all  pages.  Page length  is  an  optional  numeric
	argument.

SRMail
   C	Summarize new mail and call RMAIL.
	If there is no new mail, and the variable SRMAIL No New Mail Query
	    Exit is non-0, asks whether to exit or read mail.
	Any string argument is passed to RMAIL.
	Summarizing happens only if there is no string argument, i.e. you're
	    reading your mail in the normal way.

Nowhere Links
   C	Enters recursive ^R on links to nonexistant files
	String argument is directory name (should end with semicolon).



Commands in file SLOWLY:



Commands in file WORDAB:

Expand Word Abbrevs in Region
   C	Finds abbrevs in region; offers to expand each.
	Searches region for word abbrevs.  When one is found, the buffer is
	    displayed with the cursor just after the abbrev.  The character
	    you then type determines what action is taken:
	Space	expands the abbrev and goes on to the next one.
	Rubout	goes on to the next one without expanding.
	Altmode	exits this command without expanding.
	Period	expands and then exit.
	Comma	expands and stays so you can look it over.  Then type one
		of these characters again.
	Exclamation mark expands this and each remaining abbrev without
		asking.
	Hyphen	expands and glues to a prefix and stays.  The prefix and
		abbrev should be separated by a "-".
	F	causes this paragraph to be filled.
	C-R	enters a recursive edit level, so you can move point or do
		minor editing.
	C-L	clears and redisplays the screen and stays.

WORDAB
   C	Turn Word Abbrev mode on or off.
	Given no argument, the mode is toggled (turned on if it was off, and
	    turned off if it was on).
	Given positive argument, the mode is always turned on.
	Given 0 or negative argument, the mode is turned off.
	Giving this command 1 as a pre-comma argument means that you only use
	    global abbrevs, and things are set up to be faster (e.g. faster
	    expansion checking since it doesn't have to check both global and
	    local abbrevs).
	Each of the following chars: ~@#;$%^&*()-_=+[]\|:'`"{},<.>/?!, Space,
	    Return, and Tab, will cause expansion of abbrevs followed by their
	    normal action.
	If you wish to supply additional characters that should expand, see
	    the description of Make These Characters Expand.
	If you wish to completely replace this list of expanding characters,
	    set the variable WORDAB Ins Chars in your init or EVARS file to
	    the string of characters that should expand.

Word Abbrev Mode
   C	Turn Word Abbrev mode on or off.
	Given no argument, the mode is toggled (turned on if it was off, and
	    turned off if it was on).
	Given positive argument, the mode is always turned on.
	Given 0 or negative argument, the mode is turned off.
	Giving this command 1 as a pre-comma argument means that you only use
	    global abbrevs, and things are set up to be faster (e.g. faster
	    expansion checking since it doesn't have to check both global and
	    local abbrevs).
	Each of the following chars: ~@#;$%^&*()-_=+[]\|:'`"{},<.>/?!, Space,
	    Return, and Tab, will cause expansion of abbrevs followed by their
	    normal action.
	If you wish to supply additional characters that should expand, see
	    the description of Make These Characters Expand.
	If you wish to completely replace this list of expanding characters,
	    set the variable WORDAB Ins Chars in your init or EVARS file to
	    the string of characters that should expand.

Old Word Abbrev Character Describe
   C	Tell what a character does after expanding.
	This command will ask you to type a character, e.g. Space, which runs
	    the word abbrev expander and then calls the old definition for
	    that character.
	The description for that old definition will be given, e.g.  the
	    description for ^R Auto-Fill Space.

Define Word Abbrevs
   C	Define abbrevs from a definition list in the buffer.
	Buffer should contain the word abbrev definition list.
	If given a pre-comma numeric argument, all abbrevs will be killed
	    before defining the new ones from the buffer.  (The old abbrevs
	    are not killed until we are sure that the syntax of the buffer's
	    definition list is correct.)

Make Word Abbrev
   C	Define one word abbrev, global or for any mode.
	After doing M-X Make Word Abbrevfoofind outer otter, typing "foo"
	    will automatically expand to "find outer otter".
	3rd string argument, if any, is the mode for the abbrev.
	No 3rd string argument means use the current mode.
	3rd string argument = "*" means this make a global abbrev.
	This command defines just one abbrev, as compared to Define Word
	    Abbrevs which defines several abbrevs from a list in the buffer.

Make These Characters Expand
   C	Add characters to the list of abbrev expanders.
	E.g. M-X Make These Characters Expand1234567890 will cause the
	    digits to expand any abbrev before them, just like #$%.,/? etc.
	    Note, though, that this will not necessarily make digits be
	    word-delimiters.
	If your keyboard has Top-characters (e.g. Top-Z is alpha), you can
	    have them be expanders too, though some of them can't be typed to
	    ^R Extended Command (namely Top-Q and Top-M).  Also: if you
	    put this command into an init file, be careful to double any use
	    of Top-S (namely C-]).
	You can have an EVARS file (as opposed to an init file) declare
	    additional expanders too in a simple way -- just put the
	    characters into the variable Additional Abbrev Expanders.  E.g. to
	    make the digits expand, put the following line into your EVARS
	    file (you need the "*" to force it to be a string):
	Additional Abbrev Expanders:*1234567890 (Top-character users:  in an
	    EVARS file you would not need to double Top-S.)

Edit Word Abbrevs
   C	Allow user to edit the list of defined word abbrevs.
	Note that any '"'s are doubled so that the syntax is unambiguous.
	    E.g.  if the abbrev 'xsay' is to expand to 'He said "Hello".',
	    then it will be:
		xsay: 	1	"He said ""Hello""."
	A recursive edit level is entered.  When exited by ^R Exit the
		buffer will be considered as new definitions of all word
		abbrevs.  Any abbrevs missing from the list will be killed.
	Abort Recursive Edit will abort M-X Edit Word Abbrevs, leaving
		word abbrevs untouched.

List Word Abbrevs
   C	Print some or all word abbrev definitions.
	Lists a table of word abbrev definitions for currently defined
	    abbrevs.
	If string argument is null, all abbrevs are listed.
	If there is a string argument, it filters which abbrevs' definitions
	    are listed.  (Actually, it is a TECO search string.)  If the
	    abbrev, its mode, or its expansion contains the filter that
	    definition is listed.
	Giving a numeric argument will control what the filter applies to:
		0 or 7 (same as no argument): abbrev, mode, or expansion
		1: abbrev only
		2: expansion only
		4: mode only
	Combinations by summing the above -- e.g. 3 means abbrev or expansion,
	    but not mode.

Insert Word Abbrevs
   C	Insert a list of some or all word abbrev definitions.
	Inserts a table of word abbrev definitions for some or all of the
	    currently defined abbrevs.  Format is that used by M-X List Word
	    Abbrevs and M-X Edit Word Abbrevs.
	If string argument is null, all abbrevs are inserted.
	If there is a string argument, it filters which abbrevs' definitions
	    are inserted.  (Actually, it is a TECO search string.)  If the
	    abbrev, its mode, or its expansion contains the filter, that
	    definition is inserted.
	Giving a numeric argument will control what the filter applies to:
		0 or 7 (same as no argument): abbrev, mode, or expansion
		1: abbrev only
		2: expansion only
		4: mode only
	    Combinations by summing the above -- e.g. 3 means abbrev or
	    expansion, but not mode.
	Extension writers: giving a 1 pre-comma argument causes the
	    definitions to be listed as they are inserted.

Kill All Word Abbrevs
   C	Kill all abbrev definitions, leaving a blank slate.
	It is as if you had not read or defined any word abbrevs.

Read Word Abbrev File
   C	Define word abbrevs from an abbrev definition file.
	Stringarg is word abbrev definition file.
	Default is <homedir>;WORDAB DEFNS.
	File may be in default fast-loading foramt or human-readable format.
	This will not complain if the file does not exist.

Write Word Abbrev File
   C	Write all the current abbrev definitions to a file.
	Stringarg filename.  Default is WORDAB DEFNS.
	Argument present means do not write out usage counts.
	Normally writes a fast-loading format file, but if you have the
	    Readable Word Abbrev Files option variable set to 1, it will write
	    a human-readable format file (like that used by
	    List Word Abbrevs).
	Default filenames come from last definition filename used.

Write Incremental Word Abbrev File
   C	Write abbrevs defined/changed since dumping this environment.
	Writes to file named by string argument.  Defaults to home directory,
	    INCABS > (INCABS..0 on Twenex.).
	This command is used by people with a large number of abbrevs, and who
	    dump their environments.  The init file should generally use M-X
	    Write Word Abbrev File, and the & Startup... should use
	    M-X Read Incremental Word Abbrev File.

Read Incremental Word Abbrev File
   C	Define abbrevs changed since dumping.
	String argument is filename that contains incremental abbrev
	    definitions, written by M-X Write Incremental Word Abbrev
	    File.  Default is home directory, INCABS >.
	This command is used by people with a large number of abbrevs, and who
	    dump their environments.  The init file should generally use M-X Write
	    Word Abbrev File, and the & Startup... should use this function.
	This will not complain if the file does not exist.

Attach Word Abbrev Keyboard Macro
   C	Abbrev will run a macro after expanding.
	The last keyboard macro defined is attached to a word abbrev as its
	    word abbrev hook.  Just after that abbrev expands, this hook is
	    executed.
	BE CAREFUL!!  -- keyboard macro attachment is not always
	    well-defined, due to some strange Teco effects.  Not everything
	    works that "ought to".
	First string argument is abbrev to attach it to.  If null, the last
	    one defined is used.
	Second string argument is mode (null means use current mode).  Use "*"
	    if you mean to attach it to a global abbrev.  If you are attaching
	    to the last defined abbrev, you can use anything for this string
	    argument.
	Note that word abbrev hooks will be saved by M-X Write Word Abbrev
	    File and M-X Write Incremental Word Abbrev File, just like normal
	    abbrevs.  Also, they appear in definition listings (e.g. by M-X
	    List Word Abbrevs or M-X Edit Word Abbrevs) in pairs, such as the
	    following:
	textmode:		#0	"-*-Text-*-"
	textmode: (*-WABMAC)	0	"m(m.mText Mode)"



Commands in file PICTURE:

Edit Picture
   C	Enter a mode for editing a picture in the buffer.
	The picture should be between point and mark, to begin with.
	Edit Picture inserts spaces to pad out to the margin, then enters
	a special mode in which these characters are redefined:
	Rubout turns characters into spaces rather than deleting them.
	Ordinary characters replace instead of inserting.
	Return moves to the beginning of the next line.
	Linefeed is like M-M followed by C-N.
	C-O makes one or more new lines full of spaces after point.
	When you exit the recursive ^R, the excess spaces are removed.

Strip Picture
   C	Remove trailing spaces from picture.
	Removes trailing spaces from all lines between point and mark.
	Alternatively, a range may be specified with two numeric arguments.

Pad Picture
   C	Pad lines with trailing spaces to screen width.
	Adds enough trailing spaces to each line between point and mark.

Right Picture Movement
   C	Set so cursor moves left (as usual) after inserting/replacing.

Left Picture Movement
   C	Set so cursor moves left after inserting/replacing.

Up Picture Movement
   C	Set so cursor moves up after inserting/replacing.

Down Picture Movement
   C	Set so cursor moves down after inserting/replacing.



Commands in file SORT:

Sort Lines
   C	Sort the region alphabetically line by line.
	Use M-X Undo to undo the sort.

Sort Pages
   C	Sort the region alphabetically page by page.
	You should put a page separator after the last page before sorting.
	If you don't, one will be made automatically.  It will not be
	deleted automaticaly afterward.  Use M-X Undo to undo the sort.

Sort Paragraphs
   C	Sort the region alphabetically paragraph by paragraph.
	Use M-X Undo to undo the sort.

Make Page Permutation Table
   C	Specify how to reorder the pages.
	Leaves you in buffer *Permutation Table* editing
	the first lines of all pages in the buffer you were in.
	You can permute these lines and then have that translate to the real
	buffer with Permute Pages From Table.

Permute Pages From Table
   C	Permutes current buffer into another.
	Creates a new file, in the buffer *Permuted Buffer*, which is constructed
	by taking pages from the current buffer in the order specified by the
	table in the buffer *Permutation Table*.  (You can make such a table to
	permute with the function Make Page Permutation Table.)



Commands in file PAGE:

View Page Directory
   C	Prints a directory of the file.
	Prints out the first non-blank line on each page, preceded by its
	page number.



Commands in file SCRLIN:



Commands in file DELIM:

Make Delimiter Pairs
   C	Define entries in the Delimiter ..D Table
	for balanced pairs of delimiters.  The string argument should be
	an even number of characters, paired.  Note that the delimiter
	characters must have ^R Move Over Delimiters  assigned to one
	of their ^R macro slots (control, meta, or control-meta - but
	not TOP).

UnMake Delimiter Pairs
   C	Resets the syntax of delimiter characters.



Commands in file MODLIN:



Commands in file ABSTR:

Abstract File
   C	Make an abstract of some of the macros in a file.
	Takes three string arguments:  a name prefix, a documentation prefix,
	and a library file spec.  The name prefix and documentation prefixes
	are used to filter the macros in the file:  only if its name starts
	with the name prefix and its documentation with the doc prefix will
	a macro be listed.  The filespec may also be the library name of a
	currently loaded file, as printed by MM List Loaded Files.

Abstract Variables
   C	Insert names, values and comments of all variables.

Abstract Redefinitions
   C	List all ^R commands redefined.

Wall Chart
   C	Make a wall chart describing defined command characters.
	A wall chart is a list of command characters, in alphabetical
	order, with the names of the macros they run.  It is put in the buffer.
	To cause prefix characters to be included in the wall chart, mention
	each prefix character in a string argument, as a ^R-command q-reg name
	such as .^RX for ^X.  A null string argument ends the list.

Alphabetical Abstract
   C	Alphabetical Abstract within command type.
	Put in the buffer an alphabetized abstract of a library (string arg).
	The abstract is separated by function class (i.e Command,
	^R Command, Subroutine; and if none of these, it's considered
	Random).  Within each class, the functions are sorted
	alphabetically.

Make Many Abstracts
   C	Abstracts many libraries.
	Works by calling Alphabetical Abstract.  All you have to do is
	have a buffer full of library file names (one per line).

Make Source Index
   C	Makes an index of functions to source files.
	Start with a buffer full of source file names (one per line).
	The index is sorted by function name, and each entry says which
	source file the function's code is in.  It is left in the buffer
	at the end.



Commands in file PURIFY:

TCompile
   C	Compile macro to be tried out.
	Compile (compress) the buffer or the current page
	as an EMACS function definition, and define the
	function name(s) at the front.
	The compiled definition is also returned as a value.

TECO Mode
   C	Set up commands for editing TECO code.
	Makes Rubout the Tab-hacking Rubout.  Tab does ^R Indent Nested.
	Loads the PURIFY library.  M-' and M-" move forward and back over conditionals.

Generate Library
   C	Make one :EJ file from several source files.
	Takes desired name for :EJ file as first string argument,
	followed by the names of the input files.  A null string argument
	(altmode-altmode) ends the argument list.
	The input files are all compressed (if they haven't been)
	and the COMPRS files are then purified together.
	Filename defaulting is sticky;
	input FN2's default to >, output FN2's to :EJ.
	The defaults are restored after the macro is finished.

BARE Library Generate
   C	Generate the BARE library.  Source file is string arg.

Dump Environment
   C	Dump the current environment.
	Takes filenames as suffix string argument.
	The dumped environment is given a ..L which will load
	the libraries which are loaded now, and then perform other
	start-up actions as directed.
	
	The filenames to use to load the libraies currently loaded are
	found in variables named <name> Library Filename, where <name>
	is the name of the library.  If that variable is to include a
	constant version numbr, it should be set up when the library is loaded.
	Libraries which are loaded at dump time but do not possess such
	variables will not be loaded by the environment which is dumped.
	
	The additional start-up actions come from the value of the variable
	named "Startup", which is killed before dumping.
	
	Note that q-registers .1, .2, and .3 are clobbered by this macro.
	They will be zero'd on startup by the dumped ..L.
	
	The file EMACS;EMACS TECO is an example of an init file that
	sets up things for use with this macro.

@ TECO
   C	Make XGP listing of macros file.
	Example: 73 MM@ TECOUSRCOM >20FG (notice that
	73 is the page height with the font 20FG).
	20FG and 73 are actually the defaults, so that
	MM@ TECOUSRCOM is equivalent.

Tecdoc
   C	Look up information on Teco commands.
	String arg is command, e.g. MM TecdocF^B or MM TecdocFS HPOS.
	Represent a control character with a "^" not followed by a space.
	Spaces elsewhere are ignored.
	The format of INFO;TECORD is understood.  Type "?" for help.

List TECO FS Flags
   C	List names of all TECO FS flags.


