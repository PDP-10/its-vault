.IF XCRIBL THEN HEIGHT_50 ELSE HEIGHT_59
.PAGE FRAME (HEIGHT) HIGH (IF XCRIBL THEN 85 ELSE 71) WIDE
.TITLE AREA HEADING LINES 1 TO 3
.AREA TEXT LINES 4 TO (HEIGHT); PLACE TEXT;

.IF XCRIBL THEN START;
.	FONT 1 "30VRB KST" ;	COMMENT BODY;
.	FONT 2 "25VGI KST" ;	COMMENT METAVBLS;
.	FONT 3 "30FGB1 KST" ;	COMMENT COMPUTER TALK;
.	 END;

.COMMENT RESPONSE FOR METAVARIABLES: GIVES ITALICS OR CROWFEET;
.IF XCRIBL THEN AT "2" FOO ""  }%2FOO%*{ 
.	   ELSE AT "2" FOO ""  }--1<FOO>-1-{ 

.IF XCRIBL THEN ADJUST ELSE NOJUST
.FILL TABBREAK PAGE_1
.SINGLE SPACE
.TURN ON "%{", "&" FOR "#"
.EVERY HEADING(PROGRAMMING TECHNOLOGY DIVISION DOCUMENT,,SYS.14.12)
IDENTIFICATION
.BEGIN; NOFILL INDENT 8

The DMS Batch System

S. W. Galley, Marc Seriff, and Jerry Morrison

{DATE}

.END;
.EVERY HEADING(PTDD,{PAGE},SYS.14.12)
.SKIP
MOTIVATION

	The Batch system is designed to permit users to run jobs
"in the background", when ITS is lightly loaded, and/or at specified
times, often periodically.  The original version of Batch, implemented
in Midas/Calico, helped to level the load on ITS and to relieve users
from performing periodic "bookkeeping" tasks.  As part of the general
PTD conversion to MDL, the Batch system has been rewritten in
MDL/Calico, with improved design and new features.

.SKIP
REFERENCES
.BEGIN "REF"; INDENT 3,6
	1.  S. W. Galley and Greg Pfister, The MDL Language, SYS.11.01
	2.  Ed Black, Using MDL's Calico User Interface, SYS.11.21.01
.END "REF"
.SKIP
OVERVIEW AND NOTATION
	The name "Batch" is perhaps not the best one for the Batch
system, but tradition dictates that it remain.  The Batch system is
more properly described as a background/absentee-user facility,
permitting programs to be run without direct human interaction.
	Hereinafter the word "job" means one of the things that ITS
time-shares and organizes into trees.  A "user" is a person that uses
ITS, by typing on a "console".  While being executed, a job contains one
and only one "program".  (If a program
is careful, it can imitate a user in interacting with the Batch system.)&
The "Batch daemon" is a job that ITS autonomously runs at specified times.
The daemon contains a program in MDL that is the workhorse of the
Batch system.
When a user (or a program) requests that the Batch daemon run a
program, the physical embodiment of the request
is called a "task".  The description of a task
contains the information that the Batch daemon needs in order to satisfy the request,
including what program to run and when, what to do about console I/O
in the absence of a real console, etc.  Each element of a task description
is called a "field".  Descriptions of tasks yet to be run are stored
on the disk in a collection of files known as the "Batch queue".
The queue is really a set, not a queue, but the name seems to go with
the name "Batch".  Finally, the "user interface" %3TS BATCH%* is a program written in/for MDL/Calico
that aids a user in creating, examining, and modifying task
descriptions.
	Any program that a person can run interactively ought to be
capable of being run by the Batch system.  The only known restrictions
are that the program cannot assign the console to an inferior job,
because it doesn't have a real console, and it must actively request
console input (as do most DMS programs except for Arpanet access programs), not hang around and wait for it
passively.
	Anything which is written in the MDL language or which is typed on a computer console appears herein
.IF XCRIBL THEN START
in a gothic font, as in %3BATCH.%*
.END ELSE START
in upper case, as in BATCH.
.END
A metasyntactic variable -- something to be replaced
in actual use by something else -- appears as 2originator,
.IF XCRIBL THEN START
in an italic font.
.END ELSE START
enclosed in crow-foot brackets.
.END
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
THE USER INTERFACE

The user interface for the Batch system is a MDL/Calico subsystem,
whose commands are described here.
The user interface is invoked from the file %3"SYS: TS BATCH".%*
	%3TS BATCH%* provides commands for flexibly creating, modifying, and examining
task descriptions.  Creating a task consists of setting up a task description,
optionally inspecting it, and filing it in the disk queue.  Similarly, modifying
a task consists of setting up and inspecting a "task modification" and filing it
on disk for the Batch daemon to act on.  The daemon is the only one that should
actually modify filed task descriptions; %3TS BATCH%* tries to simulate the effect
of modifications for a user trying to examine task descriptions, but it doesn't
attempt to be perfect.  Thus recently-modified tasks may appear to the %3TS BATCH%*
user to be slightly incorrect.
	A user of %3TS BATCH%* manipulates two core-resident structures: a
sample task description and a sample task modification.  These samples allow
a user to make two or more similar descriptions or modifications easily.
Also the sample modification can contain two or more task identifications, so that two
or more tasks can be modified identically in one fell swoop.
Changes are made in the samples by alternately naming fields and entering
corresponding values.  Because a field value can be retracted by naming the
field again and entering a new value, the Calico "go back to previous input"
special character is sometimes not effective.
	Task-creation commands manipulate the sample description.
%3CREATE.TASK%* (most used) prompts a user with the names of a few "required"
fields, %3LONG.CREATE.TASK%* (often tedious) prompts with the names of all
possible fields, and %3SHORT.CREATE.TASK%* (useful when interactive response
is slow) prompts with the task name only.  Besides naming fields, a user can
print the sample description as it currently stands, quit or end specification
by putting the sample description in the disk queue as a new task, or abort
specification and return to Calico command level.
	Example (user input is underlined):
.SKIP
.BEGIN NOFILL; IF XCRIBL THEN SELECT 3
:BATCH

CALICO Version MB8 in operation

LISTENING-AT-LEVEL 1 PROCESS 1 
@CReate.task$ named (LINE):  EXAMPLE$
system program (FILE):  TS&MUDDLE$
console input from a file? (SYM):  Y$
which file? (without "s) (FILE):  EXAMPLE&INPUT$
console output to (without "s) (FILE):  EXAMPLE&OUTPUT$
type (SYM):  Short$ run at (LIST|ATOM):  T$
rescheduling interval or sequence (LIST|VECTOR|OBJECT):  ((1&0&0)())$
field name (SYM):  Print.specifications$

*** WARNING: the file DSK:SWG;EXAMPLE INPUT given as INPUT-STREAM does 
not exist now.  Are you sure? (SYM):  Y$
Originated by:                  SWG
Name:                           EXAMPLE
State:                          RUNNABLE
To run at:                      0100 EDT on WED  6 OCT 76
Type:                           SHORT
Originated at:                  1102 EDT on TUE  5 OCT 76
Reschedule with:                intervals of 1 year 
File to run:                    SYS:SWG;TS MUDDLE
Input:                          the file DSK:SWG;EXAMPLE INPUT
Output file:                    DSK:SWG;EXAMPLE OUTPUT 
CPU time limit (minutes):       5.0
 field name (SYM):  End.specifications$
*** WARNING: the file DSK:SWG;EXAMPLE INPUT given as INPUT-STREAM does 
not exist now.

The new task id number is 704. 
.END;
All three commands start
with a fresh sample description, and any field left unspecified receives a
default value.
However, the field/value alternation can be entered without wiping out the
sample description via the %3MODIFY.NASCENT.TASK%* command -- useful for
creating near-duplicates of both old tasks and the one just created.  For an
old task, the %3COPY.TASK%* command fills the sample description with an
existing task description and then returns to Calico command level.
	Task-modification commands manipulate the sample modification.
%3MODIFY.TASK%* is like %3SHORT.CREATE.TASK%* (above) and
%3MODIFY.SIMILARLY%* is like %3MODIFY.NASCENT.TASK%* (above);
that is, with %3MODIFY.TASK%* a user makes one or more task modifications
from scratch, and with %3MODIFY.SIMILARLY%* a user makes one or more
task modifications by starting off with the previous modification, which is left stored in the sample.
%3ABORT.TASK%* is a special command for quickly stopping a task that is
running right now by sending an IPC message to the Batch daemon; the task
remains in the disk queue but is not runnable until modified to be so.
	Example (user input is underlined):
.SKIP
.BEGIN NOFILL; IF XCRIBL THEN SELECT 3
@Modify.Task$ id(s) (MULT|SYM|FIX):  704$
field name (SYM):  Input-stream$
console input from a file? (SYM):  N$
console input (TEXT):  <FLOAD&"EXAMPLE&INPUT">&<QUIT>^Q$$
field name (SYM):  Print.modifications$
ID number:                      704
Modified at:                    1105 EDT on TUE  5 OCT 76
Input:                          <FLOAD "EXAMPLE INPUT"> <QUIT>$
Modified by:                    "SWG"
 field name (SYM):  End.modifications$
The modification to task 704 has been filed.
.END; CONTINUE
	Printing commands display task specifications for the user.
%3PRINT.TASK.DESCRIPTION%* fetches a task-description (%3SPECS%*) file
from disk and prints it on the console in a pretty format for inspection.
%3PRINT.TASK.STATUS%* does the same for a few ("status") fields on one line.
%3PRINT.QUEUE.STATUS%* prints the daemon's abbreviated disk queue, one line
per task; this information may not agree with the previous two commands
because of pending task modifications.
	Other commands are purely for the user's convenience.  Whenever
%3TS BATCH%* requires the identification of an existing task from the user, it employs
a symbol table of task names, constructed from the daemon's abbreviated disk
queue.  A user who wishes to forego this convenience in order to save the time
needed to construct the symbol table can issue the %3REMOVE.TASK.IDENTIFICATION.SYMBOLS%*
command; thereafter tasks must be identified by number rather than name.
This decision can be reversed with the %3REVISE.TASK.IDENTIFICATION.SYMBOLS%*
command, which constructs a new symbol table from the abbreviated disk queue; if
the daemon has updated that file in the meantime, this command updates the
symbol table.
	Finally, the %3SIGNAL.DAEMON%* command signals the Batch daemon
to (come up if not up and) look for new task descriptions and modifications
on disk.  This command is needed only if description or modification files
are created other than by %3TS BATCH,%* and the daemon must run any task sooner
than if the description or modification files had not been created.  The same effect
can be had in MDL by: %3<OR <SEND ".BATCH" "BATCHN" ""> <DEMSIG "BATCHN">>.  TS BATCH%*
signals the daemon or sets its alarm clock whenever it creates such a file,
so this command is not needed when %3TS BATCH%* is used to create or modify tasks.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
THE BATCH QUEUE

	Each task description in the Batch queue occupies its own
disk file in the %3.BATCH%* directory, with first name %3SPECS%* and second
name an integer, which is the identification number for the task.
Keeping task descriptions in separate files enables individual access
and updates to them.  A %3SPECS%* file contains an (unparsed) MDL %3VECTOR,%*
whose elements are alternately %3ATOM%*s and various MDL objects.
Each %3ATOM%* names a field of the task description, and the immediately
following object gives a value for the field.  This format makes it
easy for a person to read and examine the task description, should the
Batch system be uncooperative.  It is also easy for a program to
create a new task by writing the proper %3VECTOR%* into the file
%3".BATCH; SPECS >".%*  Fields not named in a %3SPECS%* file are given default
values by the daemon.
	An abbreviated queue is kept in the single file %3".BATCH; BATCH QUEUE",%*
with only a few fields for each task.
It is used by both the daemon and %3TS BATCH,%* the former to see which
tasks ought to be considered for running and hence have their %3SPECS%* files
read in entirety, the latter to give a user a quick look at the status of the queue.
	Requests to modify task descriptions take the form of files in
the %3.BATCH%* directory with first name %3MODS.%*  A %3MODS%* file has the same
format as a %3SPECS%* file, though usually the %3VECTOR%* is shorter.  The
elements in the %3VECTOR%* are alternately %3ATOM%*s naming fields to be given
new values and the desired new values.  (There are also fields peculiar to a %3MODS%*
file, such as when and by whom it was created.)& Fields not named in a %3MODS%*
file are to be left unchanged, except insofar as consistency requires change.
To avoid timing errors and inconsistencies, only the Batch daemon
should actually modify the %3SPECS%* files, which it does whenever it
examines the queue and finds %3MODS%* files.
%3TS BATCH%* (or another program) writes modifications to the file %3".BATCH; MODS >".%*
	The daemon constructs queues of tasks within itself from the
queue on disk.  These internal queues really are queues, ordered
primarily by the times at which tasks are to be run.  %3TS BATCH%*
also has an internal queue, ordered by ID number.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
THE DAEMON
	The Batch daemon comes up when ITS comes up or when it is
signalled by another program, for example %3TS BATCH.%*  The first thing it does on coming up
is to examine the queue.  It also examines the queue if sent a
message via the IPC device, mainly to look for newly generated
%3SPECS%* and %3MODS%* files that need immediate processing.
The daemon writes a record of its activities in a %3LOG%* file
in the %3.BATCH%* directory.
The daemon runs tasks in jobs inferior to itself, using the ITS device-translation facility to convert console input/output into pseudo-console input/output.
	The daemon periodically takes a crude measurement of the load
on the DMS system.  If the load exceeds a given threshold, the daemon
suspends the running tasks or does not begin new ones until the load has abated.
	Currently the daemon constructs two internal queues, corresponding
to the two "run slots" for jobs
being run under the daemon.  Queue 1 is the "short-task queue",
reserved for tasks with CPU-time limits of five minutes or less.
Queue 2 is the "long-task queue" and has no maximum time limit for its tasks.
The short-task queue is nice for getting most tasks run reasonably close to
the scheduled time, while the long-task queue handles tasks that may literally
take hours to run.  Note that tasks from the two queues are actually run
concurrently in the two run slots
(two separate jobs inferior to the daemon).  By policy, if there are
no tasks in the long-task queue that can be run at a given time, the next task from the
short-task queue is run in the long-task slot.
Someday there may be a third queue, if anyone
can think of a useful, program-enforceable criterion to distinguish tasks to be placed in it.
More than three queues seem to be prohibited by ITS channel limitations in the daemon.
	The %3.BATCH%* directory will show at all times what tasks the daemon is
running, if any.  For each run slot currently being used, there is
a file at the beginning of the directory whose first name is %3"#Q"%* concatenated
with the queue number and whose second name is the name of the task being run.
The contents of the file indicate the originator, ID number, and
running progress of the task.

.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
TASK-DESCRIPTON FIELDS

	Each possible field in a task description is here described by
giving: (1) its name, (2) the default value supplied by %3TS BATCH%* and/or
the daemon, and (3) some facts about how the value is used.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3TASK-ID-NUMBER%*[one more than largest existing]
.BREAK
This is a number that is unique to a task.  This number is taken from the
second file name of the %3SPECS%* file in which the task description is stored.
The %3TASK-ID-NUMBER%* field does not appear in the %3SPECS%* file, only
as the second name of the %3SPECS%* file and in %3MODS%*
files and the internal queues.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3ORIGINATOR<UNAME>%*
.BREAK
This is a %3STRING%* giving the name (that is, login initials) of the user that
is responsible for this task.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3WHEN-ORIGINATED<DTNOW!-TIMFCN!-PACKAGE>%* [now]
.BREAK
This is the date/time at which the task was created, in standard MDL
format (described below).
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3TASK-NAME%*[required]
.BREAK
This is a %3STRING%* giving a name associated with the task.  This name need not
be unique by itself, but for convenience it should be when paired
with the %3ORIGINATOR.%*  It will normally be the name of the "system program" that
the task causes to be run (for example, MDL, Midas, etc.).  In fact
the daemon and %3TS BATCH%* use %3"SYS: TS 2task-name"%1 as the default
%3FILE-TO-RUN%* (see below).
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3TASK-TYPE"SHORT"%*
.BREAK
This is a %3STRING%* giving the type of the task.  This is the information that
will be used to determine in which of the daemon's internal queues the
user wants the task to be.  Currently, the queue manager in the daemon
recognizes the %3STRING "SHORT"%* as being a request for placement in
queue 1 and anything else as a request for placement in queue 2.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3TIME-OF-NEXT-RUN(()(25))%* [1:00 a.m. tomorrow]
.BREAK
This is the date/time at which the next run of the task should take place.
Note that the Batch daemon does not guarantee to run the task at that
time; rather it guarantees that the task will not be run before that
time, and that it will be run as soon as allowable after that time.
This field can be the %3STRING "NOW"%* or %3"ASAP"%* (both meaning as soon as possible),
or a date/time %3LIST.%*  Briefly, the latter is of the form ((2yr 2mo 2day) (2hr 2min 2sec) "2zone"),
as in %3((71 11 28) (10 12 0) "EST").%*  Omitted fields default to the current
year, month, day; zero second, minute, hour; and local time zone.
Thus %3(() (24))%* is midnight tonight.
Consult the MDL library for more information.
See also the %3NIGHT-RUN-SWITCH%* below.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3NIGHT-RUN-SWITCH#FALSE ()%*
.BREAK
The purpose of this field is to
try to avoid bothering prime-time users, should ITS or the Batch
daemon be down at night when the task is scheduled to run -- the
daemon will wait for another night to run the task.
If a non-%3FALSE%* value is supplied for this field, then this task will
be started only during the "night" hours.  If this field contains %3FALSE,%*
then the task may be run at any time.  Night is currently defined as 1:00
a.m. to 8:00 a.m., plus Sundays and holidays, plus Mondays and days after
holidays before 1:00 a.m.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3TASK-STATE"RUNNABLE"%*
.BREAK
This is a %3STRING%* giving the current state of the task.  Currently defined
states are as follows:
.BEGIN; INDENT 4,6 PREFACE 0 SKIP
	%3"RUNNABLE"%* - the task can be considered for running.  Note that
this does not imply that the task can be run now, since the
%3TIME-OF-NEXT-RUN%* may be far in the future and/or the %3NIGHT-RUN-SWITCH%* may
disallow running it now.
	%3"UNRUNNABLE"%* - the task should be left in the queue but not be
considered for running.
	%3"ABORTED"%* - some user or program has manually aborted this task,
and it will not be considered for running until its %3TASK-STATE%* is changed,
perhaps after someone ensures that its data base is consistent (or whatever).
	%3"REMOVED"%* - this is a very temporary state that indicates that a
task is to be permanently removed from the queue.
	%3"RUNNING"%* - the task is now running.
.END;
Any other value has the same effect as %3"UNRUNNABLE".%*
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3SCHEDULER%*[none]
.BREAK
This is an expression that can be used to determine when and if the task should be
rescheduled (run again).  It allows a user to supply an arbitrarily complicated
rescheduling pattern without requiring modifications to the Batch
system.  If no %3SCHEDULER%* expression is supplied by the user, then the
%3RESCHEDULE-INFO%* field (next) will be interpreted according to one of the two
standard meanings described below.  Please see "Programs in Fields" below before
submitting a %3SCHEDULER;%* it contains important information.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3RESCHEDULE-INFO%*[none]
.BREAK
If a %3SCHEDULER%* expression is supplied by the user, then this field can
contain anything.  It will exist for the %3SCHEDULER%* expression and will
never be examined by the Batch system.  If no %3SCHEDULER%* expression is
provided, then this field can have either of the following meanings:
.BEGIN; INDENT 4,4
	(1)  a relative time - If this field contains a %3LIST,%* it will
be interpreted as a relative time to be added to the previous
(scheduled) run time to get the next run time.  The relative time is in
standard date/time format, namely ((2yr 2mo 2day) (2hr 2min 2sec)); "2zone" has no meaning here.
	(2)  a sequence of times - If this field contains a %3VECTOR,%* it
will be interpreted as a sequence of times at which the task is to be
run (after the %3TIME-OF-NEXT-RUN%* time).  The task will be rescheduled
to the first time in the %3VECTOR,%* and the first time will be removed
from the %3VECTOR.%*  Each element of the %3VECTOR%* is in standard date/time
format, namely ((2yr 2mo 2day) (2hr 2min 2sec) "2zone").
.END;
Note that, if neither the %3SCHEDULER%* nor the %3RESCHEDULE-INFO%* is
supplied by the user, then the task will be run once and then removed
from the queue; usually this is undesirable, because an unexpected
failure cannot be explained and corrected for another try -- a very
large relative time is usually better, until the task runs correctly.  Note also that a relative
%3RESCHEDULE-INFO%* field, when used, will be
"added" to the %3TIME-OF-NEXT-RUN%* field repeatedly, until a date/time
is computed that is in the future.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3WHEN-TO-STOP-RESCHEDULING%*[never]
.BREAK
This is the date/time after which this task should no longer be run.  That
is, if an attempt is ever made to reschedule the task for a time that
is after this time, then the task will be removed from the queue
instead.  If no value is supplied, the field will be ignored, and the task can be run at any future time.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3MAXIMUM-NUMBER-OF-RUNS%*[unlimited]
.BREAK
If and when the contents of the %3NUMBER-OF-TIMES-RUN%* field (below) reaches the
contents of this field, then the task will be removed from the queue.
If no value is supplied, the field will be ignored, and the task can be run an unlimited number of times.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3FILE-TO-RUN["SYS" "2originator" "TS" "2task-name"]%1
.BREAK
This is the name of the program file to be loaded and run.  It must be a %3VECTOR%* of %3STRING%*s,
in the order
%3["DEV" "DIR" "NAME1" "NAME2"],%* a la Calico.  (The %3"SYS"%* device
will work for any %3SYS%*2n directory.)
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3INPUT-STREAM%*[none]
.BREAK
Due to difficulties with pseudo-console buffering, a task should use simulated
console input as little as possible.  Most programs can take input from a file
rather than a console (for example, %3FLOAD%* in MDL), and they should be made
to do so when run under Batch.
This technique not only reduces the daemon's work but also can speed up
the task's execution by several times.  Note that exhaustion of input will
cause execution of the task to terminate if and when the program requests
more input.

If this field contains a %3STRING,%* then that %3STRING%* will be sent to the
running task as simulated console input.  If this field contains a
%3VECTOR%* of %3STRING%*s, then it will be taken to be a file name, and the
contents of the file (when the task starts running) will be read in and sent to
the running task as console input.  N.B.: The %3STRING%*s are in the order
%3["DEV" "DIR" "NAME1" "NAME2"],%* a la Calico.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3DELIMITER-STRING%*[%3STRING%* containing CR and ESC]
.BREAK
This is a %3STRING%* whose characters are those after which the Batch daemon
is to pause during the transfer
of console input characters to the running task.  It is especially
important for the Batch daemon to pause when the running task resets its console input
(for example, after a %3RESTORE%* in MDL, or after every ESC ESC in Teco).
Due to difficulties with pseudo-console buffering, a delimiter should appear
at least every fifty characters in the %3INPUT-STREAM.%*
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3JCL-LINE%*[none]
.BREAK
This is a %3STRING%* to be passed to the running task if it asks for JCL
(the "arguments" given after the program name when invoked under Monit or DDT).
If no value is supplied, the task will be told that no JCL exists.
A carriage-return at the end is not necessary.
The JCL is included in the task's transcript file.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3OUTPUT-FILE"DSK: 2originator; 2task-name OUTPUT"%1
.BREAK
This is a %3VECTOR%* of four %3STRING%*s or a single %3STRING%* naming the file to which a transcript
of the task's console output should be appended.  (The file need not exist before
appending.)& The daemon adds useful information before and after the transcript.  If an empty %3STRING%*
is supplied (please do not use %3"NUL:"%*), then no transcript will be generated.
If the file name contains a %3>%* character, then a new file will be created for each run
of the task, in the spirit of the ITS %3>%* feature.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3WORKING-DIRECTORY"2originator"%1
.BREAK
This is a %3STRING%* naming the default working directory (%3SNAME%*) for the running task.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3TIME-LIMIT%*%35.0%* if %3TASK-TYPE%* is %3"SHORT",%* else %330.0%*
.BREAK
This is a %3FLOAT%* giving the maximum number of CPU minutes that the running task
will be allowed to accumulate on a given run.  Note that the allocation
of a task to a queue may cause this field to be overridden (for example,
a task in the short-task queue cannot have a %3TIME-LIMIT%* greater than
%35.0%* minutes).  Note also that if the %3TIME-LIMIT%* is less than or equal to two
seconds (type in %3%</ 2.0 60>%*), the task will have maximum possible
priority, that is, the daemon will start it and let it run (for up to
the small %3TIME-LIMIT%*) regardless of the system load.  This technique is useful for
signalling other daemons, etc., but it should be used with discretion.
If the %3TIME-LIMIT%* is less than five minutes, the task can be started
at a higher system load than normal: the shorter the limit, the higher the
allowed load.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3HANG-LIMIT%*%33%*
.BREAK
This is a %3FIX%* giving the maximum number of real minutes during which
the running task will be allowed to hang without using any CPU time.
If the limit is exceeded, execution of the task will terminate.
It is designed to give other tasks a chance to run whenever this task is slowed
excessively because of waiting for a resource, for example Arpanet service.
A %3HANG-LIMIT%* of more than five minutes will force a task into the long-task queue.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3ACKNOWLEDGEMENT-INFO%*[none]
.BREAK
This is an associative %3VECTOR%* containing %3ATOM%*s and %3VECTOR%*s indicating what to do on
various conditions (happening to this task).  For each condition
(named by an %3ATOM%*), the contents of the next %3VECTOR%* determines the
action as follows:
.BEGIN; NOFILL
	for each %3STRING,%* send a message to that user;
	for each positive %3FIX,%* make that task runnable;
	and for each negative %3FIX,%* make that task unrunnable.
.END; CONTINUE
(Acknowledgements are done for one level only, that is, if one task's
acknowledgement makes another task runnable, the latter task's
acknowledgements will not be triggered.)&
A task can make itself unrunnable.  The following conditions are recognized:
.BEGIN; NOFILL SKIP SELECT 3
	ON-COMPLETION
	ON-COMPLETION:NORMAL
	ON-COMPLETION:OUT-OF-INPUT
	ON-COMPLETION:NOT-CONTINUABLE
	ON-COMPLETION:CONTINUABLE-INTERRUPT
	ON-COMPLETION:TIME-LIMIT-EXPIRED
	ON-COMPLETION:JOB-HUNG
	ON-COMPLETION:RUN-TEST-FALSE
	ON-COMPLETION:SYSTEM-CRASH
	ON-COMPLETION:ERROR-IN-STARTING
	ON-DELAY
	ON-VALRET
	IF-MODIFIED
	IF-MADE-RUNNABLE
	IF-MADE-UNRUNNABLE
	IF-ABORTED
	IF-REMOVED-FROM-QUEUE
	ON-ANY-OTHER
.END;
If nothing is supplied for this field (or if an empty %3VECTOR%* is
supplied), then no acknowledgements will take place.  The condition
%3ON-ANY-OTHER%* is satisfied by any of the other conditions, unless
that condition is otherwise mentioned.  Likewise, %3ON-COMPLETION%* is
satisfied by any of the completion conditions, unless that condition
is specifically mentioned, and %3IF-MODIFIED%* is satisfied by any
modification to the task, which includes all of the %3IF-...%*
conditions, unless that condition is specifically mentioned.  Note
that %3ON-COMPLETION:SYSTEM-CRASH%* is acknowledged when the daemon
comes up again after an ITS/Batch crash.  %3ON-DELAY%* is triggered when the task
cannot run because the daemon cannot open either an inferior job or a pseudo-console.
%3ON-VALRET%* may someday allow a string
argument, meaning "if and when the task valrets this string".
	These examples show a two-task interdependency chain:
.BEGIN; NOFILL SKIP SELECT 3 GROUP
   ACKNOWLEDGEMENT-INFO %1field for task # 20:%*
	[ON-COMPLETION:SYSTEM-CRASH ["JHM" -21]
	 ON-COMPLETION:NORMAL ON-COMPLETION:OUT-OF-INPUT [-20 21]
	 IF-ABORTED IF-MADE-UNRUNNABLE ["JHM" -21]]

   ACKNOWLEDGEMENT-INFO %1field for task # 21:%*
	[ON-COMPLETION:NORMAL ON-COMPLETION:OUT-OF-INPUT [20 -21]
	 IF-ABORTED IF-MADE-UNRUNNABLE [-20 "JHM"]]
.APART END;
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3RUN-TEST%*[none]
.BREAK
If this field is non-%3FALSE,%* it will be evaluated whenever the Batch
daemon is ready to run the task.  If the evaluation returns a %3FALSE,%* the
task will be treated as if it had run to completion without using any
CPU time.  If the evaluation
returns non-%3FALSE%* (or if no %3RUN-TEST%* is supplied), then the task will
be run normally.  This is nice for checking to see if a task has anything to do
before bothering to load it and start it up.
Please see "Programs in Fields" below before submitting a %3RUN-TEST.%*

There is currently a built-in function that checks to see if a
file or set of files exists:
.BEGIN NOFILL SKIP
	%3<FILES-EXIST? 2file1 2file2 ...>%1
.END
returns true only if all the files named by its %3STRING%* arguments exist.  Similarly,
.BEGIN NOFILL SKIP
	%3<HOST-EXISTS? 2host>%1
.END
returns true only if the specified Arpanet host (%3FIX%* or %3STRING%*)
was accepting logins at the last survey or other more recent use.
Any generally-useful tests will eventually be built in: speak up, world.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3RUN-TEST-INFO%*[none]
.BREAK
This field contains auxiliary information to be supplied to %3RUN-TEST%*
when the latter is evaluated.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3RESTART-SWITCH#FALSE ()%*
.BREAK
If a non-%3FALSE%* value is supplied for this field, then this task will
be restarted from the beginning if ITS (or the Batch daemon) crashes during its run.
Otherwise, the Batch daemon will act as if the run had completed,
except that the task will be in the "unrunnable" state until modified, and
the %3ON-COMPLETION:SYSTEM-CRASH%* acknowledgement will be
satisfied.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3BATCH-QUEUE-CHECK-SWITCH#FALSE ()%*
.BREAK
If a non-%3FALSE%* value is supplied for this field, the daemon will scan
the disk queue (%3.BATCH%* directory) for newly created %3SPECS%* and %3MODS%*
files after the task is run.  In this way, a task can write out such a file (being careful
to use the correct %3ATOM%* names, including implicit or explicit trailers) to create new tasks
or modify existing tasks.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3LAST-STARTING-TIME%*[none]
.BREAK
This field is filled in by the Batch daemon with the current date/time
whenever the task is started running.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3LAST-COMPLETION-TIME%*[none]
.BREAK
This field is filled in by the Batch daemon with the current date/time
whenever the task completes a run.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3LAST-CPU-TIME-USED%*0.0
.BREAK
This field is filled in by the Batch daemon with the elapsed CPU time
whenever the task completes a run.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3ACCUMULATED-CPU-TIME%*0.0
.BREAK
The Batch daemon increments this field by the elapsed CPU
time whenever the task completes a run.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3NUMBER-OF-TIMES-RUN%*0
.BREAK
The Batch daemon increments this field by one whenever the task
completes a run.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3BY-WHOM-MODIFIED<UNAME>%*
.BREAK
This field is used only in %3MODS%* files.  It is a %3STRING%* giving the name
of the user that requested the modification.
.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
%3WHEN-MODIFIED<DTNOW!-TIMFCN!-PACKAGE>%* [now]
.BREAK
This field is used only in %3MODS%* files.  It is the date/time at
which the modification was requested.

.IF LINES < 6 THEN SKIP TO COLUMN 1 ELSE SKIP
PROGRAMS IN FIELDS

The %3RUN-TEST%* and %3SCHEDULER%* fields allow the
user to specify arbitrary expressions for deciding whether to run
a task and for rescheduling a task to run again.

The %3RUN-TEST%* (if specified), is evaluated before
creating a job to run the task.  The result of the evaluation will
be included in the task's transcript file.  If this test
returns a non-%3FALSE%* (and does not cause an error),
the task's %3FILE-TO-RUN%* will be loaded and run.  If this test
returns a %3FALSE,%* the task will be treated as if it
had run to completion without using any time.

In any case, the daemon will ignore
the contents of the %3RUN-TEST-INFO%* field (except
to lose the contents if it is a %3FALSE%*).
During the evaluation of the %3RUN-TEST,%* the
%3ATOM MY-TASK%* will be bound to the task
description, so that the %3RUN-TEST%* can reference other
fields.  The %3ATOM INFO-FIELD%* will be bound to the %3RUN-TEST-INFO%* field.
Both %3ATOM%*s are
in the same %3OBLIST%* with all of the
task-description field-name %3ATOM%*s; thus they need have no trailers
in %3SPECS%* and %3MODS%*
files.

If the %3ATOM INFO-FIELD%* is %3SET%* (or %3PUT%* into)
during the evaluation of the %3RUN-TEST,%*
then the %3RUN-TEST-INFO%* field of the task
description will be changed and included when updating the disk queue.  Various fields
of the task description can be read with %3FORM%*s like
%3<NTH .MY-TASK ,JCL-LINE>%* or just
%3<JCL-LINE .MY-TASK>,%* and written with
%3<PUT .MY-TASK ,JCL-LINE "new jcl line">.%*

After a task is run, it will be rescheduled if:
(1) there exists a %3SCHEDULER,%* or (2) the %3RESCHEDULE-INFO%*
field is a %3LIST%* or a %3VECTOR.%*  If there is a
%3SCHEDULER,%* it will be evaluated while %3INFO-FIELD%* is bound
to the %3RESCHEDULE-INFO%* field.  Otherwise, the %3RESCHEDULE-INFO%* field
will be interpreted in the "standard" way.

If a user's %3SCHEDULER%* is evaluated, and if the
result of the evaluation is a %3LIST,%* it will be
interpreted as a standard absolute date/time, and the task will be rescheduled to then.
The %3LIST%* must be a legal argument to
%3DTNORM!-TIMFCN!-PACKAGE.%*  If the result is a %3FIX%*
or a %3FLOAT,%* then the task will be rescheduled to
the "current" %3TIME-OF-NEXT-RUN%* plus that many minutes.
Otherwise, the task will be removed from the queue.

While the daemon is parsing a task's specification file,
the %3OBLIST%* path contains the %3ROOT OBLIST%* and an %3OBLIST%* for the names of description
fields and of built-in functions.  There are other %3OBLIST%*s existing in the daemon,
but access to them requires %3ATOM%* trailers.  The availability of other %3OBLIST%*s
is subject to change, but without fail the %3"TIMFCN"%1 Package will be there.

As an example, here is a %3RUN-TEST%1 that succeeds only on working days:
.BEGIN; NOFILL SELECT 3 SKIP
	<NOT <OR <0? <DOW>> <==? 6 <DOW>> <HOLIDAY?!-TIMFCN!-PACKAGE>>>
.END;

Although the daemon tries, there is little it
can do to protect itself against intentional
maliciousness in %3RUN-TEST%*s and %3SCHEDULER%*s, since it is written to provide maximum
flexibility and power.  Non-intentional errors
will be hardship enough.
Examples of uncouth things:
.BEGIN; CRBREAK INDENT 8,10 PREFACE 0 SKIP
	deliberately causing an %3ERROR%*
	doing a %3RESTORE%*
	playing with %3LVAL%*s (besides %3MY-TASK%* and %3INFO-FIELD%*) that you don't bind
	playing with %3GVAL%*s 
	having more than two %3CHANNEL%*s open concurrently
	leaving %3CHANNEL%*s open
	%3FLOAD%*ing random garbage
	doing I/O to the console (The daemon has none.)
	running your program inside the daemon
	anything to do with %3PROCESS%*es or interrupts
.END;
	It is hoped that programs in fields will be fairly short and simple.
Please contact the authors if you have the slightest question.
Ideas for generally-useful functions to build into the daemon are welcome.
    