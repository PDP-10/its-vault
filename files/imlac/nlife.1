TITLE LIFE

.INSRT IMSRC;IMDEFS >

; character and screen parameters
	CSIZE=11.
	LSIZE=22.		; characters are 8*12
	BOARD=CSIZE*77
	BOT=<CSIZE*23.>
	LEFT=<CSIZE*45.>
	XCENT=LEFT+<CSIZE*40>
	YCENT=BOT+<CSIZE*40>
	CLEFT=<CSIZE*9.>
	HLEFT=CLEFT+<7*CSIZE>
	SX=CLEFT+<CSIZE*4>
	RX=CLEFT+<CSIZE*6>
	SRY=YCENT-<LSIZE*4>

; page xmit protocol character definitions
	PXSIZ=100		; interval between acknowledgements
	PXIN=34			; begin page xmit, request ack
	PXOUT=1			; end page xmit
	PXQUT=2			; quote next character (in or out)
	PXACK=6			; imedit's ack character

LOC 1

	DAC ASAVE'		; SAVE ACCUMULATOR
	RAR 1
	DAC LSAVE'		; SAVE LINK
	KSN			; SKIP NO KEYBOARD
	JMP 20			; SET KEYBOARD READ FLAG
	JMP INTREF		; NORMAL FOR DISPLAY

LOC 20

	KCF			; CLEAR FLAG (PREVENTS INTERRUPT LEVEL LOOPING)
	LAC [JMP KEYIN]		; IMPURE DISPATCH
	DAC KEYJMP		; SET A KEYBOARD READ FLAG
	JMP INTXIT
INTREF:	LAC [DLIST]
	DLA
	DON			; RESTART DISPLAY
	SCF
	DCF
	LAC [CLA]
	DAC MOUSER		; SET A MOUSE READ FLAG
INTXIT:	LAC LSAVE
	RAL 1			; RESTORE LINK
	LAC ASAVE		; RESTORE ACCUMULATOR
	ION			; ENABLE
	JMP @0			; RETURN

LOC 100

; startup
START: KCF
	DCF
	SCF
	LAW .+4
	DLA
	DON
	JMP  .+3
	DHVS 0
	DHLT
	LAW REF\KBD
	ARM			; ARM DISPLAY AND KEYBOARD
	ION			; ENABLE
; clear table and reset world
	LAC [-10000]
	DAC LIM'
	LAC [NEIGH-1]
	DAC 11			; DEFINE TABLE
	CLA
	DAC BUGN'
	DAC GENN'		; CLEAR DIGITS
	DAC DBUGS		; CLEAR SCREEN OF BUGS
	DAC TIMER'		; CLEAR WAITING TIME ON FASTRUN
	DAC @11			; CLEAR TABLE
	ISZ LIM
	JMP .-2
	JMS DONUMS		; CLEAR DISPLAY DIGITS

MOUSER:	CLA			; READ THE MOUSE
KEYJMP:	NOP			; DISPATCH FOR THE KEYBOARD HERE
	MRC
	DAC YNEW'
	AND [377]
	XAM YNEW		; NEW MOUSE Y VALUE
	SAR 3
	SAR 3
	SAR 2
	AND [377]
	DAC XNEW'		; NEW MOUSE X VALUE
	SUB XOLD		; GET DELTA X
	JMS HYSTR		; ADD HYSTERESIS FACTOR
	ADD XOLD
	DAC XOLD'		; MOUSE X VALUE MINUS TWITCHING RANDOMNESS
	XAM XVOLD'
	SUB XVOLD		; GET DELTA X WITH HYS. FUNCTION
	CIA
	JMS SCALE		; SCALE THE INCREMENT
	ADD XSCR		; INTEGRATE IT
	SUB [HLEFT]
	ASP
	CLA			; SET X LOW LIMIT = 200
	SUB [LEFT+BOARD-HLEFT]
	ASM
	CLA			; SET X HIGH LIMIT = 1577
	ADD [LEFT+BOARD]	; RESTORE
	DAC XSCR
	JMS DIVCHR
	JMS MULCHR
	DAC XPOS'		; QUANTIZE THE X POSITION ON THE SCREEN
	IOR [DLXA 0,]
	DAC XCUR
	LAC YNEW		; SAME SHIT FOR Y VARIABLE
	SUB YOLD
	JMS HYSTR
	ADD YOLD
	DAC YOLD'
	XAM YVOLD'
	SUB YVOLD
	CIA
	JMS SCALE
	ADD YSCR
	SUB [BOT]
	ASP
	CLA			; Y LOW LIMIT = 400
	SUB [BOARD]
	ASM
	CLA			; Y HIGH LIMIT = 1377
	ADD [BOT+BOARD]
	DAC YSCR
	JMS DIVCHR
	JMS MULCHR
	DAC YPOS'
	IOR [DLYA 0,]
	DAC YCUR
				; FALL THROUGH TO BUTTON

BUTTON:	CLA			; READS THE MOUSE BUTTONS
	MSW
	AND [1000]		; RESET BUTTON
	ASN
	JMP START
	MSW
	AND [400]		; RELOAD BUTTON
	ASZ
	JMP .+5
RELDO:	IOF
	JMS DOALT
	DSTART
	ION
FASTRN:	LAC YPOS
	SAM [YCENT]
	JMP FARTER
	LAC XPOS
	SUB [CLEFT+<CSIZE*3>]
	ASP
	JMP FARTER
	ADD [CSIZE*13.]
	ASM
	JMP FARTER		; SELECTS Y=1000, 330<=X<=470
UPAWAY:	LAC XPOS
	SUB [CLEFT+<CSIZE*2>]
	JMS DIVCHR		; CONVERT X INTO INTEGERS 1 TO 15 (OCTAL)
	CIA
	DAC TWANG'		; NEGATE FOR LOOP CONTROL
	CLL
	LAW 4			; SET ACC=4 AND LINK=0
EXPO:	RAL 1
	ISZ TWANG
	JMP EXPO		; CONVERT INTEGER INTO EXPONENTIAL (4*(2**INT))
	ADD TIMER		; CUMULATIVE SUM
	ASP
	JMP PUSHIT		; NEXT GENERATION WHEN TIMER OVERFLOWS
	DAC TIMER
	JMP IDLEON
PUSHIT:	CLA
	DAC TIMER		; CLEAR FOR NEXT TRY
				; FALL THROUGH TO GENERA

GENERA:	LAW DBUGS-1		; GENERA AND REAPER ROUTINE (DON'T ASK)
	DAC 10			; SET INDEX
GENNXT:	LAC @10			; LOAD DLXA
	ASN			; DHLT ?
DISPCH:	JMP REAPER		; EXIT TO REAPERER OR SAVER
	SAM [DNOP]
	JMP .+2
	JMP ADVN		; DNOP = DEAD BUG, IGNORE
	AND [7777]
	SUB [LEFT]
	JMS DIVCHR
	SAL 3
	SAL 3
	AND [7700]
	DAC TPA'
	LAC @10			; LOAD DLYA
	AND [7777]
	SUB [BOT]
	JMS DIVCHR
	AND [77]
	IOR TPA
	IOR [10000]		; FORM COMPLETE ADDRESS
	DAC TPA
	SUB [102]
	DAC 11			; A-102
	ISZ @11			; A-101
	ISZ @11			; A-100
	ISZ @11			; A-77
	ADD [100]
	DAC 11			; A-2
	ISZ @11			; A-1
	ISZ 11			
	ISZ 11			; SKIP ADDRESS
	ISZ @11			; A+1
	ADD [100]
	DAC 11
	ISZ @11			; A+77
	ISZ @11			; A+100
	ISZ @11			; A+101
	LAW 9.
	ADD @TPA
	DAC @TPA		; BUG ON THE SPOT = 9 NEIGHBORS
	JMP .+2
ADVN:	ISZ 10
	ISZ 10			; ADVANCE POINTER
	JMP GENNXT

REAPER:	LAC [10100]		; REAPER ROUTINE
	DAC 11
	LAW DBUGS-1
	DAC 10			; SET POINTERS
	LAC [-7577]
	DAC LIM
	LAC [-1000.]
	DAC BUGLIM'
	CLA
	DAC BUGN		; ZERO BUGS
	ISZ GENN		; ONE GENERATION OLDER
	IOF			; KILL DISPLAY INTERRUPT
REANXT:	CLA
	XAM @11			; READ AND CLEAR
	ADD [JMP @TRANS]	; FORM IJMP TO CORRECT TABLE ENTRY
	DAC .+1
	NOP			; WIN OR LOSE !
WIN:	ISZ BUGN
	ISZ BUGLIM
	JMP .+2
	JMP START		; CHECK FOR TABLE OVERFLOW, RESET BEFORE CRASH HAPPENS
	JMS PUTBUG
LOSE:	ISZ LIM
	JMP REANXT		; CONTINUE TO CONTINUE

	CLA
	DAC @10			; DHLT
	JMS DONUMS		; JOY TO THE NUMBERS
	ION			; ENABLE DISPLAY INTERRUPT
	JMP IDLEON

DSTART: 0
	DSF
	SSF
	JMP @DSTART
	SCF
	LAC [DLIST]
	DLA
	DON
	JMP @DSTART

HYSTR:	0			; HYSTERESIS ROUTINE
	ASN
	JMP @HYSTR
	ASM
	JMP KILJOY
	ADD [1]
	JMP @HYSTR
KILJOY:	SUB [1]
	JMP @HYSTR

SCALE:	0			; SCALE MOUSE
	DAC ARG'
	ASP
	CIA			; ABSOLUTE VALUE
	SUB [41]
	ASP			; KILLS WRAPAROUND ON MOUSE
	JMP .+3
	CLA
	JMP @SCALE
	ADD [40]		; ABS - 1
	ASN
	JMP OUT			; INCREMENT = 1 SCALF IS SAL 2
	LAC ARG			; ELSE SCALF IS SAL 3
	SAL 1
	JMP @SCALE
OUT:	LAC ARG
	JMP @SCALE

KEYIN:	LAC [NOP]
	DAC KEYJMP		; DISARM THE DISPATCH
	CLA
	KRB			; READ THE DATA IN!
	SAM [240]		; SPACE?
	JMP .+2
	JMP GENERA
	SAM [215]		; CARRIGE RETURN?
	JMP .+6
	LAC [424]
	DAC XSCR
	LAC [1004]
	DAC YSCR
	JMP IDLEON
	SAM [216]		; PAGE XMIT?
	JMP .+2
	JMP SAVE
	SAM [231]		; BREAK = RELOAD A NEW PATTERN
	JMP .+2
	JMP RESTOR
	SAM [233]		; ALTMODE?
	JMP .+2
	JMP HITEST		; SAME AS 1ST BUTTON ON THE MOUSE
	SAM [206]		; UP?
	JMP .+5
	LAW 10
	ADD YSCR
	DAC YSCR
	JMP IDLEON
	SAM [204]		; DOWN?
	JMP .+5
	LWC 10
	ADD YSCR
	DAC YSCR
	JMP IDLEON
	SAM [205]		; RIGHT?
	JMP .+5
	LAW 10
	ADD XSCR
	DAC XSCR
	JMP IDLEON
	SAM [210]		; LEFT?
	JMP .+5
	LWC 10
	ADD XSCR
	DAC XSCR
	JMP IDLEON
	SAM [377]		; DELETE?
	JMP .+2
	JMP 100
	SAM [217]		; HOME?
	JMP .+6
	LAC [1204]
	DAC XSCR
	LAC [1004]
	DAC YSCR
	JMP IDLEON
	SAM [1233]		; CONTROL ALT?
	JMP IDLEON		; IGNORE ANY OTHER CHARACTERS
	JMP RELDO		; RELOAD THE IMLAC

FARTER:	LAC XPOS		; ROUTINE TO CHECK FOR MOVE INTO NEW SQUARE
	XAM XPOLD
	SAM XPOLD
	JMP MOVED		; X NOT EQUAL, IT MOVED
	LAC YPOS
	XAM YPOLD
	SAM YPOLD
	JMP MOVED
	JMP NOMOVE
MOVED:	CLA
	DAC SW1OLD		; MOVING INTO A SQUARE, RESET SWITCH TO OFF
NOMOVE:	CLA
	MSW
	CMA
	AND [2000]
	XAM SW1OLD
	SUB SW1OLD		; CHECK FOR SWITCH 1 BEING PUSHED
	ASP
	JMP HITEST		; SWITCH SET, DO HITEST ROUTINE
IDLEON:	LAC [JMP MOUSER]
	DAC MOUSER
	JMP MOUSER		; SET INFINITE LOOP TRAP

HITEST:	LAC XPOS
	SUB [LEFT]
	ASM			; X < LEFT
	JMP INFECT
	ADD [LEFT-HLEFT]
	ASP
	JMP RUNTST
	ADD [HLEFT-<CSIZE*20>]
	ASM			; X>=370 AND <= 470
	JMP RUNTST
	LAC YPOS
	SAM [YCENT+<LSIZE*2>]
	JMP .+6
	LAW TRANS
	DAC GRAB'
	LAW DBORN
	DAC PINCH'		; SET UP FOR BIRTH RULE CHANGE
	JMP RULES
	SAM [YCENT+LSIZE]
	JMP .+6
	LAW TRANS+9.
	DAC GRAB
	LAW DLIVE
	DAC PINCH		; SET UP FOR LIVING RULE CHANGE
	JMP RULES
RUNTST:	LAC YPOS
	SAM [YCENT]
	JMP SAVEIT
	LAC XPOS
	SUB [CLEFT+<3*CSIZE>]
	ASM			; X <= 320
	JMP SAVEIT
	ADD [<CSIZE*3>]
	ASM			; X < 300
	JMP GENERA		; SINGLE GENERATION FORWARD
SAVEIT:	LAC YPOS
	SAM [SRY]
	JMP IDLEON
	LAC XPOS
	SAM [RX]
	JMP .+2
	JMP RESTOR
	SAM [SX]
	JMP IDLEON
	JMP SAVE

INFECT:	LAW DBUGS-1		; COMPLEMENT BUG ROUTINE
	DAC 10			; SET POINTER
LOOPA:	LAC @10			; LOAD DLXA
	ASN			; DHLT ?
	JMP ADDR		; ADD A BUG TO END OF LIST
	SAM XCUR
	JMP RSET1		; MISSO X
	LAC @10			; LOAD DLYA
	SAM YCUR
	JMP RSET2		; MISSO Y
DISINF:	LWC 2
	ADD 10
	DAC 10			; BACK UP POINTER
	LAC [DNOP]
	DAC @10			; WIPE
	DAC @10			; OUT
	DAC @10			; BUG
	LWC 1
	ADD BUGN
	DAC BUGN		; KILLS ONE
	JMP EXIT
RSET1:	ISZ 10
RSET2:	ISZ 10			; ADVANCE POINTER
	JMP LOOPA

ADDR:	LAC 10
	DAC 11
	CLA
	DAC @11
	DAC @11
	DAC @11
	LWC 1
	ADD 10
	DAC 10			; BACKUP
	LAC XCUR
	DAC @10			; BUG "X"
	LAC YCUR
	DAC @10			; BUG "Y"
	LAC [DJMS DBUG,]
	DAC @10
	CLA
	DAC @10			; DHLT
	ISZ BUGN		; ONE BORN
EXIT:	JMS DONUMS		; JOY TO THE NUMBERS!
	JMP IDLEON

RULES:	LAC XPOS
	SUB [HLEFT]
	JMS DIVCHR
	DAC OFFST'		; CONVERT XPOS INTO DIGITS 0-8
	ADD GRAB
	DAC GRAB		; CALCULATE TABLE ADDRESS
	LAC [WIN+LOSE]
	SUB @GRAB
	DAC @GRAB		; COMPLEMENT STATE OF WIN OR LOSE
	LAC OFFST
	ADD PINCH
	DAC PINCH		; CALCULATE DISPLAY LIST ADDRESS
	LAC @PINCH
	SAM [DJMS BLANK,]		; BLANK ?
	JMP BLANKO
	LAC [LAC POINT+1]
	ADD OFFST
	DAC .+1
	NOP			; LOAD DIGIT POINTER DJMS
	DAC @PINCH
	JMP IDLEON
BLANKO:	LAC [DJMS BLANK,]
	DAC @PINCH
	JMP IDLEON

DIVCHR:	0
	DAC TMP'
	CLA
	DAC QUO'
	LAW DIVTAB
	DAC DTMP
	LAW QUOTAB
	DAC QTMP
	LWC 3
	DAC DCNT'
	LAC TMP
DIVLUP:	SUB @DTMP'
	ASP
	JMP DIVNXT
	XAM QUO'
	ADD @QTMP
	XAM QUO'
	JMP DIVLUP
DIVNXT:	ADD @DTMP
	ISZ DTMP'
	ISZ QTMP'
	ISZ DCNT'
	JMP DIVLUP
	LAC QUO
	JMP @DIVCHR

DIVTAB:	CSIZE*100.
	CSIZE*10.
	CSIZE
QUOTAB:	100.
	10.
	1.

MULCHR:	0
	DAC TMP'
	LWC CSIZE
	DAC DTMP
	CLA
	ADD TMP
	ISZ DTMP
	JMP .-2
	JMP @MULCHR

PUTBUG:	0			; ADDS BUG TO DISPLAY LIST FROM TABLE ADDRESS
	LAC 11
	AND [7700]
	SAR 3
	SAR 3
	JMS MULCHR
	ADD [DLXA LEFT,]
	DAC @10
	LAC 11			; RELOAD AMMO
	AND [77]
	JMS MULCHR
	ADD [DLYA BOT,]
	DAC @10
	LAC [DJMS DBUG,]
	DAC @10
	JMP @PUTBUG

TRANS:	LOSE			; NO BUG NO NEIGHBORS
	LOSE			; ", 1
	LOSE			; ", 2
	WIN			; ", 3
	LOSE			; ", 4
	LOSE			; ", 5
	LOSE			; ", 6
	LOSE			; ", 7
	LOSE			; ", 8
	LOSE			; BUG WITH NO NEIGHBORS
	LOSE			; ", 1
	WIN			; ", 2
	WIN			; ", 3
	LOSE			; ", 4
	LOSE			; ", 5
	LOSE			; ", 6
	LOSE			; ", 7
	LOSE			; ", 8

SAVE:	LAW ^Z
	JMS XMIT		; SEND CONTROL Z
	LAW ";
	JMS RCVER		; WAIT FOR A ;
	LAC [EDIT-1]
	JMS LXMIT		; SEND I CR
	LAW "*
	JMS RCVER		; WAIT FOR A *
	ISZ NAMO		; NEW FILE NAME TO SAVE IN
	LAC [JMP SAVER]
	DAC DISPCH
	JMP GENERA
SAVER:	LAC [JMP REAPER]
	DAC DISPCH		; FORM TABLE
	LAC [10077]
	DAC 11			; SET POINTER
	LWC 76
	DAC LIM			; 76 OCTAL LINES
NEWLN:	LWC 100
	DAC LGT'		; 100 BUGS PER LINE
SAVLUP:	CLA
	XAM @11			; READ AND CLEAR TABLE
	SUB [9.]
	ASM
	JMP THERE
	LAW 40
	JMS XMIT		; NO BUG = SPACE
	JMP GOOL
THERE:	LAW "O
	JMS XMIT		; BUG = CAPTAL O
GOOL:	LAC 11
	AND [7700]
	SAR 3
	SAR 3
	JMS MULCHR
	ADD [DLXA LEFT,]
	DAC XCUR		; SHOW X POSITION
	LAC 11
	AND [77]
	JMS MULCHR
	ADD [DLYA BOT,]
	DAC YCUR		; SHOW Y POSITION
	ISZ LGT			; END OF LINE?
	JMP SAVLUP

	LAW ^M
	JMS XMIT		; SEND CR
	LAW 6
	JMS RCVER		; WAIT FOR CONTROL F
	ISZ LIM			; END OF PAGE
	JMP NEWLN
	LAW ^F
	JMS XMIT		; SEND CONTROL F
	LAW ":
	JMS RCVER		; WAIT FOR :
	LAW 40
	JMS RCVER		; WAIT FOR SP
	LAC [FNAME-1]
	JMS LXMIT		; SEND FILE NAME
	LAW "*
	JMS RCVER		; WAIT FOR A *
	LAC [KILLO-1]
	JMS LXMIT		; SEND KILL MESSAGE (CONTROL K K CR)
	LAW ";
	JMS RCVER		; WAIT FOR ;
	JMP IDLEON		; EXIT

RESTOR:	IOF			; KILL THE INTERRUPTS
	LAW ^Z
	JMS XMIT		; SEND CONTROL Z
	LAW ";
	JMS RCVER		; WAIT FOR A ;
	LAC [PRNTY-1]
	JMS LXMIT		; SEND "PRINT "
	LAW 40
	JMS RCVER		; WAIT FOR A SPACE
NKBD:	KSF
	JMP NTTYZ
	CLA
	KRC			; READ KEYBOARD
	JMS XMIT		; SEND IT TO PDP-10
NTTYZ:	RSF
	JMP NKBD
	CLA
	RRC
	SAM [012]		; LINE FEED?
	JMP NKBD
	LAC [NEIGH+77]		; INITIALIZE INPUT FOR BUGGIES
	DAC 11
	LAW DBUGS-1
	DAC 10
	CLA
	DAC BUGN
	DAC GENN		; ZERO BUG COUNT
LOOPIN:	RSF
	JMP .-1
	CLA
	RRC
	SAM [240]		; SPACE?
	JMP .+3
	ISZ 11			; ADVANCE POINTER
	JMP LOOPIN
	SAM [317]		; "O"?
	JMP .+5
	ISZ BUGN		; ADD TO BUG COUNT
	ISZ 11
	JMS PUTBUG		; ADD BUG TO THE LIST
	JMP LOOPIN
	SAM [273]		; SEMICOLON?
	JMP LOOPIN		; NO, CONTINUE INPUT
	CLA			; YES, BACK TO NORMAL
	DAC @10			; ADD DHLT TO THE LIST
	JMS DONUMS		; JOY TO THE NUMBERS!
	ION
	JMP IDLEON		; EXITS

RCVER:	0
	DAC GOAL'
OVER:	RSF
	JMP .-1
	CLA
	RRC
	AND [177]
	SAM GOAL
	JMP OVER
	JMP @RCVER

LXMIT:	0
	DAC 12
SLUP:	LAC @12
	ASN
	JMP @LXMIT
	JMS XMIT
	JMP SLUP

XMIT:	0
	TSF
	JMP .-1
	TPC
	JMP @XMIT

; commands for save and restore
EDIT:	"I			; I
	^M			; CR
	0

FNAME:	"L			; L
	"I			; I
	"F			; F
	"E			; E
	40			; SP
NAMO:	"@			; A-Z
	^M			; CR
	0

KILLO:	^K			; CONTROL K
	"K			; K
	^M			; CR
	0

PRNTY:	"P			; P
	"R			; R
	"I			; I
	"N			; N
	"T			; T
	40			; SP
	0

DONUMS:	0			; NUMDIS CONTROL!
	LAW DBUGN-1		; BUGS DIGITS
	DAC 10
	LAC BUGN
	JMS NUMDIS		; WHAM-O
	LAW DGENN-1		; GENERATION DIGITS
	DAC 10
	LAC GENN
	JMS NUMDIS		; WHAM-O SPLUSH
	JMP @DONUMS

NUMDIS:	0			; NUMDIS ROUTINE
	DAC OOK'
	LWC 5			; FIVE DIGITS
	DAC LIM'
	LAW SUBT
	DAC OOKSUB'		; SET POINTER
	CLA
	DAC DFG'		; RESET DIGIT FOUND FLAG
SNOOK:	LAW POINT
	DAC OOKPNT'		; POINTER TO DJMS TABLE
	LAC OOK
TAKEME:	SUB @OOKSUB
	ASP
	JMP .+4
	ISZ OOKPNT
	ISZ DFG
	JMP TAKEME		; SUBTRACT LOOP
	ADD @OOKSUB		; RESTORE
	DAC OOK			; NEW QUOTIENT
	ISZ OOKSUB		; NEW DIVISOR
	LAC DFG
	ASZ			; ZERO SUPRESSION
	ISZ OOKPNT
	LAC @OOKPNT		; LOAD PROPER DJMS
	DAC @10			; PUSH TO DISPLAY LIST
	ISZ LIM
	JMP SNOOK
	JMP @NUMDIS

SUBT:	10000.
	1000.
	100.
	10.
	1.

.INSRT DSK:IMSRC;DOALT INSERT

POINT:	DTXT [ 0123456789]

BLANK:
D040:	INC E,D30 		; space
	INC D30,D30
	INC D20,X

D060:	INC E,D03		; 0 - zero
	INC B03,B03
	INC B23,B20
	INC B20,B2M3
	INC B0M3,B0M3
	INC BM2M3,BM20
	INC BM20,BM23
	INC D0M3,B23
	INC B23,B23
	INC B23,D3M3
	INC D0M3,D0M3
	INC D0M3,X

D061:	INC E,D33		; 1 - one
	INC D03,D02
	INC D02,B12
	INC B10,B0M3
	INC B0M3,B0M3
	INC B0M3,DM20
	INC B20,B20
	INC D20,D20
	INC X,X

D062:	INC E,D03		; 2 - two
	INC D03,D03
	INC B23,B20
	INC B20,B2M3
	INC B0M2,BM2M1
	INC BM2M1,BM2M1
	INC BM2M1,B0M3
	INC B30,B30
	INC B20,D30
	INC X,X

D063:	INC E,D03		; 3 - three
	INC B2M3,B20
	INC B20,B23
	INC B01,BM32
	INC B32,B01
	INC BM23,BM20
	INC BM20,BM2M3
	INC D3M3,D3M3
	INC D3M3,D20
	INC X,X

D064:	INC E,D30		; 4 - four
	INC D20,B03
	INC B03,B03
	INC B03,BM10
	INC BM2M3,BM2M3
	INC B0M1,B30
	INC B30,B20
	INC D3M3,D0M2
	INC X,X

D065:	INC E,D02		; 5 - five
	INC B2M2,B20
	INC B20,B22
	INC B02,B02
	INC BM22,BM30
	INC BM30,B02
	INC B02,B30
	INC B20,B20
	INC D3M3,D1M3
	INC D0M3,D0M3
	INC X,X

D066:	INC E,D20		; 6 - six
	INC BM22,B03
	INC B02,B02
	INC B23,B20
	INC B20,B2M3
	INC DM3M2,DM3M2
	INC DM20,B22
	INC B20,B20
	INC B2M2,B0M3
	INC BM2M2,BM20
	INC BM20,D30
	INC D30,D30
	INC X,X

D067:	INC E,D03		; 7 - seven
	INC D03,D03
	INC B13,B30
	INC B20,B20
	INC BM1M3,BM1M3
	INC BM1M3,BM1M3
	INC D30,D20
	INC D20,X

D070:	INC E,D20		; 8 - eight
	INC BM22,B02
	INC B22,B20
	INC B20,B22
	INC B02,BM22
	INC BM20,BM20
	INC BM2M2,B0M2
	INC B2M2,D20
	INC D20,B2M2
	INC B0M2,BM2M2
	INC BM20,BM20
	INC D30,D30
	INC D30,X

D071:	INC E,D03		; 9 - nine
	INC B2M3,B20
	INC B20,B23
	INC B03,B02
	INC B02,BM22
	INC BM20,BM20
	INC BM2M2,B0M3
	INC B2M2,B20
	INC B20,B22
	INC D3M3,D0M2
	INC D0M2,X

D072:	INC E,D20		; : - colon
	INC D20,B01
	INC B10,B0M1
	INC BM10,D02
	INC D02,B01
	INC B10,B0M1
	INC BM10,D3M3
	INC D3M1,D10
	INC X,X

D076:	INC E,D22		; > - greater than
	INC B22,B22
	INC BM22,BM22
	INC D3M3,D3M3
	INC D3M3,D0M1
	INC X,X

D102:	INC E,B03 		; B
	INC B03,B03
	INC B03,B30
	INC B20,B3M2
	INC B0M2,BM3M2
	INC BM30,BM20
	INC D30,D20
	INC B3M2,B0M2
	INC BM3M2,BM30
	INC BM20,D30
	INC D30,D30
	INC D20,X

D105:	INC E,B03		; E
	INC B03,B03
	INC B03,B30
	INC B30,B20
	INC DM2M3,DM1M3
	INC BM30,BM20
	INC D0M3,D0M3
	INC B30,B30
	INC B20,D30
	INC X,X

D110:	INC E,B03		; H
	INC B03,B03
	INC B03,D0M3
	INC D0M3,B30
	INC B30,B20
	INC B03,B03
	INC D0M3,D0M3
	INC B0M3,B0M3
	INC D30,X

D111:	INC E,D20		; I
	INC B20,B20
	INC DM20,B03
	INC B03,B03
	INC B03,D20
	INC BM20,BM20
	INC D3M3,D3M3
	INC D3M3,D0M3
	INC X,X

D114:	INC E,D03		; L
	INC D03,D03
	INC D03,B0M3
	INC B0M3,B0M3
	INC B0M3,B30
	INC B30,B20
	INC D30,X

D116:	INC E,B03		; N
	INC B03,B03
	INC B03,B2M3
	INC B2M3,B2M3
	INC B2M3,B03
	INC B03,B03
	INC B03,D3M3
	INC D0M3,D0M3
	INC D0M3,X

D122:	INC E,B03		; R
	INC B03,B03
	INC B03,B30
	INC B20,B3M2
	INC B0M2,BM3M2
	INC BM30,BM20
	INC D30,D20
	INC B1M2,B1M2
	INC B1M2,D30
	INC X,X

D124:	INC E,D20		; T
	INC D20,B03
	INC B03,B03
	INC B03,D20
	INC D20,BM30
	INC BM30,BM20
	INC D3M3,D3M3
	INC D3M3,D2M3
	INC X,X

D125:	INC E,D03		; U
	INC D03,D03
	INC D03,B0M3
	INC B0M3,B0M3
	INC B2M3,B20
	INC B20,B23
	INC B03,B03
	INC B03,D3M3
	INC D0M3,D0M3
	INC D0M3,X

D126:	INC E,D03		; V
	INC D03,D03
	INC D03,B1M3
	INC B1M3,B1M3
	INC B1M3,B13
	INC B13,B13
	INC B13,D3M3
	INC D0M3,D0M3
	INC D0M3,X

STAR:	INC E,D11
	INC D22,B1M3
	INC B13,B31
	INC BM31,BM13
	INC BM1M3,BM3M1
	INC B3M1,X

DBUG:	INC E,D00
	INC D31,B30
	INC B22,B03
	INC BM22,BM30
	INC BM2M2,B0M3
	INC B2M2,X

DCUR:	INC E,B30
	INC B30,B30
	INC B03,B03
	INC B03,BM30
	INC BM30,BM30
	INC B0M3,B0M3
	INC B0M3,X

YSCR:	1000
XSCR:	1200
XPOLD:	1200
YPOLD:	1000
SW1OLD:	0

	VARIABLES
	CONSTANTS

DLIST:	DHVC\DSTS 1
	DGD
XCUR:	DLXA XCENT
YCUR:	DLYA YCENT
	DJMS DCUR
	DLXA LEFT
	DLYA BOT
	DJMS STAR
	DLYA BOT+BOARD
	DJMS STAR
	DLXA LEFT+BOARD
	DJMS STAR
	DLYA BOT
	DJMS STAR

	DLXA CLEFT+<CSIZE*2>
	DLYA YCENT-<LSIZE*2>
DBUGN:	DJMS BLANK
	DJMS BLANK
	DJMS BLANK
	DJMS BLANK
	DJMS BLANK
	DLXA CLEFT+<CSIZE*2>
	DLYA YCENT-<LSIZE*3>
DGENN:	DJMS BLANK
	DJMS BLANK
	DJMS BLANK
	DJMS BLANK
	DJMS BLANK
	DLXA SX
	DLYA SRY
	DJMS STAR
	DLXA RX
	DLYA SRY
	DJMS STAR

	DLXA CLEFT
	DLYA YCENT+<LSIZE*2>
	DTXT [BIRTH:]
DBORN:	DTXT [    3     ]

	DLXA CLEFT
	DLYA YCENT+LSIZE
	DTXT [LIVE: ]
DLIVE:	DTXT [   23     ]

	DLXA CLEFT
	DLYA YCENT
	DTXT [RUN>>>>>>>>>>>]

DBUGS:	DHLT

LOC 10000

NEIGH:	-1

	END START
