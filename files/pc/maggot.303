COMMENT    VALID 00014 PAGES
C REC  PAGE   DESCRIPTION
C00001 00001
C00003 00002	DEFINITIONS
C00006 00003	STRT:OSET:OSETL:OERR:OSETX:ONAMES:
C00009 00004	DOCAL:ALL:SETXGP:SETMAG:PRINT:SETAMD:
C00012 00005	OSETE: NOFF:INDEV:MAGLOP:NOPLT:OUTDEV:NOLPT:
C00017 00006	DONEIN:PLOP:PLOP1:BARE:DOTXT:TXTLOP:CLEAVE:VERT:HORZ:HVLOP:NEWCHR:TXTDN1:
C00030 00007	LINEAR:MESSAG:RETSEL:RETSL1:RETTAB:LMOVE:FIXXY:RETDON:FIXXYN:UNFIX:
C00037 00008	PAD TABLES
C00040 00009	FLASH:PLTRET:RETRPT:PLOTIT:ORIENT:DONE:SWPXGP:GOTEOF:BUG:FLASH1:FLASH2:PUTPAD:
C00047 00010	GETNUM:
C00048 00011	ECHO:PUTLPT:PUTARW:PUTLCR:PUTSCR:TRIPLE:
C00050 00012	GETMAG:GETMGR:MAGIN:ISSOME:
C00054 00013	ASCTAB:ONETAB:
C00056 00014	SETNAM:RJUST:GETWRD:GETSKP:GETCHR:SDECIN:DECIN:READN:OUTSIX:PATCH:
C00059 ENDMK
C;
;DEFINITIONS

;AS OF 1-16-76, THIS PROGRAM HAS BEEN MODIFIED TO SIMULATE A RELATIVE GERBER
;PLOTTER. SOME OF THE MODIFICATIONS HAVE BEEN MADE IN SUCH A WAY THAT THE
;PROGRAM WILL STILL WORK IN TRW MODE, BUT THESE MODS ARE NOT COMPLETE. MORE
;WORK IS NEEDED TO MAKE IT PROPERLY SWITCH FROM ONE PLOTTER TYPE TO THE OTHER

TITLE MAGGOT

IFNDEF XGPSW<XGPSW__-1>
DEFINE MXGP<IFN XGPSW>

;AC'S:

A_1
B_2
C_3
D_4
E_5
F_6
T_13
TT_14
TTT_15
P_17

EOF_20000
OURS_400000
JOBMSK_77
ERRMSK_760000

EXTERNAL PLOTS,PLOT,SYMBOL,WHERE,REF,SETXY,XTHICK,CHRTAB,CHRTB1
INTERNAL DOPLT,CHRTBL

CSIZ:	2

PDLLEN__100
PDL:	BLOCK PDLLEN

XFILM: =24000/5*2	;ASSEMBLY-TIME INITIALIZE TO TRW GERBER FILM LIMITS
YFILM: =20000/5*2

AMXOFF__ =21000/5*2	;STARTING POSITION RELATIVE TO ORIGIN AT AMDAHL
AMYOFF__ =15000/5*2
AMXFLM__ =19000/5*2	;FILM SIZE AND PLOT BOUNDARY, MINUS 1/2" MARGIN
AMYFLM__ =15000/5*2


MTAB:	BLOCK 5

LOC 41
	PUSHJ P,BUG
RELOC

OPDEF BUG[1B8]

CPOPJ2:	AOS (P)
CPOPJ1:	AOS (P)
CPOPJ:	POPJ P,

DECFNG: XWD -S80LN,S80TB
INTFNG:	XWD -S64LN,S64TB


LPTBUF:	BLOCK 3

MAGBUF:	BLOCK 3

FILNAM:	0
FILEXT:	0
FILDAT:	0
FILPPN:	0

GUGGLE_.
DOPLT:	REF
CHGREC:	0
%XTHICK:0
FLSH:	0
TRAVEL:	0
THING1:	0
DOLPT:	0
CHANGE:	0
OFFIT:	0
OFFX:	0
OFFY:	0
NOTXT:	0
IFLAG:	0
CALCMP:	0
GOMAG:	0
DOMAG:	0
LSTEOF:	0
EOT:	0
MXGP,<	XGPGO:	0	>
AMDAHL:	0
COLCNT:	0
ZATCH__.-1

DEFMAG__=400	;DEFAULT AMDAHL MAG TAPE RECORD LENGTH

MAGBF:	2
MAGLEN:	0
;STRT:OSET:OSETL:OERR:OSETX:ONAMES:

STRT:	CALLI
	MOVE P,[PDLWD:	IOWD PDLLEN,PDL]
	MOVEI T,=120/5
	MOVEM T,MTAB
	SETZM MTAB+1
	SETZM MTAB+2
	SETZM MTAB+3
	SETZM MTAB+4
	SETZM XTHICK
	SETZM SAVNAM#
OSET:	SETZM GUGGLE	;INITIALIZE SWITCHES
	MOVE [THURBR:	GUGGLE,,GUGGLE+1]
	BLT ZATCH
	MOVSI T,'DSK'
	MOVEM T,INDEV
	OUTSTR[MODSTR:	ASCIZ/
MODES?/]

OSETL:	INCHWL T
	MOVSI TT,-OSETLN
	CAMN T,OCHAR(TT)
	JRST OSETX
	AOBJN TT,.-2
OERR:	CLRBFI
	OUTSTR[QUESTR:	ASCIZ/???
/]
	JRST OSET

OSETX:	XCT OXCT(TT)
	JRST OSETL

DEFINE ONAMES
<	OMAC	12,<JRST OSETE>,<CHAR	EFFECT>
	OMAC	15,<JFCL>,<>
	OMAC	"?",<JRST PRINT>,<?	PRINT THIS LIST>
	OMAC	"A",<SETOM AMDAHL>,<A	AMDAHL STYLE TAPE>
	OMAC	"R",<SETOM CHGREC>,<R	CHANGE DEFAULT AMDAHL TAPE RECORD LENGTH OF 400 WORDS>
	OMAC	"C",<JRST DOCAL>,<C	CALCOMP OUTPUT>
	OMAC	"L",<SETOM DOLPT>,<L	MAKE LISTING>
	OMAC	"P",<SETOM CHANGE>,<P	PAUSE FOR PEN CHANGES>
	OMAC	"O",<SETOM OFFIT>,<O	SET OFFSETS>
MXGP,<	OMAC	"X",<JRST SETXGP>,<X	XGP OUTPUT>
	OMAC	"G",<SETOM XGPGO>,<G	GO DIRECTLY TO X>
	OMAC	"N",<SETOM NOTXT>,<N	NO HEADER TEXT (GOOD FOR XGP)>
	OMAC	"I",<SETOM IFLAG>,<I	INTEL FINGERS (64 MILS WIDE)>
	OMAC	"",<JRST ALL>,<	INTERPRET ALL PLOTS ON TAPE>
>;MXGP
>
COMMENT  THE "N" OPTION IS A KLUDGE  TO MAKE MAGGOT PLOTS REASONABLY
XGP-ABLE UNTIL AN  XGP SYSTEM CAN BE PROVIDED WHICH INTERPRETS VECTOR
LISTS INSTEAD OF GOING THROUGH THE CALCOMP KNOTHOLE, AND WHICH ALLOWS
INTERACTIVE CLIPPING.  THE SPECIFIC PROBLEM  CURED BY THIS  OPTION IS
THE REQUIREMENT  OF EXCESSIVE CORE FOR THE XGP TO PLOT HEADER TEXT IN
THE LOWER LEFT HAND  CORNER OF THE FILM  BEFORE IT PLOTS THE  PC CARD
ITSELF.


DEFINE OMAC(A,B,C)
<	A
>

OCHAR:	ONAMES
OSETLN__.-OCHAR

DEFINE OMAC(A,B,C)
<	B
>

OXCT:	ONAMES

DEFINE OMAC(A,B,C)
<	[ASCIZ/C
/]
>

OPNT:	ONAMES

;DOCAL:ALL:SETXGP:SETMAG:PRINT:SETAMD:

;SET AMDAHL FLAG AND INITIALIZE CURSE TO AMDAHL STARTING POSITION
AMDORG:	HRLI 1,AMXOFF
	HRRI 1,AMYOFF
	MOVEM 1,CURSE
	LSH 1,-1	;TAKE OUT FACTOR OF 2
	JSA 16,SETXY	;INITIALIZE PLOTTER AT STARTING POSITION FOR AMDAHL GERBER
	MOVEI T,AMXFLM
	MOVEM T,XFILM
	MOVEI T,AMYFLM
	MOVEM T,YFILM
	MOVEI D,3	;LAMP OFF
	POPJ P,

DOCAL:	SETOM DOPLT
	SETOM CALCMP
	JRST OSETL

ALL:	SETOM GOMAG#
	MOVE T,[PLOTWD:	'PLOT00']
	MOVEM T,FILNAM	;SET UP FILNAME FOR PROCESSING WHOLE MAG TAPE
	MOVEI T,77
	MOVEM T,FILCNT#	;INITIALIZE PLOT COUNT--MORE THAN =64 IS RIDICULOUS
	JRST OSETL

SETXGP:	SKIPE DOPLT
	JRST OERR
	MOVSI T,'DSK'
	MOVEM T,THING1
	SETOM %XTHICK
	SETOM DOPLT
	JRST OSETL

;USE MAGTAPE FOR GERBER INPUT IF ONE IS ASSIGNED
SETMAG:	MOVSI T,'MTA'
	DEVUSE T,	;SEE IF WE HAVE A MAGTAPE ASSIGNED AS "MTA"
	JUMPE T,[	USEDSK:	MOVSI T,'DSK'	;NOPE, USE DISK
				MOVEM T,INDEV
				SETZM MAGLEN
				POPJ P,]

SETMG1:	MOVEI TTT,DEFMAG	;SET UP DEFAULT RECORD LENGTH
	SKIPN CHGREC		;DOES HE WANT OTHER THAN DEFAULT?
	JRST USEMTA		;NO
	OUTSTR[ASCIZ/
HOW MANY WORDS (DECIMAL) ARE THERE PER RECORD ON THE TAPE ON DEVICE "MTA" ? /]
	PUSHJ P,DECIN
	CAIE T,12
	JRST[	OUTSTR[ASCIZ/
INPUT ERROR!
/]
		JRST SETMG1]
	MOVEM TTT,MAGLEN
	MOVE T,TTT	;COPY RECORD SIZE
	IMULI T,=6	;NO. CHARS PER RECORD
	IDIVI T,=80	;NO. CARD IMAGES PER RECORD
	JUMPE TT,[	USEMTA:	MOVSI T,'MTA'	;COMES OUT EVEN, LET HIM USE MTA
				MOVEM T,INDEV
				MOVEM TTT,MAGLEN
				SETOM DOMAG
				POPJ P,]
	OUTSTR[ASCIZ/
NOT BLOCKED ON CARD BOUNDARY. TRY AGAIN!
/]
	JRST SETMG1


PRINT:	MOVSI T,-OSETLN
	OUTSTR @OPNT(T)
	AOBJN T,.-1
	INCHWL T
	CAIN T,15
	INCHWL T
	CAIE T,12
	JRST OERR
	JRST OSET
;OSETE: NOFF:INDEV:MAGLOP:NOPLT:OUTDEV:NOLPT:

OSETE:	MOVE T,INTFNG	;SET UP CARD EDGE FINGER RETICLE
	SKIPN IFLAG	;INTEL?
	MOVE T,DECFNG	;NOPE, POINT AT DEC FINGER INSTEAD
	MOVEM T,FNGRET
	PUSHJ P,SETMAG	;SET INDEV TO MTA OR DSK
	SKIPN DOMAG
	SETZM GOMAG	;CLEAR AUTO MAG READ FLAG IF NOT MAG INPUT
	SKIPE DOMAG
	SKIPN OFFIT	;OFFSET?
	JRST NOFF
	OUTSTR[OFFSTR:	ASCIZ/X,Y OFFSETS (IN MILS)?/]
	PUSHJ P,SDECIN
	MOVE TT,TTT
	IDIVI TT,5
	ASH TT,1
	MOVEM TT,OFFX
	CAIN T,12		;ONLY X?
	JRST NOFF
	CAIE T,","
	JRST [OFFERR:	OUTSTR[ASCIZ/ILLEGAL OFFSET!
/]
			CLRBFI
			JRST OSETE]
	PUSHJ P,SDECIN
	CAIE T,12
	JRST OFFERR
	MOVE TT,TTT
	IDIVI TT,5
	ASH TT,1
	MOVEM TT,OFFY
NOFF:	INIT 5,10
INDEV:	'DSK   '	;THIS GETS CLOBBERED TO MTA IF SUCH IS ASSIGNED
	MAGBUF
	JRST [INERR1:	OUTSTR [DNASTR:	ASCIZ /INPUT DEVICE NOT AVAILABLE!
/]
			HALT STRT]
	MOVEI T,6	;NO, 6 BIT BYTES
	DPB T,[SIXPNT:	POINT 6,MAGBUF+1,11]	;SET BYTE SIZE
	SETZM COLCNT	;INITIALIZE COLUMN COUNT
	SETOM LSTEOF	; AND EOF INDICATOR
	SKIPE MAGLEN	;THIS WILL BE ZERO IF WE ARE USING DISK
	JRST[	MBUFIX:	AOS MAGLEN	;UINBF WANTS BUFFER LENGTH+1 AS ARG.
			UINBF 5,MAGBF	;GET APPROPRIATE BUFFER SIZE
			JRST MAGLOP]

	INBUF 5,2	;GET A COUPLE OF BUFFERS
	MOVSI T,'MAG'	;SET UP FOR SETNAM--T CONTAINS DEFAULT EXTENSION
	MOVE TT,INDEV	;TT CONTAINS INPUT DEVICE NAME
	PUSHJ P,SETNAM	;SETNAM IS A NO-OP UNLESS T CONTAINS 'DSK   '
	LOOKUP 5,FILNAM	;THIS IS NO-OP IF INDEV IS A TAPE DRIVE
	JRST [LKPERR:	OUTSTR[LKPSTR:	ASCIZ/LOOKUP FAILED ON MAG FILE!
/]
			JRST STRT]

;MAGLOP
;FALLS THRU
MAGLOP:	MOVE TT,FILNAM	;RETURN HERE TO READ EACH NEW PLOT ON TAPE
	MOVEM TT,SAVNAM
	SKIPE GOMAG	;PRINT GENERATED FILENAME IF IN AUTO MODE
	JRST[PRTNAM:	OUTSTR[CRLF:	ASCIZ/
/]
			PUSHJ P,OUTSIX
			OUTSTR[ASCIZ/
/]
			JRST .+1]
	SKIPN DOPLT
	JRST NOPLT
	MOVE TT,THING1		;SAVE DEV NAME--'DSK  ' IF DISK, NULL IF PLOTTER
	JSA 16,PLOTS
	JUMP THING1		;PLOTS SETS THING1 TO -1 IF INIT ON PLOT DEV LOSES,
	SKIPE THING1		;AND CLEARS IT IF INIT WORKS
	JRST [PLTERR:	OUTSTR [PNASTR:	ASCIZ /PLOT DEV NOT AVAILABLE!
/]
			HALT STRT]
	MOVEM TT,THING1		;RESTORE DEVICE NAME
	SKIPE %XTHICK	;XTHICK (IN PLOTS) GETS CLEARED BY CALL TO PLOTS, SO
	SETOM XTHICK	; MUST BE SET AFTERWARDS
	MOVSI T,'PLX'
	PUSHJ P,SETNAM
MXGP,<	MOVE T,FILNAM
	MOVEM T,XGPNAM#
	MOVE T,FILEXT
	MOVEM T,XGPEXT#
	MOVE T,FILPPN
	MOVEM T,XGPPPN#
>;MXGP
	ENTER 17,FILNAM
	JRST [PLXERR:	OUTSTR[PLXSTR:	ASCIZ/ENTER FAILED ON PLX FILE!
/]
			HALT STRT]
NOPLT:	SKIPN DOLPT
	JRST NOLPT
	MOVSI T,'LST'
	DEVCHR T,
	SKIPN T			;IS THERE A DEVICE CALLED LST?
	SKIPA T,[DSKSTR: 'DSK   ']
	MOVSI T,'LST'		;IF SO, USE IT
	MOVEM T,OUTDEV
	INIT 1,0
OUTDEV:	'LPT   '
	XWD LPTBUF,0
	JRST [LPTERR:	OUTSTR[CGLSTR:	ASCIZ/CAN'T GET LPT!
/]
			HALT STRT]
	OUTBUF 1,2
	MOVSI T,'LST'
	MOVE TT,OUTDEV
	PUSHJ P,SETNAM
	ENTER 1,FILNAM
	JRST [LSTERR:	OUTSTR[EFLSTR:	ASCIZ/ENTER FAILED ON LST FILE!
/]
			HALT STRT]
NOLPT:
;DONEIN:PLOP:PLOP1:BARE:DOTXT:TXTLOP:CLEAVE:VERT:HORZ:HVLOP:NEWCHR:TXTDN1:

DONEIN:	SKIPE GOMAG	;"READ ALL OF MAG TAPE" MODE?
	JRST[INCNAM:	MOVE TT,FILNAM	;YUP, INCREMENT FILNAME FOR NEXT TIME
			ADDI TT,1
			SOSGE FILCNT
			JRST [NAMERR:	OUTSTR[NMSTR1:
ASCIZ/YOU'VE RUN OUT OF FILENAMES,CHARLEY!
/]
					EXIT]
			MOVE T,TT
			ANDI T,17	;MASK LOW ORDER BCD DIGIT
			CAIN T,12	;HAVE WE OVERFLOWED TO NEXT DIGIT?
			ADDI TT,66	;YUP, FIX IT UP
			MOVEM TT,FILNAM	;SIXBIT FILENAME IS NOW ONE GREATER
			JRST .+1]
	SKIPE CALCMP
	OUTSTR[PPLSTR:	ASCIZ/ PUT PEN AT LOWER LEFT.
/]
MXGP,<	MOVSI T,400000	;INITIALIZE MAX AND MIN X & Y CELLS
	MOVEM T,LRGX#
	MOVEM T,LRGY#
	HRLOI T,377777
	MOVEM T,SMLX#
	MOVEM T,SMLY#
>;MXGP
	SETZM CURSE#
	SETZM PTYPE#
	SKIPE AMDAHL
	PUSHJ P,AMDORG	;SET UP PLOTTER TO AMDAHL CALIBRATE POSITION, LAMP OFF
	PUSHJ P,GETMGR	;GET FIRST CHARACTER
	CAIA		;RETURNS HERE IF EOF
	JRST PLOP1	;DIDN'T GET EOF--PROCEED NORMALLY
	SKIPN EOT	;HAVE EOF--WAS PREV. RECORD EOF OR IS THIS BEG. OF TAPE?
	JRST[EMTERR:	OUTSTR[EMTSTR:	ASCIZ/--EMPTY FILE
/]					;BEGINNING OF TAPE--NULL FILE
			JRST MAGQ]	;GO SEE IF WE'RE LOOPING

	OUTSTR[EOTSTR:	ASCIZ/--NOT RECORDED--END OF TAPE.
/]			;TELL HIM WE DIDN'T RECORD THIS "PLOTnn" FILE, AND STOP
	RESET
	EXIT

;PLOP
PLOP:	PUSHJ P,GETMAG	;GETMAG IGNORES RECORD BOUNDARIES IF INDEV IS DSK OR
			; WE ARE EXPECTING A COLUMN 1 CHAR

PLOP1:	SKIPE AMDAHL
	CAIE A," "		;SPACES ARE OK AT AMDAHL
	CAIN A,"*"		;JUST DUMMY COMMAND?
	JRST PLOP		;YES
	SKIPE AMDAHL
	JRST BARE		;AMDAHL DOESN'T USE M OR G PREFIXES
	CAIN A,"M"		;TEXT?
	JRST DOTXT		;YES
	CAIE A,"G"
	BUG [MOGSTR:	ASCIZ/COMMAND DOESN'T BEGIN WITH M OR G!
/]
	PUSHJ P,GETMAG	;GETMAG BARFS IF EOR OCCURS
	MOVEM A,SAVEA#
	PUSHJ P,GETMAG
	HRL A,SAVEA
	CAMN A,[LINMOV:	XWD "0","1"]
	JRST LINEAR		;LINEAR MOVE!
	CAMN A,[RETCMD:	XWD "5","4"]
	JRST [	PUSHJ P,RETSEL		;RETICLE SELECT!
		JRST PLOP]

	CAMN A,[FLACMD:	XWD "5","5"]
	JRST [	PUSHJ P,FLASH		;FLASH PAD
		JRST PLOP]
	CAMN A,[MESCMD:	XWD "5","7"]
	JRST MESSAG		;OPERATOR MESSAGE
	BUG [UNGSTR:	ASCIZ/UNKNOWN "G" COMMAND
/]
	JRST PLOP

BARE:	CAIN A,"M"
	JRST DOTXT
	CAIE A,"D"	;A BARE GERBER IS PRETTY PRIMITIVE
	JRST RELMOV	;BETTER BE AN X OR Y OR M IF IT ISN'T D
	PUSHJ P,GOTD
	JRST PLOP

GOTD:	PUSHJ P,GETMAG
	CAIE A,"0"
	JRST RETSL1	;NOT D0n, BETTER BE D10-D19
	PUSHJ P,GETMAG
	CAIN A,"1"
	JRST[	MOVEI D,2	;LAMP ON
		JRST DOSTAR]
	CAIN A,"2"
	JRST[	MOVEI D,3	;LAMP OFF
		JRST DOSTAR]	;INSIST ON ASTERISK AFTER Dnn
	CAIN A,"3"
	JRST FLASH1
	BUG [AMD123:	ASCIZ/"D0" NOT FOLLOWED BY 1,2, OR 3
/]
	POPJ P,

DOSTAR:	PUSHJ P,GETMAG
	CAIE A,"*"
	BUG [NSTARD:    ASCIZ/MISSING "*"
/]
	POPJ P,

;RELMOV
RELMOV:	SETZM TRAVEL
	CAIE A,"X"
	JRST NOX
	SETOM TRAVEL
	PUSHJ P,GETNUM
	HLRE TT,CURSE	;GET X POS
	ADD T,TT
	SKIPG T
	BUG XLOSTR
	CAIE D,2	;LAMP ON?
	JRST[	CAIG T,AMXOFF	;NO, CHECK AGAINST TABLE BOUNDARY
		JRST XOK
		BUG XHISTR
		JRST XOK]

	CAML T,XFILM	;YES, CHECK AGAINST FILM BOUNDARY
	BUG [ASCIZ/OFF FILM, +X !
/]
XOK:	HRLM T,CURSE
NOX:	CAIE A,"Y"
	JRST NOY
	SETOM TRAVEL
	PUSHJ P,GETNUM
	HRRE TT,CURSE	;GET Y POS
	ADD T,TT
	SKIPG T
	BUG YLOSTR
	CAIE D,2	;LAMP ON?
	JRST[	CAIG T,AMYOFF	;NO, CHECK AGAINST TABLE BOUNDARY
		JRST YOK
		BUG YHISTR
		JRST YOK]

	CAML T,YFILM	;YES, CHECK AGAINST FILM BOUNDARY
	BUG [ASCIZ/OFF FILM, +Y
/]
YOK:	HRRM T,CURSE
NOY:	SKIPN TRAVEL
	JRST[	UNKBUG:	BUG [	UNKZ:	ASCIZ/UNKNOWN COMMAND
/]
			JRST PLOP]
	CAIN A,"D"	;D COMMAND AFTER XY?
	JRST[	PUSHJ P,GETMAG
		CAIE A,"0"
		BUG ILLDZ
		PUSHJ P,GETMAG
		CAIL A,"1"
		CAILE A,"3"
		BUG [	ILLDZ:	ASCIZ/ILLEGAL "D" COMMAND
/]
		CAIN A,"1"
		MOVEI D,2	;PEN DOWN
		CAIN A,"2"
		MOVEI D,3	;PEN UP
		CAIN A,"3"
		SETOM FLSH	;FLASH
		PUSHJ P,GETMAG	;GET ASTERISK
		JRST .+1]
		
	CAIN D,2			;LAMP ON?
	JRST [	VISMOV:	PUSHJ P,PLTRET	;YES, PLOT RETICLE BEING SWEPT, IF ANY
			MOVE T,CURSE
			PUSHJ P,FIXXY	;SET X AND Y TO GOAL, UPDATE EXTREMA
			PUSHJ P,PLOTIT	;DO IT
			PUSHJ P,PLTRET	;PLOT SWEPT RETICLE AT END OF MOVE, TOO
			JRST XYAST]
	MOVE T,CURSE
	PUSHJ P,FIXXYN	;LAMP OFF--SET UP X AND Y, DON'T UPDATE EXTREMA
	PUSHJ P,PLOTIT
	SKIPE FLSH
	PUSHJ P,FLASH2	;FLASH IF MOVE COMMAND HAD "D03" SUFFIX
XYAST:	CAIE A,"*"
	BUG [	NASTXY:	ASCIZ/NO "*" AFTER XY
/]
	JRST PLOP

;DOTXT
DOTXT:	PUSHJ P,GETMAG
	CAIE A,"0"
	JRST[	SKIPN AMDAHL
		JRST ISTXT
		JRST MBUG]
	PUSHJ P,GETMAG
	CAIE A,"0"
MBUG:	BUG [	UNMSTR:	ASCIZ/UNKNOWN "M" COMMAND
/]
	JRST DONE

ISTXT:	CAIE A,"5"
	BUG [ITSSTR:	ASCIZ/ILLEGAL TEXT SCALE
/]
	PUSHJ P,GETMAG
	CAIL A,"0"
	CAILE A,"4"
	BUG [ASCIZ/ILLEGAL TEXT SCALE
/]
	SKIPE T,MTAB-60(A)
	JRST GOTSCL
CHRSC1:	OUTSTR[HM5STR:	ASCIZ/HEIGHT FOR M5/]
	OUTCHR A
	OUTSTR[HSISTR:	ASCIZ/ SCALE IDENTIFIER?/]
	PUSHJ P,DECIN
	CAIE T,12
	JRST [INERR2:	OUTSTR[INPERR:	ASCIZ/INPUT ERROR!
/]
			CLRBFI
			JRST CHRSC1]
	JUMPE TTT,[ZROERR:	OUTSTR[ZRISTR:	ASCIZ/0 ILLEGAL!
/]
				JRST CHRSC1]
	MOVE T,TTT
	IDIVI T,=15
	JUMPN TT,[DIVERR:	OUTSTR[DIVSTR:	ASCIZ/MUST BE DIVISIBLE BY 15!
/]
	 			JRST CHRSC1]
	IMULI T,3			;MAKE INTO 5 MIL INCREMENTS
	MOVEM T,MTAB-60(A)		;SAVE IN TABLE
GOTSCL:	MOVEM T,CSIZZ#
	PUSHJ P,GETMAG
	CAIE A,"G"
	BUG [NGASTR:	ASCIZ/NO "G" COMMAND AFTER "M" COMMAND
/]
	PUSHJ P,GETMAG
	CAIE A,"5"
	BUG [IGASTR:	ASCIZ/ILLEGAL "G" COMMAND AFTER "M" COMMAND
/]
	PUSHJ P,GETMAG
	SETOM TYPTXT#
	CAIN A,"8"		;TYPE AND PLOT
	JRST NRMTXT
	SETZM TYPTXT
	CAIN A,"6"
	JRST NRMTXT
	CAIN A,"3"
	JRST VERT
	CAIN A,"2"
	JRST HORZ
	BUG [ASCIZ/ILLEGAL "G" COMMAND AFTER "M" COMMAND
/]
;FALLS THRU
NRMTXT:	PUSHJ P,GETMAG
	CAIE A,"D"
	BUG [NDSTR:	ASCIZ/NO "D" COMMAND IN STD TEXT
/]
	PUSHJ P,GETMAG
	CAIE A,"1"
	BUG [IDSTR:	ASCIZ/ILLEGAL "D" COMMAND IN STD TEXT
/]
	PUSHJ P,GETMAG
	CAIE A,"0"
	BUG [ASCIZ/ILLEGAL "D" COMMAND IN STD TEXT
/]
	MOVE B,[STRPNT:	POINT 7,STRING]
	SKIPE TYPTXT
	OUTSTR[DMSTR:	ASCIZ/DRAW AND MESSAGE:	/]
TXTLOP:	PUSHJ P,GETMAG
	SKIPE TYPTXT
	OUTCHR A
	CAIN A,"*"
	JRST TXTEND
	IDPB A,B
	JRST TXTLOP
TXTEND:	SKIPE TYPTXT
	OUTSTR[ASCIZ/
/]
	MOVEI A,0
	IDPB A,B
	SETZM ANGLE#
TXTIN1:	MOVE T,CURSE
	SKIPE NOTXT
	JRST[	CAMN T,[HEDPOS:	XWD 310,310]	;DETECT INFAMOUS HEADER POSITION
		JRST PLOP	;TXTIN2 IS THUS A NO-OP IF TEXT ORIGIN IS 500,500
		JRST .+1 ]
	PUSHJ P,FIXXY
	PUSHJ P,TXTIN2
	PUSHJ P,CLEAVE
	JRST PLOP

;CLEAVE
CLEAVE:	PUSHJ P,UNFIX
	MOVEM T,CURSE
MXGP,<	MOVE T,CSIZZ
	ASH T,1
	SETZ TT,
	SKIPE ANGLE
	JRST [ANGL:	MOVN T,T
			EXCH T,TT
			JRST .+1]
	ADD T,Y
	ADD TT,X
	JRST CHKXY
;>	POPJ P,

TXTIN2:	PUSH P,T
	PUSH P,TT
	MOVE TT,CSIZZ		;SCALE
	MOVE T,[0,,CHRTAB(1)]	;GET POINTER FOR STANDARD CHARACTER SET 
	SKIPN XTHICK		;DON'T EVEN CONSIDER STRETCHED SET IF XTHICK ISN'T TRUE
	JRST .+3
	CAIN TT,10
	MOVE T,[0,,CHRTB1(1)]	;GET ADDRESS OF STRETCHED CHARACTER SET IF SCALE=1
	MOVEM T,CHRTBL#		;POINT SYMBOL ROUTINE AT PROPER CHARACTER SET
	POP P,TT
	POP P,T
	JSA 16,SYMBOL
	JUMP X
	JUMP Y
	JUMP CSIZZ
	JUMP ANGLE
	JUMP STRING
	JUMP [.5H5WD:	XWD 5,5]
	JSA 16,WHERE
	JUMP X
	JUMP Y
	POPJ P,

;VERT:HORZ
VERT:	MOVEI T,1
	MOVEM T,ANGLE
	CAIA
HORZ:	SETZM ANGLE
	MOVE T,CURSE
	PUSHJ P,FIXXY
HVLOP:	PUSHJ P,GETMAG
	CAIN A,"*"
	JRST HVLOP		;LOOP ON STARS
	CAIE A,"D"
	JRST [NOTD:	PUSHJ P,CLEAVE
			JRST PLOP1]
	SETZ T,
	PUSHJ P,GETNM1
	CAIE A,"*"
	BUG [HVSTR:	ASCIZ/NO "*" AFTER CHAR IN HV TEXT
/]
	CAIL T,=10
	CAILE T,=99
	BUG [IHVSTR:	ASCIZ/ILLEGAL CHAR IDENT IN HV TEXT
/]
	SKIPN TT,ONETAB(T)
	JRST NEWCHR
	MOVEM TT,STRING
HVLOP1:	PUSHJ P,TXTIN2
	JRST HVLOP

NEWCHR:	OUTSTR[CODSTR:	ASCIZ/TYPE CHARACTER FOR CODE /]
	MOVE TT,T
	IDIVI TT,=10
	ADDI TT,60
	ADDI TTT,60
	OUTCHR TT
	OUTCHR TTT
	OUTSTR[LASTR:	ASCIZ/ _ /]
	INCHRW TT
	OUTSTR[ASCIZ/
/]
	LSH TT,4*7+1
	MOVEM TT,STRING
	MOVEM TT,ONETAB(T)
	JRST HVLOP1

STRING:	BLOCK 20
;LINEAR:MESSAG:RETSEL:RETSL1:RETTAB:LMOVE:FIXXY:RETDON:FIXXYN:UNFIX:

MESSAG:	PUSHJ P,GETMAG
	CAIE A,"D"
	BUG [MS1STR:	ASCIZ/NO "D" STARTING MESSAGE
/]
	PUSHJ P,GETMAG
	CAIE A,"1"
	BUG [MS2STR:	ASCIZ/NO "1" STARTING MESSAGE
/]
	PUSHJ P,GETMAG
	CAIE A,"0"
	BUG [MS3STR:	ASCIZ/NO "0" STARTING MESSAGE
/]
	OUTSTR[MS4STR:	ASCIZ/MESSAGE:	/]
	PUSHJ P,GETMAG
	OUTCHR A
	CAIE A,"*"
	JRST .-3
	OUTSTR[ASCIZ/
/]
	JRST PLOP

RETSEL:	PUSHJ P,GETMAG
	CAIE A,"D"
	BUG [RS1STR:	ASCIZ/NO "D" STARTING RETICLE SELECT
/]
	PUSHJ P,GETMAG
RETSL1:	CAIL A,"0"
	CAILE A,"9"
	BUG RS3STR
	MOVEI T,-"0"(A)
	IMULI T,=10
	PUSHJ P,GETMAG
	CAIL A,"0"
	CAILE A,"9"
	BUG [RS3STR:	ASCIZ/ILLEGAL RETICLE SELECT
/]
	ADDI T,-"0"(A)
	MOVE A,T
	CAIL A,=10	;D10 THRU D29 ARE OK
	CAILE A,=29
	JRST[	CAIL A,=70	;D70 THRU D73 ARE OK
		CAILE A,=73
		BUG RS3STR
		SUBI A,=40	;PARTIALLY SCALE
		JRST .+1]

	MOVE E,RETTAB-=10(A)
	MOVEM E,PTYPE
	OUTSTR[RS4STR:	ASCIZ/RETICLE SELECT:	D/]
	PUSHJ P,DECOUT
	OUTSTR[ASCIZ/
/]
	PUSHJ P,GETMAG
	CAIE A,"*"
	BUG [RS5STR:	ASCIZ/NO "*" AFTER RETICLE SELECT
/]
	SKIPN CHANGE		;DOES HE WANT TO BE ASKED?
	POPJ P,			;NO
	JSA 16,PLOT
	JUMP [0]
	JUMP [0]
	JUMP [-3]
	OUTSTR[CHPSTR:	ASCIZ/CHANGE PENS?/]
	CLRBFI
	INCHRW	T
	CAIN T,15
	INCHRW T
	POPJ P,

;RETTAB
RETTAB:	XWD 0,0			;D10	LINES
	XWD 0,0			;D11	LINES
	XWD 0,0			;D12	LINES
	XWD 0,0			;D13	LINES
	XWD 0,0			;D14	LINES
	XWD 0,0			;D15	LINES
	XWD 0,0			;D16	LINES
	XWD 0,0			;D17	LINES
	XWD 0,0			;D18	LINES
	XWD 0,0			;D19	LINES
	XWD 0,0			;D20	LINES
	XWD 0,0			;D21	LINES
	XWD -SQRLEN,SQRTAB	;D22	SQUARE PAD
	XWD -SQRLEN,SQRTAB	;D23	PIN 1 SQUARE
	XWD -S120LN,S120TB	;D24	INNER PLANE BORDER (120 ROUND)
FNGRET:	XWD 0,0			;D25	FINGERS (80 OR 64 SQUARE)
	XWD -PLSLEN,PLSTAB	;D26	DRILL PLUS (FOR DONUT)
	XWD -XLEN,XTAB		;D27	UNCOMMITTED PAD
	XWD -CLRLEN,CLRTAB	;D28	INNER PLANE CLEARANCE
	XWD -PADLEN,PADTAB	;D29	STANDARD PAD
	XWD 0,0			;D70	LINES
	XWD 0,0			;D71	LINES
	XWD -TGLEN,TGTAB	;D72	QUAD REG MARK
	XWD -TGLEN,TGTAB	;D73	TARGET

LINEAR:	PUSHJ P,GETMAG
	CAIN A,"X"
	JRST LMOVE
	CAIE A,"D"
	BUG [NDXSTR:	ASCIZ/NO "D" IN X COMMAND
/]
	PUSHJ P,GETMAG
	CAIE A,"0"
	BUG [N0XSTR:	ASCIZ/NO "0" IN X COMMAND
/]
	PUSHJ P,GETMAG
	CAIE A,"2"
	BUG [N2XSTR:	ASCIZ/NO "2" IN X COMMAND
/]
	JSA 16,WHERE
	JUMP X
	JUMP Y
	JSA 16,PLOT
	JUMP X
	JUMP Y
	JUMP [.3:	3]
	PUSHJ P,GETMAG
	CAIE A,"*"
	BUG [	NAXSTR:	ASCIZ/NO "*" AFTER X COMMAND
/]
	JRST PLOP

;LMOVE
LMOVE:	PUSHJ P,GETNUM
	ADD T,OFFX			;OFFSET X
	SKIPGE T
	BUG [	XLOSTR:	ASCIZ/OFF TABLE, -X
/]
	CAML T,XFILM
	BUG [	XHISTR:	ASCIZ/OFF TABLE, +X
/]
	HRLM T,CURSE
	CAIE A,"Y"
	BUG [	NXYSTR:	ASCIZ/NO X OR Y COMMAND IN MOVE
/]
	PUSHJ P,GETNUM
	ADD T,OFFY
	SKIPGE T
	BUG [	YLOSTR:	ASCIZ/OFF TABLE, -Y
/]
	CAML T,YFILM
	BUG [	YHISTR:	ASCIZ/OFF TABLE, +Y
/]
	HRRM T,CURSE
	CAIE A,"D"
	BUG [	NDYSTR:	ASCIZ/NO "D" IN Y COMMAND
/]
	PUSHJ P,GETMAG
	CAIE A,"0"
	BUG [	N0YSTR:	ASCIZ/NO "0" IN Y COMMAND
/]
	PUSHJ P,GETMAG
	CAIN A,"1"
	JRST [	RETSIM:	MOVEI D,2	;PEN DOWN
			PUSHJ P,PLTRET	;PLOT RETICLE BEFORE WE MOVE
			MOVE T,CURSE	;SET UP DESTINATION IN T
			PUSHJ P,FIXXY	;SCALE FOR PLOTTER, UPDATE XGP EXTREMA
			PUSHJ P,PLOTIT	;MOVE
			PUSHJ P,PLTRET	;PLOT RETICLE AT END OF MOVE
			JRST RETDON]
	CAIE A,"2"
	BUG [	N2YSTR:	ASCIZ/NO "2" IN Y COMMAND
/]
	MOVEI D,3	;PEN UP
	MOVE T,CURSE	;SET UP T
	PUSHJ P,FIXXYN	;FIX UP X & Y, BUT DON'T UPDATE X&Y EXTREMA
	PUSHJ P,PLOTIT
RETDON:	PUSHJ P,GETMAG
	CAIE A,"*"
	BUG [	NMSTR3:	ASCIZ/NO "*" AFTER MOVE COMMAND
/]
	JRST PLOP

;FIXXY
FIXXY:	PUSH P,T
	HLRE TT,T	;GET X
	HRRES T		;GET Y
	ASH T,-1
	ASH TT,-1	;TAKE OUT FACTOR OF 2
	MOVEM TT,X#
	MOVEM T,Y#
MXGP,<	PUSHJ P,CHKXY>
	POP P,T
	POPJ P,

FIXXYN:	PUSH P,T
	HLRE TT,T	;GET X
	HRRES T		;GET Y
	ASH T,-1
	ASH TT,-1	;TAKE OUT FACTOR OF 2
	MOVEM TT,X
	MOVEM T,Y
	POP P,T
	POPJ P,

MXGP,<
CHKXY:	CAMLE TT,LRGX
	MOVEM TT,LRGX
	CAMGE TT,SMLX
	MOVEM TT,SMLX
	CAMLE T,LRGY
	MOVEM T,LRGY
	CAMGE T,SMLY
	MOVEM T,SMLY
	POPJ P,
>;MXGP

UNFIX:	MOVE TT,X
	ASH TT,1
	MOVE T,Y
	ASH T,1
	HRL T,TT
	POPJ P,
;PAD TABLES

DEFINE XY(X,Y)
<	XWD <X>/5*2,<Y>/5*2	>
RADIX =10
XTAB:	XY	25,25
	XY	-25,-25
	XY	25,-25
	XY	-25,25
XLEN__.-XTAB

PLSTAB:	XY	0,25
	XY	0,-25
	XY	0,0
	XY	25,0
	XY	-25,0
PLSLEN__.-PLSTAB

S120TB:	XY	0,60
	XY	60,60
	XY	60,-60
	XY	-60,-60
	XY	-60,60
	XY	0,60
S120LN__.-S120TB
	XY	0,0
	XY	60,0
	XY	0,0

S80TB:	XY	0,40
	XY	40,40
	XY	40,-40
	XY	-40,-40
	XY	-40,40
	XY	0,40
S80LN__.-S80TB
	XY	0,0
	XY	40,0
	XY	0,0

S64TB:	XY	0,32
	XY	32,32
	XY	32,-32
	XY	-32,-32
	XY	-32,32
	XY	0,32
S64LN__.-S64TB
	XY	0,0
	XY	32,0
	XY	0,0

SQRTAB:	XY	0,25
	XY	25,25
	XY	25,-25
	XY	-25,-25
	XY	-25,25
	XY	0,25
SQRLEN__.-SQRTAB

PADTAB:	
	XY	-5,-25
	XY	-20,-20
	XY	-25,-5
	XY	-25,5
	XY	-20,20
	XY	-5,25
	XY	5,25
	XY	20,20
	XY	25,5
	XY	25,-5
	XY	20,-20
	XY	5,-25
	XY	-5,-25
PADLEN__.-PADTAB

;CLRTAB:TGTAB:
CLRTAB:
	XY	10,-35
	XY	20,-30
	XY	30,-20
	XY	35,-10
	XY	35,10
	XY	30,20
	XY	20,30
	XY	10,35
	XY	-10,35
	XY	-20,30
	XY	-30,20
	XY	-35,10
	XY	-35,-10
	XY	-30,-20
	XY	-20,-30
	XY	-10,-35
	XY	10,-35
CLRLEN__.-CLRTAB

TGTAB:	XY	-20,-90
	XY	-50,-80
	XY	-80,-50
	XY	-90,-20
	XY	-90,20
	XY	-80,50
	XY	-50,80
	XY	-20,90
	XY	20,90
	XY	50,80
	XY	80,50
	XY	90,20
	XY	90,-20
	XY	80,-50
	XY	50,-80
	XY	20,-90
	XY	-20,-90
	XY	-20,-60
	XY	-40,-50
	XY	-50,-40
	XY	-60,-20
	XY	-60,20
	XY	-50,40
	XY	-40,50
	XY	-20,60
	XY	20,60
	XY	40,50
	XY	50,40
	XY	60,20
	XY	60,-20
	XY	50,-40
	XY	40,-50
	XY	20,-60
	XY	-20,-60
	XY	-10,-30
	XY	-30,-10
	XY	-30,10
	XY	-10,30
	XY	10,30
	XY	30,10
	XY	30,-10
	XY	10,-30
	XY	-10,-30
	XY	0,-5
	XY	-5,0
	XY	0,5
	XY	5,0
	XY	0,0
TGLEN__.-TGTAB

RADIX 8
;FLASH:PLTRET:RETRPT:PLOTIT:ORIENT:DONE:SWPXGP:GOTEOF:BUG:FLASH1:FLASH2:PUTPAD:

FLASH:	PUSHJ P,GETMAG
	CAIE A,"D"
	BUG [FL1STR:	ASCIZ/NO "D" IN FLASH COMMAND
/]
	PUSHJ P,GETMAG
	CAIE A,"0"
	BUG [FL2STR:	ASCIZ/NO "0" IN FLASH COMMAND
/]
	PUSHJ P,GETMAG
	CAIE A,"3"
	BUG [FL3STR:	ASCIZ/NO "3" IN FLASH COMMAND
/]
FLASH1:	PUSHJ P,GETMAG
	CAIE A,"*"
	BUG [FL4STR:	ASCIZ/NO "*" AFTER FLASH COMMAND
/]
FLASH2:	SKIPN E,PTYPE
	BUG [FL5STR:	ASCIZ/NO PAD TYPE SELECTED FOR FLASH COMMAND
/]
	PUSH P,D	;SAVE LAMP VALUE
	MOVEI D,3	;FIRST MOVE INVISIBLE
PUTPAD:	MOVE T,(E)	;GET RETICLE POINT
	ADD T,CURSE
	TLZ T,1
	PUSHJ P,FIXXY
	PUSHJ P,PLOTIT
	MOVEI D,2
	AOBJN E,PUTPAD
	SKIPE AMDAHL
	JRST [	AMDPAD:	MOVEI D,3	;PEN UP
			MOVE T,CURSE	;POSITION BEFORE DRAWING PAD
			PUSHJ P,FIXXYN	;SET X AND Y
			PUSHJ P,PLOTIT	;MOVE BACK
			POP P,D		;RESTORE LAMP VALUE
			SETZM FLSH	;INDICATE WE EXECUTED FLASH
			POPJ P,]

	JSA 16,WHERE	;SEE WHERE WE ARE AFTER DRAWING RETICLE
	JUMP X
	JUMP Y
	PUSHJ P,CLEAVE	;UPDATE CURSE
	POP P,D		;RESTORE LAMP VALUE
	POPJ P,

;PLTRET
;PLOT RETICLE WITHOUT MOVING THE PEN, TO INDICATE THIS RETICLE IS BEING
; SWEPT ALONG THE PATH OF THE TRACE CONNECTING IT TO ALL IDENTICAL RETICLE
; TRACINGS. (INCREDIBLY EASIER TO DO THAN SIMULATING THE SWEEP OF A RETICLE)
PLTRET:	SKIPN T,PTYPE	;SKIP THE FANCY STUFF IF RETICLE IS ONLY A TRACE
	POPJ P,
	PUSH P,X
	PUSH P,Y
	PUSHJ P,RETRPT	;PLOT RETICLE ACCORDING TO STANDARD RETICLE TABLE
	ADD T,[XHRWD:	-3,,0]
	PUSHJ P,RETRPT	;PLOT THE EXTRA SEGMENT OF CROSSHAIR TO IDENTIFY THIS
	POP P,Y		; AS A SWEPT RETICLE (CURRENTLY ONLY IMPLEMENTED FOR
	POP P,X		; 64, 80, & 120 MIL SQUARE RETICLES)
	POPJ P,

RETRPT:	HRRE TT,(T)
	ASH TT,-1
	ADDM TT,X
	HLRE TT,(T)
	ASH TT,-1
	ADDM TT,Y
	PUSHJ P,PLOTIT
	MOVE TT,-1(P)	;IF THE RETICLE TABLES WERE IN INCREMENTAL FORM,
	MOVEM TT,Y	;THIS MINUET WOULD BE UNNECESSARY.
	MOVE TT,-2(P)
	MOVEM TT,X
	AOBJN T,RETRPT
	POPJ P,

PLOTIT:	JSA 16,PLOT
	JUMP X
	JUMP Y
	JUMP D
	POPJ P,

ORIENT:	TLO T,1
	XCT (F)XTB1
	XCT (F)XTB2
	XCT (F)XTB3
	TRZ T,1
	POPJ P,

XTB1:	TLZ T,1
	MOVSS T
	MOVNS T
	TLC T,-2
XTB2:	SKIPA
	TLC T,-2
	ADD T,[SWP2:	(2)]
	ADD T,[(2)]
XTB3:	0
	ADD T,[(2)]
	TLZ T,1
	MOVSS T

;DONE
DONE:	PUSHJ P,GETMAG
	CAIE A,"*"
	OUTSTR[NAMST2:	ASCIZ/NO "*" AFTER M00
/]
ASTLOP:	PUSHJ P,GETMGR	;NOW MAKE SURE THERE ARE NOTHING BUT ASTERISKS FROM
			;HERE TO END OF FILE
	JRST GOTEOF
	CAIN A,"*"	;NEITHER EOR NOR EOF-BETTER BE A NO-OP
	JRST ASTLOP	; ASTERISKS ARE OK
	SKIPE AMDAHL
	CAIE A," "	; SPACES ARE OK, TOO, WITH AMDAHL
	CAIA
	JRST ASTLOP
	OUTSTR[NONSTR:	ASCIZ/BAD CHARACTER BETWEEN M00* AND EOF: /]
	OUTCHR A
	OUTSTR CRLF
	JRST ASTLOP	;CONTINUE MUNCHING CHARS]

GOTEOF:	SKIPN NOTXT	;OMIT LAST PEN-UP MOVE TO ORIGIN WHICH CAN SCREW XGP
	SKIPE AMDAHL
	CAIA
	JSA 16,PLOT
	JUMP [ZERO:	0]	;THANK GORDON BELL FOR JUMPS THAT DON'T JUMP
	JUMP [0]
	JUMP [PENUP:	-3]
	CLOSE 5,
	CLOSE 17,
	SKIPE AMDAHL
	SKIPN COLCNT
	CAIA
	BUG [ASCIZ/LAST CHAR NOT IN COL. 80
/]
;FALLS THRU
MXGP,<	SKIPN XGPGO	>
	JRST[	MAGQ:	SKIPN GOMAG	;SEE IF WE NEED TO KEEP READING TAPE
			EXIT
			JRST MAGLOP]

MXGP,<
SWPXGP:	MOVE 0,XGPNAM
	MOVE 1,XGPEXT
	SKIPN 2,XGPPPN
	DSKPPN 2,
	SKIPE AMDAHL
	JRST [		AMDFIX:	MOVE 3,LRGX
				SUBI 3,AMXOFF/2
				HRLZS 3
				MOVE 4,SMLX
				SUBI 4,AMXOFF/2
				HRR 3,4
				MOVE 4,LRGY
				SUBI 4,AMYOFF/2
				HRLZS 4
				MOVE 5,SMLY
				SUBI 5,AMYOFF/2
				HRR 4,5
				JRST SWPCON]

	HRL 3,LRGX
	HRR 3,SMLX
	HRL 4,LRGY
	HRR 4,SMLY
SWPCON:	SETO 5,
	GETLIN 5
	MOVEI 10,17	;PLOTTER CHANNEL INTO AC10
	PNAME 10,	;PHYSICAL DEVICE NAME FOR PLX FILE
	SETZ 10,	;SHOULD NEVER GET HERE
	MOVEI 6,14
	HRRM 6,MODWRD
SWPTRY:	MOVEI 6,SWPBLK
	SWAP 6,
	JUMPN 6,SWPWIN
	OUTSTR[SWPSTR:	ASCIZ/SWAP UUO FAILED!
TYPE	TO
Y	TRY AGAIN
ALTMODE	RUN X AS THIS JOB
ANTHING ELSE TO JUST QUIT
?/]
	INCHWL 6
	CAIN 6,15
	INCHWL 6
	CAIE 6,"Y"
	CAIN 6,"y"
	JRST SWPTRY
	HLLZS MODWRD
	CAIN 6,175
	JRST SWPTRY
SWPWIN:	JRST MAGQ
>;MXGP

SWPBLK:	'SYS   '
	'X     '
MODWRD:	'DMP   '
	1
	0
	0

BUG:	OUTSTR @40
	HALT CPOPJ
;GETNUM:

GETNUM:	SETZ T,
	PUSHJ P,GETMAG
	CAIE A,"-"
	JRST GETNM3
	PUSHJ P,GETNM1
	MOVNS T
GETNLV:	PUSH P,TT
	IDIVI T,5		;CONVERT FROM MILS TO PLOTTER STEPS
	ASH T,1			;ADD FACTOR OF 2
	SKIPN AMDAHL		;ODD MOVES ARE NECESSARY WITH AMDAHL
	SKIPN TT
	CAIA
	BUG [NZRSTR:	ASCIZ/NON-ZERO REMAINDER ON DIVIDE BY 5 AT GETNUM!
/]
	POP P,TT
	POPJ P,

GETNM3:	PUSHJ P,GETNM2
	JRST GETNLV

GETNM1:	PUSHJ P,GETMAG
GETNM2:	CAIL A,"0"
	CAILE A,"9"
	POPJ P,
	IMULI T,=10
	ADDI T,-60(A)
	JRST GETNM1
;ECHO:PUTLPT:PUTARW:PUTLCR:PUTSCR:TRIPLE:

ECHO:	SKIPN DOLPT
	POPJ P,
PUTLPT:	SOSG LPTBUF+2	;COPY CHAR IN A TO LPT
	OUT 1,
	CAIA
	JRST [OUTERR:	OUTSTR[LPRSTR:	ASCIZ/LPT OUTPUT ERROR!
/]
		HALT .+1]
	IDPB A,LPTBUF+1
	POPJ P,

PUTLCR:	SKIPN DOLPT
	POPJ P,
	PUSH P,A	;CRLF TO LPT
	MOVEI A,15
	PUSHJ P,PUTLPT
	MOVEI A,12
	PUSHJ P,PUTLPT
	POP P,A
	POPJ P,

PUTSCR:	SKIPN DOLPT	;WRITE "###" IF WE'RE LISTING
	POPJ P,
	PUSH P,A
	MOVEI A,"#"
	JRST TRIPLE

PUTARW:	SKIPN DOLPT	;WRITE "___" IF WE'RE OUTPUTTING TO LPT
	POPJ P,
	PUSH P,A
	MOVEI A,"_"
TRIPLE:	PUSHJ P,PUTLPT
	PUSHJ P,PUTLPT
	PUSHJ P,PUTLPT
	POP P,A
	SKIPN AMDAHL
	JRST PUTLCR
	POPJ P,
;GETMAG:GETMGR:MAGIN:ISSOME:

GETMGR:	PUSHJ P,MAGIN
	CAIA		;MAGIN'S EOR RETURN
	JRST[		;MAGIN'S EOF RETURN

		EOFOK:	SKIPN AMDAHL
			PUSHJ P,PUTLCR	;PRINT SHARPS ON LISTING FOR EACH EOF
			JRST PUTSCR]	;EOF GIVES NON-SKIP RETURN

	AOS (P)		;MAGIN'S NORMAL RETURN
	JRST ECHO


GETMAG:	PUSHJ P,MAGIN
	JRST ECHO	;EOF RETURN FROM MAGIN
	JRST[	BUG[ASCIZ/ILLEGAL EOF!
/]
		JRST PUTSCR]

	JRST ECHO	;NORMAL RETURN FROM MAGIN



MAGIN:	SOSLE MAGBUF+2	;GET A CHAR INTO A-SKIP RETURN IF NOT EOR
	JRST ISSOME
	IN 5,
	CAIA	;WIN
	JRST [INTST:	GETSTS 5,T	;FIND OUT WHY WE LOST
			ANDI T,ERRMSK	;CLEAR ALL BUT ERROR STUFF
			CAIE T,EOF	;ERROR IF NOT EOF
			BUG [MTESTR:	ASCIZ/MAGTAPE ERROR!
/]
			SKIPE AMDAHL	;CHECK CARD BLOCKING AT EOF FOR AMDAHL
			SKIPN COLCNT	; WHETHER WE'RE DOING MAGTAPE OR DISK
			CAIA
			BUG[ASCIZ/COLCNT NOT ZERO AT EOF!
/]
			SKIPE LSTEOF	;CHECK IF LAST RECORD WAS EOF
			SETOM EOT	;IF SO, SET END OF TAPE INDICATOR
			SETOM LSTEOF	;SET EOF INDICATOR
			JRST CPOPJ1]	;AND TAKE SKIP RETURN

	SKIPE AMDAHL	;CHECK CARD BLOCKING ON RECORD BOUNDARY FOR AMDAHL
	SKIPN MAGLEN	; IF WE'RE READING MAGTAPE
	CAIA
	JRST[	CRDBLK:	SKIPE COLCNT	;COLCNT BETTER BE ZERO AT EOR
			BUG[ASCIZ/COLCNT NOT ZERO AT EOR!
/]
			JRST .+1]

	SKIPN LSTEOF	;DON'T PRINT ARROWS ON FIRST RECORD OF FILE
	PUSHJ P,PUTARW
	SETZM LSTEOF	;THIS IS JUST A RECORD GAP, NOT A FILE MARK
	SOS (P)		;SET UP TO TAKE NOSKIP RETURN INDICATING EOR
	SOS (P)
ISSOME:	ILDB A,MAGBUF+1
	MOVE A,ASCTAB(A)
	MOVEI TT,=79	;PREPARE TO RESET COLCNT
	SKIPE AMDAHL	;JUST LEAVE IF NOT AMDAHL
	SOSL COLCNT	;IF COLCNT WAS 0 WE WERE IN COL 80 BEFORE THIS CHAR
	JRST CPOPJ2	;WE WEREN'T IN COL 80, LEAVE.
	PUSHJ P,PUTLCR	;WE WERE, WRITE CRLF
	MOVEM TT,COLCNT	; AND RESET COL TO 1
	CAIN A," "	;THIS HAD BETTER BE A SPACE
	JRST [	WASSP:	PUSHJ P,ECHO	;PRINT THIS SPACE BEFORE WE LOOP BACK
			JRST MAGIN]	; TO GET COL. 2 CHAR

	BUG[	NOTSPC:	ASCIZ/COLUMN 1 CHAR NOT A SPACE!
/]
	JRST CPOPJ2	;TAKE TWOSKIP RETURN IF NEITHER EOF NOR EOR

;ASCTAB:ONETAB:

ASCTAB:	" "	;00
	"1"
	"2"
	"3"
	"4"
	"5"
	"6"
	"7"
	"8"	;10
	"9"
	"0"	;12
	"="
	"'"
	":"
	"!"
	">"
	" "	;20
	"/"
	"S"
	"T"
	"U"
	"V"
	"W"
	"X"	;27
	"Y"
	"Z"
	0
	","
	"("
	0
	"]"
	42
	"-"	;40
	"J"
	"K"
	"L"
	"M"	;44
	"N"
	"O"
	"P"
	"Q"
	"R"
	";"
	"$"
	"*"	;54
	"["
	0
	0
	"+"
	"A"
	"B"
	"C"
	"D"	;64
	"E"
	"F"
	"G"
	"H"
	"I"
	"^"
	"."
	")"
	"%"
	"\"
	"_"

ONETAB:	REPEAT =10,<0>
	BYTE(7)40
	FOR I_101,132
<	BYTE(7)I
>
	BYTE(7)"/"
	BYTE(7)"+"
	BYTE(7)"-"
	FOR I_60,71
<	BYTE(7)I
>
	BYTE(7)"."
	BYTE(7)","
	BYTE(7)"("
	BYTE(7)")"
	BYTE(7)"="
	BYTE(7)14
	BYTE(7)""
	0
	BYTE(7)"*"
	BLOCK =99-=58
;SETNAM:RJUST:GETWRD:GETSKP:GETCHR:SDECIN:DECIN:READN:OUTSIX:PATCH:

SETNAM:	MOVEM T,DEFEXT#	;TT CONTAINS DEVICE NAME, T CONTAINS DEFAULT EXTENSION
	DEVCHR TT,
	TLNN TT,4		;DIR DEV?
	POPJ P,			;NO, JUST RETURN
SETIT:	MOVE TT,DEFEXT
	MOVEM TT,FILEXT
	SETZM FILPPN
	SETZM FILDAT
	SKIPE GOMAG	;DON'T PROMPT IF AUTO READ MODE
	JRST [	AUTO1:	MOVE T,FILNAM
			MOVEM T,SAVNAM
			POPJ P,]
	PUSHJ P,OUTSIX
	OUTSTR[FNMSTR:	ASCIZ/ FILENAME?/]
	PUSHJ P,GETWRD
	SKIPN TTT
	MOVE TTT,SAVNAM		;TRY SAVED NAME IF 0
	JUMPE TTT,FILERR
	MOVEM TTT,FILNAM
	CAIE T,"."
	JRST NOEXT
	PUSHJ P,GETWRD
	MOVEM TTT,FILEXT
NOEXT:	CAIE T,"["
	JRST NOPPN
	PUSHJ P,GETWRD
	PUSHJ P,RJUST
	JUMPE TTT,FILERR
	MOVEM TTT,FILPPN
	CAIE T,","
	JRST FILERR
	PUSHJ P,GETWRD
	PUSHJ P,RJUST
	JUMPE TTT,FILERR
	HLRM TTT,FILPPN
	CAIE T,"]"
	TDZA TTT,TTT
	PUSHJ P,GETWRD
	JUMPN TTT,FILERR
NOPPN:	CAIN T,12
	POPJ P,
FILERR:	OUTSTR[QSTR:	ASCIZ/???
/]
	CLRBFI
	JRST SETIT

RJUST:	TLNN TTT,7777
	LSH TTT,-14
	TLNN TTT,77
	LSH TTT,-6
	TRZ TTT,-1
	POPJ P,

;GETWRD
GETWRD:	SETZ TTT,
	MOVE TT,[TTTPNT:	POINT 6,TTT]
GETSKP:	INCHWL T
	CAIN T,40
	JRST GETSKP
GOTCHR:	CAIN T,15
	JRST GETCHR
	CAIGE T,"0"
	POPJ P,
	CAIG T,"9"
	JRST ISCHR
	CAIL T,140
	SUBI T,40
	CAIL T,"A"
	CAILE T,"Z"
	POPJ P,
ISCHR:	SUBI T,40
	TLNE TT,770000
	IDPB T,TT
GETCHR:	INCHWL T
	JRST GOTCHR

DECOUT:	IDIVI T,=10
	HRLM TT,(P)
	JUMPE T,.+2
	PUSHJ P,DECOUT
	HLRZ T,(P)
	ADDI T,60
	OUTCHR T
	POPJ P,

SDECIN:	SETZ TTT,
	INCHWL T
	CAIE T,"-"
	JRST READN1
	PUSHJ P,DECIN
	MOVN TTT,TTT
	POPJ P,

DECIN:	SETZ TTT,
READN:	INCHWL T
READN1:	CAIN T,15
	JRST READN
	CAIL T,"0"
	CAILE T,"9"
	POPJ P,
	IMULI TTT,=10
	ADDI TTT,-60(T)
	JRST READN

OUTSIX:	JUMPE TT,CPOPJ
	SETZ T,
	LSHC T,6
	ADDI T,40
	OUTCHR T
	JRST OUTSIX

PATCH:	BLOCK 100

END STRT
