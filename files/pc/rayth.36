	title ring wraith

a=1
b=2
c=3
d=4
e=5
t=6
tt=7

p=17

mt=10
fl=11
tti=12
tto=13

;magtape definitions

%bksiz==.bp <7000,,>	;record block size
bmmod==400		;4 8-bit characters per word
800bpi==300		;code for 800 bpi
cnkmod==10		;chunk mode, each block iot tries to do one tape block

bk.1k==0		;size of records
bk.512==1
bk.256==2
bk.128==3
bk.64==4
bk.32==5
bk.16==6
bk.8==7

lrecl==80.		;one card
blksiz==1600.		;Raytheon wants 20. cards per block

card:	block <lrecl+4>/5	;ascii card image
carde=.-1

tblock:	block <blksiz+3>/4	;tape block 4 bytes per word

nxcard:	(setz)			;pointer to next card in block
lscard:	(setz)			;where to stop

bufl==1200			;file buffer size
buffer:	block <bufl+4>/5
bufp:	(setz)			;buffer byte pointer
bufc:	0			;# bytes in buffer

tbufl==1024.
tbuf:	block <tbufl+3>/4

inbufl==100.
inbuf:	block <inbufl+4>/5
inbufp:	0

fn1:	0
fn2:	0
dev:	sixbit/dsk/
snm:	0

;.mtape ac,
;ac/ channel,,addr
;addr/ count,,func
;  count is negative for backwards, positive for forwards (?)
;  funcs:
mt%idl==0	;wait for tape operations to complete
mt%rwn==1	;rewind
mt%eof==5	;write eof mark
mt%eot==10	;space to logical end of tape
;also closing a write writes two eof marks and backspaces over one

;macros

define command
	com1 In
	com1 Out
	com1 InAscii,xina
	com1 OutAscii,xouta
	com1 Rewind,rewind
termin

define switch
	swit1 Record-size,recsiz
termin

define com1 name,loc
	[asciz/name/]
termin
coms:	command
ncoms==.-coms

define com1 name,loc
	ifse [loc][][x!name] .else [loc]
termin

comdsp:	command

define swit1 name,loc
	[asciz/name/]
termin

swtchs:	switch
nswit==.-swtchs

define swit1 name,loc
	ifse [loc][][x!name] .else [loc]
termin
swtdsp:	switch

define syscal call,args
	.call [setz ? sixbit /call/ ? args ((setz))]
termin

lpdl==100
pdl:	block lpdl

go:	.open tti,[.uai,,'tty]
	 .lose 1400
	.open tto,[.uao,,'tty]
	 .lose 1400
	syscal ttyget,[ movei tti ? movem ttyst1' ? movem ttyst2' ? movem ttysts']
	 .lose 1000
	move t,ttysts
	tlo t,%tsnoe
	syscal ttyset,[ movei tti ? ttyst1 ? ttyst2 ? t]
	 .lose 1000
cmd:	move p,[-lpdl,,pdl-1]
	setzm recblk'		;record blocking factor
	pushj p,crl
	pushj p,lcomm
	pushj p,getlin		;rubout proc
	pushj p,getwrd
	 jrst cmd
	push p,t
	move a,[-ncoms,,coms]
	pushj p,match
	 jrst cmderr
	pop p,t
	push p,a
	caie t,"/
	jrst noswit
cmdswt:	pushj p,noeol
	 jrst noswit
	pushj p,getwrd
	 jrst cmdswt
	move a,[-nswit,,swtchs]
	pushj p,match
	 jrst cmderr
	pushj p,@swtdsp-swtchs(a)	;do switch
	jrst cmdswt

noswit:	pushj p,noeol
	 caia
	 jrst cmderr
	pop p,a
	pushj p,@comdsp-coms(a)
	jrst cmd

cmderr:	movei tt,[asciz/???
/]
	pushj p,outstr
	jrst cmd

;list commands

lcomm:	movsi a,-ncoms
	movei tt,[asciz/Command:(/]
lcomm1:	pushj p,outstr
	hrrz tt,coms(a)
	pushj p,outstr
	movei tt,[asciz /, /]
	aobjn a,lcomm1
	movsi a,-nswit
	jumpge a,lcomm3
	movei tt,[asciz \ {/\]
lcomm2:	pushj p,outstr
	hrrz tt,swtchs(a)
	pushj p,outstr
	movei tt,[asciz \, /\]
	aobjn a,lcomm2
	movei tt,[asciz \}\]
	pushj p,outstr
lcomm3:	movei tt,[asciz /) /]
	pushj p,outstr
	popj p,


;set  record blocking factor

recsiz:	pushj p,getwrd
	 jrst cmderr
	movsi a,-lrecn
	move tt,getbuf
recs1:	came tt,recn(a)
	jrst [	aobjn a,recs1 ? jrst cmderr ]
	movem a,recblk
	popj p,

;record size in characters
recn:	irps a,,4096 2048 1024 512 256 128 64 32
	asciz /a/
	termin
lrecn==.-recn

;read ascii file from tape

xina:	movei tt,[asciz/Ascii input from tape. To /]
	pushj p,outstr
	pushj p,fnr
	setzm e
	pushj p,filwrt
	push p,[inaeot]
	movem p,eottrp
	pushj p,ascred
xina1:	pushj p,ascin
	pushj p,filtyo
	aoja e,xina1

inaeot:	.close mt,
	pushj p,clsfil
	.close fl,
	move t,e
	pushj p,decnum
	movei tt,[asciz / characters read.
/]
	pushj p,outstr
	popj p,

;write ascii onto tape

xouta:	movei tt,[asciz /Write Ascii onto tape. From /]
	pushj p,outstr
	pushj p,fnr
	pushj p,filred
	push p,[inaeof]
	movem p,eoftrp
	pushj p,ascwrt
	setz e,
xouta1:	pushj p,filtyi
	pushj p,ascout
	aoja e,xouta1

inaeof:	pushj p,clsasc
	.close mt,
	.close fl,
	move t,e
	pushj p,decnum
	movei tt,[asciz / characters written.
/]
	pushj p,outstr
	popj p,

;rewind
rewind:	pushj p,tapred
	move tt,[1,,mt%rwn]
	move t,[mt,,tt]
	.mtape t,
	 .lose 1000
	movei tt,mt%idl
	move t,[mt,,tt]
	.mtape t,
	 .lose 1000
	.close mt,
	popj p,

xout:	conso 344,100000
	 jrst ocmd1
	movei tt,[asciz/
Beginning of tape, writing null label.
/]
	pushj p,outstr
	pushj p,tapwrt
	movsi tt,[ascii/This is not a real tape label.  If you believe it, you'll be screwed./]
	hrri tt,card
	blt tt,card+<<69.+4>/5>-1
	move tt,[ascii/     /]
	movem tt,card+<<69.+4>/5>
	move tt,[card+<<69.+4>/5>,,card+<<69.+4>/5>+1]
	blt tt,carde
	pushj p,ptcard
	pushj p,clstap
	.close mt,		;this should be sufficient
ocmd1:	movei tt,[asciz/Writing EBCDIC card image onto tape. From /]
	pushj p,outstr
	pushj p,fnr
	setzm e
	push p,[ocmeof]
	movem p,eoftrp'
	pushj p,filred
	pushj p,tapwrt
ocmd2:	pushj p,gfcard
	pushj p,ptcard
	aoja e,ocmd2

ocmeof:	pushj p,clstap
	.close mt,
	.close fl,
	move t,e
	pushj p,decnum
	movei tt,[asciz/ cards written.
/]
	pushj p,outstr
	popj p,

xin:	movei tt,[asciz/Input from EBCDIC tape.  To /]
	pushj p,outstr
	pushj p,fnr
	setzm e
	pushj p,filwrt
	push p,[icmeot]
	movem p,eottrp'
	pushj p,tapred
icmd2:	pushj p,gtcard
	pushj p,pfcard
	aoja e,icmd2

icmeot:	pushj p,clsfil
	.close mt,
	.close fl,
	move t,e
	pushj p,decnum
	movei tt,[asciz/ cards read.
/]
	pushj p,outstr
	popj p,

;open file for reading
filred:	movei tt,.bai
	.call filopn
	 .lose 1400
	setzm bufc
	movei tt,(setz)
	movem tt,bufp
	popj p,

;open file for writing
filwrt:	movei tt,.bao
	.call filopn
	 .lose 1400
filwr1:	movei tt,bufl
filwr2:	movem tt,bufc
	move tt,[440700,,buffer]
	movem tt,bufp
	popj p,

filopn:	setz
	sixbit/open/
	5000,,(tt)
	movei fl
	dev ? fn1 ? fn2 ? snm ((setz))

;input char in tt from file
filtyi:	sosl bufc
	 jrst filti1
	move tt,[-bufl/5,,buffer]
	.iot fl,tt
	movei tt,-buffer(tt)
	jumpe tt,[ move p,eoftrp ? popj p, ]
	imuli tt,5
	pushj p,filwr2
	jrst filtyi

filti1:	ildb tt,bufp
	popj p,

;output char in tt to file
filtyo:	sosl bufc
	 jrst filto1
	push p,tt
	pushj p,clsfl1
	pushj p,filwr1
	pop p,tt
	jrst filtyo

filto1:	idpb tt,bufp
	popj p,

clsfil:	hlrz tt,bufp
	caie tt,010700
	 cain tt,440700
	  jrst clsfl1
	movei tt,^C
	pushj p,filtyo
	jrst clsfil

clsfl1:	move tt,bufp
	movei tt,-buffer+1(tt)
	movns tt
	hrli tt,buffer
	movss tt
	.iot fl,tt
	popj p,

;open mag tape for reading
tapred:	.open mt,[bmmod+800bpi+cnkmod+.bii,,'MT0]
	 .lose 1400
	movei tt,tblock
	movem tt,nxcard
	movem tt,lscard
	popj p,

;open mag tape for writing
tapwrt:	.open mt,[bmmod+800bpi+cnkmod+.bio,,'MT0]
	 .lose 1400
	movei tt,tblock
	movem tt,nxcard
	movei tt,tblock+<blksiz/4>
	movem tt,lscard
	popj p,

;put tape block
ptblok:		;drop into gtblock
	
;get tape block
gtblok:	move tt,[-blksiz/4,,tblock]
	.iot mt,tt
	hrrzm tt,lscard
	movei tt,tblock
	camn tt,lscard
	 jrst [ move p,eottrp ? popj p,]
	movem tt,nxcard
	popj p,

;put card to tape
ptcard:	move b,nxcard
	caml b,lscard
	 jrst [ pushj p,ptblok ? jrst ptcard ]
	hrli b,440800
	move a,[440700,,card]
	movei c,lrecl
ptcar1:	ildb tt,a
	move tt,ebcdic(tt)
	idpb tt,b
	sojg c,ptcar1
	move tt,nxcard
	addi tt,lrecl/4
	movem tt,nxcard
	popj p,

;get card from tape
gtcard:	move b,nxcard
	caml b,lscard
	 jrst [ pushj p,gtblok ? jrst gtcard ]
	hrli b,440800
	move a,[440700,,card]
	movei c,lrecl
gtcar1:	ildb tt,b
	move tt,anscii(tt)
	idpb tt,a
	sojg c,gtcar1
	move tt,nxcard
	addi tt,lrecl/4
	movem tt,nxcard
	popj p,

;close tape output.  maybe the last block should be shorter, but this fills
;with blanks

clstap:	move b,[440700,,card]
	movei c,lrecl
	movei tt,<" >
clstp1:	idpb tt,b
	sojg c,clstp1
clstp2:	move tt,nxcard
	cail tt,tblock+<blksiz/4>
	 jrst ptblok
	pushj p,ptcard
	jrst clstp2

;get card from file
gfcard:	move tt,[ascii/     /]
	movem tt,card
	move tt,[card,,card+1]
	blt tt,carde
	move b,[440700,,card]
	movei c,lrecl
gfcar1:	pushj p,filtyi
	cain tt,15
	 jrst gfcar2
	idpb tt,b
	sojg c,gfcar1
gfcar3:	pushj p,filtyi
	cain tt,15
	 jrst gfcar2
	cain tt,40
	 jrst gfcar3
	.value [asciz/: Line too long /]
gfcar2:	pushj p,filtyi
	caie tt,12
	 .value [asciz/: CR not followed by LF /]
	popj p,

;put card to file
pfcard:	move b,[440700,,card]
	movei c,lrecl
pfcar1:	ildb tt,b
	pushj p,filtyo
	sojg c,pfcar1
	movei tt,15
	pushj p,filtyo
	movei tt,12
	pushj p,filtyo
	popj p,

;open mag tape (no chunk mode)
ascred:	movei tt,.bii
	syscal open,[ movsi bmmod+800bpi(tt) ? movei mt ? ['MT0,,] ]
	 .lose 1400
	setzm tbufc
	popj p,


ascwrt:	movei tt,.bio
	move t,recblk
	dpb t,[%bksiz tt]
	syscal open,[ movsi bmmod+800bpi(tt) ? movei mt ? ['MT0,,] ]
	 .lose 1400
	movei tt,tbufl
	movem tt,tbufc'
	popj p,

;read Ascii character from tape

ascin:	sosl tbufc
	 jrst [ ildb tt,tbufp ? popj p,]
	pushj p,getasc
	skipe tbufc
	jrst ascin
	move p,eottrp
	popj p,

ascout:	sosl tbufc
	 jrst [ idpb tt,tbufp ? popj p,]
	push p,tt
	pushj p,putasc
	pop p,tt
	jrst ascout

putasc:
getasc:	move tt,[-tbufl/4,,tbuf]
	.iot mt,tt
	subi tt,tbuf
	imuli tt,4
	hrrzm tt,tbufc
	move tt,[440800,,tbuf]
	movem tt,tbufp'
	popj p,

clsasc:	hlrz tt,tbufp
	 caie tt,040800
	  cain tt,440800
	   caia
	jrst [ movei tt,40 ? pushj p,ascout ? jrst clsasc ]
	movei tt,tbuf-1
	sub tt,tbufp
	hrlzs tt
	jumpe tt,cpopj
	hrri tt,tbuf
	.iot mt,tt
	popj p,


;file name reader
fnr:	movei tt,[asciz/File=/]
	pushj p,outstr
	setzm fn1
	movsi tt,360000		;greater than
	movem tt,fn2	
fnr0:	setz a,
	move b,[440600,,a]
fnr1:	pushj p,tyic
	cain c,40
	 jrst fnr1
	cain c,177
	 jrst fnr
	jrst fnr3 

fnr2:	pushj p,tyic
fnr3:	cain c,":
	 jrst [	movem a,dev
		jrst fnr0 ]
	cain c,";		
	 jrst [	movem a,snm
		jrst fnr0 ]
	caig c,40
	 jrst fnr4
	cain c,177
	 jrst [	jumpl b,fnr
		ldb tt,b
		addi tt,40
		.iot tto,tt
		movei tt,0
		dpb tt,b
		add b,[060000,,]
		jrst fnr2 ]
	caige c,140
	 subi c,40
	tlne b,770000
	 idpb c,b
	jrst fnr2

fnr4:	jumpe a,fnr5
	skipe fn1
	 jrst [	movem a,fn2
		jrst fnr5 ]
	movem a,fn1
fnr5:	cain c,40
	 jrst fnr0
cpopj:	popj p,

outstr:	hrli tt,440700
outst1:	ildb t,tt
	jumpe t,cpopj
	.iot tto,t
	jrst outst1

decnum:	idivi t,10.
	hrlm tt,(p)
	skipe t
	 pushj p,decnum
	hlrz tt,(p)
	addi tt,"0
	.iot tto,tt
	popj p,

;getwrd from TTY for match

gbufl==40.
getbuf:	block gbufl/5

getwrd:	setzm getbuf
	move a,[getbuf,,getbuf+1]
	blt a,getbuf+gbufl/5-1
	move a,[440700,,getbuf]
getwr1:	pushj p,tyi
	caile t,"0
	caile t,"Z
	jrst getbrk
	came a,[080700,,getbuf+gbufl/5-1]
	idpb t,a
	jrst getwr1

getbrk:	setz tt,
	idpb tt,a
	skipe getbuf
popj1:	aos (p)
	popj p,

noeol:	jumpe t,cpopj
	caie t,15
	cain t,12
	caia
	aos (p)
	popj p,

;match
;a = aobjn pointer into match table

match:	movem t,savet'
	setzm matptr'
matlup:	hrrz b,(a)
	pushj p,match1
	 jrst [	aobjn a,matlup
		skipe a,matptr
		aos (p)
		jrst matex]
	skipe matptr
	 jrst [	movei tt,[asciz /Ambiguous/]
		pushj p,outstr
		pushj p,crl
		jrst matex]
	movem a,matptr
	skipe t			;t = 0 if exact match
	aobjn a,matlup
	move a,matptr
	aos (p)
matex:	move t,savet'
	popj p,
;match string
;b = string
;returns t = 0 if exact match

match1:	hrli b,440700
	move c,[440700,,getbuf]
matlp1:	ildb t,b
	pushj p,upper
	ildb tt,c
	came t,tt
	jrst [	jumpe tt,popj1 ? popj p,]
	jumpe tt,popj1
	jrst matlp1
;crl

getlin:	push p,a
getln1:	move a,[10700,,inbuf-1]
	movem a,inptr
	setom inrub'
getl1:	syscall iot,[ movsi %tiech ? movei tti ? t]
	 .lose 1000
	cain t,177
	jrst dorub
	skipl inrub
	jrst [	.iot tto,["\]
		setom inrub
		jrst .+1]
	.iot tto,t
	came a,[100700,,inbuf+inbufl/5-1]
	idpb t,a
	pushj p,noeol
	jrst [	setz t,
		idpb t,a
		pop p,a
		popj p,]
	jrst getl1

dorub:	camn a,[10700,,inbuf-1]
	jrst [	movei tt,[asciz /
*/]
		pushj p,outstr
		jrst getln1]
	aosn inrub
	.iot tto,["\]
	ldb t,a
	.iot tto,t
	add a,[070000,,]
	skipge a
	sub a,[430000,,1]
	jrst getl1


tyic:	pushj p,tyi
	move c,t
	popj p,

tyin:	pushj p,getlin
tyi:	ildb t,inptr'
	skipn t
	jrst tyin
upper:	cail t,"a
	caile t,"z
	popj p,
	subi t,"a-"A
	popj p,

crl:	.iot tto,[15]
	.iot tto,[12]
	popj p,


;NOTE: These tables are from the notorious Multics tape software,
;so don't blame me if they're wrong.

;easier to handle these unpacked
define oct a,b,c,d
	a ? b ? c ? d
termin

;Translation from Ascii to Ebcdic
;		EBCDIC OUTPUT		EBCDIC GRAPHIC		HEXADECIMAL
ebcdic:	oct	000,001,002,003		;NUL,SOH,STX,ETX	00,01,02,03
	oct	067,055,056,057		;EOT,ENQ,ACK,BEL	37,2D,2E,2F
	oct	026,005,045,013		;BS,HT,NL,VT		16,05,25,0B
	oct	014,015,016,017		;NP,CR,SO,SI		0C,0D,0E,0F
	oct	020,021,022,023		;DLE,DC1,DC2,TM		10,11,12,13
	oct	074,075,062,046		;DC4,NAK,SYN,ETB	3C,3D,32,26
	oct	030,031,077,047		;CAN,EM,SUB,ESC		18,19,3F,27
	oct	034,035,036,037		;IFS,IGS,IRS,IUS	1C,1D,1E,1F
	oct	100,132,177,173		;space,!,",#		40,5A,7F,7B
	oct	133,154,120,175		;$,%,&,apostrophe	5B,6C,50,7D
	oct	115,135,134,116		;(,),*,+		4D,5D,5C,4E
	oct	153,140,113,141		;",",-,.,/		6B,60,4B,61
	oct	360,361,362,363		;0,1,2,3		F0,F1,F2,F3
	oct	364,365,366,367		;4,5,6,7		F4,F5,F6,F7
	oct	370,371,172,136		;8,9,:,";"		F8,F9,7A,5E
	oct	114,176,156,157		;<,=,>,?		4C,7E,6E,6F
	oct	174,301,302,303		;@,A,B,C		7C,C1,C2,C3
	oct	304,305,306,307		;D,E,F,G		C4,C5,C6,C7
	oct	310,311,321,322		;H,I,J,K		C8,C9,D1,D2
	oct	323,324,325,326		;L,M,N,O		D3,D4,D5,D6
	oct	327,330,331,342		;P,Q,R,S		D7,D8,D9,E2
	oct	343,344,345,346		;T,U,V,W		E3,E4,E5,E6
	oct	347,350,351,255		;X,Y,Z,[		E7,E8,E9,AD
	oct	340,275,137,155		;\,],^,_		E0,BD,5F,6D
	oct	171,201,202,203		;`,a,b,c		79,81,82,83
	oct	204,205,206,207		;d,e,f,g		84,85,86,87
	oct	210,211,221,222		;h,i,j,k		88,89,91,92
	oct	223,224,225,226		;l,m,n,o		93,94,95,96
	oct	227,230,231,242		;p,q,r,s		97,98,99,A2
	oct	243,244,245,246		;t,u,v,w		A3,A4,A5,A6
	oct	247,250,251,300		;x,y,z,{		A7,A8,A9,C0
	oct	117,320,241,007		;solid bar,},~,DEL	4F,D0,A1,07

;Translation from Ebcdic to Ascii
;		ASCII OUTPUT		ASCII GRAPHIC		EBCDIC INPUT
anscii:	oct	000,001,002,003		;NUL,SOH,STX,ETX	00-3
	oct	032,011,032,177		;-,HT,-,DEL		04-7
	oct	032,032,032,013		;-,-,-,VT		08-B
	oct	014,015,016,017		;FF,CR,SO,SI		0C-F
	oct	020,021,022,023		;DLE,DC1,DC2,DC3	10-3
	oct	032,032,010,032		;-,-,BS,-		14-7
	oct	030,031,032,032		;CAN,EM,-,-		18-B
	oct	034,035,036,037		;FS,GS,RS,US		1C-F
	oct	032,032,032,032		;-,-,-,-		20-3
	oct	032,012,027,033		;-,LF,ETB,ESC		24-7
	oct	032,032,032,032		;-,-,-,-		28-B
	oct	032,005,006,007		;-,ENQ,ACK,BEL		2C-F
	oct	032,032,026,032		;-,-,SYN,-		30-3
	oct	032,032,032,004		;-,-,-,EOT		34-7
	oct	032,032,032,032		;-,-,-,-		38-B
	oct	024,025,032,032		;DC4,NAK,-,SUB		3C-F
	oct	040,032,032,032		;(space),-,-,-		40-3
	oct	032,032,032,032		;-,-,-,-		44-7
	oct	032,032,032,056		;-,-,-,.		48-B
	oct	074,050,053,174		;<,(,+,|		4C|F
	oct	046,032,032,032		;&,-,-,-		50-3
	oct	032,032,032,032		;-,-,-,-		54-7
	oct	032,032,041,044		;-,-,!,$		58-B
	oct	052,051,073,136		;*,),";",^		5C-F
	oct	055,057,032,032		;"-",/,-,-		60-3
	oct	032,032,032,032		;-,-,-,-		64-7
	oct	032,032,032,054		;-,-,-,","		68-B
	oct	045,137,076,077		;%,_,>,?		6C-F
	oct	032,032,032,032		;-,-,-,-		70-3
	oct	032,032,032,032		;-,-,-,-		74-7
	oct	032,140,072,043		;-,`,:,#		78-B
	oct	100,047,075,042		;@,',=,"		7C-F
	oct	032,141,142,143		;-,a,b,c		80-3
	oct	144,145,146,147		;d,e,f,g		84-7
	oct	150,151,032,032		;h,i,-,-		88-B
	oct	032,032,032,032		;-,-,-,-		8C-F
	oct	032,152,153,154		;-,j,k,l		90-3
	oct	155,156,157,160		;m,n,o,p		94-7
	oct	161,162,032,032		;q,r,-,-		98-B
	oct	032,032,032,032		;-,-,-,-		9C-F
	oct	032,176,163,164		;-,~,s,t		A0-3
	oct	165,166,167,170		;u,v,w,x		A4-7
	oct	171,172,032,032		;y,z,-,-		A8-B
	oct	032,133,032,032		;-,[,-,-		AC-F
	oct	032,032,032,032		;-,-,-,-		B0-3
	oct	032,032,032,032		;-,-,-,-		B4-7
	oct	032,032,032,032		;-,-,-,-		B8-B
	oct	032,135,032,032		;-,],-,-		BC-F
	oct	173,101,102,103		;{,A,B,C		C0-3
	oct	104,105,106,107		;D,E,F,G		C4-7
	oct	110,111,032,032		;H,I,-,-		C8-B
	oct	032,032,032,032		;-,-,-,-		CC-F
	oct	175,112,113,114		;},J,K,L		D0-3
	oct	115,116,117,120		;M,N,O,P		D4-7
	oct	121,122,032,032		;Q,R,-,-		D8-B
	oct	032,032,032,032		;-,-,-,-		DC-F
	oct	134,032,123,124		;\,-,S,T		E0-3
	oct	125,126,127,130		;U,V,W,X		E4-7
	oct	131,132,032,032		;Y,Z,-,-		E8-B
	oct	032,032,032,032		;-,-,-,-		EC-F
	oct	060,061,062,063		;0,1,2,3		F0-3
	oct	064,065,066,067		;4,5,6,7		F4-7
	oct	070,071,032,032		;8,9,-,-		F8-B
	oct	032,032,032,032		;-,-,-,-		FC-F

pat: patch: block 100

end go
