;;;-*-Lisp-*-

(declare (load '((alan) lspenv init)))

(declare (fixnum (addc) (addc3) (subc) (mulc)))

(defun addc (x y)
  (declare (fixnum x y))
  (addc3 x y 0))

(defun addc3 (x y z)
  (declare (fixnum x y z))
  (let ((sum (logxor x y z)))
    (declare (fixnum sum))
    (let ((carry (logior (logand x y) (logandc2 z sum))))
      (declare (fixnum carry))
      (if (zerop carry)
	  sum
	  (addc3 sum (lsh carry 2) (lsh carry 3))))))

(defun subc (x y)
  (declare (fixnum x y))
  (addc3 x y (addc3 (lsh y 2) (lsh y 3) (lsh y 4))))

(defun mulc (x y)
  (declare (fixnum x y))
  (cond ((or (zerop x) (zerop y)) 0)
	((not (oddp x)) (lsh (mulc y (lsh x -1)) 1))
	((not (oddp y)) (lsh (mulc (lsh y -1) x) 1))
	(t (logior 1 (lsh (addc (lsh x -1) (mulc (lsh y -1) x)) 1)))))

(defun add-states ()
  (do ((new '(0))
       (old '(0)))
      ((null new) (sort (copylist old) #'<))
    (let ((c0 (lsh (pop new) -1)))
      (let ((c2 (addc c0 #b110)))
	(unless (member c0 old)
	  (push c0 old)
	  (push c0 new))
	(unless (member c2 old)
	  (push c2 old)
	  (push c2 new))))))

(defun sub-states ()
  (do ((new '(0))
       (old '(0)))
      ((null new) (sort (copylist old) #'<))
    (let ((c (pop new)))
      (let ((c0 (lsh (subc c 1) -1))
	    (c2 (lsh (addc c 1) -1)))
	(unless (member c0 old)
	  (push c0 old)
	  (push c0 new))
	(unless (member c2 old)
	  (push c2 old)
	  (push c2 new))))))

(defun make-table ()
  (with-open-file (f '((alan) complx table) '(out fixnum))
    (let ((add-states (add-states))
	  (sub-states (sub-states)))
      (unless (= (length add-states) (length sub-states))
	(ferror "Different numbers of states for add and subtract?"
		add-states sub-states))
      (do ((len (length add-states))
	   (al add-states (cdr al))
	   (bl sub-states (cdr bl)))
	  ((null al))
	(do ((a (car al))
	     (b (car bl))
	     (i 0 (1+ i)))
	    ((>= i #b10000))
	  (do ((a+i (addc a i))
	       (b+i (addc b i))
	       (j 0 (1+ j)))
	      ((>= j #b10000))
	    (let ((a+i+j (addc a+i j))
		  (b+i-j (subc b+i j)))
	      (out f
		   (dpb a+i+j #o0004
			(dpb b+i-j #o2204
			     (+ (lsh (- len (length (member (lsh a+i+j -4)
							    add-states)))
				     8)
				(lsh (- len (length (member (lsh b+i-j -4)
							    sub-states)))
				     #.(+ 18. 8)))))))))))))
