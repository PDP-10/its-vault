;;;-*-lisp-*-

(eval-when (eval compile load)
  (cond ((status feature complr)
	 (own-symbol let desetq let* defmacro setf defsetf push pop if
		     defvar selectq first second third fourth fifth
		     sixth seventh eighth rest rest1 rest2 rest3 rest4
		     rest5 rest6 rest7 rest8 <= >= / / / neq logand
		     logior logxor dotimes dolist destructure arrayp rem
		     remove remq del ass mem listp create-array aref aset
		     make-array ar-1 ar-2 ar-3 as-1 as-2 as-3 ldb dpb
		     y-or-n-p yes-or-no-p ferror cerror describe))))

(eval-when (eval compile load)
  (cond ((status feature complr)
	 (*lexpr ferror cerror describe))))

(eval-when (eval compile load)
  (cond ((status feature complr)
	 (unspecial args symbols car cdr))))

(setq flush '(defmax backq let defmacro lodbyt mlmac defvst defsetf
	      setf sharpm macaid cgol subseq string extmac extend
	      cerror yesnop errck extstr defvsy extbas defvsx cerror
	      mlsub describe extsfa))

(mapatoms
  #'(lambda (x)
      ((lambda (p)
	 (and (not (atom p))
	      (memq (cadr p) flush)
	      (remprop x 'autoload)))
       (get x 'autoload))))

(or (status feature alan/;setf)
    (load '((lspenv) setf)))

(or (status feature alan/;binda)
    (load '((lspenv) binda)))

(defun |forget-macromemos/|| (()) nil)

(defun flush-macromemos (() ()) nil)

(defun macrofetch (()) nil)

(defun macromemo (x y ()) (displace x y))

;;;In case of fire, break glass:
;;;(defun (macroexpanded macro) (x) (displace x (car (cddddr x))))

(declare (cond ((status feature ITS)
		(defprop lspenv (dsk alan) ppn)
		(load '((lspenv) flush >)))
	       ((status feature TOPS-20)
		(defprop lspenv (ps alan/.maclisp) ppn)
		(load '((lspenv) flush lsp)))
	       (t (error '|Unknown site for compilation.|))))

;;;BACKQUOTE:
;;; The flags passed back by BACKQUOTIFY can be interpreted as follows:
;;;
;;;   |`,|: [a] => a
;;;    NIL: [a] => a			;the NIL flag is used only when a is NIL
;;;      T: [a] => a			;the T flag is used when a is self-evaluating
;;;  QUOTE: [a] => (QUOTE a)
;;; APPEND: [a] => (APPEND . a)
;;;  NCONC: [a] => (NCONC . a)
;;;   LIST: [a] => (LIST . a)
;;;  LIST*: [a] => (LIST* . a)
;;;
;;; The flags are combined according to the following set of rules:
;;;  ([a] means that a should be converted according to the previous table)
;;;
;;;    \ car   ||    otherwise    |    QUOTE or     |     |`,@|      |     |`,.|      |
;;;  cdr \     ||		  |    T or NIL     |                |		      |
;;;====================================================================================
;;;    |`,|    || LIST* ([a] [d]) | LIST* ([a] [d]) | APPEND (a [d]) | NCONC  (a [d]) |
;;;    NIL     || LIST    ([a])   | QUOTE    (a)    | <hair>    a    | <hair>    a    |
;;; QUOTE or T || LIST* ([a] [d]) | QUOTE  (a . d)  | APPEND (a [d]) | NCONC  (a [d]) |
;;;   APPEND   || LIST* ([a] [d]) | LIST* ([a] [d]) | APPEND (a . d) | NCONC  (a [d]) |
;;;   NCONC    || LIST* ([a] [d]) | LIST* ([a] [d]) | APPEND (a [d]) | NCONC  (a . d) |
;;;    LIST    || LIST  ([a] . d) | LIST  ([a] . d) | APPEND (a [d]) | NCONC  (a [d]) |
;;;    LIST*   || LIST* ([a] . d) | LIST* ([a] . d) | APPEND (a [d]) | NCONC  (a [d]) |
;;;
;;;<hair> involves starting over again pretending you had read ".,a)" instead of ",@a)"

(setsyntax '/` 'macro 'xr-backquote-macro)

(setsyntax '/, 'macro 'xr-comma-macro)

(declare (special **backquote-count** **backquote-flag**
		  **backquote-/,-flag** **backquote-/,/@-flag** **backquote-/,/.-flag**))

(setq **backquote-count** 0
      **backquote-/,-flag** (copysymbol '|`,| nil)
      **backquote-/,/@-flag** (copysymbol '|`,@| nil)
      **backquote-/,/.-flag** (copysymbol '|`,.| nil)
      )

(defun xr-backquote-macro ()
  ((lambda (**backquote-count** **backquote-flag** thing)
     (setq thing (backquotify (read)))
     (cond ((eq **backquote-flag** **backquote-/,/@-flag**)
	    (error '|-- ",@" right after a "`".| thing))
	   ((eq **backquote-flag** **backquote-/,/.-flag**)
	    (error '|-- ",." right after a "`".| thing))
	   (t
	    (backquotify-1 **backquote-flag** thing))))
   (1+ **backquote-count**)
   nil
   nil))

(defun xr-comma-macro ()
  (or (> **backquote-count** 0)
      (error '|Comma not inside a backquote.|))
  ((lambda (c **backquote-count**)
     (cond ((= c 100)					;#/@
	    (tyi)
	    (cons **backquote-/,/@-flag** (read)))
	   ((= c 56)					;#/.
	    (tyi)
	    (cons **backquote-/,/.-flag** (read)))
	   (t (cons **backquote-/,-flag** (read)))))
   (tyipeek)
   (1- **backquote-count**)))

(defun backquotify (code)
  (prog (aflag a dflag d)
	(cond ((atom code)
	       (cond ((null code)
		      (setq **backquote-flag** nil)
		      (return nil))
		     ((or (numberp code)
			  (eq code t))
		      (setq **backquote-flag** t)
		      (return code))
		     (t (setq **backquote-flag** 'quote)
			(return code))))
	      ((eq (car code) **backquote-/,-flag**)
	       (setq code (cdr code))
	       (go comma))
	      ((eq (car code) **backquote-/,/@-flag**)
	       (setq **backquote-flag** **backquote-/,/@-flag**)
	       (return (cdr code)))
	      ((eq (car code) **backquote-/,/.-flag**)
	       (setq **backquote-flag** **backquote-/,/.-flag**)
	       (return (cdr code))))
	(setq a (backquotify (car code)))
	(setq aflag **backquote-flag**)
	(setq d (backquotify (cdr code)))
	(setq dflag **backquote-flag**)
	(and (eq dflag **backquote-/,/@-flag**)
	     (error '|-- ",@" after a ".".| code))
	(and (eq dflag **backquote-/,/.-flag**)
	     (error '|-- ",." after a ".".| code))
	(cond ((eq aflag **backquote-/,/@-flag**)
	       (cond ((null dflag)
		      (setq code a)
		      (go comma)))
	       (setq **backquote-flag** 'append)
	       (return (cond ((eq dflag 'append)
			      (cons a d))
			     (t (list a (backquotify-1 dflag d))))))
	      ((eq aflag **backquote-/,/.-flag**)
	       (cond ((null dflag)
		      (setq code a)
		      (go comma)))
	       (setq **backquote-flag** 'nconc)
	       (return (cond ((eq dflag 'nconc)
			      (cons a d))
			     (t (list a (backquotify-1 dflag d))))))
	      ((null dflag)
	       (cond ((memq aflag '(quote t nil))
		      (setq **backquote-flag** 'quote)
		      (return (list a)))
		     (t (setq **backquote-flag** 'list)
			(return (list (backquotify-1 aflag a))))))
	      ((memq dflag '(quote t))
	       (cond ((memq aflag '(quote t nil))
		      (setq **backquote-flag** 'quote)
		      (return (cons a d)))
		     (t (setq **backquote-flag** 'list*)
			(return (list (backquotify-1 aflag a)
				      (backquotify-1 dflag d)))))))
	(setq a (backquotify-1 aflag a))
	(and (memq dflag '(list list*))
	     (setq **backquote-flag** dflag)
	     (return (cons a d)))
	(setq **backquote-flag** 'list*)
	(return (list a (backquotify-1 dflag d)))
  comma (cond ((atom code)
	       (cond ((null code)
		      (setq **backquote-flag** nil)
		      (return nil))
		     ((or (numberp code)
			  (eq code 't))
		      (setq **backquote-flag** t)
		      (return code))
		     (t (setq **backquote-flag**
			      **backquote-/,-flag**)
			(return code))))
	      ((eq (car code) 'quote)
	       (setq **backquote-flag** 'quote)
	       (return (cadr code)))
	      ((memq (car code) '(append list list* nconc))
	       (setq **backquote-flag** (car code))
	       (return (cdr code)))
	      ((eq (car code) 'cons)
	       (setq **backquote-flag** 'list*)
	       (return (cdr code)))
	      (t (setq **backquote-flag** **backquote-/,-flag**)
		 (return code)))))

(defun backquotify-1 (flag thing)
  (cond ((or (eq flag **backquote-/,-flag**)
	     (memq flag '(t nil)))
	 thing)
	((eq flag 'quote)
	 (list 'quote thing))
	((eq flag 'list*)
	 (cond ((null (cddr thing))
		(cons 'cons thing))
	       (t (cons 'list* thing))))
	(t (cons flag thing))))

(declare (special let-macro-vals))

(defun (let macro) (x)
  (do ((body (cddr x))
       (pairs (reverse (cadr x)) (cdr pairs))
       (vars nil)
       (let-macro-vals nil)
       (tem))
      ((null pairs)
       (displace x
		 (cond ((not (null vars))
			`((lambda ,vars ,@body) ,@let-macro-vals))
		       ((null (cdr body))
			(car body))
		       (t `(progn ,@body)))))
    (cond ((atom (car pairs))
	   (or (symbolp (car pairs))
	       (error '|-- gubbish found in LET pattern.| (car pairs)))
	   (setq vars (cons (car pairs) vars))
	   (setq let-macro-vals (cons nil let-macro-vals)))
	  (t
	   (setq tem vars)
	   (setq vars (let-macro-get-vars (caar pairs) vars))
	   (or (eq tem vars)
	       (setq body (nconc (let-macro-hair (caar pairs)
						 (cadar pairs)
						 let-macro-vals)
				 body)))))))

(defun let-macro-get-vars (pattern vars)
  (cond ((null pattern) vars)
	((atom pattern)
	 (or (symbolp pattern)
	     (error '|-- gubbish found in LET pattern.| pattern))
	 (setq let-macro-vals (cons nil let-macro-vals))
	 (cons pattern vars))
	(t (let-macro-get-vars (cdr pattern)
			       (let-macro-get-vars (car pattern) vars)))))

(defun (desetq macro) (x)
  (do ((p (cdr x) (cddr p))
       (body nil)
       tem)
      ((null p)
       (displace x `(progn ,@body)))
    (cond ((atom (cdr p))
	   (error '|-- odd number of args to DESETQ.| x))
	  ((atom (car p))
	   (or (symbolp (car p))
	       (error '|-- gubbish found in DESETQ pattern.| (car p)))
	   (and (null (car p))
		(error '|-- bad DESETQ pattern.| (car p)))
	   (setq body (nconc body `((setq ,(car p) ,(cadr p))))))
	  (t
	   (setq tem (cons nil nil))
	   (setq body (nconc body
			     `((setq ,(let-macro-get-last-var (car p))
				     ,@tem)
			       ,@(let-macro-hair (car p) (cadr p) tem))))))))
				    
(defun let-macro-get-last-var (pattern)
  (cond ((atom pattern) pattern)
	(t
	 (or (let-macro-get-last-var (cdr pattern))
	     (let-macro-get-last-var (car pattern))))))

(defun let-macro-hair (pattern code cell)
  (cond ((null pattern) nil)
	((atom pattern)
	 (rplaca cell code)
	 nil)
	(t
	 ((lambda (avar dvar)
	    (cond ((null avar)
		   (cond ((null dvar) nil)
			 (t (let-macro-hair (cdr pattern)
					    `(cdr ,code)
					    cell))))
		  ((null dvar)
		   (let-macro-hair (car pattern)
				   `(car ,code)
				   cell))
		  (t
		   (rplaca cell code)
		   ((lambda (acell dcell)
		      (cons `(setq ,avar ,@acell)
			    (nconc (let-macro-hair (car pattern)
						   `(car ,dvar)
						   acell)
				   (cons `(setq ,dvar ,@dcell)
					 (let-macro-hair (cdr pattern)
							 `(cdr ,dvar)
							 dcell)))))
		    (cons nil nil)
		    (cons nil nil)))))
	  (let-macro-get-last-var (car pattern))
	  (let-macro-get-last-var (cdr pattern))))))

(defun (let* macro) (x)
  (do ((a (reverse (cadr x)) (cdr a))
       (b (cddr x) `((let (,(car a)) ,@b))))
      ((null a)
       (displace x
		 (cond ((null (cdr b)) (car b))
		       (t `(progn ,@b)))))))

(declare (or (get 'bind-arguments 'macro)
	     (load '((lspenv) binda))))

(defun (defmacro macro) (x)
  (bind-arguments ((name pattern &body body) (cdr x)
		      (error '|-- bad format.| x))
    (let ((x (gensym)))
      `(defun (,name macro) (,x)
	 (bind-arguments (,pattern (cdr ,x)
			     (error '|-- bad format.| ,x))
	   ,@body)))))

(defmacro push (item list)
  `(setf ,list (cons ,item ,list)))

(defmacro pop (x)
  `(prog1 (car ,x) (setf ,x (cdr ,x))))

(defmacro if (a b &optional (c nil c?))
  (cond (c? `(cond (,a ,b) (t ,c)))
	(t `(and ,a ,b))))

(defmacro defvar (var &optional (init nil init?))
  (let ((dcl `(eval-when (eval load compile)
		(and (fboundp 'special)
		     (special ,var)))))
    (cond (init? `(progn 'compile
			 ,dcl
			 (or (boundp ',var)
			     (setq ,var ,init))))
	  (t dcl))))

(defmacro defconst (var &optional (init nil init?))
  (let ((dcl `(eval-when (eval load compile)
		(and (fboundp 'special)
		     (special ,var)))))
    (cond (init? `(progn 'compile
			 ,dcl
			 (setq ,var ,init)))
	  (t dcl))))

(defmacro selectq (op &rest stuff)
  (do ((arg (cond ((atom op) op)
		  (t (gensym))))
       (l stuff (cdr l))
       (r nil (cons `(,(cond ((memq (caar l) '(otherwise t)) 't)
			     ((atom (caar l)) `(eq ,arg ',(caar l)))
			     ((null (cdaar l)) `(eq ,arg ',(caaar l)))
			     (t `(memq ,arg ',(caar l))))
		      ,@(cdar l))
		    r)))
      ((null l) ((lambda (l) (cond ((atom op) l)
				   (t `((lambda (,arg) ,l) ,op))))
		 `(cond ,@(nreverse r))))))

(defmacro select (op &rest stuff)
  (do ((arg (cond ((atom op) op)
		  (t (gensym))))
       (l stuff (cdr l))
       (r nil (cons `(,(cond ((memq (caar l) '(otherwise t)) 't)
			     (t `(equal ,arg ,(caar l))))
		      ,@(cdar l))
		    r)))
      ((null l) ((lambda (l) (cond ((atom op) l)
				   (t `((lambda (,arg) ,l) ,op))))
		 `(cond ,@(nreverse r))))))

(sstatus feature alan/;flush)
