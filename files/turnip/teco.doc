[Really!] Basic Teco Commands ...

Note: All "$" characters in this text are <altmode> unless otherwise noted.

Teco Commands are separated by an <altmode>. Two <altmode>'s will terminate
a command line and begin its execution.

Numeric args to a command precede a command. (For example, the command to
move forward a line is "l", so "3l" will move forward three lines.) Negative
or 0 args are also allowed. "0l" for example, will not move to a new line,
but since 'l' is defined to move to the beginning of the <arg>th line, it
will take you to the beginning of the current line. -<n>l$$ will take you
back <n> lines, of course.

Non-numeric args to a command, such as strings for searches, etc. follow
the command and are terminated with an <altmode>. Example, the "s" command
searches for a string, so "ssomething$" will search for the string 'something'.

Naturally, the two (numeric and string) can be combined as in 

3l$sHi There!$$

which will tell teco to go down three lines and search from their forward
to the end of the buffer for a string of 'Hi There!' ...

The er command [stands for external read] sets the file default for
an input, and @y yanks in the file, so to read a file into teco, do

er<file>$@y$$

where <file> is in the form "<dev>:<dir>;<fn1> <fn2>". Similarly, to write
a file, the command [note: there are several ways -- these are the simplest
if you don't want to know much more than you need] is "ew" to set your write
default, "p" to do the writing, and "ef" to close the file. Note that "p"
takes an argument that specifies the range of the buffer to write to the file
(you needn't write it all at once), but for now we will only discuss writing
the whole buffer. This can be done by saying "hp". Example:

   ew <dev>:<dir>; $ hp $ ef <filename1> <filename2> $$

So to write out a file to GUEST2;THISIS ATEST one might say:

   ewGUEST2;$hp$efTHISIS ATEST$$

The results of your editting will not display on your tty without explicitly
being told to by the 'type' command, "t", which prints the text from the
cursor thru the remainder of the line. If you don't know where you are
on the line, the command 

0lt$$

will move to the beginning of the line and type the line very easily.

other useful commands are ...

<n>I	Insert a char whose decimal-value of ascii is <n>.
I<s>$	Insert the string <s>.
<n>C	Move forward <n> characters. <n> can be neg to move backward,
	 but the "R" command will move back in fewer keystrokes.
<n>R	Move backward <n> characters.
<n>K	Kill to the <n>th end-of-line (including the carriage-return
	 and line-feed).
0K	Kill to start of line.
:K	Kill to end-of-line but keep the carriage-return and line-feed.
<n>D	Delete <n> characters (after cursor).
<n>S<s>$
	Search for string <s>. (Negative <n> means search backward.
	 Search terminates at the end of string searched for or 'beeps'
	 if it fails.)
<n>L	Move down N lines.
0L	Move to start of line.
:L	Move to end of line.
J	Move to top of buffer.
ZJ	Move to the end of the buffer
<n>FWR	Move right (left with <n> negative) one word.
ZK	Kill from cursor to end of buffer.


Commands pertaining to printing terminals

HT	to type out the whole buffer
0TT	to type out the current line (without moving the cursor)
0LT	to type out the current line (moving cursor to beginning of line)
nTT	to type out n lines
:<n>^N	to automatically type out <n> lines each time two altmodes are typed

You can quit, or cancel command string typed (but not executed yet) by typing
a <control-g>.

There is a mechanism for looping available for looping if you need it but
I don't know enough about it to just come up with it on the spur of the
moment.

Also, commands that cannot take string args needn't be followed with
<altmode> to separate them from other commands (though two <altmode>'s are
needed to terminate a command string in all cases). Example ...

j3lsfoo$3r3dibar$$

is the same as

j$3l$sfoo$3r$3d$ibar$$

which says in english

Jump to top of buffer and then down three lines. Search for the string 'foo',
go back 3 chars and delete 3 chars (deleting acts on chars following the 
cursor, so it will delete 'foo') and insert 'bar'.

Full TECO documentation can be gotten by reading the file ".INFO.;TECO ORDER"
It's quite long, however, so be ready. At 300baud, it'll take about 35mins
per 10K and at last look this file was 40K long... -kmp