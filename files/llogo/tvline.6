;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;            		Lisp Logo TV Turtle				      ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;

;;; 
;;TV'S HAVE 455.  VERTICAL LINES OF 576.  DOTS EACH (262080.  BITS OUT 'O 262144). 
;;MEMORY IS ORGANIZED AS 9 64.-BIT WORDS (EQUIV TO 18.  32.-BIT WORDS) PER LINE. 
;;THE PDP10 ACCESSES HALF OF SUCH A WORD (OR TWO 16.-BIT CHUNKS) AT ONCE.  THESE 32. 
;;BITS ARE PACKED LEFT JUSTIFIED INTO THE 36.  BITS.  TVEND (OR THE LAST WORD OF THE
;;TV-MEMORY) HAS TWO FUNCTIONS: BIT 200000 WHEN ON, COMPLEMENTS THE BLACK/WHITE
;;OUTPUT.  BITS 177760 ARE A WORD-COUNTER FOR WHICH 64.-BIT WORD THE FRAME IS TO
;;START ON.  FOR WINNAGE THE NUMBER OUGHT TO BE A MULTIPLE OF 9.  CHARACTERS ARE 10. 
;;LINES HIGH AND 5 POINTS WIDE (RIGHT AND TOP JUSTIFIED).  LINE-PITCH IS 12. 
;;TV-LINES, CHARACTER-PITCH IS 6 TV-POINTS.  THATS 96.  CHRS/LINE EXACTLY AND 37. 
;;AND 11./12.  LINES (3552.  CHRS).

(DECLARE (EVAL (READ)) (EVAL (READ)) (EVAL (READ)))

(OR (STATUS FEATURE DEFINE) (FASLOAD DEFINE FASL AI LLOGO))

(COND ((BOUNDP 'COLOR) (SETQ BW (NOT COLOR)))
      ;;READ-TIME SWITCHES FOR COLOR OR BLACK AND WHITE SYSTEM.
      ;;TO SET SWITCHES, DO E.G., &(SETQ COLOR T) IN CONTROL-G'ED NCOMPLR.
      ((BOUNDP 'BW) (SETQ COLOR (NOT BW)))
      ((SETQ COLOR NIL BW T)))

(COND ((BOUNDP 'NEWIO) (SETQ OLDIO (NOT NEWIO)))
      ((SETQ NEWIO T OLDIO NIL)))

(SSTATUS FEATURE TVRTLE) 

[COLOR (SSTATUS FEATURE COLOR)
       (SETQ COLOR T BW NIL)]

[BW (SETQ BW T COLOR NIL)]

[NEWIO (SETQ NEWIO T OLDIO NIL)]
[OLDIO (SETQ OLDIO T NEWIO NIL)]

[COLOR (DEFUN NOT-IMPLEMENTED-IN-COLOR (LOSING-FORM)
              (PRINC '/;)
              (AND LOSING-FORM (PRINC LOSING-FORM))
              (PRINC '" NOT IMPLEMENTED IN COLOR TURTLE")
              (TERPRI)
              NO-VALUE)]

[BW (DEFUN NOT-IMPLEMENTED-IN-BW (LOSING-FORM)
           (PRINC '/;)
           (AND LOSING-FORM (PRINC LOSING-FORM))
           (PRINC '" IMPLEMENTED IN COLOR TURTLE ONLY")
           (TERPRI)
           NO-VALUE)]

(DECLARE (GENPREFIX TVRTLE-)) 

(COND ((STATUS FEATURE BIBOP) 
       (COND ((< (CADADR (MEMQ 'FLONUM (ALLOC T))) 4000.)
              ;;If flonum allocation is less than 4000., add more.
              (ALLOC '(FLONUM (3000. 4000. NIL) FLPDL 2000.))))
       (COND ((< (CADADR (MEMQ 'FIXNUM (ALLOC T))) 4000.)
              ;;Similarly expand fixnum as needed.
              (ALLOC '(FIXNUM (3000. 40000. NIL) FXPDL 2000.)))))) 

(COND
 ((STATUS FEATURE LLOGO)
  ;;PUT GLOBAL VARIABLES ON LOGO OBARRAY.
  (READ-ONLY :XCOR :YCOR :HEADING :PENSTATE :ERASERSTATE :SEETURTLE :ECHOLINES 
             :TVECHOLINES :PI :POLYGON :WRAP  :CLIP :DRAWMODE :XORSTATE :TURTLE 
             :PATTERNS :TURTLES :WINDOWS :DRAWTURTLE :ERASETURTLE :BRUSH 
             :PENCOLOR :ERASERCOLOR :PENNUMBER :ERASERNUMBER :COLORS)
  (SYSTEM-VARIABLE :OUTLINE :WINDOWOUTLINE :COLORTICK :NCOLORS :CAREFULTURTLE)
  (MAPC '(LAMBDA (LOGO-ATOM) (OBTERN LOGO-ATOM LOGO-OBARRAY))
	'(TV IOR ANDC SETZ COMP XOR EQV SAME LOGOTURTLE 
          COLOR BLACK PALETTE WHITE RED GREEN BLUE YELLOW PURPLE MAGENTA CYAN BROWN
          ORANGE GOLD PINK GRAY LIGHTGRAY DARKGRAY TURTLE)))
 ((DEFUN HOMCHECK (USELESS) USELESS)
  (DEFUN OBTERN (IGNORE THIS) IGNORE)  
  (SETQ LOGO-OBARRAY OBARRAY)
  (DEFUN SYNONYMIZE (NEW OLD) 
         (COND ((SETQ OLD (GETL OLD '(EXPR FEXPR SUBR LSUBR ARRAY MACRO AUTOLOAD)))
                (PUTPROP NEW (CADR OLD) (CAR OLD)))
               ((ERRBREAK 'SYNONYMIZE '"SYNONYM NOT FOUND"))))
  (DEFUN SYMBOLP (MAYBE-SYMBOL) 
	 (AND MAYBE-SYMBOL (EQ (TYPEP MAYBE-SYMBOL) 'SYMBOL)))
  ;;DEFINE FUNCTIONS CALLED FROM TVRTLE, NORMALLY IN LLOGO.
  (DEFUN FILESPEC (X) 
	 (OR (APPLY 'AND (MAPCAR 'ATOM X))
	     (SETQ X
		   (ERRBREAK 'FILESPEC
			     (LIST X
				   '"IS NOT A FILE NAME"))))
	 (COND ((NULL X) (APPEND (STATUS CRFILE) (CRUNIT)))
	       ((NOT (CDR X)) (APPEND X '(>) (CRUNIT)))
	       ((NOT (CDDR X)) (APPEND X (CRUNIT)))
	       ((NOT (CDDDR X))
		(APPEND (LIST (CAR X) (CADR X)) '(DSK) (CDDR X)))
	       (X)))
  (DEFUN FUNCTION-PROP (F) 
	 (GETL F '(EXPR FEXPR MACRO SUBR LSUBR FSUBR ARRAY AUTOLOAD)))
  (SETQ LISP-OBARRAY OBARRAY LISP-READTABLE READTABLE)
  ;;SAVE/GETWINDOW REQUIRES FILESPEC.
  (DEFUN TYPE ARGS (DO ((I 1. (1+ I))) ((> I ARGS) (ARG (1- I))) (PRINC (ARG I))))
  ;;TYPE USED BY MARK, HOMCHECK, OBTERN OUTPUT BY DEFINE.
  (DEFUN ERRBREAK ARGS (PRINC (ARG 1.)) (APPLY 'BREAK (LIST (ARG 2.) T)))
  (SETQ NO-VALUE '?))) 

;;SYMBOLS MUST BE LOADED TO CALL GETCOR, SACONS.

(VALRET '" :SYMLOD
:VP
") 

;;; (DEFINE FAST NIL (*RSET NIL) (NOUUO NIL))

;;; (DEFINE SLOW NIL (*RSET T) (NOUUO T))


;;*PAGE

;;;

(COMMENT LAP ROUTINES) 

;;;
;;THE FOLLOWING ROUTINE GETS A 10K BLOCK OF CORE RESERVED FROM LISP FOR THE TV ARRAY
;;VIA GETCOR, AND SETS UP THE ARRAY HEADER TO POINT TO IT CORRECTLY. 
;;AN ORDINARY LISP ARRAY CANNOT BE USED SINCE IT MUST BE PROTECTED FROM NORMAL ARRAY
;;RELOCATION DURING GARBAGE COLLECTION, ETC.
;;;

;;;			FORMAT OF LISP ARRAYS.
;;;
;;A LISP ARRAY HAS A TWO WORD HEADER ["SAR"], CREATED BY CALLING THE INTERNAL LISP
;;ROUTINE SACONS.  THE FIRST WORD IS CALLED THE "ASAR", SECOND THE "TTSAR". THE
;;OCTAL NUMBER PRINTED OUT IN ARRAY POINTERS IS THE ASAR, ASSEMBLING (ARRAY FOO) IN
;;LAP YIELDS POINTER TO THE TTSAR. FOR A TWO DIMENSIONAL FIXNUM ARRAY THEY ARE AS
;;FOLLOWS:
;;;
;;; ASAR: 	200 [TYPE CODE FOR FIXNUM] 
;;;             ,, <POINTER TO START OF INSTRUCTION-BLOCK>
;;; TTSAR:	100107 [WHERE 1 IS THE NUMBER OF DIMENSIONS, 
;;;		       107 IS (TT) [INDEXED BY TT]] 
;;;             ,, <POINTER TO START OF ARRAY-DATA>
;;;
;;THE BLOCK OF DATA FOR THE ARRAY IS AS FOLLOWS:
;;;
;;;		-1 [MINUS NUMBER OF DIMENSIONS] ,, <POINTER TO START OF ARRAY-DATA>
;;; INSTRUCTION-BLOCK:
;;;		PUSHJ P, CFIX1 [FOR FIXNUMS]
;;;		JSP TT, 1DIMF  [FOR 1 DIMENSIONAL ARRAYS]
;;;		<POINTER BACK TO ASAR>
;;;		<1ST DIMENSION>
;;; ARRAY-DATA: .....DATA HERE.....
;;;


(LAP SETUP-TV-ARRAY SUBR)
(ARGS SETUP-TV-ARRAY (NIL . 0))
(DEFSYM TTSAR-DATA 100107)
(DEFSYM FIXNUM-ARRAY 200)
(DEFSYM IMMEDIATE 1000)
(DEFSYM READ-WRITE-ACCESS 600000)
	(HLLOS 0 NOQUIT)
	(PUSH FXP D)
	(PUSH FXP F)
	(PUSH FXP TT)
	(MOVEI TT 12)
	(PUSHJ P GETCOR)
	(SKIPN 0 TT)
	(*VALUE)
	(ADDI TT 2000)
	(MOVEI F -5 TT)
	(HRLI F TV-ARRAY-HEADER)
	(BLT F -1 TT)
	(HRRM TT -5 TT)
	(PUSH FXP TT)
	(JSP T SACONS)
	(POP FXP TT)
	(MOVEM A -2 TT)
	(HRLI F FIXNUM-ARRAY)
	(HLLM F 0 A)
	(MOVEI F -4 TT)
	(HRRM F 0 A)
	(HRLI F TTSAR-DATA)
	(HLLM F 1 A)
	(HRRM TT 1 A)
	(MOVEM A (SPECIAL TV))
	(POP FXP TT)
	(POP FXP F)
	(POP FXP D)
	(HLLZS 0 NOQUIT)
        (JRST 0 CHECKI)
TV-ARRAY-HEADER
	(0 0 0 -1)
	(PUSH P CFIX1)
	(JSP TT 1DIMF)
ASAR-ADDRESS
	(0)
	(22000)
NIL 
 
(DECLARE (ARRAY* (FIXNUM (TV 9216.))))

(PUTPROP 'TV (SETUP-TV-ARRAY) 'ARRAY) 

(DECLARE (FIXNUM (READ-TV FIXNUM FIXNUM) (TV-ADDRESS FIXNUM FIXNUM))
         (NOTYPE (WRITE-TV FIXNUM FIXNUM FIXNUM)))

(DEFUN READ-TV (TV-Y TV-X) (TV (+ (* TV-Y 18.) TV-X)))

(DEFUN WRITE-TV (TV-Y TV-X NEW-CONTENTS) 
       (STORE (TV (+ (* TV-Y 18.) TV-X)) NEW-CONTENTS)
       T)

(DEFUN TV-ADDRESS (TV-Y TV-X) (+ (* TV-Y 18.) TV-X))
       

;;THE FOLLOWING LAP ROUTINE PERFORMS THE SYSTEM CALL TO MAP THE 11'S MEMORY INTO THE
;;ADDRESS SPACE OF THE TEN.  THE ADDRESS FOR THE START OF THE TV MEMORY IS THAT OF
;;THE DATA FOR THE TV ARRAY.

[BW 

;; (MAP-TV-CORE <T-or-NIL>) assumes that (TVINIT) has been performed,
;; and thus that the variable "TV" contains the SAR for the fake TV
;; buffer array. If the argument is T, then the TV buffer pages
;; are mapped into the PDP-10's memory. If NIL, the pages are excised
;; from the page map. Thus, one should do (MAP-TV-CORE NIL) before
;; dumping out a job, and (MAP-TV-CORE T) after starting it up again.
;; It does not hurt to do (MAP-TV-CORE T) or (MAP-TV-CORE NIL)
;; twice in a row.

(DECLARE (*EXPR MAP-TV-CORE))

(LAP MAP-TV-CORE SUBR)
(ARGS MAP-TV-CORE (NIL . 1))
(DEFSYM IMMEDIATE 1000)
(DEFSYM READ-WRITE-ACCESS 600000)
(DEFSYM FLUSH-PAGES 0)
	(MOVEI R READ-WRITE-ACCESS)
	(SKIPN 0 A)
	(MOVEI R FLUSH-PAGES)
	(HLLOS 0 NOQUIT)
	(HRRZ TT (ARRAY TV))
	(LSH TT -12)		;MAP INTO PDP-10 STARTING HERE
	(HRLI TT -11)		;NINE PAGES OF TV CORE
	(SETZ D)		;STARTING WITH NUMBER 0
	(*CALL 0 MAP-11-MEMORY-TO-10-ADDRESS-SPACE)
	(*VALUE)
	(HLLZS 0 NOQUIT)
	(JRST 0 CHECKI)
MAP-11-MEMORY-TO-10-ADDRESS-SPACE
	(SETZ)
	(SIXBIT CORBLK)
	(R)			;MODE BITS (CONTROLS ACTION)
	(0 0 -1 IMMEDIATE)	;JOB MAPPED INTO (ME)
	(TT)			;AOBJN POINTER OF PAGES
	(0 0 -2 IMMEDIATE)	;JOB MAPPED FROM (TV BUFFER)
	(SETZ 0 D)		;PAGES MAPPED FROM
NIL 

 
;;;END OF BLACK-AND-WHITE CONDITIONAL SECTION.

]

(DEFINE TVINIT () (MAP-TV-CORE T) (INITIALIZE-TVRTLE-VARIABLES))


;;THE TV ARRAY IS REALLY YOUR TV BUFFER! DOING (STORE (TV <WORD>) <BITS>)
;;ACTUALLY CAUSES THE BITS TO APPEAR ON YOUR SCREEN.  THINGS TO REMEMBER: KEEP THE
;;LAST 4 LOW ORDER BITS CLEAR, AND COORDINATES RUN TOP TO BOTTOM, LEFT TO RIGHT.


;;*PAGE

(COMMENT SPLIT SCREENERY)

;;THE FOLLOWING LAP ROUTINE CAUSES ALL LISP TTY I/O TO TAKE PLACE IN AN AREA AT THE
;;BOTTOM OF THE SCREEN.  THIS PERMITS DISPLAY HACKS TO OCCUR IN THE UPPER HALF.  IT
;;TAKES ONE ARGUMENT, THE NUMBER OF LINES TO CONSTITUTE THE DISPLAY AREA.  AN
;;ARGUMENT OF ZERO OR NIL RESTORES THE FULL SCREEN FOR OUTPUT.  THE GLOBAL VARIABLE
;;:ECHOLINES KEEPS THE LAST ARG TO ECHO-LINES, NUMBER OF LINES IN ECHO AREA, OR NIL
;;IF NONE EXISTS.

[BW (DECLARE (*EXPR CREATE-ECHO-AREA OUTPUT-TO-MAIN-SCREEN OUTPUT-TO-ECHO-AREA)
	 (SPECIAL :ECHOLINES)
	 (FIXNUM ECHO-LINES BOTTOM-LINES)
	 (*LEXPR SYSCALL)) 

[OLDIO
(DEFUN CREATE-ECHO-AREA (ECHO-LINES) 
       (SYSCALL 0. 'SCML 1. (SETQ :ECHOLINES ECHO-LINES))
       ;;0=NO VALUES RETURNED, SCML="SET COMMAND LINES" SYSTEM CALL, 1=TTY INPUT
       ;;CHANNEL
       :ECHOLINES) 


(LAP OUTPUT-TO-ECHO-AREA SUBR)
(ARGS OUTPUT-TO-ECHO-AREA (NIL . 0))
(DEFSYM TYOC 2)
(DEFSYM IMMEDIATE 1000)
	(HLLOS 0 NOQUIT)
	(*OPEN TYOC REOPEN-OUTPUT)
	(*VALUE)
	(MOVEI A 'OUTPUT-NOW-IN-ECHO-AREA)
	(HLLZS 0 NOQUIT)
        (JRST 0 CHECKI)
REOPEN-OUTPUT
	(0 0 (SIXBIT / / / TTY) 31)
	(SIXBIT /.LISP/.)
	(SIXBIT OUTPUT)
NIL 
 


(LAP OUTPUT-TO-MAIN-SCREEN SUBR)
(ARGS OUTPUT-TO-MAIN-SCREEN (NIL . 0))
(DEFSYM TYOC 2)
(DEFSYM IMMEDIATE 1000)
	(HLLOS 0 NOQUIT)
	(*OPEN TYOC REOPEN-OUTPUT)
	(*VALUE)
	(MOVEI A 'OUTPUT-NOW-IN-MAIN-SCREEN)
	(HLLZS 0 NOQUIT)
        (JRST 0 CHECKI)
REOPEN-OUTPUT
	(0 0 (SIXBIT / / / TTY) 21)
	(SIXBIT /.LISP/.)
	(SIXBIT OUTPUT)
NIL 
 
;;END OF OLDIO CONDITIONAL SECTION.
]

[NEWIO

(DECLARE (*EXPR SPLITSCREEN)
         (SPECIAL :TVECHOLINES TYO TYI TOP-TTY BOTTOM-TTY))

;;Get SPLITSCREEN function automatically from LISP library.

(DEFPROP SPLITSCREEN (SPLIT FASL DSK LIBLSP) AUTOLOAD)

(DEFUN CREATE-ECHO-AREA (ECHO-LINES) 
       (SPLITSCREEN ECHO-LINES)
       (SSTATUS TTYINT 11. NIL)
       ;;SPLITSCREEN package sets up control-K to clear the top screen,
       ;;but we obviously don't want this when doing graphics on the top.
       (SETQ :ECHOLINES ECHO-LINES))

;;The screens set up by the SPLITSCREEN package are global variables TOP-TTY
;;and BOTTOM-TTY. TYO is Lisp's current default tty file for PRINT.

(DEFUN OUTPUT-TO-MAIN-SCREEN NIL (SETQ TYO TOP-TTY))

(DEFUN OUTPUT-TO-ECHO-AREA NIL (SETQ TYO BOTTOM-TTY))

;;END OF NEWIO CONDITIONAL SECTION.
]


;;*PAGE


(DEFINE ECHOLINES (BOTTOM-LINES) (CREATE-ECHO-AREA BOTTOM-LINES)
				 (OUTPUT-TO-ECHO-AREA)
				 (CURSORPOS 'C)
				 NO-VALUE) 

;;THE STANDARD LISP CURSORPOS FUNCTION WON'T DO FOR SPLIT-SCREEN HACKERY.  THE
;;SYSTEM MAINTAINS TWO CURSORS, AND LISP IGNORES THE ECHO OUTPUT CURSOR.  SINCE LISP
;;CURSORPOS GETS INCREDIBLY CONFUSED, THE LISP RUBOUT HANDLER IS SOMETIMES LESS THAN
;;OPTIMAL, AND PAGEPAUSE MODE LOSES, SO TURN IT OFF UPON ENTRY. 

[OLDIO (SSTATUS PAGEPAUSE NIL)] 

(DECLARE (*EXPR ECHO-CURSORPOS) (FIXNUM RCPOS)) 

;;; (DEFUN ECHO-CURSORPOS NIL 
;;;        (LET ((RCPOS (CADR (SYSCALL 2. 'RCPOS 0. 1.))))
;;;		(CONS (LSH RCPOS -18.) (BITWISE-AND RCPOS 262143.))))
;;;


(LAP ECHO-CURSORPOS SUBR)
(ARGS ECHO-CURSORPOS (NIL . 0))
(DEFSYM TYIC 1)
(DEFSYM IMMEDIATE 1000)
(DEFSYM RESULT 2000)
	(*CALL 0 READ-CURSOR-POSITION)
	(*VALUE)
	(HLLOS 0 NOQUIT)
	(PUSH FXP TT)
	(PUSH FXP D)
	(PUSH FXP F)
	(HRRZ TT F)
	(JSP T FXCONS)
	(MOVE B A)
	(HLRZ TT F)
	(JSP T FXCONS)
	(CALL 2 (FUNCTION CONS))
	(POP FXP F)
	(POP FXP D)
	(POP FXP TT)
	(HLLZS 0 NOQUIT)
        (JRST 0 CHECKI)
READ-CURSOR-POSITION
	(SETZ)
	(SIXBIT RCPOS/ )
	(0 0 1 IMMEDIATE)
	(0 0 D RESULT)
	(SETZ 0 F RESULT)
NIL 
 

;;*PAGE

;;;

(COMMENT DRAWMODE) 

;;;
;;THE 11 HAS A FEATURE WHEREBY ONE OF THE SIXTEEN BOOLEAN FUNCTIONS OF TWO ARGUMENTS
;;MAY BE SPECIFIED, AND ANY ATTEMPT TO WRITE INTO THE 11'S MEMORY WILL ACTUALLY
;;RESULT IN THE FUNCTION SPECIFIED OF THE WORD BEING DEPOSITED AND THE WORD ALREADY
;;THERE IN THE LOCATION.  THIS IS DONE BY PUTTING A NUMBER TO INDICATE THE DESIRED
;;FUNCTION IN THE "ALU REGISTER"; THE FIRST WORD AFTER THE 8 PAGES OF TV MEMORY. 
;;THE NUMBER IS IN THE HIGH ORDER 8 BITS OF THE WORD.

(DECLARE (SPECIAL :DRAWMODE ANDC SETZ COMP EQV SAME XOR AND SETO IOR SET)
	 (FIXNUM (DRAWMODE FIXNUM) (FLIPCOLORS FIXNUM) MODE)
	 (FIXNUM :DRAWMODE OLD-DRAWMODE ANDC SETZ COMP EQV SAME XOR AND SETO IOR
		 SET)
         (NOTYPE (SELECT-DRAWMODE FIXNUM) NO-VALUE)) 

(DEFINE DRAWMODE (MODE) 
        (PROG1 :DRAWMODE (SELECT-DRAWMODE MODE) (SETQ :DRAWMODE MODE)))

(DEFUN SELECT-DRAWMODE (MODE)
       (COND ((= :DRAWMODE MODE))
             ((STORE (TV 8192.) 
                     (BITWISE-OR MODE (BOOLE 2. -268435456. (TV 8192.))))))
       NO-VALUE)


;;DRAWMODE RETURNS PREVIOUS STATE FOR EASY LAMBDA-BINDING.

(SETQ ANDC 536870912. 
      SETZ 805306368. 
      COMP 1342177280. 
      XOR 1610612736. 
      EQV 2415919104. 
      SAME 2684354560. 
      AND 2952790016. 
      SETO 3221225472. 
      IOR 3758096384. 
      SET 4026531840. 
      :DRAWMODE IOR) 

(DEFUN U (X) 
       (STORE (TV 8192.)
	      (BITWISE-OR (LSH X 20.) (BOOLE 2. 32505856. (TV 8192.))))) 

;;A BIT IN THE LAST WORD OF THE TV MEMORY CONTROLS WHETHER THE SCREEN IS IN
;;DARK-ON-LIGHT MODE OR LIGHT-ON-DARK MODE.  CONTROLLABLE FROM KEYBOARD BY TYPING
;;<ESC> C, THESE FUNCTIONS ALLOW IT TO BE PROGRAM CONTROLLED.

(DEFUN FLIPCOLORS (MODE) 
       (LET ((OLD-DRAWMODE (DRAWMODE MODE)))
	    (STORE (TV 8191.) 65536.)
	    (DRAWMODE OLD-DRAWMODE))) 

(DEFINE COLORNEGATIVE (ABB CLN) NIL (FLIPCOLORS ANDC) NO-VALUE) 

(DEFINE COLORPOSITIVE (ABB CLP) NIL (FLIPCOLORS IOR) NO-VALUE) 

(DEFINE COLORSWITCH (ABB CLSW) NIL (FLIPCOLORS XOR) NO-VALUE) 

(DEFINE COLORSTATE (ABB CLST) NIL (NOT (ZEROP (BITWISE-AND (TV 8191.) 65536.))))

;;END OF BLACK AND WHITE CONDITIONAL SECTION.
]

;;Temporarily change the drawing mode for internal procedures.
;;Restored from global variables :DRAWMODE, :PENSTATE, :ERASERSTATE as appropriate.

[COLOR (DECLARE (FIXNUM :PENNUMBER :ERASERNUMBER) (SPECIAL :PENNUMBER :ERASERNUMBER))]

(DEFUN TEMPORARY-PEN NIL
       [COLOR (SELECT-COLOR :PENNUMBER)]
       [BW (SELECT-DRAWMODE IOR)])

(DEFUN TEMPORARY-ERASER NIL
       [COLOR (SELECT-COLOR :ERASERNUMBER)]
       [BW (SELECT-DRAWMODE ANDC)])

(DEFUN TEMPORARY-XOR NIL
       [COLOR (SELECT-COLOR :PENNUMBER)]
       ;;Xor not implemented in color; assume pen instead.
       [BW (SELECT-DRAWMODE XOR)])

(DEFUN RESTORE-MODE NIL
       [COLOR (RESELECT-COLOR)]
       [BW (SELECT-DRAWMODE :DRAWMODE)])


;;*PAGE


;;;

(COMMENT GLOBAL INITIALIZATIONS) 

;;;
;;;
;;;GLOBAL VARIABLES FOR DIMENSIONS OF SCREEN [ENTIRE TV TUBE],
;;AND PICTURE AREA.
;;;
;;;TV-PICTURE-TOP, TV-PICTURE-BOTTOM, TV-PICTURE-LEFT, TV-PICTURE-RIGHT
;;;  TV COORDINATES OF EDGES OF PICTURE AREA.
;;;TV-PICTURE-CENTER-X, TV-PICTURE-CENTER-Y 
;;; TV COORDINATES OF ORIGIN OF TURTLE.
;;;TV-PICTURE-SIZE-X, TV-PICTURE-SIZE-Y
;;; DIMENSIONS OF PICTURE AREA IN TV COORDINATES.
;;;TV-PICTURE-HALF-X, TV-PICTURE-HALF-Y
;;; HALF OF TV-PICTURE-SIZE-X, TV-PICTURE-SIZE-Y
;;;TURTLE-PICTURE-LEFT, TURTLE-PICTURE-RIGHT, TURTLE-PICTURE-BOTTOM,
;;TURTLE-PICTURE-TOP
;;; TURTLE COORDINATES OF EDGES OF PICTURE AREA. 
;;;TURTLE-PICTURE-SIZE-X, TURTLE-PICTURE-SIZE-Y
;;; DIMENSIONS OF PICTURE AREA IN TURTLE COORDINATES.
;;;TV-SHIFT-X, TV-SHIFT-Y
;;; DISTANCE FROM TV PICTURE CENTER TO LEFT AND BOTTOM EDGES.
;;;TV-SCREEN-CENTER-X, TV-SCREEN-CENTER-Y
;;; TV COORDINATES OF CENTER OF SCREEN.
;;;TV-SCREEN-RIGHT, TV-SCREEN-BOTTOM
;;; TV COORDINATES OF CORRESPONDING EDGES OF SCREEN. LEFT=TOP=0
;;;:TVSTEP
;;; CONVERSION FACTOR BETWEEN TURTLE AND TV COORDINATES.

(DECLARE (SPECIAL TV-SCREEN-CENTER-X TV-PICTURE-CENTER-X TURTLE-PICTURE-LEFT
		  TV-SCREEN-CENTER-Y PI-OVER-180 TV-PICTURE-HALF-X
		  TV-PICTURE-HALF-Y TURTLE-PICTURE-TOP TV-PICTURE-TOP
		  TV-PICTURE-CENTER-Y TV-PICTURE-BOTTOM :TVECHOLINES TV-SHIFT-Y
                  FLOAT-TV-SHIFT-Y TV-PICTURE-RIGHT FLOAT-TV-PICTURE-BOTTOM
                  TV-PICTURE-LEFT FLOAT-TV-PICTURE-LEFT TV-PICTURE-LEFT-FIX FIX-BITS
                  TV-PICTURE-BOTTOM-FIX TV-SHIFT-X FLOAT-TV-SHIFT-X :TVSTEP TWICE-TVSTEP
		  TURTLE-PICTURE-RIGHT TURTLE-PICTURE-BOTTOM SINE-120 COSINE-120
		  SINE-240 COSINE-240 TURTLE-RADIUS TURTLE-FRONT-X TURTLE-FRONT-Y
		  TURTLE-RIGHT-X TURTLE-RIGHT-Y TURTLE-LEFT-X TURTLE-LEFT-Y
		  :SEETURTLE TURTLE-FRONT-RADIUS-X TURTLE-FRONT-RADIUS-Y
		  TURTLE-LEFT-RADIUS-X TURTLE-LEFT-RADIUS-Y TURTLE-RIGHT-RADIUS-X
		  TURTLE-RIGHT-RADIUS-Y TV-PEN-RADIUS TV-TURTLE-FRONT-RADIUS
		  TV-TURTLE-SIDE-RADIUS TV-PICTURE-SIZE-X TV-PICTURE-SIZE-Y
                  FLOAT-TV-PICTURE-SIZE-X FLOAT-TV-PICTURE-SIZE-Y
		  TV-SCREEN-BOTTOM TV-SCREEN-RIGHT :TURTLES :TURTLE :WINDOWS 
                  TURTLE-PROPERTIES HATCH-PROPERTIES :XCOR :YCOR :HEADING
                  TURTLE-HOME-INDEX-X TURTLE-HOME-INDEX-Y :SEETURTLE-INDEX)
	 (FLONUM PI-OVER-180 TURTLE-PICTURE-RIGHT TURTLE-PICTURE-TOP SINE-120
		 COSINE-120 SINE-240 COSINE-240 TURTLE-RADIUS TURTLE-FRONT-X
		 TURTLE-FRONT-Y TURTLE-LEFT-X TURTLE-LEFT-Y TURTLE-RIGHT-X
		 TURTLE-RIGHT-Y TURTLE-FRONT-RADIUS-X TURTLE-FRONT-RADIUS-Y
		 TURTLE-RIGHT-RADIUS-X TURTLE-RIGHT-RADIUS-Y TURTLE-LEFT-RADIUS-X
		 TURTLE-LEFT-RADIUS-Y TV-PEN-RADIUS TV-TURTLE-FRONT-RADIUS
		 TV-TURTLE-SIDE-RADIUS TURTLE-PICTURE-TOP TURTLE-PICTURE-RIGHT
		 TURTLE-PICTURE-LEFT TURTLE-PICTURE-BOTTOM :XCOR :YCOR :HEADING
                 FLOAT-TV-SHIFT-Y FLOAT-TV-SHIFT-X FLOAT-TV-PICTURE-LEFT
                 FLOAT-TV-PICTURE-BOTTOM FLOAT-TV-PICTURE-SIZE-X FLOAT-TV-PICTURE-SIZE-Y)
	 (FIXNUM TV-PICTURE-CENTER-X TV-SCREEN-CENTER-X TV-SCREEN-CENTER-Y
		 TV-PICTURE-TOP TV-PICTURE-HALF-X TV-PICTURE-HALF-Y TV-SHIFT-X
		 TV-SHIFT-Y TV-PICTURE-RIGHT TV-PICTURE-CENTER-Y TV-PICTURE-BOTTOM
                 TV-PICTURE-LEFT-FIX TV-PICTURE-BOTTOM-FIX FIX-BITS TV-SCREEN-RIGHT
		 :TVECHOLINES TV-PICTURE-RIGHT TV-PICTURE-LEFT TV-PICTURE-TOP
                 TV-PICTURE-SIZE-X TV-PICTURE-SIZE-Y TV-SCREEN-BOTTOM :SEETURTLE-INDEX))
     

(DECLARE (SPECIAL FIX-BITS MINUS-FIX-BITS UNIT-BIT FLOAT-UNIT UNIT-MASK HALF-UNIT)
         (FIXNUM FIX-BITS MINUS-FIX-BITS UNIT-BIT UNIT-MASK HALF-UNIT)
         (FLONUM FLOAT-UNIT))

(SETQ TV-SCREEN-CENTER-X 288. 
      TV-SCREEN-BOTTOM 455. 
      TV-SCREEN-RIGHT 575.
      TV-SCREEN-CENTER-Y (// TV-SCREEN-BOTTOM 2.) 
      FLOATING-POINT-TOLERANCE 1.0E-3 
      TWICE-FLOATING-POINT-TOLERANCE (*$ 2.0 FLOATING-POINT-TOLERANCE) 
      :PI 3.1415926 
      PI-OVER-180 (//$ :PI 180.0) 
      :POLYGON 30.0 
      :ECHOLINES NIL 
      SINE-120 (SIN (*$ 120.0 PI-OVER-180)) 
      COSINE-120 (COS (*$ 120.0 PI-OVER-180)) 
      SINE-240 (SIN (*$ 240.0 PI-OVER-180)) 
      COSINE-240 (COS (*$ 240.0 PI-OVER-180)) 
      TV-PEN-RADIUS 3.0 
      TV-TURTLE-FRONT-RADIUS 15.0 
      TV-TURTLE-SIDE-RADIUS 10.0 
      LESS-SUBR (GET '< 'SUBR) 
      GREATER-SUBR (GET '> 'SUBR) 
      WINDOWFRAME-BOUNDS NIL 
      TURTLE-PROPERTIES 24.
      ;;Changing TURTLE-PROPERTIES also requires changing declarations
      ;;for HATCH-PROPERTY, TURTLE-PROPERTY below. 
      TURTLE-HOME-INDEX-X 0.
      ;;Indices of turtle's home in the turtle array.
      TURTLE-HOME-INDEX-Y 1.
      :SEETURTLE-INDEX 13.
      :WINDOWS NIL
      TV-SIZE-X-MAX 573.
      TV-SIZE-Y-MAX [COLOR 448.] [BW 415.]
      FIX-BITS 22.
      ;;Number of bits in fractional part.
      MINUS-FIX-BITS (- FIX-BITS)
      ;;Shift count for converting to ordinary integer.
      ;;One in fixed & float, mask for fractional part.
      UNIT-BIT (LSH 1. FIX-BITS)
      HALF-UNIT (LSH UNIT-BIT -1.)
      FLOAT-UNIT (FLOAT UNIT-BIT)
      UNIT-MASK (1- UNIT-BIT)
      :PENNUMBER 15. 
      :ERASERNUMBER 15.
      INITIAL-TURTLE-PROPERTIES '(TV-PICTURE-CENTER-X TV-PICTURE-CENTER-Y :XCOR :YCOR :HEADING 
                                  SINE-HEADING COSINE-HEADING :PENSTATE :ERASERSTATE 
                                  :XORSTATE :DRAWSTATE :WRAP :CLIP :SEETURTLE :DRAWTURTLE
                                  :ERASETURTLE :PENCOLOR :PENNUMBER
                                  :BRUSH BRUSH-INFO BRUSH-PICTURE HORIZONTAL VERTICAL 
                                  :OFFSCREEN)
      INITIAL-HATCH-PROPERTIES '(288. 152. 0.0 0.0 0.0 0.0 1.0 T NIL NIL T NIL NIL NIL
                                 NIL NIL WHITE 0. NIL NIL NIL HORIZONTAL-LINE 
                                 VERTICAL-LINE NIL)
      HORIZONTAL-LINE-INDEX 21.
      VERTICAL-LINE-INDEX 22.)

(DECLARE (FLONUM CONVERSION-FACTOR TV-FACTOR-X TV-FACTOR-Y TURTLE-PICTURE-MIN
		 NEW-TURTLE-SIZE TURTLE-WINDOW-SIZE)
	 (SPECIAL TV-FACTOR-X TV-FACTOR-Y TURTLE-PICTURE-MIN TV-PICTURE-MIN
                  TURTLE-WINDOW-SIZE :CAREFULTURTLE INITIAL-TURTLE-PROPERTIES
                  INITIAL-HATCH-PROPERTIES HORIZONTAL-LINE-INDEX VERTICAL-LINE-INDEX)
	 (FIXNUM NEW-TV-SIZE-X NEW-TV-SIZE-Y TV-PICTURE-MIN HORIZONTAL-LINE-INDEX 
                 VERTICAL-LINE-INDEX)) 

(DECLARE (SPECIAL FLOATING-POINT-TOLERANCE TWICE-FLOATING-POINT-TOLERANCE LESS-SUBR
		  GREATER-SUBR)
	 (FLONUM FLOATING-POINT-TOLERANCE TWICE-FLOATING-POINT-TOLERANCE)
	 (SPECIAL PEN-RADIUS TURTLE-FRONT-RADIUS TURTLE-SIDE-RADIUS
		  TURTLE-PICTURE-SIZE-X TURTLE-PICTURE-SIZE-Y)
	 (FLONUM PEN-RADIUS TURTLE-FRONT-RADIUS TURTLE-SIDE-RADIUS
		 TURTLE-PICTURE-SIZE-X TURTLE-PICTURE-SIZE-Y NEW-TURTLE-SIZE-X
		 NEW-TURTLE-SIZE-Y)) 

(DECLARE (FIXNUM NEW-HOME-X NEW-HOME-Y (TV-X FLONUM) (TV-Y FLONUM))
	 (FLONUM :XCOR :YCOR TURTLE-SHIFT-X TURTLE-SHIFT-Y)
	 (SPECIAL :XCOR :YCOR)
	 (NOTYPE (SETXY$ FLONUM FLONUM))) 

(DECLARE (SPECIAL :PENSTATE :ERASERSTATE :XORSTATE :DRAWSTATE)) 

(DECLARE (SPECIAL TV-PICTURE-MIN SINE-HEADING COSINE-HEADING :DRAWTURTLE
		  :ERASETURTLE XGP-MAX HORIZONTAL VERTICAL :OUTLINE :WINDOWOUTLINE
                  :BRUSH BRUSH-INFO BRUSH-PICTURE :CLIP :PATTERNS :OFFSCREEN
                  :PENCOLOR :PENNUMBER :ERASERNUMBER :ERASERCOLOR)
	 (FIXNUM TV-PICTURE-MIN XGP-MAX FROM-INDEX TO-INDEX POINT-INDEX
                 :PENNUMBER :ERASERNUMBER)
	 (FLONUM SINE-HEADING COSINE-HEADING :TVSTEP TWICE-TVSTEP
                 TURTLE-HOME-X TURTLE-HOME-Y)) 

(DECLARE (ARRAY* (FIXNUM (FROM-MASK 32.) (TO-MASK 32.) (POINT-MASK 32.)
                 [COLOR (ELEVEN-FROM-MASK 16.) (ELEVEN-TO-MASK 16.) 
                        (ELEVEN-POINT-MASK 16.) (ELEVEN-NOT-POINT-MASK 16.)])))

(DECLARE (ARRAY* (NOTYPE (HATCH-PROPERTY 24.) 
                         (TURTLE-PROPERTY 24.))))

(DEFUN INITIALIZE-TVRTLE-VARIABLES NIL 
       (SETQ TV-PICTURE-TOP [COLOR 2.] [BW 1.]
	     TV-PICTURE-BOTTOM 301.
             TV-PICTURE-BOTTOM-FIX (LSH TV-PICTURE-BOTTOM FIX-BITS)
             FLOAT-TV-PICTURE-BOTTOM (FLOAT TV-PICTURE-BOTTOM)
	     TV-PICTURE-LEFT 138. 
             TV-PICTURE-LEFT-FIX (LSH TV-PICTURE-LEFT FIX-BITS)
             FLOAT-TV-PICTURE-LEFT (FLOAT TV-PICTURE-LEFT)
	     TV-PICTURE-RIGHT 438. 
	     TV-PICTURE-CENTER-X 288. 
	     TV-PICTURE-CENTER-Y 151.
	     TV-SHIFT-X (- TV-PICTURE-CENTER-X TV-PICTURE-LEFT) 
             FLOAT-TV-SHIFT-X (+$ (FLOAT TV-SHIFT-X) 0.5)
	     TV-SHIFT-Y (- TV-PICTURE-BOTTOM TV-PICTURE-CENTER-Y) 
             FLOAT-TV-SHIFT-Y (+$ (FLOAT TV-SHIFT-Y) 0.5)
	     TV-PICTURE-HALF-X 150. 
	     TV-PICTURE-HALF-Y 150. 
	     TV-PICTURE-SIZE-X 301. 
             FLOAT-TV-PICTURE-SIZE-X 300.0
	     TV-PICTURE-SIZE-Y 301. 
             FLOAT-TV-PICTURE-SIZE-Y 300.0
	     TV-PICTURE-MIN 301. 
	     TV-FACTOR-X 1.0 
	     TV-FACTOR-Y 1.0 
	     TURTLE-PICTURE-MIN 1000.0 
	     :TVSTEP (//$ TURTLE-PICTURE-MIN
				(-$ (FLOAT TV-PICTURE-MIN)
				    TWICE-FLOATING-POINT-TOLERANCE))
             TWICE-TVSTEP (*$ 2.0 :TVSTEP) 
	     TURTLE-FRONT-RADIUS (*$ TV-TURTLE-FRONT-RADIUS :TVSTEP) 
	     TURTLE-SIDE-RADIUS (*$ TV-TURTLE-SIDE-RADIUS :TVSTEP) 
	     TURTLE-PICTURE-SIZE-X 1000.0 
	     TURTLE-PICTURE-SIZE-Y 1000.0 
	     TURTLE-PICTURE-TOP 500.0 
	     TURTLE-PICTURE-BOTTOM -500.0 
	     TURTLE-PICTURE-LEFT -500.0 
	     TURTLE-PICTURE-RIGHT 500.0 
	     :XCOR 0.0 
	     :YCOR 0.0 
	     :HEADING 0.0 
	     SINE-HEADING 0.0 
	     COSINE-HEADING 1.0 
	     :PENSTATE T 
	     :ERASERSTATE NIL 
	     :XORSTATE NIL 
             :DRAWSTATE 'PEN
	     :WRAP NIL 
             :CLIP NIL
             :OFFSCREEN NIL
	     :SEETURTLE NIL 
	     :DRAWTURTLE NIL 
	     :ERASETURTLE NIL 
	     :TURTLES '(LOGOTURTLE)
	     :TURTLE 'LOGOTURTLE 
	     :TVECHOLINES 10.
             :BRUSH NIL
             BRUSH-INFO NIL
             BRUSH-PICTURE NIL 
             :PATTERNS '(SOLID GRID CHECKER HORIZLINES VERTLINES DARKTEXTURE
                         LIGHTTEXTURE TEXTURE)
             HORIZONTAL (EXPR-FUNCTION HORIZONTAL-LINE)
             VERTICAL (EXPR-FUNCTION VERTICAL-LINE)
             :WINDOWOUTLINE [COLOR NIL] [BW T]
             :OUTLINE [BW T] [COLOR NIL]
             :CAREFULTURTLE NIL
             TURTLE-WINDOW-SIZE 50.0)
       (FILLARRAY (ARRAY TURTLE-PROPERTY T TURTLE-PROPERTIES) INITIAL-TURTLE-PROPERTIES)
       ;;TURTLE-PROPERTY are names of variables local to each turtle, HATCH-PROPERTY
       ;;contains the initial value for each of them.
       (FILLARRAY (ARRAY HATCH-PROPERTY T TURTLE-PROPERTIES) INITIAL-HATCH-PROPERTIES)
       (STORE (HATCH-PROPERTY HORIZONTAL-LINE-INDEX) (EXPR-FUNCTION HORIZONTAL-LINE))
       ;;Store the SUBR pointers for drawing horizontal and vertical lines.
       (STORE (HATCH-PROPERTY VERTICAL-LINE-INDEX) (EXPR-FUNCTION VERTICAL-LINE))
       (PUTPROP 'LOGOTURTLE (*ARRAY NIL T TURTLE-PROPERTIES) 'TURTLE)
       (ARRAY FROM-MASK FIXNUM 32.)
       (ARRAY TO-MASK FIXNUM 32.)
       (ARRAY POINT-MASK FIXNUM 32.)
       [COLOR (ARRAY ELEVEN-FROM-MASK FIXNUM 16.)
              (ARRAY ELEVEN-TO-MASK FIXNUM 16.)
              (ARRAY ELEVEN-POINT-MASK FIXNUM 16.)
              (ARRAY ELEVEN-NOT-POINT-MASK FIXNUM 16.)]
       (DO FROM-INDEX 0. (1+ FROM-INDEX) (= FROM-INDEX 32.)
           (STORE (FROM-MASK FROM-INDEX) (BITWISE-AND -16. (LSH -1. (- FROM-INDEX)))))
       (DO TO-INDEX 0. (1+ TO-INDEX) (= TO-INDEX 32.)
           (STORE (TO-MASK TO-INDEX) (LSH -1. (- 35. TO-INDEX))))
       (DO POINT-INDEX 0. (1+ POINT-INDEX) (= POINT-INDEX 32.)
           (STORE (POINT-MASK POINT-INDEX) (LSH 1. (- 35. POINT-INDEX))))
       [COLOR (DO FROM-INDEX 0. (1+ FROM-INDEX) (= FROM-INDEX 16.)
                 (STORE (ELEVEN-FROM-MASK FROM-INDEX) (LSH -1. (- 16. FROM-INDEX))))
              (DO TO-INDEX 0. (1+ TO-INDEX) (= TO-INDEX 16.)
                  (STORE (ELEVEN-TO-MASK TO-INDEX)  (1- (LSH 1. (- 15. TO-INDEX)))))
              (DO POINT-INDEX 0. (1+ POINT-INDEX) (= POINT-INDEX 16.)
                  (STORE (ELEVEN-POINT-MASK POINT-INDEX) (LSH 1. (- 15. POINT-INDEX)))
                  (STORE (ELEVEN-NOT-POINT-MASK POINT-INDEX) 
                         (BITWISE-NOT (ELEVEN-POINT-MASK POINT-INDEX))))]) 

;;*PAGE

;;ARITHMETIC.

(DECLARE (FLONUM (\$ FLONUM FLONUM) (SINE) (COSINE) (ARCTAN) PI-OVER-180)
	 (SPECIAL PI-OVER-180) (FIXNUM FIX-QUOTIENT)) 

(DEFUN \$ (MODULAND MODULUS) 
       (LET ((FIX-QUOTIENT (IFIX (//$ MODULAND MODULUS)))) 
            (-$ MODULAND (*$ MODULUS (FLOAT FIX-QUOTIENT)))))

(DEFINE SINE (DEGREES) (SIN (*$ (FLOAT DEGREES) PI-OVER-180))) 

(DEFINE COSINE (DEGREES) (COS (*$ (FLOAT DEGREES) PI-OVER-180))) 

(DEFINE ARCTAN (OPPOSITE ADJACENT) 
	(//$ (ATAN (FLOAT OPPOSITE) (FLOAT ADJACENT)) PI-OVER-180)) 

;;FUNCTIONS FOR CONVERTING BACK AND FORTH FROM TURTLE COORDINATES TO ABSOLUTE TV
;;COORDINATES.

(DECLARE (FLONUM (TURTLE-X FIXNUM)) (FIXNUM TV-XCOR)) 

(DEFUN TURTLE-X (TV-XCOR) (*$ (FLOAT (- TV-XCOR TV-PICTURE-CENTER-X)) :TVSTEP)) 

(DECLARE (FLONUM (TURTLE-Y FIXNUM)) (FIXNUM TV-YCOR)) 

(DEFUN TURTLE-Y (TV-YCOR) (*$ :TVSTEP (FLOAT (- TV-PICTURE-CENTER-Y TV-YCOR)))) 

(DECLARE (FIXNUM TV-PICTURE-SIZE-X TV-PICTURE-LEFT TV-SHIFT-X)
	 (SPECIAL TV-PICTURE-SIZE-X TV-PICTURE-LEFT TV-SHIFT-X)) 

(DECLARE (FIXNUM TV-PICTURE-SIZE-Y TV-SHIFT-Y TV-PICTURE-BOTTOM)
	 (SPECIAL TV-PICTURE-SIZE-Y TV-PICTURE-BOTTOM TV-SHIFT-Y)) 

(DECLARE (FIXNUM (TV-X FLONUM) RAW-X (TV-Y FLONUM) RAW-Y)) 

(DEFUN TV-X (TURTLE-X) 
       (LET ((RAW-X (+ (ROUND (//$ TURTLE-X :TVSTEP)) TV-SHIFT-X)))
	    ;;SCALE TO TV SIZED STEPS.
            (COND (:WRAP 
                   (COND ((MINUSP (SETQ RAW-X (\ RAW-X TV-PICTURE-SIZE-X)))
                          (INCREMENT RAW-X TV-PICTURE-SIZE-X)))))
	    ;;MOVE ZERO TO LEFT EDGE AND WRAP.
	    (+ RAW-X TV-PICTURE-LEFT))) 

(DEFUN TV-Y (TURTLE-Y) 
       (LET ((RAW-Y (+ (ROUND (//$ TURTLE-Y :TVSTEP)) TV-SHIFT-Y)))
	    ;;SCALE TO TV SIZED STEPS.
            (COND (:WRAP 
                   (COND ((MINUSP (SETQ RAW-Y (\ RAW-Y TV-PICTURE-SIZE-Y)))
                          (INCREMENT RAW-Y TV-PICTURE-SIZE-Y)))))
	    ;;MOVE ZERO TO BOTTOM. Y COORDINATES GO IN OTHER DIRECTION.
	    (- TV-PICTURE-BOTTOM RAW-Y))) 

;;*PAGE

;;;

(COMMENT SCREEN CLEARING)   

;;;

(DECLARE (SPECIAL :XCOR :YCOR :HEADING SINE-HEADING COSINE-HEADING :PENSTATE
		  :ERASERSTATE :XORSTATE TURTLE-PICTURE-RIGHT TURTLE-PICTURE-TOP
		  :TVSTEP :WRAP :SEETURTLE :OFFSCREEN)
	 (FLONUM :XCOR :YCOR :HEADING SINE-HEADING COSINE-HEADING
		 TURTLE-PICTURE-RIGHT TURTLE-PICTURE-TOP :TVSTEP)) 

(DECLARE (FIXNUM I STOP J)) 

[BW 
(DEFUN TV-CLEARSCREEN NIL 
       (DO ((I 0. (1+ I))
	    (STOP (* 18. (- TV-SCREEN-BOTTOM (* :ECHOLINES 12.) 12.)))
	    (OLD-DRAWMODE (DRAWMODE SET)))
	   ((> I STOP) (DRAWMODE OLD-DRAWMODE))
           ;;Zeros in set mode clear screen. Loop clears horizontal swatches.
           (STORE (TV I) 0.))
       ;;Restore output to bottom of screen, top for display area.
       (OUTPUT-TO-ECHO-AREA))]


;;*PAGE

;;;

(COMMENT LINE DRAWING PROCEDURES) 

;;;

[BW

(DECLARE (NOTYPE (VERTICAL-LINE FIXNUM FIXNUM FIXNUM))	 
         (SPECIAL TV-PICTURE-TOP)
	 (FIXNUM TV-PICTURE-TOP MASK TV-ADDRESS STOP-ADDRESS)) 

;;VERTICAL-LINE EXPECTS ITS INPUT IN TV COORDINATES, LEAST Y TO GREATEST Y
;;[TOP TO BOTTOM].
;;IT TAKES ADVANTAGE OF THE KNOWLEDGE THAT IT IS TO DRAW A VERTICAL LINE, AND
;;RECYCLES THE MASK USED TO PICK OUT THE APPROPRIATE BIT.

(DEFUN VERTICAL-LINE (FROM-X FROM-Y TO-Y) 
       (DO ((MASK (POINT-MASK (BITWISE-AND FROM-X 31.)))
            (TV-ADDRESS (+ (* 18. FROM-Y) (SETQ FROM-X (LSH FROM-X -5.)))
                        (+ TV-ADDRESS 18.))
            (STOP-ADDRESS (+ (* 18. TO-Y) FROM-X)))
           ((> TV-ADDRESS STOP-ADDRESS))
	   (STORE (TV TV-ADDRESS) MASK))) 

;;;HORIZONTAL-LINE EXPECTS INPUT IN TV COORDINATES,
;;;FROM LEAST X TO GREATEST X [LEFT TO RIGHT].
;;IT TAKES ADVANTAGE OF THE SPECIAL CASE TO RAPIDLY DRAW A LINE SETTING UP TO 32
;;BITS IN PARALLEL WITH ONE STORE.

(DECLARE (NOTYPE (HORIZONTAL-LINE FIXNUM FIXNUM FIXNUM)) 
         (FIXNUM MASK STOP-MASK STOP-X)) 

(DEFUN HORIZONTAL-LINE (FROM-X FROM-Y TO-X) 
       (LET ((MASK (FROM-MASK (BITWISE-AND (PROG1 FROM-X (SETQ FROM-X (LSH FROM-X -5.)))
                                           31.)))
             (TV-ADDRESS (+ (SETQ FROM-Y (* 18. FROM-Y)) FROM-X) (1+ TV-ADDRESS))
	     (STOP-ADDRESS (+ FROM-Y (LSH TO-X -5.)))
             (STOP-MASK (TO-MASK (BITWISE-AND TO-X 31.))))
            (COND ((= TV-ADDRESS STOP-ADDRESS)
                   (STORE (TV STOP-ADDRESS) (BITWISE-AND MASK STOP-MASK)))
                  (T (STORE (TV TV-ADDRESS) MASK)
                     (DO NIL 
                         ((= (INCREMENT TV-ADDRESS) STOP-ADDRESS)
                          (STORE (TV STOP-ADDRESS) STOP-MASK))
                         (STORE (TV TV-ADDRESS) -16.)))))
       T)

(DEFINE OUTLINE NIL
        (AND :OUTLINE (LET ((OLD-DRAWMODE (DRAWMODE IOR)))
                           (TV-BOX TV-PICTURE-LEFT
                                   TV-PICTURE-RIGHT
                                   TV-PICTURE-BOTTOM
                                   TV-PICTURE-TOP)
                           (DRAWMODE OLD-DRAWMODE)))
        NO-VALUE) 

(DECLARE (FIXNUM (TV-BOX FIXNUM FIXNUM FIXNUM FIXNUM))) 

(DEFUN TV-BOX (LEFT RIGHT BOTTOM TOP) 
       (SETQ LEFT (1- LEFT) RIGHT (1+ RIGHT))
       (HORIZONTAL-LINE LEFT (1- TOP) RIGHT)
       (HORIZONTAL-LINE LEFT (1+ BOTTOM) RIGHT)
       (VERTICAL-LINE LEFT TOP BOTTOM)
       (VERTICAL-LINE RIGHT TOP BOTTOM))

;;END OF BLACK-AND-WHITE CONDITIONAL SECTION.
] 


[COLOR 
;;;
;;These versions of horizontal and vertical line drawing procedures use the block
;;transfer mode feature of the 11logo TV system.  How much effeciency is gained by
;;doing so over repeated single writes of the memory, or use of directly writing the
;;mapped-in memory is not clear, especially in the case of horizontal lines.

(DECLARE (NOTYPE (VERTICAL-LINE FIXNUM FIXNUM)) (FIXNUM BIT-MASK BIT-X WORD-X)) 

(DEFUN VERTICAL-LINE (FROM-X FROM-Y TO-Y) 
       (LET ((WORD-X (LSH FROM-X -4.)) (BIT-X (BITWISE-AND FROM-X 15.)))
	    (LET ((BIT-MASK (ELEVEN-POINT-MASK BIT-X)))
		 (WRITE-TV-MASK (BITWISE-NOT BIT-MASK))
		 ;;Write into successive vertical words 1.  rotated to the right
		 ;;place.
		 (WRITE-TV-BLOCK (ELEVEN-TV-ADDRESS FROM-Y WORD-X)
				 BIT-MASK
				 (1+ (- TO-Y FROM-Y))
				 WORDS-PER-LINE)))) 

(DECLARE (NOTYPE (HORIZONTAL-LINE FIXNUM FIXNUM FIXNUM))
	 (FIXNUM START-WORD START-BIT STOP-WORD STOP-BIT START-MASK START-ADDRESS
		 WORD-COUNT STOP-MASK)) 

(DEFUN HORIZONTAL-LINE (FROM-X FROM-Y TO-X) 
       (LET ((START-WORD (LSH FROM-X -4.))
	     (START-BIT (BITWISE-AND FROM-X 15.))
	     (STOP-WORD (LSH TO-X -4.))
	     (STOP-BIT (BITWISE-AND TO-X 15.)))
	    (LET ((START-MASK (ELEVEN-FROM-MASK START-BIT))
		  (STOP-MASK (ELEVEN-TO-MASK STOP-BIT))
		  (WORD-COUNT (- STOP-WORD START-WORD))
		  (START-ADDRESS (ELEVEN-TV-ADDRESS FROM-Y START-WORD)))
		 (COND ((ZEROP WORD-COUNT)
			;;Entire line within one word.
			(WRITE-TV-MASK (BITWISE-OR START-MASK STOP-MASK))
			(WRITE-TV-WORD START-ADDRESS -1.))
		       ((WRITE-TV-MASK START-MASK)
			;;Write the first [partial] word.
			(WRITE-TV-WORD START-ADDRESS -1.)
			(WRITE-TV-MASK 0.)
			;;Block write all full words in between.
			(WRITE-TV-BLOCK (+ START-ADDRESS 2.) -1. (1- WORD-COUNT) 1.)
			(WRITE-TV-MASK STOP-MASK)
			;;Finish the last partial word.
			(WRITE-TV-WORD (+ START-ADDRESS (LSH WORD-COUNT 1.))
				       -1.)))))) 

(DECLARE (NOTYPE (STORE-TV-FIELD FIXNUM FIXNUM FIXNUM FIXNUM))) 

(DEFUN STORE-TV-FIELD (TV-ADDRESS WORD-DATA START-BIT STOP-BIT)
       (SETQ TV-ADDRESS (LSH TV-ADDRESS 2.))
       (COND ((< START-BIT 16.)
	      ;;WRITE THE LOW ORDER WORD.
	      (LET ((START-MASK (ELEVEN-FROM-MASK START-BIT)))
		   ;;CREATE MASK WITH ZEROS IN AREA TO BE SET.
		   (COND ((< STOP-BIT 16.)
			  ;;IF FIELD STOPS BEFORE END OF FIRST WORD.
			  (SETQ START-MASK
				(BITWISE-OR START-MASK (ELEVEN-TO-MASK STOP-BIT)))))
		   (WRITE-TV-MASK START-MASK)
		   ;;INHIBIT HIGH ORDER WORD.
                   (WRITE-TV-WORD TV-ADDRESS (LSH WORD-DATA -20.)))))
       (COND ((> STOP-BIT 15.)
	      ;;WRITE HIGH ORDER WORD.
	      (LET ((STOP-MASK (ELEVEN-TO-MASK (- STOP-BIT 16.))))
		   (COND ((> START-BIT 15.)
			  (SETQ STOP-MASK
				(BITWISE-OR STOP-MASK
                                            (ELEVEN-FROM-MASK (- START-BIT 16.))))))
		   (WRITE-TV-MASK STOP-MASK)
		   ;;INHIBIT LOWER ORDER WORD.
                   (WRITE-TV-WORD (+ TV-ADDRESS 2.) 
                                  (BITWISE-AND RIGHT-HALFWORD (LSH WORD-DATA -4.))))))
       T)

;;; (DEFUN STORE-TV-FIELD (TV-ADDRESS WORD-DATA START-BIT STOP-BIT) 
;;;        (COND ((< START-BIT 16.)
;;; 	      ;;WRITE THE LOW ORDER WORD.
;;; 	      (LET ((START-MASK (ELEVEN-FROM-MASK START-BIT)))
;;; 		   ;;CREATE MASK WITH ZEROS IN AREA TO BE SET.
;;; 		   (COND ((< STOP-BIT 16.)
;;; 			  ;;IF FIELD STOPS BEFORE END OF FIRST WORD.
;;; 			  (SETQ START-MASK
;;; 				(BITWISE-OR START-MASK (ELEVEN-TO-MASK STOP-BIT)))))
;;; 		   (WRITE-TV-MASK START-MASK)
;;; 		   ;;INHIBIT HIGH ORDER WORD.
;;; 		   (STORE (TV TV-ADDRESS) (BITWISE-OR WORD-DATA 4.)))))
;;;        (COND ((> STOP-BIT 15.)
;;; 	      ;;WRITE HIGH ORDER WORD.
;;; 	      (LET ((STOP-MASK (ELEVEN-TO-MASK (- STOP-BIT 16.))))
;;; 		   (COND ((> START-BIT 15.)
;;; 			  (SETQ STOP-MASK
;;; 				(BITWISE-OR STOP-MASK 
;;;                                             (ELEVEN-FROM-MASK (- START-BIT 16.))))))
;;; 		   (WRITE-TV-MASK STOP-MASK)
;;; 		   ;;INHIBIT LOWER ORDER WORD.
;;; 		   (STORE (TV TV-ADDRESS) (BITWISE-OR WORD-DATA 8.)))))
;;;        T) 

(DEFINE OUTLINE NIL 
        (AND :OUTLINE 
             (TV-BOX TV-PICTURE-LEFT TV-PICTURE-RIGHT TV-PICTURE-BOTTOM TV-PICTURE-TOP))
        NO-VALUE) 

(DECLARE (FIXNUM (TV-BOX FIXNUM FIXNUM FIXNUM FIXNUM))) 

(DEFUN TV-BOX (LEFT RIGHT BOTTOM TOP) 
       (SETQ LEFT (1- LEFT) RIGHT (1+ RIGHT))
       (HORIZONTAL-LINE LEFT (1- TOP) RIGHT)
       (HORIZONTAL-LINE LEFT (- TOP 2.) RIGHT)
       ;;HORIZONTAL LINES LOOK LOTS BETTER IF THERE ARE TWO OF THEM BECAUSE OF
       ;;INTERLACE.
       (HORIZONTAL-LINE LEFT (+ BOTTOM 2.) RIGHT)
       (HORIZONTAL-LINE LEFT (1+ BOTTOM) RIGHT)
       (VERTICAL-LINE LEFT TOP BOTTOM)
       (VERTICAL-LINE RIGHT TOP BOTTOM)) 

;;END OF COLOR CONDITIONAL SECTION.
]



;;*PAGE
;;;
(COMMENT Vector drawing within display area)
;;;

(DECLARE (NOTYPE (BOUNDED-VECTOR FLONUM FLONUM FLONUM FLONUM))
	 (FLONUM CHANGE-X CHANGE-Y STEP-X STEP-Y TAN-HEADING SIGN-X$ SIGN-Y$
		 STANDARD-STEP-X STANDARD-STEP-Y)
	 (FIXNUM SIGN-X SIGN-Y TRAVEL-X TRAVEL-Y STOP-X STOP-Y)) 


 
;;To minimize floating point computation in the inner loop of vector
;;drawing, normally floating point coordinates are converted to fixed point
;;numbers shifted so that they have a fixed size fractional part.

(DECLARE (FIXNUM (FIXIFY FLONUM) (TV-FIX-X FLONUM) (TV-FIX-Y FLONUM)))

;;Converts from float to fixed.

(DEFUN FIXIFY (FLONUM) (ROUND (*$ FLONUM FLOAT-UNIT)))

(DEFUN TV-FIX-X (TURTLE-X)
       ;;Turtle coordiates in fixed point. See code for TV-X, TV-Y.
       (FIXIFY (+$ (+$ (//$ TURTLE-X :TVSTEP) FLOAT-TV-SHIFT-X) FLOAT-TV-PICTURE-LEFT)))

(DEFUN TV-FIX-Y (TURTLE-Y)
       (FIXIFY (-$ FLOAT-TV-PICTURE-BOTTOM 
                   (+$ (//$ TURTLE-Y :TVSTEP) FLOAT-TV-SHIFT-Y))))


(DECLARE (NOTYPE (BOUNDED-VECTOR FLONUM FLONUM FLONUM FLONUM) 
                 (TVECTOR FIXNUM FIXNUM FIXNUM FIXNUM)))

(DEFUN BOUNDED-VECTOR (FROM-X FROM-Y TO-X TO-Y)
       ;;Floating point coordinates, i.e. turtle coordinates.
       (BOUNDED-VECTOR-FIX (TV-FIX-X FROM-X) 
                           (TV-FIX-Y FROM-Y) 
                           (TV-FIX-X TO-X) 
                           (TV-FIX-Y TO-Y)))

(DEFUN TVECTOR (FROM-X FROM-Y TO-X TO-Y)
       ;;Arguments in fixed point TV coordinates instead.
       (BOUNDED-VECTOR-FIX (LSH FROM-X FIX-BITS) 
                           (LSH FROM-Y FIX-BITS)
                           (LSH TO-X FIX-BITS)
                           (LSH TO-Y FIX-BITS)))

(DECLARE (NOTYPE (BOUNDED-VECTOR-FIX FIXNUM FIXNUM FIXNUM FIXNUM))
         (FIXNUM CHANGE-X-FIX CHANGE-Y-FIX ABS-CHANGE-X ABS-CHANGE-Y
                 FROM-X-FRAC FROM-Y-FRAC))

(DECLARE (NOTYPE (NEARLY-HORIZONTAL-VECTOR FIXNUM FIXNUM FIXNUM FIXNUM FLONUM FIXNUM)
                 (NEARLY-VERTICAL-VECTOR FIXNUM FIXNUM FIXNUM FIXNUM FLONUM FIXNUM)))
 
;;*PAGE



(DEFUN BOUNDED-VECTOR-FIX (FROM-X-FIX FROM-Y-FIX TO-X-FIX TO-Y-FIX)
       ;;Takes arguments as shifted fixed point numbers.
 (LET ((CHANGE-X-FIX (- TO-X-FIX FROM-X-FIX)) (CHANGE-Y-FIX (- TO-Y-FIX FROM-Y-FIX)))
      (LET ((ABS-CHANGE-X (ABS CHANGE-X-FIX)) (ABS-CHANGE-Y (ABS CHANGE-Y-FIX)))
           (COND ((> ABS-CHANGE-X ABS-CHANGE-Y)
                  ;;Split up cases according to whether greatest change is in
                  ;;X or Y direction. If in X, we step along Y values, drawing
                  ;;a horizontal line for each Y value.
                  (COND ((> FROM-X-FIX TO-X-FIX) 
                         ;;Exchange points to assure positive step along X. This
                         ;;means vector is drawn in same order regardless of which
                         ;;endpoint is the starting point. This aspect of it is
                         ;;mildly undesirable when system slow, may fix eventually.
                         (SETQ FROM-X-FIX (PROG1 TO-X-FIX (SETQ TO-X-FIX FROM-X-FIX))
                               FROM-Y-FIX (PROG1 TO-Y-FIX (SETQ TO-Y-FIX FROM-Y-FIX))
                               CHANGE-X-FIX (- CHANGE-X-FIX)
                               CHANGE-Y-FIX (- CHANGE-Y-FIX))))
                  (COND ((= (BITWISE-ANDC UNIT-MASK FROM-Y-FIX)
                            (BITWISE-ANDC UNIT-MASK TO-Y-FIX))
                         ;;If Y coordinates are same for both start & end point,
                         ;;The vector can be approximated as a horizontal line.
                         (EXPR-CALL HORIZONTAL (LSH FROM-X-FIX MINUS-FIX-BITS)
                                               (LSH FROM-Y-FIX MINUS-FIX-BITS)
                                               (LSH TO-X-FIX MINUS-FIX-BITS)))
                        ;;Otherwise off to general line drawer.
                        ((NEARLY-HORIZONTAL-VECTOR
                          FROM-X-FIX FROM-Y-FIX TO-X-FIX TO-Y-FIX
                          (//$ (FLOAT ABS-CHANGE-X) (FLOAT ABS-CHANGE-Y))
                          (COND ((MINUSP CHANGE-Y-FIX) -1.) (1.))))))
                 (T 
                  ;;Y case is similar....
                  (COND ((> FROM-Y-FIX TO-Y-FIX)
                         (SETQ FROM-Y-FIX (PROG1 TO-Y-FIX (SETQ TO-Y-FIX FROM-Y-FIX))
                               FROM-X-FIX (PROG1 TO-X-FIX (SETQ TO-X-FIX FROM-X-FIX))
                               CHANGE-X-FIX (- CHANGE-X-FIX)
                               CHANGE-Y-FIX (- CHANGE-Y-FIX))))
                  (COND ((= (BITWISE-ANDC UNIT-MASK FROM-X-FIX) 
                            (BITWISE-ANDC UNIT-MASK TO-X-FIX))
                         (EXPR-CALL VERTICAL (LSH FROM-X-FIX MINUS-FIX-BITS)
                                             (LSH FROM-Y-FIX MINUS-FIX-BITS)
                                             (LSH TO-Y-FIX MINUS-FIX-BITS)))
                        ((NEARLY-VERTICAL-VECTOR
                          FROM-X-FIX FROM-Y-FIX TO-X-FIX TO-Y-FIX
                          (//$ (FLOAT ABS-CHANGE-Y) (FLOAT ABS-CHANGE-X)) 
                          (COND ((MINUSP CHANGE-X-FIX) -1.) (1.))))))))))

(DEFUN NEARLY-HORIZONTAL-VECTOR (FROM-X-FIX FROM-Y-FIX TO-X-FIX TO-Y-FIX SLOPE SIGN-Y)
       ;;Vectors which are approximately horizontal [X change exceeds Y change].
       (LET ((FROM-X (LSH FROM-X-FIX MINUS-FIX-BITS))
             (FROM-Y (LSH FROM-Y-FIX MINUS-FIX-BITS))
             (TO-X (LSH TO-X-FIX MINUS-FIX-BITS))
             (TO-Y (LSH TO-Y-FIX MINUS-FIX-BITS))
             (FROM-Y-FRAC (BITWISE-AND UNIT-MASK FROM-Y-FIX)))
            ;;These four variables are TV coordinates of the endpoints.
            (LET ((PARTIAL-STEP
                   (FIXIFY (*$ SLOPE 
                               (//$ (FLOAT (COND ((MINUSP SIGN-Y) FROM-Y-FRAC)
                                                 ((- UNIT-BIT FROM-Y-FRAC))))
                                    FLOAT-UNIT)))))
                 ;;First and last steps computed separately, since involve
                 ;;fractional Y stepping.
                 (LET ((NEW-FROM-X (LSH (INCREMENT FROM-X-FIX PARTIAL-STEP)
                                        MINUS-FIX-BITS)))
                      ;;Don't go beyond bound of vector.
                      (COND ((> NEW-FROM-X TO-X) (SETQ NEW-FROM-X TO-X)))
                      ;;Draw the horizontal line.
                      (EXPR-CALL HORIZONTAL FROM-X FROM-Y NEW-FROM-X)
                      (SETQ FROM-X NEW-FROM-X)))
            (DO ((TRAVEL-Y (+ FROM-Y SIGN-Y) (+ TRAVEL-Y SIGN-Y)) 
                 (SLOPE-FIX (FIXIFY SLOPE))
                 (NEW-FROM-X))
                ;;Loop for successive additions of 1 Y step. When finished,
                ;;draw line to TO-X.
                ((= TRAVEL-Y TO-Y) (EXPR-CALL HORIZONTAL FROM-X TRAVEL-Y TO-X))
                (COND ((> (SETQ NEW-FROM-X (LSH (INCREMENT FROM-X-FIX SLOPE-FIX)
                                                MINUS-FIX-BITS))
                          TO-X)
                       (SETQ NEW-FROM-X TO-X)))
                (EXPR-CALL HORIZONTAL FROM-X TRAVEL-Y NEW-FROM-X)
                (SETQ FROM-X NEW-FROM-X))))

(DEFUN NEARLY-VERTICAL-VECTOR (FROM-X-FIX FROM-Y-FIX TO-X-FIX TO-Y-FIX SLOPE SIGN-X)
       ;;...As for NEARLY-HORIZONTAL-VECTOR.
       (LET ((FROM-X (LSH FROM-X-FIX MINUS-FIX-BITS))
             (FROM-Y (LSH FROM-Y-FIX MINUS-FIX-BITS))
             (TO-X (LSH TO-X-FIX MINUS-FIX-BITS))
             (TO-Y (LSH TO-Y-FIX MINUS-FIX-BITS))
             (FROM-X-FRAC (BITWISE-AND UNIT-MASK FROM-X-FIX)))
            (LET ((PARTIAL-STEP
                   (FIXIFY (*$ SLOPE 
                               (//$ (FLOAT (COND ((MINUSP SIGN-X) FROM-X-FRAC)
                                                 ((- UNIT-BIT FROM-X-FRAC))))
                                    FLOAT-UNIT)))))
                 (LET ((NEW-FROM-Y 
                        (LSH (INCREMENT FROM-Y-FIX PARTIAL-STEP) MINUS-FIX-BITS)))
                      (COND ((> NEW-FROM-Y TO-Y) (SETQ NEW-FROM-Y TO-Y)))
                      (EXPR-CALL VERTICAL FROM-X FROM-Y NEW-FROM-Y)
                      (SETQ FROM-Y NEW-FROM-Y)))
            (DO ((TRAVEL-X (+ FROM-X SIGN-X) (+ TRAVEL-X SIGN-X)) 
                 (SLOPE-FIX (FIXIFY SLOPE))
                 (NEW-FROM-Y))
                ((= TRAVEL-X TO-X) (EXPR-CALL VERTICAL TRAVEL-X FROM-Y TO-Y))
                (COND ((> (SETQ NEW-FROM-Y 
                                (LSH (INCREMENT FROM-Y-FIX SLOPE-FIX) MINUS-FIX-BITS))
                          TO-Y)
                       (SETQ NEW-FROM-Y TO-Y)))
                (EXPR-CALL VERTICAL TRAVEL-X FROM-Y NEW-FROM-Y)
                (SETQ FROM-Y NEW-FROM-Y))))

