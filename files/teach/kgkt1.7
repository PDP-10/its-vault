(defun poly-subtractor (p1 p2)
       (poly-mult '(-1 0)
		  (append p1 p2)))
(defun take (num arg)
       (do r 1 (+ r 1)
	   (= r num)
	   (setq arg (cdr arg)))
       (car arg))

(defun poly-add (poly1 poly2)
       (setq poly1 (append poly1 poly2)
	     poly2 ()
	     ops ())
       (do m 2 (+ m 2)
	   (= m (length poly1))
	   (cond ((null (member (take m poly1)
				poly2))
		  (append poly2
			  (take m poly1)))))
       (do n 1 (+ n 1)
	   (= n (length poly2))
	   (setq tst (take n poly2))
	   (setq r 0)
	   (do p 2 (+ 2 p)
	       (= p (length poly1))
	       (cond ((= tst (take p poly1))
		      (setq r (+ r (take (// p 2)
					 poly1))))))
	   (append ops (list r tst)))
       ops)


(defun poly-multiply (polya polyb)
       (setq rwk ())
       (do a 2 (+ a 2)
	   (= (length polya) a)
	   (setq b (take (- a 1) polya)
		 c (take a polya))
	   (do d 2 (+ d 2)
	       (= d (length polyb))
	       (setq e (take (-d 1)
			     polyb)
		     f (take d polyb))
	       (cons (* b e)
		     (cons (+ c f)
			   rwk)))))
