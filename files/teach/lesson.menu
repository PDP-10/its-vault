(RECENT) START: TEACH;LESSON RECENT
	Info on recently released lessons (if any).

(1 BASIC) START: TEACH;LESSON INTRO
	Basic lesson. If you're new, start with this lesson.

(2 EVAL) EVAL: TEACH;LESSON EVAL
	A very quick introduction to the Lisp evaluator. Just enough
	to keep you going until we can get you worked up to a more
	sophisticated discussion of what's really going on.

(3 OBJECT) OBJECT: TEACH;LESSON OBJECT
	Information about lisp objects. You need to know about this
	before you can proceed to the other lessons.

(CAR) CAR: TEACH;LESSON 1
	Introduction to the CAR function.

(CDR) CDR: TEACH;LESSON 1
	Introduction to the CDR function.

(DOT) DOT: TEACH;LESSON DOT
	A description of the dotted pair formalism for lisp
	lists. A good way of thinking about CAR, CDR, and CONS. 

(INPUT) INPUT: TEACH;LESSON I/O
	A description of some of the basic lisp input functions:
	READ, TYI, and READCH.

(OUTPUT) OUTPUT: TEACH;LESSON I/O
	A description of some of the basic Lisp output functions:
	PRINC, PRIN1, PRINT, TYO, TERPRI, FLATC, and FLATSIZE.

(COND) COND: TEACH;LESSON PRED
	Lesson on predicates and conditionals.

(MEMQ MEMBER) MEM: TEACH;LESSON SEARCH
	Lesson on how to check for membership of elements in a list
	using the functions MEMQ and MEMBER.

(ASSQ ASSOC) ASS: TEACH;LESSON SEARCH
	Lesson on how to make Association lists and how to find 
	info in them using ASSQ and ASSOC.

(PRED) START: TEACH;LESSON PRED
	Lesson on predicates and conditionals.

(REFRESHER REFRESH) START: TEACH;LESSON REFRESH
	A shorter version of lesson 1.
	Use if you forgot something.

(DEFUN) START: TEACH;LESSON DEFUN
	Lesson on use of DEFUN and various function types
	(how to write your own "magic" functions which 
	don't eval their arguments; how to write functions 
	which take variable number of args)

(PROGN) PROGN: TEACH;LESSON PROGS
	Lesson on what PROGN does and how/why it came into
	being in the first place.

(PROG2) PROG2: TEACH;LESSON PROGS
	Lesson on what PROG2 is and how to use it. Gives an
	example of how to implement stack operations PUSH and
	POP in lisp.

(PROG) PROG: TEACH;LESSON PROGS
	Lesson on the MacLISP PROG statement (which allows
	explicit GOTO's, RETURN's, and statement labels). 
	Former FORTRAN hackers are encouraged not to program
	with PROG until they have learned the more elegant
	constructs available (by which time hopefully they
	won't want to use PROG).

(DO) DO: TEACH;LESSON DO
	A lesson in how to use the MacLISP iteration 
	primitive: DO.

(LAMBDA) LAMBDA: TEACH;LESSON LAMBDA
	Advanced lesson: What is the magic thing called LAMBDA?

(TRACE) TRACE: TEACH;LESSON TRACE
	Advanced lesson: How to use the Lisp TRACE package to
	debug your programs.

(EMACS) START: DSK:TEACH;LESSON EMACS
	Lesson on how to use and find out about EMACS.
	(Warning: You may find that you don't want to
	 use EMACS if you don't have a display terminal.
	 Look for a lesson in TECO at some later time.)

(FUNNY-LISP) START: TEACH;CENSUS DOC
	Documentation on the :TEACH;LISP program.

(FIB FACT) FIB: TEACH;LESSON FIB
	Lesson on defining functions using fibonacci and 
	factorial as examples.

(HELP) START: TEACH;LESSON HELP
	How to use :TEACH;LISP

(SETQ) SETQ: TEACH;LESSON SETQ
	How to use the SETQ function to give variables values.

