Closures - An Oversimplified View		KMP, 7 Apr 80

A closure is a lambda that remembers the environment in which it was
created. In ULisp, a closure is created by the function close-it.

(close-it (lambda ...)) returns a closure. Currently, closures print as
  (closure (lambda ...) closure_environment) and have 2 components --
  a lambda, and an environment which was the value that would have been
  returned by (getal) at the time of the closure's creation.

To invoke a closure, just use it as a function. eg,

(setq y 4)
(setq my-fun (close-it (lambda (x) (+ x y))))

Note that lambda-expressions evaluate to themselves in ULisp. So if you say
then 

(my-fun 3)

you should get back 7. Even if you do

((lambda (y) (my-fun y)) 3)

you should still get back 7. This is because after the evaluation of
the arguments to y but before the closure which is the value of my-fun
gets invoked, the environment in which the closure was created is
resumed so the binding of y to 3 disappears for a while.

