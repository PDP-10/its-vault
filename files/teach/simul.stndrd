-*- TEXT -*-

Standards for use of ENTITYs

1)  It should take 5 arguments.  The first argument will be bound to itself,
    the second would be the operation, and the remaining three will be data
    that each operation can interpret as it will.  The arguments may be unbound
    if E-CALL was called with fewer than 5 arguments.  Obviously, the first two
    arguments are REQUIRED.
2)  EVERY handler must handle the operation WHICH-OPERATIONS, which returns a
    list of all operations the handler handles, EXCLUSIVE of WHICH-OPERATIONS
3)  Every handler should have a T clause that catches unknown operations.
    This should be reported with:
    (UNKNOWN-OPERATIONS <entity> <operation>
			<dat1> <dat2> <dat3> [<optional text>])
4)  Every ENTITY type should have a creation function.  I.e. CREATE-FOOBAR
    This may take any number of arguments you think are relevant.  # of
    inputs is entirely dependant on what kind of info is needed in creating
    one.  For example, a NAND gate might need # of inputs, delay time,
    device #, package #, gate # in package, and a function-name.  Note that
    several of these are for user-interface purposes only....
5)  Where possibly meaningful, creation functions should include
    human-meaningful names.
6)  The items closed over in the ENTITY frob must be declared special.
7)  The creation function can call an INIT operation on the newly created
    entity, or it do all the setup work itself.  If it calls an INIT operation
    it should generally be doable at any later time, but this is not a
    requirement.
8)  The operation PRINT-SELF, if it exists, will at some future point be
    invoked by the structure-printer when it goes to print a STRUCT.  
9)  Operations should be reasonably named.
10) Always include in the comments how many arguments each operation of an
    ENTITY expects.
11) Don't give PNAMEs of garbage to entities created by code.  If you have
    nothing better to give it, give it NIL!  Maybe better would be to write
    a PRINT-SELF operation that tries to do something meaningful.
12) Wherever possible, every separate ENTITY should print differently.
13) As consistant with good readability, the # of vars an ENTITY is closed over
    should be minimized.  Readability first, however; this is only a minor
    efficiency issue.
14) The operations in a handler should be distinguished by a CASEQ.
15) The operations a handler performs should be detailed in the source comments
    immediately before the function.  These comments should be less than a
    screenful long, so that M-. will display them properly.  Comments should
    also go inside the function, but complete documentation is quite useful in
    a centralized place, and since TAGS will find a given function trivially,
    displaying the comments immediately prior, this should be adaquate.  Every
    file should have comments listing the functions contained, however...
16) "Released" files should be stored on TEACH;.  There should be every
    reasonable attempt to test these before-hand.  Development files should be
    kept wherever convenient, but not on TEACH;.  Released does not necessarily
    mean finished, merely "Operable to some level of performance" such that
    some use can be made of them.
17) Standards files should be kept on TEACH;.  Any changes to these should be
    announced to the group as a whole (Mail to SIMUL)
18) I (RWK) will be responsible for correlating all this stuff.  I.e. I will
    play JPG's role WRT release checkout, bug-verification etc.
