1)  [TAKE] You do (Do T ....).  Don't try to give T a value!  (it is
	   opposite of NIL and is reserved!  I substituted TT for T
2)  [POLY-ADD]  I don't understand why POLY-ADD only takes one argument.
3)  [POLY-ADD]	POLY-ADD gets NIL not numeric in (= V X), but then I'm not
		sure what's going on yet, so can't debug it yet.
4)  [POLY-SUBTRACT]  Same as POLY-ADD
5)  [POLY-MULTIPLY]  Dies because POLY-ADD dies.
6)  [ALL]  The representation could perhaps be done differently.  From an
	   efficiency point of view, there is nothing wrong with alternating
	   lists, but from an aesthetic point of view, I hate them, you can't
	   just look at one and see which is which.  If instead of
	   (coef expon coef expon coef expon) you used
	   ((expon . coef) (expon . coef) (expon . coef)) several advantages
	   are obtained.  One is readability.  Another is that you can do an
	   ASSOC to find a given term, I.e. to find the constant term one might
	   do (ASSOC 0 poly).  Another is that instead of DO, you can use
	   MAPCAR (See appendix 1), like
	   (defun POLY-MULT (poly1 poly2)
		  (MAPCAR '(lambda (term)
				   (mult-term term poly1))
			  poly2))
	   will apply MULT-TERM to each term of POLY2 against POLY1.  MULT-TERM
	   can then multiply one term times one polynomial.  MULT-TERM can be
	   easily defined in terms of MAPCAR, can you write it?  See also
	   appendix 2 on Data structures.
7)  [ALL]  You should comment your code more thoroughly, it will help me a lot
	   in figuring out what you mean.
8)  [ALL]  You use global SETQ's for local purposes.  See appendix 3 on
	   locality/propogation of errors.
