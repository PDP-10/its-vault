RWK@MIT-MC 06/10/77 16:28:45
To: LISP-STUDENTS at MIT-MC
I have gotten the problems with lesson straightened out.  There are now several
versions of the first lesson.  type (lesson ?) for details (some of the lessons
listed do not yet exist, but it will tell you if you try them.  they are
comeing soon)  I'd appreciate any feedback on the new formats of the new
versions (like what shouldn't have been deleted or should have in the refresher
lesson, etc.)

(setq Thanks t)

RWK@MIT-MC 06/12/77 09:21:09
To: LISP-STUDENTS at MIT-MC
lesson 2 now exists (although it is not quite complete)  Lessons now
may have sub-lessons, for example (lesson COND) is a sublesson to
(lesson pred) which is the same as (lesson 2)
note that the lessons now try to have memonic names.
(lesson ?) gives a list of lessons.  they are not guarenteed to all
be ready, but it at least knows they are the right names, it will tell
you to bug me to finish them (or maybe that there is a bug if a sub-lesson
doesn't exist)

have fun....

RWK@MIT-MC 06/13/77 12:10:32 Re: LISP
To: STEVER at MIT-MC, RWK at MIT-MC, TEACH at MIT-MC
CC: STUDENT at MIT-MC

TEACH was not a valid person to mail to before.  It is now but only because I
did something about it.

Also, telling MAIL that you were A STUDENT almost caused you to not get this
reply, since I use a program to figure out who to reply to.  You would not
have gotten the mail send to A STUDENT.  The purpose of that feature is that
if you are logged in as someone else or if you use someone else's terminal to
mail a note then you use it so the reply will go to the right person.  You
probably don't have any use for it at all.

But as for the DEFUN lesson, it will be coming as soon as I finish the PRED
lesson.  There are still a few more predicates to be discussed like GREATERP
and LESSP etc.  But this should be done soon, and the DEFUN lesson should
be here in a few days.  The long delay between the first two lessons was
because I had to upgrade the program to allow you to get partial lessons since
lessons were too long to print out if you only wanted the last part.  However,
that is now added so I should be coming out with new lessons fairly regularly.

Have fun...

RWK@MIT-MC 06/13/77 12:10:32 Re: LISP
To: STEVER at MIT-MC, RWK at MIT-MC, TEACH at MIT-MC
CC: STUDENT at MIT-MC

TEACH was not a valid person to mail to before.  It is now but only because I
did something about it.

Also, telling MAIL that you were A STUDENT almost caused you to not get this
reply, since I use a program to figure out who to reply to.  You would not
have gotten the mail send to A STUDENT.  The purpose of that feature is that
if you are logged in as someone else or if you use someone else's terminal to
mail a note then you use it so the reply will go to the right person.  You
probably don't have any use for it at all.

But as for the DEFUN lesson, it will be coming as soon as I finish the PRED
lesson.  There are still a few more predicates to be discussed like GREATERP
and LESSP etc.  But this should be done soon, and the DEFUN lesson should
be here in a few days.  The long delay between the first two lessons was
because I had to upgrade the program to allow you to get partial lessons since
lessons were too long to print out if you only wanted the last part.  However,
that is now added so I should be coming out with new lessons fairly regularly.

Have fun...

RWK@MIT-MC 06/13/77 12:57:29 Re:  atoms
To: MACRAK at MIT-MC
CC: TEACH at MIT-MC

Very good.  I think the essential point I was trying to convey with "variable"
is the uniqueness, of which much more powerful use is made than in Fortran and 
most other languages.  I think now that a good explanation of ATOMS is the key
to a good explanation of EQ, which until now I didn't have much of any idea on
how to present.  But if it is made clear that every occurance of an atom is EQ
and thusly every occurance of everything derived from an atom, such as it's
value, is EQ, but that typing in a LIST gives you a different EQUAL list every
time.  I think that the presentation could be given pretty much complete at
the time EQ is presented (or rather just before), and that the initial
presentation of atoms could be along the lines of "unique symbol" which may be
given a value.  I haven't yet re-written my first lesson along these lines, but
I intend to eliminate SETQ altogether (or rather excise it and rewrite it for
a later lesson).

As for the self-quoting LAMBDA macro, I have long used such a macro for my own
purposes, I fully agree that it makes things much simpler.  The only problem is
how to tell them that MACLISP isn't that nice about it, that LAMBDA is only
valid in an APPLY context, not as an EVAL function name.  It has always seemed
more than a little inconsistent to me.  I.e. the problem is how to break
them into the harsh realities of the real world when they are ready to enter
it.  But I shall use it initially at least.

RWK@MIT-MC 07/02/77 10:32:45 Re: How to learn about EMACS...With a minimum of pain
To: LISP-STUDENTS at MIT-MC, (FILE [MC:RWK;EMACS LESSON]) at MIT-MC
do the following....
E^K
^XI
and you will be in the info system in EMACS, It will explain how to use it
you should then use it to learn EMACS.  breifly, the commands you need to
use in EMACS to start with are
^X^R read file...It asks for file names, to be ended with a <CR>
^X^W write file
<rubout> delete a char to the left
^D delete a char fowards
^L display the previous line and the current one with a -!- at the current
   location, and then redisplay the current line up to the currsor (current
   location)
^N move down a line
^P move up a line
^U do the next thing 4 times.  ^U^U means 16, ^U^U^U means 64...
   ^U5 means 5, ^U90 means 90, thus ^U^N moves you down 4 lines, ^U7^N 7 lines.
^F moves forward 1 character
^B, same as backspace, moves back one space
^K kill everything from cursor to end of line.  kill <CR> if nothing left on
   line to kill
^Y get back last thing killed
^S search.  takes an argument terminated by a $ searches for as much as you
   have typed in, and beeps if you type in something that isn't there.  ^R
  searches backwards.  ^S or ^R if repeated in the middle of a search repeat
  the search for what has been typed in up to now.
^E  goes to the end of a line
^A  goes to the beginning.
^W  kill region.  a slightly more advance command.  can be recovered from
    with ^Y, just like ^K can.


EMACS uses a 9 bit character set, but your terminal (and mine here) can send
   only 7 bits.  so EMACS provides certain prefix characters to allow us to
   use commands which are on characters which our keyboards don't have.
   These characters are called Control character (some of which we have, like
   letters, but we don't have Control-? (C-?) for example) Meta-Characters
   (which we don't have at all...) and Control-Meta characters (M- and C-M- )
Escape is the prefix for meta as is ^\  ^^ is the prefix for control, but
if the control key works for a given character, use it.  ^C is the prefix
for C-M-  Thus $F means M-F and moves forward a word rather than a char.
C-M-F moves foward a LISP list.  these work for the ^F, ^B, ^K and <delete>
commands, ie M-<delete> deletes the word to the left of the cursor.

C-? followed by a character (including it's prefix char, if needed) tells you
    what a character does.

Antoher useful command is M-altmode (M-Escape) which runs a "mini-buffer"
If you know teco, you can type M-alt and then teco commands, then alt-alt
(just like in TECO) and the teco commands will be executed.  This is because
EMACS is TECO, with a bunch of TECO macros added, and set up to act right away
when you type a character.

another usefull command, which runs a minibuffer is M-X  Meta-X sets up
a minibuffer with MM already in it.  This is useful for a wide variety
of commands which are not on a given character, and which have longer
names.  The most useful of these is MM APROPOS$<string>$$ which
looks to see what EMACS knows about <string>  thus I can type
M-X APROPOS$delete$$ and it will print out all commands which have to
do with deleteing. M-X APROPOS$file$$ will print out everything which
does things with files (or at least which has the string FILE in it's long
name.  All commands have a long name, even if they are normally run by typing
a character.)


RWK@MIT-MC 07/03/77 19:00:39
To: LISP-STUDENTS at MIT-MC
The bug where it would only print out the first part of a lesson and and not
respond to control-a has been fixed.  Sorry if any of you tried it while it was
in this state.

RWK@MIT-MC 07/04/77 07:00:34
To: LISP-STUDENTS at MIT-MC
To send mail to me about my program, please send it to TEACHER (or TEACH)
This will cause it to go to a special mail file, among other things.  Don't
worry if you forget it, I'll still get it and will send it there myself.

JPG, DAS, RL: Do you want to be on the TEACHER mailing list?

RWK@MIT-MC 07/05/77 19:33:31
To: BUD at MIT-MC
CC: TEACHER at MIT-MC

    BUD@MIT-MC 07/05/77 11:12:17
    To: RWK at MIT-MC
    CC: BUD at MIT-MC, DAS at MIT-MC

    Just went through the first lesson. I liked it a lot, but I think it is
    not suitable for rank beginners. I guess, in the long run, you will be the 
    one to make that judgment. 

Well, I am in the process of re-writing some of it.  I haven't been able to
spend as much time on it as I have hoped.  However, remember that it is not
designed to substitute for true human interaction!

But I have strong objections to the idea that I'm the one to make that
judgement in the long run.....That's what I feel is wrong with many professors
here.  I feel that it is the STUDENT who is the only one who can make that
judgement, of whether a course is accomplishing what he desires.  So DO give me
that type of feedback!

    At the end of my run, i looked into the file rwk;studnt bud and saw very 
    little there. 
    [1] should there have been a copy of the whole interaction in that file?
    [2] If so, could my doing a ^z in order to respond to a message from another
         user screwed up your record-keeping? ('cause that's what I did).

Due to a certain LISP screwup, the character ^C get's inserted at certain
places.  :PRINT from DDT stops when ^C is found (under old ITS's ^C used to
indecate the end of the file).  But TECO is smarter, and the entire file can be
read into TECO and the ^C's deleted.  (which I do periodically, if you look
again, your interaction will be visible from DDT.



RL@MIT-MC 07/06/77 22:29:26
To: RWK at MIT-MC, LISP-STUDENTS at MIT-MC
In reply to your note -- it would be just fine if you put my name 
on TEACHER mailing list.

RWK@MIT-MC 07/06/77 23:15:38
To: BUD at MIT-MC
CC: TEACHER at MIT-MC
I see you have discovered disembodied property lists.  Do you understand about
normal ones?  If not, let me know.

I also see you encountered a circular list with the aid of NCONC.  Do you
understand how it came to be?  Do you understand the difference between
NCONC and APPEND?

I don't want to explain things you already know, But I do want to make sure
that you DO know them, so let me know.

Bob Kerns

RWK@MIT-MC 07/06/77 23:31:46
To: SMF at MIT-MC
CC: TEACHER at MIT-MC
I see you have run lesson 1.  Did you get what //, \ etc do?

I've been told it is a little obscure and confusing; I'll change it.
(// is divide, and \ is remainder)
(// is really / but the character / means take the next char literaly as itself
not as something else (like /a is lower case, while just a is an uppercase A)
so it takes a / to read in a / as a /.....)

SOPHIE@MIT-MC 07/07/77 23:43:37
To: TEACHER at MIT-MC
when at the begining of the lesson it says who is here
..how do these people respond to help calls.do they come on-line
or thru the mail??          sophie

RWK@MIT-MC 07/07/77 23:50:21
To: SOPHIE at MIT-MC
CC: TEACHER at MIT-MC
I can't use underlining instead of CAPS since that won't work on my terminal.
If you have any ideas that may help, just let me know.  I may try out using
{ and } to delimit examples.

As for the LISP notification, what happens is this:
When you start running my LISP, it sends a message:
Here is student SOPHIE using FUNNY-LISP
to everyone it tells you is online.  When you use the HELP command, it
sends a message
REQUEST FOR HELP FROM STUDENT SOPHIE
To some of the people who are on-line, according to a priority list.
It will repeat this every few minutes adding more people from lower on the
priority list until someone runs a program on my directory (called YES) which
tells your LISP to stop and print out:
RESPONSE TO REQUEST FOR HELP FROM RWK
(I gotta change that to RESPONSE FROM RWK TO REQUEST FOR HELP....I was rather
sleepy when I wrote THAT!)
He then replys however he feels apropriate, usually by spying on you
to see what the trouble is, then linking.


RWK@MIT-MC 07/07/77 23:57:02
To: SOPIE at MIT-MC
CC: TEACHER at MIT-MC
OK, I'll change it to read
REQUEST FOR HELP NOTED BY RWK
Better?

SOPHIE@MIT-MC 07/08/77 00:06:00
To: TEACHER at MIT-MC
it is not to the message itself that i was addressing my
question but a warning to the student should be included as to what to expect
as far as help. what happened was last night i got so bleary eyed
i got confused at one point so i typed help...message came it is straightened out ...i got a lecture on it today from bud
ithis was to answer your message...back to my previous gripe
as to expectations ....<request for help....>i didn't know whether
to wait or go on...i waited nothing happened so i went on...

SOPHIE@MIT-MC 07/08/77 00:08:51
To: TEACHER at MIT-MC
i think it was rl...it also happened when das was on once too

SOPHIE@MIT-MC 07/08/77 01:01:59
To: TEACHER at MIT-MC
look in your text the last expression for defun is i think wrong
(defun (a b)...etc there is no defined name for this function
bye the way i like your lessons but for someone like me who had no
background it took some getting use to ...i guess overcoming initia
l fear ...but so far so good i am enjoying this..in yourtext on cons remind 
to use setq before they try the example (i got stuck)not
after as it reads.

RWK@MIT-MC 07/08/77 06:27:03
To: LISP-STUDENTS at MIT-MC
There is a new version of lesson 1 written.  Most notable feature is that it
doesn't talk about SETQ.  SETQ is actually a rather confusion causing function
which is best used in a limited fasion.  It has been moved to a seperate lesson
called lesson SETQ (oddly enough).

One reason SETQ causes confusion is because it has an effect which is global,
that is, effective everywhere.  A SETQ  can have an effect in a piece of code
quite unintentionally, perhaps a piece of code in an entirely different file.
This can and very often does lead to very obscure and hard to find bugs.  It
also makes the program very hard to read if seting some atom to some value in
one place and using that information in another place.  In general, it is
advisable to only SETQ a variable in one place, or at least in as few places as
possible, unless you are doing something like
(setq foo (cons 'frob foo)) which is not so bad since it doesn't destroy the
old value, merely adds to it.  This still can cause confusion in places,
though.

Another lesson has been written to give a better idea of how to write programs.
It uses the examples of FIBBONACCI and FACTORIAL.  (I give you the first, and
you figure out the second based on that.)  They are both quite simple, but give
a bit clearer picture of how to make use of the language.  Note that it is
possible to do most things with just LESSON 1 and LESSON PRED.

I will be generating some more advance examples soon, including patern matching
and the tower of hanoi puzzle (wherin we will write a function which will tell
what the next correct move is.)  These were both suggested by students.  If you
have something you'd like to see done, just send a note to TEACHER


Bob Kerns

RWK@MIT-MC 07/08/77 06:30:32
To: NORK at MIT-MC, TEACHER at MIT-MC

    NORK@MIT-MC 07/07/77 04:03:01
    To: RWK at MIT-MC
    Please, kind sir, will you write the lesson on defining functions??
    (it's called 'defun')

    		thank you for your cooperation in this area,
    				sincerely yours,

    						tom 'nork'
It isn't a lesson on defining functions, per se, it's to be a lesson on the
DEFUN function and on the different types of functions.  Try lesson FIB.


Also, please send this type of mail to TEACHER@MC, since I am not the only one
who reads such things (I have some "assistants" who help people from time to
time, and they like to keep up on what's happening with people.)


NORK@MIT-MC 07/10/77 03:42:06
To: RWK at MIT-MC, TEACHER at MIT-MC
Ok, so lessons funny-lisp, defun have to be written...
but rwk;ts lisp doesn't even know that there is a lesson called emacs...
mayhaps, you should tell it that it exists but is not written...

nork at mit-ml

RWK@MIT-MC 07/10/77 03:59:11
To: NORK at MIT-MC, TEACHER at MIT-MC

    NORK@MIT-MC 07/10/77 03:42:06
    To: RWK at MIT-MC, TEACHER at MIT-MC
    Ok, so lessons funny-lisp, defun have to be written...
    but rwk;ts lisp doesn't even know that there is a lesson called emacs...
    mayhaps, you should tell it that it exists but is not written...

    nork at mit-ml
Oops, it exists, I just forgot to tell it about it...

NORK@MIT-MC 07/10/77 04:01:28
To: TEACHER at MIT-MC
in LISP if you define  a function(e.g., foo) and then make a typo
(e.g., foo<space>), will the function lose it's defined
value??  (apparntly this is the case because it just happened)

NORK@MIT-MC 07/10/77 04:49:38
To: TEACHER at MIT-MC
there is a typo in line two of lesson fib..
it says"... The first example we shall use if fibonacci."
this is not english as i know it..  i think that "if" should be replaced
with "is" so thatpeople don't have to think too hard to figure it out...

NORK@MIT-MC 07/10/77 06:33:04
To: TEACHER at MIT-MC
in section three of lesson 1, i found it sunfusing the first time through.
it seemed to me that "this-stuff" was something that typed out everything from
this through to stuff, and not the "name" of the list(i.e., a atom that
was setq'ed to the value of the list)...
also, before running this lesson, my jog got "hung" and i was unable to reenter
where i had left off(by using $p) so i used $g.  i hope that i
didn't screw up anything by doing this...		nork

NORK@MIT-MC 07/10/77 06:58:12
To: TEACHER at MIT-MC
why does lesson basic start up when i type control-a when not in a lesson??
also occurs when i do control-g control-a while not in a lesson...
is this the 'correct' default?? if yes, please tell me why it is  the 'correct'
default and why not just tell the student that he/she is not in a lesson?
nork at ml

RWK@MIT-MC 07/11/77 11:13:53
To: LISP-STUDENTS at MIT-MC
CC: TEACHER at MIT-MC
The recent bug wherein it didn't know certain lessons, like FIB, PRED,
BASIC etc. has been fixed.


MIKE@MIT-MC 07/12/77 10:08:23
To: TEACHER at MIT-MC
Besides having (lesson ?) for a list and description of the
available lessons, how about having something like (lesson ??)
that will give a short list of the lessons , that is, just
the names without the descriptions for people who have already
done (lesson ?) and just want to find which lessons they have
yet to do??
(Also, it is less tedious to print out more than once especially
when the list becomes long!)

Date: 17 JUL 1977 0226-EDT
From: RWK at MIT-MC (Robert W. Kerns)
To: NORK at MIT-MC
CC: TEACHER at MIT-MC

I see you asked in my LISP what the purpose of QUOTE is.

Briefly, it is so that when you are evaluating things (which is what LISP
is always doing) you sometimes want some object rather than it's object.
i.e. if FOO has the value BAR and BOO has the value (BAZ HAZ FAZ GAZ)
then (cons foo boo) will get you the value (BAR HAZ FAZ GAZ) while
(cons 'foo boo) will get you the value (FOO HAZ FAZ GAZ).  hence it is
a way of introducing a constant form into an expression.


Date: 17 Jul 1977 0252-EDT
From: HARTA at BBN-TENEXA
Subject: lisp quote
To:   teacher at MIT-MC
cc:   nork at MIT-MC

in the example you gave,  if i said:
(car (cons 'foo boo))
would i get BAR or FOO as a reply?

nork
-------

Date: 17 JUL 1977 0356-EDT
From: RWK at MIT-MC (Robert W. Kerns)
Subject: lisp quote
To: TEACHER at MIT-MC, HARTA at BBN-TENEXA
CC: NORK at MIT-MC


    Date: 17 Jul 1977 0252-EDT
    From: HARTA at BBN-TENEXA
    Subject: lisp quote
    To:   teacher at MIT-MC
    cc:   nork at MIT-MC

    in the example you gave,  if i said:
    (car (cons 'foo boo))
    would i get BAR or FOO as a reply?

    nork
    -------
well, first I mistyped myself.

(BAZ HAZ FAZ GAZ) was the value for BOO
(cons 'foo boo) gives (FOO BAZ HAZ FAZ GAZ), not (FOO HAZ FAS GAZ) as
I miss-tated.  Now, CAR of any list is the first element, so CAR of
(FOO HAS FAS GAZ) is FOO

Note that (CAR '(CONS 'FOO BOO))
is CONS



RWK@MIT-MC 07/17/77 04:06:57
To: TRB at MIT-MC
CC: TEACHER at MIT-MC
OK, I've got a program which is sort of a fancy textbook/programed learning
thing.  It tells you things for a while, then gives you a chance to try
them out to your satisfaction before continuing.  It also keeps a record
of what you do, so that I can observe any problems you have and offer
assistance.  I am working on a tutor to teach the concept of recusion in
LISP, so any use of the program will give me a better idea of what needs to
be done to write an automatic teaching program.

Note that use of my program and being one of my guinea pigs does not
constitue authorization on this system.  Tourists are merely tolerated out
of friendliness (I'm friendly too).  Sometimes they become usefull members
of the ITS community, then they sometimes get hired (like me--I used to
be a tourist).  But you should confine your use of the system to the off hours
since there are people trying to get things done during the day.

To run my program, just type to DDT

:RWK;LISP
and it will do the rest, explaining how to get a program to explain how
to use it and run the lessons.

Any problems or questions may be send to TEACHER

RWK@MIT-MC 07/17/77 11:51:05 Re: some old mail I overlooked
To: MIKE at MIT-MC
CC: TEACHER at MIT-MC

    MIKE@MIT-MC 07/01/77 09:49:08
    To: RWK at MIT-MC
But I didn't run your program yesterday! Maybe someone else loggeas me? Anyway,
how is the thesis doing? And your tutor going alonGood luck (I've been rather
busy recently so I really have playedwuith Lisp too much ).  By the way ,what
are car and cdr and caar and ... of an atom. I
suspect that car of an atom is its address but I am not sure...

the CDR of an atom is the property list, and the CAR is it's value cell
These things are not designed to be accessed via CAR and CDR.  Property lists
are accessed with GET PUTPROP SETPLIST DEFPROP and GETL.  I'll someday
write a lesson on these.  The CAR is useless.  LISP has a mode in which
it won't let you take the CAR and CDR of atoms.  this is the default.
it can also be set to allow them, or to prohibit CAR and CDR of NIL (which
normally returns NIL)


RWK@MIT-MC 07/19/77 18:24:49 Re: Here's the correct data on what the CAR for an atom is.
To: MIKE at MIT-MC
CC: TEACHER at MIT-MC, RZ at MIT-MC, MACRAK at MIT-MC

    RZ@MIT-MC 07/18/77 03:04:16
    To: RWK at MIT-MC
    The cdar of an atom is its value cell.  The cddar is its value.
    The caar is used to store its pname and other things. Also
    (1+# (maknum <atom>) is used for other things.


In other words, the CAR of an atom is a two word block, the first word of which
is like a CONS whose CDR is the value cell, and the CAR is the PNAME etc. 
Other things may be found in the next word, but it is a total crock to hack
these things with CAR and CDR, since this is not the normal purpose of CAR and
CDR; it makes your code very confusing to follow, and is generally not
necessary!  The value cell may be accessed using the functions SET, SETQ, and
SYMEVAL (which is just like EVAL but only works on atomic symbols, so it is
faster.)
 

RWK@MIT-MC 07/20/77 02:45:00
To: SPACEY at MIT-MC
CC: TEACHER at MIT-MC

OK, I've got a program which is sort of a fancy textbook/programed learning
thing.  It tells you things for a while, then gives you a chance to try
them out to your satisfaction before continuing.  It also keeps a record
of what you do, so that I can observe any problems you have and offer
assistance.  I am working on a tutor to teach the concept of recusion in
LISP, so any use of the program will give me a better idea of what needs to
be done to write an automatic teaching program.

Note that use of my program and being one of my guinea pigs does not
constitue authorization on this system.  Tourists are merely tolerated out
of friendliness (I'm friendly too).  Sometimes they become usefull members
of the ITS community, then they sometimes get hired (like me--I used to
be a tourist).  But you should confine your use of the system to the off hours
since there are people trying to get things done during the day.

To run my program, just type to DDT

:RWK;LISP
and it will do the rest, explaining how to get a program to explain how
to use it and run the lessons.

Any problems or questions may be send to TEACHER@mc

I'll be glad to answer questions and provide help, but do mail them to TEACHER
so they get to the right places.  

Unfortunately, I don't have very much time this week, so I can't provide as 
much help right now as I'd like, but next week will be much better.


RWK@MIT-MC 07/20/77 04:25:38
To: SAILOR at MIT-MC, TEACHER at MIT-MC

    SAILOR@MIT-MC 07/19/77 19:50:47
    To: RWK at MIT-MC
    THIS IS CONCERNING YOUR LISP TEACHER
    A) HOW DO YOU GET OUT OF IT (OTHER THAN ^Z)

As is stated in lesson BASIC, you type:
DONE
if you are done.  Otherwise ^Z is the standard method of getting out
of programs
    B) I TRIED THE FACT FUNCTION BUT IT SOMEHOW DIDN'T WORK

That's because you typed a bunch of garbage backspaces in the middle of your
function definition.  You MUST learn that line-feeds and backspaces are not
nice!  people on displays (like me) lose totally with them.  (I had to flush a
line-feed and a couple of backspaces from your note!)  And LISP just
interpreted them as another random character to make into an atom, just like
any other char.

Give it another try without the losing backspaces!
Use delete to get rid of a character (including spaces) you didn't want.  Use a
charaige return and TABS and SPACES to get to wherever on the next line.

    C) HOW DO YOU LIST YOUR FUNCTIONS?

Do (GRINDEF FOO) to get a nice listing of your function FOO.  My functions are
compiled, so they are not printable.

    D) I LIKE THE TEACHING PROGRAM VERY MUCH  WHEN WILL YOU COMPLETE
        FUNNY-LISP?

It will probably never be completely complete.  I hope to write a few more
lessons next week.  I also hope to get started on my TUTOR next week.  (The
tutor will be a much more intellegent program, it will try to analyze the
programs you give it some and try to give advice based on what you do.  It will
be a LONG time before THAT is done!)




RWK@MIT-MC 07/20/77 04:49:32 Re: FACT function
To: SAILOR at MIT-MC
CC: TEACHER at MIT-MC

Ignoreing the backspaces, there are three other bug in your FACT program,
probably a typos (but typo's count with computers!):

(Defun FACT (N)
       (COND ((= N 0) 1)
	     ((= N 1) )  ; there should be a 1 before this right-parenthesis
	     (* N (FACT (-1 N)))))) ; the name of the function is 1-, not -1
				    ; -1 is negative-1, not an atomic symbol
				    ; and only atomic symbols can be function
                                    ; names.
This is essentially the function you wrote minus the garbage ^H's. (that's
what a backspace looks like on a display)  everything from a ";" to the end
of the line is  comment, not part of the program.

so what you wanted to type was:

(d fact (n)
   (cond ((= n 0) 1)
	 ((= n 1) 1)
	 (t (* n (fact (1- n))))))

Or maybe the equivalent
(d fact (n)
   (cond ((= n 0) 1)
	 (t (* n (fact (1- n))))))

(do you see why they are equivalent?)
Your third bug is:  in the form you wrote, it FACT is not 1 or 0, none of
the predicates in the COND will ever be true!  So it will get down to the last
clause, which is not a predicate, really, and return it's value.  It will find
the thing in the predicate position is the atom * which is defined to have a
special value (the last thing printed out at top level (that doesn't mean in
error breaks in my LISP yet).)  That is probably not nil, so the clause will
probably be executed.  The next form to be evaled is N.  That value will then
be thrown away, since there is yet another item in that COND clause: 
(fact (1- n)).  So there are things which it could do, it could return
NIL, or 1

Note that both of the functions given above come close to looking like your
function.  So I'm not quite sure whether your parenthisis are unbalenced and
you didn't see the problem with the ((= n 1) .. ) not working as the last
clause, or if you really intended it to look kind of liek the first or second
example, but forgot the (t ....) around the (* n (fact (1- n))) ?

Anyway, give it another try and good luck!

SOPHIE@MIT-MC 08/01/77 21:26:01
To: TEACHER at MIT-MC
in your lesson list please include a sequence to follow say lesson pred after lesson car   i get confused and dont know which i should do next...i would find it helpful ...thanks

RWK@MIT-MC 08/13/77 08:53:55
To: AK at MIT-MC
CC: TEACHER at MIT-MC

OK, I've got a program which is sort of a fancy textbook/programed learning
thing.  It tells you things for a while, then gives you a chance to try
them out to your satisfaction before continuing.  It also keeps a record
of what you do, so that I can observe any problems you have and offer
assistance.  I am working on a tutor to teach the concept of recusion in
LISP, so any use of the program will give me a better idea of what needs to
be done to write an automatic teaching program.

Note that use of my program and being one of my guinea pigs does not
constitue authorization on this system.  Tourists are merely tolerated out
of friendliness (I'm friendly too).  Sometimes they become usefull members
of the ITS community, then they sometimes get hired (like me--I used to
be a tourist).  But you should confine your use of the system to the off hours
since there are people trying to get things done during the day.

To run my program, just type to DDT

:RWK;LISP
and it will do the rest, explaining how to get a program to explain how
to use it and run the lessons.

Any problems or questions may be send to TEACHER
^_

Date: 23 AUG 1977 1218-EDT
From: STEVER at MIT-MC (Stephen E. Robbins)
Subject: FUNNY LISP
To: TEACH at MIT-MC

WE REALLY NEED MORE LESSONS!!! I WOULD LIKE TO LEARN LISP VERY MUCH AND I'D LIKE TO HAVE A TEACHER BUT NO NEW LESSONS ARE COMING OUT!!!
WAHHHHHHHHHHHH!!!!!!!!!!!!!!
                          YOURS TRULY,
                               STEVE

RWK@MIT-MC 08/30/77 02:37:43
To: AQE at MIT-MC, TEACHER at MIT-MC

    AQE@MIT-MC 08/29/77 19:29:46
    To: RWK at MIT-MC
    I noticed from :whois that you claim to be able to teach
    anyone LISP.  Well, since I can't meet you in person,
    (I am in Pgh, PA) can you give me some good references.
    Textbooks, writeups,source code... anything.  My
    aim is to implement a LISP interpreter on a microcomputer.
    (Almost certainly an LSI-11)
                                 Many thanks in advance.
                                     Jef

Well, you've gotten off to a bad start, what with not giving us your name at
first etc.  And now I find that you deleted the :BMT1;GAME
program.....But you've changed your INQUIR to be more reasonable, perhaps
you're reforming?

OK, I've got a program which is sort of a fancy textbook/programed learning
thing.  It tells you things for a while, then gives you a chance to try
them out to your satisfaction before continuing.  It also keeps a record
of what you do, so that I can observe any problems you have and offer
assistance.  I am working on a tutor to teach the concept of recusion in
LISP, so any use of the program will give me a better idea of what needs to
be done to write an automatic teaching program.

Note that use of my program and being one of my guinea pigs does not
constitue authorization on this system.  Tourists are merely tolerated out
of friendliness (I'm friendly too).  Sometimes they become usefull members
of the ITS community, then they sometimes get hired (like me--I used to
be a tourist).  But you should confine your use of the system to the off hours
since there are people trying to get things done during the day.

To run my program, just type to DDT

:RWK;LISP
and it will do the rest, explaining how to get a program to explain how
to use it and run the lessons.

Any problems or questions may be sent to TEACHER

RWK@MIT-MC 10/29/77 23:28:31
To: JULES at MIT-MC
CC: TEACHER at MIT-MC

[here's the standard note I send to people who ask about my lisp teaching..
Not everything here applies to everyon...but.....  I am unfortunately rather
busy these days with school and work and so don't have time to be a full-time
teacher to everyone, so...]

OK, I've got a program which is sort of a fancy textbook/programed learning
thing.  It tells you things for a while, then gives you a chance to try
them out to your satisfaction before continuing.  It also keeps a record
of what you do, so that I can observe any problems you have and offer
assistance.  I am working on a tutor to teach the concept of recusion in
LISP, so any use of the program will give me a better idea of what needs to
be done to write an automatic teaching program.

Note that use of my program and being one of my guinea pigs does not
constitue authorization on this system.  Tourists are merely tolerated out
of friendliness (I'm friendly too).  Sometimes they become usefull members
of the ITS community, then they sometimes get hired (like me--I used to
be a tourist).  But you should confine your use of the system to the off hours
since there are people trying to get things done during the day.

To run my program, just type to DDT

:RWK;LISP
and it will do the rest, explaining how to get a program to explain how
to use it and run the lessons.

Any problems or questions may be send to TEACHER
^_


rwk@MIT-MC 11/18/77 01:53:58
To: AK at MIT-MC
CC: TEACHER at MIT-MC

OK, I've got a program which is sort of a fancy textbook/programed learning
thing.  It tells you things for a while, then gives you a chance to try
them out to your satisfaction before continuing.  It also keeps a record
of what you do, so that I can observe any problems you have and offer
assistance.  I am working on a tutor to teach the concept of recusion in
LISP, so any use of the program will give me a better idea of what needs to
be done to write an automatic teaching program.

Note that use of my program and being one of my guinea pigs does not
constitue authorization on this system.  Tourists are merely tolerated out
of friendliness (I'm friendly too).  Sometimes they become usefull members
of the ITS community, then they sometimes get hired (like me--I used to
be a tourist).  But you should confine your use of the system to the off hours
since there are people trying to get things done during the day.

To run my program, just type to DDT

:TEACH;LISP
and it will do the rest, explaining how to get a program to explain how
to use it and run the lessons.

Any problems or questions may be send to TEACHER
^_

SAILOR@MIT-MC 11/19/77 09:25:31
To: TEACH at MIT-MC
PLEASE WRITE LESSON DEFUN.   THANKYOU

LRH@MIT-MC 11/20/77 00:18:31
To: TEACH at MIT-MC
Hi.  I completed all the available lessons.  Know emacs, too.  Now want to
know:
1) If I make a lisp program in some file with emacs, how do I compile it?
2) Can one have external subroutines, or must all the programs be compiled
   in one file?
3) Where do I go from here?

RWK@MIT-MC 11/20/77 23:42:33
To: LRH at MIT-MC, TEACH at MIT-MC

    LRH@MIT-MC 11/20/77 00:18:31
    To: TEACH at MIT-MC
    Hi.  I completed all the available lessons.  Know emacs, too.  Now want to
    know:
    1) If I make a lisp program in some file with emacs, how do I compile it?
Well, first off, it isn't necessary to compile it to run it, you can simply
load it in with the LOAD function:  I.e.

(LOAD '((DSK LRH) FOO BAR))
If you want to compile it, you run the compiler (QNCOMPL) by saying

:QN LRH;FOO BAR (FKT)

The switches in the parentises are F-make a FASL file K-Kill the LAP file
and  D - run disowned   T-Type out notes to the TTY. U-produce an unfasl file
and several others (see the LISP manual when it comes out).

Note that there are a few incompatibilities between uncompiled and compiled
LISP.  One is that in interpreted (uncompiled), all variables are of the type
known as "special".  In compiled code, the default is that they be "unspecial",
that is, that they have meaning only in that function.  This means that a
function FOO can't bind variable VAR and call BAZ which uses BAR, and expect
BAZ to use the right BAR.  To get the right effect (that of the interpreter's
type of variable) on the variables BAR, FISH, APPLE, do the following:

(DECLARE (SPECIAL BAR FISH APPLE))

at top level in your file.  This statement does nothing in the interpreter, but
it tells the compiler that you want the interpreter's type of var in those
cases.

    2) Can one have external subroutines, or must all the programs be compiled
       in one file?
Yes, one can have things split up into as many files as needed.  If you use
an external FEXPR or LEXPR, they should be declared in the file that they are
used in as follows:
(DECLARE (*LEXPR FOO BAR BAZ)
	 (*FEXPR FISH APPLE BICYCLE))
This is so that the compiler knows to compile calls to them correctly.  (It
assumes that things are the normal "EXPR" type.  If you don't know about
LEXPR's and FEXPR's and EXPR's (which become LSUBR's and FSUBR's and LSUBR's
when compiled) tthat's because I haven't written lesson DEFUN yet.  I guess I
should do so real soon.

    3) Where do I go from here?
Where do you want to go?  Clearly I should write some more lessons.  I will by
thanksgiving weekend (I'm not going home or anything...).  And you might start
looking at real code.  I'll try to send you some more ideas soon.


ZIGGY@MIT-MC 12/08/77 06:02:34
To: TEACH at MIT-MC
Nork has volunteered to write a lesson
                           on DEFUN for your lisp teacher
                                        ZIGGY

BIM@MIT-MC 12/14/77 01:05:52
To: TEACH at MIT-MC
Okay, folks, I love the lisp tutorial, but there are several glaring ommissions(at least to those of us
w/out any manuals)....
1) how do you save a function on disk or whatever(restore too)
2) can you edit an already defined function?
Don't take my first sentence too hostilly, please.
		--bim

RWK@MIT-MC 12/29/77 19:47:58
To: RTS at MIT-MC
CC: TEACH at MIT-MC, STEVER at MIT-MC
Here is my standard reply to inquiries about learning LISP:  Sorry I'm too
busy to give you much more.

OK, I've got a program which is sort of a fancy textbook/programed learning
thing.  It tells you things for a while, then gives you a chance to try
them out to your satisfaction before continuing.  It also keeps a record
of what you do, so that I can observe any problems you have and offer
assistance.  I am working on a tutor to teach the concept of recusion in
LISP, so any use of the program will give me a better idea of what needs to
be done to write an automatic teaching program.

Note that use of my program and being one of my guinea pigs does not
constitue authorization on this system.  Tourists are merely tolerated out
of friendliness (I'm friendly too).  Sometimes they become usefull members
of the ITS community, then they sometimes get hired (like me--I used to
be a tourist).  But you should confine your use of the system to the off hours
since there are people trying to get things done during the day.

To run my program, just type to DDT

:TEACH;LISP
and it will do the rest, explaining how to get a program to explain how
to use it and run the lessons.

There is also a command "DESCRIBE" which describes a lisp function.  To get a
description of how to use it, do (DESCRIBE).  Similarly there is a function
APROPOS which takes part of the name of a LISP function and does describe on
LISP functions which contain that part of a name in their name. 
(LIST-ALL-NODES) will print out all legal arguments to DESCRIBE. 

Any problems or questions may be send to TEACHER

RWK@MIT-MC 12/29/77 21:56:02
To: BUD at MIT-MC
CC: TEACH at MIT-MC
PLUS is a generic operator, meaning that it will work on:
FIXNUMS (ordinary integers)
BIGNUMS (integers with an absolute value > what will fit in a PDP-10 machine
        word) 
FLONUMS (floating point numbers)
and any other types that may be introduced later.
Thus, (EQUAL (CADR EXP) 0)
will not return T if EXP is 0.0 [FLONUM 0].
(ZEROP (CADR EXP)) will work for all occurances of PLUS
BTW, you could change your predicate to check for + as well...
[instead of (EQ (CAR EXP) 'PLUS) do (MEMQ (CAR EXP) '(PLUS +)) ]
[BTW, you should use EQ where appropriate (i.e. if you are not comparing
numbers or list structure (iff you want lists that are identical COPIES of each
other to be similar, or are comparing numbers, use EQUAL]

Similarly, instead of (equal (cadr exp) 1.), to generalize to the degree that
PLUS is generalized, you should use:
(ZEROP (DIFFERENCE (CADR EXP) 1))
which will convert the 1 to 1.0 if needed, and ZEROP will perform the correct
test.

[BTW, you will sometimes see a single "." after a number, with no trailing
digits.  That simply means that it is base 10.  a flonum will always have
trailing digits, I.e. 1. is a FIXNUM, and 1.0 is a flonum]

RWK@MIT-MC 12/29/77 22:02:47 Re: BUDSIMP
To: FRAWLE at MIT-MC, TEACH at MIT-MC
Also, it doesn't recognize the fact that PLUS and SIMP can take any # of
arguments, including 0.
(plus) -> 0
(times) -> 1
perhaps what you want to do is to do
(setq exp (mapcar 'budsimp exp))
(setq exp (delete '0 (delete '0.0 exp)))
for sums and similarly for products, then test for length 1, otherwise
that's your answer...

Question to think about (easy?):  Why should the first expression be done
first? 
(you might well nest them as in:)
(delete 0 (delete 0.0 (mapcar 'budsimp exp)))

RWK@MIT-MC 12/30/77 08:43:12 Re: previous note
To: FRAWLE at MIT-MC
CC: TEACH at MIT-MC
as suggested by JPG:
[1] I used occasionally '0 and '0.0 ... the "'" is not needed, since numbers
evaluate to themselves.  Of course, no harm is done either.
[2] in top level MACSYMA (i.e. the MACSYMA reader, rather than the LISP reader)
2. is the same as 2.0
a ^^ quit in MACSYMA into LISP gets you the LISP reader as well as evaluator.

PHILG@MIT-MC 02/02/78 21:19:37
To: TEACH at MIT-MC
Please write DEFUN!!!!!!!!!!!

RWK@MIT-MC 03/18/78 23:01:54
To: DJBLOG at MIT-ML
CC: TEACH at MIT-MC

OK, I've got a program which is sort of a fancy textbook/programed learning
thing.  It tells you things for a while, then gives you a chance to try
them out to your satisfaction before continuing.  It also keeps a record
of what you do, so that I can observe any problems you have and offer
assistance.  I am working on a tutor to teach the concept of recusion in
LISP, so any use of the program will give me a better idea of what needs to
be done to write an automatic teaching program.

Note that use of my program and being one of my guinea pigs does not
constitue authorization on this system.  Tourists are merely tolerated out
of friendliness (I'm friendly too).  Sometimes they become usefull members
of the ITS community, then they sometimes get hired (like me--I used to
be a tourist).  But you should confine your use of the system to the off hours
since there are people trying to get things done during the day.

To run my program, just type to DDT

:TEACH;LISP
and it will do the rest, explaining how to get a program to explain how
to use it and run the lessons.

There is also a command "DESCRIBE" which describes a lisp function.  To get a
description of how to use it, do (DESCRIBE).  Similarly there is a function
APROPOS which takes part of the name of a LISP function and does describe on
LISP functions which contain that part of a name in their name. 
(LIST-ALL-NODES) will print out all legal arguments to DESCRIBE. 

Any problems or questions may be send to TEACHER

RWK@MIT-MC 06/25/78 08:37:12 Re: :TEACH;YES <uname>
To: TEACH at MIT-MC
When you get a request for help from someone, be sure to run the YES
program, or the program won't know you've decided to help.

(that's for requests for help from the :TEACH;LISP program..., you get

Request for help from FOO

and you do

:TEACH;YES FOO

)

Of course, you may link <your dir>;TS YES to TEACH;TS YES if you wish.

CHRIS@MIT-MC 07/15/78 23:18:42
To: TEACH at MIT-MC
I am trying to learn LISP, and I encountered a problem tonite.
I had some "TEACHing" in the area of DEFUN, but when I went
back to it tonite (to see if I could pick up any thing morw)
it (TEACH;LISP) said that the lesson DEFUN had not been 
written, and to write a message to TEACH.  So, here it is.

CHRIS@MIT-MC 07/15/78 23:20:53
To: TEACH at MIT-MC
Also, after doing "RWK;LISP" I did a (lesson recent)
as directed, ane was informed that there was no such lesson.

CHRIS@MIT-MC 07/21/78 20:34:38
To: TEACH at MIT-MC
Please write (LESSON DEFUN), as it was listed
in the Lesson roster.

RWK,KMP@MIT-MC (Sent by KMP@MIT-MC) 07/28/78 00:47:28 Re: Get 'em while they're hot!
To: LISP-STUDENTS at MIT-MC
Problem Set #1 [The Tower of Hanoi] is now available. You can get yours
 by doing  :PRINT TEACH;PROBLM HANOI
 at DDT. If you have finished all of the Teach lessons, give this one
 a try. We will try to look at your solutions if you really run into
 trouble on something or you find you need to use a function you don't
 know about. Try to give it a decent effort and think it out carefully
 though before you come to us. You will not learn by us telling you the
 answer. Only by racking your brains on it will you learn.

 Other problems will become available in the near future.

 Problem set solutions will also be available eventually, too. Both RWK
 and I have never actually programmed this either, so we'll be going thru
 it blind just like you all. (Almost?)

 Enjoy.

--kmp

Date: 28 JUL 1978 0103-EDT
From: FFM at MIT-MC (Steven J. Kudlak)
Subject: For super hackers!!!!
To: LISP-STUDENTS at MIT-MC

See if your tower runs faster than mine. I have  benchmarked tested
the tower of hanoi as it exists in PRLISP.It would be intersting
to see how fast these hacks run preferably late at night.
I suggest 17 disks AND WILL TELL ANYONE HOW TO FUDGE THE BENCHMARKS
so that system service level interference is  kept to a minimum
in calculating how well you did.

What I am interested in getting is an idea of how much better or worse
PRLISP is in preformence  than regular lisp.If at some time you should
become interested in PRLISP tell me;that long awaited manual I have been
proimising for centuries hawill at last see the light of day soon As
I now have a display editor at home terminal;slow but a display editor
none thje less. 

Have fun  peoples sends steve

Date: 15 April 1979 19:19-EST
From: Lisp Teaching Program <TEACH at MIT-MC>
Subject: Automatic Bug Mail
To: TEACH at MIT-MC

Student KMP tried to use lesson THIS-IS-A-TEST but it hasn't been written.

Date: 16 April 1979 05:58-EST
From: Lisp Teaching Program <TEACH at MIT-MC>
Subject: Automatic Bug Mail
To: TEACH at MIT-MC

Student KMP tried to use lesson CDR but it hasn't been written.

Date: 16 April 1979 05:59-EST
From: Lisp Teaching Program <TEACH at MIT-MC>
Subject: Automatic Bug Mail
To: TEACH at MIT-MC

Student KMP tried to use lesson DEFUN but it hasn't been written.

Date: 16 April 1979 06:07-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACH at MIT-MC

There are in theory no un-implemented lessons in the database, so you
shouldn't get any more of those auto-bug-mail things from TEACH unless
someone deletes something. This is not to say that I wrote a 
LESSON DEFUN (which was the only one missing - LESSON CDR just had a 
typo in where it should be found) - but I put something in the place
where LESSON DEFUN should be so that the program doesn't think it didn't
find anything...

-kmp

Date: 27 May 1979 16:42-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: LISP-STUDENTS at MIT-MC

Several new Lisp lessons have been created, and more are expected to
be created in the near future. These are available through 

	:TEACH;LISP

on MC. Do

	(LESSON RECENT)

when you enter the lisp in order to get an up-to-date list of the 
newly available lessons.

Date: 11 August 1979 16:25-EDT
From: Mark Zimmermann <ZIM at MIT-MC>
Subject: TEACH;LISP
To: KMP at MIT-MC, TEACHER at MIT-MC

Very nice lessons!...just a couple of comments:
lots of spaces (linefeeds) at end of lesson 1 aren't so nice on my printing terminal (I know I should get a CRT, but
     haven't been able to yet)
use of it's consistently in place of its is a bit distracting on occasion, but trivial....
in (lesson dot) first references to 'right half' and 'left half' seem backwards...

again, fine and interesting lessons...I think I've learned a lot--thanks!-Mark

Date: 27 August 1979 21:21-EDT
From: Stephen E. Robbins <STEVER at MIT-MC>
To: TEACH at MIT-MC

I think that I know enough about lisp to know all the LEXPRs
and FEXPRs and SEXPRs and styuff, but could you implement
LESSON DEFUN anyway?

Date: 15 October 1979 05:10-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACHER at MIT-MC

Things to think about for teach lisp
[1] a control-char that backs up one piece of a lesson
[2] handlers for people doing CAR(...) -- a unbound-var-handler
    that tyipeeks for a "(" perhaps?
[3] something to look for ('FOO BAR) instead of '(FOO BAR)
[4] maybe a mandatory and automatic intro to teach lisp to run for
    any new user of the program
[5] something for CAR, CDR, and CONS to look for (CAR (FOO BAR)) and
    (CONS (FOO) (BAR)) etc... people tend to be initially confused about
    what's going to EVAL and what's not -- this is a good place to look
    for errors and get the guy straight quick -- a better thought is a full
    meta-evaluator
[6] Is the message Type <Alt>P<Space> really what we want? Users probably
    never want to be in an error break since they don't know how to recover.
    On the other hand, they should be exposed to the fact that such a thing
    happens... As it is it's hard enuf to tell them about BASE, IBASE, etc
    when they hit the real world.
[7] A lesson REAL-WORLD that explains why real lisp is so confusing.
-kmp

Date: 15 October 1979 05:17-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACHER at MIT-MC

Info on how to map odd books like Let's Talk Lisp, Interlisp Manual, etc.
into MacLISP in some sort of useful way (for people sitting with those
books in front of a TEACH;LISP is probably a good idea.

Date: 15 October 1979 05:26-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACHER at MIT-MC

LESSON HELP should not say to do :RWK;LISP - it should say :TEACH;LISP

Also, we need to rewrite that lesson for mutlix. 

Also, there might oughta be conditional cruft in the lessons for the
different sites? ... and it might even wanna have a swift reader that
downcased the code for us automatically so we don't gotta do it for
losing mutlix.


Date: 16 October 1979 06:30-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACH at MIT-MC

:TEACH;LISP now handles the cases of a 
('function arg1 ... argn) => (function arg1 ... argn)
('randomness ...) => '(randomness ...)
foo(...) => error message
((<non-lambda> ...) ...) => error message
(DEFQ ...), (SELECTQ ...), (DEFINE ...) => diagnostic about lisp differences.
 more such differences are solicited for my table.
-kmp

Date: 16 October 1979 10:33-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACH at MIT-MC

TEACH;LISP also now handles the case

FOO(A,B,...) by binding the comma counter and then looking for comma
objects in the form that gets read ... gives a diagnostic saying to
put spaces between args in addition to the other diagnostic about 
foo being on wrong side of parens.

Note that commas elsewhere still lose, but people using this notation
are high probability of putting commas between args so I think this is 
a good place to look for them specifically. Maybe something more general
later.
-kmp

Date: 2 November 1979 08:54-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACH at MIT-MC

We shouldn't let 'CAR' and 'CDR' as vars work ... maybe have evalhook
trap these if sophisticated user flag isn't set... all this relies
tho' on getting a user-model built that knows when the guy is ready
to try this and win...

Date: 2 November 1979 08:58-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACH at MIT-MC

if we take the bernie approach -- using CAR/CDR first and
not introducing lists at all for a while, we might have
lists display in dotted pair form always ... then introduce
the list display contraction rules and finally let the guy
go ...

Date: 18 December 1979 02:19-EST
From: Robert W. Kerns <RWK at MIT-MC>
To: TEACHER at MIT-MC

Lesson DO goes on and on and on without any interaction!  Clearly we need
a more powerful program to allow us to do something like:

Ok, give me a an example binding form:
  (A)
OK, that will bind A to () the first time through the loop and leave it
alone after that.
Another? (A 1)
OK, that will bind A to 1, and leave it alone after the first time.
Another?  (A 1 (1+ A))
OK, that will bind A to 1 the first time, and then set it to (1+ A) each
time after that.
Another?  No

OK, now give me a sample end test:  ((< A 5))
No, what I mean by an end test is the form to evaulate to get non-null if we
want to continue the loop.  You gave me the entire second part of the DO,
which can include exit forms.  All I wanted this time was the (< A 5).
Try another?  
...

Date: 19 December 1979 03:02-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  teach;lisp
To: CLEMW at MIT-MC
cc: TEACH at MIT-MC

We'll work on that last set of errors. But for your general info, Lisp has
been changed recently (the change will hit TEACH;LISP soon) so that <CR> is
the same as space for ending an atom. That will avoid a lot of the confusion.
-kmp

Date: 21 December 1979 18:18-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACH at MIT-MC

the thing which suggests doing
<obj>(...) => (<obj> ...) should verify that <obj> is a valid function
of number of args in (...)

Date: 26 December 1979 03:09-EST
From: Charles E. Haynes <CEH at MIT-MC>
To: TEACH at MIT-MC, ELLEN at MIT-MC

I added myself to the lisp students list (in alpha order). And
plan to use TEACH;LISP (I've already seen and enjoyed TEACHE and TEACHM).

Keep up the good work!
-- Charles

Date: 14 January 1980 13:40-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Lisp Text
To: EBIRD at MIT-ML
cc: TEACH at MIT-MC

It's not clear that there is a really good one. Bernie Greenberg's lisp
notes will be recommended to you probably as they are pretty good as existing
things go. Other texts available are:
''Let's Talk Lisp'' -- I didn't like this approach for a number of reasons
''Artificial Intelligence'' (Winston's AI book -- has an intro to lisp)
MIT's 6.031 notes - at least in past years, probably still has an intro to lisp
Winston has a new book out on learning Lisp specifically but I haven't seen
it yet. It's not yet published, I think, so there might be a wait.
''Anatomy of Lisp'' is packed with data -- but I question its readability
by someone who doesn't know lisp already.  The MACLISP and INTERLISP
manuals have some sort of intros to lisp i think. 

Well, there are some ideas for what they are worth. There's always 
:TEACH;LISP on MC which doesn't offer everything but at least if you're 
learning our lisp we can answer your questions. -- most books can't do
that. 

Enjoy.. -kmp

Date: 14 January 1980 22:12-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACH at MIT-MC

I think TEACH;LISP wants a generalized eval server. That
'name' has sent a message concerning help.
message isn't always right.

Date: 16 January 1980 03:10-EST
From: Robert W. Kerns <RWK at MIT-MC>
To: KMP at MIT-MC
cc: TEACH at MIT-MC

    Date: 14 January 1980 22:12-EST
    From: Kent M. Pitman <KMP at MIT-MC>
    To:   TEACH

    I think TEACH;LISP wants a generalized eval server. That
    'name' has sent a message concerning help.
    message isn't always right.
It has an EVAL server.  What you need is a generalized user program to take
advantage of it's EVAL server.

Date: 17 January 1980 00:38-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACH at MIT-MC

One good thing for the meta-evaluator in teach might be
seeing things like
((lambda (t1 t2) (+ t1 t2) (* t1 t2)) 3 4)
which someone just did ... warn of unused values. remind the guy
that the printout is caused by return from tty of expressions typed
in at the tty (people never wonder why (+ 3 4) types 7 but they do
wonder why (print 'foo) types FOO followed by T ... alas ... )

Date: 19 January 1980 20:33-EST
From: Eliot Scott Ramey <ELIOT at MIT-MC>
Sender: COMSAT at MIT-MC
To: TEACH at MIT-MC

[COMSAT: This was a failing QSEND.]
ELIOT@MIT-MC 01/19/80 20:33:21
I am sending this to remind you we are waiting for
a (lesson Teach).

Date: 20 January 1980 19:34-EST
From: Eliot Scott Ramey <ELIOT at MIT-MC>
Sender: COMSAT at MIT-MC
To: TEACH at MIT-MC

[COMSAT: This was a failing QSEND.]
ELIOT@MIT-MC 01/20/80 19:34:14
I really don't understand what the LAMBDA function is all about.
Help!

Date: 21 January 1980 02:05-EST
From: Robert W. Kerns <RWK at MIT-MC>
To: ELIOT at MIT-MC
cc: TEACH at MIT-MC

    Date: 20 January 1980 19:34-EST
    From: Eliot Scott Ramey <ELIOT at MIT-MC>
    Sender: COMSAT at MIT-MC
    To:   TEACH

    [COMSAT: This was a failing QSEND.]
    ELIOT@MIT-MC 01/20/80 19:34:14
    I really don't understand what the LAMBDA function is all about.
    Help!
LAMBDA isn't a function.  Rather, it marks a "lambda-expression", which
IS the primitive kind of LISP function.  I.e. in:

(LAMBDA (foo) (+ foo foo))

This is not a legal form to evaluate.  But it IS a function:  I.e. we can
do:

((LAMBDA (foo) (+ foo foo)) 5)

I.e. invoke the function (LAMBDA (foo) (+ foo foo)) on the argument 5.
This will return 10.  LAMBDA is a special marker saying that a piece of
list structure is a function.  The CADR of the LAMBDA-form is then a list
of symbols to be "LAMBDA-bound" (explanation in a second) to each argument.
The rest of the LAMBDA-form is a list of forms to be EVAL'd, and the last
one is returned as the value of the function (LAMBDA-form).

As to what LAMBDA-bound means:  When a symbol (foo in the above example)
is LAMBDA-bound, it has as it's value the associated argument (5) for the
duration of the LAMBDA-expression.  On exit from the LAMBDA-expression, it
regains it's former value (or becomes unbound if it was unbound).
Thus it will not conflict with any other uses of foo in other pieces of code.

Date: 22 January 1980 20:24-EST
From: Donald L. Fischer <CIRCLE at MIT-MC>
To: TEACH at MIT-MC

hi,

	this is to remind you that we (all your loyal students
	)are waiting for 'lesson Defun'.

	also,your lisp teacher has been very helpful,
	ive learned alot from it,and will swear 
	off basic and fortran as soon as im able...

		Don Fischer


Date: 2 February 1980 19:27-EST
From: Kent M. Pitman <KMP at MIT-MC>
Sender: ___124 at MIT-MC
To: TEACH at MIT-MC

DWS just asked me '' If paren 6 paren doesn't evaluate to itself and
can't be set to anything, then what good is it? '' ... i guess we should
address this issue of structure more heavily in the outset.
-kmp

Date: 3 February 1980 16:05-EST
From: Jose M. Rodriguez <COCO at MIT-MC>
To: TEACH at MIT-MC

I was running your teach lisp program and the lesson on lambda functions is not working, it siad error in lesson and to complain to you.

Date: 4 February 1980 00:15-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: I had this same confusion when I was learning lisp...
To: TEACH at MIT-MC

Date: 2 February 1980 21:19-EST
From: David W. Sarup <DWS at MIT-MC>
To:   KMP

when you get a chance....why doesn't 
(defun test (one) (tyi)one) work?  (ie it should do the same thing as
tyi...)
     (I know that (defun test () (tyi))
                   (f)<input>        ) 
works though

Date: 4 February 1980 00:16-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Forwarded mail...
To: TEACH at MIT-MC

Date: 2 February 1980 20:29-EST
From: David W. Sarup <DWS at MIT-MC>
To:   KMP

the input part of teach;lisp should tell you that 
if you do (read) then it is just going to sit there at the end of
the last paren and wait for input (took me quite a while to figure
that out...probably just my small brain)...one more thing.  I just
randomly stumbled across (describe ...). it might be a good idea to
tell us about that rather early so that we can look up random things
that we might come across...
   talk to you later .....dave

Date: 22 February 1980 09:54-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: #1001 on our stack of things to do...
To: TEACH at MIT-MC

Date: 20 February 1980 21:42-EST
From: Ned Benhaim <NB at MIT-MC>
To:   KMP

The Lisp tutor is neat. Is it possible to preserve tty information so
that rubout processing will accomodate "glass" terminals? Needless
to say rubbed-out parentheses that are doubled due to printing
terminal handling can confuse a beginner trying to match left and right
parentheses...

Date: 11 March 1980 02:21-EST
From: KMP,ALAN at MIT-MC
Sender: ___023 at MIT-MC
Subject: Inconsistent and UnInformative Error Messages
To: BUG-LISP at MIT-MC
cc: TEACH at MIT-MC

((LAMBDA (X Y) (+ X Y)) 1 . 2)
;((? 1 NIL NIL) (X Y)) TOO MANY ARGUMENTS SUPPLIED - APPLY

((LAMBDA (X Y) (+ X Y)) 2 . 3)
;#201300 UNEVALUABLE DATUM - EVAL

((LAMBDA (X Y) (+ X Y)) 3 . 4)
;LAMBDA UNDEFINED FUNCTION OBJECT

((LAMBDA (X Y) (+ X Y)) 4 . 5)
;((? 4 NIL NIL) (X Y)) TOO MANY ARGUMENTS SUPPLIED - APPLY

((LAMBDA (X Y) (+ X Y)) 5 . 6)
;((? 5 NIL NIL) (X Y)) TOO MANY ARGUMENTS SUPPLIED - APPLY

(QUIT)
:KILL

: We suspect that this generalizes. Perhaps a bit of error checking on
  the poor little actual args list would be in order? This bug was
  uncovered by some poor guy in :TEACH;LISP who had just figured out
  why (LAMBDA (X) X) didn't work and had FINALLY figured out that
  ((LAMBDA (X) ...) ...) was the thing to do in order to suppress the
  LAMBDA UNDEFINED FUNCTION message ... almost. Sigh. 


Date: 12 March 1980 12:05-EST
From: "Guy L. Steele, Jr." <GLS at MIT-MC>
Subject: Inconsistent and UnInformative Error Messages
To: KMP at MIT-MC, ALAN at MIT-MC, BUG-LISP at MIT-MC
cc: TEACH at MIT-MC

    Date: 11 MAR 1980 0221-EST
    From: KMP,ALAN at MIT-MC
    Sent-by: ___023 at MIT-MC

    ((LAMBDA (X Y) (+ X Y)) 1 . 2)
    ;((? 1 NIL NIL) (X Y)) TOO MANY ARGUMENTS SUPPLIED - APPLY

    ((LAMBDA (X Y) (+ X Y)) 2 . 3)
    ;#201300 UNEVALUABLE DATUM - EVAL

    ((LAMBDA (X Y) (+ X Y)) 3 . 4)
    ;LAMBDA UNDEFINED FUNCTION OBJECT

    ((LAMBDA (X Y) (+ X Y)) 4 . 5)
    ;((? 4 NIL NIL) (X Y)) TOO MANY ARGUMENTS SUPPLIED - APPLY

    ((LAMBDA (X Y) (+ X Y)) 5 . 6)
    ;((? 5 NIL NIL) (X Y)) TOO MANY ARGUMENTS SUPPLIED - APPLY

    (QUIT)
    :KILL

    : We suspect that this generalizes. Perhaps a bit of error checking on
      the poor little actual args list would be in order? This bug was
      uncovered by some poor guy in :TEACH;LISP who had just figured out
      why (LAMBDA (X) X) didn't work and had FINALLY figured out that
      ((LAMBDA (X) ...) ...) was the thing to do in order to suppress the
      LAMBDA UNDEFINED FUNCTION message ... almost. Sigh. 

Of course, this happens because the interpreter is just doing a NULL
check instead of an ATOM check when cdr'ing the argument list.  Hence
it cdr's through the number and into some accumulator, and different
accumulators contain diferrent interesting junk.

Date: 13 March 1980 18:36-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: LIMIT at MIT-MC
cc: TEACH at MIT-MC

    Date: 13 March 1980 07:43-EST
    From: David Curtis <LIMIT at MIT-MC>
    To:   KMP

    I had just ended (lesson eval) when i got this::
    end of lesson
    there is a shorthand notation for (QUOTE something) and that
    is 'something.
    ;#FILE-IN-|DSK:TEACH;LESSON EVAL|-70754 INFILE CLOSED

    ;BKPT FAIL-ACT

    BREAK LEVEL 1
-----
I certainly believe that you got the error as it seems to be a pretty
coherent explanation of the situation.... but more was involved in generating
it than what you describe here -- I cannot reproduce it. If you can figure
out how to produce such an error in a repeatable way, please let us know.
It's ok if you report it again if it happens again, too, of course -- just
won't be much we can do about it until we can have more info about what leads
up to it .... I looked at our records of your session and they provide little
other information -- it may be some bad interaction with DESCRIBE but I'm
not sure how ... So hang in there -- doing ^G and restarting a lesson
is the way to restart when it happens. -kmp

Date: 10 April 1980 01:10-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Random data (has been replied to)
To: TEACH at MIT-MC

Date: 10 March 1980 22:33-EST
From: Mark A Stalzer <MARKS at MIT-MC>
To:   KMP

well, my first question about and alist is what is it?  it seems
to be a list of evaluated arguements that is built up by eval
to be applied to a function (with apply)..so the alist for
(+ a b)  would be  ((1 . <pointer to something>) (2 . <pointer>)),
now would the pointer be to the 'value' of a or to it's prop list
or what?  am i all off track?  what happens to the alist with funs
that take variable numbers of args?  is the alist built up and then
the function does a (length alist) to find out the number of args? how
does apply handle it?
about the funarg thing...i know at work i pass function names to
4tran subrs so they can be excuted inside the subr...i use and
external statement...now, i know why the 4tran pilier needs to know
that info cuz toherwise it would just put a pointer to the functions
name and you would get all sorts of undefined function type errors
if you are lucky...does lisp have the same prob in the compilier?
gad, i just quit my old job, starting as a systems programmer on a
pdp-11 in about one week...but that is another story...yes, i would
like to get those notes...a few bucks is more than worth it if it
is gonna help me learn lisp...i think lisp has to be the best language
around...(well, i do like macro alot!)...thanks--mark.

Date: 27 April 1980 11:35-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  STUDNT
To: GREN at MIT-MC
cc: TEACH at MIT-MC

    Date: 27 April 1980 00:20-EST
    From: Ian G. Macky <GREN at MIT-MC>
    To:   KMP

    What is kept in the STUDNT directory?  I noticed the 
    file STUDNT;GREN RECORD in a PEEK, but I couldn't see what the 
    file was... It was "LOCKED" (??!). Does TEACH record everything
    I type?  Apeears so... the file is *BIG*. (Seems like a waste of
    space if that's what it is...)  What's it all about?
    						--Gren
-----
It does indeed record a full record of all your sessions. :TEACH;LISP is
an experiment on our part and it's not considered part of your disk
space area on MC, so don't worry about the size. We take responsibility
for its size and will move it to backup tape or hardcopy if disk space
becomes an issue for us.  If the file was LOCKED it's because ITS has to
lock it to open it in append mode. When you killed the TEACH;LISP job
the file would become unlocked again.
-kmp

Date: 1 May 1980 04:11-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: I suggested using a single CONS
To: TEACH at MIT-MC

Date: 1 May 1980 03:43-EDT
From: Mark A Stalzer <MARKS at MIT-MC>
To:   KMP

hi, what is the best way to implement a binary tree in lisp?
i was thinking of using 2 cells, the car of cell1 points to the
data while the cdr points to cell2.  the car of cell2 points to the
left subtree while the cdr points to the right.  i now how to build
up the tree with rplaca, rplacd, cons and such (it's in my teach;lisp
log) but does this sound like a good way of doing it?  thanks--mark.

Date: 2 May 1980 13:11-EDT
From: RWK,KMP at MIT-MC
Sender: KMP at MIT-MC
Subject:  Binary Trees
To: MARKS at MIT-MC
cc: TEACH at MIT-MC

    Date: 2 May 1980 00:53-EDT
    From: Mark A Stalzer <MARKS at MIT-MC>
    To:   KMP

    i see how you could build a binary tree that way but where do you put
    the pointer to the data?  it seems like all the pointers are being used
    to build the tree with no place for data?
-----
Sorry, I (KMP) misunderstood your question in my reply. I was assuming you 
wanted data only at the leaves. The following reply was created jointly by
me and RWK and hopefully will answer your questions...

The method you describe is quite reasonable, given that you're using CONSes.
We suggest that in general it is best to insulate programs from knowing what
the underlying data structure is. Eg, you might want functions like:

	(DEFUN CREATE-NODE (DATA RIGHT-POINTER LEFT-POINTER)
	       (CONS DATA (CONS LEFT-POINTER RIGHT-POINTER)))
	(DEFUN LEFT  (NODE) (CADR NODE))
	(DEFUN RIGHT (NODE) (CDDR NODE))
	(DEFUN DATA  (NODE) (CAR  NODE))

When you learn about MACRO's you will find there is an even more efficient
way to define these operation as macros. These days we use structure macros
a lot for this kind of thing -- and we have programs which when fed a 
description of a structures organization will automatically create all the
needed macro definitions for accessing it. Unfortunately, the documentation
is poor and we haven't given any thought to how to teach them in :TEACH;LISP.

Simply put, structure macros allow you to create your own kind of object, 
say a NODE, with 3 parts, respectively DATA, LEFT and RIGHT. Automatically,
macros will become defined so that you can create a node with CREATE-NODE or
MAKE-NODE, etc, or get the parts via (NODE-DATA node) or (NODE-LEFT node).
The printer is even affected so that you can visually recognize your object.
(It will print as something like
	 #{NODE DATA ... LEFT ... RIGHT ...}

which makes it much easier to recognize.)  PLUS!  You make it very easy
to change just how your structure is represented because in your code you 
always just refer to NODE-LEFT, etc. and if you change how that is stored,
you don't have to change the code. (This concept is not unique to lisp. It
is called structured programming or data-hiding or data-abstraction, but is
a generally good way of thinking...) You can add another piece of data to 
your nodes -- maybe you want them to have property lists or something --
and you don't have to re-write all your code.

It is my opinion (KMP again -- end of joint analysis (RWK isn't around any
more to say what his feelings are)) that you should stick to defining your
own structures by hand as described toward the top there for a little while
to get the feel for how things are done at the low level. Then later when
you've had some practice, we can put you onto the stuff that does it for you.

G'luck. -kmp

Date: 2 May 1980 13:14-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: (File copy of old reply)
To: TEACH at MIT-MC

Date: 14 March 1980 22:04-EST
From: Kent M. Pitman <KMP at MIT-MC>
To:   MARKS
cc:   KMP
Re:   ALISTS and such...

    Date: 10 March 1980 22:33-EST
    From: Mark A Stalzer <MARKS at MIT-MC>
    To:   KMP

    well, my first question about and alist is what is it?  it seems
    to be a list of evaluated arguements that is built up by eval
    to be applied to a function (with apply)..so the alist for
    (+ a b)  would be  ((1 . <pointer to something>) (2 . <pointer>)),
    now would the pointer be to the 'value' of a or to it's prop list
    or what?  am i all off track?
Yes, you are. An ALIST is not used by the evaluator. The evaluator uses
stacks and other more efficient means for keeping track of values.
A symbol is just a block of storage that lives in a certain region of
the address space that makes it identifiable as a symbol. Associated with
it is a slot called the value cell which contains the value. When bindings
are done, the old value and a pointer to the symbol it belongs to is placed
on the stack so that when unbinding happens, the old value can be restored.
But the current value is always accessible in the same memory location.

Alists have nothing to do with that. Forget about what EVAL and APPLY do with
that extra arg ... it's really gross what it has to do in order to support
that functionality -- far from efficient -- and doesn't involve ALISTs -- that
is a misnomer.

An ALIST is just a list of lists, the first element of which is the 'key'
and the CDR of which is data associated with the key. There is nothing
magic about it -- it's just a useful way of organizing info ... Lesson 
ASSQ and Lesson ASSOC can give you more information. Definitions of ASSQ and
ASSOC if the program doesn't provide them can be gotten by doing
(DEFINITION ASSQ) and (DEFINITION ASSOC) in :TEACH;LISP ... that accesses
a database of how I describe what those functions do -- hence it may be 
slightly buggy or abbreviated but I believe most of the definitions it has
are pretty close to accurate.

    what happens to the alist with funs
    that take variable numbers of args?  is the alist built up and then
    the function does a (length alist) to find out the number of args? how
    does apply handle it?

This is all meaningless. Args are passed on the stack, as I mentioned--
so your questions don't really apply.

    about the funarg thing...i know at work i pass function names to
    4tran subrs so they can be excuted inside the subr...i use and
    external statement...now, i know why the 4tran pilier needs to know
    that info cuz toherwise it would just put a pointer to the functions
    name and you would get all sorts of undefined function type errors
    if you are lucky...

funargs cannot be related to fortran. the reason you have to declare things
external is so that if they are used in a statement like

	CALL FOO(X,Y)

where X is some external function (yes, this is completely legal), the compiler
will know to look for a linkage to an X subroutine or whatever instead of 
creating a REAL variable named X...

    does lisp have the same prob in the compilier?

no, it is a feature of lisp that variables and functions are always 
distinguishable by context. There are a lot of subtle issues, but all
that matters is that when you go to run the program if X gets called 
as a function, it better be defined. if it never gets called, it doesn't
matter if it was defined or not.

    gad, i just quit my old job, starting as a systems programmer on a
    pdp-11 in about one week...but that is another story...yes, i would
    like to get those notes...a few bucks is more than worth it if it
    is gonna help me learn lisp...i think lisp has to be the best language
    around...(well, i do like macro alot!)...thanks--mark.

maclisp doesn't give you enough power to do systems programming. NIL and
the Lisp machine do tho' (well, LISPM does -- NIL is still in the works but
we expect it will...) 

hope that info helps. have to get back to paper-writing. see you.
-kmp

Date: 3 May 1980 22:28-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: File copy
To: TEACH at MIT-MC

Date: 3 May 1980 00:30-EDT
From: Mark A Stalzer <MARKS at MIT-MC>
To:   KMP, RWK

thanks for the reply, it really helped alot...yes, i know what
you mean about structured programming...i use pascal alot and
that is the only way to go in a language like pascal, i imagine
(it sure seems that way) that it is even more 'natural' in lisp
than pascal (good luck in 4trash).  i will play with this for
a while and then try to move on to macros..thanks.  --mark.

Date: 5 May 1980 03:28-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: This problem was not re-creatable...
To: TEACH at MIT-MC

Date: 13 March 1980 07:43-EST
From: David Curtis <LIMIT at MIT-MC>
To:   KMP

I had just ended (lesson eval) when i got this::
end of lesson
there is a shorthand notation for (QUOTE something) and that
is 'something.
;#FILE-IN-|DSK:TEACH;LESSON EVAL|-70754 INFILE CLOSED

;BKPT FAIL-ACT

BREAK LEVEL 1

Date: 13 May 1980 04:05-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACH at MIT-MC

I think it would be helpful on displays to designate a DIDL-type two-window
system. Examples could be manipulated in window-1. Text and user-stuff could
go in window-2. The window might grow and shrink ... This would be pretty
useful for maintaining a good sense of context for people whose terminals
scroll up really fast. Printing tty people can just look back at example.
Glass tty people lose utterly. Problems are likely to be variable screen size
and picking displays that map well into them.

Date: 13 May 1980 04:56-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Bug fix
To: DMB at MIT-MC
cc: TEACH at MIT-MC

I have fixed the bug that made 'A/b/c/d/e return something which printed like
Abcde instead of |Abcde|. You should probably re-run (LESSON 3) to see what
it should have run like. -kmp

Date: 13 May 1980 04:57-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: TEACH at MIT-MC

I have dumped out Teach.98 in Lisp 1914. It was running in (shudder) 1861.
We should consider dumping this in SHARAB (among many thousands of other
things we should do to it). -kmp

Date: 13 June 1980 17:29-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: I have given him a pointer to :TEACH;LISP
To: TEACH at MIT-MC

Date: 13 June 1980 06:22-EDT
From: Jeffrey Jay Schwartz <SCHWAR at MIT-MC>
To:   KMP

I was looking around the teach directory and it seems that you
wrote some files that teach LISP but I can't see how to proceed
i.e. what order to go in, do I load them in a LISP environment,etc.
Can you help?  I've been wanting to learn LISP for a long time but
nobody's written a good book!  Thanks.
			-Jeff Schwartz

Date: 13 June 1980 22:38-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: For the record...
To: TEACH at MIT-MC

Date: 24 May 1980 19:27-EDT
From: Karen Ferreira <KARENF at MIT-MC>
To:   USER-ACCOUNTS
Re:   I NEED HELP!

I NEED HELP WITH LISP.  IS THERE A FILE OR SOMETHING I CAN READ?
OR A DOCUMENTATION BOOK, OR MANUAL FOR IT?

Date: 27 May 1980 13:58-EDT
From: V. Ellen Golden <ELLEN at MIT-MC>
To:   KARENF
cc:   USER-A
Re:   I NEED HELP!

There are several textbooks which discuss LISP.  One of the best is
"Let's Talk LISP" by Siklossy, available from Prentice-Hall, Englewood
Cliffs, NJ, copyright 1976.

There is the beginning of a LISP manual for MACLISP available for $4.25
from:

Mrs. D. Kontrimus
Publications
Laboratory for Computer Science
545 Technology Square
Cambridge, MA 02139

This is incomplete, and no promises are made for completing it, but KMP
has said he will spend a little time and see if he can come up with more.
In the meantime, I suggest you try these.


Date: 16 June 1980 07:00-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: CLEMW at MIT-MC
cc: TEACH at MIT-MC

    Date: 15 June 1980 20:35-EDT
    From: Clement Wang <CLEMW at MIT-MC>
    To:   KMP, RWK
    Re:   Lisp Teacher

    In the section on Defuns, one can define a single recursive function
    to make a list N elements long with the numbers in asscending order:
    (defun make-list-n-long (n)
           (cond ((= n 0) nil)
    	     (t (append
    		 (make-list-n-long (- n 1))
    		 (list n)))))
-----
This is *not* an appropriate definition. It is extremely inefficient and we
wish to push issues of efficiency by introducing the right way of doing things
early on. The number of CONS's done by your make-list-n-long is 65 in making
a 10-length list while for us it's only 20. As the list grows longer, the
differences varies even more. This is because APPEND has to throw away list
structure, while CONS is maximally sharing. The REVERSE at the end is not 
really needed; we could use NREVERSE and save another 10 cons cells, but use
of NREVERSE is dangerous to novices, so we don't teach it right off.
-----
    The lisp teacher looks like it is coming along, keep up the good work.
-----
Thanks. It moves in bits and pieces when we find time ... One of these days it
may become something real ... still pretty much a toy and/or a dream ...
-----
    BTW, you might want to put in your teach;-read- -this- file, a summary
    of what is in the dir that might be of interest for the novice to look at.
----
We don't really encourage people to poke around at the TEACH directory, though
I suppose we ought to put something in the -READ- -THIS- file that points to
the teacher program, which is able to access much of the other useful stuff on
the directory. -kmp

Date: 16 June 1980 07:00-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: For the record...
To: TEACH at MIT-MC

Date: 15 June 1980 20:35-EDT
From: Clement Wang <CLEMW at MIT-MC>
To:   KMP, RWK
Re:   Lisp Teacher

In the section on Defuns, one can define a single recursive function
to make a list N elements long with the numbers in asscending order:

(defun make-list-n-long (n)
       (cond ((= n 0) nil)
	     (t (append
		 (make-list-n-long (- n 1))
		 (list n)))))

The lisp teacher looks like it is coming along, keep up the good work.
BTW, you might want to put in your teach;-read- -this- file, a summary
of what is in the dir that might be of interest for the novice to look
at.

Clem

Date: 17 June 1980 03:44-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: We should make a :TEACH which reads JCL and prints a diagnostic
To: TEACH at MIT-MC

Date: 16 June 1980 20:52-EDT
From: Brian L. Wong <SALVOR at MIT-MC>
To:   KMP

I've forgotten how to get teach lisp...
I thought it was 
:teach lisp or something like that... help?
thanx.		
                -blw

Date: 19 September 1980 17:55-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: For the record
To: TEACH at MIT-MC

Date: 10 August 1980 22:34-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To:   ELIOT
cc:   KMP

not much has changed since then. i find it hard to believe you can't figure
out about writing programs from what's there tho'...but if you want some simple
sample files, try looking at:

 TEACH;SIMPLE ANIMAL	- A simple animal program
 TEACH;SIMPLE ADVENT	- A *Very* simple adventure program (does very little)
 TEACH;SIMPLE PP	- A simple s-expression pretty-printer

There's also the file TEACH;PROBLM HANOI which is a problem set which we 
devised for people taking the teach lessons. There is a solution available if
you try for a while and get stuck.

Date: 30 December 1980 18:38-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: HAL at MIT-MC
cc: TEACH at MIT-MC

FH wrote us a tre-printer for :teach;lisp. Run that program and try 
(examine-list)

I think the source is in teach;treep 

Date: 30 December 1980 18:53-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [HAL: tree printer -- for the record]
To: TEACH at MIT-MC

MSG:  LAZY   1     
Date: 12/30/80 13:43:02
From: HAL
Re:   tree printer

Does anybody have a Lisp program which takes a (proper) list as input
and prints it nicely as a tree ?

Date: 22 March 1981 00:04-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [TAW: forwarded]
To: TEACH at MIT-MC

Date: 20 March 1981 13:08-EST
From: Thomas A. Wadlow <TAW>
To:   KMP

TEACH;LISP is marvelous.  I think that it is a tremendous
help.  I think the (lesson emacs) could be written a little
more in the style of the other lessons (I know EMACS and I was
curious to see how well you would teach it. I was a little
disappointed.). Also, I am still not clear on LAMBDA.  The
lesson seemed to touch all around LAMBDA, but never actually
clearly said what it *WAS*.  Other than that I love TEACH;LISP
and don't think I would care to learn LISP any other way.

Date: 3 April 1981 22:54-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [CSD.BRADFORD: :TEACH;LISP]
To: TEACH at MIT-MC

Date: 2 Apr 1981 1206-PST
From: Ethan Bradford <CSD.BRADFORD at SU-SCORE>
To:   kmp
Re:   :TEACH;LISP

Thanks, that should be quite helpful.  I actually do know some lisp; I was
mainly trying out the program and looking for some more advanced ideas.  It
looks pretty good!

Date: 27 October 1981 22:59-EST
From: Phillip C. Reed <PCR at MIT-MC>
Subject: Can anybody point me to...
To: LISP-STUDENTS at MIT-MC

	...a version of Lisp that will run on a PDP 11/70 under 
RSX-11M+?? (I'm looking for something like a DECUS tape, not something
expensive.)

	Please reply directly to PCR at MIT-MC, as I'm not on this list.

				thanks...
						...phil

