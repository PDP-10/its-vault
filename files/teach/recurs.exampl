*******************************************************************************
Thank you all very much for your responses - it's great having so many people
who have good ideas about computer science EDUCATION.
					Brian
*******************************************************************************

DISTRIB:  *DM, *MC, *ML, *AI
EXPIRES: 12/05/78 00:36:22
BNH@MIT-ML 11/27/78 00:36:22 Re: Does anyone have a good practical simple recursion example?
I used the usual x-factorial example when trying to explain recursion to
a novice, and have been told to get a more practical example, as the factorial
was "some abstract math exercise, or something".  But the practical examples
all seem too complicated.  Does anybody know of a good SHORT practical
application?

*******************************************************************************


JBROWN@MIT-MC 11/28/78 20:46:26
HOW ABOUT THIS:  YOU HAVE A DEVICE X, WHICH IS MADE UP OF 2 A'S, 3 B'S AND A C.
THESE ARE IN TURN MADE UP OF OTHER PARTS...NOW ASSUMING THAT EACH BASE PART (NOT MADE UP OF SOMETHING ELSE) COSTS SOME AMOUNT, AND THE OTHER THINGS COST SOME AMOUTN TO PUT TOGETHER, WHAT IS THE TOTAL COST OF AN X? THE EASIEST WAY TO DO THIS IS TO WRITE A RECURSIVE PROCEDURE THAT TAKES AS INPUT A PART NAME AND TOTALS THE COST BY CALLING ITSELF ON ALL OF THE COMPONENTS...WHEN IT GGETS A BASE PART, IT JUST RETURNS THE COST OF THE BASE PART.

IS THAT CLEAR?


ED@MIT-AI 11/28/78 18:00:30
Sorry to add to the infinite flamage you already have, but something that
I really like is the "How many ways are there to change a dollar bill?"
Hack.  The function takes one argument for the value to be changed and
a list of the atomic values of money.  At each level the function
calls itself recursively until you reach pennies.  ALAN@AI has a pre-
written function for this purpose.  (It has the unusual feature that it
takes almost twice as long if you list the values of money in reverse
order!)


PONDY@MIT-AI 11/28/78 11:58:15
did you hear ed fredkins example of a recursive definition of a peeled onion?
something like: a peeled onion is a thing which when it is peeled is either
a peeled onion or nothing.

PRATT@MIT-AI 11/28/78 09:27:48


    The code I use to implement Rabin's fast Monte Carlo prime testing
    algorithm has two recursive routines in it.  The first, mexpt(a,j),
    simply raises a to the power j, mod n (n is global, sorry).  Whether
    you write this routine iteratively or recursively makes no detectable
    difference in speed because the cost of operating on thousand-bit
    numbers dominates.  Since results from this routine have been published
    in Martin Gardner's column (Aug. 1978), one can hardly accuse a component
    of it of not being "practical," unless you insist that any routine that
    works with numbers is irrelevant mathematics.  The file is AI:PRATT;PRIME
    If you definitely need a non-numerical example, why not define APPEND?


RDR@MIT-ML 11/28/78 00:13:57
I think a nice partition sort is a good example of recursion.
It is hard enough that it makes the person appreciate
not having to do anything othe than  recursively call
the existing routine when one has partitioned  the data to b sorted.

BAK@MIT-MC 11/27/78 22:56:53

This depends on what data structures you are allowing.  If its just
numbers then there isn't anything more "practical" (whatever that means)
than factorial.  If you allow lists then there's lots.  Pattern matchers
as required for the last 6.030 problem set are very simple and 
impressive to novices.  There are all sorts of examples like this.


MSS@MIT-MC 11/27/78 20:34:12
If they are inclined towards language theory, you might try explaining
recursive decent methods for parsing expressions.

ELBOW@MIT-ML 11/27/78 20:13:44
Try the Tower of Hanoi problem:  not exactly practical, but not
any more mathematical than a host of other puzzle-games.

To move a stack of n+1 discs from peg A to peg B, move
n discs from A to C, move the remaining one from A to B,
and move n from C to B.

This has the nice feature that two recursive calls are
required in the so;lution, indicating that in fact the
solution requires exponentially many steps.

KMP@MIT-MC 11/27/78 20:12:16


Joe Wiezenbaum uses on in beginning PL/1 course here that's pretty nice:

   Define CLIMB-STAIRS:
      [1] Go up one step.
      [2] If at top of stairs
             then done
             else CLIMB-STAIRS.

This generalizes to any construct that one might normally view
as a loop. It exemplifies the philosophy of 'living each day as you
get to it'...

If you get any other good ideas, can you send them to me or let me know where
you are dumping the replies you get? We have a lisp teaching program here
on MC that helps some in learning Lisp - but one of the hardest things is
coming up with good simple problems.

If you want a complex one - tho' very elegant - look in MC:TEACH;PROBLM HANOI
for a description of the recursive solution to the tower of hanoi problem.

--kmp


LOUI@MIT-MC 11/27/78 19:02:38
Hoare's QUICKSORT algorithm involves recursion in a simple, practical
way.  See page 94 of the text by Aho, Hopcroft, and Ullman.


RBR@MIT-AI 11/27/78 18:04:31
The Tower of Hanoi puzzle


Date: 27 Nov 1978 1712-EST
From: MP at MIT-DMS (Mark A. Plotnick)
Subject: Short recursion example that's not like the abstract" factorial:

Message-id: <[MIT-DMS].93635>

1) Fibonacci numbers
2) n**2 or n**3  (ex: n**2 = (n-1)**2 + 2n - 1)



RIVEST@MIT-ML 11/27/78 16:50:21
My favorite example is perhaps too complicated for a real novice, but I've used
it in an introductory programming class with real success.  The example is good at something that most examples are not, which is showing where recursion can
be really USEFUL, as opposed to just elegant (e.g. factorial, which can
of course be done by iteration as easily).
	You are given an n x n matrix of 0's and 1's obtained from a digitized
TV camera attached to a microscope.  The zeros represent clear fluid and the
1's correspond to red blood cells.  We want to count the number of red
blood cells, where a "red blood cell" is a connected group of 1's. (only
count vertical or horizontal connections).  For simplicitiy assume the
border M(i,j) where i or j is equal to 0 or n-1, is equal to zeros.  

DEFINE "BLOOD COUNT";
	NEW COUNT;
	COUNT := 0;
	FOR I IN 0 TO N-1 DO FOR J IN 0 TO N-1 DO
		IF M(I,J) NE 0 THEN 
			(COUNT:=COUNT+1;
			 ERASE-CELL-AT(I,J));
	COUNT $

DEFINE "ERASE-CELL-AT"(I,J);
	IF M(I,J) = 0 THEN RETURN;
	M(I,J):=0;
	ERASE-CELL-AT(I,J-1);
	ERASE-CELL-AT(I,J+1);
	ERASE-CELL-AT(I-1,J);
	ERASE-CELL-AT(I+1,J) $

The example is written in CGOL.  It's a good introductory example since
the recursion is easy to follow graphically on a sample "blood sample",
and since it is rather difficult to program this in any other fasion.
	Comments appreciated.
	Ron Rivest

MASEK@MIT-ML 11/27/78 13:26:02
I think the best practical example is traversing a tree.  This is something
which is very difficult to do iteratively, but works much nicer recursively.
						bill masek

Date: 27 Nov 1978 1227-EST
From: WJN at MIT-DMS (Wayne Noss)

	I like the Towers of Hanoi problem as an example of recursion, but a layman
might consider it more obscure than factorials unless he's into that sort of game.
	A recursive definition of addition might do:
(DEFUN PLUS (A B) (COND ((EQUAL B 0) A)
                        (PLUS (SUCCESSOR A) (PREDECESSOR B))))
(DEFUN SUCCESSOR (X) (1+ X))
(DEFUN PREDECESSOR (X) (1- X))
	I'd also be interested if anyone can suggest any really good examples of
recursion understandable at an elementary level which do not seem contrived.
	Final suggestion:  algebraic expression evaluation (for parenthesized
expressions)--if the person knows algebra, chances are (s)he unconsciously uses
recursion to understand the meaning of x*(y+z), etc.
				Wayne Noss


DOYLE@MIT-AI 11/27/78 11:52:54
How about "if you can't solve a problem (answer a complaint, etc.)
yourself, pass it on to your superior" as an application of recursion
in business management.

EF@MIT-AI 11/27/78 10:43:29
I have an example, a recursive definition of an onion, which
is pretty good in english and which exists as a LISP function ONIONP, a
predicate to tell if something is an onion.

RAM@MIT-MC 11/27/78 09:02:28
	Most simple recursion is easily programmed iteratively, but maybe
not by a novice. Here are some reasonably practical ones:
	1. The Hermite polynomials: H(0,x) = 1 , H(1,x) =2x,
h(n,x) =2xH(n-1,x)-2(n-1)H(n-2,x).  Many solutions to D.E.'s are recursively
defined and so more easily programmed that way(usually at hideous
execution cost).
	2. The Tower of Hanoi (see Grogono, Programming in Pascal, Addison
Wesley).
	3. the greatest common divisor gcd(m,n of two integers m and n is also the gcd
of n and  m mod n, giving :
	FUNCTION gcd(m,n);
	  BEGIN if n=0 then gcd :=m
	        else gcd := gcd(n, m mod n)
	  END;

	Generally the power of recursion will not show its head before
linked list traversal.

RBRN@MIT-AI 11/27/78 09:54:43
A good, simple recursion example is a depth-first tree search. If you don't like
using data-structures, then you have to do math exercises.


RSTRAU@MIT-MC 11/27/78 07:26:19
sure- use the calculator example: you pass arguments to a procedure that
will evaluate the sum of two terms, but one of the terms itself is composed
of two terms.  (You can polish it up though)
	Is quicksort really too difficult?...
		You wanted simple...   randy

EAK@MIT-MC 11/27/78 03:34:41
A very pratical recursion example is a decimal no. printer:

(defun print10 (n)
       (cond ((not (= (// n 10) 0))
	      (print10 (// n 10))))
       (prin1 (\ n 10)))

If he doesn't like computer examples, there is always the recursive solution
of the Tower of Hanoi problem.

Also Seymour Papert has a nice recursive description of juggling.

Binary searching can be thought of recursively, and an everyday use of binary
searching is looking up a word in a dictionary.

In general recursion is most interesting when any iterative solutions
require space proportional to the no. of iterations.  For example the
iterative solution to tree walking basically requires maintaining a
stack (barring modification of the tree).

MRC@MIT-AI 11/27/78 06:47:54
Factorial is a perfectly good and simple example, as long as
factorial itself is expressed simply.  Another "practical"
example is the standard way one outputs an integer in pdp10
assembly language programming.  This routine outputs a signed
integer in accumulator X.  Accumulator Y is scratch and is
also X+1 (ie, if X is AC4, Y is AC5).  Accumulator P is a
stack pointer pointing to a reasonable size stack:

NUMOUT:	JUMPGE X,NUMOU1		; no minus sign if positive
	MOVMS X
	OUTUUO ["-]		; replace with appropriate output system call
NUMOU1:	IDIVI X,10.		; replace 10. with desired base
	HRLM Y,(P)
	SKIPE X
	 PUSHJ P,NUMOU1
	HLRZ X,(P)
	ADDI X,"0		; convert to ASCII
	OUTUUO X
	POPJ P,

In this case, each remainder is stored in the (unused) left half
of the PC's saved on the stack.  Digits are extracted in this way
until a division by the base returns a quotient of 0.  At that
point it gets each digit back and outputs it.  The return call
at the end of each digit output "returns" to the beginning of
the second part of the output routine.  In Fortranese it might be
something like (if Fortran allowed recursion):

	SUBROUTINE NUMOUT(X)
	Y=REMAINDER(X=X/10)
	IF (X.NE.0) CALL NUMOUT (X)
	WRITE, Y
	RETURN


RPOOR@MIT-MC 11/27/78 02:06:59
Another classic example for demontrating recursion is sorting a list, using
quicksort.  That is the first one I was shown.  However, such simple things
as counting, or the markings on a ruler (1/8, 1/4, 3/8, 1/2, etc) can be
described as recursive procedures.

DUFFEY@MIT-AI 11/27/78 03:31:47
     Here are my nominations for simple, short justifiable recursive
examples.

1. APPEND (defun append (x y)
		 (cond ((null x) y)
		       (t (cons (car x) (append (cdr x) y)))))

2. ASSOC (defun assoc (key a-list)
		(cond ((null a-list) nil)
		      ((equal key (caar a-list)) (car a-list))
		      (t (assoc key (cdr a-list)))))

3. GCD  (defun gcd (x y)
	       (cond ((greaterp x y) (gcd y x))
		     ((zerop (remainder y x)) x)
		     (t (gcd x (remainder y x)))))

     This might be in the category of "an abstract math exercise" but you
might point out its use in rational arithmetic, which some matrix packages
use to increase precision.

4. MERGE (defun merge (item sorted-list)
		(cond ((null sorted-list) (list item))
		      ((lessp item (car sorted-list))
		       (cons item sorted-list))
		      (t (cons (car sorted-list)
			       (merge item (cdr sorted-list))))))

5. SORT (defun sort (lst)
		(cond ((null lst) nil)
		      (t (merge (car lst) (sort (cdr lst))))))

6. You can hair up 3 and 4 slightly to develop a complete tournament sort.

7. Depth-first or breadth-first search.

8. Simple ALGOL/60 aritmetic expression syntax checker. (Note: this would
use several mutual recursive functions, rather than a self recursive one.)

9. Infix to Polish translation.

10. A function which symbolically multiplies 2 polynomials together.


							Good Luck!
							Roger Duffey




KS@MIT-MC 12/02/78 01:02:38 Re: Recursion example
The complaint you received is a familiar one.  I eventually switched to
using the number printing example.  If you are not familiar with the
usual recursive implementation of a decimal integer printing routine on
PDP-10's, it looks like this:
	proc decimalPrint(n);
	begin
	integer digit;
		digit _ n mod 10;
		n _ floor(n/10);	comment I.e., usual integer divide;
		if n > 0 then decimalPrint(n);
		print("0"+digit);	comment I.e., digit becomes ascii;
		return;
	end;
This example of recursion is one that is much worse in iterative versions,
and in fact is the implementation of choice.  I believe it is simple and
well motivated.  No abstract data structures, such as trees, need be
introduced; only the familiar integers and characters are involved.  If
you find better or comparable examples, I would appreciate your passing
them on to me.		-- Ken Shoemake

RAF@MIT-MC 12/01/78 21:03:19 Re: Does anyone have a good practical simple recursion example?
Try defining the member function. 
also good is Replace

Replace x y list will replace toplevel occurences of x with y in list.
I am using these examples for a class... think they are simple enough.


SROSS@MIT-AI 11/30/78 23:46:02 Re: Does anyone have a good practical simple recursion example?
I used the following example in an article about the 
lisp machine, just to give a flavor of how LISP looks.

Use double-recursion to retrieve the fringe of a binary tree. Assume each
non-fringe node has a plist giving  its direct descendants.  GET-FRINGE of
any node returns the fringe of that subtree. The function is only about four lines
long, and is prototypical of databases organized around generalization hierarchies.
A variant is to use single recursion and a test for inequality ... making the
tree behave as a binary index into a database.

Hope you like this idea...let me know what else people send you.

 - Sandy


RWK@MIT-MC 11/30/78 05:40:55 Re: MC:TEACH;BNH REPLIE
Anyway, I have a couple comments to add to all that.
1)  Factorial is actually quite reasonable as a practical example.  It
    is not an obscure mathematical example, it is VERY fundamental and
    practical.  For example, if your friend plays poker, if he doesn't know
    about factorials, I'd LOVE to play poker with him.  Factorials are
    fundamental to probablity theory.

2)  One thing I'm really quite suprised that no-one mentioned (except for
    Roger Duffey's mention of infix-to-polish conversion) is the general class
    of parsers.  Consider one of the simplest parsers; a parser for LISP.
    Here's a simplified LISP parser for you:

(defun READ ()
   (throw-away-spaces-and-comments)  ;we can have spaces and comments anywhere
   (cond ((eq (look-at-next-significant-character) '|(|)  ;start of a list?
	  (input-next-character)   ;throw away the close-paren
	  (read-a-list))
	 (T (read-an-atom))))

(defun read-a-list ()
   (throw-away-spaces-and-comments)  ;we can have spaces and comments anywhere
   (cond ((eq (look-at-next-significant-character) '|)|)  ;end of the list?
	  (input-next-character)   ;throw away the close-paren
	  nil)			   ;then return NIL for the tail
	 ((eq (look-at-next-significant-character) '|.|)  ;dotted pair?
	  (input-next-character)   ;throw away the dot
	  (read))		   ;and return just what goes in the CDR
	 (T			   ;otherwise we return a list, by recursing
	  (cons (read)		   ;reading an item for the CAR
		(read-a-list)))))  ;and for the CDR


READ-AN-ATOM is easily defined, given a function to take a list of characters
and give you an atom (IMPLODE in MACLISP).
INPUT-NEXT-CHARACTER is TYI in MACLISP.
The LOOK-AT-NEXT-SIGNIFICANT-CHARACTER and THROW-AWAY-SPACES-AND-COMMENTS
are combined in the TYIPEEK function in MACLISP.

But in general, parsers of any variety, not just for the simple syntax of LISP,
require recursion.  Also, compilers which understand and optimize the output
of parsers need recursion to deal with the output of parsers--which are, of
course, trees showing the structure of the expressions being input.

I hope this helps somewhat.  It really doesn't sound like your friend is
open-minded to new ideas, but I hope he'll thaw to the idea of recursion.  It
really is one of the most powerful concepts in computer science.
