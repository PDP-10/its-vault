Macrakis:

The problem with calling an Atom a "variable" is that it does not
give it any separate existence from its function as value-holder.
I would be much happier with "unique symbol".  As far as the
beginner is concerned, if you type the same character string to
the Lisp in two places, you get "the same object", unlike Lists,
where you get two objects with the same properties, but which are
not the same object ("eq").  The power of atoms then is the
ability to associate other things with them, since they are uniquely
recoverable.  Among those things are value and function properties.
So at that point you might mention that if you feel like writing
Fortran in Lisp, you can consider an atom a variable.  What it
really is, though, in an expression like
(lambda (x y) (cond ((x y)) (t (f y))))
is a way of saying that the first x is the same thing as the second
x.  Assignment of values is secondary.  What is really happening
is that you are saying "The first argument can be called 'x'; there-
fore, when 'x' appears again, we are talking about the same object,
the first argument."

RWK (Robert Kerns):

Very good.  I think the essential point I was trying to convey with "variable"
is the uniqueness, of which much more powerful use is made than in Fortran and 
most other languages.  I think now that a good explanation of ATOMS is the key
to a good explanation of EQ, which until now I didn't have much of any idea on
how to present.  But if it is made clear that every occurance of an atom is EQ
and thusly every occurance of everything derived from an atom, such as it's
value, is EQ, but that typing in a LIST gives you a different EQUAL list every
time.  I think that the presentation could be given pretty much complete at
the time EQ is presented (or rather just before), and that the initial
presentation of atoms could be along the lines of "unique symbol" which may be
given a value.  I haven't yet re-written my first lesson along these lines, but
I intend to eliminate SETQ altogether (or rather excise it and rewrite it for
a later lesson).
