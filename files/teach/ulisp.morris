(defun create-board ()
       ((lambda (arr)
                (mapcar (lambda (x)
                                (aset (list 'empty nil)
                                      arr
                                      (quotient x 5)
                                      (remainder x 5)))
                        '(0     2     4
                             6  7  8
                          10 11 12 13 14
                             16 17 18
                          20    22    24))
                (mapcar (lambda (x)
                          (rplaca (cdr (aref arr 
                                             (quotient (car x) 5)
                                             (remainder (car x) 5)))
                                  (create-element-alist arr (cdr x))))
                        '((0 (2 4) (10 20))
                          (2 (7 12))
                          (4 (2 0) (14 24))
                          (6 (7 8) (11 16))
                          (7 (12 17))
                          (8 (7 6) (13 18))
                          (10 (11 12))
                          (11 (12 13))
                          (12 (7 2) (11 10) (13 14) (17 22))
                          (13 (12 11))
                          (14 (13 12))
                          (16 (11 6) (17 18))
                          (17 (12 7))
                          (18 (13 8) (17 16))
                          (20 (10 0) (22 24))
                          (22 (17 12))
                          (24 (14 4) (22 20))))
                arr)
        (make-array t '(5 5))))

(defun create-element-alist (board a-list)
       (cond ((null a-list) nil)
             (t (cons (list (aref board
                                  (quotient (caar a-list) 5)
                                  (remainder (caar a-list) 5))
                            (aref board
                                  (quotient (cadar a-list) 5)
                                  (remainder (cadar a-list) 5)))
                      (create-element-alist board (cdr a-list))))))

(defun display-board (board)
       (format-print () (aref format-array 5 0)) || Top Index
       (do ((x 0 (add1 x)))
           ((> x 4) t)
           (format-print (cons x nil)
                         (aref format-array 5 1)) || Side Index
           (format-print (printable-spaces x board)
                         (aref format-array x 0))
           (format-print ()
                         (aref format-array x 1))))

((lambda (newline tab half-tab)
         (setq format-array (make-array t '(6 2)))
         (aset (list nil '\------- nil '\------- nil newline)
               format-array 0 0)
         (aset (list tab '\| tab '\| tab '\| newline)
               format-array 0 1)
         (aset (list '\| half-tab nil '\--- nil '\--- nil tab '\| newline)
               format-array 1 0)
         (aset (list tab '\| half-tab '\| tab '\| half-tab '\| tab '\| newline)
               format-array 1 1)
         (aset (list nil '\--- nil '\--- nil '\--- nil '\--- nil newline)
               format-array 2 0)
         (aset (aref format-array 1 1)
               format-array 2 1)
         (aset (aref format-array 1 0)
               format-array 3 0)
         (aset (aref format-array 0 1)
               format-array 3 1)
         (aset (aref format-array 0 0)
               format-array 4 0)
         (aset (cons newline nil)
               format-array 4 1)
         (aset (list newline tab 0 half-tab 1 tab 2 half-tab 3 tab 4 newline newline)
               format-array 5 0)       || Top Index
         (aset (list half-tab nil tab)
               format-array 5 1)       || Side Index
         'format-array)
 (cvta 10) (cvta 9) '\ \ \ )

(defun format-print (object format)
       (cond ((null format) t)
             ((car format)
              (princ (car format))
              (format-print object (cdr format)))
             (t (princ (car object))
                (format-print (cdr object) (cdr format)))))

(defun printable-spaces (row board)
       (do ((col 4 (sub1 col))
            (p-s nil (cond ((aref board row col)
                            (cons (representation (aref board row col)) p-s))
                           (t p-s))))
           ((eq col -1) p-s)))

(defun representation (object)
       (cond ((eq (car object) 'red) 'R)
             ((eq (car object) 'black) 'B)
             (t 'O)))

