tag
LAMBDA

Lesson LAMBDA, Version 1			Kent M. Pitman, 3/28/79

    LAMBDA is not a function (unless you define it as one). It is used
to describe a function. It represents a binding context in which a 
definition can be executed.

    A simple example should serve to make this clearer. A function which
takes two args as inputs and adds them may be described in LAMBDA notation
as follows:

		(LAMBDA (VALUE1 VALUE2) (PLUS VALUE1 VALUE2))

As we said, however, this is a functional description, hence it must be
used as a function. Just saying something like 

		(PRINT (LAMBDA (VALUE1 VALUE2) (PLUS VALUE1 VALUE2)))

is as meaningless as saying

		(PRINT PLUS).

eval

(cond ((not (boundp 'b)) (setq B 3.)))

()

Functional operators must be applied. Thus the proper way to use LAMBDA
is the same way as you would use any function. Since you would say

		(PLUS 7. B)

you must also put LAMBDA expressions in the CAR of the list, like so:

		((LAMBDA (VALUE1 VALUE2)
			 (PLUS VALUE1 VALUE2))
		 7. B)

eval

(cond ((not (numberp B))
	(Cursorpos 'a tyo)
	(princ '|Don't use B in your tries since you haven't got it set| TYO)
	(terpri tyo)
	(princ '|to a number!| TYO)))
()

try

A form which contains a LAMBDA expression (or LAMBDA operator as it 
may be called) applied to some arguments is called a LAMBDA combination.

LAMBDA expressions have the general form:

		(LAMBDA <bound-variable-list> <definition>).

LAMBDA combinations have the general form:

		((LAMBDA <bound-variable-list> <definition>)
		 <arg1> <arg2> ... <argN>),

where the number of <arg>'s must be equal to the number of elements in 
the bound variable list.

What happens when a LAMBDA combination is executed in the following
order and manner:

	(1) The actual args, <arg1> ... <argN> in the above example,
	    are evaluated in order from left to right.

	(2) When all values have been computed, the values are bound
	    locally to each of the respective elements in the bound
	    variable list.

	(3) The body of the LAMBDA expression is executed in a context 
	    in which the local variables are bound to these values.

	(4) The value returned by the last expression in a LAMBDA
	    will be returned from a LAMBDA.

	    Note that this means that there may be more than one 
	    statement in the LAMBDA body. eg,

		(CONS ((LAMBDA (X) (PRINT X) X) A)
		      ((LAMBDA (X) (PRINT X) X) B))

	    is just like (CONS A B) but it will also print the value of
	    A and B in the process.

     Lambda may have some use in another case, which is the MAP'ing functions.
For example, if you wish to apply a function to every element of a list, 
you can do

		(MAPCAR 'CAR '((A) (B C) (D E F)))

which returns

		(A B D).

try

If the function that you desired to map was not defined somewhere and was
for single time application, you might just want to use a LAMBDA rather
than giving the function a name. 

For example, to take a list and return a list which had 10 added to every
element in the list, you might want to do:

		(MAPCAR '(LAMBDA (X) (+ X 10)) '(1 2 3))
which returns
		(11 12 13).

     Some lisp's define that LAMBDA is a self-quoting structure so that
(LAMBDA (X) X) for instance would eval to itself.  If you are more
comfortable with it doing so, you may feel free to use the following
incantation to make it be so:

	(DEFUN LAMBDA MACRO (X) (LIST 'FUNCTION X))

