tag
START

LISP LESSON intro version 0			     by Robert Kerns

1) ATOMS, NUMBERS, and things
     For the purposes of this course, LISP has two basic
kinds of objects--ATOMIC and LISTS.  the first group
includes such things as variable names (called ATOMS)
numbers (called FIXNUMS, FLONUMS, or BIGNUMS for integers,
floating-point numbers, and HUGE integers), files, arrays,
and several other types of objects.  The second group,
LISTS, are composites. a list consists of a (possibly empty)
list of atoms or other lists. hence:  A -- is an atom ATOM
-- is an atom (A) -- is the list of the atom A (A ATOM) --
is the list of the atoms A and ATOM.  nil -- is the empty
list.  Oddly enough, it is also an atom (because you cannot
get any smaller--just like A can't)

()              -- another way of writing nil
(())            -- the list of the null list
(nil)           -- the list of the null list
(nil a)         -- the list of the null list and a
((a b) c (d e)) -- see if you can figure this one out

3) talking to LISP

There is a magic function QUOTE which doesn't evaluate its
arguements.  Thus (quote foo) will evaluate to foo without giving
you an error.  (lesson is another of these magic functions, but we
will not get to them until a later stage).  (quote foo) is normally
abreviated 'foo for convenience.

Now that we can type in things and get them back, we can now learn
to give things values...

There is a magic function "SETQ" which gives things values.  Unlike
QUOTE, it takes its arguments two at a time.. Like QUOTE, it
doesn't evaluate its first argument.  However, it does evaluate
its second argument.

Now try a SETQING a few things.  Don't forget to try some lists!

If you get an error message, don't panic, just keep trying.

try

[a note about carriage returns and spaces.  LISP ignores carriage
returns entirly.  Thus you can type one in the middle of a word.  A
space  or paren MUST be used to end a word.]

Type control-a to continue with this lesson

try

Note which ones gave you error messages--the ones you mis-typed and
the ones where a variable didn't have any value.

Now for a convienient feature..type the following where ^L means
control-L..

(this is a test^L

see how it redisplays!
Type ^G to flush the input line, and then
type ^A to continue the lesson

try

4) LIST functions

now lets analyze some list structure.

consider ((this is) a (list of stuff)).

this-stuff has been SETQ'd to a value
find out this-stuff's value, then type control-a

eval

(setq this-stuff '((this is) a (list of stuff))) () 

try

There are two basic functions to take lists apart into their pieces.
the first of these is called CAR for historical reasons--the first
computer on which LISP was run, the IBM 7090, it refered to the
contents of the address register CAR to do this operation, (and the
other operation was called CDR for a similar register).  now find
out what (CAR this-stuff) is, and type control-a to continue.

try

As you saw, CAR gets you the first part of the list.  It is illegal
to try to take the car of something other than a list.  The other
operation gets you the rest of the list, that is all of the list
except the CAR.  Try taking the CDR of this-stuff now, by typing
(cdr this-stuff) --note that upper/lower case does not matter-- and
then type control-a like always

try

As we have seen, each list is composed of exactly two parts,
the CAR and the CDR.  each of these parts may be composed of
many parts, for example, take the CAR of both the CAR and
the CDR of this-stuff via (car (car this-stuff)) (car (cdr
this-stuff))

try

Now take the CDR of the CDR of the CDR

try

note that the operation CDR always gives a list.  It isn't quite
always true, but for our purposes, we can say that the CDR of a list
is always a list.

Now that we know how to take lists apart, lets learn how to put them
together.

There is only one operation needed to do this, and it is
called CONS.  CONS takes two arguments.  The first argument
becomes the CAR of the new list while the second becomses
the CDR.  Note that this means that the second argument must
always be a list.  now create a few lists.  Don't forget to
quote the arguments if you don't want their values
instead...of course, you can CONS things with this-stuff or
foo.

try

Now do (cons 'foo this-stuff), and then find out the value of
this-stuff

try

notice that this did not have any effect on the value of this-stuff

Now set some symbol to the result of a CONS.

remember that SETQ is for seting, and that the first argument is not evaluated.

try

5) Number functions

now we are ready to learn about numbers.  we shall stick to integers
for now.  type 5 and see what happens (remember that when typeing
atoms we must end with a space...

try

numbers do not need to be quoted, because they evaluate to
themselve.  now setq foo to the value of (cons 5 '(6))

try

ok, numbers can be elements of lists just like anything else.
but lets do some number things with numbers.
type (+ 5 6)

try

I'll bet you expected that one.  now try the following functions
\
// (remember, slash is the quoting character, so you need 2 of them)
*
-
on the number 7 and 23 and any others you want

try

Did you get them?  

The function // is the integer division function.  That is, it
returns the first argument divided by the second, to the next
"smallest" integer.  (that is, the next closest to the value 0, not
more negative if it is negative) The function \ is its counterpart,
the REMAINDER or MOD function.  And of course, * is multiply and -
is subtract.

now, for a surprise, try (+ 1 2 3 4)

try

see, we can add a bunch at a time.
we can also do this for multiplication (* 5 6 9)

try

6) DEFUN

We can now do a few useful things, so lets learn how to define a new
function.  we do this with a function called DEFUN.  DEFUN is
another magic function,  which doesn't evaluate any of its
arguments.  See if you can quess what this function does

(defun twice (a)
       (* 2 a))
eval
(defun twice (a) (* 2 a))
(sleep 10)
()
now that you have made your guess, let's give it a try.. use it on a
few  numbers (one at a time, please..it doesn't know what to do with
more) If you didn't guess, the function is called twice, and has
been defined for you already, so you can just say (twice 2) or
whatever.

try

OK, let me explain what that did.  the first part given to a DEFUN
is the name of the new function.  (twice in this case).  The second
part is a list of variable names.  in this case there is just one,
"a", but there could have been many (that's why you use a list, so
that it can tell whether you want just one or many--. the last part
is what you want the function to do.  when this part is evaluated,
any occurance of a variable which is in the list of variable names
before it is replaced with the corresponding argument. thus (twice
2) means (* 2 2), (twice 5) means (* 2 5), etc.  A is sometimes
called a bound variable, or is said to be "bound" to 2 or 5,
respectively.  the second argument to DEFUN is called the
BOUND-VARIABLE-LIST.

Now try to write a function which computes A+5*B where A and B are
the first and second arguments, respectively. (hint, use a bound
variable list with TWO elements...you don't have to call them A and
B if you don't want.

try

did it look something like:

(defun foo (a b)
       (+  A (* 5 B)))
?

Well, that's all for today, you can continue to play with this for a
while, but when you are done, just say done and end it with a space,
and you will get back to DDT.  Please finish like this, so that your
file will come out looking right.  Thank you, have a pleasant day.
