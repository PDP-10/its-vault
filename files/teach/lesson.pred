tag
START

In order for a program to do anything useful it must be able
to do one thing one time and one thing another.  In LISP
this is done with the same functional style as everything
else.  That is to say, doing something conditionally, and
testing conditions, are both done with the use of functions. 
The primary function for conditional execution is the
function COND.  COND is a magic function in that it doesn't
evaluate its arguments normally.  We shall call these
functions FEXPR's for reasons which will become clear when
we start defining FEXPR's of our own.

Before we start up using COND however, we need some tests.
The first test we shall discuss is called EQUAL, and it's
purpose is probably pretty obvious.  It's function is not so
obvious, however, so lets try a couple of examples.

eval
(setq foo '((a b) c d e (f g)))
(setq bar foo)
(setq dog 'animal)
(setq cat 'animal)
(setq geranium 'plant)
(setq violet 'plant)
(setq fadip nil)
(setq dore nil)
(setq man t)
(setq god t)
(setq pigs 7)
(setq figs 7)
(setq monkeys 8)
()

The following atoms have been given values for you:
foo bar dog cat geranium violet fadip dore man god pigs
figs monkeys

find their values, and then use them (or your own) to find
out which are EQUAL.  That is apply the function EQUAL to
pairs of them until you figure out the pattern.  I'll give
you a hint... T means true, and NIL means false in LISP.
For example: (equal dog dog) will return T
try

As you saw, EQUAL things are things which print out the same.
In time, we will be able to more precisly defin EQUAL in
terms of an even more primitive function EQ.  However, we
are not yet prepared to deal with that.

And now let us see how we can use predicates to choose what
we want to do.  LESSON COND follows.
tag
COND
The special form COND is a way to take one of several actions
depending on the truth/falsity of several predicates.  If you
don't yet know about predicates in LISP, do (LESSON PRED)

The description of T in lesson PRED as meaning TRUE is a
little misleading.  In fact, ANY non-nil can and will be
interpreted as true.  T is special in that it always
evaluates to itself and cannot be modified.

COND is an FEXPR which takes 1 to infinity of arguments.
Each argument, or clause, is of the form
"(<predicate> <form-1> <form-2>...<form-n>)" where predicate
is something which is evaluated to see if it is true or
false (non-nil or nil), and the form-i's are optional forms
to be evaluated.  Each of these clauses has it's predicate
evaluated in turn until one of them evaluates non-nil.  If
the predicate is nil, the following forms in the clause are
not evaluated.  However, if the predicate is non-nil, then
the rest of it's forms are evaluated in turn, and the last
one is returned as the value of the COND.  The remainder of
the COND is not examined at all.  If no predicate is true,
the value of the COND is NIL.

A few examples will help clarify

(COND ((EQUAL thing 'dog) 'animal)
      ((equal thing 'geranium) 'plant)
      (t 'dont-know))

Will return ANIMAL if THING is has the value DOG, PLANT if
it has the value GERANIUM, and otherwise it will return
DONT-KNOW.  Note that the t in the last clause is always
true.  Hence if nothing else is true, the last clause will
be evaluated.  This corresponds to ELSE in many other
languages.  

The following atoms have been given values for you to use in
experimenting with COND:

foo bar dog cat geranium violet fadip dore man god pigs
figs monkeys thing1 thing2 thing3 thing4 thing5 thing6
thing7 


eval
(setq foo '((a b) c d e (f g)))
(setq bar foo)
(setq dog 'animal)
(setq cat 'animal)
(setq geranium 'plant)
(setq violet 'plant)
(setq fadip nil)
(setq dore nil)
(setq man t)
(setq god t)
(setq pigs 7)
(setq figs 7)
(setq monkeys 8)
(setq thing1 'dog)
(setq thing2 'cat)
(setq thing3 'violet)
(setq thing4 'monkey)
(setq thing5 'man)
(setq thing6 'geranium)
(setq thing7 'pigs)
()

Now  give it a try.  

try

