(defun poly-multiply (poly1 poly2)
       (setq op ())
       (do k 1 (+ 2 k)
	   (= k (length poly1))
	   (setq a (take k poly1)
		 b (take (+ k 1)
			 poly1))
	   (do m 1 (+ 2 m)
	       (= m (length poly2))
	       (setq f (take m poly2)
		     g (take (+ m 2) poly2))
	       (cond ((= f g)
		      (append op
			      ((* b f)
			       (* 2 g)))))
	       (poly-add op))))

(defun poly-add (string)
       (setq r ()
	     s 0)
       (do v 1 (1+ v)
	   (= v 100)
	   (do foo 1 (+ 2 foo)
	       (= foo (length string))
	       (setq w (take foo string)
		     x (take (+ foo 1) string))
	       (cond ((= v x)
		      (setq s (+ s w)))
		     ((> s 0)
		      (append r (s v))
		      (setq s 0)
		      (print r))))))

(defun take (num arglist)	   ;TAKE should return
       (do tt 1 (+ 1 tt)	   ;the Nth item (num)
	   (> tt num)		   ;of arglist
	   (setq arglist (cdr arglist)))
       (car arglist))


(defun poly-subtract (arg)
       (poly-multiply '(-1 0) arg))
