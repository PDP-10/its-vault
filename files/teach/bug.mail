Date: 16 August 1979 16:09-EDT
From: Robert W. Kerns <RWK at MIT-MC>
To: DRS at MIT-MC
cc: KMP at MIT-MC

    Date: 27 June 1979 20:35-EDT
    From: David W. Sarup <DWS at MIT-MC>
    To:   RWK

    I was reading your teach;lisp program and had a suggestion and a question.  First of all a question.  Pig and this-stuff are given
    values (this is in the first lesson). 
    pig
    (ALIVE FUTURE-PORK-OF-AMERICA)
    this-stuff
    ((THIS IS) A (LIST OF STUFF))         Now
    (cons pig this-stuff)
    ((ALIVE FUTURE-PORK-OF-AMERICA) (THIS IS) A (LIST OF STUFF))

         So in effect we have gotten ( <pig> <stuff inside the list this-stuff>).
    Why didn't we get ( <pig> <this-stuff>) instead?  Ie. why are the two arguem-
    ents treated differently?

         As for the suggestion.  When you explain cons you should give one or
    two examples.  It took me quite a while to figure out what the syntax was
    for its two arguements)
No, you got (<pig> . <this-stuff>), which is what CONS does.  It returns
something who's CAR is the first argument, and who's CDR is the second.
Try taking CAR and CDR of the result.  Also you should try taking THIS-STUFF
apart with CAR and CDR, until you understand how lists are put together.
There's also a thing to show you the structure by printing boxes, KMP will
remember the name of it and how to use it.
   Date: 16 AUG 1979 1810-EDT
From: KMP at MIT-MC (Kent M. Pitman)
To: DWS at MIT-MC
CC: RWK at MIT-MC, (FILE [DSK:TEACH;BUG MAIL]) at MIT-MC

Try doing (EXAMINE-LIST PIG), (EXAMINE-LIST THIS-STUFF), and finally
(EXAMINE-LIST (CONS PIG THIS-STUFF)). Do it on a Decwriter so you 
can compare results. What you wanted to happen with this was the 
result of (LIST PIG THIS-STUFF). CONS says the args are respectively
the right and left half of a pair ... or to put it another way - the
first and rest of a list. Implementationally, the two args are treated
identically, but from a LIST-structure conceptual point of view there
is a difference. The CAR of a list is by definition an element (the FIRST
element) of a list. The CDR is by definition a list (the REST of the list).
Read this 5 times carefully before complaining ... it's confusing at first.
Drop by sometime when I'm in if you're still confused. It's better explained
either in person or by us sitting down and writing a carefully thought
out description which we haven't ever....
-kmp

KMP@MIT-MC 07/23/79 00:34:51
To: MARKS at MIT-MC
CC: (FILE [DSK:TEACH;BUG MAIL]) at MIT-MC
EQ is a pointer comparison operator. Any two objects which are really the
same object may be compared with EQ.

EQUAL is a comparison of structure operator. It will compare things like
lists, atoms, numbers (if of same datatype) ...

Do (DEFINITION EQ EQUAL) in a :TEACH;LISP program and see what it says about
how they are defined. Let me know if you are still confused.


Date: 9 June 1979 02:43-EDT
From: Robert W. Kerns <RWK at MIT-MC>
Subject: Forwarded mail
To: BUG-TEACH at MIT-MC

    Date: 8 June 1979 22:50-EDT
    From: Glenn S. Burke <GSB at MIT-MC>
    To:   bug-rwk
    Re:   :teach;lisp

    All those extra carriage-returns in/after break loops are obnoxious.
    They may be aesthetically pleasing on an infinitely long screen,
    but on a normal one they are an incredible waste.  (In case
    you are interested, it seems a useful command would be something
    to immediately re-do a ^A)
   
Date: 9 June 1979 03:03-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: TEACH
To: GSB at MIT-ML
cc: BUG-TEACH at MIT-MC

I'll look into your suggestions. Send :teach;lisp bugs to BUG-TEACH,
not BUG-RWK. Btw, are you finding the lessons useful? Do they teach
you a lot or are you finding yourself totally confused. Perhaps you're 
in need of more advanced lessons and/or some problem sets to try out 
to make sure you understand the material...
-kmp
 
Date: 9 June 1979 09:01-EDT
From: Glenn S. Burke <GSB at MIT-ML>
Subject: TEACH
To: KMP at MIT-MC

The lessons were being taken by a friend of mine with me looking
over his shoulder.  (He's never used its, and has had some vague
exposure to lisp years ago when he was an mit student.)
Probably the best thing would be to have some mode which wouldn't
even enter break-loops, for initial lessons.  They can be quite confusing
until one gets to some reasonably advanced stage.

