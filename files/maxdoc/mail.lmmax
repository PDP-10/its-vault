Date: Sat, 16 Nov 85 12:56:02 EST
From: "George J. Carrette" <GJC@MIT-MC.ARPA>
Subject:  BUG/SOLVE
To: DEVON@MIT-MC.ARPA
cc: BUG-LMMAX@MIT-MC.ARPA, JPG@MIT-MC.ARPA
In-reply-to: Msg of Fri 15 Nov 85 21:20:49 EST from Devon S. McCullough <DEVON at MIT-MC.ARPA>
Message-ID: <[MIT-MC.ARPA].720599.851116.GJC>

"Inconsistent" is a technical term in linear algebra. 

Date: Fri, 15 Nov 85 21:20:49 EST
From: "Devon S. McCullough" <DEVON@MIT-MC.ARPA>
Subject:  BUG/SOLVE
To: JPG@MIT-MC.ARPA
cc: BUG-LMMAX@MIT-MC.ARPA
In-reply-to: Msg of Thu 14 Nov 85 01:50:48 EST from Jeffrey P. Golden <JPG at MIT-MC.ARPA>
Message-ID: <[MIT-MC.ARPA].719916.851115.DEVON>

       In LMMAX in System 99.27, CADR 4.2, Experimental ZMail 54.4,
       MIT-Specific 23.0, Experimental Macsyma 6.1, microcode 320, GC@2,
       on Lisp Machine Nine:

       SOLVE([a=b,b=c],c); says
       Inconsistent equations:  (1)
       which is obviously bogus.
    Not only isn't it "obviously bogus", it is correct.  You are only solving 
    for C, so you aren't tying down A or B, so one of them is left free.
    Any of SOLVE([A=B,B=C],[C,A]); , SOLVE([A=B,B=C],[C,B]) , or 
    SOLVE([A=B,B=C],[C,A,B]) work fine.

The message "inconsistent equations" is vague and misleading to the
point of being downright user-hostile.  Something like "too many
variables free" or "too few variables requested" would be nicer.

Date: Thu, 14 Nov 85 01:50:48 EST
From: "Jeffrey P. Golden" <JPG@MIT-MC.ARPA>
Subject: BUG/SOLVE
To: DEVON@MIT-MC.ARPA
cc: BUG-LMMAX@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].717480.851114.JPG>

   Date: Wednesday, 13 November 1985, 08:33-EST
   From: Devon S. McCullough <Devon@MIT-MC.ARPA>
   To: BUG-LMMAX@MIT-MC.ARPA
   In LMMAX in System 99.27, CADR 4.2, Experimental ZMail 54.4,
   MIT-Specific 23.0, Experimental Macsyma 6.1, microcode 320, GC@2,
   on Lisp Machine Nine:

   Bug with no argument should put you in a mail buffer to bug-macsyma,
   or in any case should do something more than return FALSE.
BUG(); works fine on MC, so this is a bug in your Lispm Macsyma.

   SOLVE([a=b,b=c],c); says
   Inconsistent equations:  (1)
   which is obviously bogus.
Not only isn't it "obviously bogus", it is correct.  You are only solving 
for C, so you aren't tying down A or B, so one of them is left free.
Any of SOLVE([A=B,B=C],[C,A]); , SOLVE([A=B,B=C],[C,B]) , or 
SOLVE([A=B,B=C],[C,A,B]) work fine.

Received: from MIT-OZ by MIT-MC.ARPA via Chaosnet; 13 NOV 85  16:38:15 EST
Received: from MIT-LISPM-9 by MIT-OZ via Chaosnet; 13 Nov 85 08:34-EST
Date: Wednesday, 13 November 1985, 08:33-EST
From: Devon S. McCullough <Devon@MIT-MC.ARPA>
To: BUG-LMMAX@MIT-MC.ARPA

In LMMAX in System 99.27, CADR 4.2, Experimental ZMail 54.4,
MIT-Specific 23.0, Experimental Macsyma 6.1, microcode 320, GC@2,
on Lisp Machine Nine:



"Bug with no argument should put you in a mail buffer to bug-macsyma,
or in any case should do something more than return FALSE.

SOLVE([a=b,b=c],c)\; says
Inconsistent equations:  (1)
Which is obviously bogus."

Received: from MIT-XX.ARPA by MIT-MC.ARPA 13 Nov 85 16:10:11 EST
Received: from MIT-LISPM-9 by MIT-XX via Chaosnet; 13 Nov 85 08:27-EST
Date: Wednesday, 13 November 1985, 08:26-EST
From: Devon S. McCullough <Devon@MIT-MC.ARPA>
To: BUG-LMMAX@MIT-MC.ARPA

In LMMAX in System 99.27, CADR 4.2, Experimental ZMail 54.4,
MIT-Specific 23.0, Experimental Macsyma 6.1, microcode 320, GC@2,
on Lisp Machine Nine:



Date: Friday, 26 October 1984, 13:41-EDT
From: Elisha Sacks <ELISHA at MIT-OBERON>
To: BUG-LMMAX at MIT-MC

In LMMAX in Experimental System 99.9, CADR 4.0, Experimental ZMail 54.2,
MIT-Specific 23.0, Experimental Macsyma 4.0, microcode 320, GC@2,
on Lisp Machine Nine:



Received: from SCRC-MISSISSIPPI by SCRC-TENEX with CHAOS; Thu 17-Nov-83 14:23:53-EST
Date: Thursday, 17 November 1983, 14:21-EST
From: James E. O'Dell <jim@SCRC-CUPID>
Subject: --More-- processing for multiscreen expressions
To: ASB@SCRC-CUPID
Cc: BUG-LMMAX@MIT-MC
In-reply-to: The message of 7 Aug 83 11:26-EDT from Richard Brenner <ASB at SCRC-CUPID>

    Date: Sunday, 7 August 1983, 11:26-EDT
    From: Richard Brenner <ASB@SCRC-CUPID>
    In LMMAX in Release 4.4, Experimental Macsyma 12.15, FEP 12,
    site configuration 62, on Yukon:



    Why don't I get --More-- processing when displaying the expression:

    Q^80*T^2*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)^2+Q^79*T*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)^2+Q^78*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)^2
					    +Q^74*T^2*(T^2-T+1)^2*(T^2+T+1)^2+Q^77*T^2*(T+1)*(T^2-T+1)^2*(T^2+T+1)^2
					    +Q^76*T*(T+1)*(T^2-T+1)^2*(T^2+T+1)^2+Q^75*(T+1)*(T^2-T+1)^2*(T^2+T+1)^2
					    +Q^73*T*(T^2-T+1)^2*(T^2+T+1)^2+Q^72*(T^2-T+1)^2*(T^2+T+1)^2
					    +Q^71*T^2*(T+1)^2*(T^2-T+1)*(T^2+T+1)^2+Q^70*T*(T+1)^2*(T^2-T+1)*(T^2+T+1)^2
					    +Q^69*(T+1)^2*(T^2-T+1)*(T^2+T+1)^2+Q^65*T^2*(T^2-T+1)*(T^2+T+1)^2
					    +Q^68*T^2*(T+1)*(T^2-T+1)*(T^2+T+1)^2+Q^67*T*(T+1)*(T^2-T+1)*(T^2+T+1)^2
					    +Q^66*(T+1)*(T^2-T+1)*(T^2+T+1)^2+Q^64*T*(T^2-T+1)*(T^2+T+1)^2+Q^63*(T^2-T+1)*(T^2+T+1)^2
					    +Q^62*T^2*(T+1)^2*(T^2+T+1)^2+Q^61*T*(T+1)^2*(T^2+T+1)^2+Q^60*(T+1)^2*(T^2+T+1)^2
					    +Q^56*T^2*(T^2+T+1)^2+Q^59*T^2*(T+1)*(T^2+T+1)^2+Q^58*T*(T+1)*(T^2+T+1)^2
					    +Q^57*(T+1)*(T^2+T+1)^2+Q^55*T*(T^2+T+1)^2+Q^54*(T^2+T+1)^2
					    +Q^53*T^2*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)+Q^52*T*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)
					    +Q^51*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)+Q^47*T^2*(T^2-T+1)^2*(T^2+T+1)
					    +Q^50*T^2*(T+1)*(T^2-T+1)^2*(T^2+T+1)+Q^49*T*(T+1)*(T^2-T+1)^2*(T^2+T+1)
					    +Q^48*(T+1)*(T^2-T+1)^2*(T^2+T+1)+Q^46*T*(T^2-T+1)^2*(T^2+T+1)+Q^45*(T^2-T+1)^2*(T^2+T+1)
					    +Q^44*T^2*(T+1)^2*(T^2-T+1)*(T^2+T+1)+Q^43*T*(T+1)^2*(T^2-T+1)*(T^2+T+1)
					    +Q^42*(T+1)^2*(T^2-T+1)*(T^2+T+1)+Q^38*T^2*(T^2-T+1)*(T^2+T+1)
					    +Q^41*T^2*(T+1)*(T^2-T+1)*(T^2+T+1)+Q^40*T*(T+1)*(T^2-T+1)*(T^2+T+1)
					    +Q^39*(T+1)*(T^2-T+1)*(T^2+T+1)+Q^37*T*(T^2-T+1)*(T^2+T+1)+Q^36*(T^2-T+1)*(T^2+T+1)
					    +Q^35*T^2*(T+1)^2*(T^2+T+1)+Q^34*T*(T+1)^2*(T^2+T+1)+Q^33*(T+1)^2*(T^2+T+1)+Q^29*T^2*(T^2+T+1)
					    +Q^32*T^2*(T+1)*(T^2+T+1)+Q^31*T*(T+1)*(T^2+T+1)+Q^30*(T+1)*(T^2+T+1)+Q^28*T*(T^2+T+1)
					    +Q^27*(T^2+T+1)+Q^26*T^2*(T+1)^2*(T^2-T+1)^2+Q^25*T*(T+1)^2*(T^2-T+1)^2
					    +Q^24*(T+1)^2*(T^2-T+1)^2+Q^20*T^2*(T^2-T+1)^2+Q^23*T^2*(T+1)*(T^2-T+1)^2
					    +Q^22*T*(T+1)*(T^2-T+1)^2+Q^21*(T+1)*(T^2-T+1)^2+Q^19*T*(T^2-T+1)^2+Q^18*(T^2-T+1)^2
					    +Q^17*T^2*(T+1)^2*(T^2-T+1)+Q^16*T*(T+1)^2*(T^2-T+1)+Q^15*(T+1)^2*(T^2-T+1)+Q^11*T^2*(T^2-T+1)
					    +Q^14*T^2*(T+1)*(T^2-T+1)+Q^13*T*(T+1)*(T^2-T+1)+Q^12*(T+1)*(T^2-T+1)+Q^10*T*(T^2-T+1)
					    +Q^9*(T^2-T+1)+Q^8*T^2*(T+1)^2+Q^7*T*(T+1)^2+Q^6*(T+1)^2+Q^2*T^2+Q^5*T^2*(T+1)+Q^4*T*(T+1)
					    +Q^3*(T+1)+Q*T+1

I tried it and get the correct behavior in Macsyma 20.

Received: from SCRC-MISSISSIPPI by SCRC-TENEX with CHAOS; Thu 17-Nov-83 14:21:09-EST
Date: Thursday, 17 November 1983, 14:18-EST
From: James E. O'Dell <jim@SCRC-CUPID>
Subject: Parser bugs
To: asb@SCRC-TENEX
Cc: BUG-LMMAX@MIT-MC
In-reply-to: The message of 15 Aug 83 12:25-EDT from asb at SCRC-TENEX

    Date: Monday, 15 August 1983, 12:25-EDT
    From: asb@SCRC-TENEX
    In LMMAX in System 222.247, Zmail 74.46, LMFS 30.42, Tape 13.1,
    Experimental Macsyma 12.14, microcode 991, site configuration 67, on Schnauzer:


    -(b+a)*c; -> (-B-A)*C
    but at MC this gives -(b+a)*c
Has been fixed in the latest macsyma patches for Macsyma 20.

Date: 25 August 1983 16:24 EDT
From: V. Ellen Golden <ELLEN @ MIT-MC>
Subject: PAGEPAUSE
To: JIM @ SCRC-CUPID
cc: JPG @ MIT-MC, ASB @ MIT-MC, BUG-LMMAX @ MIT-MC, ELLEN @ MIT-MC

    Received: from SCRC-SCHNAUZER by SCRC-TENEX with CHAOS; Mon 22-Aug-83 11:45:40-EDT
    Date: Monday, 22 August 1983, 11:51-EDT
    From: Jim O'Dell <JIM@SCRC-CUPID>
    In-reply-to: The message of 7 Aug 83 17:37-EDT from Jeffrey P. Golden <JPG at MIT-MC>

        Date: 7 August 1983 17:37 EDT
        From: Jeffrey P. Golden <JPG @ MIT-MC>
        After thinking about it some more, I decided that doing PAGEPAUSE:TRUE$ 
        on a Lispm should give an 'unavailable' error message rather than just 
        doing essentially nothing.  JPG;SUPRV > has been so fixed.
    Did describe get updated also?
Has been updated.

Received: from SCRC-SCHNAUZER by SCRC-TENEX with CHAOS; Mon 22-Aug-83 11:45:40-EDT
Date: Monday, 22 August 1983, 11:51-EDT
From: Jim O'Dell <JIM@SCRC-CUPID>
Subject: PAGEPAUSE
To: JPG@MIT-MC
Cc: ASB@MIT-MC, BUG-LMMAX@MIT-MC, ELLEN@MIT-MC
In-reply-to: The message of 7 Aug 83 17:37-EDT from Jeffrey P. Golden <JPG at MIT-MC>

    Date: 7 August 1983 17:37 EDT
    From: Jeffrey P. Golden <JPG @ MIT-MC>
    After thinking about it some more, I decided that doing PAGEPAUSE:TRUE$ 
    on a Lispm should give an 'unavailable' error message rather than just 
    doing essentially nothing.  JPG;SUPRV > has been so fixed.
Did describe get updated also?

Received: from SCRC-ASSABET by SCRC-TENEX with CHAOS; Mon 15-Aug-83 12:26:58-EDT
Date: Monday, 15 August 1983, 12:26-EDT
From: Robert W. Kerns <RWK@SCRC-YUKON>
To: BUG-LMMAX@MIT-MC

In LMMAX in Release 4.4+AAAI, Experimental Macsyma 12.15,
site configuration 6, on Assabet:


-(B+A)*C;  -> (-B-A)*C
ut at MC this gives  -(B+A)*C

Received: from SCRC-SCHNAUZER by SCRC-TENEX with CHAOS; Mon 15-Aug-83 12:26:11-EDT
Date: Monday, 15 August 1983, 12:25-EDT
From: asb@SCRC-TENEX
Sender: RP@SCRC-TENEX
To: BUG-LMMAX@MIT-MC

In LMMAX in System 222.247, Zmail 74.46, LMFS 30.42, Tape 13.1,
Experimental Macsyma 12.14, microcode 991, site configuration 67, on Schnauzer:


-(b+a)*c; -> (-B-A)*C
but at MC this gives -(b+a)*c

Date: 7 August 1983 17:37 EDT
From: Jeffrey P. Golden <JPG @ MIT-MC>
Subject: PAGEPAUSE
To: ASB @ MIT-MC, BUG-LMMAX @ MIT-MC
cc: ELLEN @ MIT-MC

After thinking about it some more, I decided that doing PAGEPAUSE:TRUE$ 
on a Lispm should give an 'unavailable' error message rather than just 
doing essentially nothing.  JPG;SUPRV > has been so fixed.

Date: 7 August 1983 13:46 EDT
From: Jeffrey P. Golden <JPG @ MIT-MC>
Subject: PAGEPAUSE
To: asb @ SCRC-CUPID
cc: BUG-LMMAX @ MIT-MC, ELLEN @ MIT-MC

   ASB@SCRC-CUPID 08/07/83 11:29-EDT  Re.: PAGEPAUSE:TRUE$
   To: BUG-LMMAX@MIT-MC
   In LMMAX in Release 4.4, Experimental Macsyma 12.15, FEP 12,
   site configuration 62, on Yukon:
   PAGEPAUSE:TRUE$ causes
   >>Trap: The function PAGEPAUSE1 is undefined."
Has been fixed in MC:JPG;SUPRV > .
The current PAGEPAUSE code has meaning only on MC, so SUPRV has been 
fixed to reflect that.  If it stays this way, we can either have 
DESCRIBE(PAGEPAUSE); document this fact or have the user get a warning 
message or error message if he does PAGEPAUSE:TRUE$ or both.

Received: from SCRC-YUKON by SCRC-TENEX with CHAOS; Sun 7-Aug-83 11:31:30-EDT
Date: Sunday, 7 August 1983, 11:29-EDT
From: Richard Brenner <ASB@SCRC-CUPID>
Subject: PAGEPAUSE:TRUE$
To: BUG-LMMAX@MIT-MC

In LMMAX in Release 4.4, Experimental Macsyma 12.15, FEP 12,
site configuration 62, on Yukon:



PAGEPAUSE:TRUE$
causes
>>Trap: The function PAGEPAUSE1 is undefined."

Received: from SCRC-YUKON by SCRC-TENEX with CHAOS; Sun 7-Aug-83 11:28:42-EDT
Date: Sunday, 7 August 1983, 11:26-EDT
From: Richard Brenner <ASB@SCRC-CUPID>
Subject: --More-- processing for multiscreen expressions
To: BUG-LMMAX@MIT-MC
Cc: asb@SCRC-CUPID

In LMMAX in Release 4.4, Experimental Macsyma 12.15, FEP 12,
site configuration 62, on Yukon:



Why don't I get --More-- processing when displaying the expression:

Q^80*T^2*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)^2+Q^79*T*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)^2+Q^78*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)^2
					+Q^74*T^2*(T^2-T+1)^2*(T^2+T+1)^2+Q^77*T^2*(T+1)*(T^2-T+1)^2*(T^2+T+1)^2
					+Q^76*T*(T+1)*(T^2-T+1)^2*(T^2+T+1)^2+Q^75*(T+1)*(T^2-T+1)^2*(T^2+T+1)^2
					+Q^73*T*(T^2-T+1)^2*(T^2+T+1)^2+Q^72*(T^2-T+1)^2*(T^2+T+1)^2
					+Q^71*T^2*(T+1)^2*(T^2-T+1)*(T^2+T+1)^2+Q^70*T*(T+1)^2*(T^2-T+1)*(T^2+T+1)^2
					+Q^69*(T+1)^2*(T^2-T+1)*(T^2+T+1)^2+Q^65*T^2*(T^2-T+1)*(T^2+T+1)^2
					+Q^68*T^2*(T+1)*(T^2-T+1)*(T^2+T+1)^2+Q^67*T*(T+1)*(T^2-T+1)*(T^2+T+1)^2
					+Q^66*(T+1)*(T^2-T+1)*(T^2+T+1)^2+Q^64*T*(T^2-T+1)*(T^2+T+1)^2+Q^63*(T^2-T+1)*(T^2+T+1)^2
					+Q^62*T^2*(T+1)^2*(T^2+T+1)^2+Q^61*T*(T+1)^2*(T^2+T+1)^2+Q^60*(T+1)^2*(T^2+T+1)^2
					+Q^56*T^2*(T^2+T+1)^2+Q^59*T^2*(T+1)*(T^2+T+1)^2+Q^58*T*(T+1)*(T^2+T+1)^2
					+Q^57*(T+1)*(T^2+T+1)^2+Q^55*T*(T^2+T+1)^2+Q^54*(T^2+T+1)^2
					+Q^53*T^2*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)+Q^52*T*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)
					+Q^51*(T+1)^2*(T^2-T+1)^2*(T^2+T+1)+Q^47*T^2*(T^2-T+1)^2*(T^2+T+1)
					+Q^50*T^2*(T+1)*(T^2-T+1)^2*(T^2+T+1)+Q^49*T*(T+1)*(T^2-T+1)^2*(T^2+T+1)
					+Q^48*(T+1)*(T^2-T+1)^2*(T^2+T+1)+Q^46*T*(T^2-T+1)^2*(T^2+T+1)+Q^45*(T^2-T+1)^2*(T^2+T+1)
					+Q^44*T^2*(T+1)^2*(T^2-T+1)*(T^2+T+1)+Q^43*T*(T+1)^2*(T^2-T+1)*(T^2+T+1)
					+Q^42*(T+1)^2*(T^2-T+1)*(T^2+T+1)+Q^38*T^2*(T^2-T+1)*(T^2+T+1)
					+Q^41*T^2*(T+1)*(T^2-T+1)*(T^2+T+1)+Q^40*T*(T+1)*(T^2-T+1)*(T^2+T+1)
					+Q^39*(T+1)*(T^2-T+1)*(T^2+T+1)+Q^37*T*(T^2-T+1)*(T^2+T+1)+Q^36*(T^2-T+1)*(T^2+T+1)
					+Q^35*T^2*(T+1)^2*(T^2+T+1)+Q^34*T*(T+1)^2*(T^2+T+1)+Q^33*(T+1)^2*(T^2+T+1)+Q^29*T^2*(T^2+T+1)
					+Q^32*T^2*(T+1)*(T^2+T+1)+Q^31*T*(T+1)*(T^2+T+1)+Q^30*(T+1)*(T^2+T+1)+Q^28*T*(T^2+T+1)
					+Q^27*(T^2+T+1)+Q^26*T^2*(T+1)^2*(T^2-T+1)^2+Q^25*T*(T+1)^2*(T^2-T+1)^2
					+Q^24*(T+1)^2*(T^2-T+1)^2+Q^20*T^2*(T^2-T+1)^2+Q^23*T^2*(T+1)*(T^2-T+1)^2
					+Q^22*T*(T+1)*(T^2-T+1)^2+Q^21*(T+1)*(T^2-T+1)^2+Q^19*T*(T^2-T+1)^2+Q^18*(T^2-T+1)^2
					+Q^17*T^2*(T+1)^2*(T^2-T+1)+Q^16*T*(T+1)^2*(T^2-T+1)+Q^15*(T+1)^2*(T^2-T+1)+Q^11*T^2*(T^2-T+1)
					+Q^14*T^2*(T+1)*(T^2-T+1)+Q^13*T*(T+1)*(T^2-T+1)+Q^12*(T+1)*(T^2-T+1)+Q^10*T*(T^2-T+1)
					+Q^9*(T^2-T+1)+Q^8*T^2*(T+1)^2+Q^7*T*(T+1)^2+Q^6*(T+1)^2+Q^2*T^2+Q^5*T^2*(T+1)+Q^4*T*(T+1)
					+Q^3*(T+1)+Q*T+1

Date: Sunday, 12 June 1983, 10:22-EDT
From: Richard Brenner <ASB at SCRC-VIXEN>
Subject: PLOT3D problems

To: BUG-LMMAX at MIT-MC

In LMMAX in Release 4.3 (Beta test), System 222.232, Hardcopy 11.16,
LMFS 30.35, Experimental Macsyma 12.7, microcode 991,
site configuration 53, on Schnauzer:



PLOT3D(J1(SQRT(Y^2+X^2)),X,-12,12,Y,-12,12);
VIEWPT1;
CENTERPLOT1;
SQRT(2*84.0^2);
VIEWPT:[%,0.0,LAST(VIEWPT1)];
REPLOT();

causes:  attempt to divide by 0 in $INITPERSPEC

Date: 6 Jun 1983 08:12:42-EDT
From: asb@scrc-vixen
To: ASB@SCRC-VIXEN, jim@SCRC-VIXEN
Subject: Parser error
Cc: BUG-LMMAX@MIT-MC

Thanks.

Date: Monday, 6 June 1983, 06:48-EDT
From: Jim O'Dell <jim at SCRC-VIXEN>
Subject: Parser error
To: ASB at SCRC-VIXEN
Cc: BUG-LMMAX at MIT-MC
In-reply-to: The message of 30 May 83 09:50-EDT from Richard Brenner <ASB at SCRC-VIXEN>

    Date: Monday, 30 May 1983, 09:50-EDT
    From: Richard Brenner <ASB at SCRC-VIXEN>
    In LMMAX in Release 4.3 (Beta test), System 222.232, Hardcopy 11.16,
    LMFS 30.35, Experimental Macsyma 12.7, microcode 991,
    site configuration 53, on Schnauzer:



    FOR I:IF TRUE THEN 1 ELSE 0 THRU 4 DO PRINT(I)
    causes an error:  THRU is not an infix operator.
    This works fine on MC.  It works here if you put parens around the 
    IF TRUE ...ELSE 0
Fixed in 12.8

Date: Monday, 30 May 1983, 09:50-EDT
From: Richard Brenner <ASB at SCRC-VIXEN>
To: BUG-LMMAX at MIT-MC

In LMMAX in Release 4.3 (Beta test), System 222.232, Hardcopy 11.16,
LMFS 30.35, Experimental Macsyma 12.7, microcode 991,
site configuration 53, on Schnauzer:



FOR I:IF TRUE THEN 1 ELSE 0 THRU 4 DO PRINT(I)
causes an error:  THRU is not an infix operator.
This works fine on MC.  It works here if you put parens around the 
IF TRUE ...ELSE 0

Date: Tuesday, 29 March 1983, 14:31-EST
From: Jim O'Dell <jim at SCRC-VIXEN>
Subject: BIND-TRAMP1
To: GJC at MIT-MC
Cc: BUG-LMMAX at MIT-MC
In-reply-to: The message of 14 Mar 83 23:18-EST from James E. O'Dell <JIM at MIT-MC>

    Date: 14 March 1983 23:18 EST
    From: James E. O'Dell <JIM @ MIT-MC>
	Date: 14 March 1983 00:13 EST
	From: Jeffrey P. Golden <JPG>
	   GJC@MIT-MC 03/13/83 14:00-EST  Re.: ROMBERG
	   In macsyma in Release 4.0, Experimental Macsyma 6.13,
	   site configuration 12, on Zarniwoop:
	   Romberg(x,x,0,1); gets BIND-TRAMP1$ as an undefined function.
	   I think this is a macro in NUMERM.
Fixed in Macsyma 11 if you load patches. I'll come over and generate
a new Macsyma soon.

Date: 14 March 1983 23:18 EST
From: James E. O'Dell <JIM @ MIT-MC>
To: BUG-LMMAX @ MIT-MC
cc: GJC @ MIT-MC, JPG @ SCRC-TENEX
In-reply-to: The message of 14 Mar 1983 00:13 EST from Jeffrey P. Golden <JPG>

    Date: 14 March 1983 00:13 EST
    From: Jeffrey P. Golden <JPG>
    To:   GJC
    cc:   JIM, JPG

       GJC@MIT-MC 03/13/83 14:00-EST  Re.: ROMBERG
       To: BUG-macsyma at mc
       In macsyma in Release 4.0, Experimental Macsyma 6.13,
       site configuration 12, on Zarniwoop:
       Romberg(x,x,0,1); gets BIND-TRAMP1$ as an undefined function.
       I think this is a macro in NUMERM.
    Yes, it is a macro in LISPM;NUMERM.  JIM wrote the latest source for NUMERM 
    and changed just this section, so I suppose he may wish to check this out.
    As this appears to be a bug in a Lispm Macsyma, I believe BUG-LMMAX 
    would have been the correct place to have sent this mail?
    (One of you may forward it there if you wish.)
This seems to be a bug in my rewrite of this code to work on Multics.

Date: Monday, 14 February 1983, 11:49-EST
From: Richard Pavelle <RP at SCRC-TENEX>
To: BUG-LMMAX at MIT-MC
Cc: rp at SCRC-TENEX, bug-hardcopy at SCRC-TENEX

In LMMAX in Release 4.1, System 222.160, Zmail 74.40, LMFS 30.19,
Experimental Macsyma 6.5, site configuration 47, on Schnauzer:


Plot3d offers a menu below the plot for hardcopy and other things.
Hardcopy, when selected, does nothing. 

Date: 5 January 1983 02:37-EST
From: Howard I. Cannon <HIC @ MIT-MC>
Subject: 3600 Macsyma
To: BUG-LMMAX @ MIT-MC
cc: JPG @ MIT-MC, RWG @ MIT-MC, JIM @ MIT-MC

Please let it be known that I've made changes to the files on POINTER:>MACSYMA>xxx>yyy
since that's what the SYSDEF pointed to.  These changes go towards making 
Macsyma run on the 3600.  I expect that they will be merged into the  official
sources by the person responsible for not updating the sysdef files.

I expect an acknowledgment of this message.

Date: Monday, 6 December 1982, 02:25-PST
From:  <RWG at SPA-NIMBUS>
To: BUG-lmmax at MIT-MC

In lmmax in System 210.130, ZMail 45.11, LMFS 27.25, Tape 10.9,
Canon 14.6, Experimental MUSIC 4.0, Obsolete DAEDALUS 50.0,
Obsolete PLA 1.0, Experimental Macsyma 1.1, Experimental Print 22.2,
microcode 896, site configuration 11, Demo/LGP/11 *** LOG ME IN., on Nimbus:

PLOT of a function with extrema of magnitudes < .0005 labels the ordinates
uninformatively (0.000 and -0.000).  Likewise for small abscissae.

Date: 13 October 1982 04:29-EDT
From: Bill Gosper <RWG at MIT-MC>
Subject: reality rot
To: BUG-LMMAX at MIT-MC

i can't reproduce my claim of DEFINE not EVALing its 1st arg.  sorry.

Date: 9 October 1982 06:27-EDT
From: Bill Gosper <RWG at MIT-MC>
To: BUG-LMMAX at MIT-MC

at spa, DEFINE doesn't eval 1st arg, like at mc many moons ago.

also, NAMEPLOT creates *values*, which crash if you eval them.
(something about dimension-array-object calling dimension atom.)

Date: 7 October 1982 05:52-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RWG at MIT-MC
cc: BUG-LMMAX at MIT-MC

   RWG@MIT-MC 10/07/82 01:28:17
   To: (BUG LMMAX) at MIT-MC
   At spa, ident(2)^^-1,detout; has MEVAL handing FBOUNDP a fef.
has been fixed in MC:PAULW;MATRIX > .

Date: 7 October 1982 01:28-EDT
From: Bill Gosper <RWG at MIT-MC>
To: BUG-LMMAX at MIT-MC

At spa, ident(2)^^-1,detout; has MEVAL handing FBOUNDP a fef.

Date: Tuesday, 31 August 1982  21:15-EDT
From: HIC at SCRC-TENEX
To: Bill Gosper <RWG at MIT-MC>
Cc: BUG-LMMAX at MIT-MC
Subject: algsys and binding

    Date: Tuesday, 31 August 1982  08:13-EDT
    From: Bill Gosper <RWG at MIT-MC>
    To:   BUG-LMMAX at MIT-MC
    Re:   algsys and binding

    on a related matter, hic patched (m?)unbind to have
    a without-interrupts around some critical code, but that
    patch may have vanished along with another one he made
    to remove double error msgs, which have recrudesced.

My fault -- they never made it into the source here.  The changes
should exist as patches on MLB's disk -- maybe you (someone) could
mail? a tape to me.

Date: 31 August 1982 09:05-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RWG at MIT-MC
cc: BUG-LMMAX at MIT-MC

   RWG@MIT-MC 08/31/82 08:13:41 Re: algsys and binding
   To: (BUG LMMAX) at MIT-MC
   Why must algsys *bind* the unknowns?  most of the time they
   were being bound to themselves.
It is strange to have this question come from you who has complained 
the most about double evaluations from SOLVE, etc.  ALGSYS foolishly 
uses evaluation to accomplish many tasks.  So it uses bindings to 
protect itself as much as possible from evaluation lossage.  Some 
day ALGSYS should be fixed wrt this lossage, but that is not an easy task.

Date: 31 August 1982 08:13-EDT
From: Bill Gosper <RWG at MIT-MC>
Subject: algsys and binding
To: BUG-LMMAX at MIT-MC

inconclusive experiments indicate that you can't run two
algsyses simultaneoulsy because they trash each other's
*bindings* of the unknowns.  also, these unknowns then
appear among the VALUES after an abort.  why must
algsys *bind* the unknowns?  most of the time they
were being bound to themselves.

on a related matter, hic patched (m?)unbind to have
a without-interrupts around some critical code, but that
patch may have vanished along with another one he made
to remove double error msgs, which have recrudesced.

Date: 24 July 1982 02:51-EDT
From: Bill Gosper <RWG at MIT-MC>
To: BUG-LMMAX at MIT-MC
cc: JPG at MIT-MC, BMT at MIT-MC, RWG at MIT-MC

f(a):=729*x^3*z^9+27*a*x^6*z^6+18*x^12*y^9*z^3+a*y^12;
factor(expand(f(1)*f(-1))) returns unfactored after a few min on lispm,
exhausts core after lo-o-ong time on mc (even tho inhomog).

Date: 7 July 1982 02:37-EDT
From: Bill Gosper <RWG at MIT-MC>
To: BUG-LMMAX at MIT-MC

While demoing a recent macsyma (sorry, i don't know the version) in 210:
PRIME(2) bombed.
a<=b  and a>=b were syntax errors, as were the single character equi-
 valents of >= and <=.
TRACE is missing.
INVERT is missing.
ODE(2) is missing.

Date: 16 June 1982 11:49-EDT
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

I am going to hack the SYSDEF file such that a macro will expand into
the DEFSYSTEM needed. Well, at least I'm thinking about it.
The reason has to do with the WHERE-TO-PUT-THE-QFASL's problem.
For example, on ITS I had to create two directories LMMAXR and LMMAXQ
because of ITS crockish limitation on the number of files per directory.
How I see that this same feature has been ported to other sites such
as SCRC, for no apparent reason. Another problem is that I want
to have the sources on one machine, and the QFASLs and patches on
another. MIT-OZ seems a convenient enough place to store QFASL's for
system-86 Macsyma.

Maybe there is some kludge with defining a logical pathname for LMMAXR,
and LMMAXQ => MIT-OZ that will work. Sigh...

Date: Sunday, 30 May 1982, 22:32-EDT
From: Howard I. Cannon <HIC at SCRC-TENEX>
Subject: Plotting to press files
To: bug-lmmax at MIT-MC


I have moved the new plot sources back to MC.  They have been pretty
well tested here at SCRC.  The variable for setting the plot filename in
PLOTMODE(PRESS) is called PLOT_PRESS_FILE.  I have not tested this at
MIT, so I don't know whether the press files will work on the Dover, but
it's pretty had to believe that they won't.  Someone should try one at
some point.

Date: Monday, 24 May 1982  14:35-EDT
From: HIC at SCRC-TENEX
To:   Jeffrey P. Golden <JPG at MIT-MC>
Cc:   BUG-LMMAX at MIT-MC
Subject: Lisp Machine plotting 

    Date: Monday, 24 May 1982  07:33-EDT
    From: Jeffrey P. Golden <JPG at MIT-MC>
    To:   HIC
    cc:   BUG-LMMAX at MIT-MC
    Re:   Lisp Machine plotting 

    Maybe you can choose a better name than PLOTFILENAME that conveys 
    that it has something to do with press files?  (PLOT_PRESS_FILE 
    or something?)

OK, I'm happy with PLOT_PRESS_FILE.  I'll make that change before I
update the sources.

Date: 24 May 1982 07:33-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: Lisp Machine plotting 
To: HIC at SCRC-TENEX
cc: BUG-LMMAX at MIT-MC

Maybe you can choose a better name than PLOTFILENAME that conveys 
that it has something to do with press files?  (PLOT_PRESS_FILE 
or something?)

Date: Sunday, 23 May 1982, 19:24-EDT
From: Howard I. Cannon <HIC at SCRC-TENEX>
Subject: Lisp Machine plotting
To: bug-lmmax at MIT-MC

I've added a new plotmode, PRESS, which causes the plotting stuff to write
a press file.  It seems to work, at least here on the Symbolics Canon printer.
I did it with press, so it should also make Dover printable files.  I'll be
updating the sources on MC in the near future.

PLOTFILENAME controls what file the press file is written to.

Date: 22 May 1982 21:21-EDT
From: Howard I. Cannon <HIC at MIT-MC>
Subject:  PLOT*
To: BUG-LMMAX at MIT-MC

That silly asterisk causes problems for various file systems
(including ITS...  try :FIND PLOT* sometime!).  Anyway, I renamed
PLOT* to PLOTLL.  I believe I fixed everything.  What's in a name...

Date: 1 May 1982 04:37-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: BUG-LMMAX at MIT-MC
cc: RMS at MIT-MC

Forwarded for RMS:
   RMS@MIT-AI 04/30/82 20:37:02
   To: (BUG macsym) at MIT-MC
   CC: DULCEY at MIT-AI
   I don't think the function SYS:FIXUP-METHOD-FROM-FASD has ever existed
   in an MIT system.

   I have a suspicion that Macsyma was recompiled in a Symbolics band,
   and that is why it won't load in 85.  If that suspicion is correct, it
   won't load in 79 either.  The files ought to be recompiled in an MIT
   world.

Date: 30 April 1982 11:28-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  MAKE-MACSYMA on System 85
To: DULCEY at MIT-ML
cc: BUG-LMMAX at MIT-AI

Macsyma was last compiled and brought up under system 205. I must add
some logical pathname abstraction in order to keep two sets of QFASL files.
It is *not* considered a burden to maintain macsyma in TWO different LISPM
systems, as it only increases the number of systems macsyma runs in from
five to six, and the burden of macsyma maintainence is related more to the 
rate of change (or breakage) of a given system, not to the total number of
systems.

Now, for the critical question. Can you arrange for a free 12-hour slot
on a lispmachine with system 85 that also has a free band to save to?

-GJC

P.S. Loading of LMSUP file should probably be taken out anyway.


DULCEY@ML (Sent by LMMAX) 04/30/82 05:06:26 Re: MAKE-MACSYMA on System 85
To: (BUG LMMAX) at MIT-AI
In LMMAX@MC in Experimental Remote-File 7.0,
Experimental LMFILE-Remote 15.0, Experimental MIT-Specific 7.0,
Experimental System 85.2, Experimental ZMail 44.1, microcode 117,
Try Me (GCed), on Lisp Machine Fifteen:

MAKE-MACSYMA on this system lost while loading MC:LMMAXQ;LMSUP QFASL
with the following error message:

>>>>TRAP 15433 (TRANS-TRAP)
The function SYS:FIXUP-METHOD-FROM-FASD is undefined.
While in the function SI:*EVAL  SYS:FASL-OP-EVAL1  SI:FASL-GROUP

SI:*EVAL:
   Arg 0 (FORM): (SYS:FIXUP-METHOD-FROM-FASD #<DTP-FEF-POINTER (:METHOD MACSYMA-LISTENER "CHAR-WIDTH) 4677501> (:METHOD MACSYMA-LISTENER :CHAR-WIDTH))



Date: 30 April 1982 05:07-EDT
From: DULCEY@ML
Sender: LMMAX at MIT-MC
Subject: MAKE-MACSYMA on System 85
To: BUG-LMMAX at MIT-MC
cc: DULCEY at MIT-ML

In LMMAX@MC in Experimental Remote-File 7.0,
Experimental LMFILE-Remote 15.0, Experimental MIT-Specific 7.0,
Experimental System 85.2, Experimental ZMail 44.1, microcode 117,
Try Me (GCed), on Lisp Machine Fifteen:

MAKE-MACSYMA on this system lost while loading MC:LMMAXQ;LMSUP QFASL
with the following error message:

>>>>TRAP 15433 (TRANS-TRAP)
The function SYS:FIXUP-METHOD-FROM-FASD is undefined.
While in the function SI:*EVAL  SYS:FASL-OP-EVAL1  SI:FASL-GROUP

SI:*EVAL:
   Arg 0 (FORM): (SYS:FIXUP-METHOD-FROM-FASD #<DTP-FEF-POINTER (:METHOD MACSYMA-LISTENER "CHAR-WIDTH) 4677501> (:METHOD MACSYMA-LISTENER :CHAR-WIDTH))

Date: 8 March 1982 08:51-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: BUG-LMMAX at MIT-MC
cc: GJC at MIT-MC, FLAVIO at MIT-ML

    Date: 03/06/82 21:50:09
    From: FLAVIO at MIT-ML
    To:   cwh

    Following your suggestions, I tried Macsyma on CADR-16---very nice,
    very fast.  The only difficulty I had was with WRITEFILE.
    The command of that name on MC writes both my typein (the (Cxx)'s)
    and the Macsyma output (the (Dxx)'s), whereas on the Lisp Machine
    I only get the output.  If I do a DESCRIBE(WRITEFILE) I get a
    description applicable to the MC version. 
    Is there some way to record both typein and output when using
    Macysma from the Lisp Machine?  Thanks for your help.
          --Flavio

This sounds like a bug in Lisp Machine Macsyma.  Further bug reports should
be sent to BUG-LMMAX.

Date: 7 March 1982 04:54-EST
From: V. Ellen Golden <ELLEN at MIT-MC>
To: GJC at MIT-MC
cc: RHB at MIT-MC, BUG-lmmax at MIT-AI

    Date: 6 March 1982 16:13-EST
    From: George J. Carrette <GJC at MIT-MC>

    On the lispmachine, say WRITEFILE("filename"); then CLOSEFILE();
    Perhaps the describe database can be conditionalized for the lispmachine.
---------------------------
The LISP Machine "way of doing things" is now included in WRITEFILE
and CLOSEFILE for the DESCRIBE database... conditionalization is not
(as yet) a part of the DESCRIBE database.



Date: 6 March 1982 16:13-EST
From: George J. Carrette <GJC at MIT-MC>
To: RHB at MIT-MC
cc: ELLEN at MIT-MC, BUG-lmmax at MIT-AI

On the lispmachine, say WRITEFILE("filename"); then CLOSEFILE();
Perhaps the describe database can be conditionalized for the lispmachine.



Date: 6 March 1982 14:51-EST
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI

In lmmax in System 79.18, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.2,
Macsyma 30.0, microcode 849, 60Hz, on Lisp Machine Sixteen:

writefile(foo,bar);
in its action does not agree with its documention describe(writefile);

Documentation says that writefile(foo,bar) will use device foo on
directory bar. In fact, uses _lsmp_ output on the user directory and
tries to rename the file at close to foo bar.

Is this curable by saying writefile ("mc:rhb;");
                          closefile ("foo bar");
or some such?


Date: 2 March 1982 08:04-EST
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI

In lmmax in System 79.18, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.2,
Macsyma 30.0, microcode 849, 60Hz, on Lisp Machine Sixteen:

I tried to batch a file residing on MC. It terminatd with the error

attempting to :untyi something different than last :tyi'ed
from
 (:METHOD SI:BASIC-BUFFERED-INPUT-STREAM :UNTYI) <- ECHO-INPUT-STREAM-HANDLER
        <- CONTINUE

This seems to be an error condition at the end of the batch file.




Date: 1 March 1982 14:22-EST
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

In LMMAX in System 79.18, ZMail 40.7, Remote-File 2.0,
LMFILE-Remote 5.2, Experimental Macsyma 30.0, microcode 849,
60Hz Mathlab, on Lisp Machine Sixteen:

Macsyma version 30 has been created. It is on band 4 of CADR-16.


Date: 28 February 1982 11:30-EST
From: Robert H. Berman <RHB at MIT-MC>
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC

I sent the last bug-lmmax message about making a new macsyma
on 2/27/82. Sorry I forget to say "from RHB".

Date: 27 February 1982 20:12-EST
From: George J. Carrette <GJC at MIT-MC>
To: LMMAX at MIT-MC
cc: BUG-lmmax at MIT-AI

Who sent the last LMMAX message? In order to win you have to
[1] make sure AI is up.
[2] make sure MC is up and will stay up for at least 5 hours, and also
    will not have network problems due to too many job-slots.
[3] make sure you have a lispmachine in system 79.
[4] do (LOGIN 'LMMAX) (MAKE-SYSTEM 'MACSYMA ':BATCH ':COMPILE ':RELOAD)

Step 4 takes about 6 hours. It must be done because the last time I did
it the compilation-environment was fucked. I have done the required editing
to fix things, and plan to run it SUNDAY night starting at 11:30 pm,
while hacking NIL on the VAX.




LMMAX@MIT-MC 02/27/82 08:47:51
To: (BUG lmmax) at MIT-AI
In lmmax in System 79.17, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.2,
Experimental Macsyma 27.0, microcode 849, Mathlab, on Lisp Machine Fifteen:

I tried to compile and make a new macsyma this morning.

PLOT* still losses with fonts:cptfont being undefined.

plot(sin(x)*exp(-x),x,0,20)
says it can't initalize a macsyma plotting window.

batching a file ends with an error saying the object it tries to :UNTYI is not the
same as the object it :TYI'ed.




Date: 22 February 1982 14:20-EST
From: George J. Carrette <GJC at MIT-MC>
To: RPK at MIT-MC
cc: BUG-LMMAX at MIT-MC

Some file in Macsyma must be bashing the read syntax of ":"
and this kind of thing will only show up when a full recompilation
of macsyma is done.

rpk@MIT-AI 02/22/82 14:05:57 Re: Plot
To: (BUG LMMAX) at MIT-MC
In LMMAX in System 79.13, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.0,
Macsyma 26.0, microcode 849, MC, on Lisp Machine Thirteen:

When I tried to plot something for the first time (plot(x*3,x,2,3);),
the window MACSYMA-PLOT-PLANE-1 would not receive the
MC:|:INIT-FOR-PLOTTING| message (called from $INITGRAPH).  (Probably it
was supposed to be an :INIT-FOR-PLOTTING message.)

Date: Monday, 22 February 1982, 13:38-EST
From: Robert P. Krajewski <RPK at MIT-XX>
Subject: Loading macsyma
To: BUG-LMMAX at MIT-AI

When doing a (make-macsyma), loading PLOT* gets an unbound 
variable error (|FONTS:CPTFONTB|).  Having SI:EVAL* return
FONTS:CPTFONTB continues the loading.


Date: 21 February 1982 05:04-EST
From: George J. Carrette <GJC at MIT-MC>
To: RHB at MIT-MC
cc: BUG-lmmax at MIT-AI

I'll have to recompile that file.


Date: 20 February 1982 11:29-EST
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI

In lmmax in System 78.38, ZMail 38.5, Experimental Macsyma 22.0, microcode 840, on Lisp Machine Fifteen:

While making a new macsyma for LM16, I got the message
that
   MC:|FONTS:CPTFONT|

was unbound in loading PLOT*
PLOT* actaully says something like

    (defvar plot-font fonts:cptfont)

 and 

(describe 'fonts:cptfont)
says the right.


Date: 18 February 1982 07:14-EST
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI

In lmmax in System 78.56, ZMail 38.5, Experimental Macsyma 22.0, microcode 841, 60Hz, on Lisp Machine Sixteen:

  1.5*[1.,2.]

gives an error, asserting that the first argument to FBOUNDP is of the
wrong type, while in function

   GET-L-LM-FCN-PROG <- MEVAL1 <- MEVAL




Date: 18 February 1982 10:38-EST
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI

In lmmax in System 78.56, ZMail 38.5, Experimental Macsyma 22.0, microcode 841, 60Hz, on Lisp Machine Sixteen:

While trying to batch the demo file
      "mc:demo;nisimp demo"
executing MATCHDECLARE gives an error
saying the function META-ADD2LNC is undefined.




Date: 18 February 1982 08:48-EST
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI

In lmmax in System 78.56, ZMail 38.5, Experimental Macsyma 22.0, microcode 841, 60Hz, on Lisp Machine Sixteen:


The reader does not allow completion of

     is(a >= 0)

stopping at  

    is(a >

saying that "=" is not an infix operator.




Date: 18 February 1982 10:38-EST
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI

In lmmax in System 78.56, ZMail 38.5, Experimental Macsyma 22.0, microcode 841, 60Hz, on Lisp Machine Sixteen:

While trying to batch the demo file
      "mc:demo;nisimp demo"
executing MATCHDECLARE gives an error
saying the function META-ADD2LNC is undefined.




Date: 14 February 1982 05:05-EST
From: George J. Carrette <GJC at MIT-MC>
To: HIC at MIT-MC
cc: BUG-LMMAX at MIT-MC

Just try compiling PLTWIN, do 
 (LOGIN 'LMMAX 'MC) (MAKE-SYSTEM'MACSYMA':COMPILE).
I'll give you a copy of the CWARNS file.

Date: 13 February 1982 19:39-EST
From: Howard I. Cannon <HIC at MIT-MC>
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC

    Date: 13 February 1982 16:56-EST
    From: George J. Carrette <GJC>
    To:   HIC
    cc:   BUG-LMMAX

    PLTWIN is scrod. Can you tell why? I can't.
Can you give me more details?  Otherwise, I can't tell why.  How do I reproduce
the scrod behavior?

Date: 13 February 1982 16:56-EST
From: George J. Carrette <GJC at MIT-MC>
To: HIC at MIT-MC
cc: BUG-LMMAX at MIT-MC

PLTWIN is scrod. Can you tell why? I can't.

Date: 13 February 1982 16:51-EST
From: Howard I. Cannon <HIC at MIT-MC>
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC

As far as I know, all the sources I wanted merged have been merged.
Did you ever get the $EDIT function, which seems useful.

Date: 13 February 1982 15:50-EST
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

Remove the INCLUDEF "TRANSL;TRANS3 >" and recompile it.
Fix the FLAVOR definition in "LMMAX;PLTWIN >" and recompile it.

HIC: What is the state of your source merging?

Date: 9 February 1982 15:07-EST
From: Robert H. Berman <RHB at MIT-MC>
To: BUG-LMMAX at MIT-MC


An error occurs when saying

a*[1,2,3];


Date: 5 February 1982 06:30-EST
From: Bill Gosper <RWG at MIT-MC>
To: BUG-LMMAX at MIT-MC

It would be nice if LM Macsyma, like KL Macsyma, had INVERT and ADJOINT.

Date: 21 December 1981 11:35-EST
From: Robert H. Berman <RHB at MIT-MC>
To: BUG-LMMAX at MIT-MC

I changed lmmax;sysdef
to include cwh's screen saver frob.

Date: 13 December 1981 08:50-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RWG at MIT-MC
cc: BUG-LMMAX at MIT-MC

   RWG@MIT-MC 12/13/81 04:45:15 Re: make-system @parc
   To: (BUG LMMAX) at MIT-MC
   some of the :shit was disconcerting.  if my memory serves:
   SOLVE redefined RAT3D's $SAVEFACTORS,
I removed the variable definition from SOLVE.  (It was set to NIL in both 
places, so the redefinition would not have caused any ill effects.)

   BESSEL redefined FACTOR's GAUSS, and
In FACTOR, GAUSS is a variable, in BESSEL it's a function, so this 
is not a real redefinition.

   ARRAY redefined ACALL's $ARRAYAPPLY.
I could only find a definition in ACALL, as far as current sources go anyway.

Date: 13 December 1981 04:45-EST
From: Bill Gosper <RWG at MIT-MC>
Subject: make-system @parc
To: BUG-LMMAX at MIT-MC

we don't keep sources at parc, so it helps us if changes get compiled
reasonably promptly.  i noted no new qfasls since the one we built two
wks ago in 76.

also, some of the :shit was disconcerting.  if my memory serves:
SOLVE redefined RAT3D's $SAVEFACTORS,
BESSEL redefined FACTOR's GAUSS, and
ARRAY redefined ACALL's $ARRAYAPPLY.
Other :shit looked less unholy.

Date: 9 December 1981 09:23-EST
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI
cc: BUG-LISPM at MIT-MC

In lmmax in System 74.45, ZMail 34.11, microcode 793, 60Hz MLab, on Lisp Machine Sixteen:

1. The bug report menu still does not have bug-llmax available.

2. When mousing OTHER from the menu, zmail puts a funny message in the header.

3. While trying to disk-restore the macsyma band, a fatal error of the
   form, SI:UNIVERSAL-TIME not found occurs, rendering an entry into
   zmail immposible and requiring restoration of this band.



Date: 4 December 1981 12:30-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  (defun (foo mexpr* mexpr*s) ...
To: MMcM at MIT-AI
cc: MOON at MIT-MC, BUG-LMMAX at MIT-AI

There should be no instances of this in Macsyma, because this should
always be written as (DEFMSPEC FOO ...). Where the macro in
"LIBMAX;DEFINE >" has always had the proper conditionalization.

A tags search of all of macsyma does not reveal a single instance of
 "(defun (<anything> mexpr* mexpr*s) ...", thanks anyway I guess, always nice
to see some concern for problems which may come up when bugs are fixed.

-gjc



Date: 4 December 1981 04:25-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RWG at MIT-MC
cc: BUG-LMMAX at MIT-MC

   Date: 3 DEC 1981 0922-PST
   From: GOSPER at PARC-MAXC
   To:   BUG-lmmax at MIT-AI
   In lmmax in Experimental ETHER 14.20, Experimental SYSTEM 76.41, 
   Experimental Macsyma 21.0, microcode 811, 14.17,76.29,21.0 Macsyma, 
   on Xerox Lisp Machine Two:
   EV(0,NOEVAL,NUMER) errs with (CAR 'QUOTE) while attempting 
   (MNUMP '(QUOTE $%E)).
has been fixed in JPG;MLISP > .

Date: 4 December 1981 02:27-EST
From: Bill Gosper <RWG at MIT-MC>
To: BUG-LMMAX at MIT-MC

LOADFILE of file SAVEd on mc bombs with ARGS udefined fcn.

Date: 3 December 1981 19:18-EST
From: Mike McMahon <MMcM at MIT-AI>
Subject: (defun (foo mexpr* mexpr*s) ...
To: BUG-LMMAX at MIT-AI
cc: Moon at MIT-MC

There are a couple of instances of this in Macsyma.  They worked by
accident in early systems.  They will get an error in systems 76 and
greater.  A conditional should be added to keep out the second property
name on the lisp machine.


Date: 3 December 1981 19:13-EST
From: George J. Carrette <GJC at MIT-MC>
Sender: RLB at MIT-MC
Subject: Resent Bug notes.
To: GOSPER at PARC-MAXC
cc: BUG-LMMAX at MIT-MC

I will build a macsyma in system 76 sometime in the next week, and
deal with the problems mentioned.

Date: 3 DEC 1981 0922-PST
From: GOSPER at PARC-MAXC
To:   BUG-lmmax at MIT-AI

In lmmax in Experimental ETHER 14.20, Experimental SYSTEM 76.41, Experimental Macsyma 21.0, microcode 811, 14.17,76.29,21.0 Macsyma, on Xerox Lisp Machine Two:

EV(0,NOEVAL,NUMER) errs with (CAR 'QUOTE) while attempting (MNUMP '(QUOTE $%E)).
-------


Date: 3 December 1981 04:00-EST
From: Bill Gosper <RWG at MIT-MC>
Sender: RWG0 at MIT-MC
To: BUG-LMMAX at MIT-MC

On parc cadr 2, system 76.??, macsyma 21.?

i got a bunch of bugs and then the ether crashed so i can't provide
an official subheader, and i don't feel like trying to factor
this into however many separate reports it should be.

EV(0,NOEVAL,NUMER) errs (CAR 'QUOTE) while attempting
(MNUMP '(QUOTE $%E)) .

Hitting C-Z while in error handler seems to return to MACSYMA top
level leaving variables bound to FALSE.  Subsequent attempts to KILL
them give illegal remvalue attempt.

Then $DETOUT AND $KEEPFLOAT were unbound.  FUNCTIONS returns itself.
''% is the same as %.  I forget the rest, except that in the rubout
handler, C-M-B is less ambitious than C-M-F.

Date: 26 NOV 1981 1242-PST
From: DEKLEER at PARC-MAXC
To:   BUG-LMMAX at MIT-AI

In Experimental ETHER 14.15, Experimental SYSTEM 76.29, Experimental Macsyma 21.0, microcode 811, on Xerox Lisp Machine Two:

[1] &QUOTE no longer works so FLONUM and ARGS need to be fixed.

[2] The following doesn't load correctly.  What is it supposed to be?

;;; This should be in the evaluator, but is here because MUTILS is
;;; an early-loading file. -GJC

(DEFUN (MSPEC-HOOK MFEXPR* MFEXPR*S) (FORM)
       ;; temporary hack for allowing some macsyma special forms
       ;; to still exist as FEXPR or FSUBR properties. -GJC
       (APPLY (CAAR FORM) (CDR FORM)))

-------


Date: 5 November 1981 20:18-EST
From: Mike McMahon <MMcM at MIT-AI>
Subject: system 76 warning
To: BUG-lmmax at MIT-MC
cc: BUG-LISPM at MIT-AI

In order to interact properly with M-. in the editor, all files whose
QFASL's live in a different directory than the source will need to be
recompiled in system 76 (or a 75 newer than 75.13, although this system
will not be released).
The present scheme of guessing the source file pathname based on the truename
of the source has proved too bug prone, and the correct information is now
recorded by the compiler.


Date: Wednesday, 4 November 1981, 21:15-EST
From: Mike McMahon <MMcM at MIT-AI>
To: kmp at MIT-AI
Cc: BUG-LISPM at MIT-AI, DICK at MIT-ML, BUG-LMMAX at MIT-MC

    Date: 4 November 1981 16:23-EST
    From: Kent M. Pitman <kmp at MIT-AI>
    * A good abstraction for finding out the installed version of a particular
      file.
The function to do this is apparently hidden within the bowels of the editor
(ZWEI:FILE-LOADED-TRUENAME).  I will extract it for the next system.

    * A way of finding out the DEFSYSTEM that was used to generate a given system
      so that the system can be trivially be regenerated by getting the DEFSYSTEM
      info, the info about what versions were used, getting the files from backup
      tape, and regenerating the system.
SI:SYSTEM-SOURCE-FILES gives you the name of all the source files that make up a system.

    * A way of asking about a system would be very nice. Something like 
      SI:PRINT-PATCHES but more complete. Eg, (DESCRIBE-SYSTEM 'FOOD) might do:
DESCRIBE-SYSTEM will be in the next system.

      I might note that (DESCRIBE 'SYSTEM) right now not only does not type back
      anything about the system called "System", but it doesn't even tell me that
      SYSTEM is a symbol. This is somewhat less than helpful.
When i do (DESCRIBE 'KMP), it doesn't tell me there is someone named Kent Pitman
with those initials.  I'm not sure how you would like things to work.

Date: 4 November 1981 16:23-EST
From: Kent M. Pitman <kmp at MIT-AI>
To: BUG-LISPM at MIT-AI
cc: DICK at MIT-ML, BUG-LMMAX at MIT-MC

In System 73.18, ZMail 33.9, microcode 786, 73.18/786 PADemo1, on CADR-22:

In Maclisp, one can get the source file of a file by doing something like
  (DEFMACRO CURRENT-FILENAME ''#.(TRUENAME FILE))
and then calling (CURRENT-FILENAME) from various places in the code to get
the name to put in documentation strings or in databases of source code
version numbers. This is not doable in a very elegant way, but multiple
ways of doing it are trivially derivable from the definition of the existing
file i/o, reader, and macroexpansion tools. 

On the Lisp Machine, I have found no advertised way of doing this sort of
thing. I think this is an important thing to have the ability to do. I have
tried to want to do this kind of thing in a number of my files and haven't
been able to figure out how to do it. Moreover, I have seen a number of files
from time to time belonging to people who did this sort of thing in Maclisp
and just have it commented out (with a #M) in the LispM versions with
a comment like ;too hard on LispM
or some such. The thing I had tried when I finally gave up was something
like

    (DEFMACRO CURRENT-FILENAME ()
      ''#.(COND ((FUNCALL STANDARD-INPUT ':OPERATION-HANDLED-P ':GET)
	         (FUNCALL STANDARD-INPUT ':GET ':UNIQUE-ID))
		(T (FORMAT NIL "The object ~S did not handle the :GET message"
			   STANDARD-INPUT))))
    (DEFUN SOURCE-FILE () (CURRENT-FILENAME))

I then compiled and loaded the file and called (SOURCE-FILE) and got back
"The object SI:TERMINAL-IO-SYN-STREAM did not handle the :GET message"
and gave up. I suspect you have a way of doing it or a way of thinking about
things that is better ... As far as I can tell, it just isn't public info.

Therefore, I would like to see the following pieces of functionality:

* A good abstraction for finding out the installed version of a particular
  file.

* A way of finding out the DEFSYSTEM that was used to generate a given system
  so that the system can be trivially be regenerated by getting the DEFSYSTEM
  info, the info about what versions were used, getting the files from backup
  tape, and regenerating the system.

* A way of asking about a system would be very nice. Something like 
  SI:PRINT-PATCHES but more complete. Eg, (DESCRIBE-SYSTEM 'FOOD) might do:

   The currently loaded FOOD system is version 47.2.
   Version 47 was created by KMP, Tuesday the 31st of March at 12:02am
   The following relevant files are currently installed:
     MC: FOOD; RECIPE 18
     MC: FOOD; STOVE  5
   The patch file directory is MC: FOODP; FOOD (PDIR). The following patches
   have been loaded:
     1 11/02/81 16:10:12 DANIEL  Added a pizza menu server.
     2 11/03/81 01:45:23 KNIGHT  Fixed CHAOS:HACK-DOOR with hardware to get pizzas.

  I might note that (DESCRIBE 'SYSTEM) right now not only does not type back
  anything about the system called "System", but it doesn't even tell me that
  SYSTEM is a symbol. This is somewhat less than helpful.



Date: 22 October 1981 21:02-EDT
From: Mike McMahon <MMCM at MIT-MC>
To: BUG-LMMAX at MIT-MC

I fixed $PLOT_SPLITSCREEN for the recent change to flavor keywords.

Date: 2 October 1981 03:01-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: Macsyma code.
To: INFO-MACSYMA at MIT-MC, INFO-LMMAX at MIT-MC

Files created with TRANSLATE_FILE having a TRANSS version > 78,
[on MC] may be compiled in lispmachine macsyma version > 19,
and in Multics macsyma version 299 (as yet unreleased).
Because of this, the ODE2 package is available on lispmachine macsyma
by LOADFILE("MC:LMMAXR;ODE2 QFASL") (to be defaultly loaded soon).

-gjc

Date: 10 September 1981 20:56-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: Mathlab Lispmachine.
To: RHB at MIT-MC
cc: INFO-LMMAX at MIT-MC, ELN at MIT-MC

The macsyma on it is a bit out-of-date since it is still running
system 72. By monday it will have a new macsyma with almost all the
good stuff, ROMBERG, EVAL_WHEN, DESCRIBE, BUG, MAIL, etc.


Date: 10 September 1981 17:35-EDT
From: Robert H. Berman <RHB at MIT-MC>
To: BUG-LMMAX at MIT-MC


eval_when() seems to be missing -- This is a really
handy feature as

eval_when([batch],block([ttyoff:true])....


Date: 9 September 1981 21:25-EDT
From: James E. O'Dell <JIM at MIT-MC>
Subject:  your bug report
To: MOON at MIT-MC
cc: BUG-LMMAX at MIT-MC, LEBRUN at PARC-MAXC

    Date: 9 September 1981 02:00-EDT
    From: David A. Moon <MOON>
    To:   BUG-LMMAX
    cc:   LEBRUN at PARC-MAXC
    Re:   your bug report

    Date: 8 SEP 1981 1904-PDT
    From: LEBRUN at PARC-MAXC
    To:   bug-lispm at MIT-MC

    integrate(log(x)/x^p,x,1,inf) and p-1 is pos;
    will ask if p-1 is integer -- answering yes or unknown loops
    asking the question -- no gets the right answer

I took a little look at this bug and it is caused by the fact that currently
there is no way to store the information about an expression's integerness.
I could hack up a fix to this particular bug but a much better solution would
mean a better integration of the integer type questions into the mathematical
database. I don't see evidence of looping just stupidity on the question
askers part.

Date: 9 September 1981 16:58-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  Integrate(log(x)/x^p,x,1,inf));
To: LEBRUN at PARC-MAXC
cc: BUG-MACSYM at MIT-MC, BUG-LMMAX at MIT-MC

The integration package binds the context of assumptions when it
enters a definite integration. Onces it asks a question within that
context is puts the assumption into the database so that it should
never ask the same question again. Repeated questions are a sure
sign of a bug.

There are various places SIGN questions can be generated...

[1] When transformations are being made on the expressions,
    choices of functions to make, branches to take. This can
    happen in either SIN, RISCH, or DEFINT.
[2] The limit package.
[3] DEFINT package being cautious about poles and singularities without
    being extremely clever. It tends to work on the pendantic side,
    sometimes the question being asked is reasonable to ask even
    if the result is eventually the same on either branch of the conditional.

The main problem in all of this is that neither the user nor the
implementor is sure of the context in which a given question is being
asked. I think you would like better to be able to answer "WHY;" then to
be able to answer "1000*NO;" on the lispmachine you can at least
enter the debugger and get more context information than was available
to the implimentor.

-gjc

Date: 9 September 1981 12:53-EDT
From: George J. Carrette <GJC at MIT-MC>
To: LEBRUN at PARC-MAXC
cc: BUG-LMMAX at MIT-MC, BUG-MACSYM at MIT-MC

Your example INTEGRATE(LOG(X)/X^P,X,1,INF); POS; YES; YES;
Does not loop in ASKSIGN, at least not on MC nor on the LispmMacsyma
on cadr 13. It does ask the same question twice, though.

Date: 9 September 1981 02:00-EDT
From: David A. Moon <MOON at MIT-MC>
Subject:  your bug report
To: BUG-LMMAX at MIT-MC
cc: LEBRUN at PARC-MAXC

Date: 8 SEP 1981 1904-PDT
From: LEBRUN at PARC-MAXC
To:   bug-lispm at MIT-MC

integrate(log(x)/x^p,x,1,inf) and p-1 is pos;
will ask if p-1 is integer -- answering yes or unknown loops
asking the question -- no gets the right answer

Date: 2 September 1981 13:42-EDT
From: George J. Carrette <GJC at MIT-MC>
To: RHB at MIT-MC, ELN at MIT-MC, CWH at MIT-MC, ELL at MIT-MC,
    BUG-LMMAX at MIT-MC

Macsyma version 15.10, available on cadr's 13 and 10 has BUG and MAIL functions.




GJC@MIT-MC 09/02/81 13:07:52
To: (BUG LMMAX) at MIT-AI
In LMMAX in System 73.10, ZMail 33.4, Experimental Macsyma 15.0, microcode 786, on Lisp Machine Ten:

This is a test of the bug command.


Date: 2 September 1981 13:25-EDT
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

In LMMAX in System 73.10, ZMail 33.4, Experimental Macsyma 15.0, microcode 786, on Lisp Machine Ten:



INTEGRATE(1/(X^5-1),X)

"EVALUATES TO"

-(SQRT(5)+3)*LOG(2*X^2+(SQRT(5)+1)*X+2)/(10*SQRT(5)+10)
 +(SQRT(5)-3)*LOG(2*X^2+(1-SQRT(5))*X+2)/(10-10*SQRT(5))
 -(SQRT(5)-1)*ATAN((4*X+SQRT(5)+1)/SQRT(10-2*SQRT(5)))/(SQRT(5)*SQRT(10-2*SQRT(5)))
 -(SQRT(5)+1)*ATAN((4*X-SQRT(5)+1)/SQRT(2*SQRT(5)+10))/(SQRT(5)*SQRT(2*SQRT(5)+10))+LOG(X-1)/5

This is a test of the bug command.

Date: 31 August 1981 21:01-EDT
From: George J. Carrette <GJC at MIT-MC>
To: RHB at MIT-MC, CWH at MIT-MC, ELN at MIT-MC, QUAN at MIT-MC
cc: BUG-LMMAX at MIT-MC, JPG at MIT-MC, ELLEN at MIT-MC

Version 13 Macsyma is soon to be released. It will have a much
faster APROPOS command, and a new DESCRIBE command.

-gjc

p.s. Jeff: That 185 block file on LMMAXR is the database. It will
           made smaller when I figure out how to compress it.


Date: 27 August 1981 22:03-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: BUG-LMMAX at MIT-MC

Why are there two macsyma listeners in existence after a band containing
a Macsyma has been booted?  Boot cadr16 and go into peek to see what I
mean.

Date: 27 August 1981 11:06-EDT
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI

In lmmax in System 72.35, ZMail 31.26, Macsyma 12.0, microcode 774, 60Hz, on Lisp Machine Sixteen:

apropos(writefile);

after much thrashing yields
   [writefile,writefile_on]


writefile();

says send a bug report to jpg.


How about a little human interface that says "Opps, not implemnted yet..." too?




Date: 16 August 1981 22:34-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: RHB at MIT-MC, BUG-lmmax at MIT-AI

    Date: 7 August 1981 13:30-EDT
    From: Robert H. Berman <rhb at MIT-MC>

    foo()??????????

    seems to keep all the ???? and not recongnize ?? as a "kill-line" operation.

    Date: 8 August 1981 13:53-EDT
    From: George J. Carrette <GJC at MIT-MC>

    This isn't a bug, its a feature! Macsyma uses the system-provided
    rubout-processor, the same one as used in a LISP LISTENER.
    The kill-line operation is CONTROL-A, then CONTROL-K, just
    like in EMACS.

The correct replacement for ?? is the Clear Input key.  This clears
everything typed since the c-line prompt.  Control-A and Control-K are
commands which are present only in my rubout handler, and not in the
installed one.  They work for the current line only (as in Emacs) and do
not apply to the entire input buffer.



Date: 16 August 1981 23:23-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
Subject: human interface
To: RHB at MIT-MC, GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC

    Date: 3 August 1981 16:40-EDT
    From: Robert H. Berman <RHB at MIT-MC>

    2. However, on the lisp machine, why does compile have to be like this
    at all? Why shouldn't there be the options of 
       a) compile a window

This doesn't make sense.  A window is an array of bits.
No higher-level semantics in the general case.

       b) compile a zwei buffer
       c) compile the macsyma function that the mouse is pointing to
       d) compile the region between point and mark

These three should all be possible now with the winning new parser.
Internally, compilation would happen from a Zwei "interval" which may be
a buffer, the region, or some chunk of text in the buffer, such as the
bounds of a Macsyma procedure.  This would have been very hard to
implement in the old Macsyma I/O scheme.

    Date: 3 August 1981 19:39-EDT
    From: George J. Carrette <GJC at MIT-MC>

    Don't forget C-M-F, C-M-B, M-F, M-B ...
    These are all editor extensions of course, you must see how ZWEI interfaces
    to the functions READ, EVAL, and COMPILE, and generalize ZWEI to know
    about MACSYMA:MREAD, MACSYMA:MEVAL, and MACSYMA:MCOMPILE.
    This will be nontrivial in its final form, so I suggest you start
    on it right now, I will do all I can to provide a clean macsyma interface.

It is less difficult than you are making it sound.  As far as
compilation goes, ZWEI doesn't need to know about MREAD at all.  There
is a ZWEI primitive to create a stream from an interval, and you simply
invoke MREAD on that stream, and MCOMPILE the result.  Macsyma Compile
Buffer and Macsyma Compile Region should both be four line functions.
If you find me sometime, I'll help you write them.

C-M-F and friends are a different story.  I'm not sure how they would be
written, but personally I don't think they'd be that useful.

Date: 8 August 1981 13:53-EDT
From: George J. Carrette <GJC at MIT-MC>
To: RHB at MIT-MC
cc: BUG-lmmax at MIT-AI

    From: Robert H. Berman <rhb>

    foo()??????????

    seems to keep all the ???? and not recongnize ?? as a "kill-line" operation.

This isn't a bug, its a feature! Macsyma uses the system-provided
rubout-processor, the same one as used in a LISP LISTENER.
The kill-line operation is CONTROL-A, then CONTROL-K, just
like in EMACS.




Date: 7 August 1981 13:43-EDT
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI

In lmmax in System 72.18, ZMail 31.11, Experimental Macsyma 11.2, microcode 774, on Lisp Machine Fifteen:

batch(foo);

asks for a file as the directory mc:lmmax;foo

when I logged in as (login'rhb'mc).

If it gets the default machine right, why not the directory??


Date: 7 August 1981 18:30-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: BUG-LMMAX at MIT-MC
cc: RWK at MIT-MC

   RHB@MIT-MC 7 August 1981 13:33-EDT
   To: BUG-lmmax at MIT-AI
   In lmmax in System 72.18, ZMail 31.11, Experimental Macsyma 11.2, 
   microcode 774, on Lisp Machine Fifteen:
   apropos(batch);
   gives  TEST is unbound variable  in
       (:internal (:property $apropos mfexpr*.........
Fixed in the MC source file ZZ;APROPO > .

Date: 7 August 1981 13:33-EDT
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI

In lmmax in System 72.18, ZMail 31.11, Experimental Macsyma 11.2, microcode 774, on Lisp Machine Fifteen:

apropos(batch);

gives  TEST is unbound variable  in
    (:internal (:property $apropos mfexpr*.........


Date: 7 August 1981 13:30-EDT
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-lmmax at MIT-AI

In lmmax in System 72.18, ZMail 31.11, Experimental Macsyma 11.2, microcode 774, on Lisp Machine Fifteen:

foo()??????????

seems to keep all the ???? and not recongnize ?? as a "kill-line" operation.


Date: 7 August 1981 13:29-EDT
From: Robert H. Berman <rhb at MIT-MC>
To: BUG-ZMAIL at MIT-MC, BUG-lmmax at MIT-AI

In lmmax in System 72.18, ZMail 31.11, Experimental Macsyma 11.2, microcode 774, on Lisp Machine Fifteen:

Zmail, in a macsyma band, should allow for bug-lmmax in its bug menu.


Date: 3 August 1981 19:39-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  ?human interface
To: RHB at MIT-MC
cc: BUG-LMMAX at MIT-MC

    From: Robert H. Berman <RHB>
       a) compile a window
       b) compile a zwei buffer
       c) compile the macsyma function that the mouse is pointing to
       d) compile the region between point and mark

Don't forget C-M-F, C-M-B, M-F, M-B ...
These are all editor extensions of course, you must see how ZWEI interfaces
to the functions READ, EVAL, and COMPILE, and generalize ZWEI to know
about MACSYMA:MREAD, MACSYMA:MEVAL, and MACSYMA:MCOMPILE.
This will be nontrivial in its final form, so I suggest you start
on it right now, I will do all I can to provide a clean macsyma interface.

-gjc

Date: 3 August 1981 16:40-EDT
From: Robert H. Berman <RHB at MIT-MC>
Subject:  ?human interface
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC

    Date: 3 August 1981 10:39-EDT
    From: George J. Carrette <GJC>
    To:   RHB
    cc:   BUG-LMMAX
    Re:   ?human interface

        Date: 2 August 1981 22:35-EDT
        From: Robert H. Berman <RHB>
        To:   GJC at MIT-AI
        cc:   BUG-LMMAX
        Re:   ?human interface

        Re your example of  translate(f); ?compile(f)....
           Can you change the "human" interface  so that
        the feature of translate(f); ?compile(f); is
         combined, say as, do_the_right_thing(f) instead of ?compile??????

    As you know, in ITS MACSYMA there is a COMPILE command I wrote,
    that goes through a *lot* of hair, creating files, calling
    a customized dump of the lisp compiler as an inferior-job,
    doing obscure system-calls and passing strange-to-lisp-syntax
    valret-strings. On the lisp-machine it will be somewhat different,

    COMPILE([L]):=(APPLY('TRANSLATE,L),APPLY('?COMPILE,L));

    -gjc

1. That's nice, to have a compile([list]) on lispm.
2. However, on the lisp machine, why does compile have to be like this
at all? Why shouldn't there be the options of 
   a) compile a window
   b) compile a zwei buffer
   c) compile the macsyma function that the mouse is pointing to
   d) compile the region between point and mark

Date: 3 August 1981 10:39-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  ?human interface
To: RHB at MIT-MC
cc: BUG-LMMAX at MIT-MC

    Date: 2 August 1981 22:35-EDT
    From: Robert H. Berman <RHB>
    To:   GJC at MIT-AI
    cc:   BUG-LMMAX
    Re:   ?human interface

    Re your example of  translate(f); ?compile(f)....
       Can you change the "human" interface  so that
    the feature of translate(f); ?compile(f); is
     combined, say as, do_the_right_thing(f) instead of ?compile??????

As you know, in ITS MACSYMA there is a COMPILE command I wrote,
that goes through a *lot* of hair, creating files, calling
a customized dump of the lisp compiler as an inferior-job,
doing obscure system-calls and passing strange-to-lisp-syntax
valret-strings. On the lisp-machine it will be somewhat different,

COMPILE([L]):=(APPLY('TRANSLATE,L),APPLY('?COMPILE,L));

-gjc

Date: 2 August 1981 22:35-EDT
From: Robert H. Berman <RHB at MIT-MC>
Subject:  ?human interface
To: GJC at MIT-AI
cc: BUG-LMMAX at MIT-MC


Re your example of  translate(f); ?compile(f)....
   Can you change the "human" interface  so that
the feature of translate(f); ?compile(f); is
 combined, say as, do_the_right_thing(f) instead of ?compile??????

Date: 2 August 1981 22:26-EDT
From: Robert H. Berman <RHB at MIT-MC>
Subject:  Rubout handler, PLOT, etc.
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC, CWH at MIT-MC, JLK at MIT-MC

    Date: 2 August 1981 12:16-EDT
    From: George J. Carrette <GJC>
    To:   JLK
    cc:   CWH, RHB, BUG-LMMAX
    Re:   Rubout handler, PLOT, etc.

    Load CWH2;RH QFASL, it is a rubout handler with ^Y, ^B, ^E, and
    other editing commands.

[Yipee....nice to see that.A]

    Re: PLOT. Yes, there were known bugs, for example PLOT(X^2,X,0,1);
    didn't work due to use of FBOUNDP on a non-symbol.
    Something else was also messed up with the window-system interface
    code, menue selection at end-of-plot.
    However, PLOT was working perfectly well on lisp functions and
    arrays, which is what I was using it for.

    I have made some other changes to the PLOT sources
    recently, that you should be sure to merge. They are textually
    trivial, having to do with use of ERRORFUN, and DEFMSPEC.
    Also, note that in the PDP10 sources all calls to DISPLA
    and ERROR have been replaced with calls to MERROR with
    format-string.

[Does that mean these features are in the current, existing macsyma
band, or that they will be in the next one?]

Date: 2 August 1981 12:16-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: Rubout handler, PLOT, etc.
To: JLK at MIT-MC
cc: CWH at MIT-MC, RHB at MIT-MC, BUG-LMMAX at MIT-MC

Load CWH2;RH QFASL, it is a rubout handler with ^Y, ^B, ^E, and
other editing commands.

Re: PLOT. Yes, there were known bugs, for example PLOT(X^2,X,0,1);
didn't work due to use of FBOUNDP on a non-symbol.
Something else was also messed up with the window-system interface
code, menue selection at end-of-plot.
However, PLOT was working perfectly well on lisp functions and
arrays, which is what I was using it for.

I have made some other changes to the PLOT sources
recently, that you should be sure to merge. They are textually
trivial, having to do with use of ERRORFUN, and DEFMSPEC.
Also, note that in the PDP10 sources all calls to DISPLA
and ERROR have been replaced with calls to MERROR with
format-string.

-gjc

GJC@MIT-AI 08/01/81 14:43:35
To: (BUG LMMAX) at MIT-MC
In LMMAX in RELEASED System 72.9, RELEASED ZMail 31.9, Macsyma 10.2, microcode 774,
on Lisp Machine Thirteen:

As you can see, Macsyma 10 is available in System 72.

Features: 
A Macsyma->Lisp translator. Which has been tested on examples like:
F(X):=(Mode_Declare(x,float),X*SIN(1/X^2));
TRANSLATE(F); ?COMPILE(F);
(PLOTNUM:1000,PLOT(F,0.01,0.02));
Probably the plotting function should by default translate and compile
its argument, it is so much faster than going through the macsyma
evaluator that it isn't even funny.

-gjc

p.s. [Don't forget to (LOAD-PATCHES)]



Date: 29 July 1981 15:43-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC

You can now *THROW out of DISPLA, so you may want to make
some changes in the #^S interrupt function, and put a *CATCH
or two in the proper places in SUPRV.


Date: 29 July 1981 01:40-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
Subject: Lisp Machine Macsyma
To: HIC at MIT-MC, GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC

    Date: 28 July 1981 23:13-EDT
    From: Howard I. Cannon <HIC at MIT-MC>

    I decided to be anti-social and make that change to DIM-$MATRIX.  While I
    was at it, I fixed random lossage in MORE-FUN in SUPRV that caused text
    to get lost if you hit a more break ((CURSORPOS T) lossage).  In any case,
    please be aware that I will be hacking Lisp Machine Macsyma some in the
    near future (fixing bugs that RWG finds, mainly).  If there are any things
    I should know about, tell me.

Excellent.  This wasn't anti-social in the least.  There are plenty of
things which need working on or rewriting.  Let me know if you want to
hear about any of them.  One problem is described in some detail below.

Two things to keep in mind.  One.  Transportability to the other systems
Macsyma runs on.  Two.  We have to make a Macsyma to take to Symsac
real soon.  It would be bad if anything broke just now.

    Date: 29 July 1981 00:28-EDT
    From: Howard I. Cannon <HIC at MIT-MC>

    OK, well, it's clear that this LINEARRAY thing is a total crock -- are you going to
    fix it, or were you just pointing that stuff out for documentation purposes.  If
    you aren't going to fix, then I'll look for all uses of that and do the most
    reasonable thing given the circumstances.

LINEARRAY exists since the DISPLA equation drawing routines are written
in terms of cursor motion primitives.  With a printing terminal, all
drawing goes into this array and then is sent a line at a time to the
stream.  If you watch Macsyma draw equations on a video terminal at 300
baud, you will see what's going on.

The problem is that it is implemented in a poor fashion.  The code forks
at too high a level into one class of routines for cursor-motion-less
consoles (with suffix -LINEAR) and another class for consoles with
cursor motion (with suffix -2D).

A better way of implementing this would be for all code to assume that
we are working with a stream with cursor motion.  Then implement a
special stream which sits on top of a stream without cursor motion and
draws into an array.  It would finally do output when sent a
FORCE-OUTPUT message.  This would eliminate much redundant code, and
make the code clearer.

If you are seriously interested in hacking DISPLA, these are the
key bugs:

0) [Described above] The -LINEAR routines should be flushed and a
   stream for printing consoles should be written.

1) The routine DIMENSION is supposed to return the height, depth, and
   width of an expression in terms of character positions.  That's
   reasonable.  It has side effects.  That's unreasonable.  The side
   effects involve actually doing console output if an expression is
   too large.  This makes it impossible for the Macsyma video front
   end to deal with large expressions, since it must call DIMENSION
   to find out the size of an expression before doing *any* output.

2) The data structures are very poorly designed.  Every symbol or
   string which gets printed is EXPLODEN'd first.  It could easily do
   far less consing.  Bug (1) exists since the intermediate data
   structures take up so much space.

3) The dimensioning routines aren't passed information about console
   type.  On the Lispm, summation signs and integral signs are drawn
   using graphics.  But they are always exactly the same size as they
   would be if drawn in characters.  That's because the dimensioning
   routines don't know if they will be printing to a graphics or a
   character console.  If they did, then we could have real square
   root signs, variable size summations, etc.

Date: 29 July 1981 01:00-EDT
From: Howard I. Cannon <HIC at MIT-MC>
To: BUG-LMMAX at MIT-MC

''% seems to ignore the ''.

Date: 29 July 1981 00:35-EDT
From: George J. Carrette <GJC at MIT-MC>
To: HIC at MIT-MC
cc: BUG-LMMAX at MIT-MC

I'm not going to fix it in the near future, I did the macro
as a put-it-off reminder. [I know, doesn't make sense.]
If you want to fix it now, go for it. By the way, you can
flush calls to ARRAYDIMS because maclisp has ARRAY-DIMENSION-N now.

-gjc

Date: 29 July 1981 00:28-EDT
From: Howard I. Cannon <HIC at MIT-MC>
Subject:  Lisp Machine Macsyma
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC

OK, well, it's clear that this LINEARRAY thing is a total crock -- are you going to
fix it, or were you just pointing that stuff out for documentation purposes.  If
you aren't going to fix, then I'll look for all uses of that and do the most
reasonable thing given the circumstances.

Date: 29 July 1981 00:14-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  Lisp Machine Macsyma
To: HIC at MIT-MC
cc: BUG-LMMAX at MIT-MC

    Date: 28 July 1981 23:10-EDT
    From: Howard I. Cannon <HIC>
    To:   BUG-LMMAX
    cc:   BUG-MACSYMA
    Re:   Lisp Machine Macsyma

    In DIM-$MATRIX in MRG;DISPLA:

        (IF (> (+ HEIGHT DEPTH) (CADR (ARRAYDIMS 'LINEARRAY))) (SETQ LISTP T))

    This line really wants to be:

        (IF (> (+ HEIGHT DEPTH) (CADR (ARRAYDIMS #-LISPM 'LINEARRAY #+LISPM LINEARRAY)))
    	(SETQ LISTP T))

    The real randomness is that LINEARRAY has this random macro in the function cell.
    Why wasn't this left alone, since the Lisp Machine fully supports arrays as
    functions?

Oops. That type of conditionalization should be in LIBMAX;DISPLM.
Arrays used as functions for applications like this are a total loss.
I mean to change DISPLA to bind the variable LINEARRAY to a new array
if it is called recursively. This will make DISPLA reentrant, fixing
long-standing (7 or more years old), bugs.

You might notice the following comment from displa:
;; Why must interrupts be turned off?  Is there some problem with keeping
;; internal state consistent?  If this is the case, then scheduling should be
;; inhibited on the Lispm as well.
(DEFMACRO SAFE-PRINT (PRINT-FORM)
  #+PDP10 `(WITHOUT-INTERRUPTS (LET ((^W T)) ,PRINT-FORM))
  #-PDP10 PRINT-FORM)

[I don't know who made that comment.]

Also, in the way SUPRV hacks ERRLIST/ERRSET, the ERRSET function ERRBREAK has:
 (IF DISPLAYP (SETQ LARY (LISTARRAY 'LINEARRAY))) 
 ... more garbage ...
 (IF DISPLAYP (FILLARRAY 'LINEARRAY LARY))

The function ERRLFUN, which is called via the ERRLIST has
 (FILLARRAY 'LINEARRAY '(NIL))

This should be an obvious signal of total and complete lossage,
talk about lack of modularity. This has been part of a PDP-10 macsyma bug
for a long time, the fact that you can't punt out of DISPLA,
the fact that ^S doesn't punt output during DISPLA. 
On systems #-PDP10 I suppose you just leave yourself open for
totally random strangeness if you break during displa.

-gjc

Date: 28 July 1981 23:43-EDT
From: George J. Carrette <GJC at MIT-MC>
To: HIC at MIT-MC
cc: BUG-LMMAX at MIT-MC

    From: Howard I. Cannon <HIC>
    If there are any things I should know about, tell me.

You will notice I/O is considerably different, the function
MREAD is new, hacking the RUBOUT-HANDLER in the normal manner.

Toplevel window stuff seems to be a bit out-of-date,
trying $WRITEFILE will trash things. It would be very nice to
change DISPLA to take a STREAM as second argument.

-gjc

Date: 28 July 1981 23:13-EDT
From: Howard I. Cannon <HIC at MIT-MC>
To: BUG-LMMAX at MIT-MC
cc: BUG-MACSYMA at MIT-MC

I decided to be anti-social and make that change to DIM-$MATRIX.  While I
was at it, I fixed random lossage in MORE-FUN in SUPRV that caused text
to get lost if you hit a more break ((CURSORPOS T) lossage).  In any case,
please be aware that I will be hacking Lisp Machine Macsyma some in the
near future (fixing bugs that RWG finds, mainly).  If there are any things
I should know about, tell me.

Date: 28 July 1981 23:10-EDT
From: Howard I. Cannon <HIC at MIT-MC>
Subject:  Lisp Machine Macsyma
To: BUG-LMMAX at MIT-MC
cc: BUG-MACSYMA at MIT-MC

In DIM-$MATRIX in MRG;DISPLA:

    (IF (> (+ HEIGHT DEPTH) (CADR (ARRAYDIMS 'LINEARRAY))) (SETQ LISTP T))

This line really wants to be:

    (IF (> (+ HEIGHT DEPTH) (CADR (ARRAYDIMS #-LISPM 'LINEARRAY #+LISPM LINEARRAY)))
	(SETQ LISTP T))

The real randomness is that LINEARRAY has this random macro in the function cell.
Why wasn't this left alone, since the Lisp Machine fully supports arrays as
functions?

Date: 28 July 1981 16:26-EDT
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

LispMachine Macsyma version 7 has been created, it includes the famous
Macsyma->Lisp translator. [Completely untested bunkies!]
A band will be available on CADR-16. 

Notes: 

True "redefinition of function" problems have been removed, there
are still fake problems due to brain damage in the lispm
implementation of DEFUN and DEFVAR, but I am slowly getting around
this by moving the offensive DEFVAR's into the same files as
the DEFUN's of the same symbol. This is ok since the DEFVAR's
probably belong there anyway.

In the mean time, continue to use the :NOSHIT option to MAKE-SYSTEM.

-gjc

Date: 28 July 1981 15:45-EDT
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

Thats right folks, the LMMAXQ directory got too full, so
I created LMMAXR. Nice name eh? Damn ITS filesystem.

Date: 28 July 1981 15:31-EDT
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

Directory LMMAXQ is 93.2% full.

(or should this be BUG-ITS?)

Date: 8 July 1981 02:55-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC

   Date: 7 July 1981 22:32-EDT
   From: Lisp Machine Macsyma <LMMAX at MIT-MC>
   To: BUG-MACSYMA at MIT-MC, BUG-LMMAX at MIT-MC
   ASSUME(NOT(FOO)); gives CAR on ATOM $FOO. -gjc
Fixed in function PRED-REVERSE in MRG;COMPAR > .

Date: 7 July 1981 22:32-EDT
From: Lisp Machine Macsyma <LMMAX at MIT-MC>
To: BUG-MACSYMA at MIT-MC, BUG-LMMAX at MIT-MC

ASSUME(NOT(FOO)); gives CAR on ATOM $FOO. -gjc

Date: 7 July 1981 22:23-EDT
From: Lisp Machine Macsyma <LMMAX at MIT-MC>
To: BUG-MACSYMA at MIT-MC, BUG-LMMAX at MIT-MC

When you do m:matrix([1,2],[3,4]); m^^A;
the function POWERX gets called, and it uses "=" on
the symbol A, causing a wrong-type-argument error.

Now fixed in source. -gjc


Date: 2 Jul 1981 14:53:11-PDT
From: CSVAX.fateman at Berkeley
To: JPG@MIT-MC
Subject: correction
Cc: bug-lmmax@mit-mc, macsyma-i@mit-mc

the timing of 4.45 sec appears to be not repeatable.  The same problem
as GJC's example, with same parentheses, seems to take a minimum of 6.8
seconds (plus, occasionally, about 1.5 sec. GC).  I do not have a record
of what I typed in.   The ratio of run-times on the KL-10 and the
VAX 11/780 has probably not changed much in the last 6-12 months.

Date: 2 July 1981 17:22-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC, GJC at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC

   Date: 30 Jun 1981 07:12:33-PDT
   From: CSVAX.fateman at Berkeley
   To: BUG-LMMAX@MIT-MC, GJC@MIT-MC
   Subject: LISPM macsyma.
   Cc: MACSYMA-I@MIT-MC
   ratsimp(diff(integrate(1/x^5-1),x),x));  which took 9 seconds clock
   time on the cadr in 800f and 4 seconds CPU time on MC, took
   4.45 seconds CPU on vax 11/780, and about 18seconds real time including
   starting up vaxima on a load-average-3.5 system.
I'm not sure what problem RJF did as his parens don't balance, but 
assuming he did the same problem GJC did:
RATSIMP(DIFF(INTEGRATE(1/(X^5-1),X),X)); , just for the record, it 
takes 2 secs. CPU time on MC + x secs. GC time, where x tends to be 
between 1 and 1.5 secs.

Date: 30 June 1981 18:04-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
Subject: LG-CHARACTER-X and DISPLA.
To: GJC at MIT-MC, CWH at MIT-MC
cc: BUG-LMMAX at MIT-MC

    Date: 30 June 1981 17:53-EDT
    From: George J. Carrette <GJC at MIT-MC>
    Subject: LG-CHARACTER-X and DISPLA.
    To: CWH at MIT-MC
    cc: BUG-LMMAX at MIT-MC

    You really thought it would be too expensive to bind
    these four special variables upon every entry to DISPLA?
    DISPLA already binds twenty four special variables
    upon entry, and once it gets inside it conses up a storm.
    Not only that, imagine what happens when those TYO's
    are done. The LISPM streams and window system using huge
    numbers of slow and losing SPECIAL instance variables.

    -gjc

I wasn't concerned so much about the special variable bindings as in
sending the messages.  There may have been something else too, but I no
longer remember.

Date: 30 June 1981 17:53-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: LG-CHARACTER-X and DISPLA.
To: CWH at MIT-MC
cc: BUG-LMMAX at MIT-MC

You really thought it would be too expensive to bind
these four special variables upon every entry to DISPLA?
DISPLA already binds twenty four special variables
upon entry, and once it gets inside it conses up a storm.
Not only that, imagine what happens when those TYO's
are done. The LISPM streams and window system using huge
numbers of slow and losing SPECIAL instance variables.

-gjc

Date: 30 June 1981 16:59-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: GJC at MIT-MC, BUG-LMMAX at MIT-MC

    Date: 30 June 1981 00:53-EDT
    From: George J. Carrette <GJC at MIT-MC>
    To: BUG-LMMAX at MIT-MC

    The following code in the load-time evaluation of MRG;DISPLA
    causes an error when doing (make-system'macsyma) inside
    a ZTOP window.

    (SETQ LG-CHARACTER-X (TV:SHEET-CHAR-WIDTH TERMINAL-IO)
    (SETQ LG-CHARACTER-X-2 (// LG-CHARACTER-X 2))

    because LG-CHARACTER-X will be set to NIL. This code
    looks bogus as hell. Seems DISPLA should bind these variables
    when it knows what window it is printing to, and not before.
    I have made a patch that will do for now, but I really
    would like to know what people are trying to do here.

    -gjc

LG-CHARACTER-X is supposed to hold the width in pixels of a single
character.  DISPLA only works with fixed width fonts.  For normal
Macsyma windows, this is bound in the function MACSYMA-TOP-LEVEL in
LMMAX;LMSUP.  The SETQ shown here is only to give it a toplevel value so
that DISPLA will win when invoked outside of a Macsyma Listener.
DISPLA could bind these variables on every call rather than binding them
once inside the listener, but I thought that would be too expensive.  I
am probably wrong about this.

I think the problem is that it is calling TV:SHEET-CHAR-WIDTH directly
rather than sending a message.  Try replacing this with
(FUNCALL TERMINAL-IO ':CHAR-WIDTH) and see if that fixes it.

Whatever you do, it should still work to invoke DISPLA from top level.
Please don't break this.

Date: 30 Jun 1981 07:12:33-PDT
From: CSVAX.fateman at Berkeley
To: BUG-LMMAX@MIT-MC, GJC@MIT-MC
Subject: LISPM macsyma.
Cc: MACSYMA-I@MIT-MC

ratsimp(diff(integrate(1/x^5-1),x),x));  which took 9 seconds clock
time on the cadr in 800f and 4 seconds CPU time on MC, took
4.45 seconds CPU on vax 11/780, and about 18seconds real time including
starting up vaxima on a load-average-3.5 system.

Date: 30 June 1981 04:24-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: exact call to make-system.
To: BUG-LMMAX at MIT-MC

(load-patches ':silent)
(load "mc:lmmax;sysdef")
(make-system 'macsyma ':noshit)

The noshit option keeps it from asking questions about various things.

There are a few CAR/CDR of ATOM type bugs, but the trouble spots
like the DATABASE and the I/O code seem to work fine.

-gjc

Date: 30 June 1981 04:14-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CWH at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC

It took 9 minutes 24 seconds wall-clock time to reload
a LISPM macsyma. I don't think the chaos net file transfer
slowed things down much (3:20:12 a.m.). As I thought, this
is better than the 15 minutes JKF stated for Vaxima,
I'm not sure why you were suprised.

-gjc

Date: 30 June 1981 02:41-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: LISPM macsyma.
To: BUG-LMMAX at MIT-MC
cc: MACSYMA-I at MIT-MC

Is running again on the CADR in 800f. First impressions:
It does the identity operation
RATSIMP(DIFF(INTEGRATE(1/(X^5-1),X),X));
in 9 seconds clock time, (includes paging, mouse-tracking, updating
the clock and wholine display, general running of the lispm operating system).
MC does this in 4 seconds CPU time, (includes no operating system overhead).

-gjc

Date: 30 June 1981 00:53-EDT
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

The following code in the load-time evaluation of MRG;DISPLA
causes an error when doing (make-system'macsyma) inside
a ZTOP window.

(SETQ LG-CHARACTER-X (TV:SHEET-CHAR-WIDTH TERMINAL-IO)
(SETQ LG-CHARACTER-X-2 (// LG-CHARACTER-X 2))

because LG-CHARACTER-X will be set to NIL. This code
looks bogus as hell. Seems DISPLA should bind these variables
when it knows what window it is printing to, and not before.
I have made a patch that will do for now, but I really
would like to know what people are trying to do here.

-gjc

Date: 29 June 1981 15:21-EDT
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

Carl, I just figured a way to win when at the really low bootstrapping
level. First of all, do everything in M-X ZTOP, so that when
you lose your ass you will be able to figure out why.
Then (make-system 'macsyma ':compile ':print-only)
Then, write out the buffer and dover it up.
Carefully look at it to make sure there is no lossage.
Mark off only those transformations you really want to happen.
Then (make-system 'macsyma ':compile ':batch ':selective)
It will ask about 200 questions, but it only takes a couple
minutes to type the Y and N's to get what you want.

I'm doing this now, and I think I'm winning, we will see.

-gjc

Date: 4 May 1981 15:43-EDT
From: John L. Kulp <JLK at MIT-MC>
To: BUG-LMMAX at MIT-MC

will whoever broke the PLOT package on the LISPM please fix it
(gee, we just can't seem to keep the vandals away from this software).
Try anything and you will see the problem.

Date: 27 April 1981 16:42-EST
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

MRG;GRIND uses the macro EIGHTH, which is in LIBMAX;LMMAC
but NOT a lisp-machine macro. Foobar!

Date: 21 April 1981 10:25-EST
From: James E. O'Dell <JIM at MIT-MC>
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC

    Date: 21 April 1981 10:18-EST
    From: George J. Carrette <GJC>
    To:   BUG-LMMAX

    What is the difference between
    prelude.incl.lisp
    and macsyma_prelude.incl.lisp

    you know, glitches like this really bother me when I start working
    on a system new to me.

In the directory >udd>mal>a>i you will find that prelude.incl.lisp
and macsyma_prelude.incl.lisp are identical and that macsyma_prelude.incl.lisp
is merely an added name the prelude.incl.lisp.

Date: 21 April 1981 10:18-EST
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

What is the difference between
prelude.incl.lisp
and macsyma_prelude.incl.lisp

you know, glitches like this really bother me when I start working
on a system new to me.


Date: 28 March 1981 16:07-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC

    Date: 27 March 1981 21:35-EST
    From: George J. Carrette <GJC at MIT-MC>

    Are you kidding, it is only needed for uncompiled fix files on MC?
    Kind of crazy to waste the address space just for that, I mean,
    gosh, with all the arguments about "you can't do X because of address
    space."

I couldn't agree with you more.  And running interpreted fix files burns up
even more space.  However, the current situation is better than it was
previously when those functions were sprinkled among the rest of the source
files.

My two bits regarding the FASLOAD issue:  I think its default value should
be set to warn you if a redefinition takes place.  It should be bound to
NIL only in specific situations when we know a redefinition is going
to happen, as in during the loading of fix files.  We might also have a
special command for loading fasl files being debugged which also binds it
to NIL.  But for normal loadfiles and autoloads, I would prefer having the
extra check around.

Date: 27 March 1981 21:35-EST
From: George J. Carrette <GJC at MIT-MC>
To: CWH at MIT-MC
cc: BUG-LMMAX at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC

Are you kidding, it is only needed for uncompiled fix files on MC?
Kind of crazy to waste the address space just for that, I mean,
gosh, with all the arguments about "you can't do X because of address space."

Date: 27 March 1981 18:07-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: GJC at MIT-MC
cc: JPG at MIT-MC, BUG-LMMAX at MIT-MC, MACSYMA-I at MIT-MC

    Date: 27 March 1981 00:17-EST
    From: George J. Carrette <GJC at MIT-MC>

    It should be of interest because it turns out to be a BUG in the LISPM
    "redefining so-called check" code. (Maybe not this particular case though).
    Anyway, there are much better ways to do the function/macro hat-trick
    which result in less funny business when one tries to bring up a
    macsyma some place.

RUNTIM is ITS-only.  It should not have been added to the Macsyma system
definition.  It should not have been added to the MAXLNK dir.  It should not
have any effect on bringing up a Macsyma anyplace except on MC.

The file simply contains subr definitions of macros factored out of the
central source.  If MC fixes were always compiled, there would be no need for
the file.

Date: 27 March 1981 09:29-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  Setting of FASLOAD
To: JPG at MIT-MC
cc: BUG-LMMAX at MIT-MC, KMP at MIT-MC, MACSYMA-I at MIT-MC

I agree that we already know about any multiply-defined macsyma functions,
for a general enough "we" that is. However, things change, sometimes
we get new programmers who do not know about all the crocks,
and the turning off of the FASLOAD protection is just one more thing,
like the old setting of CAR and CDR, that adds to the general lack
of consistency and reliablity in the macsyma system. 

I think it makes it harder to transport a reliable macsyma.

For the macsyma user, what the lisp system prints out for redefined
messages..., well, what is the technical term, "sucks."
However, it is easy enough to add a couple lines to the maclisp source
to have it FUNCALL the value of (STATUS REDEF) or something.

With what JPG keeps in MAXDMP;MSLOCS > plus what gets into the STRING files,
we have in Maclisp a consistency checking mechanism far superior to what
the Lisp-Machine supports. [This is true, cross my heart and hope to lose!]
With (STATUS REDEF) we could really win. Why not win for a change.

-gjc

Date: 27 MAR 1981 0258-EST
From: JPG at MIT-MC (Jeffrey P. Golden)
To: KMP at MIT-MC
CC: MACSYMA-I at MIT-MC, (BUG LMMAX) at MIT-MC

   KMP@MIT-MC 03/27/81 02:45:31 Re:  Setting of FASLOAD variable
   To: JIM at MIT-MC, JPG at MIT-MC
   CC: (BUG LMMAX) at MIT-MC, MACSYMA-I at MIT-MC, GJC at MIT-MC
   If two versions of a function are loaded, this information should be known
   to the user for the sake of bug reports about those functions.
I'm not sure what this is about.  We already know about any 
multiply-defined MACSYMA functions.   
   If a user is clobbering an already-defined function, he is wasting part of 
   his address space to unreachable code and is entitled to know about it.
The user is already told about := redefinitions.  I'm not sure what your 
case is. 
   It is easy enough to type ^S to flush redefining messages. Additionally,
   the handler could be sensitive to a REDEFINEPRINT variable...
I think ^S is too general for this purpose.
I still think using the FASLOAD variable for this purpose as advocated by 
GJC would do much more harm than good.  If you want to implement a new 
REDEFINEPRINT variable, go right ahead.

Date: 27 March 1981 02:45-EST
From: Kent M. Pitman <KMP at MIT-MC>
Sender: KMP0 at MIT-MC
Subject:  Setting of FASLOAD variable
To: JIM at MIT-MC, JPG at MIT-MC
cc: BUG-LMMAX at MIT-MC, MACSYMA-I at MIT-MC, GJC at MIT-MC

If two versions of a function are loaded, this information should be known
to the user for the sake of bug reports about those functions.

If a user is clobbering an already-defined function, he is wasting part of 
his address space to unreachable code and is entitled to know about it.

It is easy enough to type ^S to flush redefining messages. Additionally,
the handler could be sensitive to a REDEFINEPRINT variable...


Date: 27 March 1981 00:17-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: BUG-LMMAX at MIT-MC, MACSYMA-I at MIT-MC

    Date: 23 MAR 1981 1714-EST
    From: JPG (Jeffrey P. Golden)
    To:   GJC
    cc:   (BUG LMMAX), MACSYMA-I

       GJC@MIT-MC 03/21/81 11:15:51 Re: more conflicts
       To: (BUG LMMAX) at MIT-MC
       CC: MACSYA-I at MIT-MC
       In LESFAC and RUNTIM, {GETDIS, CONS1}.
       How come these don't show up on MC or multics?
    I do not see why this is of interest to BUG-LMMAX.  Carl has this comment, 
    top of MAXSRC;RUNTIM saying that it is an ITS-only file.
    That probably explains why it doesn't show up on Multics.
    And according to the comment, the redefining of certain macros as functions 
    for the ITS-only runtime environment is intentional.

It should be of interest because it turns out to be a BUG in the LISPM
"redefining so-called check" code. (Maybe not this particular case though).
Anyway, there are much better ways to do the function/macro hat-trick
which result in less funny business when one tries to bring up a
macsyma some place.

Date: 24 March 1981 11:31-EST
From: James E. O'Dell <JIM at MIT-MC>
To: JPG at MIT-MC
cc: BUG-LMMAX at MIT-MC, GJC at MIT-MC, MACSYMA-I at MIT-MC

    Date: 23 March 1981 17:41-EST
    From: Jeffrey P. Golden <JPG>
    To:   GJC
    cc:   BUG-LMMAX, MACSYMA-I

       GJC@MIT-MC 03/21/81 11:15:51 Re: more conflicts
       To: (BUG LMMAX) at MIT-MC
       CC: MACSYA-I at MIT-MC
       Jeff, how about keeping the default value of FASLOAD the same as
       it is in a bare lisp? Just bind it to NIL during the loading of the
       FIX file. As far as I can tell, name conflicts are now a fairly rare
       event in the macsyma system, and I don't understand the
       design decision involved in turning off one of the only protection
       features available in Maclisp.
    I think such a change would hurt much more than it would help.

    It would hurt MACSYMA users who would be inconvenienced by it whenever 
    they have cause to load in essentially the same FASL file twice.
    (I'm not even sure what your "fairly rare" means.  Consider the 
    POIS2/POIS3 aberration, for example.  We've really got to fix this up some 
    day!)

    It would hurt CSYMA system programmers who load in modified FASL files 
    to check them out.

    It is not clear who it would help.  If MACSYMA system programmers some of 
    the time, surely we can reset the switch whenever we want to.

    And if the default value should really be non-NIL, how many of us 
    actually have such a setting in our Macsyma init files and like 
    that setting?

I agree with JPG. I think it should be the responsibility of the Macsyma
programmers to set those switches and to correct any problems that they
find. Whats keeping you from doing it. My macsyma starts up defaulty with
nouuo t and Fasload set to '(subr fsubr lsubr). If I am doing something other
than debugging code I don't use my init file.

Date: 23 MAR 1981 1741-EST
From: JPG at MIT-MC (Jeffrey P. Golden)
To: GJC at MIT-MC
CC: (BUG LMMAX) at MIT-MC, MACSYMA-I at MIT-MC

   GJC@MIT-MC 03/21/81 11:15:51 Re: more conflicts
   To: (BUG LMMAX) at MIT-MC
   CC: MACSYA-I at MIT-MC
   Jeff, how about keeping the default value of FASLOAD the same as
   it is in a bare lisp? Just bind it to NIL during the loading of the
   FIX file. As far as I can tell, name conflicts are now a fairly rare
   event in the macsyma system, and I don't understand the
   design decision involved in turning off one of the only protection
   features available in Maclisp.
I think such a change would hurt much more than it would help.

It would hurt MACSYMA users who would be inconvenienced by it whenever 
they have cause to load in essentially the same FASL file twice.
(I'm not even sure what your "fairly rare" means.  Consider the 
POIS2/POIS3 aberration, for example.  We've really got to fix this up some 
day!)

It would hurt CSYMA system programmers who load in modified FASL files 
to check them out.

It is not clear who it would help.  If MACSYMA system programmers some of 
the time, surely we can reset the switch whenever we want to.

And if the default value should really be non-NIL, how many of us 
actually have such a setting in our Macsyma init files and like 
that setting?

Date: 23 MAR 1981 1714-EST
From: JPG at MIT-MC (Jeffrey P. Golden)
To: GJC at MIT-MC
CC: (BUG LMMAX) at MIT-MC, MACSYMA-I at MIT-MC

   GJC@MIT-MC 03/21/81 11:15:51 Re: more conflicts
   To: (BUG LMMAX) at MIT-MC
   CC: MACSYA-I at MIT-MC
   In LESFAC and RUNTIM, {GETDIS, CONS1}.
   How come these don't show up on MC or multics?
I do not see why this is of interest to BUG-LMMAX.  Carl has this comment, 
top of MAXSRC;RUNTIM saying that it is an ITS-only file.
That probably explains why it doesn't show up on Multics.
And according to the comment, the redefining of certain macros as functions 
for the ITS-only runtime environment is intentional.

Date: 21 March 1981 12:59-EST
From: John L. Kulp <JLK at MIT-MC>
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC, CPR at MIT-MC, JM at MIT-MC

    Date: 21 MAR 1981 1256-EST
    From: GJC (George J. Carrette)
    To:   (BUG LMMAX), JM, CPR

    The disk bands on CADR-13 and CADR-11 don't seem to be big
    enough to save a macsyma. Are the disks to small or what?
    Is it just the way that they where formatted?
Yes, the packs are sufficiently small that they can only have one
real band, and two bare bands.  They should be partitioned that
way.

Date: 21 MAR 1981 1256-EST
From: GJC at MIT-MC (George J. Carrette)
To: (BUG LMMAX) at MIT-MC, JM at MIT-MC, CPR at MIT-MC

The disk bands on CADR-13 and CADR-11 don't seem to be big
enough to save a macsyma. Are the disks to small or what?
Is it just the way that they where formatted?

Date: 21 MAR 1981 1214-EST
From: GJC at MIT-MC (George J. Carrette)
To: (BUG LISPM) at MIT-MC
CC: (BUG LMMAX) at MIT-MC

There seems to be a problem with the function redefinition mechanism.
(It shows up much during (MAKE-SYSTEM 'MACSYMA))

Say there is a (DEFVAR $FOOBAR ...) in one file, and a (DEFUN $FOOBAR
...)  in another, the file with the DEFVAR gets loaded first, and then
the file with the DEFUN. When the second file loads one gets the
"$FOOBAR being redefined" message even when #'$FOOBAR gives "$FOOBAR
undefined."

It is evident from certain hacks in the Lmmax;Compat file that this
problem was known long ago by the first people to hack macsyma on the
lispm.

The problem is related to another one, namely,
(DEFUN (FOO FROBULATE) (X) ...) puts a functional object as the
FROBULATE property of FOO. However, there is no obvious way to go
from the property to the defining form for this property, disabling
the editing and re-definition protection mechanisms.

The easy way to think about this is that the functional-object
should point to the QFASL file from which it came, and the QFASL file
should point to the SOURCE-FILE object from which it came.

The protection mechanisms are simply then a special case of a SETF, call
it PLEASE-SETF if you will, which, since it is polite, does
a consistency check before it bashes the environment.
To each "Cell" known by SETF there would be a concept
of consistency. This is a feature which Macsyma has had for some
years, it works behind-the-scenes to keep macsyma users from
screwing themselves in obscene ways. It is especially effective
in insulating them from the pitfalls of NUMBER DECLARATIONS in
maclisp.

-gjc

p.s. I hope that my humble observations on the subject make it
easier to fix this problem.

Date: 21 MAR 1981 1120-EST
From: GJC at MIT-MC (George J. Carrette)
To: (BUG LMMAX) at MIT-MC
CC: MACSYMA-I at MIT-MC

$GCD is defined in both RAT3E and RAT3C.

Date: 21 MAR 1981 1115-EST
From: GJC at MIT-MC (George J. Carrette)
Subject: more conflicts
To: (BUG LMMAX) at MIT-MC
CC: MACSYA-I at MIT-MC

In LESFAC and RUNTIM, {GETDIS, CONS1}.
How come these don't show up on MC or multics?

Jeff, how about keeping the default value of FASLOAD the same as
it is in a bare lisp? Just bind it to NIL during the loading of the
FIX file. As far as I can tell, name conflicts are now a fairly rare
event in the macsyma system, and I don't understand the
design decision involved in turning off one of the only protection
features available in Maclisp.

-gjc

Date: 21 MAR 1981 1043-EST
From: GJC at MIT-MC (George J. Carrette)
To: (BUG LMMAX) at MIT-MC
CC: MACSYMA-I at MIT-MC

There are a bunch of macro/function conflicts in MOPERS, RUNTIM, RATMAC,
these should be resolved to use Compiler:Optimizers and Source-Trans
properties via an "integrable function" declaration.


Date: 21 MAR 1981 0155-EST
From: GJC at MIT-MC (George J. Carrette)
To: (BUG LMMAX) at MIT-MC

(make-system 'macsyma) loads the MAXDOC;LMDCL
before it loads the COMPAT file. It needs that compat.

Date: 14 MAR 1981 0852-EST
From: JPG at MIT-MC (Jeffrey P. Golden)
To: GJC at MIT-MC
CC: MACSYMA-I at MIT-MC, (BUG LMMAX) at MIT-MC

   GJC@MIT-MC 03/13/81 12:20:49
   To: MACSYMA-I at MIT-MC
   CC: (BUG LMMAX) at MIT-MC
   The function VALUES in MRG;DB is commented out. Who did this and why?
   Is this permanent? This is one of the symbols which was shadowed
   in Lispm macsyma. If it is no longer part of macsyma it would be
   nice to know, so that the shadowing can be removed.
I did this and sent mail to MACSYMA-I about it (in a general way) on 
1/17/81.  VALUES was commented out because there were no calls to it.
I have just deleted all the commented-out uncalled-for functions from 
MRG;DB > (and safeguarded them if they are ever needed in 
MRG;DB DELETE.)  You may consider this removal to be permanent.

Date: 13 March 1981 14:32-EST
From: Robert W. Kerns <RWK at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC

    Date: 13 March 1981 12:20-EST
    From: George J. Carrette <GJC at MIT-MC>
    To: MACSYMA-I at MIT-MC
    cc: BUG-LMMAX at MIT-MC
    
    The function VALUES in MRG;DB is commented out. Who did this and why?
    Is this permanent? This is one of the symbols which was shadowed
    in Lispm macsyma. If it is no longer part of macsyma it would be
    nice to know, so that the shadowing can be removed.

This is also a NIL/MACLISP shadowing.

Date: 13 MAR 1981 1412-EST
From: GJC at MIT-MC (George J. Carrette)
To: (BUG LMMAX) at MIT-MC

Maybe we should come up with some kind of "MINIMA" (to use the
term in use on Multics), which had the parser, simplifier, evaluator,
and a few commands, and had everything else autoloading.
[Yes virginia, it is quite easy to implement autoloading on
 the lisp machine.]
It would give us a chance to fine-tune the behavior of the
core, [implementing things we really need, like Macsyma Evaluate Buffer],
and think about modularity at the same time. Obviously it could
be a win to break macsyma up into lisp-machine-packages.
From what I can tell, this may not be very difficult.
There are a certain set of symbols which must be available in
all modules because they are user input. {MTIMES,MEXPT, etc,
all user commands}. These symbols are fairly well rounded up
and documented in the macsyma->lisp translator.
Then there are functions and variables referenced. It is not
difficult to use RLB's FASL indexer on MC to get a handle on
this aspect. [The speed of mc for this kind of crunching is a win.]

The biggest problem is properties referenced. There are a few
properties which are obviously referenced by only one module
or two, [there are not that many properties anyway though].
There seem to be only two things which reference many properties from
many modules in unstructured ways, the $SAVE command and
the $KILL command.


Date: 13 MAR 1981 1220-EST
From: GJC at MIT-MC (George J. Carrette)
To: MACSYMA-I at MIT-MC
CC: (BUG LMMAX) at MIT-MC

The function VALUES in MRG;DB is commented out. Who did this and why?
Is this permanent? This is one of the symbols which was shadowed
in Lispm macsyma. If it is no longer part of macsyma it would be
nice to know, so that the shadowing can be removed.


Date: 13 March 1981 10:15-EST
From: James E. O'Dell <JIM at MIT-MC>
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC


    I dumped out a macsyma on the EE machine, lucky CADR-13, and it seems
    to be winning. A couple changes to SYSDEF, MAXII;SYSTEM >
    takes over some functionality from JPG;SUPRV. I commented out the
    POIS package stuff for now since it is a mess of re-definitions, and would
    take a lot of time to clean up.

Note that there are 2 yes, 2 pois packages. One works completely with fixnums
and one is allowed to use Bignums. The fixnum version is faster on MC since
the arithmetic can be open coded. Presumably the fixnum only version can
just be left out. On MC the use of the Bignum version is triggered but
resetting POSILIM. If you just load the one without the fixnum dcls I'll
bet you'll win.

Date: 13 MAR 1981 0019-EST
From: GJC at MIT-MC (George J. Carrette)
Subject: CADR-13
To: (BUG LMMAX) at MIT-MC

PLOT, CONTOURPLOT and PLOT3D were winning also.
Too bad there wasn't a band big enough to do the disk-save.

Date: 12 March 1981 22:42-EST
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC

I dumped out a macsyma on the EE machine, lucky CADR-13, and it seems
to be winning. A couple changes to SYSDEF, MAXII;SYSTEM >
takes over some functionality from JPG;SUPRV. I commented out the
POIS package stuff for now since it is a mess of re-definitions, and would
take a lot of time to clean up.

New: #+MAXII and #-MAXII is used to indicate code for stream-oriented macsyma I/O,
i.e. MAXII;SYSTEM is #+MAXII. Maybe I should call this #+STREAMS.

Note: there are redefinitions in RUNTIM and MOPERS and others. I get this feeling that
the QFASL's we have are *WAY* out of synch, no wonder we are losing.

Is anyone really up on this DEFSYSTEM stuff? Are there functions for
"freezing" the state info of a system, for saying "recompile files which have changed",
or anything like that? 

-gjc

Date: 12 MAR 1981 0107-EST
From: TURNIP at MIT-MC (Alias for KMP)
To: (BUG LMMAX) at MIT-MC

In the #+LISPM version of MORE-FUN in SUPRV, ^W is getting bound. It strikes
me that this function was very hastily put together and deserves some work.
Currently, it seems to read its **MORE** stuff off of STANDARD-INPUT, which
is a total loss if we are batching from a file. A better thing would be to have
it read off of TERMINAL-IO or QUERY-IO ... -kmp

Date: 1 March 1981 04:41-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: DEKLEER at PARC-MAXC
cc: BUG-LMMAX at MIT-MC, JIM at MIT-MC, RWG at MIT-MC, KMP at MIT-MC

    Date: 26 FEB 1981 1315-PST
    From: DEKLEER at PARC-MAXC
    Re:   Various bugs.

    [1] (DEF-MHEADER	|$,| (EV)) in MAXII;NPARSE is not right it
    should be (DEF-MHEADER	|$,| ($EV)).  This makes X,X=1; work.

Fixed. Thanks.

    [2] The aliasing in MAXII;NPARSE is completely screwed up.  A kludge
    solution would be: (DEFUN SCAN-MACSYMA-TOKEN (STREAM) (getalias (IMPLODE
    (CONS '$ (SCAN-TOKEN STREAM T))))) but this is clearly not what the
    author intended, however it works.

This is probably the right way for this to be done. I will look over things
to be sure and install the fix if it looks right.

    [4] DEMO is broken.  This is because BATCH1 is broken.  I tried
    modifying it to rebinding STANDARD-INPUT.  This made it work slightly
    better, but it still breaks.  And the following bug makes it harder to
    find...

I will work on this soon. It shouldn't be too hard to get this working...
if I can get on a LispM....

Also, the :=, ::= and :: bugs should be fixed as well as soon as I recompile 
them. They are thus far only fixed in the source.

I will keep you posted. -kmp

Date: 27 FEB 1981 1412-PST
From: DEKLEER at PARC-MAXC
To:   BUG-LMMAX at MIT-AI

In System 59.29, Ether 1.10, XMacsyma 1.2, microcode 723, M4.2, on Xerox Machine 2:

BEE was right, I misunderstood the documentation for pathnames. It was
my fault.

What I was confused about was: A filename with an FN2 on
*ITS-UNINTERESTING-TYPES* gets ignored, except in the case the version
is :UNSPECIFIC; I thought it always got ignored and implemented in this
way.
-------


Date: 27 February 1981 16:54-EST
From: George J. Carrette <GJC at MIT-MC>
To: DEKLEER at PARC-MAXC
cc: BUG-LMMAX at MIT-AI

Wow, you guys are really going to town on finding bugs,
as they say, "go for it!"

    Date: 27 FEB 1981 1202-PST
    From: DEKLEER at PARC-MAXC
    To:   BUG-LMMAX at MIT-AI

    In System 59.29, Ether 1.10, XMacsyma 1.2, microcode 723, M4.2, on Xerox Machine 2:

    [1] Some of GOSPER's loadfiles have  (EVAL-WHEN (COMPILE EVAL) (SETQ
    *INFILE-NAME-KEY* (NAMESTRING (TRUENAME INFILE))))  This requires
    NAMESTRING and TRUENAME to exist and INFILE to be bound; none of which
    exist.  A kludge would be for TRUENAME to be a fexpr to check whether
    its arg is 'INFILE and do the thing the same thing on standard-input.
    Perhaps infile should be bound to standard-input all the time anyway.

O.K. This is a kludge for Multics and ITS Maclisp. The *INFILE-NAME-KEY*
is used by the macsyma->lisp translator to generate unique names for
DEFUNS which it shoves onto the EOF-COMPILE-QUEUE, which doesn't
exist on the lisp machine either! Needless to say, there are other
ways of doing this on the lisp machine.

    [2] TRD-MSYMEVAL does not exist.  I guess the functions in LIBMAX;TRANSQ
    > were never converted, or are they somewhere else?

True. I am in the process of getting the Macsyma->Lisp translator
running on the lisp machine now. In the mean time, what you can do
so MACRO-EXPAND the files on MC, and ship the expanded lisp to
the other sites. There is a program on MC to do this, ask me to
show you some time. [The function TRD-MSYMEVAL is in two places,
as an FSUBR in MAXSRC;FCALL and as a macro in LIBMAX;TRANSQ]
You can probably get some action just by moving FCALL and ACALL
from MAXSRC, as the FSUBR definitions are simpler than the macro
definitions.

    [3] GOSPER seems to use the convention ODE > is a MACSYMA file while ODE
    LISP is the translated LISP for that file.  That will not work on
    LISPM's since LISP is judged as an *ITS-UNINTERESTING-TYPES* and will
    automatically assumed to be ODE >.  Probably MACSYMA wants to rebind
    *ITS-UNINTERESTING-TYPES* wants to be rebound by MACYSYMA.

This is also a bug on MC. The proper thing is for GOSPER to
say LOAD("ODE")$ and have the LOAD function use the same file-naming
conventions as the translator does, i.e. look for ODE FASL, then
ODE LISP then ODE TRLISP, and then ODE >, and if ODE > to
do a BATCHLOAD of the file (BATCH without creating C-Lines and D-lines
and without echoing to the tty).

I am working on this generic LOAD function now in order to
make it easier to Transport macsyma code to Multics and Lispms.

-gjc



Date: 27 FEB 1981 1520-EST
From: MMcM at MIT-AI (Mike McMahon)
Sent-by: BEE at MIT-AI
Subject: FS:*ITS-UNINTERESTING-TYPES*
To: DEKLEER at PARC-MAXC
CC: (BUG LMMAX) at MIT-AI

If "ODE >" does not parse differently from "ODE LISP", that is a bug.
Under no circumstances should MACSYMA get near FS:*ITS-UNINTERESTING-TYPES*.


Date: 27 FEB 1981 1202-PST
From: DEKLEER at PARC-MAXC
To:   BUG-LMMAX at MIT-AI

In System 59.29, Ether 1.10, XMacsyma 1.2, microcode 723, M4.2, on Xerox Machine 2:

[1] Some of GOSPER's loadfiles have  (EVAL-WHEN (COMPILE EVAL) (SETQ
*INFILE-NAME-KEY* (NAMESTRING (TRUENAME INFILE))))  This requires
NAMESTRING and TRUENAME to exist and INFILE to be bound; none of which
exist.  A kludge would be for TRUENAME to be a fexpr to check whether
its arg is 'INFILE and do the thing the same thing on standard-input.
Perhaps infile should be bound to standard-input all the time anyway.

[2] TRD-MSYMEVAL does not exist.  I guess the functions in LIBMAX;TRANSQ
> were never converted, or are they somewhere else?

[3] GOSPER seems to use the convention ODE > is a MACSYMA file while ODE
LISP is the translated LISP for that file.  That will not work on
LISPM's since LISP is judged as an *ITS-UNINTERESTING-TYPES* and will
automatically assumed to be ODE >.  Probably MACSYMA wants to rebind
*ITS-UNINTERESTING-TYPES* wants to be rebound by MACYSYMA.

-------


Date: 26 FEB 1981 2140-PST
From: GOSPER at PARC-MAXC
Subject: :=
To:   bug-lmmax at MC

i don't believe it took til now to notice, but NPARSE prohibits f():=x
-------

Date: 26 FEB 1981 1315-PST
From: DEKLEER at PARC-MAXC
Subject:  Various bugs.
To:   BUG-LMMAX at MIT-AI

In System 59.29, Ether 1.10, XMacsyma 1.1, microcode 723, M4.2, on Xerox Machine 2:

[1] (DEF-MHEADER	|$,| (EV)) in MAXII;NPARSE is not right it
should be (DEF-MHEADER	|$,| ($EV)).  This makes X,X=1; work.

[2] The aliasing in MAXII;NPARSE is completely screwed up.  A kludge
solution would be: (DEFUN SCAN-MACSYMA-TOKEN (STREAM) (getalias (IMPLODE
(CONS '$ (SCAN-TOKEN STREAM T))))) but this is clearly not what the
author intended, however it works.

[3] $APROPOS in ZZ;APROPO has test unbound.  It wants to be declared
special.

[4] DEMO is broken.  This is because BATCH1 is broken.  I tried
modifying it to rebinding STANDARD-INPUT.  This made it work slightly
better, but it still breaks.  And the following bug makes it harder to
find...

[5] It would be nice if you entered a MACSYMA ERRBREAK that it rebound
STANDARD-INPUT to TERMINAL-IO.  In that way an ERRBREAK during a DEMO
doesn't lose big.
-------


Date: 25 February 1981 17:08-EST
From: Bruce E. Edwards <BEE at MIT-AI>
To: DEKLEER at PARC-MAXC, BUG-LMMAX at MIT-MC

You used to be able to type (MACSYMA) here, but the right way to get to macsyma is
SYSTEM A. There is a function in the user package which gets you into macsyma.
You must be in some other package when you type (MACSYMA) and it fails.
The best thing to type is (:MACSYMA) or globalize it yourself.


Date: 25 FEB 1981 1240-PST
From: DEKLEER at PARC-MAXC
To:   BUG-LMMAX at MIT-MC

In System 59.29, Ether 1.8, microcode 723, (59), on Xerox Machine 2:

RWG tells me that you can type (MACSYMA) at MIT and win, while we here
have to type (MC:MACSYMA).  If that is true that is very wierd and
I don't understand it.  I have been looking at the sources and don't
seem why that could work, could someone verify this for me?

My reasoning is.  If anything is going to make this work the following line in
SYSDEF might.

   (EXTERNAL MACSYMA MACSYMA-SPLIT-SCREEN
	     ;;This has to be EQ for TYPEP and is redefined in MRG;DB
	     SYMBOL)

But the only thing that EXTERNAL does is to suppress errors upon
redifintions, it does not affect INTERNing or FSETing.  To get something
global you either have to GLOBALIZE it or put it on LISPM2;GLOBAL >.  So
the only thing that has any affect is (EXTERNAL SYMBOL) since SYMBOL is
already on global.
-------

Date: 25 FEB 1981 0436-PST
From: GOSPER at PARC-MAXC
Subject: Taylor?
To:   bug-lmmax at MC

radexpand:all$
sum(q^((n+1/2)^2/2),n,0,inf);
taylor(%,q,0,57);  returns promptly, but
%^2;   was still chugging away after Keyboard idle 18 min.
-------

Date: 25 FEB 1981 0622-EST
From: RWG at MIT-MC (Bill Gosper)
To: (BUG LMMAX) at MIT-MC

The timing stuff (SHOWTIME, LASTTIME, etc.) still seems to be dead.

DEBUGMODE(ALL) seems to be pretty useless.  It doesn't tell you the error, and
you can't type EXIT; like it says you should.  In fact you can't type much of
anything.

--More Display-- still loses.

On the brighter side, the lispm can FACTOR(X^(3*5*7*11)-1);  the KL can't.

Date: 24 February 1981 08:10-EST
From: Bruce E. Edwards <BEE at MIT-AI>
Subject:  Nonmodular IO code
To: DEKLEER at PARC-MAXC
cc: BUG-LMMAX at MIT-MC

My feeling is that all of the fies on LMMAX; are fair game as long as you
check your code and report the change to LMMAX; This may change when the
Mathlab group starts maintaining those files. To this date, I think most of
that stuff has been hacked by JLK, CWH, and myself. I dont think any of us care.


Date: 24 February 1981 08:05-EST
From: Bruce E. Edwards <BEE at MIT-AI>
Subject:  parc macsyma
To: RWG at MIT-MC
cc: BUG-LMMAX at MIT-MC

Hmm, could you check your QFASL's again? I  recompiled somethings after you 
sent the message, because of some macro lossage, and fixed the EV bug I think.
There was a probelm with the alias stuff, which I fixed. Please check the
currentness of your files. As far as I can tell, we are winning here.


Date: 24 FEB 1981 0522-EST
From: GJC at MIT-MC (George J. Carrette)
Subject: last message
To: RWG at MIT-MC
CC: (BUG LMMAX) at MIT-MC

was not english due to careless editing...

Date: 24 February 1981 04:26-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  parc macsyma
To: RWG at MIT-MC
cc: BUG-LMMAX at MIT-MC

PROD and SUBST not working is sound like the ALIAS properties
not being set for them. What parser/suprv did you use?

Date: 24 FEB 1981 0423-EST
From: RWG at MIT-MC (Bill Gosper)
Subject: parc macsyma
To: (BUG LMMAX) at MIT-MC

Initial impressions of newly created macsyma at xerox:
The MAKE-SYSTEM seems to have worked, but the :noconfirm didn't obviate having
to type 69 Ys at "illegal" definitions, mostly in MRG; files.  (Fascist
system won't permit Y type-aheads.  There oughta be a blue key that means
goddam, don't flush this input!)

KMP:  the reason we have to type (macsyma:macsyma) is that for some reason,
GLOBALIZE doesn't work.  Johan will look into it.

The macsyma is sort of alive.  it starts with (C2) instead of (C1), and adds
as much as 4 to LINENUM between <ABORT> and (macsyma).  (What's the right
way to go back and forth?)

All of the following weirdness came after an unsuccessful (Disk-save 3)
(not enough room on band).

c2,x=y;  comes back EV(C2,X=Y);

PROD and SUBST are undefined, but PRODUCT and SUBSTITUTE work.

ctrlY no longer seems to reload cmd line, just beeps, as does ctrlK.

There was more, but i've suffered a memory reset due to bizarre interruption.

Date: 23 FEB 1981 1740-PST
From: DEKLEER at PARC-MAXC
Subject:  Nonmodular IO code
To:   BUG-LMMAX at MIT-MC

The following function in LMSUP >
(DEFUN FILE-OPEN (FILE-OBJ)
    (EQ (FS:CHANNEL-STATE (SYMEVAL-IN-CLOSURE FILE-OBJ 'FS:FILE-CHANNEL)) ':OPEN))

should be

(DEFUN FILE-OPEN (FILE-OBJ)
  (EQ (FUNCALL FILE-OBJ ':STATUS) ':OPEN))

The :STATUS msg works on chaosnet and ethernet and was designed for this purpose.
(I would be willing to change the source at MIT for things like this, but I
am not sure what the policy is.)

Also
ALGSYS DEMO does not seem to work since "$" is not recognized as a terminator.  Is this
a consequence of the new parser?

-------

Date: 18 FEB 1981 1907-EST
From: KMP at MIT-MC (Kent M. Pitman)
To: (BUG LMMAX) at MIT-MC

I dumped out Macsyma 4.2 on band 7 of Cadr-15. This is just so that Macsyma
will have a parser. It is a normal lispm rubout stream calling my macsyma
parser directly. No editting capabilities are yet worked out. At some later
time I will try to interface it to a Ztop type arrangement. This version
was created from the Macsyma on band 3 (macsyma 4.1) by loading the lastest
LMMAXQ;LIMIT, LMMAXQ;LESFAC, and MAXII;NPARSE. (When loading NPARSE, answer
'Y' to the query about redefining CONTINUE.) This is a temporary measure for
people to fool with. I will have a more elaborate CONTINUE, etc. in the 
near future, I hope. Also, I don't know if BATCH will work under this version
but I will try to make it work soon, too.
-kmp

Date: 18 February 1981 14:51-EST
From: James E. O'Dell <JIM at MIT-MC>
To: BEE at MIT-MC
cc: BUG-LMMAX at MIT-MC

    Date: 18 February 1981 07:47-EST
    From: Bruce E. Edwards <BEE>
    To:   BUG-LMMAX

    There is a new macsyma made on CADR-16. It seems to work at least somewhat,
    and was generated completely by (MAKE-SYSTEM 'MACSYMA). The way to do this is
    to load the file LMMAX;SYSDEF and then thpe (make-system 'macsyma) and answer
    yes to everything. Eventually it will not ask you any questions and will
    work completely. Currently there are a few bugs in it, so you wont be able
    to load a working one. Therefore I will install it manually on CADR-15 soetime
    in the next few days.

Can you help RWG out? He wants a new Macsyma also.

Date: 18 February 1981 12:55-EST
From: George J. Carrette <GJC at MIT-MC>
To: BEE at MIT-MC
cc: BUG-LMMAX at MIT-MC

    Date: 18 FEB 1981 0747-EST
    From: BEE (Bruce E. Edwards)
    To:   (BUG LMMAX)

    There is a new macsyma made on CADR-16. It seems to work at least somewhat,
    and was generated completely by (MAKE-SYSTEM 'MACSYMA). The way to do this is
    to load the file LMMAX;SYSDEF and then thpe (make-system 'macsyma) and answer
    yes to everything. Eventually it will not ask you any questions and will
    work completely. Currently there are a few bugs in it, so you wont be able
    to load a working one. Therefore I will install it manually on CADR-15 soetime
    in the next few days.

This sounds like near complete winnage. Many thanks, this should really
help the work of some people here at Plasma.


Date: 18 FEB 1981 0747-EST
From: BEE at MIT-MC (Bruce E. Edwards)
To: (BUG LMMAX) at MIT-MC

There is a new macsyma made on CADR-16. It seems to work at least somewhat,
and was generated completely by (MAKE-SYSTEM 'MACSYMA). The way to do this is
to load the file LMMAX;SYSDEF and then thpe (make-system 'macsyma) and answer
yes to everything. Eventually it will not ask you any questions and will
work completely. Currently there are a few bugs in it, so you wont be able
to load a working one. Therefore I will install it manually on CADR-15 soetime
in the next few days.

Date: 17 FEB 1981 1237-EST
From: MACSYM at MIT-MC
To: (BUG LMMAX) at MIT-MC
CC: KMP at MIT-MC

Somebody should load a parser, ANY parser, into the current macsyma
band, and resave it.  Otherwise one is forced to type stuff into
LISP unless one likes looking at infinite occurrances of (C1) when
it finds the parser missing.  Needless to say, this can get rather
boring.

Date: 10 February 1981 22:26-EST
From: James E. O'Dell <JIM at MIT-MC>
Subject:  Creating new MACSYMAs
To: RWG at MIT-MC, JLK at MIT-MC
cc: BUG-LMMAX at MIT-MC

JLK last hacked the Macsyma loading protocol. As I remember he was writing
some MAKE-SYSTEM functions to do this.

We should do this for our LISPM as I tried to use the Macsyma on it and I think
the microcode changed on us as I couldn't boot either version up.

Maybe JLK can give us the details?

RWG@MIT-MC 02/09/81 20:52:41 Re: Creating new MACSYMAs
To: (BUG LMMAX) at MIT-MC
How do I?  Specifically, do I fetch all the LMMAXQ; files indicated in
LMMAX;LOADER > and then (pkg-load'mc)?  In any case, is that set of files
currently in loadable condition?  If not, when might it be?

GJC@MIT-MC 02/03/81 19:03:33
To: (BUG LMMAX) at MIT-MC
For those interested, there is and has been a command
LISPM-DECLARE-FILE-MAKE in MAXTUL;TS MAXTUL, which generates a file of
declarations to be loaded into a bare lisp machine environment before
compiling a macsyma. This will not give complete winnage of course
because of the reluctance to put in the effort to fully identify
and formalize the global evironment via DEFMFUN and DEFMVAR.
However, it helps. It is mostly special variables which are
unidentified.

-gjc

Date: 1 February 1981 23:50-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  The PARSER
To: BEE at MIT-AI
cc: BUG-LMMAX at MIT-AI

MRG;GRAM and the function SCAN in JPG;SUPRV, and all the
half-scanning stuff found in CONTINUE, BATCH1 (and a couple other functions),
is being flushed in favour of the single entry-point 

                  MREAD

which is found now in MAXII;NPARSE >

All this needs is a little interfacing to the rest of macsyma
and to the window system (which should be trivial since it is
stream oriented). THE problem of course is deciding exactly what
in SUPRV to keep. Probably much of the code with be #-LISPM.
(Make that #-NPARSE).

-gjc



Date: 1 February 1981 20:13-EST
From: Bruce E. Edwards <BEE at MIT-AI>
To: BUG-LMMAX at MIT-AI

In the version of LMMAX in System 57.4, ZMail 15.1, microcode 720, on Lisp Machine Six:

I have rehacked LMMAX;SYSDEF > to work, and also to reflect the dependencies that I found.
Unfortunately, this does not mean that you can use a Macsyma loaded from this, as MRG;GRAM
has been removed from the definition, but is still necessary for the system to work.
Who knows what is going on about this?


Date: 28 January 1981 17:49-EST
From: George J. Carrette <GJC at MIT-MC>
To: RWG at MIT-MC
cc: BUG-LMMAX at MIT-MC

Don't bother with patching up any of the macsyma I/O
SAVE/LOADFILE/BATCH/DISPLAY. There is code which is properly
modularized and stream oriented which has been written and simply
needs to be installed into the macsyma system.  The thing holding up
the installation is lack of modularity of the present I/O code (i.e.
it contains many obscure utilities and initializations used by other
non-i/o code), and the lack of time to remodularize.
[With the new code all the features of evaluated from/into buffer,
 compile from buffer, etc, will be available. C-line D-line may
 be punted, macsyma display editing will be workable, etc]

-gjc

Date: 28 January 1981 17:38-EST
From: James E. O'Dell <JIM at MIT-MC>
To: BUG-LMMAX at MIT-MC

    Date: 25 January 1981 11:47-EST
    From: Bill Gosper <RWG>
    To:   JOHAN, BEE, CWH, JIM

    well, i haven't had much of a chance to find hairy macsyma bugs due to being
    chewed up by lots of low level bugs (plus my own inexperience on the lispms).
    here are a few, which i am willing to report at greater length (and
    individually) if someone will explain the procedure for doing so.

    INVERT, ELIMINATE, and APROPOS don't exist.

    the rationalizer of bfloats looks at ratepsilon, instead of fpprec or
    the intrisinc number prec or some sort of bratepsilon.

    integrate(%e^-x^2,x); gets an error which i forget.

    FIB(20) gets something like *a unbound var.

    numerous difficulties with save, batch, and demo, which i should discuss
    with johan first.

    typing space at --more display-- often causes rapid overprinting and erasure
    at top left, followed by --more display-- again, which responds properly to
    space, but with middle portion of display lost.  (i think hic patched this
    during lisp conf demo.)

    finally, i'm not on any lispm mailing lists.  how do i get on the macsyma
    one, and what others are there?

Date: 26 JAN 1981 0616-EST
From: JPG at MIT-MC (Jeffrey P. Golden)
To: RWK at MIT-MC, MOON at MIT-MC, (BUG LISPM) at MIT-MC, RWG at MIT-MC
To: DLA at MIT-MC
CC: (BUG LMMAX) at MIT-MC

If you want to include "LISPM-MACSYMA" in any future discussions of 
control characters on the LISPM, can you please mail to BUG-LMMAX@MC 
and not to BUG-MACSYMA@MC.  The BUG-LMMAX@MC mailing list exists 
expressly for this purpose.

JPG@MIT-MC 01/26/81 06:15:24
To: (BUG LMMAX) at MIT-MC
Forwarded:
Date: 25 JAN 1981 2342-EST
From: RWK at MIT-MC (Robert W. Kerns)
Subject: Slightly less pissed summary
To: MOON at MIT-MC
CC: (BUG LISPM) at MIT-MC, (BUG MACSYMA) at MIT-MC, RWG at MIT-MC
CC: DLA at MIT-MC

If you want CONTROL-SHIFT-char to be different than CONTROL-char
fine, except I think that you should then call it CONTROL-SHIFT-char rather
than HYPER-CHAR.  But CAPSLOCK should not provide yet a THIRD character,
for the SAME HAND MOTION.  And #^y should just controllify #/y, not
controllify-and-CAPSLOCK (which is different from controllify-and-shift).
While many reasonable schemes are possible, I don't think you can
claim the current one is reasonable.
^_
Date: 25 JAN 1981 2326-EST
From: RWK at MIT-MC (Robert W. Kerns)
To: MOON at MIT-MC
CC: (BUG LISPM) at MIT-MC, (BUG MACSYMA) at MIT-MC, RWG at MIT-MC
CC: DLA at MIT-MC

C'mon, I don't think it's at all reasonable for CAPSLOCK to affect what
CONTROL-Y sends for *EXACTLY* the same reasons I don't think 123456 should
send !@#$%^ with CAPSLOCK down.  Your argument argues for my position, not
yours.  *** THIS IS NOT AN ISSUE OF MACLISP COMPATIBILITY!!!!! ***  (The
statement that CAPSLOCK should be the same as SHIFT was a bug, since it is
far too easy for you to take it out of context.  The correct context is given
that there is going to be a difference between upper-case CONTROL-y and
lowercase CONTROL-y, and CAPSLOCK is going to distinguish them, then SHIFT
damned well ought to as well.  Of course, I disagree with the premiss that
upper- and lower- CONTROL-Y should be distinguished, and with the premiss
that CAPSLOCK should affect them).

The reason I don't like CONTROL-SHIFT being HYPER has absolutely NOTHING
whatsoever to do with MACLISP compatibility.  It has to do with
understandability and making the keyboard's behaviour more understandable.
It has to do with self-consistancy.  That #^Y should return what you get
when you type control-Y has nothing to do with what happens in MACLISP,
rather it has to do with BEING CONSISTANT WITH WHAT HAPPENS WHEN YOU TYPE
CONTROL-Y ON THE LISP MACHINE.  Now it corresponds to what happens when
you type an obscure combination of keys, which is OBVIOUSLY WRONG.
^_
Date: 25 JAN 1981 2254-EST
From: Moon at MIT-AI (David A. Moon)
To: RWK at MIT-MC
CC: dla at MIT-EECS, (BUG LISPM) at MIT-MC, (BUG MACSYMA) at MIT-MC
CC: RWG at MIT-MC

    RWK@MIT-MC 01/25/81 10:39:18
    To: (BUG LISPM) at MIT-MC
    CC: (BUG MACSYMA) at MIT-MC, RWG at MIT-MC
    In System 55.20, ZMail 10.2, microcode 715, on Lisp Machine Fifteen:
    
    It is a loss, misfeature, and I would claim outright bug, that #^Y =
    CONTROL-CAPSLOCK-Y.  Not CONTROL-LOWERCASE-Y, CONTROL-UPPERCASE-Y,
    CONTROL-SHIFT-Y, or anything obvious like that.  I feel this violates
    the definition of #^Y.  
Compare characters with CHAR-EQUAL.  Naturally the Lisp machine character set
cannot be 100% compatible with the Maclisp character set since it contains more
characters.
			    I also think it's a loss that having the CAPSLOCK
    key down does anything different than holding the shift key down.  
I assume you don't really want typing 12345 to send !@#$% when caps lock is down.
								 At any
    rate #^Y should be made to conform to what actually gets read when you
    type control-Y.
Many things can get sent when you type control-Y, it can only be numerically
equal to one of them.
								       The
    editor should alias the apropriate set of keys to the HYPER-mumble frobs
    instead of actually setting the HYPER bit on input via TYI.  
I disagree.  And if it did that, that would not address your Maclisp compatibility
problems.  The issue here is that we want typing control-letter and typing
control-shift-letter to be two different characters, since they are two different
actions of your hand, and therefore they cannot possibly be the same character.

A separate issue is that caps-lock affects control characters.  This makes no
difference if CHAR-EQUAL is used to compare characters, but it still might
be cleaner if all control characters were always in one case.  Last time this
issue came up I asked (BUG LISPM) for opinions on changing the system so that
all control characters were always upper-case, and got no response.  I'm asking
again.  If this change was made, then typing control-Y would always give the
same numeric code regardless of the state of the self-locking keys; naturally
control-meta-Y, control-super-Y, control-shift-Y, and any other shift keys we
care to introduce in the future would give different codes.

JPG@MIT-MC 01/25/81 10:54:02
To: (BUG LMMAX) at MIT-MC
Forwarded for RWK:
RWK@MIT-MC 01/25/81 10:39:18
To: (BUG LISPM) at MIT-MC
CC: (BUG MACSYMA) at MIT-MC, RWG at MIT-MC
In System 55.20, ZMail 10.2, microcode 715, on Lisp Machine Fifteen:

It is a loss, misfeature, and I would claim outright bug, that #^Y =
CONTROL-CAPSLOCK-Y.  Not CONTROL-LOWERCASE-Y, CONTROL-UPPERCASE-Y,
CONTROL-SHIFT-Y, or anything obvious like that.  I feel this violates
the definition of #^Y.  I also think it's a loss that having the CAPSLOCK
key down does anything different than holding the shift key down.  The
editor should alias the apropriate set of keys to the HYPER-mumble frobs
instead of actually setting the HYPER bit on input via TYI.  At any
rate #^Y should be made to conform to what actually gets read when you
type control-Y.


BMT@MIT-MC 12/17/80 12:42:37
To: (BUG LMMAX) at MIT-MC
Save doesn't work, complains about unable
to convert namelist to namestring.

JLK@MIT-MC 12/06/80 11:34:22
To: (BUG LMMAX) at MIT-MC
At the end of LOADER > SCE;UTILS QFASL is loaded.  I am going to comment it
out to see if any of the things there are depended upon by other code.  I
notice that about half the macros there are duplicated elsewhere in LIBMAX;MAXMAC,
LISP;UMLMAC, and others.  If there is a need for the macros in SCE;UTILS
they should be put in a standard place on LMMAX;

RHB@MIT-MC 12/03/80 14:02:13
To: (BUG LMMAX) at MIT-MC
In System 49.13, ZMail 3.6, Macsyma 3.2, microcode 697, on Lisp Machine Fifteen:

2 dimensional arrays don't work because $array calls fillarray which only works on
one dimensional arrays.


Date: 25 November 1980 21:27-EST
From: Bruce E. Edwards <BEE at MIT-AI>
Sender: BEE at CADR7 at MIT-AI
Subject: Macsyma demo
To: INFO-LMMAX at MIT-MC

There is a new macsyma 3.2 on a band on cadr15. I suggest you use this for your demo.


GJC@MIT-MC 11/07/80 01:50:36 Re: TRANSL
To: JIM at MIT-MC, CWH at MIT-MC
CC: (BUG LMMAX) at MIT-MC
The file MAXSRC;TRANSS should be the only file-system dependant
part of the translator. It is a small file.

Date: 30 OCT 1980 1530-EST
From: JLK at MIT-MC (John L. Kulp)
Sent-by: JLK at CADR10 at MIT-MC
To: JPG at MIT-MC, MACSYMA-I at MIT-MC, (BUG LMMAX) at MIT-MC
To: JLK at MIT-MC, JM at MIT-MC, (BUG LISPM) at MIT-MC, Johan at MIT-AI

I disagree with most of this:

    The (SSTATUS RANDOM 0) LISPM bug was fixed in MC:RAT;SPGCD >  by CWH 
    on 10/13.  (LISPM's should support (SSTATUS RANDOM 0) as it is essential 
    in debugging MACSYMA.)
No, Maclisp should be improved to have the more general and flexible facility
that the Lisp machine has.  I think people writing new code should use
the more modern capabilities around, not demand everyone adapt to archaic
coding styles.

  JLK is incorrect to say that SPGCD once worked 
    on LISPMs as it is a relatively new package.  
I never claimed that.  I claim RATSIMP once worked on the LISP machine
(as you should know, everything in the world depends on it, thus very little
now works on the LISP machine, since SPGCD broke the most basic of all
Macsyma utilities -- I think anyone hacking something so basic to Macsyma
should be both competent and responsible to make sure it works).
    It is my understanding that LISPM MACSYMA is not being maintained now 
    due to lack of manpower.  [1] CWH doesn't have time to do it now, and 
    said that he hasn't done it since May.  [2] At the last Mathlab meeting 
    JM said that LISPM MACSYMA was not to be worked on until Multics 
    MACSYMA were made viable.  We aren't charging anyone for LISPM MACSYMA 
    maintenance, so I don't know why JLK raises that as an "issue".
Ok, I guess Macsyma is free then to anyone who wants to use it on a Lisp
machine, since the Mathlab group is not maintaining it.  I'll make sure
the lawyers know about this policy.

Date: 30 OCT 1980 1345-EST
From: JPG at MIT-MC (Jeffrey P. Golden)
To: MACSYMA-I at MIT-MC, (BUG LMMAX) at MIT-MC, JLK at MIT-MC
To: JM at MIT-MC, (BUG LISPM) at MIT-MC

The (SSTATUS RANDOM 0) LISPM bug was fixed in MC:RAT;SPGCD >  by CWH 
on 10/13.  (LISPM's should support (SSTATUS RANDOM 0) as it is essential 
in debugging MACSYMA.)  JLK is incorrect to say that SPGCD once worked 
on LISPMs as it is a relatively new package.  
It is my understanding that LISPM MACSYMA is not being maintained now 
due to lack of manpower.  [1] CWH doesn't have time to do it now, and 
said that he hasn't done it since May.  [2] At the last Mathlab meeting 
JM said that LISPM MACSYMA was not to be worked on until Multics 
MACSYMA were made viable.  We aren't charging anyone for LISPM MACSYMA 
maintenance, so I don't know why JLK raises that as an "issue".

Date: 30 OCT 1980 0737-EST
From: LSH at MIT-MC (Lars S. Hornfeldt)
To: (BUG LMMAX) at MIT-MC, JLK at MIT-MC, JPG at MIT-MC
CC: MACSYMA-I at MIT-MC


	From: JPG at MIT-MC (Jeffrey P. Golden)
	The following information may be useful to some of you.
	Please note that it is 3 weeks old.
	   MOON@MIT-MC 10/09/80  Re: Installing Macsyma on Lisp machine

Directly after MOON's msg, I made 2 MACSYMAs on CADR-1 and reported them.
	[LSH@MIT-MC 10/11/80 03:24:19 Re: New Macsymas on Cadr-1]

Re: JLK's last Lispm-MACSYMA that errors "RANDOM SSTATUS":

As I reported to bug-lmmax, both cadr-1 macsymas had that err also,
INITIALLY, but the rat-functions WORKED when called the SECOND TIME,
so incremental debugging can be done here.

INTEGRATION WORKS on CADR-1.
BATCH didn't, and in the 46.1 band, also DRAW-LINE in fractions fails.

-lsh

Date: 30 OCT 1980 0636-EST
From: JPG at MIT-MC (Jeffrey P. Golden)
To: MACSYMA-I at MIT-MC, (BUG LMMAX) at MIT-MC

The following information may be useful to some of you.  Please note 
that it is 3 weeks old.
   MOON@MIT-MC 10/09/80 01:28:02 Re: Installing Macsyma on Lisp machine
   To: JIM at MIT-MC
   CC: LSH at MIT-MC, CWH at MIT-MC, JPG at MIT-MC
   I have installed the current system (46.1) on CADR-1.  This seems like the
   best machine to build Macsyma's on since it has a T-300 (large address 
   space), doesn't belong to anyone in particular, and is in a convenient 
   location for demos.  You can put the "46.1 Macsyma" world on band 1 or 
   band 5.  We can then copy the band to any other machines that need it.
   Is there any policy about putting Macsyma on the department machines?
   Their disks may be too small to accomodate it, I'm unsure.

Date: 28 October 1980 18:04-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Separate versions for separate machines
To: JLK at MIT-MC
cc: BUG-LMMAX at MIT-MC, MACSYMA-I at MIT-MC

I think this is a solvable problem. I will address it in a week or two
after midterms and after I have finished my work on the new parser...
People need to think in a more structured way about what is available
and what is not on different sites. I suspect the problem is generally
one of ignorance and I think that is curable. Anyway, let's cross our
fingers and hope ... 
-kmp

Date: 28 OCT 1980 1428-EDT
From: JLK at MIT-MC (John L. Kulp)
To: (BUG LMMAX) at MIT-MC
CC: MACSYMA-I at MIT-MC

ZGCD bombs in a call to SSTATUS RANDOM which does not exist on the Lispm.
Thus none of the rational simplifiers work at all.

integrate(1/(x^3+a^3),x) bombs because someone doesn't know how to
write machine independent macros.

These things used to work on the Lisp machine, so I assume people
hacking on the PDP-10 version have broken this code.

This brings up a bigger problem.  Either people are going to have
to be responsible to make sure their changes work on all machines
that Macsyma runs on, or there are going to have to be completely
separate versions for each type of machine.  I have heard people
say that it is too much trouble to test their changes on different
machines.  If this is going to be the policy, then we should
separate the sources, so that every time a new Macsyma is loaded
on the LISP machine it is not completely broken.  (Actually, being
careful not to install a qfasl file which is untested is probably
adequate  -- thus we need an extra directory for experimental
qfasl files.  This solution makes it very hard to make patches,
since the source files may be so munged that it is impossible
to make incremental changes, but hopefully that will be the
exception rather than the rule.)

LSH@MIT-MC 10/11/80 03:24:19 Re: New Macsymas on Cadr-1
To: (BUG LMMAX) at MIT-MC
CC: LSH at MIT-MC, RP at MIT-MC
CADR-1 has two new Experimental Macsymas.
Nothing is dingeling in any of them.

"44.3 Macsyma 2E" ratsimp 1:st time => illegal SSTATUS request"
      < ZGCD < JGCDA Eg. ratsimp, Integrate, EV all works, except that

1) Batch gives error (serious):
   FILE-SPREAD-PATHNAME  Undefined < UNEXPAND-PATHNAME < BATHC1 < BATCH
2) the FIRST CALL (later calls works) on ratsimp, errors with:
   "RANDOM not a legal SSTATUS request" < ZGCD < PGCDA


"46.1 Macsyma 2E" works to the same extent, but have the following
		additional bug when drawing fraction lines:
3) (:METHOD MACSYMA-LISTENER :DRAW-LINE) Called with too many arguments

JIM@MIT-MC 10/08/80 19:03:55
To: (BUG LMMAX) at MIT-MC
THIS IS A TEST

LSH@MIT-MC 10/08/80 03:59:41 Re: Lispm-Macsyma bug list
To: (BUG LMMAX) at MIT-MC
Error-List for CADR3,band 4,for the record,to check in next MACSYMA-version:

Problems possibly due to LISPM:
-------------------------------
1)Spurious black rectangles occurs on screen (<esc>C converted,or
totally black) 4chars wide, 1-15 high, when displaying large formulas.

2)Various lines not drawn, like in fractions and around matrices.

3)On cadr3, using band 4, one can't do (disk-restore 4): it hangs.

Specific MACSYM-ese bugs:
-------------------------
4)WRITEFILE(); Doesn't work
5)PAGEPAUSE1 Undefined function
6)BATCHLOAD  Undefined function
7)TRUENAME Undefined function <- RESTORE (Use loadfile instead.)
	+NAMESTRING
8)Double ^Z required to exit from err in batchfile (1:st ^Z gives new err)

9)Pathological consumption of CONTEXT. Increased 50=>200, still exhausted
by LRICCICOM in program below. Can be increased more but the phenomena
might indicate err.

10)The function METRIC(); in MC:TENSOR;CTENSR FUNCS inserts extra:
(#<DTP-FEF-POINTER ....  POWERX-INTERNAL-G1192> SIMP)
around some sums in numerator.

-lsh

GJC@MIT-MC 09/25/80 15:59:23
To: CWH at MIT-MC, LSH at MIT-MC, JIM at MIT-MC
CC: (BUG LMMAX) at MIT-MC, JLK at MIT-MC
The declarations in ALJABR;DCL * don't seem
to be taking effect when compiling on the lisp machine.
INCLUDEF doesn't seem to be supported either.

The fact that the regular lispm package compilation
features aren't/can't be used with macsyma seems like
quite a loss also. Oh well, I'll load the file ALJABR;DCL LOAD
by hand for this run.


CWH@MIT-MC 09/08/80 19:50:42
To: LSH at MIT-MC, GJC at MIT-MC, (BUG LMMAX) at MIT-MC
    LSH@MIT-MC (Sent by LSH0@MIT-MC) 09/05/80 08:45:40
    Re-sending this from 9/2:
    <break> on the lispm keyboard earlier took one from a
    macsyma- lisp (error-break) to toplevel-macsyma, but not now,
    just gives warning: -..break.. you may loose...- (on macsyma3.0
    cadr1). What to use instead to get out of the error break?

Please send messages like these to BUG-LMMAX so they can be archived and
acted upon later.

I am not currently working on Lisp Machine Macsyma.  I suspect this is a
problem with the conversion to the new I/O system which was not done by me.

Date: 25 August 1980 14:32-EDT
From: Howard I. Cannon <HIC at MIT-MC>
To: JPG at MIT-MC
cc: BMT at MIT-MC, RZ at MIT-MC, BUG-LMMAX at MIT-MC

    Date: 25 August 1980 08:18-EDT
    From: Jeffrey P. Golden <JPG at MIT-MC>
    To:   HIC
    cc:   BMT, RZ, BUG-LMMAX

       HIC@MIT-MC 08/25/80 01:23:45
       To: JPG at MIT-MC, BMT at MIT-MC, RZ at MIT-MC
       Setting the variable $ALGDELTA to non-zero fixed all outstanding
       ALGSYS bugs in LISPM.
    $ALGDELTA is initialized to 1.0E-5 on MC, in JM;SIMP of all places, 
    I don't know where its initial value went on LISPM.
Yes, that I knew.  I also have no idea why it was 0 in LISPM.  Is
BUG-LMMAX the right [lace for such bug reports?

JPG@MIT-MC 08/25/80 08:18:41
To: HIC at MIT-MC
CC: BMT at MIT-MC, RZ at MIT-MC, (BUG LMMAX) at MIT-MC
   HIC@MIT-MC 08/25/80 01:23:45
   To: JPG at MIT-MC, BMT at MIT-MC, RZ at MIT-MC
   Setting the variable $ALGDELTA to non-zero fixed all outstanding
   ALGSYS bugs in LISPM.
$ALGDELTA is initialized to 1.0E-5 on MC, in JM;SIMP of all places, 
I don't know where its initial value went on LISPM.

HIC@MIT-MC 24 August 1980 19:49-EDT
To: (BUG LMMAX) at MIT-MC
CC: JIM at MIT-MC
On the Lisp Machine, ALGDELTA and ALGEPSILON are mis-initialized.

JPG@MIT-MC 08/23/80 06:50:02
To: (BUG LMMAX) at MIT-MC
CC: HIC at MIT-MC, JPG at MIT-MC
   HIC@MIT-MC 08/22/80 22:35:33
   On the Lisp Machine, maplist(disp,1) in either
   maperror true or false mode, takes cdr of a number
   (or at least tries...)
I could not reproduce this behavior on MC.  Can one of you please track 
this down on the LISPM?  Thanks.

Date: 23 July 1980 13:20-EDT
From: James E. O'Dell <JIM at MIT-MC>
To: CWH at MIT-MC, BUG-LMMAX at MIT-MC

    Date: 21 July 1980 11:47-EDT
    From: Carl W. Hoffman <CWH at MIT-MC>

    LOADFILE(CANNOT,GIVEUP,MC,ALJABR)$
    (LOAD "DAS;MG >")
    MINGENERATORS(CANNOT);
    Expects a list of equations.  Machine hangs.
    Compile MG before running.

The reason is simply that the problem runs out of address space. If you
turn the garbage collector on it seems to run forever. Do you have any
other info on this problem, as it may be getting to the heart of a more 
serious bug.

CWH@MIT-MC 07/21/80 11:47:37
To: (BUG LMMAX) at MIT-MC
LOADFILE(CANNOT,GIVEUP,MC,ALJABR)$
(LOAD "DAS;MG >")
MINGENERATORS(CANNOT);
Expects a list of equations.  Machine hangs.
Compile MG before running.

JPG@MIT-MC 05/15/80 07:11:47
To: (BUG LMMAX) at MIT-MC
LSH's INTEGRATE(SIN(X)^2/X,X); bug on LISPM is probably fixed in 
JM;RISCH 347 .

LSH@MIT-MC 05/15/80 06:20:36 Re: INTEGRATE(SIN(X)^2/X,X)  gives error:
To: (BUG LMMAX) at MIT-MC, LSH at MIT-MC

>>TRAP 5003 (ARGTYP CONS M-T T ...)
The arg to CAAAR, -1, was of the wrong type.
The function expected a cons.
While in the funciton RISCHLOGDPROG < TRYRISCH < RISCHINT

RISCHLOGDPROG:
   Arg 0 (ratarg): ((g0462  4 -1 2 ..) g0462 2 (g0463 1 4))

This might be due to some function used for RATs that on
mc accepts atomic car-parts, but gets oversensitive to
them on the lispm.

JIM@MIT-MC 04/22/80 11:06:21
To: (BUG LMMAX) at MIT-MC
(x:2,y:3);
/* GIVES DOLIST incorrect definition */

Date: 13 April 1980 14:04-EST
From: Howard I. Cannon <HIC at MIT-MC>
Subject:  Macsyma on Cadr4
To: CWH at MIT-MC
cc: RWG at MIT-MC, BUG-LMMAX at MIT-MC

It is not clear that I'm interested enough to actually compile a file I make
a fix to (as a matter of fact, it is pretty clear that I'm not).  If that means
I can't fix things, then I won't.  Tough on you!

As far as currents Macsymas are concerned: sigh, it's too bad -- what I wanted
to do was run a problem, I guess we aren't up to the point where I can do that easily.

Also, unless you fixed the files AFTER I sent the note, there were some
QFASL files that were still wrong in the rational function package.  I would
seriously suggest that you check this carefully.

CWH@MIT-MC 04/11/80 22:16:33 Re: Macsyma on Cadr4
To: HIC at MIT-MC, RWG at MIT-MC, (BUG LMMAX) at MIT-MC
    HIC@MIT-MC 04/07/80 01:18:46 Re:  Macsyma on Cadr4
    Many bugs:

    A) LEXP was defined as a function in RAT3D and as a macro in PADE...the macro
       definition is living in the machine, and some functions were compiled
       with the wrong macro definition.  This has been fixed in the source before,
       but that world and probably some qfasl files are bogus.

This was fixed in the source, and the qfasl files were fixed, but the
Macsyma on that machine was not current.  To update a Macsyma, see the
directions in LMMAX;LOADER.  You should do this before running any serious
program. 

    B) CPLUS would return NIL sometimes.  I fixed the typo.

Thanks.  After making changes like this, please compile the file and send
mail to Macsyma-I.  That way when a Macsyma gets updated, the file will be
loaded, since it looks at the date on the qfasl files to see what has
changed.  There are directions on how to do this in LOADER.  (I didn't check
if you actually compiled it or not -- I'm just saying this for general
information.)  Additional note -- RJF claims to have gotten a factor of 3
speedup in the rational function package by hand coding the coefficient
arithmetic functions in Vaxima.  Microcoding CPLUS, etc. would be
interesting.

    C) FACT5 *ARRAY's a two dimensional array, which doesn't work on the LM because
       fillarray can't handle it.  I plan to fix this crock on the LM, but...

I presume the problem is only in FILLARRAY?  This shouidn't be hard to fix.
Btw, there is a definition of *REARRAY in LMMAX;MISC which you may want to
add to the Lispm if you are concerned with MacLisp compatibility.

    D) I then got "quotient not exact", and gave up.

If you give me a pointer to the problem, I'll look at it.

Bug notes of this sort should be setn to BUG-LMMAX.

Date: 7 April 1980 04:29-EST
From: James E. O'Dell <JIM at MIT-MC>
To: BUG-LMMAX at MIT-MC, LSH at MIT-MC, CWH at MIT-MC, JIM at MIT-MC

    Date: 6 April 1980 15:11-EST
    From: Lars S. Hornfeldt <LSH at MIT-MC>
    Sender: LSH0 at MIT-MC

    Had to change a piece of code to copy more, due to the peculiarity
    described in the LOAD-able file LSH;LM RPLA 
    which here follows (load it and call $RPLA on Macsyma-level):
    ;;Rplacd/ca on an arglist is allowed 
    ;;on MC both when invoced on Lisp-level and on Macsyma-level.
    ;;BUT! on Lispm only on Lisp-level; On MACSYMA-level it
    ;;complains:
    ;; "trap 5042 (RPLACD-WRONG-REPRESENTATION-TYPE M-S)
    ;;Attempt to rplacd a list which is embedded in a structure
    ;;and therefore cannnot be rplacd'ed....

    ;;Try calling this function:

    (DEFUN $RPLA FEXPR (Anuniquearg) (RPLACD Anuniquearg NIL))


Date: 7 April 1980 04:28-EST
From: James E. O'Dell <JIM at MIT-MC>
Subject: WRITEFILE-bug on Lispm
To: BUG-LMMAX at MIT-MC, CWH at MIT-MC, JIM at MIT-MC, LSH at MIT-MC

    Date: 6 April 1980 17:36-EST
    From: Lars S. Hornfeldt <LSH at MIT-MC>
    Sender: LSH0 at MIT-MC



    During WRITEFILE, visiting lisplevel,and then going back to MACSYMA,
    works on mc but not LISPM:

    writefile(fn1,fn2)$      (on mc args instead specifies directory)
    <break>		(getting to lisp)
    <call>		(trying to get back to macsyma)
    >>ERROR: The stream operation :SIZE-IN-CHARACTERS is not supported
    by FILE-CHAOSNET-WRITE-STREAM
    While in the function STREAM=-DEFALULT-HANDLER<-FILE..dito..<-
    <-MACSYMA-OUTPUT

    This is not urgent for me.


I assume these things should go to bug-lmmax


LSH@MIT-MC (Sent by LSH0@MIT-MC) 03/11/80 09:13:25
To: CWH at MIT-MC, RP at MIT-MC
CC: JIM at MIT-MC, LSH at MIT-MC
The RATWEIGHT stuff doesnt work in the 23/7 MACSYMA that's in LOD6
on CADR 5.     The function DOT2L is undefined while in
$RATWEIGHT <-APPLY <-MEVAL1  ...   Rest arg:($x 1) 
   Err occurs by  batch(BEV,PROG2,MC,RP);
   LSH@MIT-MC 03/19/80 10:54:17 Re: CHECKRAT-bug within DISPLA on LM - is prob. due to that
To: (BUG LMMAX) at MIT-MC
CC: JIM at MIT-MC, LSH at MIT-MC
checkrat is called BEFORE the DIMENSION-property. In that, the LM differs
from the MC-version. This is the direct bug-cause in at least my case.
Is there a separate displa file for LM?

Date: 19 March 1980 07:27-EST
From: James E. O'Dell <JIM at MIT-MC>
Subject: CHECKRAT bug within DISPLA on LM
To: LSH at MIT-MC, BUG-LMMAX at MIT-MC
cc: JIM at MIT-MC

Remember you have to load in the file rat;pois2 > to get the error on
dispaly.

LSH@MIT-MC 03/19/80 05:56:49 Re: CHECKRAT bug within DISPLA on LM
To: (BUG LMMAX) at MIT-MC
CC: JIM at MIT-MC, LSH at MIT-MC
I have had error from CHECKRAT when trying to display my
tensor representation. Now JIM got the same error at
another display namely:

INTOPOIS (SIN(V));	(just displa: works with $),

which provides a simple example, and suggests that my
problem too is caused by the macsyma-part of the display.

JPG@MIT-MC 03/14/80 01:57:15
Forwarded to you:
Agre@MIT-AI 03/13/80 18:02:22
In system 21.7 Macsyma, with microcode 616, on LISP Machine Five:
acot(-0.1) is positive, and (x:acot(-0.1),cos(x)/sin(x)); gives 0.1.
Also, unless I redefine TAN and COT myself, I get an error complaining
that the function T//$ does not exist.

CWH@MIT-MC 03/08/80 16:45:12
To: (BUG LMMAX) at MIT-MC
DESETQ and destructuring LET missing from the Lisp Machine.

JIM@MIT-MC (Sent by JIM1@MIT-MC) 01/15/80 10:57:23
To: (BUG LMMAX) at MIT-MC
sort[a,c,b]); /* Gives a blurb about an invalid functional form being given to
                 sort-short-list. Works if you interpret mfunction1 */

JIM@MIT-MC (Sent by JIM1@MIT-MC) 01/15/80 10:55:46
To: (BUG LMMAX) at MIT-MC
save([foo,bar,baz],anything);
/* Returns the noun form */

JIM@MIT-MC (Sent by JIM1@MIT-MC) 01/15/80 10:54:49
To: (BUG LMMAX) at MIT-MC
function getl-lm-fcn-prop has a call to bittest where it should be bit-test?

CWH@MIT-MC 01/11/80 16:05:18
To: JIM at MIT-MC, (BUG LMMAX) at MIT-MC
    JIM@MIT-MC 01/11/80 09:42:08
    trace(foo); errs out
    as does trying to invoke the editor with two alts. (missing edit* function).

I'm not sure of the status of trace.  I will look into that.  The current
Macsyma editor will not be implemented.  Emacs toplevel will be used instead
-- I am currently working on this.

JIM@MIT-MC 01/11/80 09:42:08
To: (BUG LMMAX) at MIT-MC
trace(foo); errs out
as does trying to invoke the editor with two alts. (missing edit* function).


JIM@MIT-MC 01/10/80 07:41:10
If on LISPM you do
(macsyma)
loadfile(liov,>,jim);
allvars(a);
you get an error from getl-lm-fcn-prop
about the arg to memq being wrong...its coming from meval1 by way of meval.
  
JIM@MIT-MC 01/09/80 08:27:11 Re: LISPM Macsyma
bothcases:true;
dskgc:true; /* Get error messages on LISPM looking for dskgc1
               and bothcases1 respectively */

Any way I can get macsyma to read a batch file from an ED buffer.
when I batch the file from MC I seem to spend most of the time swapping
programs?
