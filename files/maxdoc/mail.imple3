Date: 22 June 1983 07:45 EDT
From: Jeffrey P. Golden <JPG @ MIT-MC>
To: GJC @ MIT-MC
cc: MACSYMA-I @ MIT-MC

   GJC@MIT-MC 06/12/83 15:02:46 Re: Possible global changes to Macsyma
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   I am planning out some changes that will be conditionalized as
   #+COMMON-LISP-BIGFLOAT and #-COMMON-LISP-BIGFLOAT. 
   Basically, this will simply make the code in question look like
   it did before BIGFLOAT's were hacked into Macsyma, and will
   also speed up Macsyma in general for COMMON-LISP implementations.
   For example:
   #+COMMON-LISP-BIGFLOAT
   (DEFUN ONEP1 (X) (AND (NUMBERP X) (= X 1)))
   (DEFUN ZEROP1 (X) (AND (NUMBERP X) (= X 0)))
   
   Whereas without this we have
   (DEFUN ZEROP1 (X) (IF (NUMBERP X) (ZEROP X) (ALIKE1 X BIGFLOATZERO)))
   Which leads to ALIKE1 being called many times, and things in generally
   being slowed down, even if the user never uses BIGFLOATS.
[1] Are you saying that in Common Lisp (= X 0) is true for 0.0 ?
[2] Why are you considering such changes long before you have available 
an alternate BFLOAT package for NIL?  Otherwise, as long as NIL is going 
to hack bigfloats, I don't care how you do it.

   Here is something from the simplifier that I could use some advice on:
   There are these two clauses in SIMPLIFYA that deal with OPERATORS,
   
   	((AND (MEMQ (CAAR X) '(MPLUS MTIMES MEXPT))
   	      (MEMQ (GET (CAAR X) 'OPERATORS) '(SIMPLUS SIMPEXPT SIMPTIMES))
   	      (NOT (MEMQ 'ARRAY (CDAR X))))
   	 (COND ((EQ (CAAR X) 'MPLUS) (SIMPLUS X 1 Y))
   	       ((EQ (CAAR X) 'MTIMES) (SIMPTIMES X 1 Y))
   	       (T (SIMPEXPT X 1 Y))))
   
   ;; And =>
   	(T (LET ((W (GET (CAAR X) 'OPERATORS)))
   	     (IF (AND W (OR (NOT (MEMQ 'ARRAY (CDAR X))) (RULECHK (CAAR X))))
   		 (FUNCALL W X 1 Y)
   		 (SIMPARGS X Y))))
   
   What I would *like* is a conditionalization #+(OR LISPM NIL), that
   would eliminate the "special-case-check-for-speed" that is obviously
   trying to keep from using the SLOW FUNCALL of Maclisp (and Franz too),
   in favor of the fast UUOLINKS snapping static function called. On the LISPM
   and NIL of course this hacking SLOWS down the code instead of speeding it 
   up.  The question is: Do you think that the "optimization" also has some
   semantic effect that people depend on?
The above hack is strictly for efficiency in PDP10 Maclisp etc., nothing 
else.  In fact there used to be a comment near that code to that effect, 
but apparently someone deleted it.

Date: 22 June 1983 02:13 EDT
From: George J. Carrette <GJC @ MIT-MC>
To: JPG @ MIT-MC
cc: MACSYMA-I @ MIT-MC

I found a bug where DELETE(%PI,%PI/2,1) is returning 
((MTIMES SIMP) ((RAT SIMP) 1 2)), the bad thing being the SIMP on the MTIMES.
Shows up in the NIL version only. Any guesses what incompatible thing
is causing this? (I'll find out in a little while myself, I hope ...)


Date: 19 June 1983 12:40 EDT
From: Jeffrey P. Golden <JPG @ MIT-MC>
To: MACSYMA-I @ MIT-MC

MACHINE-MANTISSA-PRECISION and friends have been moved from RAT;FLOAT 
to LIBMAX;MAXMAC so that JM;SIMP can also take advantage of them.
Obviously do not try to compile JM;SIMP or RAT;FLOAT unless you have 
the new LIBMAX;MAXMAC.

Received: by UCBVAX.ARPA (3.346/3.33)
	id AA22037; 14 Jun 83 21:39:00 PDT (Tue)
From: allegra!watmath!watdaisy!bwchar@Berkeley
Message-Id: <8306150439.AA22037@UCBVAX.ARPA>
Date: Tue Jun 14 22:57:28 1983
To: watmath^allegra^ucbvax^macsyma-i@mit-mc
Subject: xyma


Do we call a vote against xyma to be No-x-yma?  This might make it as
difficult to vote against it as for it.

I think a problem with calling it "Portable Macsyma" would be the same as
if I wanted to call something "Flying Chevrolet" -- a piece of the name is
already someone else's trademark.



Received: from UCBKIM.ARPA by UCBVAX.ARPA (3.346/3.33)
	id AA13881; 14 Jun 83 11:54:18 PDT (Tue)
Date: 14 Jun 83 11:48:32 PDT (Tue)
From: fateman%UCBKIM@Berkeley (Richard Fateman)
Subject: "macsyma on a chip?"
Message-Id: <8306141848.6756@UCBKIM.ARPA>
Received: by UCBKIM.ARPA (3.340/3.5)
	id AA06756; 14 Jun 83 11:48:32 PDT (Tue)
To: macsyma-i@mit-mc
Cc: franz-friends%UCBKIM@Berkeley

Well, sort of. We now have Macsyma running on a Motorola 68000 - based
system with 6 megabytes of real memory. The operating system is a 
Unisoft UNIX system, which has been ported to some large number (>65) boxes.  
The Pixel people were kind enough to lend us a machine with enough 
real memory to make virtual memory unnecessary.

It takes a long time to load up, but once running, it is quite responsive,
and appears to be about 60% of a VAX 11/780 in terms of CPU time. 

We have not shaken down everything, but since the source code is unchanged
from the VAX, we expect the bugs to be limited to lisp compilation
glitches, or differences between versions of the UNIX system.


Date: 14 June 1983 06:44 EDT
From: Jeffrey P. Golden <JPG @ MIT-MC>
To: UCBKIM.fateman @ UCB-VAX
cc: MACSYMA-I @ MIT-MC

   Date: 12 Jun 83 17:04:46 PDT 
   From: fateman%UCBKIM@Berkeley 
   To: macsyma-i@mit-mc
	From GJC@MIT-MC Sun Jun 12 15:20:53 1983
	A mere MEMQ of a short list is small in comparison.
   Have you measured?
Not everything needs to be measured.  Some things are known.
On the PDP10, a MEMQ for effect only (i.e. not value) of a short list 
of length N such as appears in SIMPLIFYA gets converted by the compiler 
into an OR of EQs which gets compiled into 2*N instructions: pairs 
of comparison-skips and jumps.  So I would say that it is obvious that 
a MEMQ of a short list is small in comparison.  But if you need to measure 
this, be our guest.

Date: Monday, 13 June 1983, 10:37-EDT
From: Jim O'Dell <jim at SCRC-VIXEN>
Subject: A touch of levity
To: fateman@UCBKIM at Berkeley
Cc: macsyma-i at mit-mc
In-reply-to: <8306130243.11165@UCBKIM.ARPA>

	    id AA10767; 12 Jun 83 19:37:52 PDT (Sun)
    Date: 12 Jun 83 19:43:52 PDT (Sun)
    From: fateman%UCBKIM@Berkeley (Richard Fateman)
    Subject: A touch of levity
    Message-Id: <8306130243.11165@UCBKIM.ARPA>
    Received: by UCBKIM.ARPA (3.340/3.5)
	    id AA11165; 12 Jun 83 19:43:52 PDT (Sun)
    To: macsyma-i@mit-mc

    Since we are on the verge of checking out our first Motorola 68000
    version of Macsyma, and Macsyma is a trade-mark of Symbolics, we can't
    call it that;  Vaxima seems inappropriate since it has nothing to
    do with the Vax computer.  I have come up with only one name,
    indicating that we have X-ported it and could do so, again.
    Thus X-yma ..  (unless people think that is too rash..)

    Alternatives?
Why not the obvious "Portable Macsyma"?

Date: 13 June 1983 08:30 EDT
From: Richard Brenner <ASB @ MIT-MC>
To: RJF @ MIT-MC
cc: MACSYMA-I @ MIT-MC

"X-yma"?  If we were voting, I would vote no.
Sounds too much like Eczema:
"a non-contagious inflammation of the skin, marked mainly by
redness, itching, and the outbreak of lesions that discharge
serous matter and become encrusted and scaly."


Received: from UCBKIM.ARPA by UCBVAX.ARPA (3.345/3.33)
	id AA10767; 12 Jun 83 19:37:52 PDT (Sun)
Date: 12 Jun 83 19:43:52 PDT (Sun)
From: fateman%UCBKIM@Berkeley (Richard Fateman)
Subject: A touch of levity
Message-Id: <8306130243.11165@UCBKIM.ARPA>
Received: by UCBKIM.ARPA (3.340/3.5)
	id AA11165; 12 Jun 83 19:43:52 PDT (Sun)
To: macsyma-i@mit-mc

Since we are on the verge of checking out our first Motorola 68000
version of Macsyma, and Macsyma is a trade-mark of Symbolics, we can't
call it that;  Vaxima seems inappropriate since it has nothing to
do with the Vax computer.  I have come up with only one name,
indicating that we have X-ported it and could do so, again.
Thus X-yma ..  (unless people think that is too rash..)

Alternatives?

Date: 12 June 1983 22:17 EDT
From: George J. Carrette <GJC @ MIT-MC>
To: RJF @ MIT-MC
cc: MACSYMA-I @ MIT-MC

Maybe I can get you to understand one point:
(1) If a lisp supports "N" different floating point datatypes,
    all NUMBERP, and all FLONUMP, then no changes are needed to
    MACSYMA.

Do you understand why that is true? If not, then do not proceed further.

-----------

Now, even though no changes are absolutely needed in Macsyma, in makes
sense to remove BIGFLOAT's if they are no longer needed.

-----------

Received: from UCBKIM.ARPA by UCBVAX.ARPA (3.345/3.33)
	id AA09347; 12 Jun 83 16:58:47 PDT (Sun)
Date: 12 Jun 83 17:04:46 PDT (Sun)
From: fateman%UCBKIM@Berkeley (Richard Fateman)
Message-Id: <8306130004.9595@UCBKIM.ARPA>
Received: by UCBKIM.ARPA (3.340/3.5)
	id AA09595; 12 Jun 83 17:04:46 PDT (Sun)
To: macsyma-i@mit-mc

	From GJC@MIT-MC Sun Jun 12 15:20:53 1983
	
	Note that I was asking JPG, not RJF, for advice on these changes.
so why did you CC macsyma-i ?
	I am fully grateful for the information that the Franz 
	implementation breaks ALIKE1 into <something-in-the-compiler>
	(presumably) + ALIKE1-PART2.
I am not sure we actually do anything special in the compiler; there
might be a macro-expansion there.  This is thought to be useful since
the call instruction is cretinously slow on current VAX systems.
	You have also mentioned that
	it is useful to handle EQUAL in a similar manner.
I believe the compiler does know about EQUAL...
	This
	info can be useful to me, since I can use it to make
	the so-called "MINISUBRS" in NIL to do the same thing.
	In fact, most MINISUBRS in NIL behave somewhat like your
	optimization of ALIKE1, in that they handle a simple case
	fast, and call lisp code for exceptions.
Again, I think measurement is most important.  I think it is a waste
of time to optimize things relying solely on hearsay (a tradition in
some places).  If NIL has a fast funcall, that is nice for some things.
It happens that Macsyma hardly uses funcall.  If you want Macsyma to
use funcall more for NIL, that too is fine.  But if it runs slower
than need be, overall, and if in the effort you introduce bugs, you
will not be appreciated. JKF tells me that in your TAKF example, which
spends an inordinate amount of time doing funcalls, (in fact,
the only other thing it does is call 1+ ) there is about
a factor of two between funcalls and normal (fast version) calls,
for the programs taken as a whole.  It would be highly unusual,
even in a flavor system, to have a higher density of funcalls.
	
	Be that as it may, I do *dare* you to propose why it
	make sense to have something of the form ((BIGFLOAT) ...)
	be essentially NUMBERP in environments where there are
	much better ways to do it.
Sure. As I parse the above, you seem to want me to say,
"It is a good idea to construct constant-type numeric values out of list
structure and have them treated essentially as numbers in an algebraic
manipulation system."
Here goes:  There are times when you want to deal with complicated
objects which fit the "numeric constant" notion, and it seems inappropriate
to burden the lisp system with this.  It might be nice to have user-extensible
data types include the possibility of "this user type is to answer,
'yes I am a number' when asked", but that is, I believe, making heavy over-use
of the traditional use of numberp  (to be fixp or floatp).  If it
can be done as fast.... and not by slowing down everything uniformly,
fine.  On the other hand, when I introduce a 4x4 identity matrix into
an algebra system, and want it to satisfy "onep", I am not sure I want
to also make the same item  (say (matrix (1 0 0 0) ... (0 0 0 1))) both
a new lisp data type, a number, and something coerced automatically to 1 by
the function "=".

If you need a context for this, Taylor series with constant term "1",
have certain properties over a domain of matrices. You might use onep.
	
-- RJF	
	p.s. I have timed FUNCALL in FRANZ and MACLISP, and it is
	grossly slow, horrendous, and awful, to be avoided.
Since funcall was uniformly avoided in Macsyma, not much optimization was
done (until, perhaps, recently.  It seems to me that RMS, when he
visited, had some suggestions for Franz.  JKF thinks maybe your times
for Franz are out of date.)
	A mere MEMQ of a short list is small in comparison.
Have you measured?
	
	
	From GJC@MIT-MC Sun Jun 12 15:53:30 1983
	
	As a further example, a competent person such as myself
	can "increase the generality of NUMBERP" as you put it,
	in PDP-10 Maclisp, adding a new datatype BIGFLOAT,
	without slowing down NUMBERP. So even on the PDP-10
	you are dead wrong about generality slowing things
	like this down.
If one then has to find a similarly competent person to change
multics, lispm, Franz/vax, Franz/68k, NIL ...  no thanks.
	Even ZEROP can be made to work, still
	remaining only 1 instruction.
Can a user (incompetent?) introduce a zero matrix and have it checked
in the same single instruction?  This requires a potentially infinite
set of zero types, e.g. 1 by 1 zero matrix ... n by n zero matrix, where
n may be any positive integer, or an "indeterminate".
	
	Consider the code that Franz generates for "=". It
	already cannot be as good as on the PDP-10, where
	both number representations fit into the same 36 bits.
I don't understand why this matters.  How often is "=" called?
	
	
	As for interval arithmetic, macsyma doesn't even
	attempt to deal with interval arithmetic, 
Actually, you are wrong: Stoutemyer tried it.  Didn't catch on though.
	so if
	some new lisp implementation had it, well, it
	just wouldn't make any sense to "hack it in."
Common Lisp has 2 float formats, rationals, complexes...  I suppose what
you are saying is that Macsyma, in CL, would ignore those things.
Fine with me.
	However, Macsyma does advertise to do something
	with floating-point arithmetic, so if you have
	a lisp that has a good implementation of floating
	point arithmetic it makes common sense to use *it*
	instead of some kludge.
If you are accusing bigfloats of being a kludge, that is fine
with me.  Building bigfloats into the lisp system instead of
constructing them out of bignums, doesn't change that.  It just
makes the lisp system a kludge.  Bigfloats are implemented in
Reduce and Macsyma.  I am not sure they are much in demand elsewhere.
If they were, I can supply a stand-alone bigfloat package for
Franz.  Bigfloats are not "numberp" however, they are a "user-defined
data type" at the moment. (E.g. a tagged vector).
	
	All I am proposing to do is optimize away "unreachable code"
	thats all. I am not proposing to add any code to macsyma.
If that is what you meant by global changes to macsyma, sure.
	
	I'm sorry if it is your code that is being removed, but
No sweat.  It doesn't belong to me; I believe MIT sold it;  I suspect
I had a hand in writing it, but SIMPLIFYA has increased in size
by a factor of 10, I would guess, since 1974.  I think JPG and RZ,
and maybe MRG, mostly.
	I don't see why it should be worth anything to argue about
	it. Certainly your reputation isn't built on the fact that
	your floating-point code is in Macsyma.
Huh?  All I am saying is, you claim you are optimizing something.
Prove that your optimization results in an effective speedup, and
you don't break anything, and you are ok.  I have no problem with
#+common-lisp-bigfloat (defun zerop  ...) or
#+NIL (defun simplifya  ...)
These are not global changes.
-- RJF

	
	-gjc
	
	

Date: 12 June 1983 18:52 EDT
From: George J. Carrette <GJC @ MIT-MC>
Subject: furthermore ...
To: RJF @ MIT-MC
cc: MACSYMA-I @ MIT-MC

As a further example, a competent person such as myself
can "increase the generality of NUMBERP" as you put it,
in PDP-10 Maclisp, adding a new datatype BIGFLOAT,
without slowing down NUMBERP. So even on the PDP-10
you are dead wrong about generality slowing things
like this down. Even ZEROP can be made to work, still
remaining only 1 instruction.

Consider the code that Franz generates for "=". It
already cannot be as good as on the PDP-10, where
both number representations fit into the same 36 bits.


As for interval arithmetic, macsyma doesn't even
attempt to deal with interval arithmetic, so if
some new lisp implementation had it, well, it
just wouldn't make any sense to "hack it in."
However, Macsyma does advertise to do something
with floating-point arithmetic, so if you have
a lisp that has a good implementation of floating
point arithmetic it makes common sense to use *it*
instead of some kludge.

All I am proposing to do is optimize away "unreachable code"
thats all. I am not proposing to add any code to macsyma.

I'm sorry if it is your code that is being removed, but
I don't see why it should be worth anything to argue about
it. Certainly your reputation isn't built on the fact that
your floating-point code is in Macsyma.

-gjc

Date: 12 June 1983 18:18 EDT
From: George J. Carrette <GJC @ MIT-MC>
To: RJF @ MIT-MC
cc: MACSYMA-I @ MIT-MC

Note that I was asking JPG, not RJF, for advice on these changes.
I am fully grateful for the information that the Franz 
implementation breaks ALIKE1 into <something-in-the-compiler>
(presumably) + ALIKE1-PART2. You have also mentioned that
it is useful to handle EQUAL in a similar manner. This
info can be useful to me, since I can use it to make
the so-called "MINISUBRS" in NIL to do the same thing.
In fact, most MINISUBRS in NIL behave somewhat like your
optimization of ALIKE1, in that they handle a simple case
fast, and call lisp code for exceptions.

Be that as it may, I do *dare* you to propose why it
make sense to have something of the form ((BIGFLOAT) ...)
be essentially NUMBERP in environments where there are
much better ways to do it.

-GJC

p.s. I have timed FUNCALL in FRANZ and MACLISP, and it is
grossly slow, horrendous, and awful, to be avoided.
A mere MEMQ of a short list is small in comparison.

Date: 12 Jun 83 12:43:29 PDT (Sun)
From: fateman%UCBKIM@Berkeley (Richard Fateman)
Subject: Re:  Possible global changes to Macsyma
Message-Id: <8306121943.6740@UCBKIM.ARPA>
Received: by UCBKIM.ARPA (3.340/3.5)
	id AA06740; 12 Jun 83 12:43:29 PDT (Sun)
Received: from UCBKIM.ARPA by UCBVAX.ARPA (3.341/3.31)
	id AA07040; 12 Jun 83 12:37:26 PDT (Sun)
To: GJC@MIT-MC, JPG@MIT-MC
Cc: MACSYMA-I@MIT-MC

	From GJC@MIT-MC Sun Jun 12 12:20:54 1983
	I am planning out some changes that will be conditionalized as
	#+COMMON-LISP-BIGFLOAT and #-COMMON-LISP-BIGFLOAT. 
	Basically, this will simply make the code in question look like
	it did before BIGFLOAT's were hacked into Macsyma, and will
	also speed up Macsyma in general for COMMON-LISP implementations.
It seems to me that increasing the generality of numberp and = might
slow down things, overall, in applications such as Macsyma. 
The idea that bigfloats will be subsumed in numberp is nice in some
respects, but what about other things that would have to be re-hacked
in Macsyma-derivatives that might include, say, interval arithmetic.
	For example:
	#+COMMON-LISP-BIGFLOAT
	(DEFUN ONEP1 (X) (AND (NUMBERP X) (= X 1)))
	
	(DEFUN ZEROP1 (X) (AND (NUMBERP X) (= X 0)))
	
	Whereas without this we have
	(DEFUN ZEROP1 (X) (IF (NUMBERP X) (ZEROP X) (ALIKE1 X BIGFLOATZERO)))
	Which leads to ALIKE1 being called many times, and things in generally
	being slowed down, even if the user never uses BIGFLOATS.
	
	If you have any thoughts on this issue, please let me know before hacking
	starts.
I did some timing on how much time Macsyma spends in ALIKE1.  While it is
true that it is called often, perhaps GJC would consider timing it again,
and maybe making the very conservative change that would make alike1
very fast.  E.g. for Franz, compiling it as a local function.  While
I do not have the figures handy, I believe that if alike1 were FREE, Macsyma
would be maybe 5% faster.  (Timings are in SYMSAC 81 proceedings)
	
	Here is something from the simplifier that I could use some advice on:
	There are these two clauses in SIMPLIFYA that deal with OPERATORS,
	
		((AND (MEMQ (CAAR X) '(MPLUS MTIMES MEXPT))
		      (MEMQ (GET (CAAR X) 'OPERATORS) '(SIMPLUS SIMPEXPT SIMPTIMES))
		      (NOT (MEMQ 'ARRAY (CDAR X))))
		 (COND ((EQ (CAAR X) 'MPLUS) (SIMPLUS X 1 Y))
		       ((EQ (CAAR X) 'MTIMES) (SIMPTIMES X 1 Y))
		       (T (SIMPEXPT X 1 Y))))
	
	;; And =>
	
		(T (LET ((W (GET (CAAR X) 'OPERATORS)))
		     (IF (AND W (OR (NOT (MEMQ 'ARRAY (CDAR X))) (RULECHK (CAAR X))))
			 (FUNCALL W X 1 Y)
			 (SIMPARGS X Y))))
	
	What I would *like* is a conditionalization #+(OR LISPM NIL), that
	would eliminate the "special-case-check-for-speed" that is obviously
	trying to keep from using the SLOW FUNCALL of Maclisp (and Franz too),
	in favor of the fast UUOLINKS snapping static function called. On the LISPM
	and NIL of course this hacking SLOWS down the code instead of speeding it up.
	The question is: Do you think that the "optimization" also has some
	semantic effect that people depend on?
	
	
I think all the hacking used to be just
(cond ((eq (caar x) 'mplus) (simplus ....) ...
       ;etc
but was changed so that tellsimp could hack the operators property.
I think that GJC should see if the SLOW FUNCALL of Maclisp or Franz
is actually slower than those memqs etc. I think this can be tested.
Then we will also know if it is another 3% improvement or less.

In general, any global changes to Macsyma should be avoided.  Too many
things can be broken, even when just fixing bugs.  Changes for alleged
efficiency should not be done without solid evidence that there is
something to be gained.  Changes for aesthetic reasons have a very low
priority when it comes to Macsyma.  Un-named persons have broken many
things for aesthetic reasons.  If it ain't broke, don't fix it.

Anything conditionalized for common-lisp-bigfloat  or lispm, I suppose
others should worry about.  Good luck.


Date: 12 June 1983 15:02 EDT
From: George J. Carrette <GJC @ MIT-MC>
Subject: Possible global changes to Macsyma
To: JPG @ MIT-MC
cc: MACSYMA-I @ MIT-MC

I am planning out some changes that will be conditionalized as
#+COMMON-LISP-BIGFLOAT and #-COMMON-LISP-BIGFLOAT. 
Basically, this will simply make the code in question look like
it did before BIGFLOAT's were hacked into Macsyma, and will
also speed up Macsyma in general for COMMON-LISP implementations.
For example:
#+COMMON-LISP-BIGFLOAT
(DEFUN ONEP1 (X) (AND (NUMBERP X) (= X 1)))

(DEFUN ZEROP1 (X) (AND (NUMBERP X) (= X 0)))

Whereas without this we have
(DEFUN ZEROP1 (X) (IF (NUMBERP X) (ZEROP X) (ALIKE1 X BIGFLOATZERO)))
Which leads to ALIKE1 being called many times, and things in generally
being slowed down, even if the user never uses BIGFLOATS.

If you have any thoughts on this issue, please let me know before hacking
starts.

Here is something from the simplifier that I could use some advice on:
There are these two clauses in SIMPLIFYA that deal with OPERATORS,

	((AND (MEMQ (CAAR X) '(MPLUS MTIMES MEXPT))
	      (MEMQ (GET (CAAR X) 'OPERATORS) '(SIMPLUS SIMPEXPT SIMPTIMES))
	      (NOT (MEMQ 'ARRAY (CDAR X))))
	 (COND ((EQ (CAAR X) 'MPLUS) (SIMPLUS X 1 Y))
	       ((EQ (CAAR X) 'MTIMES) (SIMPTIMES X 1 Y))
	       (T (SIMPEXPT X 1 Y))))

;; And =>

	(T (LET ((W (GET (CAAR X) 'OPERATORS)))
	     (IF (AND W (OR (NOT (MEMQ 'ARRAY (CDAR X))) (RULECHK (CAAR X))))
		 (FUNCALL W X 1 Y)
		 (SIMPARGS X Y))))

What I would *like* is a conditionalization #+(OR LISPM NIL), that
would eliminate the "special-case-check-for-speed" that is obviously
trying to keep from using the SLOW FUNCALL of Maclisp (and Franz too),
in favor of the fast UUOLINKS snapping static function called. On the LISPM
and NIL of course this hacking SLOWS down the code instead of speeding it up.
The question is: Do you think that the "optimization" also has some
semantic effect that people depend on?


Date: 31 May 1983 21:45 EDT
From: Jeffrey P. Golden <JPG @ MIT-MC>
Subject: SYS-DEFAULTF
To: JIM @ MIT-MC
cc: ASB @ MIT-MC, MACSYMA-I @ MIT-MC

   JIM@MIT-MC 05/31/83 16:22:12 Re:  SYS-DEFAULTF
   To: JPG at MIT-MC
   CC: ASB at MIT-MC
   Was defined in SUPRV instead of in MAXMAC where all of the sys-
   macros were. I moved a copy to MAXMAC, did not delete the one
   in SUPRV, but I think it should be.
In the interests of not having the same macro defined in two places 
I deleted the copy in SUPRV.

Date: 14 May 1983 20:49 EDT
From: William G. Dubuque <WGD @ MIT-MC>
Sender: BIL @ MIT-MC
Subject:  INRT, arithmetic coercion and documentation
To: JPG @ MIT-MC, ELLEN @ MIT-MC
cc: MACSYMA-I @ MIT-MC
In-reply-to: Msg of 13 May 1983 03:44 EDT from V. Ellen Golden <ELLEN>

    Date: 13 May 1983 03:44 EDT
    From: V. Ellen Golden <ELLEN>
    To:   WGD
    cc:   JPG
    Re:   INRT

        JPG@MIT-MC 05/13/83 03:29:47 Re: INRT
           WGD@MIT-MC 05/12/83 23:26:56
           INRT ignores the sign of its first argument, e.g INRT(-27,3) -> 3,
           and INRT(-4,2) -> 2.
        This fact got left off DESCRIBE(INRT).  It's in DESCRIBE(ISQRT).
        ELLEN will fix.
    Has been fixed.
It is not clear to me that the most useful functionality is obtained by having
INRT and ISQRT take the absolute value of their first arguments. Even worse,
however, is the fact that these two routines behave differently than most
other arithmetic routines when given a negative integer as first argument.
This violates consistency in the design of arithmetical routines---which
becomes an important issue when designing large systems (for example, it
helps programmers immensely when 'similar' routines behave 'similarly' in
exceptional cases rather than having to keep referring to the documentation
or definition to see how each routine special cases them). It is probably
too late to change these now given the possiblity that users may depend upon
this functionality but, for future considerations, its worth noting problems
as these so we don't make the same mistakes over again.

Also, in the descriptions of ISQRT and INRT, 'integer SQRT' and 'integer
nth root' should be clarified. Possiblities here are:
 'largest integer less than SQRT(X)' or 'ENTIER(SQRT(X))' or 'FIX(SQRT(X)'
and analogously for INRT. Also, it would be useful if the much more well
known names FLOOR and CEILING were provided since almost everyone I know
tries these names first (especially new users with a computer science or
math background).

Date: 10 May 1983 10:02 EDT
From: Jeffrey P. Golden <JPG @ MIT-MC>
To: WGD @ MIT-MC
cc: MACSYMA-I @ MIT-MC

   WGD@MIT-MC 05/10/83 04:21:55
   To: MACSYMA-I at MIT-MC
   I deleted RLB%;FASDMP > from MACSYM;MACSYM TAGS since RLB% seems to have
   been flushed. This was necessary so that tags search didn't die in emacs.
Actually all you had to do was delete the '%' as RLB moved the file to 
RLB;FASDMP.  Anyway, MAXDOC;FILES was made aware of this change and a new 
TAGS file generation would also have fixed this problem.

Date: 10 May 1983 04:21 EDT
From: William G. Dubuque <WGD @ MIT-MC>
Sender: BIL @ MIT-MC
To: MACSYMA-I @ MIT-MC

I deleted RLB%;FASDMP > from MACSYM;MACSYM TAGS since RLB% seems to have
beem flushed. This was necessary so that tags search didn't die in emacs.

Date: Tuesday, 15 February 1983, 14:29-EST
From: Jim O'Dell <jim at SCRC-VIXEN>
Subject: WITHOUT-TTY-INTERRUPTS
To: JPG at MIT-MC
Cc: jim at SCRC-VIXEN, bug-lmmax at SCRC-VIXEN, HIC at MIT-MC,
    RWG at MIT-MC, MACSYMA-I at MIT-MC, CWH at SCRC-TENEX
In-reply-to: The message of 4 Feb 83 06:37-EST from Jeffrey P. Golden <JPG at MIT-MC>

    Date: 4 February 1983 06:37 EST
    From: Jeffrey P. Golden <JPG @ MIT-MC>
       Date: Thursday, 3 February 1983, 16:17-EST
       From: Jim O'Dell <jim at SCRC-VIXEN>
	    Date: 27 January 1983 11:37 EST
	    From: Jeffrey P. Golden <JPG @ MIT-MC>
	       Date: Thursday, 27 January 1983, 11:01-EST
	       From: Carl W. Hoffman <CWH at SCRC-TENEX>
	       That can be done by binding TV:KBD-INTERCEPTED-CHARACTERS 
	       to NIL...
	    I think this should be adequate for defining WITHOUT-TTY-INTERRUPTS 
	    for MACSYMA for the Lispm, similar to the ITS MACLISP definition.
	    Jim?
I added this code to the source and also patched it in 6.7 for LispM

Date: 4 February 1983 06:37 EST
From: Jeffrey P. Golden <JPG @ MIT-MC>
Subject: WITHOUT-TTY-INTERRUPTS
To: jim @ SCRC-VIXEN
cc: HIC @ MIT-MC, RWG @ MIT-MC, MACSYMA-I @ MIT-MC, CWH @ SCRC-TENEX

   Date: Thursday, 3 February 1983, 16:17-EST
   From: Jim O'Dell <jim at SCRC-VIXEN>
   Subject: WITHOUT-TTY-INTERRUPTS
   To: JPG at MIT-MC
   Cc: JIM at MIT-MC, CWH at SCRC-TENEX, HIC at MIT-MC, RWG at MIT-MC,
       MACSYMA-I at MIT-MC
	Date: 27 January 1983 11:37 EST
	From: Jeffrey P. Golden <JPG @ MIT-MC>
	   Date: Thursday, 27 January 1983, 11:01-EST
	   From: Carl W. Hoffman <CWH at SCRC-TENEX>
	   That can be done by binding TV:KBD-INTERCEPTED-CHARACTERS 
	   to NIL...
	I think this should be adequate for defining WITHOUT-TTY-INTERRUPTS 
	for MACSYMA for the Lispm, similar to the ITS MACLISP definition.
	Jim?
   If CWH thinks its OK its certainly fine with me.
So try it out.  Should be very straightforward to test out.

Date: Thursday, 3 February 1983, 16:17-EST
From: Jim O'Dell <jim at SCRC-VIXEN>
Subject: WITHOUT-TTY-INTERRUPTS
To: JPG at MIT-MC
Cc: JIM at MIT-MC, CWH at SCRC-TENEX, HIC at MIT-MC, RWG at MIT-MC,
    MACSYMA-I at MIT-MC
In-reply-to: The message of 27 Jan 83 11:37-EST from Jeffrey P. Golden <JPG at MIT-MC>

    Date: 27 January 1983 11:37 EST
    From: Jeffrey P. Golden <JPG @ MIT-MC>
       Date: Thursday, 27 January 1983, 11:01-EST
       From: Carl W. Hoffman <CWH at SCRC-TENEX>
       Even though no special form is defined for masking keyboard interrupts,
       you can easily define such a thing, at any one of several levels.
       ... probably all you need is to mask is c-Abort, c-Break, c-m-Abort, 
       and c-m-Break.  That can be done by binding TV:KBD-INTERCEPTED-CHARACTERS 
       to NIL, which will work for both the local keyboard and the supdup server.
    I think this should be adequate for defining WITHOUT-TTY-INTERRUPTS 
    for MACSYMA for the Lispm, similar to the ITS MACLISP definition.  Jim?
If CWH thinks its OK its certainly fine with me.

Date: 27 January 1983 14:10 EST
From: George J. Carrette <GJC @ MIT-MC>
Subject:  MBIND and interrupt hacking.
To: MACSYMA-I @ MIT-MC

It is a loss that Macsyma cannot use a lisp-provided binding mechanism
such as PROGV. I can see JPG's justification for this on the PDP-10,
where the claim is that using progv would require that the SPEC-PDL be
too large, eating away still more at the PDP-10 address space.

However, note that there are NO VISABLE CALLS to MBIND/MUNBIND in the
macsyma interpreter! Everything that does binding goes through a macro
called MBINDING. So maybe, just maybe, one can hack the MBINDING
macro, to call PROGV to handle the critical stuff, and the something
else to handle the extra features of MBIND.

    -GJC

The only other interrupt hacking in Macsyma has more to do with
RESOURCE type problems.

Date: 27 January 1983 11:37 EST
From: Jeffrey P. Golden <JPG @ MIT-MC>
To: JIM @ MIT-MC, CWH @ SCRC-TENEX
cc: HIC @ MIT-MC, RWG @ MIT-MC, MACSYMA-I @ MIT-MC

   Date: Thursday, 27 January 1983, 11:01-EST
   From: Carl W. Hoffman <CWH at SCRC-TENEX>
   To: JPG at MIT-MC, RWK at SCRC-TENEX
   Cc: MACSYMA-I at MIT-MC
   Even though no special form is defined for masking keyboard interrupts,
   you can easily define such a thing, at any one of several levels.
   ... probably all you need is to mask is c-Abort, c-Break, c-m-Abort, 
   and c-m-Break.  That can be done by binding TV:KBD-INTERCEPTED-CHARACTERS 
   to NIL, which will work for both the local keyboard and the supdup server.
I think this should be adequate for defining WITHOUT-TTY-INTERRUPTS 
for MACSYMA for the Lispm, similar to the ITS MACLISP definition.  Jim?

Date: 27 January 1983 11:11 EST
From: Jeffrey P. Golden <JPG @ MIT-MC>
To: CWH @ SCRC-TENEX
cc: HIC @ MIT-MC, RWG @ MIT-MC, MACSYMA-I @ MIT-MC

   Date: Thursday, 27 January 1983, 11:01-EST
   From: Carl W. Hoffman <CWH at SCRC-TENEX>
   To: JPG at MIT-MC, RWK at SCRC-TENEX
   Cc: MACSYMA-I at MIT-MC
	Date: 27 January 1983 10:17 EST
	From: Jeffrey P. Golden <JPG @ MIT-MC>
	Well, I guess I can use WITHOUT-INTERRUPTS on the LISPM. 
	It's got that, right?
   Please be *extremely* conservative with your use of WITHOUT-INTERRUPTS.
   Macsyma already breaks the Lisp machine enough.  Unless Macsyma is
   multi-processing, it should have no reason to call WITHOUT-INTERRUPTS.
The case involved a piece of code that should be run without the user 
quitting or breaking in the middle of it.  It was HIC who put the 
WITHOUT-INTERRUPTS into it.  RWG just forwarded that code to me.
To satisfy HIC and RWG, I will leave the WITHOUT-INTERRUPTS in there 
for the Lispm.  

Date: Thursday, 27 January 1983, 11:01-EST
From: Carl W. Hoffman <CWH at SCRC-TENEX>
To: JPG at MIT-MC, RWK at SCRC-TENEX
Cc: MACSYMA-I at MIT-MC
In-reply-to: The message of 27 Jan 83 10:17-EST from Jeffrey P. Golden <JPG at MIT-MC>

    Date: 27 January 1983 10:17 EST
    From: Jeffrey P. Golden <JPG @ MIT-MC>
    Well, I guess I can use WITHOUT-INTERRUPTS on the LISPM. 
    It's got that, right?

Please be *extremely* conservative with your use of WITHOUT-INTERRUPTS.
Macsyma already breaks the Lisp machine enough.  Unless Macsyma is
multi-processing, it should have no reason to call WITHOUT-INTERRUPTS.

Even though no special form is defined for masking keyboard interrupts,
you can easily define such a thing, at any one of several levels.  You
can use SI:SB-ON to work at a really low level, but probably all you
need is to mask is c-Abort, c-Break, c-m-Abort, and c-m-Break.  That can
be done by binding TV:KBD-INTERCEPTED-CHARACTERS to NIL, which will work
for both the local keyboard and the supdup server.  Or, you can define
your own IO-BUFFER-OUTPUT-FUNCTION for intermediate level control of
Macsyma windows.

As I have said many times in the past, Macsyma should define a virtual
interface to the operating system which should be precise and well
documented.  Then, it should be the responsibility of local operating
system wizards to implement each interface, and the code for each
interface should be separate, even if at times they look similar.

Date: 27 January 1983 10:17 EST
From: Jeffrey P. Golden <JPG @ MIT-MC>
To: RWK @ SCRC-TENEX
cc: MACSYMA-I @ MIT-MC

Well, I guess I can use WITHOUT-INTERRUPTS on the LISPM. 
It's got that, right?

Date: 27 Jan 1983 0938-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
To: JPG at MIT-MC, MACSYMA-I at MIT-MC
cc: RWK at SCRC-TENEX
In-Reply-To: The message of 27 January 1983 06:46 EST from Jeffrey P. Golden <JPG @ MIT-MC>

The Lisp Machine lacks WITHOUT-TTY-INTERRUPTS, although I
hope to add something approximately equivalent in the next
release.
-------

Date: 27 January 1983 06:46 EST
From: Jeffrey P. Golden <JPG @ MIT-MC>
To: MACSYMA-I @ MIT-MC

The function MBIND in JPG;MLISP has been rewritten to use 
WITHOUT-TTY-INTERRUPTS (defined in LSPSRC;MLMAC).  If any 
LISP system out there running MACSYMA has this undefined, let me know.

Date:  14 January 1983 02:02 est
From:  Bier.FaulTree at MIT-MULTICS
Subject:  so much for the disk drive theory, damn it!
To:  macsyma-i at MIT-MC, Hazelton at MIT-MULTICS, 
     Drake.BLOOD at MIT-MULTICS, rsl at SCRC-TENEX, 
     jim at SCRC-TENEX, cwh at SCRC-TENEX, gjc at MIT-MC

At Richard Lamson's suggest, I sat down tonight to re-enact an old
macsyma script which had given me bugs previously, and lo and behold, it
still did.  The problem seems to be extremely context-dependent, since
if I use a simpler script which by my understanding ought to result in
an equivalent macsyma environment the bug does not appear.  Oh,
well--I'm sending Richard Lamson and Jim O'Dell copies of enormous audit
files with audits of the various macsyma's with and without bugs in
them, and also long pieces of mail discussing the interesting points of
the various macsyma's.  If anyone else has some brilliant insights or
would like to spend hours and hours poring over boring and
incomprehensible audit files, just let me know.  In the meantime, please
continue to keep your fingers crossed!!
  --Vicki

Date:  13 January 1983 21:02 est
From:  Bier.FaulTree at MIT-MULTICS
Subject:  my perplexing macsyma problem
To:  macsyma-i at MIT-MC, jim at SCRC-TENEX, cwh at SCRC-TENEX, 
     rsl at SCRC-TENEX

i just got mail from lyman hazelton at multics sysmaint, and he said
that there was a bad disk drive in operation for the last couple of days
or so.  he said that usually people who got bugs using that drive also
got notices telling them what was happening (e.g., that their file had
been on a bad drive or some such thing which i don't completely
understand), but he said there was no guarantee that all such users
would have gotten warning messages.  lyman claimed that one plausible
explanation both for my bug and for why it seems to have disappeared is
that the version of lisp that was used by my macsyma might have come
from that disk drive (he said it did have some public storage on it),
that a few words from that lisp could have been garbled in transmission,
and that the reason the error went away is because sysmaint finally had
to take the drive out of operation.  that last part, at least, is
verifiably true.  does the rest of the explanation sound plausible?  i
suppose that in the absence of any other explanation, i will assume the
bug to be permanently gone unless it resurfaces sometime soon.  if
anyone has any ideas of other things i should be doing in the meantime,
please let me know, but i can't think of anything offhand.

in any case, thanks for all your help in helping to solve this thing.
keep your fingers crossed for me.
  --vicki

Date: 13 January 1983 10:11-EST
From: James E. O'Dell <JIM @ MIT-MC>
Subject:  HHEELLLLPPPP!!!!!!!!
To: Bier.FaulTree @ MIT-MULTICS
cc: MACSYMA-I @ MIT-MC, cwh @ SCRC-TENEX
In-reply-to: The message of 13 Jan 1983 01:16 est from Bier.FaulTree at MIT-MULTICS

    Date: 13 January 1983 01:16 est
    From: Bier.FaulTree at MIT-MULTICS
    To:   macsyma-i, cwh at SCRC-TENEX, jim at SCRC-TENEX
    Re:   HHEELLLLPPPP!!!!!!!!

    I'm in the last phases of debugging the computer program s for my thesis
    (the thesis is long ago turned in, and we owe a copy of the programs to
    our granting agency shortly), and I've just begun running into a very
    obscure macsyma or lisp bug or error--it doesn't even say what it is.
    One of my functions defined in macsyma, which used to work in either its
    present incarnation or a very recent previous version, is very broken
    all of a sudden.  When I call the function, it bombs out and prints the
    followin message:

    nilnilnilnil[nil]nilnil

    (Undefined shadow property)nil

Can you give me the name of a file to load and instructions to run 
it so that I can reproduce this probelm?

Date:  13 January 1983 01:16 est
From:  Bier.FaulTree at MIT-MULTICS
Subject:  HHEELLLLPPPP!!!!!!!!
To:  macsyma-i at MIT-MC, cwh at SCRC-TENEX, jim at SCRC-TENEX

I'm in the last phases of debugging the computer program s for my thesis
(the thesis is long ago turned in, and we owe a copy of the programs to
our granting agency shortly), and I've just begun running into a very
obscure macsyma or lisp bug or error--it doesn't even say what it is.
One of my functions defined in macsyma, which used to work in either its
present incarnation or a very recent previous version, is very broken
all of a sudden.  When I call the function, it bombs out and prints the
followin message:

nilnilnilnil[nil]nilnil

(Undefined shadow property)nil

The above two lines are a verbatim copy of the message, with the
exception that sometimes the nil which appears in the square brackets
has a minus sign in front of it.  Pretty weird, huh?

The function definition also no longer evaluates properly--e.g., if i
try to re-bind the function name to the original function definition, it
again bombs out, this time with an error message reading

(Undefined shadow property)nil

without the line of previous nils above it.

When I use mthe macsyma debugmode parameter (which is supposed to yield
a list of all functions entered at the time of the error when debugmode
is set to all), I get the following results.  If what I was attempting
to do is CALL the function at a particular value of its argument, the
alleged list of functions entered at the time of the error reads

[nil(nil)]

If on the other hand I had been attempting simply to rebind the function
to its definition, the list contains the entire function
definition--e.g.,

[phinumer(x):= blah blah blah........]

I've tried to provide as much information about this damn bug as I could
possibly put together.  I have no idea why it happens or whether there
was some subtle change in the definition of the function which caused it
to start happening.  A couple of people that I've talked to said that it
clearly sounds like either a lisp or a macsyma bug, but had absolutely
no idea how to go about debugging it or at least changing my function so
that I no longer had to deal with it.  In any case, I'm getting pretty
concerned about the whole thing, and would GREATLY appreciate any help
possible about the cause of the bug and how to avoid it if at all
possible.  It's all very peculiar.

Thanks for all your attention to this problem--Thanks MUCHO!!!!

A Helpless user,
    --Vicki Bier

P.S. Jim Odell--If you're wondering how this wound up in your mailbox,
Richard Lamson suggested you as one of the main macsyma people at
Symbolics.

P.P.S.  Carl(cwh)--Sorry we only seem to communicate at these trying
times.  Hope you're having fun with Symbolics et al.  I really miss not
having any computer hackers to hang around with--seriously!!!  My
company has incredibly backwards and inadequate computer facilities that
are no fun to play with, and also no decent hackers--our alleged
"computer coordinator" is an incredible jerk who goes out of his way to
be unhelpful to everybody, knows nothing about the state of the art of
computer technology, and has never programmed in anything but fortran in
his entire life.  Not only that, but he doesn't even write good
code!--which I guess shouldn't be too surprising, considering.  Anyway,
that's the gossip from the Orange County business world.  How are you?
Nice talking to you.
  --V.

Date: Tuesday, 11 January 1983, 10:11-EST
From: Richard Pavelle <RP at SCRC-TENEX>
Subject: Changes to LMMAX;SYSDEF >
To: GJC at MIT-MC
Cc: RP at SCRC-TENEX, jim at SCRC-VIXEN, JM at MIT-MC, JPG at MIT-MC,
    MACSYMA-I at MIT-MC, RWK at MIT-MC
In-reply-to: The message of 10 Jan 83 11:59-EST from Jim O'Dell <jim at SCRC-VIXEN>

    Date: Monday, 10 January 1983, 11:59-EST
    From: Jim O'Dell <jim at SCRC-VIXEN>
    Subject: Changes to LMMAX;SYSDEF >
    To: GJC at MIT-MC, RP at SCRC
    Cc: jim at SCRC-VIXEN, JM at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC,
	RWK at MIT-MC
    In-reply-to: The message of 10 Jan 83 11:41-EST from George J. Carrette <GJC at MIT-MC>

	From GJC@MIT-MC  Mon Jan 10 11:45:18 1983
	Date: 10 January 1983 11:41-EST
	From: George J. Carrette <GJC @ MIT-MC>
	Subject:  Changes to LMMAX;SYSDEF >
	To: jim @ SCRC-VIXEN
	cc: JIM @ MIT-MC, JM @ MIT-MC, JPG @ MIT-MC, MACSYMA-I @ MIT-MC,
	    RWK @ MIT-MC
	In-reply-to: The message of 10 Jan 1983 09:25-EST from Jim O'Dell <jim at SCRC-VIXEN>

	If you were "covering all the bases" then you could have noticed the
	last file-author of the file. I still don't understand the lack of
	coordination, RWK and JPG for example have different versions of the
	situation, with the "understatement of the year" award again going to
	RWK, "all that we forgot to do is provide a working macsyma band to MIT."
	[Again, whatever amount of flaming there is in this situation must be
	 tempered with regard to actual fact, that there *was* a working Lispm
	 Macsyma at MIT before symbolics people went munging, and now there is not.
	 Call it a little oversight that makes GJC look silly if you will. Call it
	 a slight inconvenience?]

	To JPG: What exactly *is* the contractual agreement between MIT and SYMBOLICS?

	JIM, even though JPG is using the "not ready for distribution" line right now,
	from my experience I can assume that if you say (MAKE-SYSTEM 'MACSYMA) is
	working for you at Symbolics it will be sufficient for me and the people
	I'm concerned with at MIT.
    I don't claim lots of bug fixes bug I do claim that I'm using up to date
    sources.

	But exactly what has to been done to make
	it available? Who is supposed to do it?
    Lets let RP and JPG have a crack at answering these questions.
There is no problem here. George, if you want the new MACSYMA you can have it.
Please, however, coordinate your getting it with Jim. 

Date: 11 January 1983 07:47-EST
From: Jeffrey P. Golden <JPG @ MIT-MC>
Subject: Symbolics Lispm Macsyma
To: GJC @ MIT-MC, JIM @ MIT-MC
cc: MACSYMA-I @ MIT-MC, RP @ MIT-MC

   Date: Monday, 10 January 1983, 11:59-EST
   From: Jim O'Dell <jim at SCRC-VIXEN>
   Subject: Changes to LMMAX;SYSDEF >
   To: GJC at MIT-MC, RP at SCRC
   Cc: jim at SCRC-VIXEN, JM at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC,
       RWK at MIT-MC

       From GJC@MIT-MC  Mon Jan 10 11:45:18 1983
       Date: 10 January 1983 11:41-EST
       To: jim @ SCRC-VIXEN
       But exactly what has to been done to make
       it available? Who is supposed to do it?
   Lets let RP and JPG have a crack at answering these questions.
As far as I am concerned Jim can ship over a Symbolics Lispm Macsyma any 
time he is ready to do so.

Date: 11 January 1983 07:42-EST
From: Jeffrey P. Golden <JPG @ MIT-MC>
To: GJC @ MIT-MC
cc: MACSYMA-I @ MIT-MC

   GJC@MIT-MC 01/10/83 11:41:05 Re:  Changes to LMMAX;SYSDEF >
   To: jim at SCRC-VIXEN
   CC: JIM at MIT-MC, JM at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC
   CC: RWK at MIT-MC
   To JPG: What exactly *is* the contractual agreement between MIT and 
   SYMBOLICS?
I don't know.  I've never seen it.

Date: Monday, 10 January 1983, 21:05-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Changes to LMMAX;SYSDEF >
To: GJC at MIT-MC
Cc: Jim O'Dell <jim at SCRC-VIXEN>, RP at SCRC-TENEX, JM at MIT-MC,
    JPG at MIT-MC, MACSYMA-I at MIT-MC
In-reply-to: The message of 10 Jan 83 11:59-EST from Jim O'Dell <jim at SCRC-VIXEN>

	From: George J. Carrette <GJC @ MIT-MC>
	Subject:  Changes to LMMAX;SYSDEF >
	To: jim @ SCRC-VIXEN
	cc: JIM @ MIT-MC, JM @ MIT-MC, JPG @ MIT-MC, MACSYMA-I @ MIT-MC,
	    RWK @ MIT-MC
	In-reply-to: The message of 10 Jan 1983 09:25-EST from Jim O'Dell <jim at SCRC-VIXEN>

	If you were "covering all the bases" then you could have noticed the
	last file-author of the file. I still don't understand the lack of
	coordination, RWK and JPG for example have different versions of the
	situation
Of course we do.  We addressed different situations.  I addressed your
distortions of the exchange between me and CWH.  I also told you you
were flaming, and that I didn't think there was any problem with getting
a new band to MIT.  JPG knew of a problem there that I didn't, which
should not be supprising to you.  He also told you you were flaming.
Am I required to know every detail of what the Macsyma people are doing
before I can tell you that you're distorting an exchange I was a party to?
	[Again, whatever amount of flaming there is in this situation must be
	 tempered with regard to actual fact, that there *was* a working Lispm
	 Macsyma at MIT before symbolics people went munging, and now there is not.
	 Call it a little oversight that makes GJC look silly if you will. Call it
	 a slight inconvenience?]
No Symbolics personel have deleted the working Lispm Macsyma band from MIT.
We did not ship across a band made in system 218, which was a rather
ephemeral system anyway, soon obsoleted.  The SYSDEF file was not
clobbered until a few days ago.  If you had wanted a Macsyma in 218
you could either have built your own, or requested that we ship it
to somewhere you could get to it.  Since you did neither, I request
you stop wasting our time with gratuitous flaming.  The only issue
of relevence you have brought up is that you were using the SYSDEF
file and JIM shouldn't have bashed it on you.  Much pain to all parties
would have been saved if you had simply pointed out the problem and
kept your flames to yourself.

Date: Monday, 10 January 1983, 11:59-EST
From: Jim O'Dell <jim at SCRC-VIXEN>
Subject: Changes to LMMAX;SYSDEF >
To: GJC at MIT-MC, RP at SCRC
Cc: jim at SCRC-VIXEN, JM at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC,
    RWK at MIT-MC
In-reply-to: The message of 10 Jan 83 11:41-EST from George J. Carrette <GJC at MIT-MC>

    From GJC@MIT-MC  Mon Jan 10 11:45:18 1983
    Date: 10 January 1983 11:41-EST
    From: George J. Carrette <GJC @ MIT-MC>
    Subject:  Changes to LMMAX;SYSDEF >
    To: jim @ SCRC-VIXEN
    cc: JIM @ MIT-MC, JM @ MIT-MC, JPG @ MIT-MC, MACSYMA-I @ MIT-MC,
	RWK @ MIT-MC
    In-reply-to: The message of 10 Jan 1983 09:25-EST from Jim O'Dell <jim at SCRC-VIXEN>

    If you were "covering all the bases" then you could have noticed the
    last file-author of the file. I still don't understand the lack of
    coordination, RWK and JPG for example have different versions of the
    situation, with the "understatement of the year" award again going to
    RWK, "all that we forgot to do is provide a working macsyma band to MIT."
    [Again, whatever amount of flaming there is in this situation must be
     tempered with regard to actual fact, that there *was* a working Lispm
     Macsyma at MIT before symbolics people went munging, and now there is not.
     Call it a little oversight that makes GJC look silly if you will. Call it
     a slight inconvenience?]

    To JPG: What exactly *is* the contractual agreement between MIT and SYMBOLICS?

    JIM, even though JPG is using the "not ready for distribution" line right now,
    from my experience I can assume that if you say (MAKE-SYSTEM 'MACSYMA) is
    working for you at Symbolics it will be sufficient for me and the people
    I'm concerned with at MIT.
I don't claim lots of bug fixes bug I do claim that I'm using up to date
sources.

    But exactly what has to been done to make
    it available? Who is supposed to do it?
Lets let RP and JPG have a crack at answering these questions.

Date: 10 January 1983 11:41-EST
From: George J. Carrette <GJC @ MIT-MC>
Subject:  Changes to LMMAX;SYSDEF >
To: jim @ SCRC-VIXEN
cc: JIM @ MIT-MC, JM @ MIT-MC, JPG @ MIT-MC, MACSYMA-I @ MIT-MC,
    RWK @ MIT-MC
In-reply-to: The message of 10 Jan 1983 09:25-EST from Jim O'Dell <jim at SCRC-VIXEN>

If you were "covering all the bases" then you could have noticed the
last file-author of the file. I still don't understand the lack of
coordination, RWK and JPG for example have different versions of the
situation, with the "understatement of the year" award again going to
RWK, "all that we forgot to do is provide a working macsyma band to MIT."
[Again, whatever amount of flaming there is in this situation must be
 tempered with regard to actual fact, that there *was* a working Lispm
 Macsyma at MIT before symbolics people went munging, and now there is not.
 Call it a little oversight that makes GJC look silly if you will. Call it
 a slight inconvenience?]

To JPG: What exactly *is* the contractual agreement between MIT and SYMBOLICS?

JIM, even though JPG is using the "not ready for distribution" line right now,
from my experience I can assume that if you say (MAKE-SYSTEM 'MACSYMA) is
working for you at Symbolics it will be sufficient for me and the people
I'm concerned with at MIT. But exactly what has to been done to make
it available? Who is supposed to do it?

-gjc

Date: Monday, 10 January 1983, 09:30-EST
From: Jim O'Dell <jim at SCRC-VIXEN>
Subject: More GJC flames
To: RWK at MIT-MC
Cc: MACSYMA-I at MIT-MC, JM at MIT-MC
In-reply-to: The message of 9 Jan 83 11:52-EST from Robert W. Kerns <RWK at MIT-MC>

    From RWK@MIT-MC  Sun Jan  9 11:55:15 1983
    Date: 9 January 1983 11:52-EST
    From: Robert W. Kerns <RWK @ MIT-MC>
    Subject: More GJC flames
    To: MACSYMA-I @ MIT-MC
    cc: JM @ MIT-MC

    Will you kindly stop blowing things out of proportion?  CWH announced an
    available Macsyma band.  I later corrected his error in stating it would
    be where he said, but I did *NOT* say it was going away.  That's not keystone
    cops, that's GJC misinterpreting things to make everyone else look silly.
    The only one that looks silly is GJC.

    The only thing wrong here that I can see is that noone has bothered to ship
    a Macsyma band to MIT.  I still have the band on Afghan, but I'd rather we
    sent you a more recent version, since that band is in an old system.  I don't
    there's any problem with sending a more modern version over, but I'll let Jim
    worry about that.

Right now if you walk up to a random Symbolics LispM you can say
(make-system 'macsyma) and get a working one. 
(make-system 'macsyma ':compile) and it will look at the sources on MIT
and compile the changed ones, store the binaries on pointer at
Symbolics, and load them up. We are now in a good position to maintain
the LispM version of Macsyma.

Date: Monday, 10 January 1983, 09:25-EST
From: Jim O'Dell <jim at SCRC-VIXEN>
Subject: Changes to LMMAX;SYSDEF >
To: JPG at MIT-MC
Cc: GJC at MIT-MC, MACSYMA-I at MIT-MC, JM at MIT-MC, JIM at MIT-MC,
    RWK at MIT-MC
In-reply-to: The message of 9 Jan 83 17:08-EST from Jeffrey P. Golden <JPG at MIT-MC>

    From JPG@MIT-MC  Sun Jan  9 17:10:09 1983
    Date: 9 January 1983 17:08-EST
    From: Jeffrey P. Golden <JPG @ MIT-MC>
    Subject: Changes to LMMAX;SYSDEF >
    To: GJC @ MIT-MC
    cc: MACSYMA-I @ MIT-MC, JM @ MIT-MC, JIM @ MIT-MC, RWK @ MIT-MC

       RWK@MIT-MC 01/09/83 11:52:58 Re: More GJC flames
       To: MACSYMA-I at MIT-MC
       CC: JM at MIT-MC
       I don't think there's any problem with sending a more modern version 
       over, but I'll let Jim worry about that.
    Jim's new version is not ready for distribution at this time.
    Probably soon...
My new version has had a lot of work interms of making it maintainable
from Symbolics while adhering to our contractual agreements to MIT, i.e.
that we keep a current set of sources at MIT.
       GJC@MIT-MC 01/09/83 11:36:37 Re: Changes you made to LMMAX;SYSDEF >
       To: JIM at MIT-MC
       CC: MACSYMA-I at MIT-MC, JM at MIT-MC
       Let me put it this way, unless somebody makes a Macsyma band available
       at MIT within the next two days I'm going to have to make yet more changes
       overtop yours, a never ending battle.
George, I really don't think that we'll have to do battle, I'm sorry I
didn't consult YOU when I wrote that file out. I thought I had covered
all the bases but....
       I still don't see why you would have to write your SYSDEF changes to
       a computer at MIT.
I doubt that keeping that file at MIT is important. It doesn't contain
that much information.
    I don't think anyone intentionally clobbered anything.  Surely there must 
    be many ways to resolve this problem with the SYSDEF file without a 
    "never ending battle".  Perhaps Symbolics specific files should be 
    kept at Symbolics, perhaps a trivially conditionalization will fix 
    this problem, perhaps there needs to be two different SYSDEF files, 
    perhaps the problem extends to other files.  Surely this can be 
    straightened out without the "never ending battle"?
George, please don't assume that people are out to get you until told
so. I don't want to fight at all.


Date: 9 January 1983 17:08-EST
From: Jeffrey P. Golden <JPG @ MIT-MC>
Subject: Changes to LMMAX;SYSDEF >
To: GJC @ MIT-MC
cc: MACSYMA-I @ MIT-MC, JM @ MIT-MC, JIM @ MIT-MC, RWK @ MIT-MC

   RWK@MIT-MC 01/09/83 11:52:58 Re: More GJC flames
   To: MACSYMA-I at MIT-MC
   CC: JM at MIT-MC
   I don't think there's any problem with sending a more modern version 
   over, but I'll let Jim worry about that.
Jim's new version is not ready for distribution at this time.
Probably soon...

   GJC@MIT-MC 01/09/83 11:36:37 Re: Changes you made to LMMAX;SYSDEF >
   To: JIM at MIT-MC
   CC: MACSYMA-I at MIT-MC, JM at MIT-MC
   Let me put it this way, unless somebody makes a Macsyma band available
   at MIT within the next two days I'm going to have to make yet more changes
   overtop yours, a never ending battle.
   I still don't see why you would have to write your SYSDEF changes to
   a computer at MIT.
I don't think anyone intentionally clobbered anything.  Surely there must 
be many ways to resolve this problem with the SYSDEF file without a 
"never ending battle".  Perhaps Symbolics specific files should be 
kept at Symbolics, perhaps a trivially conditionalization will fix 
this problem, perhaps there needs to be two different SYSDEF files, 
perhaps the problem extends to other files.  Surely this can be 
straightened out without the "never ending battle"?

Date: 9 January 1983 11:52-EST
From: Robert W. Kerns <RWK @ MIT-MC>
Subject: More GJC flames
To: MACSYMA-I @ MIT-MC
cc: JM @ MIT-MC

Will you kindly stop blowing things out of proportion?  CWH announced an
available Macsyma band.  I later corrected his error in stating it would
be where he said, but I did *NOT* say it was going away.  That's not keystone
cops, that's GJC misinterpreting things to make everyone else look silly.
The only one that looks silly is GJC.

The only thing wrong here that I can see is that noone has bothered to ship
a Macsyma band to MIT.  I still have the band on Afghan, but I'd rather we
sent you a more recent version, since that band is in an old system.  I don't
there's any problem with sending a more modern version over, but I'll let Jim
worry about that.

Date: 9 January 1983 11:36-EST
From: George J. Carrette <GJC @ MIT-MC>
Subject: Changes you made to LMMAX;SYSDEF >
To: JIM @ MIT-MC
cc: MACSYMA-I @ MIT-MC, JM @ MIT-MC

JIM, since the symbolics system was changing faster than the MIT system
I found it easier to maintain a Macsyma for use at MIT in the MIT system.
Well, since Symbolics has its own filesystem resources I didn't think I
would have to worry about changes to files on MIT-MC which ignored the
fact that there are two valid lispmachine software versions. Unfortunately
I was wrong. 

In other words, the picture is the following:
I had a way to build a working Macsyma here at MIT only a month ago,
and now I don't. Now to stronger words ...


Damn it. I used to have a way to get a working Macsyma on a Lispmachine,
and now I don't. What the hell are you guys at Symbolics doing? Must there
always be this decrease in usablity with an increase in "service?"
Great, CWH announces an available macsyma band, but then two seconds
later RWK says it will go away. Sounds more like the keystone cops
than a professional organization.

Let me put it this way, unless somebody makes a Macsyma band available
at MIT within the next two days I'm going to have to make yet more changes
overtop yours, a never ending battle.

-gjc

p.s. I still don't see why you would have to write your SYSDEF changes to
     a computer at MIT when the system results aren't made available at MIT.

Date: 22 December 1982 23:32-EST
From: George J. Carrette <GJC @ MIT-MC>
Subject: Common-Lisp screws Macsyma
To: MACSYMA-I @ MIT-MC

Changes to functions such as MEMBER and SUBST are likely to
screw Macsyma, so probably these will need to be shadowed in
the Macsyma package and replaced by other functions ...
at least that is what I'm doing for Macsyma in the NIL implementation of
COMMON-LISP now.

Argh! And this with MOON et. al. claiming that the empty list
not being a symbol is unthinkable because "costumers" wouldn't
buy it. Foo.

I just think its amusing, thats all, not really bothersome, but amusing.

-gjc

Date: 30 November 1982 08:56-EST
From: George J. Carrette <GJC at MIT-MC>
To: Kim.fateman at UCB-C70
cc: MACSYMA-I at MIT-MC, MACSYMA-POLICY at MIT-MC, cwh at SCRC-TENEX

I wonder if symbolics owns the Macsyma->Lisp translator that I worked on when
I was supposed to being programming Fortran on the Cray-1?

Date: 29 November 1982 21:58-EST
From: Richard E. Zippel <RZ at MIT-MC>
Subject:  218 Macsyma
To: CWH at SCRC-TENEX
cc: MACSYMA-I at MIT-MC, macsyma-i at SCRC-VIXEN,
    bug-macsyma at SCRC-TENEX, sales at SCRC-TENEX

I got this message at MIT.  How did it get out?  I guess I'll have to
go over the mailing lists sometime soon.  They are completely ridiculous
now.

BTW, I'm curious of any comments on the Capsule paper.  Also feel free
to spread it around further if you want.

Date: 29 November 1982 01:28-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: Macsyma Copyrights
To: Kim.fateman at UCB-C70
cc: MACSYMA-I at MIT-MC, MACSYMA-POLICY at MIT-MC, cwh at SCRC-TENEX

I spoke to Russ Noftsker about Macsyma Copyrights in October and he said 
that Symbolics has no intention of putting a Symbolics copyright on 
files which originated at MIT.  So you don't need to worry about this. 
I suspect Carl was simply not aware of this.  (He can check on this if 
he wishes.)

Date: 24-Nov-82 19:11:30-PST (Wed)
From: Kim.fateman@Berkeley
Message-Id: <8210250146.11770@UCBVAX.BERKELEY.ARPA>
Received: by UCBVAX.BERKELEY.ARPA (3.227 [10/22/82])
	id A11741; 24-Nov-82 17:46:15-PST (Wed)
To: cwh@scrc-tenex@mit-mc
Cc: macsyma-i@mit-mc, macsyma-policy@mit-mc

	From CWH@SCRC-TENEX  Wed Nov 24 16:45:57 1982
	Subject: 218 Macsyma
	To: bug-macsyma at SCRC-TENEX, macsyma-i at MIT-MC, macsyma-i at SCRC-VIXEN
	Cc: sales at SCRC-TENEX
	
	These changes were made to the Symbolics sources only.  I added
	Symbolics copyright notices to some of the files I modified.  I didn't
	have time to update the MC sources.
I suggest that no Symbolics-copyright-notice source files be put back on MC.
This is probably where we part ways.  I have no agreement whatsoever to
deal with Symbolics' code.  Carl: have you explored the implications of
the copyright notice, or are you just doing this on your own?

	

Symbolics does not own the pieces of macsyma source which were written
at UCB.

Date: 24 Nov 1982 2018-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Re: 218 Macsyma
To: CWH at SCRC-TENEX, bug-macsyma at SCRC-TENEX, macsyma-i at MIT-MC,
    macsyma-i at SCRC-VIXEN
cc: sales at SCRC-TENEX, RWK at SCRC-TENEX
In-Reply-To: The message of Wednesday, 24 November 1982, 19:30-EST from Carl W. Hoffman <CWH at SCRC-TENEX>

Er, CWH didn't talk to me before sending his message.
It is available on LOD1 of AFGHAN for *ONLY* a short time.
It will remain on AFGHAN's other disk for a longer period of time,
but it cannot be trivially transfered from there.  Sorry.

(It should be trivially possible to transfer from its other disk, but
the software does not currently provide for that.)
-------

Date: Wednesday, 24 November 1982, 19:30-EST
From: Carl W. Hoffman <CWH at SCRC-TENEX>
Subject: 218 Macsyma
To: bug-macsyma at SCRC-TENEX, macsyma-i at MIT-MC, macsyma-i at SCRC-VIXEN
Cc: sales at SCRC-TENEX

I made a Macsyma in 218 today.  You can find it on LOD1 of SCRC-AFGHAN
if you wish to copy it.  It will also be available on LOD2 of
SCRC-TERRIER for a short time.  If you wish to create a demo band,
(MAKE-SYSTEM 'MACSYMA ':NOCONFIRM) should work fine.

There were many bugs which I had to fix, and some conversion for NES was
required.  There is now MACSYMA-ERROR, a subflavor of ERROR, which is
signalled by MERROR.  This is caught by the Macsyma top level loop.
Lisp errors still go into the debugger.  I didn't bother making any of
the Macsyma breakpoint stuff work, since it never did.

These changes were made to the Symbolics sources only.  I added
Symbolics copyright notices to some of the files I modified.  I didn't
have time to update the MC sources.  ** Anyone who copies over new
source files from MC should be sure to merge in the changes.  If you're
not going to merge in the changes, let me know. **

Please be careful when editing the Macsyma sources.  There were a lot of
careless mistakes.

The bug-macsyma@scrc and macsyma-i@vixen mailing lists should be merged,
stored on one machine, and referred to as either bug-macsyma@scrc or
bug-macsyma@vixen.

Return-Path: <Lamson@MIT-MULTICS.ARPA>
Date:  22 October 1982 12:50 edt
From:  Richard Lamson at MIT-MULTICS
Subject:  New Lisp Interpreter and Compiler installed
Sender:  Lamson.SysMaint at MIT-MULTICS
Reply-To:  Lamson at MIT-MULTICS
To:  bug-lisp at MIT-MULTICS, Macsyma-I at MIT-MC
Message-ID:  <821022165048.140246 at MIT-MULTICS>

I have installed a new version of the lisp compiler and interpreter.
The new interpreter fixes the bug with second, et al., and changes
displace to return the displaced cons rather than its cdr.  The new
compiler is lcp 2.12-EXL, which contains all the support for first and
its cousins, displace, includef, and nth/nthcdr.  It optimizes nth and
nthcdr with constant first arguments into (car (cdr (cdr ...))) and (cdr
(cdr (cdr ...))) respectively, so you can write macros which will expand
into (nth 4 ...) and get good code out of them.

Bill York: The update_seg "io" segment is in >exl>lisp_dir>cook, called
lisp.10/22/82.io, if for some reason you need to pull the installation.
I have tested Emacs and Macsyma against it, though, so I don't expect
any problems.

-- Richard

Return-Path: <Lamson@MIT-MULTICS.ARPA>
Date:  20 October 1982 17:55 edt
From:  Richard Lamson at MIT-MULTICS
Subject:  Multics Macsyma
Sender:  Lamson.SysMaint at MIT-MULTICS
Reply-To:  Lamson at MIT-MULTICS
To:  Macsyma-I at MIT-MC
Message-ID:  <821020215524.671453 at MIT-MULTICS>

Could someone please re-save Multics Macsyma with the current EXL lisp?
It seems that something has been broken by it; the new Lisp has nth and
displace, while Macsyma also appears to define one or both of these in a
conflicting manner or something, with the result that Macsyma randomly
complains about something being wrong with a functional form.  I suspect
displace, of course, but it could be anything.

-- Richard

Date:  20 October 1982 05:06 edt
From:  Odell.SoftArts at MIT-MULTICS
Subject:  Multics Macsyma
Sender:  COMSAT.SoftArts at MIT-MULTICS
To:  Jeffrey P. Golden <JPG at MIT-MC>, CWH at SCRC-TENEX, 
     GJC at MIT-MC, MACSYMA-I at MIT-MC, Lamson at MIT-MULTICS
*from:  ODELL (Jim Odell)
Local:  Jeffrey P. Golden <JPG at MIT-MC>,CWH at SCRC-TENEX,GJC at MIT-MC,MACSYMA-I at MIT-MC,Lamson at MIT-MULTICS
Original-date:  18 OCT 1982 10:16:04

The metering that JPG talks about was set up by myself and Pete
Kelley.

Periodically it would wedge itself and have to be reset. I
didn't get to debug the reason it got wedged.

I did try to fix it last month but found out that access to the
macsyma library had been deneyed to me.

I mentioned to Richard Lamson how to fix it temporarily which I hope
that he did. It certainly doesn't affect the functioning of
Macsyma per se, but only the metering information on who is
using it.

Maybe someday Multics will get a new Macsyma.


Date: 17 October 1982 20:39-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: CWH at SCRC-TENEX
cc: GJC at MIT-MC, MACSYMA-I at MIT-MC, Lamson at MIT-MULTICS

   Date: Sunday, 17 October 1982, 16:26-EDT
   From: Carl W. Hoffman <CWH at SCRC-TENEX>
   To: JPG at MIT-MC, Lamson at MIT-MULTICS
   Cc: GJC at MIT-MC, MACSYMA-I at MIT-MC
   When people were being paid to maintain Multics Macsyma, it worked fine and
   continued to gain features.  Nobody is being paid to maintain it now, 
   so it is remaining static.  To my knowledge, nothing has broken since 
   the last installation was made.
Richard Scott did complain that some user monitoring Jim (I believe) had 
set up disappeared.  Anyway, I agree with you which is why I have been 
pushing to get Jim hired to work on Multics Macsyma.

Date: Sunday, 17 October 1982, 16:26-EDT
From: Carl W. Hoffman <CWH at SCRC-TENEX>
To: JPG at MIT-MC, Lamson at MIT-MULTICS
Cc: GJC at MIT-MC, MACSYMA-I at MIT-MC
In-reply-to: The message of 14 Oct 82 01:07-EDT from Jeffrey P. Golden <JPG at MIT-MC>

    Date: 14 October 1982 01:07-EDT
    From: Jeffrey P. Golden <JPG at MIT-MC>
    Maybe some day some order will come out of the Multics Macsyma morass.

That comment was rude and uncalled for, especially since you have little
knowledge of the structure of the Macsyma software on Multics.

When people were being paid to maintain Multics Macsyma, it worked fine and
continued to gain features.  Nobody is being paid to maintain it now, so it is
remaining static.  To my knowledge, nothing has broken since the last
installation was made.

Date:  14 October 1982 10:35 edt
From:  Scott at MIT-MULTICS (Richard D. Scott)
Sender:  Scott.ARCS at MIT-MULTICS
To:  Jeffrey P. Golden <JPG at MIT-MC>
cc:  Lamson at MIT-MULTICS, GJC at MIT-MC, MACSYMA-I at MIT-MC
In-Reply-To:  Msg of 10/14/82 08:57 from Jeffrey P. Golden

User Accounts has been asked to put more money in the Mathlab account. 
I expect it will be accomplished by this afternoon.  And, yes, we would
very much like to see Multics Macsyma brought up to standard.

Return-Path: <Lamson@MIT-MULTICS.ARPA>
Date:  14 October 1982 08:59 edt
From:  Richard Lamson at MIT-MULTICS
Sender:  Lamson.SysMaint at MIT-MULTICS
Reply-To:  Lamson at MIT-MULTICS
To:  Jeffrey P. Golden <JPG at MIT-MC>
cc:  Scott at MIT-MULTICS, Roach at MIT-MULTICS, 
     Macsyma-I at MIT-MC, GJC at MIT-MC
In-Reply-To:  Message of 14 October 1982 01:15 edt from Jeffrey P. Golden
Message-ID:  <821014125950.266261 at MIT-MULTICS>

I would personally like to see whatever maintenance is necessary to
bring Macsyma up to standard on Multics.  I have forwarded your message
to the people who make decisions about Mathlab funding on Multics.

Perhaps you could send them a reply, giving a specific list of fixes you
can supply immediately when you install a new Macsyma on Multics.

-- Richard

Date: 14 October 1982 01:07-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: Lamson at MIT-MULTICS
cc: GJC at MIT-MC, MACSYMA-I at MIT-MC

   Date:  13 October 1982 13:42 edt
   From:  Richard Lamson at MIT-MULTICS
   Subject:  Re: Fix to STRINGOUT
   To:  Jeffrey P. Golden <JPG at MIT-MC>
   cc:  GJC at MIT-MC, MACSYMA-I at MIT-MC
   Would one of you bring the change to Multics and install it?  I would
   appreciate having a newly saved lisp environment for Macsyma, although I
   am about to change lisp_save_ to not barf if the environment is
   upwards-compatible.
I hear tell the Mathlab Project is out of funds on Multics.  I also hear 
tell Jim O'Dell might be hired to bring up a new Macsyma on Multics. 
(There hasn't been a new one in quite some time.)  GJC also hinted that 
he would install this change if the Mathlab Project had some funds. 
Maybe some day some order will come out of the Multics Macsyma morass.

Return-Path: <Lamson@MIT-MULTICS.ARPA>
Date:  13 October 1982 13:42 edt
From:  Richard Lamson at MIT-MULTICS
Subject:  Re: Fix to STRINGOUT
Sender:  Lamson.SysMaint at MIT-MULTICS
Reply-To:  Lamson at MIT-MULTICS
To:  Jeffrey P. Golden <JPG at MIT-MC>
cc:  GJC at MIT-MC, MACSYMA-I at MIT-MC
In-Reply-To:  Message of 13 October 1982 10:19 edt from Jeffrey P. Golden
Message-ID:  <821013174203.097293 at MIT-MULTICS>

Would one of you bring the change to Multics and install it?  I would
appreciate having a newly saved lisp environment for Macsyma, although I
am about to change lisp_save_ to not barf if the environment is
upwards-compativble.

-- Richard

Date: 12 October 1982 06:44-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: Fix to STRINGOUT
To: GJC at MIT-MC, Lamson at MIT-MULTICS
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 10/11/82 14:12:02 Re: Fix to Stringout for Vicki Bier
   To: Lamson at MIT-MULTICS
   CC: MACSYMA-I at MIT-MC
   I've put the function on MAXDEV;SUPRVT > on MIT-MC.
I merged this fix into MC:JPG;SUPRV > .
(I wonder why JIM didn't make this change to STRINGOUT when he made 
the similar change to SAVE.  I know he looked at STRINGOUT then.)

Date: 11 October 1982 14:12-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: Fix to Stringout for Vicki Bier
To: Lamson at MIT-MULTICS
cc: MACSYMA-I at MIT-MC

I've put the function on MAXDEV;SUPRVT > on MIT-MC. Sorry I can't
check this out myself, but logging in as Carrette.Mathlab tells
me that the project has run out of funds. This seems kind of strange
given how little macsyma maintaining has been going on from that project
in the last year. Anyway, the quickest fix would seem to be if I came
over to where you are hacking and we looked at the problem together.
[Well, I could use out-of-pocket money from Carrette.Paradigm,
 but thats a bit too silly considering what the Mathlab project has
 been used for latey.]

-gjc

p.s. Yes, there is an exe_com file for building a macsyma...
     and you can also load a patch into the running one.

Date: 18 July 1982 13:26-EDT
From: Richard Brenner <ASB at MIT-MC>
To: Kim.Fateman at UCB-C70
cc: MACSYMA-I at MIT-MC, MACSYMA-DISCUSSION at MIT-MC,
    RWK@SCRC-TENEX at MIT-AI, Kim.jkf at UCB-C70,
    Kim.morrison at UCB-C70, v.char at UCB-C70

    Date: 17 Jul 1982 21:10:29-PDT
    From: Kim.fateman at Berkeley
    To: RWK@SCRC-TENEX@MIT-AI
    Cc: macsyma-i@mit-mc

    As for f(a,b,c) vs. 'f(a,b,c), macsyma makes no distinction if f
    is "undefined".  ....
Not true, the quoted one is nounified, but this does not affect
the validity of your original point.
-----------
    Date: 17 Jul 1982 14:50:20-PDT
    From: Kim.fateman at Berkeley
    To: macsyma-discussion@mit-mc

    Most people who use macsyma for serious programming, tend to use
    lists for lots of things.  Sets of various sorts, sequences, etc.
    Part of the reason for this is if you have set
    x:[a,b,c];
    then you can do
    x[2]:newb;
    and the list x will change.
I have  never used this 'feature', but it seems extremely dangerous to me.
In addition to the point raised by JPG, circularity is also possible.  Try

X:[X,Y,Z]$
X[1]:X$

Macsyma will overflow regpdl.  Any subsequent

X;

will also overflow.  It seems to me that a safer way to get the desired
effect is to use SUBSTINPART.  In the above example X:SUBSTINPART(X,X,1)$
works fine.  In what way is SUBSTINPART inadequate?

Date: 18 July 1982 01:57-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: Kim.fateman at UCB-C70
cc: MACSYMA-DISCUSSION at MIT-MC, MACSYMA-I at MIT-MC,
    KIM.MORRISON at MIT-MC, V.CHAR at MIT-MC

The fact that lists and matrices are so easily clobbered by just doing 
e.g.  X:[1,2,3]$  X[2]:4$  thereby changing X itself and all who "share" 
with it is not something to be taken so likely.  Some might argue that we 
should not have done even this.  To actually propose that we should extend 
this to other structures without having to go through lists (or matrices) 
is, I think, a great mistake.  
I think the proof of this is in your own "complex" example:
   z:complex(3.0,4.0);
   z[real]:5.0;
   z; --> complex(5.0,4.0);
How many would actually want to clobber a complex number AND ALL EXPRESSIONS 
THAT CONTAIN IT in this manner?
However, even with all this, you say you have an implementation.  Why don't 
you make your implementation available so that people can try it out and 
see for themselves?

I, however, have no objections to your CONS(X,F(A,B,C)); -> F(X,A,B,C) 
idea.  (I'm sort of 50-50 on it.)  If there is a consensus for it (and 
if TRANSLATE does not assume the second argument here is a list - it does 
not appear to in my tests of it), then I will make this change to 
CONS (and ENDCONS, APPEND, and MEMBER).

Date: 17 Jul 1982 21:10:29-PDT
From: Kim.fateman at Berkeley
To: RWK@SCRC-TENEX@MIT-AI
Cc: macsyma-i@mit-mc

If you could explain how to do what I would like with macros, neatly,
I would appreciate it.
Discussions of usefulness and crockishness are   
hard to do by mail.  I do know that having no data structures 
in the usual sense
(except formulas, lists (+matrices, perhaps)) induces overloading
of lists ([]). The painfulness of this
is often displayed in user programs. It's like old-fashioned lisp,
where everything in creation is fashioned from the same
conses, and decomposed by raw cars and cdrs.

As for f(a,b,c) vs. 'f(a,b,c), macsyma makes no distinction if f
is "undefined".  Consider 
 z:sequence_of_numbers(3,4,5);
newz:cons(1,z);
There is never any intent to define sequence_of_numbers([l]):= .... 
Also, introducing a "'" where it is not needed just gives one
more thing to explain.

Does this clarify things?


Date: 17 Jul 1982 2347-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
To: Kim.fateman at UCB-C70, macsyma-i at MIT-MC
cc: RWK at SCRC-TENEX
In-Reply-To: Your message of 17-Jul-82 1333-EDT

While hacking CONS(X,F(A,B,C)) ==> F(X,A,B,C) may be in the Macsyma tradition,
I think that it is in the very worst of that tradition.  Not to mention that
you really meant CONS(X,'F(A,B,C)).  This is what macros are good for; there's
no need to crock up the language to the point that it becomes completely
unusable.
-------

Date: 17 Jul 1982 14:48:22-PDT
From: Kim.fateman at Berkeley
To: macsyma-discussion@mit-mc
Subject: new feature proposed
Cc: Kim.jkf@Berkeley, macsyma-i@mit-mc, Kim.morrison@Berkeley, v.char@Berkeley

(an implementation is available).
Most people who use macsyma for serious programming, tend to use
lists for lots of things.  Sets of various sorts, sequences, etc.
Part of the reason for this is if you have set
x:[a,b,c];
then you can do
x[2]:newb;
and the list x will change.
  Whereas if you do
x:f(a,b,c);
x[2]:newb;
  what you have done is put an entry into a hash-array named x.
consider if you want to have a 'record' or 'structure' type, say,
complex,  for complex number, such that
z:complex(3.0,4.0);
z[real]:5.0;
z; --> complex(5.0,4.0);

I suggest this can be implemented with a small change to macsyma so that
put(complex,true,record);
real:1$ imag:2$

will allow this to happen.

I also suggest the the uniqueness of "mlist" be altered so that

h2d:vectorset(j,i);
put(vectorset,true,list);
h3d:cons(h2d,k); also works. (h3d = vectorset(k,j,i) ).
Comments?


Date: 17 Jul 1982 10:27:58-PDT
From: Kim.fateman at Berkeley
To: macsyma-i@mit-mc

In the spirit of macsyma's extending operations, how do you
feel about cons(x,f(a,b,c)) producing f(x,a,b,c) ?>
If f = ?mlist, this already works, of course.
This would tend to aleviate the problem of using lists for
every collection of things around.

Date: 16 July 1982 03:39-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: Kim.fateman at UCB-C70
cc: MACSYMA-I at MIT-MC

   Date: 15 Jul 1982 08:15:31-PDT
   From: Kim.fateman at Berkeley
   To: macsyma-i@mit-mc
   Subject: macsyma compilation environment
   We here have gotten bitten twice recently by the bug that our interpreted 
   code assumes base 10 numbers, but compiling in the mit environment assumes
   base 8.
Compiling in the MIT-MC environment has always assumed the base 
is 10 unless the file being compiled itself states otherwise.

Date: 15 Jul 1982 14:14:47-PDT
From: Kim.fateman at Berkeley
To: ellen@mit-mc, jpg@mit-mc
Subject: demo and share files and documents
Cc: macsyma-i@mit-mc

It seems to me that a lot of these things can and perhaps should
be put into the examples file.  I have set up a separate indexing
arrangment for this so that there is no time wasted groveling through
the file; it is not clear to me what mit-mc does.  Also, the demo and
share documentation could be put in macsym doc.
Sending out all those demo and share files on a tape is a pain for
sender and recipient.


Date: 15 Jul 1982 08:15:31-PDT
From: Kim.fateman at Berkeley
To: macsyma-i@mit-mc
Subject: macsyma compilation environment

We here have gotten bitten twice recently by the bug that our interpreted code
assumes base 10 numbers, but compiling in the mit environment assumes
base 8.  How about assuming base 10 in macsyma sources?  I believe
all integer numbers in macsyma sources have a decimal point following
them (except perhaps numbers < 3).  We too have decimal points, but
sometimes we forget to put them in.

Date: 10 June 1982 01:40-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: "MAXSRC;MTRACE"
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

You want to FTP the Franz version of this file back to MC, call it
"MAXSRC;MTRACE FRANZ" and/or just merge in the conditionalizations.
This is so I can easily merge in my NIL conditionalizations for same.
(lispmachine too).


Date: 24 April 1982 07:23-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC

RESIMPLIFY has been changed from a macro in LIBMAX;MAXMAC to a function 
in JM;SIMP.  It is to be used instead of the poorly named SSIMPLIFYA 
of JM;SIMP which will be flushed when there are no longer any calls 
to it.  (SSIMPLIFYA will not however be flushed for at least 6 months, 
for safety sake.)

Date: 22 April 1982 18:23-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: To run and compile TRLISP files the following must happen:
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

[0] Compile the file on LIBMAX;TRANSM
[1] Then compile ACALL, TRMODE, MDEFUN, TRANSQ, and FCALL.
[2] create a file like that on LIBMAX;TPRELUDE >.
[3] for compilation declarations process the files
     MAXDOC;DCL LOAD, and MAXDOC;TDCL > into a form
     good for the Franz compiler.


Date: 21 Apr 1982 13:46:41-PST
From: Kim.jkf at Berkeley
To: JPG@MIT-MC
Cc: MACSYMA-I@MIT-MC
In-reply-to: Your message of 21 April 1982 15:57-EST

  WRITEFILEP and TTYOFF sound good to me.  I will make the change.



Date: 21 April 1982 15:57-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: Kim.jkf at UCB-C70
cc: MACSYMA-I at MIT-MC

   Date: 21 Apr 1982 09:03:22-PST
   From: Kim.jkf at Berkeley
   To: jpg@mit-mc
   Subject: problems with ^r
   Cc: macsyma-i@mit-mc
   I think that it is time we conditionalized ^r correctly.  Franz
   uses the symbol 'ptport' to mean the same thing and I am sure that
   future lisps will use a symbol different than either ^r or ptport.
   We should replace all ^r's with #.foo for some foo, where the value of
   foo is different for each system.   It may be a good idea to replace ^w
   while we're at it.   
   I'm willing to do it but I am not sure which of the macro files should
   contain the expression to set foo to the correct value.
How about LIBMAX;MAXMAC ?

   Suggestions for a good system-independent name for 'foo' would also be 
   useful.
How about using their MACSYMA-suggested names?  TTYOFF for ^W and 
WRITEFILEP for ^R ?  (If you like longer names, there's always 
WRITEFILE-IN-PROGRESS.  JIM chose the latter for Multics.)

Date: 21 April 1982 13:28-EST
From: George J. Carrette <GJC at MIT-MC>
To: Kim.jkf at UCB-C70
cc: MACSYMA-I at MIT-MC

Yes, the ^R thing is a real problem, even more so on the lispmachine
and in NIL. You know how the whole thing interacts with the GRAPHICS
drawing in DISPLA and with rubout handlers.

Actually, what we do on the LISPM and NIL now is simulate the Maclisp
thing EXACTLY. On both systems the concept of ^R/PTPORT things
is abhorent, *but* there is enough generality to support the Maclisp
style thing exactly.


Date: 21 Apr 1982 09:03:22-PST
From: Kim.jkf at Berkeley
To: jpg@mit-mc
Subject: problems with ^r
Cc: macsyma-i@mit-mc

  I think that it is time we conditionalized ^r correctly.  Franz
uses the symbol 'ptport' to mean the same thing and I am sure that
future lisps will use a symbol different than either ^r or ptport
(The way things are going, it will probably be something like 
   si:*write-to-this-port-as-well-as-standard-ouput-if-it-is-not-nil*)

We should replace all ^r's with #.foo for some foo, where the value of
foo is different for each system.   It may be a good idea to replace ^w
while we're at it.   
  I'm willing to do it but I am not sure which of the macro files should
contain the expression to set foo to the correct value.  Suggestions
for a good system-independent name for 'foo' would also be useful.
In Unix-land, we call it a 'protocol port' (thus ptport), but I understand
that ITS refers to it as a 'wallpaper port'.



Date: 16 April 1982 07:21-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: Kim.fateman at UCB-C70
cc: MACSYMA-I at MIT-MC, Kim.jkf at UCB-C70

   Date: 12 Apr 1982 14:53:59-PST
   From: Kim.fateman at Berkeley
   To: Kim.jkf@Berkeley
   Subject: more accuracy
   Cc: guy.steele@cmu-10a, macsyma-i@mit-mc
   In macsyma, the values of these constants appear numerically in
   in jpg/mlisp and mrg/compar. Obviously they should be in one place only.
The numerical values have been removed from MRG;COMPAR > .

Date: 15 April 1982 03:38-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

   RJF@MIT-MC 04/15/82 00:46:04
   In trying to track down a difference in behavior between defint 
   on vax and on mit-mc, I tried loading defint >.  Unfortunately,
   loading it uncompiled leaves no space for limit to be loaded.
   I suspect that there is a lot of expensive baggage in various macro
   libraries.
So what else is new?  This has been discussed long ago in mail to 
MACSYMA-I.

Date: 12 Apr 1982 14:53:59-PST
From: Kim.fateman at Berkeley
To: Kim.jkf@Berkeley
Subject: more accuracy
Cc: guy.steele@cmu-10a, macsyma-i@mit-mc

We are maintaining files with different precision constants (pi, e, phi)
via conditional compilation.  
We could perhaps eliminate this if we knew the
answer to the question: are there systems where extra
precision would hurt? 
i.e. will (setq $%phi  1.6180339887498948)

be worse, on any system, than a lower precision version?

In macsyma, the values of these constants appear numerically in
in jpg/mlisp and mrg/compar. Obviously they should be in one place only.


Date: 10 Apr 1982 20:46:54-PST
From: Kim.fateman at Berkeley
To: Kim.fateman@Berkeley, macsyma-i@mit-mc
Subject: allowing fexprs

I see that by doing ?fexprerrp:false; I can allow fexprs.  
How convenient.  Meval1, which was never something to write home about,
checks this...

Date: 10 Apr 1982 20:29:18-PST
From: Kim.fateman at Berkeley
To: gjc@mit-mc, macsyma-i@mit-mc
Subject: convincing argument in favor of allowing the calling of fexprs from

macsyma level.

Quite simply, there may be, in fact, ARE, fexprs that I would like to
call.  The fact that something does not work on the lisp machine is
a reason to fix the lisp machine, not to remove the feature and
break existing code.  Why not allow fexprs on a #-lispm basis?

Date: 10 April 1982 23:00-EST
From: George J. Carrette <GJC at MIT-MC>
To: Kim.fateman at UCB-C70
cc: JPG at MIT-MC, RZ at MIT-MC, MACSYMA-I at MIT-MC

    Date: 10 Apr 1982 15:35:20-PST
    From: Kim.fateman at Berkeley
    To:   jpg
    cc:   gjc, rz

    It appears that macsyma now forbids calling an fexpr from top level.
    Is this supposed to be a feature?

That is one way of looking at it. The better way of looking at it is
that to define a special form for the macsyma user the system programmer
uses DEFMSPEC which is not to be confused with any methods for adding
special forms to the underlying lisp language. You see, the calling
of Fexpr's never really worked on the Lispmachine (some arguments could
be &QUOTE, and some not) and the calling of lisp special forms from
Macsyma in NIL is actually impossible without going through incredible
amounts of hair. So I figured why press our luck supporting a useless
feature? Certainly Joe-Average-Macsyma-User never sees the difference.

What Fexpr's do you like to call from Macsyma level? I like to call
?GRINDEF, so what I put in my macsyma init is the line

(DEFMSPEC $GRINDEF (FORM) (EVAL `(GRINDEF ,@(CDR FORM))))

Do you have any convincing arguments in favour of calling fexprs from
Macsyma level?


Date: 8 April 1982 11:45-EST
From: Richard J. Fateman <RJF at MIT-MC>
Subject: for-declaration
To: MACSYMA-I at MIT-MC


never mind.

Date: 8 April 1982 11:42-EST
From: Richard J. Fateman <RJF at MIT-MC>
To: MACSYMA-I at MIT-MC

where did "for-declarations" come from in libmax;displm ?

Date: 1 March 1982 12:22-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: DEFCONST vs. DEFVAR
To: MACSYMA-I at MIT-MC

does anybody know why DEFMVAR is defined to expanded into DEFCONST
in #+(OR multics lispm) and DEFVAR in #-(or multics lispm).
The reason I ask is that somebody just changed DEFCONST incompatibly
on the Lispm such that DEFCONST of one argument gives an error.


Date: 27 January 1982 14:30-EST
From: George J. Carrette <GJC at MIT-MC>
To: ASB at MIT-MC
cc: MACSYMA-I at MIT-MC

I improved the translation of "-" and am planning some
simple changes which will cut generated code-size in half
for programs which do a lot of function calling.

This note is just to let you know so that you can have
some test files ready ahead of time, as well, these
things are bug prone as you know.

Date: 2 October 1981 13:11-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  bizzare use of listify
To: CSVAX.jkf at UCB-C70
cc: MACSYMA-I at MIT-MC

Use of LISTIFY inside a function which is not a LEXPR but which is
called by a LEXPR works in all maclisp's and also in Lispmachine Lisp.
This does not imply that listify looks up the stack for the
first lexpr. If you look at the code produced by the pdp-10 maclisp compiler
and by the lispmachine compiler for a LEXPR definition it will be obvious
what is going on.

Note: The code in question "mrg;meter" is not part of Macsyma. This was mentioned
on Macsyma-I some time ago. Refer to "maxdoc;files >" and "lmmax;sysdef >"
for the working definitions of macsyma.

-gjc

Date: 2 Oct 1981 09:14:34-PDT
From: CSVAX.jkf at Berkeley
Full-Name: John K. Foderaro
To: macsyma-i@mit-mc
Subject: bizzare use of listify


Could someone clue me in as to what is happening in this function
from mrg;meter.  The listify function is being used in an expr, not a
lexpr.  Does this imply that the listify looks up the stack for the
first lexpr and listifies its arguments?  Does this work on all other
Lisps at MIT [It works interpreted in Franz Lisp, but not compiled]?

(DEFUN %RUN\CLOCK-T (FP N)
  (SETQ %CPUTIME-DECREMENT (+ %CPUTIME-DECREMENT %RUN\CLOCK-T-TIME (* %LISTIFY-TIME N)))
  (APPLY FP (LISTIFY N)))



Date: 24 September 1981 08:53-EDT
From: Charles F. F. Karney <CFFK at MIT-MC>
Subject: Number theory question
To: MACSYMA-I at MIT-MC

How can I easily analyse a quasi-periodic function?  I have a
numerically computable function which I know can be written
in the form

f(t):=sum(sum(a[m,n]*exp(%i*(m*w1+n*w2)*t),m,minf,inf),n,minf,inf)

The problem is to find the a[m,n] and w1 and w2 given a arbitraily
long sample of f(t).  By Fourier tranforming (with an FFT) a long
sample of f(t), I can write

f(t):=sum(a[k]*exp(%i*w[k]*t),k,minf,inf)

The problem then reduces to finding the w1, w2, m, and n, such that
for each w[k] you can write w[k]=m*w1+n*w2.

Does anyone know how this might be done?  (Preferably with enough
robustness so that I can tolerate some error in the determination
of the w[k].)

(For interest, f(t) is obtained by integrating a flow on a torus.
That's why I know it's quasi-periodic, without immediately knowing
the decomposition.)

Thanks.

Date: 17 Sep 1981 12:41:34-PDT
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc
Subject: early benchmark on vax 11/750

Seems that for standard gen demo, the 11/750 is about 73% of an 11/780.

Date: 14 September 1981 20:00-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

   Date: 13 Sep 1981 20:18:55-PDT
   From: CSVAX.fateman at Berkeley
   To: macsyma-i@mit-mc
   Who has been "rewriting" rat3a to use things like "p-le"?
I would think BMT.
I don't know what you mean by "rewriting".  That sounds "recent", 
whereas this was certainly done at least 6 months ago, offhand I don't 
know how much longer.

Date: 13 Sep 1981 20:18:55-PDT
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc

Who has been "rewriting" rat3a to use things like "p-le"?

Date: 6 September 1981 22:10-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: In reply to your request.
To: DEVON at MIT-MC
cc: MACSYMA-I at MIT-MC

There is interest in optimal graphics protocals and local processing
in the New-Implementation-of-Lisp group. Such things as the distribution
of echo-negotiation are being considered during developement of the
EMACS-style editor for NIL.

The best you can probably do now is to think about these things by
testing out the ideas in Maclisp programs you can write.
Looking at the code for the Macsyma display won't tell you much.
But there are many early papers on two-dimensional graphic display
which are useful. Since you live near Wash. D.C., I would recommend
trying the Library of Congress, which is where I always went to find anything.

-gjc

Date: 3 September 1981 15:55-EDT
From: Jon L White <JONL at MIT-MC>
To: JPG at MIT-MC, WGD at MIT-MC
cc: BUG-LISP at MIT-MC, MACSYMA-I at MIT-MC, GCOOK at MIT-MC

    Date: 3 September 1981 07:08-EDT
    From: Jeffrey P. Golden <JPG at MIT-MC>
    Oops!  As it may be argued that the example in my last mail does 
    exhibit "differing declarations", as the first occurrence of X is 
    not declared FLONUM, please replace the example by
	    (defun f (x)
	      (declare (flonum x))
	      ((lambda (x)
		 (declare (flonum x))
		 (times x ((lambda (x)
			     (declare (flonum x))
			     (times x x))
			   x)))
		  (sin x)))
    This one fails in the same way anyway.
Yup, your're right.  I suspect that fixing COMPLR to ignore the
*consistent* re-declarations wouldn't be any trouble at all.
Maybe with a little more thought, fixing it for overriding
declarations could be worked in too.  Overrides of NOTYPE are
harder to do since NOTYPE generally means the absence of
other declarations -- getting this part would involve a little
more work, but I'll look into it after returning from England.

Date: 3 September 1981 15:04-EDT
From: Jon L White <JONL at MIT-MC>
Subject: ITS file system limitations, and the realities
To: GJC at MIT-MC
cc: JM at MIT-MC, MOON at MIT-MC, RZ at MIT-MC, MACSYMA-I at MIT-MC,
    PHW at MIT-AI

    Date: 3 September 1981 11:37-EDT
    From: George J. Carrette <GJC at MIT-MC>
    Subject:  A reasonable mode of cooperation under the ITS file system?
    .  .  .
    Actually, a DECENT file system could help! I could not write out any
    ">" versions on libmax because of ITS-DIRECTORY-SPACE-OVERFLOW.
    So I just deleted the files I didn't need rather than waste more time.
    .  .  .
In recent days, :DSKUSE LIBMAX shows about 85% utilization -- doesn't
this fact conflict with your claim of ITS-DIRECTORY-SPACE-OVERFLOW?

Date: 3 September 1981 14:56-EDT
From: Jon L White <JONL at MIT-MC>
To: rms at MIT-AI
cc: JM at MIT-MC, MOON at MIT-MC, RZ at MIT-MC, MACSYMA-I at MIT-MC,
    PHW at MIT-AI

    From: Richard M. Stallman <RMS at MIT-AI>
    Re:   A reasonable mode of cooperation under the ITS file system?
    This is a real problem, but people should not go away with the
    mistaken impression that file fascism would solve it.
Right.  This is a problem not of file system design, but of
breach-of-contract of the openness that has prevailed around these
labs for so many years.

Date: 3 September 1981 11:37-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  A reasonable mode of cooperation under the ITS file system?
To: RMS at MIT-AI
cc: JM at MIT-MC, JONL at MIT-MC, MACSYMA-I at MIT-MC, MOON at MIT-MC,
    RZ at MIT-MC, PHW at MIT-AI

    From: Richard M. Stallman <RMS at MIT-AI>
    Re:   A reasonable mode of cooperation under the ITS file system?

    This is a real problem, but people should not go away with the
    mistaken impression that file fascism would solve it.

Actually, a DECENT file system could help! I could not write out any
">" versions on libmax because of ITS-DIRECTORY-SPACE-OVERFLOW.
So I just deleted the files I didn't need rather than waste more time.
Evidently, a long time ago the person who wrote the ITS filesystem thought
it was clever that a whole directory would fit into an ITS PAGE/BLOCK. 
But, the amount of time wasted since, dealing with (compiling, editing, reading),
huge unstructured source files with filenames limited to 1960 FORTRAN names,
is ridiculous. Another loss is the number-of-directories limitation.
Each new person can't get his one personal directory. Instead he has
to fight-it-out on one of the USERS* directories.

This is a topical flame, since I've heard some rumors about ITS being
brought up on a new 2060, rather than use TOPS-20. I think this makes
about as much sense as buying used shoes.

-gjc

Date: 3 September 1981 11:13-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I think that the GRIND code can be cleaned up by using a
special variable to hold the various constants like
'(#/T #/H #/E #/N). I had at first changed this to #.(EXPLODEN "THEN")
but the lispmachine has this *problem* with temporary-consing areas,
read-time consing "goes away."
Sigh, another thing is that it is not clear that MRG's use
of things like (APPEND '#.(EXPLODEN " FOO ") ()) is any more efficient than
using (EXPLODEN " FOO ") directly. 

Yes, there is this trade-off between readability because of prettyness
or compactness, and readability because of standardness, style, abstractness.

In this case I wanted to compile and run GRIND in NIL, since
it is a good printer for macsyma expressions, and it is nice to have
a printer while debugging code. I had not implemented read macros
in NIL yet. [Note that MRG's "{" readmacro has three different implementations,
one for Maclisp, one for Franz, one for Lispm. And for quite some time
Mrg's readmacros caused many a lispmachine compilation session to be wedged.
Remember the readmacros for ">" and "<" ??? Great stuff really for the unwary
programmer!]  Anyway, there were only 8 uses of the "{" readmacro in all of macsyma,
all in the GRIND package, so you can see why I would want to take it out.

-gjc

Date: 3 September 1981 07:25-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 08/23/81 22:27:59 Re: #.(CHAR-LIST-SYNTAX-ON)
   To: MACSYMA-I at MIT-MC
   The use of this has been removed from the GRIND package.
Whereas this change may have been "necessary", although you don't 
say why you made it, and I do find hacks like MRG's {...} hack 
somewhat disturbing in that they affect some MACSYMA source files 
but not all of them, uniformity and all that, still you've thereby 
made the file more difficult to read.  Also, you broke it in one 
place (spuriously changing an "ELSE" into a "THEN").  I fixed this.

Date: 3 September 1981 07:08-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: COMPLR bug
To: JONL at MIT-MC
cc: GJC at MIT-MC, BUG-LISP at MIT-MC, GCOOK at MIT-MC,
    MACSYMA-I at MIT-MC

Oops!  As it may be argued that the example in my last mail does 
exhibit "differing declarations", as the first occurrence of X is 
not declared FLONUM, please replace the example by
	(defun f (x)
	  (declare (flonum x))
	  ((lambda (x)
	     (declare (flonum x))
	     (times x ((lambda (x)
	   		 (declare (flonum x))
	   		 (times x x))
	   	       x)))
	      (sin x)))
This one fails in the same way anyway.

Date: 3 September 1981 06:44-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: COMPLR bug
To: JONL at MIT-MC
cc: GJC at MIT-MC, BUG-LISP at MIT-MC, GCOOK at MIT-MC,
    MACSYMA-I at MIT-MC

   JONL@MIT-MC 08/27/81 00:59:19
   To: GJC at MIT-MC
   CC: (BUG LISP) at MIT-MC, GCOOK at MIT-MC, JPG at MIT-MC,
   CC: MACSYMA-I at MIT-MC
   I'm aware of the limitation in COMPLR, whereby you can't
   nest a local variables with differing declarations.  
   
Apart from the fact that it would be nice if the above bug were fixed,
GJC's first example did not exhibit "differing declarations":

   GJC@MIT-MC 08/26/81 23:08:46 
   Let us look at a simple case:
   (defun f (x)
     ((lambda (x)
        (declare (flonum x))
        (times x ((lambda (x)
   		 (declare (flonum x))
   		 (times x x))
   	       x)))
      (sin x)))
   
The declarations here are the same.  But the compiler still gives an error:
   
   (COMMENT **ERROR**  (FLONUM G0001) 
   		Local declaration occurs too late in function in function F)
   ; DATA ERROR - TO PROCEED TYPE $P 

I think it would be REALLY nice if THIS bug were fixed.  It seems to me 
that one would expect a code generator to generate cases involving 
consistent declarations, and it is a shame that even that does not 
work.  This really adds to the burden of the code generator.  
Furthermore, the error message given by the compiler involves a G0001.
I don't think that is a good example of human engineering.  
(Again, I am not saying there is anything wrong (except in terms of 
clarity of code) with "inconsistent nested local declarations" and that 
the whole bug shouldn't be fixed.  I am just more concerned that the 
bug also happens when the declarations are consistent.)

Date: 3 September 1981 03:31-EDT
From: Richard M. Stallman <RMS at MIT-AI>
Subject: A reasonable mode of cooperation under the ITS file system?
To: JONL at MIT-MC
cc: PHW at MIT-AI, JM at MIT-MC, RZ at MIT-MC, MOON at MIT-MC,
    MACSYMA-I at MIT-MC

Although GJC was probably wrong to delete the files, the ITS file
system is not really a factor in this situation.  On systems with file
protection, people working on the same programming tasks would
certainly all have access to the files related to that task, and would
be in a position to delete them just as well as they are on ITS.

This is a real problem, but people should not go away with the
mistaken impression that file fascism would solve it.


Date: 2 September 1981 16:52-EDT
From: Jon L White <JONL at MIT-MC>
Subject: A reasonable mode of cooperation under the ITS file system?
To: JM at MIT-MC, phw at MIT-AI
cc: RZ at MIT-MC, MOON at MIT-MC, MACSYMA-I at MIT-MC, rms at MIT-AI


The "open" file system of ITS has been an immense benefit
in terms of individuals cooperating on major projects, and
only ocasionally is such privilege abused.  I'm sorry to
have to call attention to one such abuse, which appears to
be an ongoing matter, but it is a factor which may have to
be reckoned from time to time.

Many months ago, Rich Bryan, Bob Kerns, and myself discovered
a problem with compiled files of macros which contained "gensymmed"
variables, and instituted a solution about which there is much
discussion in the macsyma-i and lisp-forum mailing lists now.
We've been converting various system files to use the GENTEMP
solution where needed, rather than GENSYM, as we discover them.
Recently I tracked down a MACSYMA user's problem to a random
coincidence between gensym names (which are internned after
FASLOADing, as GENTEMP names are not), and corrected the
two macro files on the LIBMAX directory responsible.

However, Geroge Carrette has disagreed, as per his "challenge" to me:
	Date: 14 August 1981 17:02-EDT
	From: George J. Carrette <GJC at MIT-MC>
	In a bare lisp, do (LOAD "LIBLSP;TTY"), then (DO-WITH-TTY-OFF),
	you get a call to an undefined function: GENTEMP.
	.  .  . Furthermore, I challange you to prove
	why GENSYM is not sufficient for this case. (Excepting
	the bad practice of using read-time-macroexpansion inside
	macros of course.)

Twice, now, without any warning whatsoever, George Carrette has 
deleted from the LIBMAX directory all traces of the corrected files
(which I compiled and tested out on MC and LISPM).  His only mail
concerning the matter was a series of personal insults; after the
first such irresponsible actions I mentioned in a note:
    Date: 1 September 1981 17:27-EDT
    From: Jon L White <JONL at MIT-MC>
    Subject: GENSYM variables in system "macros", and destructiveness
    .  .  .
    Destructiveness:
	Apparently George Carrette not only doesn't understand this
    necessity, but has *deleted* numerous files for which I have made 
    the appropriate substitution.  It has been my understanding that if 
    someone *thinks* he has a better way to solve a problem, he would 
    update a file, with a higher version number -- not merely try to 
    destroy another person's work.
    .  .  .

Is this not a reasonable mode of cooperation under the ITS file
system?  namely that of writing out higher version numbers?
Or is George's position in the MACSYMA group and indeed in this
lab such that he may freely take matters into his own hands?

These "random coincidences of gensym names" are rare, hard to track 
down when then do occur and cause a bug, and almost never caused
on purpose.   MACSYMA users may still be subject to an occasional 
baffling problem if there is no cooperation on the GENTEMP matter.

Date: 1 September 1981 17:27-EDT
From: Jon L White <JONL at MIT-MC>
Subject: GENSYM variables in system "macros", and destructiveness
To: MACSYMA-I at MIT-MC, BUG-LISP at MIT-MC, NIL at MIT-MC


GENSYM variables:  Apparently it has to be re-iterated again about
the danger of using raw gensym variables in automatically-generated 
code, in MacLISP, NIL, or any other lisp system with numeric 
declarations or with global special declarations.

   Many system facilities automatically generate local variables,
sometimes even with numeric declarations.  If your code-writer
(human possibly, but much more likely some automated system) happens 
to chose a symbol of the same pname, you will quite likely come into 
conflict with the scope of the declaration.  This applies to any 
numeric declaration, whether local or global, and to the global 
(SPECIALS T) declaration.  This problem was accurately diagnosed only 
relatively recently by RLB, RWK and myself.

   Slowly but surely, I've been converting automated system
facilities to use some variant of GENTEMP (an as-yet unadvertised
function in the MACAID utility package) -- this involves ** no **
semantic change to any code -- merely the substitution (typically) of
SI:GEN-LOCAL-VAR for GENSYM in certain macros.  These two facilities
ensure that MacLISP (and COMPLR) will treat the variable truly as local, 
even when some other part of the code introduces a variable of the same
pname.  This should reduce the ocasional random coincidences (with
devastating results!) which have sprung up in this realm now and then.  

   The particular tactic taken in GENTEMP is to ensure a variable that
isn't on the obarray.  Another approach has been considered, that of 
providing truly unique names, perhaps incorporating some stamp of 
date-time-location long enough to insure that no two distinct calls 
to the future GENSYM could ever generate the same pname.  Currently, 
that might require pnames of 12 or more characters, so this could
be somewhat of a problem.

Destructiveness:

    Apparently George Carrette not only doesn't understand this
necessity, but has *deleted* numerous files for which I have made 
the appropriate substitution.  It has been my understanding that if 
someone *thinks* he has a better way to solve a problem, he would 
update a file, with a higher version number -- not merely try to 
destroy another person's work.

   GJC's recent suggestion that this problem is only a COMPLR bug 
is sheer and utter nonsense.   User's of his code, including the
MACSYMA-to-lisp translator, may need to be extra-carefully on the
lookout, since he still refuses acknowledge the GENTEMP problem.

   Also his recent note complaining about the msg 
  "WARNING: Function SI:GEN-LOCAL-VAR being illegally defined by file "MC:LIBMAX;MAXMAC"
seen while building a LISPM macsyma displays a total lack of understanding
about what this means -- it is only that the file was compiled in the
macsyma package, but put a macro into the SI package.  It does not signal 
any redefining of a system facility, nor does it cause any bugs or problems 
whatsoever for the running MACSYMA.   Admittedly, it is more in line with 
LISPM protocol to cons up another intermediate name so that the LISPM system 
won't even have to see the name SI:..., and I have just done this for the 
MAXMAC file (indeed any compotent programmer on these mailing lists could 
have done the same).   The rest of his note of 30 August 1981 22:10-EDT  
may be taken as just so much more of the thoughtless flaming for which he 
has become so infamous.

Date: 30 August 1981 22:10-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: SI:GEN-LOCAL-VAR
To: JONL at MIT-MC
cc: MACSYMA-I at MIT-MC

Well, today I decided to create a new version of Macsyma for
the new lispmachine system version 73, and what do I find it
telling me? 

"WARNING: Function SI:GEN-LOCAL-VAR being illegally defined by file "MC:LIBMAX;MAXMAC"

Specific information for JONL:
Do not make changes to the Macsyma system. You obviously don't know what
you are doing. Do not even think about making changes, the system has
many users, and runs on many systems, a complex situation.
You have your hands full already breaking maclisp. Keep out of Macsyma.
I am dead serious.

General information:
[0] As a policy Macsyma does not take upon itself the burden 
    of defining or re-defining functions INTERNAL to the systems it runs on.
    If there are bugs to be made up for, or missing or conflicting functionality
    we do any or all of the following things:
[1] Get the implementors in question to fix the system in question.
    This may mean, for example in the case of Multics Maclisp, becoming
    "de facto" implementors.
[2] Use an EXTRA-LEVEL-OF-ABSTRACTION to make up for it.

JONL, your recent fix was completely without advisement, and violated
principal [0] while ignoring rules [1] and [2].

Tirade:
SI:GEN-LOCAL-VAR is grotesque. 
[1] It is a MACRO which turns into SETQ of its first argument, only because of
    your personal PROG & SETQ coding style. There is absolutely no chance
    that such a thing will be introduced, documented, and supported on
    other systems.
[2] It is useless for MACSYMA since your great "fear" of people
    who might use (DECLARE (SPECIALS T)) is simply unfounded in
    the macsyma compilation environment.
[3] It only makes up for bugs in maclisp GENSYM and FASLOAD,
    which don't effect macsyma anyway. Some COMPLR bugs do effect TRANSL,
    but for those more radical patches are needed.

-gjc

Date: 29 August 1981 21:25-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: JONL at MIT-MC, MACSYMA-I at MIT-MC

After you dump out a new version of macsyma you can
do (LOAD "LIBLSP;DUMPGC")
(SEND-LOCK-MAIL (LIST '(DSK MAXDMP) 'MAXIMA $VERSION))
to update the file LISP;LOCK MAIL. Presumably this
takes the place of updating the file LISP;LOCK >
by hand.

-gjc

Date: 29 August 1981 16:10-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

   Date: 18 Aug 1981 17:49:58-PDT
   From: CSVAX.fateman at Berkeley
   To: gjc@mit-mc
   Cc: MACSYMA-I@MIT-MC
   dsk:share;specfn lisp contains in its entirety:
   ;_____
   ((LAMBDA ($DYNAMALLOC)
      (PRINC '|This file takes a while to load in.  Please be patient./
   |) (LOAD '((DSK MACSYM) SCHATC FASL))
      (LOAD '((DSK MACSYM) SIN FASL))
      (LOAD '((DSK SHARE2) HYPGEO FASL))) T)
   ;___end of file
This file is no more.

    1. Must specfn load schatc and sin AGAIN? Regardless of whether they are
    loaded or not?
Nope.

    2. is hypgeo conditionalized for transportability, included in various
    indexing schemes, etc?
Yep.

Date: 29 August 1981 11:45-EDT
From: Richard J. Fateman <RJF at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

I re-ran integrate (1/(x**3+a*x**2+x),x);  after doing assume(a>2)
on cadr 16.  It is the case that after a few tries, it gets down to
the 1.0 second range, but only if you don't display the answer.  If
you display, the time climbs, to 4.1, 5.9,.. to times of 7 seconds.
Presumably there is a swap penalty for display, which is paid by
the other programs in use.  Does Cadr16 have maximum memory?  How much
(in bytes?).  How does one do a "writefile" to save files?  ( tried
it and got a message to send mail to JPG  (an unimplemented fexpr?).

Date: 28 Aug 1981 16:34:05-PDT
From: ARPAVAX.fateman at Berkeley
To: gjc@mit-mc
Subject: timing on LM
Cc: macsyma-i@mit-mc

concerning the question (a^2-4) pos, neg, or zero, you are right;
I should have realized this.  The strange thing was how reproducible
it was  (within .4 sec) for me to type in "pos", so I overlooked the
fact that some of that time was waiting for me.  Though it seems
unreasonable that it took 13 seconds or so...  Anyway, on the vax,
with assume(a>2), the integration took about 1.03 sec.  I do not
know why ratsimp took longer on the vax, but I suspect it has to
do with a winning/losing GCD algorithm, or maybe out-of-date code
of some sort on the vax.  (LM is probably fresher.)

Date: 27 August 1981 22:13-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
Subject: supdup and macsyma
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC, CSVAX.char at BERKELEY

    Date: 27 Aug 1981 16:01:38-PDT
    From: CSVAX.fateman at Berkeley

    There seems to be a problem (in supdup?) that the ";" doesn't
    get printed until the <cr> is printed, on a macsyma command line.

This is due to buffering by the chaos network.  Immediately after the
"read" in the Macsyma "read-eval-print" loop, there should be a
  (FUNCALL STANDARD-OUTPUT ':FORCE-OUTPUT)
This will be a no-op for normal I/O via the window system.

    I tried integrate(1/(x^3+a*x^2+x),x); took 13.43 secs (about 1.0 sec on VAX)
    diff(%,x) took 0.65 sec (0.23 on vax), ratsimp(%) 6.06 sec (12 sec (2 in gc)
    on vax.<??>  load average was about 12 on vax.).

Did you take initial swap in time into consideration?  Try doing it
several times in succession and average the 2nd to nth tries.  Also,
somebody may have been typing at the machine from the local keyboard.
(The current version doesn't change the local display to show that the
machine is in use via supdup.  This will be fixed in the next version.)

      I noticed poisson series are missing on LM, and also that
    apropos(sum) took an astounding 84.45 seconds to run, and that it
    seemed to be uninterruptible for that period.  

I have never looked at the code for apropos, but apparently it does
character manipulation in a very simple-minded fashion, involving the
MacLisp primitive ASCII.  HIC has a hack to speed it up significantly.
Even better would be for somebody to rewrite it.

      Parsing errors seem to put you in a non-macsyma break, out of which I
    had to type ^z  then (macsyma).

You are not placed in a break at all, rather the message is just printed
the instant the parse error is detected.  If you had typed rubout at
that point, the message and the last character typed would have
disappeared.  Try it.  ** Note: Currently, this will only work if you
are using a video terminal with insert/delete capability. **

      Otherwise, thanks, guys!  

Glad to oblige.

Date: 27 August 1981 20:48-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: INTEGRATE(1/(X^3+A*X^2+X),X);
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC, CSVAX.char at BERKELEY

You say it takes 13.43 seconds? When I try it, it asks a question,
IS(A^2-4>0)? I'm not sure how long it took for me to reply,
probably a few seconds, but when I put in the assumption beforehand
with ASSUME, it takes 1.06 seconds.

I hope you don't spread timings like 13.43 seconds around, because,
well, it could really spoil your reputation for accuracy when
people get a chance to try it themselves.

-gjc

Date: 27 Aug 1981 16:03:14-PDT
From: CSVAX.fateman at Berkeley
To: cwh@mit-mc
Subject: supdup and macsyma
Cc: CSVAX.char@Berkeley, macsyma-i@mit-mc

There seems to be a problem (in supdup?) that the ";" doesn't
get printed until the <cr> is printed, on a macsyma command line.
I tried integrate(1/(x^3+a*x^2+x),x); took 13.43 secs (about 1.0 sec on VAX)
diff(%,x) took 0.65 sec (0.23 on vax), ratsimp(%) 6.06 sec (12 sec (2 in gc)
on vax.<??>  load average was about 12 on vax.).
  I noticed poisson series are missing on LM, and also that
apropos(sum) took an astounding 84.45 seconds to run, and that it
seemed to be uninterruptible for that period.  
  Parsing errors seem to put you in a non-macsyma break, out of which I
had to type ^z  then (macsyma).

  Otherwise, thanks, guys!  

Date: 27 August 1981 00:59-EDT
From: Jon L White <JONL at MIT-MC>
Subject:  Possible problems in Compiled Macro files for MACSYMA's Transl
To: GJC at MIT-MC
cc: BUG-LISP at MIT-MC, GCOOK at MIT-MC, JPG at MIT-MC,
    MACSYMA-I at MIT-MC


Yes, George, I'm aware of the limitation in COMPLR, whereby you can't
nest a local variables with differing declarations.  In fact,
in case it had slipped your notice, that is ****precisely**** one of the
limitations for which GENTEMP had to be invented (but before you go
on, remember that there are ***inherent*** limitations in the local 
declarations scheme which necessitate GENTEMP anyway).  

Still, that isn't GCOOK's problem.

   Date: 26 August 1981 23:08-EDT
   From: George J. Carrette <GJC at MIT-MC>
   JONL, you should know as well as any of us that there are known
   bugs in COMPLR in the handling of LAMBDA binding and declarations.
   These are what show up in GCOOK's code, not lack of using "SI:GEN-LOCAL-VAR"
   . . . 
   Ok, where did the gensym come from? Not from any macros!

Didn't TRANSL generate the code for him with GENSYM names in it?  Or do 
MACSYMA programmers generally use local variable names like G0017 and G0018?

   Take another case: . . . 
   Here your compiler confuses the two names "X" in the DO-LOOP, generating:
   (COMMENT **ERROR**  ((IFIX X) NOT-OF-TYPE FLONUM) 
	  First item in list is an argument somewhere, but is of the wrong 
	  type in function F)

See above comment on "nest"ing of local variables.

   JONL, I really do understand lambda binding, and GENSYM, and GENTEMP,
   so it is foolish for you to play your game assuming otherwise.
   You may go on of course as you wish, but you risk a great deal in doing so.

If you do understand it, then you'll start converting many of your
macros and other automatic-source-code-writers to use SI:GEN-LOCAL-VAR,
or something like it, as appropriate.  Since you haven't . . .

Because it does take the interaction of ***two*** lambda-producing
code writers to get into the binds mentioned above, and since it seems
unlikely that you'll be able to figure out where to get rid of the
GENSYM calls in TRANSL, then I changed one more part of the COMPLR
souce-code-rewriting which was using GENSYM instead of its own version
of SI:GEN-LOCAL-VAR (LOCAL-VAR, which is perfectly adequate and existed 
even before GENTEMP) so that at least GCOOK's problem will go away.

But that won't stop TRANSL's bad interaction with other code writers,
like macro packages etc.

Date: 26 August 1981 23:08-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  Possible problems in Compiled Macro files for MACSYMA's Transl
To: JONL at MIT-MC
cc: BUG-LISP at MIT-MC, GCOOK at MIT-MC, JPG at MIT-MC,
    MACSYMA-I at MIT-MC

JONL, you should know as well as any of us that there are known
bugs in COMPLR in the handling of LAMBDA binding and declarations.
These are what show up in GCOOK's code, not lack of using "SI:GEN-LOCAL-VAR"

Let us look at a simple case:

(defun f (x)
  ((lambda (x)
     (declare (flonum x))
     (times x ((lambda (x)
		 (declare (flonum x))
		 (times x x))
	       x)))
   (sin x)))

It is completely clear what is going on here. It is called LAMBDA BINDING.
But what does the compiler generate? .. have a look...

(COMMENT **ERROR**  (FLONUM G0001) 
		Local declaration occurs too late in function in function F)
; DATA ERROR - TO PROCEED TYPE $P 

Ok, where did the gensym come from? Not from any macros!

Take another case:

(defun f ()
  ((lambda (x)
     (declare (flonum x))
     (do ((x (ifix x) (1+ x))
	  (s x (+$ 1.0 s)))
	 ((= x 10) s)))
   (sin 3.3)))

Here your compiler confuses the two names "X" in the DO-LOOP, generating:

(COMMENT **ERROR**  ((IFIX X) NOT-OF-TYPE FLONUM) 
		First item in list is an argument somewhere, but is of the wrong type in function F)

--

JONL, I really do understand lambda binding, and GENSYM, and GENTEMP,
so it is foolish for you to play your game assuming otherwise.
You may go on of course as you wish, but you risk a great deal in doing so.

-gjc

Date: 26 August 1981 22:24-EDT
From: Jon L White <JONL at MIT-MC>
Subject: Possible problems in Compiled Macro files for MACSYMA's Transl
To: GCOOK at MIT-MC, JPG at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LISP at MIT-MC

I've just compiled your file, which you mention below as causing
troubles (this may be the same problem which JPG found in ADK's
case a couple of weeks ago):
    Date: 26 August 1981 19:55-EDT
    From: "Grant O. Cook, Jr." <GCOOK at MIT-MC>
    I have just uncovered a LISP bug.  The compiler record is
    in GCOOK;JACOBF _UNFA_  where the LISP source is indicated to be
    the translated MACSYMA file GCOOK;JACOBF TRLISP .  It is JACOBIAN_MATRIX
    which is crashing the compiler.
    Having made changes to the names of dummy do-loop indices (to make them 
    unique) when the UMCL compiler failed to work (in the same fashion as 
    indicated in the _UNFA_ file above), and then having it work (but generate 
    code that bombed in MACSYMA: write into read-only memory while in NRECONC),
    it seems that there might be some problem with variable declarations.

Well, I changed the name G0018 to GLOSES0018 and managed to win totally.
After compilation, I noticed that the interned symbol G0018 had a
NUMVAR property indicating that it had been globally declared FIXNUM.
The MACSYMA transl package seems to be picking upon pooor G0018 for
a temporary *non-numeric* variable, and is thus causing the poor COMPLR
to be schrod.

This problem has got to be a manifestation of the compiled macros bug
for which there is a simple solution.  Nowhere in your TRLISP file does
the variable G0018 appear except in JACOBIAN_MATRIX, and it certainly
doesn't do any declarations on it (as I mentioned, changing the name
to something else causes things to win), so some macro package is
managing to snarf this totally random name, and cause it to have
a FIXNUM property (and possibly other properties?).

I sent out a note explaining this problem a couple of weeks ago
as follows:

    Date: 15 August 1981 13:52-EDT
    From: Jon L White <JONL at MIT-MC>
    Subject: LIBDOC;TTY 
    To: GJC at MIT-MC
    cc: BUG-LISP at MIT-MC
	Date: 14 August 1981 17:02-EDT
	From: George J. Carrette <GJC at MIT-MC>
	In a bare lisp, do (LOAD "LIBLSP;TTY"),
	then (DO-WITH-TTY-OFF),
	you get a call to an undefined function: GENTEMP.
    Missing AUTOLOAD property for GENTEMP, which I added to TTY file -- 
    any other "real" usage of TTY would not have been bothered since most
    other files would already have put the AUTOLOAD property.  Probably
    GENTEMP should have an AUTOLOAD property in the initial LISP.
	.  .  . Furthermore, I challange you to prove
	why GENSYM is not sufficient for this case. (Excepting
	the bad practice of using read-time-macroexpansion inside
	macros of course.)
    The availability of local declarations in MacLISP, and of the compiler 
    switch  SPECIALS  which makes all user variables special -- unless properly 
    constructed with SI:GEN-LOCAL-VAR as in the TTY file --  means that system 
    facilites ** must not ** depend upon GENSYM.

    The "cross-talk" of local declarations between 'gensym'd variables used by 
    compiled macros can occur in the TTY file during usages of the  
    DO-WITH-TTY-insomestate  macros which are embedded in other macros usages;
    and also subsequent macros can occur in the code incorporated by the line
	      ,@(CDR X))
    of the DO-WITH-TTY-insomestate macros.  

    The all-specials problem is ever-present

    If you still don't understand why GENSYM is buggy under these conditions, 
    you'd better talk to someone who does before taking matters into your own 
    hands.

Well, GJC apparently didn't listen to the reply to his "challenge"
but instead sent out a vituperative on some irrelevant subpart thereof.
Too bad, since it is probably the failure of some of his code to use 
SI:GEN-LOCAL-VAR (as opposed to GENSYM) which has caused all this problem.

Date: 26 August 1981 17:07-EDT
From: Jon L White <JONL at MIT-MC>
Subject: Change-over of LISP^K
To: MACLISP-INFO at MIT-MC
cc: MACSYMA-I at MIT-MC

XLISP, version 2122, has now become LISP, and a new COMPLR,
version 1122 (quite coincidentally!) has been dumped out.

Date: 25 August 1981 14:08-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: MATHLAB at MIT-MC, MACSYMA-I at MIT-MC

The announcement of the availability of a supdup server on the
Mathlab/Plasma Lisp Machines was somewhat premature.  The code is still
buggy.  Use it at your own risk.

Date: 25 August 1981 14:08-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: MATHLAB at MIT-MC, MACSYMA-I at MIT-MC

The announcement of the availability of a supdup server on the
Mathlab/Plasma Lisp Machines was somewhat premature.  The code is still
buggy.  Use it at your own risk.

Date: 25 August 1981 02:01-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: Macsyma on Lispmachines, for use by SUPDUP.
To: MATHLAB at MIT-MC, MACSYMA-I at MIT-MC
cc: CE at MIT-MC, ELL at MIT-MC, RHB at MIT-MC, BERS at MIT-MC

The Mathlab/PlasmaPhysics Lispmachines both have working macsyma's,
and *now* they have working supdup servers, which means that anyone
on the NET can connect to them and run macsyma [oh joy of joys]. 
The lispmachine macsyma has features not available on other machines,
(that is until NIL macsyma is brought on-line).
[1] A new parser, which reads from a rubout-handler that has screen-editing
    commands, makes input a lot easier.
[2] A DISPLAY-EDITOR, which makes it easier to do subtle simplifications.
[3] An in-core macsyma translator and lisp compiler, makes it faster and
    easier to run large macsyma programs.
[4] Large address space and lots of core, makes some problems run
    faster than on MC. (Did I say *faster* than our beloved KL-10? Yes, I did.)
    Some things run slower of course, have fun trying your favorite problem.
-gjc

p.s.
:SUPDUP CADR16
or
:SUPDUP CADR15

Date: 23 August 1981 22:27-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: #.(CHAR-LIST-SYNTAX-ON)
To: MACSYMA-I at MIT-MC

The use of this has been removed from the GRIND package.

Date: 18 Aug 1981 17:49:58-PDT
From: CSVAX.fateman at Berkeley
To: gjc@mit-mc
Subject: last ? word
Cc: MACSYMA-I@MIT-MC

For you bystanders, dsk:share;specfn lisp contains in its entirety:
;_____
((LAMBDA ($DYNAMALLOC)
   (PRINC '|This file takes a while to load in.  Please be patient./
|) (LOAD '((DSK MACSYM) SCHATC FASL))
   (LOAD '((DSK MACSYM) SIN FASL))
   (LOAD '((DSK SHARE2) HYPGEO FASL))) T)
;___end of file
 the main problems do not have to do with the file naming, illogical
 as that may be.
 More important questions include:
 1. Must specfn load schatc and sin AGAIN? Regardless of whether they are
 loaded or not?  Is there something used without appropriate autoloading?
 2. is hypgeo conditionalized for transportability, included in various
 indexing schemes, etc?

I do not know the answer to either one, for sure.



Date: 18 August 1981 19:24-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

  From: CSVAX.fateman at Berkeley
  To: gjc@mit-mc
  Subject: Specfn

  Does this work on Lisp Machine, Multics, Tops-20?
  If so, I would be somewhat surprised.

The SPECFN LISP file on SHARE loads programs written in maclisp.
SIN and SCHATAC already run on the lispmachine and Multics.
The other program only needs the standard macsyma-module header
to compile for those systems.

TOPS-20 Maclisp is so compatible with ITS maclisp that it
isn't even reasonable to consider it a different system.
Seriously, FASL files ship directly from one site to another!
Handling of TERMINALs with CURSORPOS is also compatible when
the MIT-hacked version of TOPS-20 is used.
Furthermore, if I install a fix in the LOAD command that I wrote,
people can even use ITS filenames on TOPS-20, and TOPS-20 filenames
on ITS. The conversion from one to the other is trivial
  "DSK:FOO;BAR BAZ" <=> "DSK:<FOO>BAR.BAZ"
So don't get your hopes up that transportation to TOPS-20 is difficult.
Personally, I wouldn't mind if MC switched from ITS to TOPS-20 tomorrow.

The lispmachine can and does parse ITS, TOPS-20, and MULTICS
filenames, you can use whatever combination of these you need.

How can I be more specific? This is a non-issue, please don't
bother me anymore.

-gjc

Date: 18 August 1981 17:35-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.FATEMAN at MIT-MC
cc: MACSYMA-I at MIT-MC

You will go through the trouble of making it work for us?
Great. Don't you get the point, it already does work for
us, it is a non-problem, typical of the fluff you generate.

-gjc

Date: 18 Aug 1981 13:33:48-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Subject: non-portability of share code.
Cc: macsyma-i@mit-mc

	
	Anything worth transporting will be transported. Period.
This sounds suspiciously like a tautology.
Like "Anything worth having is in SMP".
	If you can't figure out how to do it then its not our problem its yours.
If I figure out how to do it (and I generally can), then it may still be
your problem, too, unless I go to the trouble of making it work for you too.

	

Date: 18 August 1981 15:32-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  non-portability of share code.
To: CSVAX.fateman at BERKELEY
cc: CWH at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC,
    CSVAX.jkf at BERKELEY

    Date: 17 Aug 1981 22:48:59-PDT
    From: CSVAX.fateman at Berkeley
    To:   cwh, gjc, jpg
    cc:   CSVAX.jkf at Berkeley
    Re:   non-portability of share code.

    There is a lot of unportable file system dependencies;  for example,
    many share files are only in fasl form.  But I think share;specfn lisp
    is probably a bit silly.
    How is this going to work on tops-20, vax unix, vax vms, multics, lisp machine,
    and NIL ?

Anything worth transporting will be transported. Period.
We have sufficiently powerful tools available to trivialize these problems.
The methods have worked in the past.
If you can't figure out how to do it then its not our problem its yours.

-gjc

Date: 18 August 1981 07:47-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC, SJK at MIT-MC

The Tops-20 MACSYMA on MIT-XX now does rubout-processing.

Date: 12 August 1981 05:47-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 08/11/81 16:48:34
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   The call to NAMESTRING in the function LOAD-FILE should be a call to 
   TO-MACSYMA-NAMESTRING.  This is so that $LOAD will not do any further 
   STRIPDOLLARING.
has been done.

Date: 11 August 1981 16:48-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

The call to NAMESTRING in the function LOAD-FILE should
be a call to TO-MACSYMA-NAMESTRING. This is so that $LOAD
will not do any further STRIPDOLLARING.

Date: 3 August 1981 13:56-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JONL at MIT-MC
cc: BUG-LISP at MIT-MC, MACSYMA-I at MIT-MC

    From: Jon L White <JONL>

    This may be a moot point since both versions of UMLMAC, 33 and 34,
    were installed for only a short time, and have not been current
    for many days.

JONL, lying never helps. "UMLMAC 33" was installed for four days,
until you were told that you were not the file-author, whereupon
you quickly wrote out and installed "UMLMAC 34," which stood
installed, also for four days. "UMLMAC 35" the good version
you finally got from GSB, and which was not derived by you
from "UMLMAC 34," has been installed for a grand total of four days.

Can you explain to us how "four days" can be both "only a short time"
and "many days."

-gjc


Date: 3 August 1981 11:52-EDT
From: Jon L White <JONL at MIT-MC>
Subject:  Please stop wasting all our time
To: GJC at MIT-MC
cc: BUG-LISP at MIT-MC, MACSYMA-I at MIT-MC

You deleted the relevant part of the following msg, namely "YOUR PROFANITY",
       From: Jon L White <JONL at MIT-MC>
       I didn't read that note.  Is that all you sent?
    You didn't read the note. Very nice. So you want me
    to send something else, even though you were complaining . . .
Furthermore, I sent my note about LSB's SELECTQ to RWK, since I was replying 
to his comments, ** not your comments **.

Date: 3 August 1981 11:51-EDT
From: Jon L White <JONL at MIT-MC>
To: BUG-LISP at MIT-MC
cc: MACSYMA-I at MIT-MC

Has anyone on these two mailing lists either observed the
behaviour alleged by GJC below, or been inconvenienced by it?
This may be a moot point since both versions of UMLMAC, 33 and 34,
were installed for only a short time, and have not been current
for many days.
    Date: 3 August 1981 11:41-EDT
    From: George J. Carrette <GJC at MIT-MC>
    . . .
    Before JONLism: "MC:LSPSRC;UMLMAC 33"
    (selectq x (a b)) ==> (COND ((EQ X 'A) B))
    After JONLism: "MC:LSPSRC;UMLMAC 34"
    (selectq x (a b)) ==>
       (AND (EQ (TYPEP X) 'SYMBOL) (COND ((EQ X 'A) B)))
    Just what are people to think when you replace good
    code with this kind of junk? Are we to say, well, it
    is "adequately efficient?" [your term]


Date: 3 August 1981 11:41-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JONL at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LISP at MIT-MC

   From: Jon L White <JONL at MIT-MC>
   I didn't read that note.  Is that all you sent?

You didn't read the note. Very nice. So you want me
to send something else, even though you were complaining
about clogged mail files. Ok, in the interests of others I'll
provide the smallest example: [Note: all examples are from
installed system code.]

Before JONLism: "MC:LSPSRC;UMLMAC 33"

(selectq x (a b)) ==> (COND ((EQ X 'A) B))

After JONLism: "MC:LSPSRC;UMLMAC 34"

(selectq x (a b)) ==>

   (AND (EQ (TYPEP X) 'SYMBOL) (COND ((EQ X 'A) B)))


Just what are people to think when you replace good
code with this kind of junk? Are we to say, well, it
is "adequately efficient?" [your term]

-gjc

Date: 3 August 1981 10:31-EDT
From: Jon L White <JONL at MIT-MC>
Subject: Profanity
To: GJC at MIT-MC
cc: BUG-LISP at MIT-MC, MACSYMA-I at MIT-MC

I didn't read that note.  Is that all you sent?

Date: 3 August 1981 10:20-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  SELECTQ efficiency?
To: JONL at MIT-MC
cc: BUG-LISP at MIT-MC, MACSYMA-I at MIT-MC

JONL, you said you never read my note, so why are you now asking
for more examples of your lossage? Furthermore, you haven't
answered the $60,000 question, "why did you replace installed
code with inferior code?"

As for clogging up the mail, I assure you, answer the questions
and the issues will resolve themselves.


Date: 3 August 1981 10:09-EDT
From: Jon L White <JONL at MIT-MC>
Subject:  SELECTQ efficiency?
To: GJC at MIT-MC
cc: BUG-LISP at MIT-MC, MACSYMA-I at MIT-MC

    Date: 2 August 1981 11:59-EDT
    From: George J. Carrette <GJC at MIT-MC>
    . . . 
    That fact that you were later able to get a more winning version
    from GSB does not support redemption. [Seriously folks, name any
    feature in maclisp, and you can get a more winning version from GSB.
    . . .]
Since LSB'S SELECTQ, which I corrected for minor bugs,  *never*  had any 
bugs in the installed version, and was adequately efficient even in its 
middle versions, then can you explain why you should clog all our mail 
files with these continuing complaints? 

I shouldn't be surprised if someone could find a case that, ** even
now **, could be slightly improved.

Date: 2 August 1981 11:59-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: SELECTQ
To: JONL at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LISP at MIT-MC

Since you have chosen to enlarge this disscusion to include
Macsyma-I, I might as well lay it on the line.

Your big problem JONL is a cavalier attitude that you
can do as you please, releasing untested and inferior software
upon maclisp users. Let us look carefully at your latest complaint:

"By the bye, GSB was actively hacking the SELECTQ macro of LSB,
and it had none of the faults or inefficiencies that GJC alleges.
He merely looked at the results of an intermediate version."

On the contrary, I was looking at the results of a version that
was *installed* system code. You installed it. To say that it
was "intermediate" is admission of guilt.

The reason I took the time to write a SELECTQ macro
and install it into maclisp was so that reasonable software
would be available to (amoung other systems) macsyma.

The reason you had for deinstalling my version, installing
what you knew to be inferior software, and leaving it
in that "intermediate" state for four days, is something only you know.
That fact that you were later able to get a more winning version
from GSB does not support redemption. [Seriously folks, name any
feature in maclisp, and you can get a more winning version from GSB.
Its what comes from thoughtfull consideration of the issues without
the rush to install new hacks.]

-gjc

Date: 1 August 1981 15:05-EDT
From: Jon L White <JONL at MIT-MC>
Subject: Who says, "gratuitous"?
To: RWK at MIT-MC
cc: GJC at MIT-MC, CWH at MIT-MC, GSB at MIT-MC, ALAN at MIT-MC,
    KMP at MIT-MC, BUG-LISP at MIT-MC, MACSYMA-I at MIT-MC

    Date: Monday, 27 July 1981, 10:13-EDT
    From: Robert W. Kerns <RWK at MIT-MC>
    Subject: Penultimate  pain-in-the-ass
    To: JONL at MIT-MC
    Why do you feel this irresistable compulsion to make gratuitous changes?  
    Please restore the SELECTQ to use GJC's winning version.

LSB's SELECTQ is much more a winner.  Just because GJC's version is more
limited is no reason for you, too, to try your hand at insults.

The LSB version, (the one in UMLMAC) is extensible, with current setting 
to limit datatype, just as the LISPM does.  Contrary to what was alleged
earlier, there never has been any "incompatibility" with the LISPM, but 
merely the potential extension.  You see, there are many of us who don't 
simply take the LISPM-implementation of SELECT/SELECTQ as the forever-fixed 
definition;  it should be extended to work for other data types.

By the bye, GSB was actively hacking the SELECTQ macro of LSB,
and it has none of the faults or inefficiencies that GJC alleges.
He merely looked at the results of an intermediate version, and
I didn't bother reading his flame due to its obvious profanity.

Date: 29 July 1981 15:43-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC

You can now *THROW out of DISPLA, so you may want to make
some changes in the #^S interrupt function, and put a *CATCH
or two in the proper places in SUPRV.


Date: 28 July 1981 11:44-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

    From: Jeffrey P. Golden <JPG>
       GJC@MIT-MC 07/26/81 22:13:36 Re: Macsyma binding of variables.
       ... good reasons to not use this MPROGV form?
    ... I guess the way to know for sure if you are interested
    in pursuing this is for you to at least hack up a version of
    MLISP using your scheme, placing all 
    changes on the MAXDEV; directory and then we can try it out.

Will do. I added a MBINDING to Maxmac. It will conditionaly expand
into PROG2, UNWIND-PROTECT, or PROGV.


Date: 28 July 1981 11:15-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I ground MEVAL1 specifically for the VT-52 screen, in fact I was
sitting at your terminal for good luck when I did it.
I agree with "saves GJC much time," but only because I'm the only
person that has to hack MEVAL using what EMACS provides.
There is a good bit of complicated control structure I have to
unwind in order to conditionalize out the DSK-SAVING stuff from
the evaluator. [The evaluator checking for expressions that have
been saved onto "DSK"] Doing this without changing the semantics
accidentally takes a steady-hand [so to speak], and GRINDING is
a good brace for the hand.

-gjc

Date: Tuesday, 28 July 1981, 10:13-EDT
From: Robert W. Kerns <RWK at MIT-MC>
Subject: ERRSET
To: CSVAX.fateman at Berkeley
Cc: GJC at MIT-MC, MACSYMA-I at MIT-MC
In-reply-to: The message of 27 Jul 81 14:04-EDT from CSVAX.fateman at Berkeley

    Date: 27 Jul 1981 11:04:51-PDT
    From: CSVAX.fateman at Berkeley
    To: GJC@MIT-MC
    Subject: ERRSET
    Cc: MACSYMA-I@MIT-MC

    you seem to be implying that maclisp and Franz have free will,
    but exercise it only .01% of the time, and NIL and LM Lisp
    exercise it 2% of the time.
Whatever that means.
    The 1.99% of the time that NIL does something different from maclisp
    might be considered a bug.  To quote from the NIL project summary
    (DOE Summaries of 1980 Research in Applied Mathematical Sciences)
    p 18:
    "This is a continuing task to implement a version of the MACLISP
    dialect of the LISP language on computers with large address spaces..."

    I do not even see this as controversial.  

This isn't controversial at all.  GJC is saying "Let's fix losing MACSYMA,
rather than force NIL to support a misfeature that should never have been
introduced into MacLisp in the first place".

    I do not presently own or anticipate owning a Lisp machine, and do
    not have strongly held opinions on it.
    Neither do I anticipate using ERRSET on NIL or Franz for any
    serious purpose.

ERRSET is quite reasonable to use in the apropriate circumstance, and of
course NIL supports it.  CATCH-ERROR is the more modern equivalent,
using multiple-values instead of doing consing, but there are no
semantic bugs in the semantics of ERRSET.  This is not true of ERRLIST,
however.  ERRLIST is a crock that should never have been implemented.
Even TECO had UNWIND-PROTECT long before MacLisp.  Demanding that NIL
implement ERRLIST is like demanding that we make (GET <symbol> 'SUBR)
return the contents of the function cell, if and only if it is a
function of a constant number of arguments, 5 or fewer in number.
If we were to implement it, somebody might USE it, which as MACSYMA
clearly shows, would be a serious mistake.

Date: 28 July 1981 09:37-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 07/26/81 15:20:02 Re: MEVAL1
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   Lispm specific conditionalize have been removed from this
   function, making it considerable more readable. I hope it
   is possible to keep the grinding as I left it in the
   lisp-machine style now supported by ITS Emacs, it saves
   much time and increases maintainence confidence and reliability.
Well, I'm not going to go out of my way to change the grinding until 
I think I need to, but I think what you mean is "saves GJC much time"
etc.  Overall, I think your grinding will cost some time as I look 
at the function more than you do, and given my style of work with losing 
VT52 screens and offline with listings (I do much more work offline than 
you do), I like to have as much code that can fit on a single screen or a  
single page of Dover output with clarity (a subjective notion) as I can get.

Date: 28 July 1981 09:15-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 07/26/81 22:13:36 Re: Macsyma binding of variables.
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   I can easily change the few places in Macsyma that do
   (PROG2 (MBIND VARS VALS NIL) (FROBULATE) (MUNBIND VARS)) 
   to use (MPROGV VARS VALS ....), with MPROGV a macro expanding into
   either an UNWIND-PROTECT or a PROGV. I'm sure this will be less work
   for me than hacking a fake ERRLIST scheme for NIL. Are there any
   good reasons to not use this MPROGV form?
As you say, what bugs there are with the present scheme are easily fixed.
E.g. F(X):=RETURN(X)$ BLOCK(F(1)); works and errs out, so we know DO(F(1)); 
can at least be fixed the same way.  (And I will at least do that.)
Similarly for the other problems.
What I believe argues against an MPROGV scheme for the PDP10 is the lack 
of sufficient pdl when handling recursive user functions.  I guess the 
way to know for sure if you are interested in pursuing this is for you 
to at least hack up a version of MLISP using your scheme, placing all 
changes on the MAXDEV; directory and then we can try it out.

Date: 27 Jul 1981 11:04:51-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Subject: ERRSET
Cc: MACSYMA-I@MIT-MC

you seem to be implying that maclisp and Franz have free will,
but exercise it only .01% of the time, and NIL and LM Lisp
exercise it 2% of the time.

The 1.99% of the time that NIL does something different from maclisp
might be considered a bug.  To quote from the NIL project summary
(DOE Summaries of 1980 Research in Applied Mathematical Sciences)
p 18:
"This is a continuing task to implement a version of the MACLISP
dialect of the LISP language on computers with large address spaces..."

I do not even see this as controversial.  

I do not presently own or anticipate owning a Lisp machine, and do
not have strongly held opinions on it.
Neither do I anticipate using ERRSET on NIL or Franz for any
serious purpose.


Date: 27 July 1981 13:29-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  ERRSET
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    From: CSVAX.fateman at Berkeley

    If someone uses ERRSET and its ilk in a program, and avoids *catch
    and its ilk, the program should work in maclisp or NIL.   If it
    works in maclisp and not in NIL, then, in my opinion, NIL is broken.

Nobody can avoid using *CATCH and its ilk in either Lispmachine lisp,
NIL, or even Maclisp, because the SYSTEM (or other programs calling
the "program" in question) uses *CATCH for things such as punting to
toplevel and error-retry.

Some programs may very well work 99.99% of the time 
in maclisp or Franz under these conditions, yet only
98% of the time in NIL or LispmLisp. What would be your opinion
in that case, still think it is a bug in NIL?

-gjc

Date: 27 Jul 1981 09:24:05-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Subject: ERRSET
Cc: MACSYMA-I@MIT-MC

If someone uses ERRSET and its ilk in a program, and avoids *catch
and its ilk, the program should work in maclisp or NIL.   If it
works in maclisp and not in NIL, then, in my opinion, NIL is broken.
It would be perhaps appropriate to give a compiler message when using obsolete
facilities.

I believe I understand the historical context.

Date: 27 July 1981 12:13-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: ERRSET
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

Why don't you realize that ERRSET/ERRLIST simply DOES NOT WORK
in combination with the new *CATCH/*THROW/UNWIND-PROTECT features
added to the languages long after ERRSET/ERRLIST was implemented.

I would love a straight answer to the above from you, do you or
do you not understand the ERRLIST problems in historical context?

-gjc

Date: 27 Jul 1981 08:29:32-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Subject: meval1
Cc: MACSYMA-I@MIT-MC

q2: errset and errlist in NIL.  I noticed that you could hack it compatibly.
So why mention it at all? It would seem to be a criticism of NIL that it
was not hacked by the implementors who are supposed to be doing an upward
compatible maclisp for large address space machines.

I doubt that people would easily be able to understand the semantics
of meval if it requires reading Lisp code.

Date: 27 July 1981 10:20-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  Macsyma binding of variables. A reply to your note.
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

Q1: macsyma / pascal /lisp.
A1: I don't know about this actually.
Q2: ERRSET and ERRLIST in NIL.
A2: I said I could hack it compatibly, you obviously didn't read the note.
Q3: Changing the language definition.
A3: I'm not talking about changing the semantics of MEVAL,
    I'm talking about changing a minor IMPLEMENTATION detail.

As for "noone understands them now," well, I bet that if I broke
up MEVAL1 into 3 or 4 small mutually recursive functions instead
of the huge PROG with 3 go-tags it is now, then people would easily
be able to understand the semantics.


Date: 26 Jul 1981 22:47:40-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Subject: Macsyma binding of variables.
Cc: macsyma-i@mit-mc

1. If macsyma is to be more like Pascal than Lisp, there should
be a unified notion of what is involved.  I do not care for a piecemeal
approach to redefining macsyma semantics (even if noone understands them
now), in response to the needs of translation, and now NIL. What do
you REALLY want?  But see 3. below

2. ERRSET and ERRLIST not being in NIL? Why not?  You could have a
maclisp compatibility package including this.

3.  I propose that we stabilize on something here and now, write up
the documentation, and call the system "Macsyma 81".  Then if MIT, UCB,
or GJC, or Macsyma (Un?)Incorporated change things, they can call it
something else, but others can refer back to Macsyma 81.  Compare,
for example, Fortran 66, 77, etc; Algol 58, 60, 68; 
The current situation, which is basically that the definition is
determined by the last person to hack the code, is inappropriate when
a system is implemented in more than one place or on more than one
machine, and the facilities for coordination are less than ideal.
What do you think?


Date: 26 July 1981 22:13-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: Macsyma binding of variables.
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

In looking over the MLISP code to decide what has to been
done to convert it for NIL I was wondering what the issues were,
involving the use of the ERRSET/ERRLIST method of variable binding,
as opposed to PROGV method.

Here are some problems:

[1] NIL won't have ERRSET,ERRLIST, although it could be faked.
[2] ERRSET/ERRLIST had *never* worked in MLISP as far back as I
    can remember anyway. For example, there is the very elementary
    bug illustrated thusly: X=> Unbound; F(X):=RETURN(X); DO(F(1));
    You will noticed that X is no longer unbound.
[3] I assure you that the problem illustrated above can be patched,
    but there are an infinite class of such bugs just waiting to happen,
    involving subtle interactions of SUBSTITUTE and user-defined
    simplication rules, matrix-multiplication, SIGN, COMPARE,
    and other areas of Macsyma.
    Any code using *CATCH, ERRSET, or UNWIND-PROTECT may be suspect.

I can easily change the few places in Macsyma that do
(PROG2 (MBIND VARS VALS NIL) (FROBULATE) (MUNBIND VARS)) 
to use (MPROGV VARS VALS ....), with MPROGV a macro expanding into
either an UNWIND-PROTECT or a PROGV. I'm sure this will be less work
for me than hacking a fake ERRLIST scheme for NIL. Are there any
good reasons to not use this MPROGV form?

-gjc

Date: 26 July 1981 15:20-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: MEVAL1
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

Lispm specific conditionalize have been removed from this
function, making it considerable more readable. I hope it
is possible to keep the grinding as I left it in the
lisp-machine style now supported by ITS Emacs, it saves
much time and increases maintainence confidence and reliability.

-gjc

Date: 25 July 1981 14:27-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: CFFK at MIT-MC, MACSYMA-I at MIT-MC

Under normal conditions two MCL's shouldn't interfere,
but if there was some kind of error, who knows. Depends
a lot on the error, I think the error in this case
was the locking mechanism. i.e. the locking mechanism has
to be manually recoverable by returning correctly from
the I-O-lossage break of the FILE-NOT-FOUND error.

I think that since this was such a rare event CWH
didn't design in a more automatic mechanism.
From the file reference date I think an MCL I was running
locked out the data-file at exactly the time CFFK's wanted it,
too bad he didn't stop and report this as a bug the second
it happened.

-gjc

[Did I make this clear? The FILE-NOT-FOUND error *is* the *interlock*]

Date: 25 July 1981 09:17-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC
cc: CFFK at MIT-MC, GJC at MIT-MC

How MAXDOC;DCL VARS had gotten clobbered:  (Sigh!)
   CFFK@MIT-MC 07/24/81 21:48:54 Re: DCL VARS
   To: GJC at MIT-MC, JPG at MIT-MC
   I guess this happens when I was running 2 MCL's.  1 of them
   hit an error saying it couldn't find this file.  I run MCL
   again on that file (the other MCL had finished), and there
   was no error.  I assumed things had corrected themselves.
   If it's right that MCL's interfere with one another
   some interlock mechanism should be thought up.
   Sorry about the inconvenience.

Date: 24 July 1981 18:43-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC, CFFK at MIT-MC

   GJC@MIT-MC 07/24/81 17:11:09
   To: JPG at MIT-MC
   CC: CFFK at MIT-MC, MACSYMA-I at MIT-MC
   Great. The file Maxdoc;DCL VARS was somehow bashed. File-author
   was CFFK.
Working file retrieved from tape (by CWH).
   Boy does this mess up the software, I hope you didn't
   compile many files while things were in this state.
I wasn't even logged in.

Date: 24 July 1981 17:11-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: CFFK at MIT-MC, MACSYMA-I at MIT-MC

Great. The file Maxdoc;DCL VARS was somehow bashed. File-author
was CFFK. Boy does this mess up the software, I hope you didn't
compile many files while things were in this state.

-gjc

Date: 23 July 1981 02:19-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: MACSYMA-I at MIT-MC

We are getting ready to make a Lisp Machine Macsyma to take to Symsac.
I would like to request any sweeping, global changes to the system be
made after August 5.  Please help keep the system as stable as possible
between now and that date.

Just as a general reminder:  Remember that Macsyma runs (or at least
tries to run) on several different computers now.  When making changes
to the code, keep transportability in mind.  Thanks.

Date: 22 July 1981 15:08-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I put in a check to signal "** Error while printing error message **"
Nobody has needed this yet, but they may.

Date: 17 July 1981 11:54-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: FSUBRS/FEXPRS
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I have changed every macsyma special form definition to use
DEFMSPEC instead of DEFUN FEXPR. You will find that this BREAKS
the code for $EV, as it does (GETL X '(FEXPR FSUBR)) in some
places along with (GET X 'EVOK). 

Note: This code was most obviously broken on the LISPM and FRANZ too!
      [Not unless Franz uses FEXPR properties. I thought it didn't.]
      But now you can change it to do (GET X 'MFEXPR*) and be universally
      correct.


The changes made to MEVAL1 for the LISPM are a real hack job.
So, if you could change MEVAL1 to use a predicate 
(DEFUN APPLICABLE? (F)
  (IF (ATOM F) 
      (OR (ARRAYP F)
          (AND (SYMBOLP F)
               (GETL F '(EXPR SUBR LSUBR))))
      (EQ (CAR F) 'LAMBDA)))

to decide if something is lisp callable, then the code for
both the LISPM and NIL would be considerably cleaner. In fact,
the only difference would be in this one little predicate.

-gjc


Date: 16 July 1981 19:00-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 07/16/81 15:11:52 Re: $TIME
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   The function $TIME is defined in both SUPRV and MRG;METER.
   None of the functions in METER have either AUTOLOAD properties
   or DESCRIBE entries. As far as I can tell the package is not
   a supported part of macsyma. Do you think this is the case?
Yep, t'is true.  I removed METER from MAXDOC;FILES > & FASL.

Date: 16 July 1981 15:11-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: $TIME
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

The function $TIME is defined in both SUPRV and MRG;METER.
None of the functions in METER have either AUTOLOAD properties
or DESCRIBE entries. As far as I can tell the package is not
a supported part of macsyma. Do you think this is the case?

-gjc

Date: 15 July 1981 17:17-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: Maxdoc;Files >
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I have added the complete SPLITFILE information to this
database so that Maxtul can conveniently be used to
index FASL files. -gjc

Date: 15 July 1981 13:35-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: MAXPRIME.
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

Now that BIL has let the cat out of the bag with respect to what we
do with PRIME number tables in the privacy of our own computer,
I might as well shed some like on the derivation of MAXPRIME.

Imagine you calculated the table with a seive implemented as
a maclisp FIXNUM array as big as would fit on the pdp10.	
The PDP-10 has 18 bits which to address words of 36 bits.

LOG2(36)+18           = 23.17
LOG2(PRIME(MAXPRIME)) = 22.79

Looking at it another way (in a bare lisp),
(* 36. (status memfree))  = 7262208.
PRIME(MAXPRIME)           = 7199921.

You might very well want a different size table on a VAX.

-gjc

ASB@MIT-MC 07/15/81 10:52:35 Re: MATCOM
To: GJC at MIT-MC
CC: ASB at MIT-MC, JPG at MIT-MC, (FILE [MAXDOC;MAIL IMPLEM]) at MIT-MC
    GJC@MIT-MC 07/14/81 22:03:22 Re: MATCOM
    In looking over MATCOM for translate_file compatibility
    I noticed that SAVEing TELLSIMP's doesn't really work when
    the COMPOSITION of TELLSIMP's is concerned. That is,
    you may do a sequence of TELLSIMP(...); TELLSIMP(...); for
    a certain operator "FOO", and then call SAVE, and this
    will save the state at the time. However if you LOAD the saved
    file on top of an environment with TELLSIMP's already in it
    then these will be thrown out, and you will not get the
    composition of TELLSIMP rules that you would get normally,
    by simply BATCHING in the TELLSIMP's.

    I don't really know which way to handle this for translate_file,
    I could be compatible with BATCH by moving the composition-making
    code from MATCOM to MATRUN, or I could more easily by compatible
    with SAVE, and simply catch things at the PUTPROP level.

    I am opting for the easier second choice, as this is what you now
    seem to want, and the lifetime of the relatively small amount of
    code in MATCOM is uncertain.
Fine, that's what I would want.  As long as all tellsimp's are in one
file, there is no problem.


GJC@MIT-MC 07/14/81 22:03:22 Re: MATCOM
To: ASB at MIT-MC
CC: JPG at MIT-MC, (FILE [MAXDOC;MAIL IMPLEM]) at MIT-MC, GJC at MIT-MC
In looking over MATCOM for translate_file compatibility
I noticed that SAVEing TELLSIMP's doesn't really work when
the COMPOSITION of TELLSIMP's is concerned. That is,
you may do a sequence of TELLSIMP(...); TELLSIMP(...); for
a certain operator "FOO", and then call SAVE, and this
will save the state at the time. However if you LOAD the saved
file on top of an environment with TELLSIMP's already in it
then these will be thrown out, and you will not get the
composition of TELLSIMP rules that you would get normally,
by simply BATCHING in the TELLSIMP's.

I don't really know which way to handle this for translate_file,
I could be compatible with BATCH by moving the composition-making
code from MATCOM to MATRUN, or I could more easily by compatible
with SAVE, and simply catch things at the PUTPROP level.

I am opting for the easier second choice, as this is what you now
seem to want, and the lifetime of the relatively small amount of
code in MATCOM is uncertain.

e.g. The code MATCOM produces cannot be compiled, is very
large for doing the TELLSIMP-rule composition (should really
use some kind of FUNARG or closure for that purpose, yes, maclisp
has then, in any case it would be a trivial change to SIMPLIFY
to generalize the one FUNCALL it has to be FUNCALL-AND-THEN-SOME).

-gjc

Date: 13 July 1981 05:02-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

I moved the setting up of $MAXPRIME from ASUM to NUMTH.

Date: 12 July 1981 23:05-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

Oops. I messed up that MAXPRIME thing. Indexed from 0 to N-1,
so replace "1+" with "1-" in my previous note.

Date: 12 July 1981 12:53-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

    From: Jeffrey P. Golden <JPG>

    I noticed you replaced (ARRAY LINEARRAY T 80.) in MRG;DISPLA > by 
    (INITIALIZE-LINEARRAY) where the latter is defined by a macro in 
    LIBMAX;DISPLM > .  (INITIALIZE-LINEARRAY also does the compiler 
    declaration.)  

Yes. The change was made for the sake of PDP-10, NIL and LISPM.
Note that DISPLA does a WITHOUT-INTERRUPTS on the PDP-10 when in
the output phase. This is because that stage is not re-entrant
due to the use of a global LINEARRAY. Locking out interrupts
during display can be nasty, no need for me to go into the ramifications.
Anyway, the idea is that INITIALIZE-LINEARRAY will expand into
something else in the future, with the introduction of a BIND-LINEARRAY
macro which will fix these problems on all systems.

    I suppose you made this change for the sake of NIL and possibly LISPM.
    How many such ARRAY setups are you intending to change in this way?

This is a special case. Introduction of a more general DEFRESOURCE type
mechanism (see LISPM doc), will allow this to look more standard.
Anyplace which calls *REARRAY is a candidate for this treatment.

    Also, I don't like the idea of moving useful info such as the dimensions 
    from the source file into a macro file especially when you haven't 
    changed the dimensionality any.  I think such info more properly belongs 
    in the source file.

One couldn't possibly read the source code without first reading
the macro file. I consider them to be the part of the same
structure, as the "source" file explicitely points to the macro file.
In EMACS on the LISPM it takes but 3 keystrokes to go from
the point of call of INITIALIZE-LINEARRAY to the definition.
ITS EMACS is only a couple more keystrokes.

-gjc

Date: 12 July 1981 03:04-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

I noticed you replaced (ARRAY LINEARRAY T 80.) in MRG;DISPLA > by 
(INITIALIZE-LINEARRAY) where the latter is defined by a macro in 
LIBMAX;DISPLM > .  (INITIALIZE-LINEARRAY also does the compiler 
declaration.)  
I suppose you made this change for the sake of NIL and possibly LISPM.
How many such ARRAY setups are you intending to change in this way?
Also, I don't like the idea of moving useful info such as the dimensions 
from the source file into a macro file especially when you haven't 
changed the dimensionality any.  I think such info more properly belongs 
in the source file.

Date: 11 July 1981 22:26-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: RZ at MIT-MC, MACSYMA-I at MIT-MC

    Date: 11 Jul 1981 16:19:10-PDT
    From: CSVAX.fateman at Berkeley
    To:   rz
    cc:   gjc

    why is $maxprime set to 489318.  in asum?

Primes are indexed from 1 to N. Therefore this number is
(1+ (CAR (SYSCALL 3 'FILLEN (OPEN "ARCHIVE;PTABLE >" '(IN FIXNUM)))))
If you want, I can put the syscall in the file.
I wonder what multics does, since this array is bigger than a SEGMENT?

-gjc

Date: 11 July 1981 21:55-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC, CSVAX.jkf at BERKELEY

    Date: 11 Jul 1981 16:15:54-PDT
    From: CSVAX.fateman at Berkeley
    To:   gjc
    cc:   CSVAX.jkf at Berkeley

    where are   load-macsyma-macros    and macsyma-module
    defined?

Macsyma-module is on the directory with all macsyma macros (LIBMAX),
in the file MODULE. At least the ITS version is.
The NIL version is someplace else.
On Multics we simply have a bootstrap which calls the lisp compiler
with an "-eval" option of 
(defun macsyma-module macro (form) '(%include something)).

Load-Macsyma-Macros is in MAXMAC.

Both of these (indeed, any function in all of macsyma) may be
be found with the emacs tags command META-<DOT>.

-gjc

Date: 10 July 1981 20:37-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JIM at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 07/10/81 18:43:59
    From: JIM

    How do I compile a macsyma file for a test compilation?

With :UMCL, the same thing users use for non-installed software.

-gjc

Date: 7 July 1981 05:07-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 07/07/81 00:47:14 Re: PAULW;CSIMP2
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   I noticed this when compiling on the LISPM, in PAULW;CSIMP2, the
   function EXPAND1 is called with only one argument, even though it 
   has an ARGS property of (NIL . 3) in Macsyma.
   Also, in the UNFASL file there is a comment:
   "EXPAND1 was referenced but not defined in this file."
   Perhaps it should be DEFMFUN'ed? That way the mechanisms for
   catching errors like these would be used.
Has been DEFMFUNed in JM;SIMP and bug fixed in PAULW;CSIMP2.

Date: 7 July 1981 00:47-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: PAULW;CSIMP2
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I noticed this when compiling on the LISPM, in PAULW;CSIMP2,
the function EXPAND1 is called with only one argument, even
though it has an ARGS property of (NIL . 3) in Macsyma.
You were the last one to edit that file so I thought you
might know what was going on. (Doesn't look like you edited near there though.)
Also, in the UNFASL file there is a comment:
"EXPAND1 was referenced but not defined in this file."
Perhaps it should be DEFMFUN'ed? That way the mechanisms for
catching errors like these would be used.

-gjc

Date: 3 July 1981 17:46-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: INCLUDEF.
To: RWK at MIT-MC
cc: MACSYMA-I at MIT-MC

Since you were on vacation, I'll take some time to summarize things.
[1] I did show that the present instantiation of the INCLUDEF
    header in macsyma source files was insufficient for VMS.
[2] I did show that MULITCS-MACLISP, PDP-MACLISP, LISP-MACHINE,
    VMS-NIL, did NOT NEED to use the INCLUDEF mechanism.
[3] I did not state that the INCLUDEF "scheme" was insufficient.
[4] None of this has anything to do with NIL per-se, this is
    a confusion thrown into the matter by RJF, predictably.
[5] Amoung the objections to the INCLUDEF mechanism, as discussed in the past:
    (a) it is syntactical, a read-time mechanism.
    (b) it is a no-op on the LISPM.
    (c) the PREDICATE mechanism, which tells what "file" to INCLUDEF
        becomes hairy under cross-compilation conditions. It becomes
        even hairier when one must make the evaluation in an environment
        which is assumed to be essentialy deviod of any universal tools for
        dealing with this problem.

Carefully consider point 3.

-gjc

Date: Friday, 3 July 1981, 16:34-EDT
From: Robert W. Kerns <RWK at MIT-MC>
Subject: macsyma modularity definition.
To: GJC at MIT-MC
Cc: JIM at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC
In-reply-to: The message of 17 Jun 81 23:33-EDT from George J. Carrette <GJC at MIT-MC>


    Date: 17 June 1981 23:33-EDT
    From: George J. Carrette <GJC at MIT-MC>
    Subject:  macsyma modularity definition.
    To: JIM at MIT-MC
    cc: JPG at MIT-MC, MACSYMA-I at MIT-MC

    A global change to all the macsyma source file headers is
    needed in any case. The present header is not general enough for
    running in both VMS and UNIX NIL. INCLUDEF puts you at once at the
    mercy of the thing which is most variable from system to system,
    the file-conventions. 

    The facility is called MACSYMA-MODULE because it follows from
    a DEFINE-PROGRAM I have.

    (DEFINE-PROGRAM MACSYMA) ; creates a structure and defines macros.
    ; here is some info to put into the macsyma structure.
    (DEFINE-MACSYMA FOOBAR CRUFTY "YES" NEEDED "MAYBE")
    ; says: "here is that FOOBAR module I was telling you about"
    (MACSYMA-MODULE FOOBAR)

    -gjc

Sorry to get to this so late but I've been on vacation.  GJC hasn't
justified his statement that the INCLUDEF scheme isn't adaquate
for NIL UNIX/VMS distinguishing.  I don't happen to know what
he's talking about.  This isn't a comment on the value or lack
thereof of the scheme he is proposing.  In fact, I think his scheme
may have merit in that the header of the files doesn't have to be
edited every time MACSYMA is brought up on a new system, etc.

I agree with Fateman that if NIL can't handle this there's something
wrong.  However, just because NIL can handle it doesn't mean that
the people who created the header knew what they were doing.

Date: 3 July 1981 09:51-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: CSVAX.jkf at BERKELEY
cc: MACSYMA-I at MIT-MC

   Date: 30 Jun 1981 09:22:58-PDT
   From: CSVAX.jkf at Berkeley
   To: gjc@mit-mc
   Cc: macsyma-i@mit-mc
   The reason I brought up speed of building a Macsyma in the first place was
   to suggest that you could get a lot more work done of the system if you
   didn't have to worry about address space limitations when you were 
   debugging.
This all depends on what you are debugging.  I almost never have address 
space problems when I am debugging.  I almost always debug using compiled 
code, and I hardly ever need more than a fraction of the 60K address space 
still available to me when I am debugging.  Of course, it can be different 
when you are debugging DEFINT or when you have loaded in many macro 
packages (including much that you don't really need!), but you still can 
use Multics or a LispM when you need to, or if necessary you can often 
pull a hack on MC to cut down on your address space requirements (but, as 
I said above I very very rarely find this necessary).

Date: 3 July 1981 09:27-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: CSVAX.jkf at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 30 Jun 1981 09:22:58-PDT
    From: CSVAX.jkf at Berkeley
    You pointed out that building a Macsyma on a lisp machine is not too slow,
    so I guess the obvious question is 'why hasn't major work on Macsyma 
    shifted to the lisp machine (and multics perhaps) with the code being 
    installed on MC when it has been debugged and tested.'?   
CWH's answer to this of a couple of days ago was quite an oversimplification.
Some other factors to take into account are:
[1] We have a lot of say and control over MC.  We don't over Lisp machines 
and Multics.
[2] We have many ports into MC.  We only own half a Lisp machine.  Having 
to queue up to do your work is not fun.  
[3] I don't know many people who dial into a Lisp machine over a 1200 baud 
line.  (Would they even want to?)  I do a lot of my work from home.  We have 
many 1200 baud lines into MC.
[4] MC is much better and faster for MACSYMA work during the afternoon than 
Multics is.  Again, Multics is not our machine and we'd have to make 
arrangements to use it for major MACSYMA work.  I don't think the IPC would 
be too pleased about that at this stage.
[5] The bulk of our users are still on MC.  It's a good idea to be where 
your users are as a major part of our work is helping and advising them.
[6] MC is not a bad machine.  It is up essentially 24 hours a day and very 
accessible.  Don't knock it.

Date: 3 July 1981 03:24-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: macsyma timings.
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

You mentioned "just for the record, problem FOO takes 2 seconds CPU time,
plus X gc time, where X averages about 1.2 seconds."
Well, I'm going more towards wall-clock time lately, as the figure
of merit. I always include GCtime in the "RUNTIME" figure.
On MC, cpu time is a good measure of wall-clock time merit,
because it is easy to predict from that figure and the known
system-load characteristics how long a problem will take in
practice, and how much it will cost to run. (It always costs something
in terms of other problems you can't solve because you are solving
the one you chose to solve. Money has little to do with it.)


Date: 2 Jul 1981 14:53:26-PDT
From: CSVAX.fateman at Berkeley
To: JPG@MIT-MC
Subject: correction
Cc: bug-lmmax@mit-mc, macsyma-i@mit-mc

the timing of 4.45 sec appears to be not repeatable.  The same problem
as GJC's example, with same parentheses, seems to take a minimum of 6.8
seconds (plus, occasionally, about 1.5 sec. GC).  I do not have a record
of what I typed in.   The ratio of run-times on the KL-10 and the
VAX 11/780 has probably not changed much in the last 6-12 months.

Date: 2 July 1981 17:22-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC, GJC at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC

   Date: 30 Jun 1981 07:12:33-PDT
   From: CSVAX.fateman at Berkeley
   To: BUG-LMMAX@MIT-MC, GJC@MIT-MC
   Subject: LISPM macsyma.
   Cc: MACSYMA-I@MIT-MC
   ratsimp(diff(integrate(1/x^5-1),x),x));  which took 9 seconds clock
   time on the cadr in 800f and 4 seconds CPU time on MC, took
   4.45 seconds CPU on vax 11/780, and about 18seconds real time including
   starting up vaxima on a load-average-3.5 system.
I'm not sure what problem RJF did as his parens don't balance, but 
assuming he did the same problem GJC did:
RATSIMP(DIFF(INTEGRATE(1/(X^5-1),X),X)); , just for the record, it 
takes 2 secs. CPU time on MC + x secs. GC time, where x tends to be 
between 1 and 1.5 secs.

Date: 2 July 1981 13:37-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: New error message display.
To: INFO-MACSYM at MIT-MC
cc: MACSYMA-I at MIT-MC

A variable Error_Size is set to some integer to control the size
of error messages. For example, let U:(C^D^E+B+A)/(COS(X-1)+1);
U has an error size of 24. So if Error_Size has value less than 24 then

(C1) ERROR("The function", FOO,"doesn't like", U,"as input.");

prints as:

The function FOO doesn't like ERREXP1 as input.

If Error_Size>24 then as:
				 E
				D
			       C   + B + A
The function FOO doesn't like -------------- as input.
			      COS(X - 1) + 1


Expressions larger than Error_Size are replaced by symbols, and the symbols
are set to the expressions. The symbols are taken from the user-settable list
Error_Syms:[ERREXP1,ERREXP2,ERREXP3].

-gjc

p.s. The changes take effect in macsyma 298, soon to be released.

Date: 1 July 1981 17:53-EDT
From: George J. Carrette <GJC at MIT-MC>
To: RWK at MIT-MC
cc: MACSYMA-I at MIT-MC
	Use MCL to compile the file MAXSRC;SYNEX 9.
	You get a PURPG; error.
Your ERMSGC stuff has some severe bug. If the last
function in the file is the FIRST function which has
an error-message in it, then it gets a PURGPG error.

Date: 30 June 1981 17:40-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

So that the error signalling will work I spent a couple minutes and
changed quite a few combination calls to DISPLA, ERREXP, and MERROR to
single calls to MERROR.  In the process I had to change the TONE of
many messages from the imparitive punitive e.g.
"The 2nd argument to FOOBAR must be BAZ"
to the declarative informative e.g.
"The 2nd argument to FOOBAR was not BAZ:"

This might seem strange, but I think it is true, the control
structure of the code simply lends itself to the different
tones depending on the implementation.

-gjc

Date: 30 June 1981 17:03-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: GJC at MIT-MC, CSVAX.jkf at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 30 Jun 1981 09:22:58-PDT
    From: CSVAX.jkf at Berkeley

    You pointed out that building a Macsyma on a lisp machine is not too slow,
    so I guess the obvious question is 'why hasn't major work on Macsyma shifted to
    the lisp machine (and multics perhaps) with the code being installed on
    MC when it has been debugged and tested.'?   

1) The principal Macsyma maintainer prefers working on ITS.
2) We have not arranged for computer time on either Multics or a Lisp
   Machine for general purpose Macsyma development, as opposed to
   system-specific development.  This would be done if (1) were to
   change.

Date: 30 June 1981 16:32-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
Subject: MAIL and BUG commands
To: JIM at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 29 June 1981 10:16-EDT
    From: James E. O'Dell <JIM at MIT-MC>

    I agree with your cline notion for BUG and MAIL. How about on ITS? Can it be
    defined to do the same thing?

Here is a proposal for an upwardly compatible (I hope) extension to BUG
and MAIL.  If invoked with no arguments, BUG and MAIL accept lines of
input from the console which are terminated by whatever is appropriate
for the given operating system, e.g. ^C on ITS, ^Z on Twenex, period on
Multics.  MAIL would prompt first for a userid.  It is trivial to
implement this as (cline "send_mail ...") on Multics, and you can
probably valret :MAIL on ITS.  If not, then on ITS you can just read
characters until a ^C is typed.

In any case, we should be thinking toward making Macsyma win on the
operating systems TOPS-20, Multics, Unix, and VMS since far more people
will be using these systems than ITS.

I also agree strongly with Jeff about not duplicating functionality
provided by the operating system.  "Know your operating system.  She is
your friend."

    Date: 29 June 1981 10:34-EDT
    From: George J. Carrette <GJC at MIT-MC>

    Don't forget, a MAIL command that can be called by a program
    is still needed, to call in disowned or batch macsyma jobs.

MAIL and BUG can do the same thing they do now when given arguments.
Users should be encouraged to do BUG().  It might also help if the BUG
command automatically included such information as the version number,
recursion depth on Multics, number of c-lines, and anything else that
might be helpful in tracking down the problem.

Ok, who's going to implement it?

Date: 30 Jun 1981 09:22:58-PDT
From: CSVAX.jkf at Berkeley
To: gjc@mit-mc
Subject: vaxima loading times
Cc: macsyma-i@mit-mc

 As long as you are going to quote me on my remark that it takes '15 minutes
to build a Macsyma on a Vax' please also mention that this is on a machine
which has more to do in the background than update the who line and 
look for mouse clicks.  I just rebuilt it and here are the latest stats:
  load average: 8   (avg number of jobs in run queue)
  users: 13
  real time: 15:30
  cpu time: 2:03
  files loaded: 109

   The reason I brought up speed of building a Macsyma in the first place was
to suggest that you could get a lot more work done of the system if you
didn't have to worry about address space limitations when you were debugging.
You pointed out that building a Macsyma on a lisp machine is not too slow,
so I guess the obvious question is 'why hasn't major work on Macsyma shifted to
the lisp machine (and multics perhaps) with the code being installed on
MC when it has been debugged and tested.'?   

Date: 30 Jun 1981 07:13:53-PDT
From: CSVAX.fateman at Berkeley
To: BUG-LMMAX@MIT-MC, GJC@MIT-MC
Subject: LISPM macsyma.
Cc: MACSYMA-I@MIT-MC

ratsimp(diff(integrate(1/x^5-1),x),x));  which took 9 seconds clock
time on the cadr in 800f and 4 seconds CPU time on MC, took
4.45 seconds CPU on vax 11/780, and about 18seconds real time including
starting up vaxima on a load-average-3.5 system.

Date: 30 Jun 1981 07:05:03-PDT
From: CSVAX.fateman at Berkeley
To: gjc@mit-mc
Cc: MACSYMA-I@MIT-MC

I can't resist sarcasm.

Date: 30 June 1981 08:07-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: Addendum to my last note on the MAIL and BUG commands in ITS MACSYMA
To: JIM at MIT-MC, CWH at MIT-MC
cc: MACSYMA-I at MIT-MC

It is my feeling that one should encourage users to use the top-level 
operating system's methods for sending mail and bug notes wherever 
possible.  However, there may be a certain class of somewhat naive 
users for whom using these commands from within MACSYMA on relatively 
short messages, e.g. SEND(HELP); , is not to be discouraged.

Date: 30 June 1981 07:57-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: JIM at MIT-MC, CWH at MIT-MC
cc: MACSYMA-I at MIT-MC

   JIM@MIT-MC 06/29/81 10:16:25 Re:  Multics MAIL and BUG commands.
   To: CWH at MIT-MC
   CC: MACSYMA-I at MIT-MC
   I agree with your cline notion for BUG and MAIL. How about on ITS?
   Can it be defined to do the same thing?
I think the issues here as far as ITS goes are somewhat complicated, 
and might argue for not making significant changes in these commands 
on ITS.  
First of all, I personally have never really cared for redoing the 
operating system within MACSYMA, although some basic but simple BUG, 
MAIL, LUSER, SEND, EXEC, whatever, commands within MACSYMA are perhaps 
necessary.
Secondly, there is no question that double-quoted-strings within 
MACSYMA as currently implemented (i.e. the ; needs a \ problem) are 
deficient for this purpose.
However, once you provide such commands, I think it is wrong to withdraw 
them.  And if you significantly modify them, I think you better do it 
with care, as many users on ITS count on them and use them successfully.
For all the users who are being burnt by them as CWH says, there are many 
more who would be burnt if you changed them significantly, again, unless 
you made the changes with care.
I'm not sure what this says about the utility of these commands on 
other operating systems where there perhaps is not already a large 
user-base for them.

Date: 30 June 1981 04:14-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CWH at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC

It took 9 minutes 24 seconds wall-clock time to reload
a LISPM macsyma. I don't think the chaos net file transfer
slowed things down much (3:20:12 a.m.). As I thought, this
is better than the 15 minutes JKF stated for Vaxima,
I'm not sure why you were suprised.

-gjc

Date: 30 June 1981 02:41-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: LISPM macsyma.
To: BUG-LMMAX at MIT-MC
cc: MACSYMA-I at MIT-MC

Is running again on the CADR in 800f. First impressions:
It does the identity operation
RATSIMP(DIFF(INTEGRATE(1/(X^5-1),X),X));
in 9 seconds clock time, (includes paging, mouse-tracking, updating
the clock and wholine display, general running of the lispm operating system).
MC does this in 4 seconds CPU time, (includes no operating system overhead).

-gjc

Date: 29 June 1981 22:58-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

I'm sorry, but I really don't think we on Macsyma-I deserve
to be served "free advice to Macsyma Inc."
You start off by saying, "I don't know much about the average macsyma
user but...," and then go on to prove it. When you have
to start off with a self-referential self-apologetic statement
like that, well, maybe a little extra thought would keep you
from sending it. Maybe not.

-gjc

p.s. I don't want to hear about Macsyma Inc until it is capitalized
and incorporated.

Date: 29 Jun 1981 15:23:59-PDT
From: CSVAX.fateman at Berkeley
To: jim@mit-mc
Subject: average user of macsyma
Cc: MACSYMA-I@MIT-MC

	    Any person using UNIX
	    who does not know how to send mail can't be helped by reading
	    a macsyma manual.
	
	While I agree that the MAIL and BUG commands on Multics are faulty and
	need redesign, I strongly disagree with the above remark. I find it
	computer chauvanistic and indicative of the fact that you don't know
	much about the average Macsyma user.
I admit I don't know much about the average Macsyma user, who, by reading
the following definitions in the glossary, would apparently be well served:

"DDT -originally a program used for debugging of other programs but modified
in ITS to include the functions of a monitor." [monitor is undefined]

"hashing - a method of storing sparse vectors and arrays through the use
of a function, which for given arguments produces a number in a range of
possible values" [sparse, vector, array, function: undefined; argument is
muddled]

you get the idea.

I think the average macsyma user knows how to edit a text file on some
computer, or should know how.  I think the average user is willing to
read a manual or use on-line help for the operating environment
above macsyma.

There are very few programming systems which are so totally self contained
that they work well (or at all) without a bit more environment.  The
successful (?) ones that come to my mind are APL, Interlisp, and BASIC.
Macsyma's operations on files are not adequate.

I suspect that the macsyma user who knows lots of mathematics
is probably at a DISADVANTAGE
compared to one who knows less, but a little programming.

{free advice to Macsyma Inc.}
	
	
	

Date: 29 Jun 1981 15:03:18-PDT
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc
Subject: mail from a program

exec("mail foo
your job is ready");
works

Date: 29 June 1981 10:34-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  Multics MAIL and BUG commands.
To: JIM at MIT-MC
cc: CWH at MIT-MC, MACSYMA-I at MIT-MC

Don't forget, a MAIL command that can be called by a program
is still needed, to call in disowned or batch macsyma jobs.


Date: 29 June 1981 10:16-EDT
From: James E. O'Dell <JIM at MIT-MC>
Subject:  Multics MAIL and BUG commands.
To: CWH at MIT-MC
cc: MACSYMA-I at MIT-MC


        bug makes it very easy to accidentalyy make an error which produces quotes
        must occur in pairs and you loose your message this happened to me many
        times in trying to communicate with you i do not know what i typed to
        cause that message maybe it is noise over the phone line
        what is your multics name so ican use the regular mail command to send
        stuff to you

    How many more people are we going to have to screw before we get around to
    flushing the brain-damaged BUG command?   ..............

I agree with your cline notion for BUG and MAIL. How about on ITS? Can it be
defined to do the same thing?

Date: 29 June 1981 10:11-EDT
From: James E. O'Dell <JIM at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC, MULTICS-MACSYMA-BUGS at MIT-MC

    Date: 27 Jun 1981 11:43:18-PDT
    From: CSVAX.fateman at Berkeley
    To:   CWH, Garber.RFMono at MIT-MULTICS
    cc:   MACSYMA-I, MULTICS-MACSYMA-BUGS

    The vax version already flushed bug mail.  Any person using UNIX
    who does not know how to send mail can't be helped by reading
    a macsyma manual.

While I agree that the MAIL and BUG commands on Multics are faulty and
need redesign, I strongly disagree with the above remark. I find it
computer chauvanistic and indicative of the fact that you don't know
much about the average Macsyma user.


Date: 28 June 1981 17:02-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

   Date: 27 Jun 1981 17:56:16-PDT
   From: CSVAX.fateman at Berkeley
   To: macsyma-i@mit-mc
   Subject: how many copies of (mtimes simp)?
   It is clear that one should not be producing many copies of this common
   subexpression.
True.  At most two is sufficient.
   especially since THE unique copy is supposed to be obtained by 
   (get 'mtimes 'simpind).
Untrue, as you note below.
   Yet I find there is another copy of (mtimes simp) and that furthermore, it
   is a "pure" copy, and hence (I believe) it is imbedded in compiled code.
True.  All those "copies" of constant list structure share.
   This came up in a round-about way in devising interprocess communication
   facilities for distributed vaxima.
Can you elaborate on this?

Date: 28 June 1981 04:05-EDT
From: George J. Carrette <GJC at MIT-MC>
To: MACSYMA-I at MIT-MC

All filesystem dependant references in non-filesystem code
have been removed from the macsyma source files.
"Includef" is now flushed, along with remaining direct calls
to LOAD of files such as RZ;MACROS.


Date: 27 Jun 1981 17:56:16-PDT
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc
Subject: how many copies of (mtimes simp)?

It is clear that one should not be producing many copies of this common
subexpression, especially since THE unique copy is supposed to be
obtained by (get 'mtimes 'simpind).  Yet I find (on the VAX, at least),
there is another copy of (mtimes simp) produced by the EXPAND function
(e.g. expand((a+b)^2)) and that furthermore, it is a "pure" copy,
and hence (I believe) it is imbedded in compiled code.
  The copy of (mtimes simp) on the property list on the vax is not
pure, incidentally.
  This came up in a round-about way in devising interprocess communication
facilities for distributed vaxima.

Date: 27 Jun 1981 11:41:00-PDT
From: CSVAX.fateman at Berkeley
To: CWH@MIT-MC, Garber.RFMono@MIT-MULTICS
Cc: MACSYMA-I@MIT-MC, MULTICS-MACSYMA-BUGS@MIT-MC

The vax version already flushed bug mail.  Any person using UNIX
who does not know how to send mail can't be helped by reading
a macsyma manual.

Date: 27 June 1981 14:08-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: Garber.RFMono at MIT-MULTICS
cc: MULTICS-MACSYMA-BUGS at MIT-MC, MACSYMA-I at MIT-MC

    Date:  26 June 1981 20:59 edt
    From:  Garber.RFMono at MIT-Multics

    bug makes it very easy to accidentalyy make an error which produces quotes
    must occur in pairs and you loose your message this happened to me many
    times in trying to communicate with you i do not know what i typed to
    cause that message maybe it is noise over the phone line
    what is your multics name so ican use the regular mail command to send
    stuff to you

How many more people are we going to have to screw before we get around to
flushing the brain-damaged BUG command?

Multics Macsyma users should be told to send mail to Macsyma.Bugs, just as
they send mail to Emacs.Bugs, etc.  Rather than making the various
implementations conform to the losing models of Macsyma, we should make
Macsyma conform to the winning models of the host operating systems.

A decent redefinition for the BUG command would be for it to take no
arguments and simply do (cline "send_mail Macsyma.Bugs -no_subject").
This would allow such conveniences as punctuation and mixed case in
messages, editing of mail, etc.

Date: 26 Jun 1981 14:52:30-PDT
From: CSVAX.fateman at Berkeley
To: gjc@mit-mc
Subject: vaxtran
Cc: GCOOK@MIT-MC, macsyma-i@mit-mc

	    the mit-mc system is so deficient in
	    its ability to interact with fortran
	    that it would be most difficult to make 
	    it work as well as it does on the vax.
	
	This is *incredibly* false. MC may not run FORTRAN, but it's macsyma,
	text editor, and ftp interface well enough to the CRAY-1 and CDC-7600
	at LLL. There is no reason in the world that one has to do symbolic
	manipulation and floating-point-number-crunching on the same machine,
	in fact, there are a lot of good reasons not to.
	
	-gjc
Since gjc has apparently not used vaxtran, there is no way he could compare
the two systems.  I am quite familiar with MACTRAN.

As for "same machine"  I could say
"There is no reason in the world that one should HAVE TO  run FORTRAN
and MACSYMA on different machines"  
	
	

Date: 26 June 1981 17:30-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  vaxtran
To: CSVAX.fateman at BERKELEY
cc: GCOOK at MIT-MC, MACSYMA-I at MIT-MC

    Date: 26 Jun 1981 13:19:05-PDT
    From: CSVAX.fateman at Berkeley
    To:   GCOOK
    cc:   MACSYMA-I
    Re:   vaxtran

    2. Even if it did compile, the mit-mc system is so deficient in
    its ability to interact with fortran that it would be most difficult to make 
    it work as well as it does on the vax.

This is *incredibly* false. MC may not run FORTRAN, but it's macsyma,
text editor, and ftp interface well enough to the CRAY-1 and CDC-7600
at LLL. There is no reason in the world that one has to do symbolic
manipulation and floating-point-number-crunching on the same machine,
in fact, there are a lot of good reasons not to.

-gjc

Date: 26 Jun 1981 13:19:05-PDT
From: CSVAX.fateman at Berkeley
To: GCOOK@MIT-MC
Subject: vaxtran
Cc: MACSYMA-I@MIT-MC

(This may duplicate info sent by Douglas Lanam, but)
1. I don't know why it won't compile
2. Even if it did compile, the mit-mc system is so deficient in
its ability to interact with fortran that it would be most difficult to make it work as
well as it does on the vax.
3. You should be familiar with mcw's "mactran" system.
4.  I think you should be using a vax, since LLL has so many of them now.
If GJC is willing to make things work for you on Multics, that may be
a reason to work there, however.

Date: 26 Jun 1981 13:11:00-PDT
From: CSVAX.douglas at Berkeley
To: GCOOK@MIT-MC, GJC@MIT-MC
Subject: ucb; vaxtra lsp
Cc: MACSYMA-I@MIT-MC, RJF@MIT-MC

mc:ucb; vaxtra lsp is the fortran interface VAXTRAN used in vaxima,
which i wrote last year.

I am not sure why it does not even compile on anything but franz lisp,
But
Even if it did compile on multics, lispm, or mc, it wouldn't run in
its current state since it is dependent on many unix features
(like cfasl), the augment precompiler from wisconsin,
the f77 compiler under unix, and unix shell and environment in 
general.
There is a package Mactran written by Michael Wirth(MCW@mit-mc)
which is a version of vaxtran written earlier for mc macsyma.
(it wont compile or run in franz lisp/vaxima in its current form).
	douglas

Date: 26 June 1981 15:06-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC, JIM at MIT-MC
cc: JLK at MIT-MC, GCOOK at MIT-MC, MACSYMA-I at MIT-MC

   GJC@MIT-MC 06/26/81 12:00:38
   To: GCOOK at MIT-MC
   CC: JPG at MIT-MC, JIM at MIT-MC, JLK at MIT-MC, MACSYMA-I at MIT-MC
   I've looked into this problem with MRG;OPTIM. First of all
   the code won't even run interpreted on MC, due to CAR and CDR
   being called on symbols. Just out of curiosity I'd like to
   know what the person who wrote this thought he was doing.
So would we all, but I think we should simply flush that lossage.
   
   Anyway, the model you should be following is the function
   HASHER in JPG;MLISP. This is a correct hash on ALIKE.
Correct, but brain-damaged for this purpose.  ( (HASHER '(symbol)) gives 
0 for all symbols with very short pnames, ok for MLISP's hash array 
purposes but not for OPTIM.)  
It is trivial to write a good hasher for OPTIM, i.e. a good hasher on 
ALIKE1.  JIM says he is taking care of this, I believe.
(HASHER can be used as a model, but only that.  The 
(LOGAND #O77777 foo) should be replaced by (\ foo primenumber) .)

Date: 26 June 1981 14:56-EDT
From: George J. Carrette <GJC at MIT-MC>
To: GCOOK at MIT-MC
cc: RJF at MIT-MC, MACSYMA-I at MIT-MC

There is a copy of something on MC:UCB;VAXTRA LSP
which looks like it might be the fortran interface
called VAXTRAN used the Berkeley Vax Macsyma.

Unfortunately it is not maclisp, (it is franzlisp),
and won't compile on either MC, Multics, or Lispm.

-gjc

Date: 26 June 1981 12:02-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  *DOCUMENTATION*
To: MACSYMA-I at MIT-MC

Q: Does anybody out there want to drive the
   Macsyma-Implementors-Manual effort?

The person should probably not be too intimate with the gory
details, and be willing to ask lots of obvious questions.


Date: 26 June 1981 12:00-EDT
From: George J. Carrette <GJC at MIT-MC>
To: GCOOK at MIT-MC
cc: JPG at MIT-MC, JIM at MIT-MC, JLK at MIT-MC, MACSYMA-I at MIT-MC

I've looked into this problem with MRG;OPTIM. First of all
the code won't even run interpreted on MC, due to CAR and CDR
being called on symbols. Just out of curiosity I'd like to
know what the person who wrote this thought he was doing.

Anyway, the model you should be following is the function
HASHER in JPG;MLISP. This is a correct hash on ALIKE.

-gjc

Date: 26 June 1981 11:20-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 26 June 1981 06:04-EDT
    From: Jeffrey P. Golden <JPG>
    To:   GJC
    cc:   MACSYMA-I

       GJC@MIT-MC 06/25/81 20:16:23 Re: To compile Macro files.
       To: MACSYMA-I at MIT-MC
       Use :LIBMAX;CL or just make sure the forms in LIBMAX;LIBMAX COMPLR
       are in your COMPLR init file.
    Surely, MCL^K works here too, no?

Well, MCL^K has the string-file hacking stuff in the environment,
and RWK wrote it in such a way that if it was in the environment
he assumed it was a compilation for installing a macsyma runtime
file. It causes a string-file to be created wether or not
MERROR or MTELL are called. This is one of the things I hope to
fix along with the introduction of (MACSYMA-MODULE).

More on (MACSYMA-MODULE):

For a runtime file we have (macsyma-module mlisp).
For a macro file we have (macsyma-module transm macro).

The CADR of the form is the module name, which should be the SIXBIT
ITS first-file-name (at least for the time being).
The CDDR of the form is a list of options. The only option defined
now is "macro", but in the future "mrg" "rat" "transl" etc. which
will specify extra actions to take place at compile-time, runtime,
read-time, and eval-time.

-gjc

Date: 26 June 1981 06:04-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 06/25/81 20:16:23 Re: To compile Macro files.
   To: MACSYMA-I at MIT-MC
   Use :LIBMAX;CL or just make sure the forms in LIBMAX;LIBMAX COMPLR
   are in your COMPLR init file.
Surely, MCL^K works here too, no?

Date: 26 June 1981 01:14-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 25 June 1981 12:18-EDT
    From: Richard J. Fateman <RJF at MIT-MC>

    sure, I'd like to see enumerated what kinds of changes
    you made to make macsyma run better on the VAX.  I know we've
    made changes to make things run better here, but I thought we
    made them in such a way as to not slow down anyone else.

Please *read* my messages before replying to them.  Here it is again.

    Date: 24 June 1981 23:28-EDT
    From: Carl W. Hoffman <CWH at MIT-MC>

    Really?  Didn't I complain to you and JKF about unnecessary changes to
    SIMP made by somebody in your group which benefitted only your
    implementation of Macsyma?  Basically, the changes were hand
    optimization of a sequence of car's and cdr's which should be performed
    by any decent compiler.  There are a number of changes of this sort
    which were made to the source.  I'll enumerate them if you'd like.

I did not make any changes to Macsyma.  Changes were made by people in your
group.  Got that?  Not us.  You folks.  Here are two excerpts from JM;SIMP.
This is #+Franz code which is semantically equivalent to the #-Franz code.
Conditionalizing code at this level and in this way is just asking for
trouble.  Look at the size of SIMPLIFYA.  We have to maintain *two* versions
now.  If I cared, I would have done something about this.

#+Franz
(DEFUN ONEP1 (A)
  (LET ((TYPE (TYPEP A)))
       (COND ((EQ TYPE 'FIXNUM) (EQUAL A 1))
	     ((EQ TYPE 'FLONUM) (EQUAL A 1.0))
	     ((EQ TYPE 'LISPT) (EQUAL A BIGFLOATONE)))))

#+Franz
(DEFMFUN SIMPLIFYA (X Y)
  (COND ((ATOM X) (COND ((AND (EQ X '$%PI) $NUMER) %PI-VAL) (T X)))
	((NOT $SIMP) X)
	((ATOM (CAR X))
	 (COND ((AND (CDR X) (ATOM (CDR X)))
		(MERROR "~%~S is a cons with an atomic cdr - SIMPLIFYA" X))
	       ((GET (CAR X) 'LISP-NO-SIMP)
		; this feature is to be used with care. it is meant to be
		; used to implement data objects with minimum of consing.
		; forms must not bash the DISPLA package. Only new forms
		; with carefully chosen names should use this feature.
		X)
	       (T (CONS (CAR X)
			(MAPCAR (FUNCTION (LAMBDA (X) (SIMPLIFYA X Y)))
				(CDR X))))))
	(T (LET ((CAARX (CAAR X))
	    (COND ((EQ CAARX 'RAT) (COND ((MEMQ 'SIMP (CDAR X))
					  (COND ($FLOAT (FPCOFRAT X)) (T X)))
					 (T (*RED (CADR X) (CADDR X)))))
		  ((AND (NOT DOSIMP) (MEMQ 'SIMP (CDAR X))) X)
		  ((EQ CAARX 'MRAT) X)
		  ((AND (MEMQ CAARX '(MPLUS MTIMES MEXPT))
			(MEMQ (GET CAARX 'OPERATORS) '(SIMPLUS SIMPEXPT SIMPTIMES))
			(NOT (MEMQ 'ARRAY (CDAR X))))
		   (COND ((EQ CAARX 'MPLUS) (SIMPLUS X 1 Y))
			 ((EQ CAARX 'MTIMES) (SIMPTIMES X 1 Y))
			 (T (SIMPEXPT X 1 Y))))
		  ((NOT (ATOM CAARX))
		   (COND ((OR (EQ (CAAAR X) 'LAMBDA)
			      (AND (NOT (ATOM (CAAAR X))) (EQ (CAAAAR X) 'LAMBDA)))
			  (MAPPLY CAARX (CDR X) (CAAR X)))
			 (T (MERROR "Illegal form - SIMPLIFYA:~%~M" X))))
		  ((GET CAARX 'OPERS)
		   (LET ((OPERS-LIST *OPERS-LIST)) (OPER-APPLY X Y)))
		  ((AND (EQ CAARX 'MQAPPLY)
		        (OR (ATOM (CADR X))
			    (AND SUBSTP (OR (EQ (CAR (CADR X)) 'LAMBDA)
					    (EQ (CAAR (CADR X)) 'LAMBDA)))))
		   (COND ((OR (SYMBOLP (CADR X)) (NOT (ATOM (CADR X))))
			  (SIMPLIFYA (CONS (CONS (CADR X) (CDAR X)) (CDDR X)) Y))
			 ((OR (NOT (MEMQ 'ARRAY (CDAR X))) (NOT $SUBNUMSIMP))
			  (MERROR "Improper value in functional position:~%~M" X))
			 (T (CADR X))))
		  (T (LET ((W (GET CAARX 'OPERATORS)))
			  (COND ((AND W (OR (NOT (MEMQ 'ARRAY (CDAR X))) (RULECHK CAARX)))
				 (FUNCALL W X 1 Y))
				(T (SIMPARGS X Y)))))))))))

Additional examples furnished upon request.

Date: 25 June 1981 20:16-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: To compile Macro files.
To: MACSYMA-I at MIT-MC

Use :LIBMAX;CL or just make sure the forms in LIBMAX;LIBMAX COMPLR
are in your COMPLR init file.

Date: 25 June 1981 14:58-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  Vaxima use on LBL-Unix
To: hall at LBL-UNIX
cc: MACSYMA-I at MIT-MC, fateman at LBL-UNIX,
    ingres.fateman at LBL-UNIX, mo at LBL-UNIX

    Date: 25 Jun 1981 09:39:41-PDT
    From: hall at LBL-UNIX (Dennis & [csam])
    To:   fateman at LBL-UNIX
    cc:   gjc, ingres.fateman at LBL-UNIX, mo at LBL-UNIX
    Re:   Vaxima use on LBL-Unix

    How much use is contemplated?
    Vaxima really puts a load on our system.

I wouldn't want to put a load on your system. All I wanted was
to see first-hand how things were organized on one of the systems,
since RJF talks a lot about how winning things are.
I also figured I could pick up valuable software information.
This has all caused a lot more trouble than I thought it would.

-gjc

Date: 24 June 1981 23:28-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: GJC at MIT-MC, CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 24 Jun 1981 11:05:58-PDT
    From: CSVAX.fateman at Berkeley

    This is BIG NEWS to ME.  Since when?   By you? to do WHAT?  What evidence
    do you have that the hair you put in is benefiting anything?  Do you
    now have profiling working on the 10 or VAX ?  

Really?  Didn't I complain to you and JKF about unnecessary changes to
SIMP made by somebody in your group which benefitted only your
implementation of Macsyma?  Basically, the changes were hand
optimization of a sequence of car's and cdr's which should be performed
by any decent compiler.  There are a number of changes of this sort
which were made to the source.  I'll enumerate them if you'd like.

    Date: 24 June 1981 16:48-EDT
    From: George J. Carrette <GJC at MIT-MC>
    
    15 minutes to rebuild a macsyma. Well, the VAX loses to the LISPM
    on the figure. But, why do you need to "rebuild" in that sense,
    why isn't there dynamic linking as on Multics?

Don't you mean the Lispm loses to the Vax?  Not the Lispm really, the
Chaosnet.  Its unclear how long it would take to build a Lispm Macsyma
from a local file system.  It takes from 30 seconds to 2 minutes to
build a Macsyma (the whole thing: in-core and out-of-core) on Multics. 

Your comment about dynamic linking doesn't really make sense.  Of
course they have dynamic linking.  Its part of the definition of Lisp.
15 minutes is just too long for a Macsyma to start up.  Even on Multics,
where loading a Macsyma is much faster, we use a saved environment.  The
problem on Multics is not the time needed to construct the "core image"
of the machine code, but the time needed to construct all the Lisp
constants.

On Multics, machine code is dynamically linked, via a separate mechanism
than that used by Lisp.  The construction of static storage in the
Multics environment is faster than it is in the Lisp environment.

Date: 24 June 1981 16:48-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.jkf at BERKELEY
cc: MACSYMA-I at MIT-MC

John, there is some misconception here. I use large address-space
systems all the time, both Multics and the LispMachine.
The fact is, I have certain expectations of what you can
get when you go to a large-address space machine, and the
pdp-11-unix model of things simply doesn't live up to those
expectations. 

15 minutes to rebuild a macsyma. Well, the VAX loses to the LISPM
on the figure. But, why do you need to "rebuild" in that sense,
why isn't there dynamic linking as on Multics?

As far as "applying experience to the code on MC," that
isn't at all what I want to do. I want to use MC as a tool,
to make it easier to go on to better things. My complaints
of late have been that certain things have been done to
needlessly dull that tool. 

-gjc

Date: 24 Jun 1981 12:19:20-PDT
From: CSVAX.jkf at Berkeley
To: GJC@MIT-MC
cc: MACSYMA-I@MIT-MC, CSVAX.FATEMAN@Berkeley
In-reply-to: Your message of 24 Jun 1981 1139-PDT (Wednesday).

  Here are the facts you have overlooked in concluding that a VAX with
2 megabytes could not run a macsyma.  The working set of Vaxima running
the begin demo (and not page faulting) is 1100 1k pages.  The size of
the Unix operating system and tables is 375 pages.  This leaves 525 pages
of the 2 megabytes free.
 
  I think that what rjf was suggesting is that you might be surprised how
easy it is to build a large system if you don't have to worry about 
address space limitations [ref: your letter about running out of bignum 
space when you just loaded in a debugger].  We can rebuild Vaxima with 
all file already compiled in about 15 minutes.  We can rebuild Vaxima 
from scratch in about 5 hours.   What this means to you is that you could
take your ideas about the error system, or modularization or whatever,
do it, debug it without worry about loading in debuggers or whatever,
and know whether it worked the same day.  Then you could apply your experience 
to the code on MC.  

Date: 24 Jun 1981 11:05:58-PDT
From: CSVAX.fateman at Berkeley
To: gjc@mit-mc
Subject: perhaps an obvious observation..
Cc: MACSYMA-I@MIT-MC

	According to your figures, Franz lisp and the VAX are too slow for me
	to debug interactive numerical programs. And the amount of gross hacks
	I would need to have my symbolic macros produce something like "C"
	code is greater than the amount of hacking to produce BLISS-32 code,
	(BLISS being a value-oriented typeless language, just as lisp is), or
	even Lispm-Microcode.
I do not know about Bliss vs. C and your hacking, but to claim that a KL-10
running 15 macsymas is faster than a VAX running 1 or 2 (assuming a couple
of meg of memory) is probably incorrect.  A factor of 2.5 to 4 slower is
what we expect, assuming the address space is ok on both.  Numeric
(Fortran) code is potentially about the same speed on the VAX as the KL-10,
according to DEC.
	
	.....so I could tell if it was
	worth the work to duplicate your VAX system at MIT; but you said you
	weren't convinced you could afford to pay for the account.
Our VAX system has been sent to MIT.  I would be pleased to pay for an account
for you here if you could explain to me why you need it. From what you
have said so far, I would have trouble justifying an account for you if
you were in Berkeley!
Our VAX system is also at LBL-UNIX, directly on the arpanet.  You can
use it there, if JM would ask for an account for you.  
	
	
	The *PROBLEM*, was simply that a lot of maclisp macro-code is
	actually being written with the VAX in mind, and not the PDP-10.
This is BIG NEWS to ME.  Since when?   By you? to do WHAT?  What evidence
do you have that the hair you put in is benefiting anything?  Do you
now have profiling working on the 10 or VAX ?  
	On the PDP-10 you don't need that hair, because the machine was born
	to run maclisp, MC has lots of nice memory, life is fast and
	fun, even with 31 users and 15 macsymas.
Come off it GJC. I've used mit-mc.  It's not bad for a small-address machine
so long as most of the users are just staring at their terminals.
	
	Ah me, to break the KL-10 habit, its going to take something very nice.
No doubt. 
	
	
	

Date: 24 June 1981 14:37-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.FATEMAN at MIT-MC
cc: MACSYMA-I at MIT-MC

Don't you see, a VAX with a couple meg bytes of memory is not
enough to run even ONE macsyma. In order to have time-sharing
of the same efficiency at MC you need enough memory for
the entire operating-system to be in-core, the entire lisp-system
to be in-core, and all the macsyma you are using to be in-core.
By in-core I mean essentially NO page faults.

MC has this. Right now we are running 18 macsyma's just about
at the limit of the pdp-10 address space, and people aren't
just staring at the screen, they are getting bursts (a minute
here and there), of 30-50% of the machine, and most are
averaging 7% over the long haul. Response is very good
when there isn't any overhead from the operating system,
paging, etc, and on MC that is most of the time. 
Now=> all this changes when somebody runs TEX at the same time
 COMSAT is updating the inquir database, or the GLP is running.

Realize that MC has about a factor of FIVE more memory
than the "couple of meg" you talk about a reasonable VAX
having. 

-gjc

Date: 24 June 1981 12:59-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  perhaps an obvious observation..
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 24 Jun 1981 07:26:02-PDT
    From: CSVAX.fateman at Berkeley
    To:   GJC
    cc:   macsyma-i
    Re:   perhaps an obvious observation..

    our macro definitions are much smaller in Franz, and the address space
    is much bigger on the VAX
    ...
    maybe you should debug on the VAX?

Ah me. I'm debugging a combination of numerical and symbolic codes,
so I want my number-crunching lisp optimized and compiled,
this works just fine on the PDP-10, but I want my symbolic stuff
small and correct, but not so fast.

According to your figures, Franz lisp and the VAX are too slow for me
to debug interactive numerical programs. And the amount of gross hacks
I would need to have my symbolic macros produce something like "C"
code is greater than the amount of hacking to produce BLISS-32 code,
(BLISS being a value-oriented typeless language, just as lisp is), or
even Lispm-Microcode.

Now, maybe you were too modest in your published figures.  I don't
know, I asked for an account on your VAX, so I could quickly try out
things in "the best possible environment," so I could tell if it was
worth the work to duplicate your VAX system at MIT; but you said you
weren't convinced you could afford to pay for the account.

As it is, I *CAN* debug on MC, now. In the time it took you
to come up with your "perhaps obvious observation," I
wrote a set of small FSUBRS, that do what the Macros I was complaining
about do. [I still use the macros in the compiler!]

The *PROBLEM*, was simply that a lot of maclisp macro-code is
actually being written with the VAX in mind, and not the PDP-10.
So, a lot of HAIR is being put in to optimize out the taking of
extra CAR's and CDR's here and there, and the extra pushing of
stack frames. Worse than that is that the optimizers themselves
are being "optimized" (i.e. written in totally hackish ways).

On the PDP-10 you don't need that hair, because the machine was born
to run maclisp, MC has lots of nice memory, life is fast and
fun, even with 31 users and 15 macsymas.

Ah me, to break the KL-10 habit, its going to take something very nice.

-gjc


Date: 24 Jun 1981 07:26:02-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Subject: perhaps an obvious observation..
Cc: macsyma-i@mit-mc

our macro definitions are much smaller in Franz, and the address space
is much bigger on the VAX
...
maybe you should debug on the VAX?

Date: 24 June 1981 09:49-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

Jeff, I don't want to sound alarming, but if we are going to
continue to use the maclisp interpreter for debugging macsyma,
well, our macro-land is going to have to be reworked.
The size of even the most basic macros, like LET and DEFUN,
has grown incredibly since the time CWH et. al. universalized
the macro-environment. These tools, instead of providing
syntactic sugar, provide optimizing compilers. The PROBLEM:
[1] you don't need an optimizing compiler in the interpreter.
[2] there are at least 3 or 4 of these "compilers"
[3] the "compilers" produce incorrect code in many cases anyway.

-gjc

Date: 23 June 1981 15:07-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 06/23/81 11:15:12
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   I've demo'd the Macsyma on EE to a couple EE dept profs,
   the first thing they do is get bugged about the lack of
   rubout-processing. Really. I think we ought to flush the EE
   macsyma if it isn't up to standards.
This is a decision for JM to make.
   
   Be that as it may, how is the XX version? Did you figure out
   a good way to determine terminal type? I could use some hacks
   for that in some other programs.
The XX version does not have rubout-processing as of yet.  
And, sigh, no hacks for terminal type.

Date: 23 June 1981 11:15-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 23 June 1981 05:48-EDT
    From: Jeffrey P. Golden <JPG>
    To:   GJC
    cc:   MACSYMA-I

       GJC@MIT-MC 06/22/81 10:22:56
       ...the macsyma on EE...
    I might point out that by order of JM we are not maintaining the 
    MACSYMA on EE.  He wanted to give them a MACSYMA as a one time shot 
    and that was that.  The official Tops20 MACSYMA for developmental 
    purposes is on XX.  I.e. the one on EE is version 291.  XX has the 
    current version, 297.  And the one on XX is only for testing 
    purposes, not for real use.  Laboratory resource crunch and all that.

Yeah, but I've demo'd the Macsyma on EE to a couple EE dept profs,
the first thing they do is get bugged about the lack of
rubout-processing. Really. I think we aught to flush the EE
macsyma if it isn't up to standards.

Be that as it may, how is the XX version? Did you figure out
a good way to determine terminal type? I could use some hacks
for that in some other programs.


Date: 23 June 1981 05:48-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 06/22/81 10:22:56
   ...the macsyma on EE...
I might point out that by order of JM we are not maintaining the 
MACSYMA on EE.  He wanted to give them a MACSYMA as a one time shot 
and that was that.  The official Tops20 MACSYMA for developmental 
purposes is on XX.  I.e. the one on EE is version 291.  XX has the 
current version, 297.  And the one on XX is only for testing 
purposes, not for real use.  Laboratory resource crunch and all that.

Date: 23 June 1981 01:25-EDT
From: George J. Carrette <GJC at MIT-MC>
To: BUG-MACSYMA at MIT-MC
cc: MACSYMA-I at MIT-MC

Something is really amiss. I'm running out of address space
running code which compiles into a mere 395 words.
I'm running out of space while requesting BIGNUM space,
yet I know I don't use any bignums, also, I run out
faster when I load the debugger first, and then the
code I want to debug.

Anybody try to debug interpreted code on MC lately?


Date: 23 June 1981 00:44-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: CFFK at MIT-MC, MACSYMA-I at MIT-MC

    From: CSVAX.fateman at Berkeley

    aplot2 doesn't work on UNIX, either.  But we have replaced it with something
    which interfaces to the unix plotting utilities (2 and 3 D).  I doubt that
    it would work on Tops-20;  it might work on multics, I suppose.

How can I look at this software?

Date: 22 Jun 1981 16:35:05-PDT
From: CSVAX.fateman at Berkeley
To: CFFK@MIT-MC, GJC@MIT-MC
Cc: MACSYMA-I@MIT-MC

aplot2 doesn't work on UNIX, either.  But we have replaced it with something
which interfaces to the unix plotting utilities (2 and 3 D).  I doubt that
it would work on Tops-20;  it might work on multics, I suppose.

Date: 22 June 1981 17:16-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

Is it possible to for me to get an account on the Berkeley machine
for the purposes of looking and software and documentation?

Date: 22 June 1981 10:22-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: CFFK at MIT-MC, MACSYMA-I at MIT-MC

    From: Jeffrey P. Golden <JPG>
    Any ideas on how we go about getting a PLOT2 package working on Tops20?

The only system-depended code seems to be in CFFK;TEKPLT,
it has quite a few (SYSCALL ....)'s that could be replaced
by (DO-WITH-TTY-OFF ...), etc. The OTHER problem is SYSCALL's
used to determine TERMINAL-TYPE. You know, TERMINAL-TYPE
seems to be a problem in general on tops-20, the macsyma on EE
doesn't use correct rubout processing when you come in from
a video terminal. Anyway, it should be easy to convert PLOT2,
so that you have to use PLOTMODE to tell it what you are.

-gjc

Date: 21 June 1981 08:34-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC, CFFK at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 06/20/81 16:34:33
   To: CFFK at MIT-MC
   CC: MACSYMA-I at MIT-MC
   Do you know who put this in CFFK;APLOT2?
   (IF (EQ (STATUS OPSYS) 'TOPS-20)
       (MERROR "PLOT2 doesn't work on TOPS-20"))
I took this out.  I was planning to deal with this in a different way 
on Tops-20.
The code actually uses ERROR, and not MERROR.  Perhaps this should be 
changed?
Any ideas on how we go about getting a PLOT2 package working on Tops20?

Date: 20 June 1981 16:34-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CFFK at MIT-MC
cc: MACSYMA-I at MIT-MC

Do you know who put this in CFFK;APLOT2?
(IF (EQ (STATUS OPSYS) 'TOPS-20)
    (MERROR "PLOT2 doesn't work on TOPS-20"))

-gjc

Date: 20 June 1981 15:41-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: JPG at MIT-MC
cc: GJC at MIT-MC, MACSYMA-I at MIT-MC

    Date: 19 June 1981 18:14-EDT
    From: Jeffrey P. Golden <JPG at MIT-MC>

    I don't think this unnecessary level of indirection is a good idea.
    I think you should use e.g. MACSYMA-MACRO-MODULE and 
    MACSYMA-USER-TRANSLATE-MODULE instead.

I agree with Jeff on this issue.  I realize the information may be redundant
with that stored in the files database, but it is useful to have for other
reasons.

Altenate syntax:  (MACSYMA-MODULE DEFINE MACRO)
or:		  (MACSYMA-MODULE CRUNCH TRANSLATED)

so that one need only clobber the symbol MACSYMA-MODULE ...

Date: 19 June 1981 18:34-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: MACSYMA modularity
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

   RJF@MIT-MC 06/19/81 13:25:09
   To: GJC at MIT-MC
   CC: MACSYMA-I at MIT-MC
   OF COURSE IT BREAKS THINGS.
You don't say how.  The scheme GJC is recommending is important, yet trivial 
to implement.  Essentially, he is just moving the information about the 
INCLUDEFed file out of the source file into a second file that interprets 
"macsyma-module".  Hence, we all win from now on.  You don't actually say 
what your problem is.

Date: 19 June 1981 18:14-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 06/19/81 12:45:38
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
       JPG  Question: What are your plans for replacing other INCLUDEFs, 
       specifically (on MC) LIBMAX;MPRELU for Macsyma Macro files, and 
       LIBMAX;TPRELU for TRANSL-generated files?
   They are going to get a MACSYMA-MODULE declaration too, but with extra
   info stored someplace (e.g. Maxdoc;files >), that it is a macro file.
I don't think this unnecessary level of indirection is a good idea.
I think you should use e.g. MACSYMA-MACRO-MODULE and 
MACSYMA-USER-TRANSLATE-MODULE instead.  I think the fact that there is a 
difference as to which "prelude" scheme is used should be recorded in 
the source file; I think this makes what is going on much clearer to the 
programmer; and I think that this would parallel the current 
PRELUD/MPRELUD/TPRELUD scheme and therefore be less likely to break things 
no matter who is picking up the source file where.

Date: 19 June 1981 13:25-EDT
From: Richard J. Fateman <RJF at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

OF COURSE IT BREAKS THINGS.
You have a VAX system at MIT.  If you were concerned about Macsyma,
instead of particular implementations of interest to the subset of
people located at (or totally dependent upon) mit-mc or other MIT
computers, you would realize this, and stop this brownian motion.
Or make sure you can re Make  vaxima with your changes.  Make is
a UNIX program.


Date: 19 June 1981 12:45-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

    From: Jeffrey P. Golden <JPG>

    Question: What are your plans for replacing other INCLUDEFs, specifically 
    (on MC) LIBMAX;MPRELU for Macsyma Macro files, and LIBMAX;TPRELU for 
    TRANSL-generated files?

They are going to get a MACSYMA-MODULE declaration too, but with extra
info stored someplace (e.g. Maxdoc;files >), that it is a macro file.
Then, code like that used for the Macsyma->lisp translator will make
all macros autoloading. This will help in debugging of interpreted
code on MC, and also in the cross-compilation.

-gjc

Date: 19 June 1981 06:03-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 06/18/81 12:54:50
   The thing that temporarily takes place of the PRELUDE file on ITS
   is in "LIBMAX;MODULE DEF" and a file which uses it is "TRANSL;TRDEBG".
I tried this out and it works beautifully, so I heartily approve.
I'm not sure what RJF's concern was as this clearly is a step forward.
I think the INCLUDEF scheme was a win, but the MACSYMA-MODULE approach 
is clearly better as the INCLUDEF specification does have to be changed 
from time to time, although luckily for us, so far infrequently, and that's 
always a pain, whereas now the dependency is outside the source file 
where it belongs which should lead to fewer future changes of 200 
source files at one time, and one can easily tailor the MACSYMA-MODULE 
macro to one's needs.

Question: What are your plans for replacing other INCLUDEFs, specifically 
(on MC) LIBMAX;MPRELU for Macsyma Macro files, and LIBMAX;TPRELU for 
TRANSL-generated files?

Date: 18 June 1981 23:05-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

INCLUDEF is not sufficent for LISPM. The present INCLUDEF header
is not sufficient for CROSS-COMPILING, MC => NIL.
There is nothing fishy here at all. I've just decided that the
old way of compiling a macsyma source file that JPG used on ITS,
loading a complr init-file first, is sufficiently powerfull and very
convenient for all use. For example, GSB has been doing this kind
of thing in his LargeSystemBuilding tools.

    From: CSVAX.fateman at Berkeley

    As for bringing Macsyma up under NIL, in general I think it is a
    fine thing to do, but NOT BY BREAKING ANYONE ELSE'S STUFF!

Please. Make a real statement! Q: Does this break you?
Q: What is the work involved in the fix?

There simply isn't time for me to be interpreting your wish-washy statements,
even if they are in all caps.

-gjc

Date: 17 Jun 1981 21:09:20-PDT
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc

Since the present header IS sufficient for running in both VMS and UNIX
Franz Lisp, not to mention several other systems, it would suggest that
something is fishy with NIL.  (actually, the file-naming conventions in
VMS are  fairly gross.  If that is what you aimed at, my sympathies.
As for bringing Macsyma up under NIL, in general I think it is a
fine thing to do, but NOT BY BREAKING ANYONE ELSE'S STUFF!

Date: 17 Jun 1981 21:09:20-PDT
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc

Since the present header IS sufficient for running in both VMS and UNIX
Franz Lisp, not to mention several other systems, it would suggest that
something is fishy with NIL.  (actually, the file-naming conventions in
VMS are  fairly gross.  If that is what you aimed at, my sympathies.
As for bringing Macsyma up under NIL, in general I think it is a
fine thing to do, but NOT BY BREAKING ANYONE ELSE'S STUFF!

Date: 18 June 1981 21:13-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 16 Jun 1981 19:28:04-PDT
    From: CSVAX.fateman at Berkeley
    To:   macsyma-i

    to GJC: I could certainly object to a change which affects some 200 files
    for no apparent reason.  

Big deal, I object to a change to ONE file for no apparent reason.
I also object to mail from fateman with no constructive purpose.

    Frivolous changes make it far easier to justify
    cutting off our tracking efforts.  

Are you in the market for a justification? To whom do you have to justify?

      I am not saying this change is frivolous, but if it is, you have my
      opinion.

In other words, you aren't saying anything, what a waste of time.
I could have spent two more minutes working on the garbage collector tonight.

Is this what they call the Turing test?

-gjc

Date: 18 June 1981 21:01-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CWH at MIT-MC
cc: JIM at MIT-MC, MACSYMA-I at MIT-MC

The lisp compiler on ITS takes an "-eval" argument too, (in an obscure
way), and many people make little midas jobs to bootstrap a "CL" to be
a "FOOCL" all the time. (e.g. "VAXMAX;VAXCL MIDAS").  I really see
that as equivalent to dumping out your own compiler.

-gjc

Date: 18 June 1981 19:59-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: JIM at MIT-MC
cc: MACSYMA-I at MIT-MC

    How are we set on Multics for doing this? You dump out a compiler
    no?

Regarding Multics: There is absolutely no need to dump out a compiler.
lisp_compiler takes a "-eval" control argument which allows you to pass
a string to the interpreter before beginning the compilation.  So you
define a command

    macsyma_compiler

which expands into

    lisp_compiler -eval "(load 'macsyma_setup)"

where the macsyma_setup file contains the definition you mentioned.  Do
this using the transfer_vector_compiler.  If you don't know how, see me.
    
    I am just now getting INCLUDEF into the Multics Compiler along with 
    eof-compile-queue. While I now feel somewhat comfortable adding those kinds
    of features to the compiler, can now dump out a compiler, make a lisp 
    interpreter etc I don't want a steady diet of it.

No changes to the lisp_compiler are necessary.  In fact, such changes
would be wrong.

The advantage of using INCLUDEF is that the standard Lisp compiler can
be used to compile Macsyma source files.  The disadvantage is that all
the sources must be updated whenever Macsyma is taught about a new file
system, i.e. a new clause is added to the INCLUDEF.  I'm not convinced
that Macsyma will be ported to new file systems frequently enough to
warrant the change, but if someone else is going to do the work, I have
no objections to it.

    Date: 17 June 1981 23:33-EDT
    From: George J. Carrette <GJC at MIT-MC>
    
    The facility is called MACSYMA-MODULE because it follows from
    a DEFINE-PROGRAM I have.

Perhaps we should consider using someone else's wheel.  Doesn't LSB hack
all of this? 

    Just to be on the safe side, when he is ready to go, maybe he should just 
    mung one source file so that we can try it out, and then if we like it, 
    he can go ahead as he wishes.

This sounds like the right thing to do.

Date: 16 Jun 1981 19:28:04-PDT
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc

to GJC: I could certainly object to a change which affects some 200 files
for no apparent reason.  Frivolous changes make it far easier to justify
cutting off our tracking efforts.  
  I am not saying this change is frivolous, but if it is, you have my
opinion.

Date: 18 June 1981 13:49-EDT
From: James E. O'Dell <JIM at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 18 June 1981 12:54-EDT
    From: George J. Carrette <GJC>
    To:   JIM
    cc:   MACSYMA-I

    The thing that temporarily takes place of the PRELUDE file on ITS
    is in "LIBMAX;MODULE DEF" and a file which uses it is "TRANSL;TRDEGB".
    The things that are going to be very different on MULTICS are
    the function "ANNOTATE-UNFASL-FILE" and the stuff you put in the
    variables "COMPILER-OPTIONS" and "EVALUATOR-OPTIONS"

    -gjc
Plus the initial compilation environment? Are there tools for establishing
that?

Date: 18 June 1981 12:54-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JIM at MIT-MC
cc: MACSYMA-I at MIT-MC

The thing that temporarily takes place of the PRELUDE file on ITS
is in "LIBMAX;MODULE DEF" and a file which uses it is "TRANSL;TRDEGB".
The things that are going to be very different on MULTICS are
the function "ANNOTATE-UNFASL-FILE" and the stuff you put in the
variables "COMPILER-OPTIONS" and "EVALUATOR-OPTIONS"

-gjc

Date: 18 June 1981 10:21-EDT
From: James E. O'Dell <JIM at MIT-MC>
Subject:  Macsyma modularity definition
To: JPG at MIT-MC
cc: GJC at MIT-MC, MACSYMA-I at MIT-MC

O.K. if GJC could mung just one file, and then tell me about the
support code needed so I can try it out on Multics I'd be happy.

I've read GJC's objections to INCLUDEF and understand them.

Date: 18 June 1981 06:16-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: ERREXP
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

As I have said in previous mail to MACSYMA-I (on 11/26/80), the ERREXP 
scheme was only meant to be temporary, until something better came 
along.  If you are offering something better, fine, let's use it, 
and I'll phase out all use of ERREXP.  If you want to change the function 
$ERROR in some way, fine, go ahead.  If you want to move it to 
MAXSRC;MERROR, fine with me.

Date: 18 June 1981 05:54-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: Macsyma modularity definition
To: JIM at MIT-MC
cc: MACSYMA-I at MIT-MC, GJC at MIT-MC

GJC's scheme is ok by me.  I told him, though, that he should do 
it in a way that doesn't require compiling all of MACSYMA, e.g. 
by doing the minor edit and then dumping out the sources to the same 
version number as they had (using some automatic scheme for doing this).
Obviously he will set things up so that we can load the source files 
directly into macsyma, and it should also be possible with a minor hack 
to compile files with a CL rather than with MCL when necessary - e.g. 
loading the prelude file by hand (e.g. when getting around a JONL bug 
or whatever).  I see no problem with these.
Just to be on the safe side, when he is ready to go, maybe he should just 
mung one source file so that we can try it out, and then if we like it, 
he can go ahead as he wishes.

Date: 17 June 1981 23:33-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  macsyma modularity definition.
To: JIM at MIT-MC
cc: JPG at MIT-MC, MACSYMA-I at MIT-MC

A global change to all the macsyma source file headers is
needed in any case. The present header is not general enough for
running in both VMS and UNIX NIL. INCLUDEF puts you at once at the
mercy of the thing which is most variable from system to system,
the file-conventions. 

The facility is called MACSYMA-MODULE because it follows from
a DEFINE-PROGRAM I have.

(DEFINE-PROGRAM MACSYMA) ; creates a structure and defines macros.
; here is some info to put into the macsyma structure.
(DEFINE-MACSYMA FOOBAR CRUFTY "YES" NEEDED "MAYBE")
; says: "here is that FOOBAR module I was telling you about"
(MACSYMA-MODULE FOOBAR)

-gjc

Date: 17 June 1981 22:04-EDT
From: James E. O'Dell <JIM at MIT-MC>
Subject:  macsyma modularity definition.
To: GJC at MIT-MC
cc: JPG at MIT-MC, MACSYMA-I at MIT-MC

    Since on both the lisp machine and the pdp-10 we set up the
    compilation and runtime environment for macsyma beforehand
    with a DEFINE-SYSTEM of some kind I'd like to change the INCLUDEF header
    to  "(MACSYMA-MODULE NAME)"

    How are we set on Multics for doing this? You dump out a compiler
    no? [Which could  have 
         (DEFPROP MACSYMA-MODULE MACSYMA-MODULE-MACRO MACRO)
         (DEFPROP MACSYMA-MODULE-MACRO "foobar" AUTOLOAD)]

    In old Macsyma-I mail RJF prefered this method over the
    INCLUDEF one, so there could be no objection from there.

    JIM: Can you give the go-ahead on this change?
First of all no, I cannot give the go-ahead on this change. I think that 
another round of global changes to the sources demands some planning and
I for one would like to see plans before hacking again. 

Why does this facility have to be named macsyma-module ?
I am just now getting INCLUDEF into the Multics Compiler along with 
eof-compile-queue. While I now feel somewhat comfortable adding those kinds
of features to the compiler, can now dump out a compiler, make a lisp 
interpreter etc I don't want a steady diet of it.

My impression of INCLUDEF is that given an appropriate INCLUDE file its
job was to contain dependancy information in such a way that any system
that supported INCLUDEF could load macsyma files into a bare LISP.

Won't the MACSYMA-MODULE declaration be a step backwards?

I would also like to hear JPG and CWH's comments.

Date: 17 June 1981 21:47-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

There are some slight problems with the continued use of
the ERREXP style. Compare [A] (taken from SUPRV) vs. [B] 

[A] (SETQ $ERREXP FILE) (MTELL "Not a proper filename") (ERREXP)
[B] (MERROR "Not a proper filename: ~M" FILE) 

1) "A" turns into 5 instructions, "B" gives 2 instructions.
2) "A" Has twice as much system overhead for getting the message strings.
3) On a video terminal the actual error message will be lost forever
   if the screen is cleared. (e.g. because the person wants to
   go to emacs.)
4) In the case of LOAD of a batch file, or batch with TTYOFF:TRUE
   (very common), or TRANSLATE_FILE, the error message will
   NEVER been seen, and be impossible to recover, because the
   actual content is in the MTELL, not in the call to MERROR.
5) With "FILEDEFAULTS(A+B)" [A] actually generates a LARGER error
   message, and one with less informational content, than [B].

I have added a switch VERBOSE_ERROR to the MERROR implementation.
Right now if set to FALSE things PRINT much like the ERREXP style.

It would be good if the user-level $ERROR function could
cons up a call to MERROR. That way we can get ASB and ADK
to stop using ERREXP too.

p.s. One suggest way VERBOSE_ERROR:FALSE could work:

(MERROR "~:@M doesn't work on ~M with ~M" 
        <atom> <huge expression>  <huge expression>)

Prints :

FOOBAR doesn't work on ERREXP1 or ERREXP2

If something is too big to print, (simple depth measure perhaps),
then it gets replaced by ERREXP*.


Date: 17 June 1981 13:58-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JIM at MIT-MC
cc: BUG-MULMAX at MIT-MC, MACSYMA-I at MIT-MC, GCOOK at MIT-MC

GCOOK needs a user-level callable SUSPEND function,
working semantically just like the one on ITS.
SUSPEND("foobar"); closes all connections with the outside
world, then dumps itself to create the command "foobar"
upon resumption all the connections are sent a re-initialization
message. You can even be in the middle of a BATCH or WRITEFILE,
and things will work. Needless to say, it isn't quite right
because the DISPLA package switches and other terminal-depended
things presently don't get re-initialized properly, because
the information needed is in ALJABR;LOADER >, and somewhat
inacessable.

What you can come up with?

Date: 16 June 1981 18:38-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: macsyma modularity definition.
To: JIM at MIT-MC, JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

Since on both the lisp machine and the pdp-10 we set up the
compilation and runtime environment for macsyma beforehand
with a DEFINE-SYSTEM of some kind I'd like to change the INCLUDEF header
to  "(MACSYMA-MODULE NAME)"

How are we set on Multics for doing this? You dump out a compiler
no? [Which could  have 
     (DEFPROP MACSYMA-MODULE MACSYMA-MODULE-MACRO MACRO)
     (DEFPROP MACSYMA-MODULE-MACRO "foobar" AUTOLOAD)]

In old Macsyma-I mail RJF prefered this method over the
INCLUDEF one, so there could be no objection from there.

JIM: Can you give the go-ahead on this change?

-gjc


Date: 16 June 1981 00:02-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: MEVAL
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

Presently MEVAL has a clause to use the lisp MACRO property.
As lisp macros expect a lisp FORM and not a macsyma FORM
this couldn't possibly work, and is in fact not used by any
code I know of.

The clause should be removed because:
[1] The MMACRO property makes it obsolete.
[2] Iteracts bady with a simple fexpr compatibility scheme I have in
    mind for NIL Macsyma.

-gjc

p.s. Not unless you know of anything which depends on the present
behavior...

Date: 8 June 1981 13:45-EDT
From: George J. Carrette <GJC at MIT-MC>
To: ADK at MIT-MC
cc: JPG at MIT-MC, MACSYMA-I at MIT-MC

I made two trivial changes to JPG;MLISP which you may try out by
LOAD("MAXSRC\;MFOO");

[1] In MEVAL1 I changed 
    "(SETQ U (BOUNDP (CAAR FORM)))"
         to
    "(IF (EQ (TYPEP (CAAR FORM)) 'SYMBOL)
         (SETQ U (BOUNDP (CAAR FORM)))
         (RETURN (MEVAL1-EXTEND FORM)))"

The TYPEP check is really needed anyway if an error in calling
BOUNDP is to be avoided.

[2] A clause to ARRSTORE added
    "((EQ (TYPEP ARY) 'ARRAY)
      (ARRSTORE-EXTEND ARY (MEVALARGS (CDR L)) R))"

-gjc

Date: 6 June 1981 16:15-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  TRANSL bugs.
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

Ah, I thought the problem might have to do with the length and complexity
of compilation-related bugs. It would be good if users could read
these though, especially when they are explainations about
CRYPTIC things the maclisp compiler generates. If there were only
a program to automatically distil the amount of GLOB that gets
generated for these kind of bugs into the essentials...dream on.

-gjc

Date: 6 June 1981 03:51-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 06/05/81 16:33:21
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
       ADK 06/05/81 13:59:38
       For your information:
           JPG@MIT-MC 06/04/81 02:01:24
           I think you should send bugnotes concerning MACSYMA translation and 
           compilation directly to GJC as he handles them.  There is no need 
           for you to send to MACSYM MAIL.  He'll forward anything to MACSYM 
           MAIL as necessary.
   Why are translation-related bugs any different than INTEGRATE or TAYLOR 
   bugs? 
INTEGRATE and TAYLOR bugs tend to stay unfixed for long periods of time, 
whereas you have been superb at maintaining TRANSL and responding quickly 
to mail sent to you wrt it and at quickly fixing TRANSL-related bugs.
I just thought my note to ADK was good advice tactically speaking and it 
was really not that important.  Sending TRANSL notes directly to you works 
very well for ASB, and as these notes can get very lengthy, I did not see 
that they need to go first to MACSYM MAIL.

Also, on 5/16/81, DEFBOB sent a TRANSL bugnote to MACSYM MAIL.  You fixed 
that bug on 5/17, but only sent mail to DEFBOB about that fix.  You did 
not inform either me or MACSYM MAIL that the bug had been fixed.
BMT, JIM, and WGD who fix INTEGRATE and TAYLOR bugs have NEVER failed 
to send me a note when they fix a bug sent to MACSYM MAIL.  If you would 
do likewise, there would be no problem here.

Finally, RJF's speculation is entirely false.  TRANSL, INTEGRATE, and 
TAYLOR are obviously all essential to the MACSYMA effort.  He seems 
to be putting GJC in the category as simply a "user" when GJC has 
written a lot of valuable MACSYMA system code.  Frankly, I'm not sure 
what to make of RJF's speculation.

Date: 5 Jun 1981 15:39:54-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Cc: macsyma-i@mit-mc

Perhaps because integrate and taylor were written by members of the
mathlab group, there is a bigger commitment to maintaining them.
Bugs in other user-written code are generally not fixed by JPG & co.

(Just speculation, of course.)

Date: 5 June 1981 16:33-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 06/05/81 13:59:38
    From: ADK

    For your information:
    ----------
        JPG@MIT-MC 06/04/81 02:01:24
        I think you should send bugnotes concerning MACSYMA translation and 
        compilation directly to GJC as he handles them.  There is no need 
        for you to send to MACSYM MAIL.  He'll forward anything to MACSYM 
        MAIL as necessary.

This is a very interesting policy mechanism, why are translation-related
bugs any different than INTEGRATE or TAYLOR bugs? 

-gjc

Date: 2 June 1981 10:22-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC, RWK at MIT-MC

    Date: 1 June 1981 07:00-EDT
    From: Jeffrey P. Golden <JPG>
    To: RWK
    cc: MACSYMA-I

    I changed LIBMAX;ERMSGC to use "!" rather than "." in case of string
    file conflicts.  This way Twenex can use the string files with less
    hassle.  (It doesn't like "." in filenames.)

I recomend that we adopt a program for transporting of Macsyma to
Twenex like that used for Maclisp. That way direct transformations can
be made instead of ad-hoc patches to MC's system for the sake of
Twenex. 

In this case, since Twenex has "version-numbers" for FASL files too,
(not just for source files) it would be most natural to map into that
instead of using "!". I bet that was what RWK was thinking about when
he picked "." since version numbers for FASL files was just what
was needed.

-gjc

Date: 1 June 1981 07:00-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RWK at MIT-MC
cc: MACSYMA-I at MIT-MC

I changed LIBMAX;ERMSGC to use "!" rather than "." in case of string 
file conflicts.  This way Twenex can use the string files with less 
hassle.  (It doesn't like "." in filenames.)

Date: 30 May 1981 06:09-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [ASB: 2A]
To: MACSYMA-I-FILE at MIT-MC

Date: 27 May 1981 11:47-EDT
From: Richard Brenner <ASB>
To:   JPG
cc:   KMP, CWH, ASB
Re:   2A

I don't claim to know where to draw the line;
if you knew where to draw the line, you probably
would have done this already.  I guess there are cases that
make it difficult.
But let me bravely try to refine my suggestion a bit.
Suppose it were allowed only for the case of integers.
That would cover a lot of the cases, and offer a fair
amount of uniformity.
Are there any other problem cases that arise? (besides 2.b-10)

Date: 27 May 1981 18:15-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [ASB: It began like this...]
To: MACSYMA-I-FILE at MIT-MC

Date: 26 May 1981 23:34-EDT
From: Richard Brenner <ASB>
To:   KMP
cc:   CWH, GJC

Just spoke with CWH about possible change to parsing that would allow:

(C1) 2A;
(D1)				   2 A

and generalizations thereof.  Would it be possible to add this to your new
supervisor?  I believe it would be compatible, but haven't really
thought about it.
If a person wanted to try out your new scheme, what would be the best way to
do that?

Date: 27 May 1981 17:43-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Observations on evaluators
To: GJC at MIT-MC
cc: JPG at MIT-MC, CWH at MIT-MC, ASB at MIT-MC,
    MACSYMA-I-FILE at MIT-MC

    Date: 27 May 1981 14:10-EDT
    From: Richard Brenner <ASB at MIT-MC>

    Ok, I think I found something that makes it hard to implement, but I
    hope not. One wouldn't want the 2A thing to work only for atomic
    symbols, because that would decrease the total uniformity too much. So
    it probably shouldn't be done unless 2F(A) can also be shown to be
    consistently parse-able into 2*F(A). And then there are possibilities
    like 2(A+B).  Now that one gets tricky, I would think. This sure gets
    messy fast.  I have this feeling that I am blundering over
    well-blundered ground. Anyway I played a bit with PARSE FASL. The A^2C
    is ok, and so is A/2C actually.  People might take a little time to get
    used to these things, but I think the results are definitely more
    readable.  On the other hand, it might be possible to make a case that
    the rules should be the same as for an untyped "*".  I'm not sure which
    is best.
-----
ASB is correct in assuming that additional hair in the parser is the only
way to handle the 2F(A) problem. But,...

Suppose we had been using functions in value cells? Suppose functions were
recognizable data objects. Then we might have had

	exp*LAMBDA([X],exp1,exp2)

turn into

	LAMBDA([G0001],exp*(LAMBDA([X],exp1,exp2)(G0001)))

so then we'd still win in ASB's problem case because

	2*F(A) => 2 * ( LAMBDA([X],...)(A) )

and

	2F(A) => LAMBDA([G0001],2*(LAMBDA([X],...)(G0001)))(A)

which is equivalent.

So I'm suggesting nothing here. Merely observing how a different evaluation
mechanism would have made the implementation of this scheme into the parser
a lot less hairy and a lot less subject to question.
-kmp

Date: 27 May 1981 13:15-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: ASB at MIT-MC
cc: CWH at MIT-MC, JPG at MIT-MC, GJC at MIT-MC,
    MACSYMA-I-FILE at MIT-MC

I took out the symbol symbol -> symbol*symbol case. It is wierd because

	A^B C => A^(B*C)
	A^B*C => (A^B)*C

So only fixnums work. This still means that

	A^2 B => A^(2*B)

which is ok because at least you can write A^2B which is more readable
than A^(2*B) ... But I think the right thing if we wanted to do this might
be to make scan tokenize 
	2A
differently than it would
	2 A
so that 2 A was a parse error but 
	2A
had some invisible highly sticky multiplicative character between the 2 and
the A. 


Date: 27 May 1981 12:50-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: ASB at MIT-MC
cc: GJC at MIT-MC, KMP at MIT-MC, CWH at MIT-MC, JPG at MIT-MC,
    MACSYMA-I-FILE at MIT-MC

I made a test library for you to play with. LOADFILE(PARSE,FASL,MAXSRC);
to get ahold of it. Please do *not* write code that depends on this parse
syntax, as there is a fair chance it will never go in. But freel free to 
play with it interactively and see if it wins. The variable 
IMPLICIT_MULTIPLICATION_OK (default FALSE) if set to true will allow the
following two special cases in parsing:

  symbol symbol => symbol*symbol
  fixnum symbol => fixnum*symbol

Note that a side-effect of this is that 3.E5 must now be handled in a different
way than it used to be, so spaces around the E are acceptable. eg, 3. E 5 
will parse as 3.0E+5 ... Let us know how much difference it makes to the
feel of things and if you find any oddities in its behavior, let us know that,
too. Please don't advertise this around for now. Thanks.

Date: 26 May 1981 10:11-EDT
From: George J. Carrette <GJC at MIT-MC>
To: "(FILE [DSK:MAXDOC;MAIL IMPLEM])" at MIT-MC

    Date: 25 May 1981 16:35:38-PDT
    From: CSVAX.fateman at Berkeley
    To:   GJC
    Re:   meval

    yeah, probably boring.  Unless there is a mapping from the new
    representation to lists, you will not be able to mung function
    definitions with part, inpart, substpart.  You may not be
    able to read them, either.  This may not be a disadvantage, if
    it means people will have to document code or make the source
    available as text.


Date: 25 May 1981 16:33:50-PDT
From: CSVAX.fateman at Berkeley
To: macsym@mit-mc
Subject: The Culprit of powerseries(log(sin(x)),x,0)
Cc: macsyma-i@mit-mc, rwg@mit-mc

is really INTEGRATE in a subtle way.
let y:sum(x^(i-1),i,0,inf);
then integrate(y,x);
asks if i is zero or nonzero.
if you answer zero, it asks is x-1 pos neg or zero, allowing you
to get answers of inf, minf, 0.
if you answer nonzero, you get an answer which involves division by
zero instead of log(x).  The answer is
of course, log(x)+ sum(x^i/i,i,1,inf).
Never do you get that.

What you need is for integrate to return

if i=0 then log(x) else x^i/i

and for
sum(  if i=0 .... , i, 0, inf)  to simplify to log(x) + sum ....

RZ, why did you not explain this previously?  Or did you?

Date: 25 May 1981 18:43-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: meval
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

I would not say that I propose to "obscure" the relationship
between programs and data, I would say I mean to
"abstract" the relationship.

The big difference between the old macsyma->lisp translator
and the new one is that code produced by the old one
still depended on the fact that variables were represented
as SYMBOLS, and code was represented as LISTS;
while the new one doesn't tie you down to this,
because it lets the representation be whatever the compiler
on a given system wants to use.

Maybe this is too subtle or obvious or something, sorry if I'm boring
anybody.

-gjc

Date: 25 May 1981 15:09:03-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Cc: MACSYMA-I@MIT-MC

aha, then your point is that programs should be represented as, say,
binary program space.  And then MEVAL would win because code could
be shared.  Even better, if code is location independent, say a sequence
of byte-codes, it could be referenced by any number of users with differ
ent core images.
   This seems not to be particularly large-address-space dependent,
and not particularly relevant to single-user machines.  Most people
writing lisp systems would agree with your general point that
interpretation of lists as a representation of programs is not
the fastest way of doing things.  It does have the marvelous
property of being data.  In macsyma, the relationship program=data
is obscured.  What you appear to be proposing obscures the relationship
even more.
  I do not know that this is the most important defect in macsyma, though.
Thanks for clarification, in any case.

Date: 25 May 1981 17:36-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

If you represent code as list structure, which is what MEVAL wants,
then sharability and autoloadability are not independant, unless
you have the hardware for position independant list structure, which is
not the case on the VAX, therefore your analysis is invalid. 
-gjc

Date: 25 May 1981 13:27:55-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Subject: MEVAL and address space.
Cc: MACSYMA-I@MIT-MC

I do not understand why you blame MEVAL.  I do not believe you want
position independent list structure. This would then require associative
memory. (Unless you do not mean "address" by "position").  Paging
systems allow some mapping between "address" and "physical location".

pure shared pages and static pages are available on VAX;
although sharing on lisp machines is presumably not an issue;

so we are left with the demand for dynamic linking. I do not see
the need for this in MEVAL (autoload does some of this).

In brief, your hint does not seem to have clarified  the issue for me.

Date: 25 May 1981 15:52-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: MEVAL and address space.
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

I'll give a hint that should make the problem obvious.

If list-structure on a system can be
[1] pure, stored on read-only pages and shared between users.
[2] position independant, so that it can be mapped into any part
    of the users virtual address space.
[3] Dynamically linked. i.e. referencing a pointer can cause
    automatic initiation of data and mapping in of pages.
[4] static, in the sense that it doesn't count against you
    in garbage collection overhead.

then, given that bugs in the present implementation of MEVAL are fixed,
(i.e. variable binding scheme doesn't allow *CATCH and *THROW to be used,
 ridiculous amounts of consing), one *could* use MEVAL just as well on
Multics and Vax.

On a good large address space multi-user system one gets the four FEATURES
above from compiled code. If you are going to be hacking large programs
you really need them too. [Well, I know a lot of people don't think
dynamic linking is very important, Unix certainly doesn't have it *yet*,
but you won't find too many people at MIT willing to put up with
a system that doesn't have it.]

-gjc


Date: 25 May 1981 09:08:39-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Subject: huh? Meval is good in small spaces for small programs?
Cc: MACSYMA-I@MIT-MC

why does meval not work as poorly in small-address-space environments?
What kind of evidence do you have?  Is it confirmed across ALL large
address systems?  Since one could use only a small part of a large
address space, is this critical?
  Does the cost of meval grow more than linearly with the number
of statements executed?

Date: 25 May 1981 09:56-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  preserving huge investments
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 24 May 1981 21:03:13-PDT
    From: CSVAX.fateman at Berkeley
    To:   GJC
    cc:   macsyma-i
    Re:   preserving huge investments

    outside of PDP-10 macsyma?
    Do you mean Multics, LM,  VAX?
    Gack!
    One way of preserving their investment is to stop changing translation
    and meval (assuming they work the same on the various existing Lisp-like
    implementations).

Fact: MEVAL does not work the same in large-address-space environments.
      The performance is unacceptably poor for large programs.
      So your assumption is wrong. 
Then: What do you do about it?

-gjc

Date: 24 May 1981 21:03:13-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Subject: preserving huge investments
Cc: macsyma-i@mit-mc

outside of PDP-10 macsyma?
Do you mean Multics, LM,  VAX?
Gack!
One way of preserving their investment is to stop changing translation
and meval (assuming they work the same on the various existing Lisp-like
implementations), and then discard this stuff for new development.
  After all, the VAX has a pdp-11 compatibility instruction subset,
why not a macsyma-I compatible meval for the VAX?
  Or you could just translate the stuff into lisp, once and for all.

This should not stand in the way of progress.  It should not even stand
in the way of the opposite.  (If I recall my prefixes, that would be
congress, I guess.)
  Happy Memorial Day.

Date: 24 May 1981 23:51-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  MACSYMA evaluation
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

Jeff, here is the scam on the proposed evaluation changes:
"compilability and understandability," its nothing really
radical, no matter how you interpret what CWH and KMP are saying,
because the fact is that the changes have already been made.
As far as macsyma II goes, well, you can call the user-written
part of macsyma, SHARE*, ODE*, etc. macsyma II if you want, at
least call it macsyma 1.5.

The point is that some users have made huge investments of time
and effort in their codes. We have a duty to preserve that investment,
and make sure it sees the light of day outside of PDP-10 macsyma.

-gjc

Date: 23 May 1981 17:26-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: MACSYMA evaluation
To: MACSYMA-I at MIT-MC

KMP says one should not assume the users are dummies, but that we should 
not ask them what they want to type. (??)  GJC, KMP, and CWH seem (not 
surprisingly, for them) to be proposing radical changes in MACSYMA 
evaluation.  I guess we shouldn't ask the users about this either?
So what if their programs and other MACSYMA usage stop working?
Well, I am not in favor of such radical change for MACSYMA.  On the 
other hand, I think this discussion is good, for our own benefit, and 
for MACSYMA II or whatever, but will that ever get off the ground?

Date: 23 May 1981 17:03-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC, RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 05/22/81 21:12-EDT
   To: CSVAX.fateman at BERKELEY
   cc: BUG-MACSYM at MIT-MC, MACSYMA-I at MIT-MC
       Date: 22 May 1981 08:36:09-PDT
       From: CSVAX.fateman at Berkeley
       To:   GJC
       powerseries(log(sin(x)),x,0) is way off.
       answer "zero" to the question.
   What kind of answer do you want? [Very important question!]
   Is this a reported case? Presumably it should give an error
   when you try it. Just chalk it up to lack of error checking
   I suppose, because it doesn't ask first "is it meaningfull to
   have a powerseries expansion of LOG(U) about U=zero?"
When RZ designed POWERSERIES, he did not intend for this to be an 
error.  E.g. compare with POWERSERIES(LOG(X),X,0); , 
TAYLOR(LOG(X),X,0,5); , and TAYLOR(LOG(SIN(X)),X,0,5); which all 
still work according to RZ's original design.
So you can chalk up the current situation to an incomplete implementation 
and to bugs, several examples of which are noted in the MACSYM mails.

Date: 23 May 1981 16:32-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: POWERSERIES(LOG(SIN(X)/X),X,0)
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

   Date: 22 May 1981 18:30:22-PDT
   From: CSVAX.fateman at Berkeley
   it was reported first in 1976.  I do not know how many people encountered
   it since, because duplicate bug reports get deleted;  at least one (me)
   got burnt in 1980.
Whenever I delete a duplicate bug report, I add the sender's name to 
the original.  So, noting ALJABR;O5MAIL > we see that four people have 
sent it in: STAN, JPG, CMA, RJF.  Now all we have to do is get RZ or 
someone else to fix it.  It worked correctly in the early 1970's as 
it is used as the manual example in version 8 of the manual (Nov. 1975).

