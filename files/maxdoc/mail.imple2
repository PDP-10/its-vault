Date: 23 May 1981 02:02-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
Subject: Some further comments on evaluation
To: MACSYMA-I at MIT-MC

GJC's and KMP's recent remarks about evaluation in Macsyma have been highly
perceptive.  It is very refreshing to hear a clear, cogent discussion of
issues related to the Macsyma programming language, issues which have become
unnecessarily complicated by misguided attempts to "do the right thing".

Regarding DISPFUN: Why do we want it to be a "fexpr"?  Because 90% of the
time, it is used from "toplevel" as a "command", rather than as a "subr",
just as GRINDEF is used in the Lisp interpreter.  So, to save typing a
single extra character (guess which one, folks), we:

    1) Add fexprs to the language definition, which
       1a) complicates it
       1b) are impossible to compile
    2) and we make DISPFUN (or GRINDEF) impossible to call from within a
       function, without use of APPLY.

I have a different solution.  Leave the language definition simple, i.e.
flush fexprs.  Then, ** write a command processor **.  Let it appear to the
user any way you like.  Here's a simple one for starters.  Attach to a
single key a piece of code which prints "Command: " and reads a single
character.  The next character will dispatch along the lines of
D = DISPFUN, K = KILL, T = TRANSLATE.  So, if the user types "D", then
prompt with "Display Function: " and read a line of function names from the
keyboard.  You can use function name completion, and really save typing.

This is a toy design, of course.  But the problem is in the * user interface *
and not in the * language definition *.

Regarding the question of where the definition for F in F(X) is found: Isn't
this the same as the (sstatus flush ...) issue in MacLisp?  The solution
adopted in MacLisp was to not look in the value cell.  I would rather see
the function cell flushed, since writing things like G(F):=F(X) is so
convenient and natural (as in ULisp).  Not only that, but DISPFUN(F) would
work.

Date: 23 May 1981 01:02-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
Subject: evaluation
To: CSVAX.fateman at BERKELEY
cc: GJC at MIT-MC, MACSYMA-I at MIT-MC

    Date: 21 May 1981 16:06:39-PDT
    From: CSVAX.fateman at Berkeley

    I suggest you set up a mailing list for macsyma-evaluation-haters.
    Please leave me off.

When this mailing list was first created, I stated that it would be ok to
carry on long discussions on this list.  It was created explicitly for that
purpose.  It is very difficult to maintain highly topical mailing lists such
as the one you propose.  Messages of global importance go to either
INFO-MACSYMA or MATHLAB.  If you wish to be removed from this list, please
let me know.

Date: 22 May 1981 18:29:37-PDT
From: CSVAX.fateman at Berkeley
To: GJC0@MIT-MC
Subject: by the way...
Cc: BUG-MACSYM@MIT-MC, MACSYMA-I@MIT-MC

it was reported first in 1976.  I do not know how many people encountered
it since, because duplicate bug reports get deleted;  at least one (me)
got burnt in 1980.

Date: 22 May 1981 21:12-EDT
From: George J. Carrette <GJC at MIT-MC>
Sender: GJC0 at MIT-MC
Subject:  by the way...
To: CSVAX.fateman at BERKELEY
cc: BUG-MACSYM at MIT-MC, MACSYMA-I at MIT-MC

    Date: 22 May 1981 08:36:09-PDT
    From: CSVAX.fateman at Berkeley
    To:   GJC
    Re:   by the way...

    powerseries(log(sin(x)),x,0) is way off.
    answer "zero" to the question.

What kind of answer do you want? [Very important question!]

Is this a reported case? Presumably it should give an error
when you try it. Just chalk it up to lack of error checking
I suppose, because it doesn't ask first "is it meaningfull to
have a powerseries expansion of LOG(U) about U=zero?"
Powerseries(SQRT(SIN(X)),X,0) seems to do it ok though.

I consider this a generic kind of bug in macsyma, that
theorems (or techniques) are applied sometimes without
checking the validity. It really doesn't hurt much since
that's the kind of thing physics hackers tend to do anyway.
They only do the work of checking the mathematics when
they have to back-track to find out where something got wedged
into physically meaningless states.

Since backtracking can be painfully timeconsuming, a program totally
devoted to nitty-gritty validity checking could be a boon.
Maybe next time around...

-gjc

Date: 22 May 1981 16:17-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

With regard to George's comment about how DISPFUN(F) and F(X) use different
lookup schemes to find the functional definition of F, you're going to tell
me that's a design decision? What MUC papers explain this? I just went through
both proceedings and didn't see anything which dealt with this issue. There
are papers on symbol evaluation but not on lookup of a function associated with
a symbol. Completely satisfactory is not our metric -- whether it does what it
does optimally is not really interesting; whether it does what it does 
deterministically (eg, the F(G):=G(X) problem before and after G(X):=... is 
done) is a severe issue making it difficult or impossible to write programs
which can be interpreted correctly. Do you want to claim that was an informed 
design decision? I hope not. If you do, and you will show me where it is 
documented as such, we will take the discussion off Macsyma-I and flame 
privately. But if you cannot, then please let the discussion proceed as it 
ought to.

Date: 22 May 1981 12:37-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  evaluation
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    From: CSVAX.fateman at Berkeley
    ...  Please leave me off.  I think I know the issues; ...

This would be fine if you promised not to comment about
mail not addressed to you.


Date: 21 May 1981 16:06:39-PDT
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC
Subject: evaluation
Cc: MACSYMA-I@MIT-MC

please read MUC papers on this.  If you want to program in Lisp, go ahead.
If you want to argue with JPG, go ahead.  I suggest you set up a mailing
list for macsyma-evaluation-haters.  Please leave me off.  I think I
know the issues; there are no completely satisfactory answers; we
will probably end up writing another system or two for application-oriented
people with totally different conventions, before too long.
The universal solvent does not exist.

Date: 21 May 1981 18:34-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 21 May 1981 10:13-EDT
    From: George J. Carrette <GJC>
    To:   KMP, MACSYMA-I

        From: Jeffrey P. Golden <JPG>
	Due to the self-evaluation of X; in a fresh Macsyma, MACSYMA users
	just don't type single-quotes that often, so they'd easily get
	screwed by not typing them when they would have to if we made
	DISPFUN an LEXPR.

They can easily get screwed by APPLY(X,...); too, but we expect them to read
the manual and do the right thing here! Why should DISPFUN be any different.
Stop assuming the users are dummies. They are smart people who are hindered
by the fact that no two things in Macsyma (ok, I'm being unfair -- no three
or four ...) follow the same or related argument conventions. There is too
much DWIM.

    Not only is true, it is an understatement. I've found that many
    experienced macsyma users don't know when things are evaluated and when
    they aren't.  Just the other day I helped DWS out of the classic
    screw: G(F):=F(1)+F(2); H(X):=X^3; G(H) works, F(X):=X^2; G(F) does too;
    but then "how-come" G(H) doesn't?

Great example. I think functions should go in the value cell or we should stop
letting F(X) find the value-cell of F ... As you have pointed out repeatedly,
this can't be compiled correctly and I think that is a severe price for all
function calls to pay both in terms of runtime and reliability.

    No kidding, people have stuff like this all over their code, I can show
    you the statistics the translator keeps on users during the semantic
    analysis phase. {Yes folks, big brother at work again.}

I am not in the least surprised by this statistic.

    On the other hand, the evaluation of the symbol F in DISPFUN(F) is not
    consistent with the evaluation of the symbol F in F(X).

An excellent point. I'd never even thought about that one. The problem is
worse than I'd thought.

This is why I object to Jeff's statement about asking the users what they
want to type... They don't even know what they OUGHT to type. Why? Because
things are not regular. If there was more uniformity, I'd be happier. 
I think making the user type DISPFUN('F) would not be that painful ... heck,
arg1 to APPLY already has to be done this way and users haven't found that
to be much problem. If they have, I claim it's only because they have been
taught bad habits by other programs that do implicit quoting. If they
always had to be quoted, people would learn fast and a singlequote is not
that hard to do...

Date: 21 May 1981 18:18-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  FUNDEF
To: RWG at MIT-MC
cc: JPG at MIT-MC, MACSYMA-I at MIT-MC

    Date: 21 May 1981 15:38-EDT
    From: Bill Gosper <RWG>
    To:   JPG
    cc:   KMP

    Indeed, i use the E label feature all the time, primarily due to
    MACSYMA's inability to forget hashed array contents without forgetting
    the fcn definition too.  But at least as good as E labels would be a
    simple list of the defs.

We should probably provide you with an operator that does what you want,
but I don't see why you don't want to be using FUNDEF. Eg, the following
code seems to work...

KILLHASHARRAY(X):=BLOCK([DEF:APPLY('FUNDEF,[X])],
		        APPLY('KILL,[X]),
			EV(DEF,EVAL),
			X);

JPG: Here is a case already for a FUNDEF subr. And a KILL subr. And an
EVAL subr. The following code would look so much better...

KILLHASHARRAY(X):=BLOCK([DEF:FUNDEF(X)],KILL(X),EVAL(DEF),X);

-kmp

Date: 21 May 1981 14:22-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

I'm not sure what you think you volunteered for.  We still intend to hold 
onto users' hands and fingers.  Of course, there is always much to do, 
and time crunches and financial crunches.  We have no secretary (we are 
not at all clear as to how much of Rosie we've got - groups at LCS do 
not have secretaries, we are told, only faculty have secretaries), and 
JM tells us that we cannot have another undergraduate for MACSYMA work as 
he has no money.  Sigh!

Date: 21 May 1981 11:02:31-PDT
From: CSVAX.fateman at Berkeley
To: JPG@MIT-MC, macsyma-i@mit-mc
Subject: known bugs

thanks.  I didn't intend to volunteer for this, though.  I thought
mit was going to take care of holding users' hands  (fingers?)

Date: 21 May 1981 10:48:26-PDT
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc
Subject: trivial

In that case, I hope someone will provide such a list of errors.

I do not know how to interpret claims about activities which will
happen "as NIL Macsyma is brought up".  Some people have been waiting
for the coming of the Messiah (old testament) or the Second Coming (new
testament), for a long time...
  (sorry,... couldn't resist...)

Date: 21 May 1981 13:49-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

You can get a start at the "known bugs" by picking up the MACSYMA mails
contained in 6 files all on ALJABR; :
MAIL >, OMAIL >, OOMAIL >, O3MAIL >, O4MAIL >, O5MAIL > .

Date: 21 May 1981 13:38-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: ELLEN at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC, RZ at MIT-MC

Rest assured, such good things will be available, nay, built-in,
as NIL Macsyma is brought up, and LISPM Macsyma gets a workout.

Presently, getting a list of all macsyma error messages,
and what source files they happen in, the exact FILEPOS in the
source, etc, is trivial because of the error-message system in
operation that was supposedly a PDP-10-only hack for saving
address space. In fact, the extra work to make it *really* save space
has not been completed, and probably never will be.

Your point about a person spending an afternoon re-identifying an old
bug is well taken.

-gjc

Date: 21 May 1981 09:46:12-PDT
From: CSVAX.fateman at Berkeley
To: JPG@MIT-MC
Subject: hesitantly, I enter the mail issue..
Cc: RZ@MIT-MC, ellen@mit-mc, macsyma-i@mit-mc

I guess what I would like is a listing of "known bugs" that I could
check against.  The fact that YOU know of the bug is not going to
prevent some person from spending an afternoon identifying it again.

Another wish (expressed previously) is a listing of all error or
warning messages that are in Macsyma and Maclisp, and some info on
their meaning.

Date: 21 May 1981 10:13-EDT
From: George J. Carrette <GJC at MIT-MC>
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

    From: Jeffrey P. Golden <JPG>
     Due to the self-evaluation of X; in a fresh Macsyma, MACSYMA
     users just don't type single-quotes that often, so they'd easily
     get screwed by not typing them when they would have to if we  
     made DISPFUN an LEXPR.

Not only is true, it is an understatement. I've found that many
experienced macsyma users don't know when things are evaluated and
when they aren't.  Just the other day I helped DWS out of the classic
screw: G(F):=F(1)+F(2); H(X):=X^3; G(H) works, F(X):=X^2; G(F) does too;
but then "how-come" G(H) doesn't?

No kidding, people have stuff like this all over their code,
I can show you the statistics the translator keeps on users
during the semantic analysis phase. {Yes folks, big brother
at work again.}

On the other hand, the evaluation of the symbol F in DISPFUN(F) is not
consistent with the evaluation of the symbol F in F(X).

-gjc

Date: 21 May 1981 06:51-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

   KMP@MIT-MC 19 May 1981 12:26-EDT
   Subject:  DISPFUN and E-lines
   To: JPG at MIT-MC
   cc: MACSYMA-I at MIT-MC
   It seems a waste to have a label generated to point to something which 
   can already be gotten. If FUNDEF(F) returns the definition of F, then why
   waste a symbol by generating an E-line for DISPFUN to display its definition
   on. Why not just 
   (DEFUN $DISPFUN FEXPR (SYMS)
     (MAPC #'(LAMBDA (SYM)
   	    (TERPRI)
   	    (DISPLA `((MLABLE) NIL ,(MAPPLY #'$FUNDEF FN '$DISPFUN))))
   	SYMS))
The labels were requested by several MACSYMA users, e.g. RWG, for the case 
of DISPFUNning more than one function at a time.
They like to manipulate definitions and finds the labelling convenient.
Please check with him.  (He's on MACSYMA-I, so he will see this mail.)

   By the way, I don't see why dispfun has to be a fexpr. This just makes it 
   hard to use in code. 
   DISPFUN('F); is not very much harder to type than DISPFUN(F);
   DISPFUN(X);  is a lot easier to type/read than    APPLY('DISPFUN,[X])
All MACSYMA information commands are FEXPRs or "DEFMSPEC"s.  (DISPFUN 
was an FEXPR before I got here.)  I was hoping to avoid inconsistency.
DISPFUN is used very rarely in code.  As far as whether users would 
rather type DISPFUN('F,'G); as a good habit rather than have DISPFUN 
be an FEXPR:  Well, I'd be willing to conduct a poll.  Due to the 
self-evaluation of X; in a fresh Macsyma, MACSYMA users just don't type 
single-quotes that often, so they'd easily get screwed by not typing 
them when they would have to if we made DISPFUN an LEXPR.

Date: 19 May 1981 12:26-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  DISPFUN and E-lines
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

It seems a waste to have a label generated to point to something which 
can already be gotten. If FUNDEF(F) returns the definition of F, then why
waste a symbol by generating an E-line for DISPFUN to display its definition
on. Why not just 

(DEFUN $DISPFUN FEXPR (SYMS)
  (MAPC #'(LAMBDA (SYM)
	    (TERPRI)
	    (DISPLA `((MLABLE) NIL ,(MAPPLY #'$FUNDEF FN '$DISPFUN))))
	SYMS))

By the way, I don't see why dispfun has to be a fexpr. This just makes it hard
to use in code. 

DISPFUN('F); is not very much harder to type than DISPFUN(F);
DISPFUN(X);  is a lot easier to type/read than    APPLY('DISPFUN,[X])


Date: 18 May 1981 12:33-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: ELLEN at MIT-MC
cc: MACSYMA-I at MIT-MC, JPG at MIT-MC

    Date: 18 May 1981 01:41-EDT
    From: V. Ellen Golden <ELLEN at MIT-MC>

    With respect to CWH's remark that this whole MACSYMA mail thing
    could be given to a secretary... NAME THE SECRETARY!!!

Whoa, Ellen.  I didn't say "the whole Macsyma mail thing".  I said "posting
wall charts on our bulletin board".  And I had Rosie in mind.  I didn't
realize she wasn't our secretary.

Since Jeff doesn't mind doing this, I consider the issue dropped.

Date: 18 May 1981 08:04-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: Correction
To: CWH at MIT-MC
cc: MACSYMA-I at MIT-MC

In my note about the stuff on the MACDOC directory I said:
"Most of it is for MACSYMA users rather than MACSYMA maintainers."
I didn't mean to say exactly that.  Obviously it is for both.  I meant 
that it was created expressly for stuff of interest to MACSYMA users, 
UPDATE notes and the like, and was announced as such to INFO-MACSYM.

Date: 18 May 1981 07:56-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: CWH at MIT-MC
cc: MACSYMA-I at MIT-MC

   CWH@MIT-MC 05/17/81 14:26:26
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
       JPG@MIT-MC 17 May 1981 03:21-EDT
       Mail to INFO-MACSYMA goes unedited to the file 
       ALJABR;INFO MACSYM.  Edited versions of INFO-MACSYMA mail stay in 
       MACSYM;MACSYM MAIL for 10 days as a service to those not on the 
       INFO-MACSYMA mailing list.  There is also the UPDATE file.
   Fine.  Is the duplicate copy of INFO-MACSYMA mail in MACSYM;MACSYM MAIL for
   the benefit of those who read the mail online or on the bulletin board?
Both.
   Does the 10 day deletion happen automatically or do you do it by hand?
I do it by hand.  (I do leave in until the next MACSYMA version is released 
the note which indicates when the current MACSYMA dump was released.)
   
   Again, we are trying to save you work.
I realize that.  However, I wish to be the judge of what saves me work.
(In other words I demand the rights accorded to anyone else who works here.)
It is my feeling that the time it takes to mechanically deal with mail is 
infinitesimal compared with the time it takes to process the mail, i.e. to 
read it, understand it, test it, etc.  So I find at least for me that what 
mail reader I use or what text editor I use is rather immaterial for most 
things.  Of course, things like tag searches which I cannot easily do in 
Teco I do in Emacs.  (Isn't this discussion getting out of hand for 
MACSYMA-I?)

   Somehow I had received the impression that after a bug was marked as "fixed"
   on the listing outside your office, it would disappear from the next
   listing, and presumably from the mail file as well.  Is this not the case?
True.  Please read your earlier mail from me about the at-least temporary 
new MACSYM MAIL backup MACDOC;MAIL BACKUP.  I am willing to mark "fixed" 
tags on a MACDOC;MAIL EDITED version of this file.

   With the scheme that KMP proposes, we can save all bug reports and still
   generate a listing showing only unfixed bugs.  We might want to generate 
   topical listings as well as chronological listings as an aid to finding 
   related bugs.
And I'd even be willing to have MACDOC;MAIL EDITED replaced by a BABYL 
scheme to make tagging of mail items easier.  I only want to keep the 
MACSYM;MACSYM MAIL file the way it is. 

       JPG@MIT-MC 17 May 1981 07:12-EDT
       If it turns out that using your scheme gives me everything I get with 
       the current scheme ... then I will shift over to it.
   Sounds fair to me.  Development can happen without disrupting the way you do
   things now, and you can try it out to see if you like it.
Fine.  I accept.   
   
   Tasks:
   The INFO-MACSYMA and BUG-MACSYMA mail files should be consolidated
   with the other Macsyma mail files on MAXDOC.
Well, we may need a new directory as MAXDOC; is rather full.  How about 
MAXMAI; ?
   
   The stuff on the MACDOC directory should be moved to the MAXDOC directory.
I disagree.  Most of it is for MACSYMA users rather than MACSYMA maintainers.
It is for the former that the directory was created, with the agreement of 
KMP and GJC.

   I had forgotten about the MACDOC directory.  It isn't listed in
   MAXDOC;-READ- -THIS-, which contains a list of all Macsyma directories.
   Please take the time to read and update this file.
I took care of this.  I also, perhaps quickly, added MAXTUL, MAXERR, 
MAXER1, SHARE1, and SHAREM which were also missing.
   
   After the new mail scheme is worked out, an info file should be placed in
   MAXDOC describing how to read bug notes, how to label messages, how to make
   the wall listing.
good idea.
   
   In fact, it should be completely trivial to make the wall listings (CODEL,
   bugs, etc).  Perhaps we can write a single program to do all this and give
   this responsibility to a secretary?
Whether or not we even have a secretary, I prefer to do these tasks when 
I feel the time is right for them.

Date: 18 May 1981 05:53-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

Well, one thing that might help:
How about if we add a new switch (you can choose the name; default FALSE) 
such that if TRUE and X and Y are floating point and X<0, then X^Y will 
give EXP(Y*LOG(X)), principal branch of the LOG.  The switch would also 
apply to the corresponding NUMER cases, e.g. negint^ratnum,NUMER; .
Then all you'll have to do to get the result you prefer is reset the 
switch.

Date: 18 May 1981 04:28-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 05/17/81 14:56:19 
   Re: Specific examples of messing up the content of bug notes.
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   [1] I sent a note saying that SOLVE(X^5-1,X) returns a more
       complex answer than it used to. You changed this to
       "SOLVE(X^5-1,X); gives a strange result."
Honest!  "gives a strange result" were your words.  But, ok, I now changed 
it to "returns a more complex answer than it used to".  (I admit you ALSO 
said this.  Well, I was planning to fix this bug..., but, ok, I apologize.)
   [2] My note about LIMIT(ATAN(X),X,INF) returning %I*LOG(-1)/2
       instead of %PI/2 was shortened to something along the lines of
       "LIMIT(ATAN(X),X,INF) gives a funny result."
This is not true.  Your note is posted in hardcopy right outside my office.
It says:
   GJC@MIT-MC 05/14/81 04:36:02  ~LIMIT
   Limit(ATAN(X),X,INF); gives %I*LOG(-1)/2 (which RECTFORMs to -%PI/2, 
   of course.)
       And then summarily deleted, so there really isn't any proof
       of what was said.
Mail was sent by ___012 (claims to be GJC) on 05/14/81 07:50:08 saying 
that LIMIT's behavior was ok.  I then sent you mail on 05/14/81 
10:00:40 confirming this.  So I then deleted it from MACSYM MAIL.

But I agree: There is no proof as to what was said.  Hence, as at least 
a temporary measure until we decide on something better, MACSYM MAIL 
is now also sent to MACDOC;MAIL BACKUP .  This file will be totally 
unedited, so we can be sure exactly what was sent to MACSYM MAIL.

Again, I apologize for any misunderstandings or damage I have caused here.

Date: 18 May 1981 01:41-EDT
From: V. Ellen Golden <ELLEN at MIT-MC>
To: MACSYMA-I at MIT-MC
cc: JPG at MIT-MC

With respect to CWH's remark that this whole MACSYMA mail thing
could be given to a secretary... NAME THE SECRETARY!!!

The Mathlab Group has NO secretary, and has only ME as a backup.

I know EMACS and BABYL, but refuse outright to have anything to do
with the editing of MACSYMA mail.  TECO works, too... EMACS and BABYL
are written in it, which should prove its worthiness.

I have more than enough to do with the Tourists, and the Users.
It should be in the other order, and when we get the Tourist Policy
implemented, perhaps it will be.

(And we haven't even mentioned the MACSYMA Manual.)

Date: 17 May 1981 14:56-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: Specific examples of messing up the content of bug notes.
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

[1] I sent a note saying that SOLVE(X^5-1,X) returns a more
    complex answer than it used to. You changed this to
    "SOLVE(X^5-1,X); gives a strange result."
    Removing what must be the most important information here,
    that some change to solve is in question. Instead the bug
    note reads like GJC is some kind of idiot, "gives a strange result."
[2] My note about LIMIT(ATAN(X),X,INF) returning %I*LOG(-1)/2
    instead of %PI/2 was shortened to something along the lines of
    "LIMIT(ATAN(X),X,INF) gives a funny result."
    And then summarily deleted, so there really isn't any proof
    of what was said.

For further examples you can recall the editing job you did on
JM's mail a couple months ago can't you?


Date: 17 May 1981 14:26-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

A brief note before I get into the body of this message: I agree that we
must keep JPG's needs foremost.  Jeff, you should also realize that we are
*not* trying to hassle you (despite occasionally harsh language).  We want
to help you out, and make life easier for all of us.

    Date: 17 May 1981 03:21-EDT
    From: Jeffrey P. Golden <JPG at MIT-MC>

    This has always been true.  Mail to INFO-MACSYMA goes unedited to the file 
    ALJABR;INFO MACSYM.  Edited versions of INFO-MACSYMA mail stay in 
    MACSYM;MACSYM MAIL for 10 days as a service to those not on the 
    INFO-MACSYMA mailing list.  There is also the UPDATE file.

Fine.  Is the duplicate copy of INFO-MACSYMA mail in MACSYM;MACSYM MAIL for
the benefit of those who read the mail online or on the bulletin board?
Does the 10 day deletion happen automatically or do you do it by hand?  In
either case, we can come up with some programs to do all this automatically,
both providing online summaries of Macsyma changes and the 10 day change
listing on the bulletin board.

    Again, you guys can do as you like.  As far as my bug fixing goes, this 
    sounds like "give JPG more foolish work to do".  Well, no thanks, I have 
    enough to do now.

Again, we are trying to save you work.  I see one problem, though.  Is it
easy to escape to teco for editing individual messages in Babyl?  Maybe you
should think about learning Emacs?

    Date: 17 May 1981 03:28-EDT
    From: Jeffrey P. Golden <JPG at MIT-MC>

    Since you don't include any specific examples, I don't know which you 
    are referring to.  I'd be happy to undo any damage I have done.

I don't have any examples either, and we may well be wrong about this.
Somehow I had received the impression that after a bug was marked as "fixed"
on the listing outside your office, it would disappear from the next
listing, and presumably from the mail file as well.  Is this not the case?
With the scheme that KMP proposes, we can save all bug reports and still
generate a listing showing only unfixed bugs.  [I wonder if Babyl can parse
pre-1976 mail headers ...]  We might want to generate topical listings as
well as chronological listings as an aid to finding related bugs.

    Date: 17 May 1981 07:12-EDT
    From: Jeffrey P. Golden <JPG at MIT-MC>

    If it turns out that using your scheme gives me everything I get with the 
    current scheme ... then I will shift over to it.

Sounds fair to me.  Development can happen without disrupting the way you do
things now, and you can try it out to see if you like it.

I hope KMP/GJC will take charge of this.  My knowledge of Teco/Babyl is
minimal.  (Now if we were running NILE on this computer ...)  Tasks:

The INFO-MACSYMA and BUG-MACSYMA mail files should be consolidated
with the other Macsyma mail files on MAXDOC.

The stuff on the MACDOC directory should be moved to the MAXDOC directory.
I had forgotten about the MACDOC directory.  It isn't listed in
MAXDOC;-READ- -THIS-, which contains a list of all Macsyma directories.
Please take the time to read and update this file.

After the new mail scheme is worked out, an info file should be placed in
MAXDOC describing how to read bug notes, how to label messages, how to make
the wall listing.

In fact, it should be completely trivial to make the wall listings (CODEL,
bugs, etc).  Perhaps we can write a single program to do all this and give
this responsibility to a secretary?  This might save some of Jeff's time, or
at least recover some of what he's blown on all this babyling.

Date: 17 May 1981 14:02-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: Macsyma user needs? 
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

Just find me one macsyma user who needs (-3.3)^4.4,numer => 191.2

Date: 17 May 1981 07:38-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 05/16/81 08:58:08
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   Arithmetic operators are not ambiguous. I can say that X^Y, where
   X and Y are floating-point, should return EXP(Y*LOG(X)), where I
   want the principal branch of the LOG.
You could, but many MACSYMA users have found that providing only this 
does not meet their needs.

   Right now you say that "Macsyma provides mechanisms for returning any 
   of 3 answers for (-1)^(1/3)." Big deal.
It is a big deal to many MACSYMA users.  A person who needs real answers
does not want the principal branch returned for (-1)^(1/3); but wants 
-1 returned.  An algebraist may prefer to work with (-1)^(1/3) itself 
and not the principal branch thereof.
I might also point out for whatever it is worth that the existing scheme
is not mine but was decided upon after lengthy and careful thought by 
many people.  (I in no way am saying that it is therefore final or
anything like that.)

   I'm saying that in practice the results you get when doing non-trivial 
   calculations tend to be unpredictable.
I think that the "unpredictability" comes from the ambiguity of the 
problem.  Maybe we are not doing something right here, but I do not feel 
that you have proposed anything satisfactory here to fix things.

   There is a big difference between what is correct when you want to
   have fun playing with the simplifier and what is correct when you want
   to use it to do a calculation.
I find your remark above quite insulting and totally unnecessary.
I have been taking your statements seriously.  Please give me the 
same courtesy.  I think we have the same goals.  We are not just "having 
fun playing with the simplifier."

   p.s. AKRAM suggests that (-1)^(X) be represented internally as
        EXP(%I*%PI*X*%ARBINT).
I find this somewhat cumbersome and don't see how it solves the problems
we have been raising.  But, yes, it also has interesting possibilities.
We have orally discussed approaches like this in the past as well.

Date: 17 May 1981 07:12-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

If it turns out that using your scheme gives me everything I get with the 
current scheme including concise listings of MACSYM mails for the 
bulletin board, accurate and concise bug messages which at times 
means editing a user's somewhat incoherent and misspelled full-screen 
message down to: "INTEGRATE(...); gives ###.  %%% is correct"
and the ability not to have to grovel over incoherent mail messages 
and already-fixed bugs, then I agree that when I am satisfied with 
your scheme I will shift over to it.  In the meantime I prefer to 
continue doing things my way.  As the major (by far) maintainer 
of MACSYM mails and fixer of MACSYMA bugs sent to MACSYM mails I feel 
I have that right as I feel that I will be the one most^n for large n 
affected by your scheme.

Date: 17 May 1981 06:18-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 17 May 1981 03:28-EDT
    From: Jeffrey P. Golden <JPG>
    To:   GJC

       GJC@MIT-MC 05/16/81 17:40:44
       I wish you wouldn't edit the mail to BUG-MACSYMA. This is the second
       time this week that you have actually changed the meaning of a bug note
       I have sent.

    Since you don't include any specific examples, I don't know which you 
    are referring to.  I'd be happy to undo any damage I have done.
    I already proposed to KMP and you that MACSYM MAIL be sent to two 
    files, one totally unedited just like INFO-MACSYMA is handled.  How about 
    we set up such a scheme?

Jeff, the issues are these:

* There should be a central place where we keep track of all the bugs that
  have gone through and make annotations about which have been fixed and which
  not.

* There is no need for an un-editted file. It serves no purpose except perhaps
  amusement and/or historical, neither of which is of particular interest. In 
  any case, it should be reconstructable from the file we are proposing if 
  ever deemed useful.

* Two files are wasteful of disk space.

* Two files in the way you propose means constantly checking for discrepancies.
  With an Rmail/Babyl type approach, you automatically eliminate the chance of
  timing errors in mailreading.

* Babyl files provide many new kinds of functionality which the old scheme does
  not, hence given that we should go for a single depository of info, that is
  clearly the route to take.

* The way in which you currently maintain Macsym mail is very wasteful of your
  time -- time which could better be spent on other things. There are a million
  things that we have going that we don't have adequate manpower to do; for you
  to be using antiquated tools in the upkeep of Macsym mail just means you can
  do that much less on the other things that do need doing.

The facts speak for themselves. I don't see why you oppose Carl's/GJC's/my
proposal to switch to Babyl.
-kmp

ps Babyl is trivial to learn.

Date: 17 May 1981 03:28-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 05/16/81 17:40:44
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   I wish you wouldn't edit the mail to BUG-MACSYMA. This is the second
   time this week that you have actually changed the meaning of a bug note
   I have sent.
Since you don't include any specific examples, I don't know which you 
are referring to.  I'd be happy to undo any damage I have done.
I already proposed to KMP and you that MACSYM MAIL be sent to two 
files, one totally unedited just like INFO-MACSYMA is handled.  How about 
we set up such a scheme?

Date: 17 May 1981 03:21-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: CWH at MIT-MC
cc: MACSYMA-I at MIT-MC

   CWH@MIT-MC 05/16/81 17:48:24
   To: GJC at MIT-MC
   CC: JPG at MIT-MC, MACSYMA-I at MIT-MC
   I would like to see two changes made:
   1) Mail to INFO-MACSYMA and BUG-MACSYMA directed to two separate files.
This has always been true.  Mail to INFO-MACSYMA goes unedited to the file 
ALJABR;INFO MACSYM.  Edited versions of INFO-MACSYMA mail stay in 
MACSYM;MACSYM MAIL for 10 days as a service to those not on the 
INFO-MACSYMA mailing list.  There is also the UPDATE file.
   2) Bugs tagged with the fix date and author, but not deleted from
   the BUG-MACSYMA archive file.  A simple teco macro can be written for
   generating the wall listings which would only show unfixed bugs.
   Some online programs would be useful:  "Show me all unfixed TAYLOR bugs ..."
I (obviously) happen to like the current scheme.  Since I process over 
90% of the bug-notes sent to MACSYM MAIL, yet I have no wish to get in 
the way of others, I propose that MACSYMA MAIL also go to any file or 
scheme of your choosing which you guys can maintain as you like.  That 
way we can each have our way.
   Having a complete history of bugs and fixes is very useful.  Those old
   messages should not be deleted.
Again, you guys can do as you like.  As far as my bug fixing goes, this 
sounds like "give JPG more foolish work to do".  Well, no thanks, I have 
enough to do now.

Date: 16 May 1981 18:04-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: CWH at MIT-MC
cc: MACSYMA-I at MIT-MC

I would advocate using Babyl directly since it has all the necessary mechanism.
Messages could be labelled `UnFixed' when initially read. 
M-X Output Labeled MessagesUnFixed
will suffice to output these to a file which can be hardcopied and posted.
Other labels such as `Taylor' and `Defint' and such can be added as well.
Further, Babyl and ZMail (on the LispM) can give surveys of messages with
a given label. When bugs are attended to, the UnFixed label should be removed
and an annotation to the end of the message text should be made saying who
fixed it and when and that sort of thing.

How does this sound?

Date: 16 May 1981 17:48-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: GJC at MIT-MC
cc: JPG at MIT-MC, MACSYMA-I at MIT-MC

    Date: 16 May 1981 17:40-EDT
    From: George J. Carrette <GJC at MIT-MC>

    I wish you wouldn't edit the mail to BUG-MACSYMA. This is the second
    time this week that you have actually changed the meaning of a bug note
    I have sent. Are we that short of disk space that all bug notes
    can't be saved as they were sent? At least it gives some history
    of what didn't work when, and when it was fixed.
    Furthermore, what happens to old notes? They just seem to go away,
    old bug cases should be kept around just so that we can make
    sure they don't come back.

I agree strongly with this.  I would like to see two changes made:

1) Mail to INFO-MACSYMA and BUG-MACSYMA directed to two separate files.

2) Bugs tagged with the fix date and author, but not deleted from
   the BUG-MACSYMA archive file.  A simple teco macro can be written for
   generating the wall listings which would only show unfixed bugs.
   Some online programs would be useful:  "Show me all unfixed TAYLOR bugs ..."

Having a complete history of bugs and fixes is very useful.  Those old
messages should not be deleted.

KMP:  As local expert on mail files and teco macros, could you make the
      appropriate modifications?  And write mail perusal programs, if so
      inspired?  (Assuming we hear no objections in the next couple weeks ...)

Date: 16 May 1981 17:40-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I wish you wouldn't edit the mail to BUG-MACSYMA. This is the second
time this week that you have actually changed the meaning of a bug note
I have sent. Are we that short of disk space that all bug notes
can't be saved as they were sent? At least it gives some history
of what didn't work when, and when it was fixed.
Furthermore, what happens to old notes? They just seem to go away,
old bug cases should be kept around just so that we can make
sure they don't come back.


Date: 16 May 1981 08:58-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

Arithmetic operators are not ambiguous. I can say that X^Y, where
X and Y are floating-point, should return EXP(Y*LOG(X)), where I
want the principle branch of the LOG. Thats just consistency Jeff.
Right now you say that "Macsyma provides mechanisms for returning any of
3 answers for (-1)^(1/3)." Big deal. I'm saying that in practice
the results you get when doing non-trivial calculations tend to be 
unpredictable. You can sit back and claim to understand the present
behavior with a simple case like (-1)^(1/3) just fine. But try
and debug a calculation with many variables and operations under the
crazy patchwork of rules of simplification and you won't think it so fine.
There is a big difference between what is correct when you want to
have fun playing with the simplifier and what is correct when you want
to use it to do a calculation.

-gjc

p.s. AKRAM suggests that (-1)^(X) be represented internally as
     EXP(%I*%PI*X*%ARBINT).


Date: 16 May 1981 04:30-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 05/15/81 17:44:35
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
       JPG  One more question:
       [3] What do you propose as the default NUMER:TRUE$ answers for:
       (-1)^(1/3);  (-1)^0.333333333;  (-1)^4.4;   (-1)^(22/5);  whatever;  ?
   If X and Y are floating-point numbers, then for many operators O, 
   O(X,Y) wants to be floating point.
If O(X,Y) is ambiguous then this may not be a good idea.
   How about (-3.3)^4.4 => 181.8*%I+59.0 regardless of NUMER?
I assume by this that you are proposing that (-1.0)^0.333333333 always 
give 0.866*%I+0.5  ?  What about those who prefer -1.0 as answer?
I am happy that MACSYMA provides mechanisms for allowing the user to choose.
Consider (-1)^(1/3); .  MACSYMA provides mechanisms for returning any of 3 
answers: -1 or (-1)^(1/3) or 1/2+%i*sqrt(3)/2 .  There are circumstances where 
any of the three may be useful.  You are proposing that the floating point 
version correspond to only one of the three answers.  That does not seem 
correct to me.

Date: 15 May 1981 21:57-EDT
From: Kent M. Pitman <kmp at MIT-MC>
Sender: ___106 at MIT-MC
Subject: NUMER:TRUE$ query
To: GJC at MIT-MC, JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

Well, you asked what should be returned for 
 (-1)^(1/3); (-1)^0.333333333; (-1)^4.4; (-1)^(22/5); whatever; ?

I can answer part of this question: I think that NUMER:TRUE; should not
affect the evaluation of symbols. WHATEVER; should evaluate as it always
has. I'll let you guys fight out the rest...

Date: 15 May 1981 18:25-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: alternatives ...
To: CSVAX.FATEMAN at MIT-MC
cc: MACSYMA-I at MIT-MC

Thats a good reply. I'd be happy with something that ran
on the Lispm though, since its rather a pain to do interactive
developement with the present software on the Cray.
CDC on the other hand has a new 64-bit machine that sounds very
interesting. 64-bit words, 32-bit pointers. No need to argue
about how to represent a cons-cell.


Date: 15 May 1981 14:55:38-PDT
From: CSVAX.fateman at Berkeley
To: gjc@mit-mc
Subject: alternative (arithmetic system)
Cc: MACSYMA-I@MIT-MC

Dare we whisper the name of this system?  Could it be .......
something that runs on the CRAY?.....  
  In the interests of preserving the nation, may I indicate
that Pascal does not support complex numbers or powering...

Date: 15 May 1981 17:44-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

    From: Jeffrey P. Golden <JPG>

    Oops!  One more question:
    [3] What do you propose as the default NUMER:TRUE$ answers for:
    (-1)^(1/3);  (-1)^0.333333333;  (-1)^4.4;   (-1)^(22/5);  whatever;  ?

Now we are talking business. All this came up because LPH and I
were doing calculations in macsyma to verify results from the CRAY-1
about the ecomomic feasibility of nuclear fusion. Well, we were
getting some fairly unpredictable results using complex numbers
in macsyma.

Fact: NUMER is not very useful for doing numerical calculations!
      And is hardly every used by the numerical hackers at Plasma.

Why: Because the nice behavior is when the output form of a calculation
     is governed by the input, and not by the setting of some
     global parameter. If X and Y are floating-point numbers, then
     for many operators O, O(X,Y) wants to be floating point.

How about (-3.3)^4.4 => 181.8*%I+59.0 regardless of NUMER.

What I do propose: Is that Mathlab quickly come up with
some alternant algebra system. It doesn't have to solve
AI, just do arithmetic. Maybe I should put it another way,
we need an ARITHMETIC based system, not a symbolic based one.
Obviously symbolic stuff can be imbedded in arithmetic
structures. [We don't even need floating-point]

-gjc

p.s. This would really help national security, all you patriotic
people out there.


Date: 15 May 1981 16:51-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

Oops!  One more question:
[3] What do you propose as the default NUMER:TRUE$ answers for:
(-1)^(1/3);  (-1)^0.333333333;  (-1)^4.4;   (-1)^(22/5);  whatever;  ?

Date: 15 May 1981 16:37-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYM-I at MIT-MC

   GJC@MIT-MC 05/15/81 13:01:28
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
       JPG 05/15/81 07:18:23
          GJC@MIT-MC 05/14/81 07:26:52  ~SIMP
          X:(-3.3)^4.4;  X,NUMER; => 191.18831 wrong.
          RECTFORM(X); => 181.83*%I + 59.08
       Guess what!  Not wrong.
       First of all, X,NUMER,DOMAIN:COMPLEX; gives you the answer you expected.
       (-3.3)^4.4 = (-1)^4.4 * 3.3^4.4 
       With NUMER on: (-1)^4.4 = (-1)^(44/10) = (-1)^(22/5) = ((-1)^(1/5))^22
       	= (-1)^22 = 1 
       For more on this, see MACDOC;UPDATE > , JPG note [2] of 7/14/78 .
       Strange problems breed strange answers.
   I object to your statement that (-3.3)^4.4 is a strange problem.
(I "adopted" the word "strange" from the mail you sent:
	JPG@MIT-MC 05/14/81 04:43:20
	To: GJC at MIT-MC
	CC: JPG at MIT-MC
	   GJC@MIT-MC 05/14/81 1:09am
	   X:(-1)^3.3;  Then REALPART(X) gives X back.  Although X is a 
	   strange object this still seems to be strange behavior.
	has been fixed.    )
   There is simply a strange point of view internally.  Since
   NUMER:TRUE causes 44/10 => 4.4 how can it be justified that
   it also causes 4.4 => 44/10? seems that this is where the
   simplifier goes wrong. Why does it make this invalid transformation?
[1] Are you saying that there should not be a mode whereby (-1)^4.4; 
gives the same answer as (-1)^(44/10); ?
[2] How do you propose to do  NUMER:TRUE$  (-1)^(1/3); -> -1.0  ?

Date: 15 May 1981 13:01-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 05/15/81 07:18:23
    From: JPG
    To:   GJC
    cc:   JPG

       GJC@MIT-MC 05/14/81 07:26:52  ~SIMP
       X:(-3.3)^4.4;  X,NUMER; => 191.18831 wrong.
       RECTFORM(X); => 181.83*%I + 59.08
    Guess what!  Not wrong.
    First of all, X,NUMER,DOMAIN:COMPLEX; gives you the answer you expected.
    (-3.3)^4.4 = (-1)^4.4 * 3.3^4.4 
    With NUMER on: (-1)^4.4 = (-1)^(44/10) = (-1)^(22/5) = ((-1)^(1/5))^22
    	= (-1)^22 = 1 
    For more on this, see MACDOC;UPDATE > , JPG note [2] of 7/14/78 .
    Strange problems breed strange answers.

I object to your statement that (-3.3)^4.4 is a strange problem.
There is simply a strange point of view internally. Since
NUMER:TRUE causes 44/10 => 4.4 how can it be justified that
it also causes 4.4 => 44/10? seems that this is where the
simplifier goes wrong. Why does it make this invalid transformation?

-gjc

Date: 15 May 1981 13:00-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: GJC at MIT-MC
cc: JPG at MIT-MC, ADK at MIT-MC, MACSYMA-I at MIT-MC

    Date: 14 May 1981 23:52-EDT
    From: George J. Carrette <GJC at MIT-MC>

    Yeah, I was wondering how long it would take before somebody found that.
    To fix it we are going to have to change how Macsyma is dumped on MC,
    formalizing all variable initializations that have to do with
    connections with the outside world. Jim is going to run into the
    same problem when ASB starts dumping a system on top of Macsyma on Multics.
    [Well, Carl and I had talked about a DEFMVAR keyword of START-UP-INIT.]
    Solving this reliably is going take a bit more sophisticated technology
    than what is in ALJABR;LOADER now, but cleaning things up can only make
    it easier to support LISPM and NIL macsyma.

Not only does TM assume a video terminal, it assumes a Plasma terminal.  The
linel is 84 and X/Y tries to draw lines.

A mechanism for initializing at start up time is definitely needed.  It
would also be useful to have the start up initializations done when the user
reconnects to a Macsyma from a different console.

Note:  TM does something strange if you type ^B immediately after (C1).

Date: 14 May 1981 23:52-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: ADK at MIT-MC, MACSYMA-I at MIT-MC

    Date: 05/14/81 18:39:13
    From: JPG

    Please note ADK's :TM bug in MACSYM MAIL.

Yeah, I was wondering how long it would take before somebody found that.
To fix it we are going to have to change how Macsyma is dumped on MC,
formalizing all variable initializations that have to do with
connections with the outside world. Jim is going to run into the
same problem when ASB starts dumping a system on top of Macsyma on Multics.
[Well, Carl and I had talked about a DEFMVAR keyword of START-UP-INIT.]
Solving this reliably is going take a bit more sophisticated technology
than what is in ALJABR;LOADER now, but cleaning things up can only make
it easier to support LISPM and NIL macsyma.

-gjc

Date: 12 May 1981 05:12-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 05/11/81 16:23:47 
   To: MACSYMA-I at MIT-MC
   Look at this example:
      SIN(%PI/6) => 1/2
     'SIN(%PI/6) => 1/2
    ''SIN(%PI/6) => SIN(%PI/6)
   In this case the "verb form" ends up less evaluated (or simplified, I don't
   think the user really can tell the difference), than the "noun form."
'twas just a bug.  Has been fixed.

Date: 11 May 1981 16:23-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: SIN(X) again, sorry.
To: MACSYMA-I at MIT-MC

Gosh, I hate to bring this up, but look at this example:

   SIN(%PI/6) => 1/2
  'SIN(%PI/6) => 1/2
 ''SIN(%PI/6) => SIN(%PI/6)

in this case the "verb form" ends up less evaluated (or simplified, I don't
think the user really can tell the difference), than the "noun form."
I can't beleive that this is what JM intended. Is there really a use
for this behavior? If not, while can't it be flushed to allow
it to be consistent with new functions being added?

-gjc

Date: 11 May 1981 05:47-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: JM at MIT-MC, MACSYMA-I at MIT-MC

Date: 10 May 1981 21:48:32-PDT
From: CSVAX.fateman at Berkeley
To:   RWK
cc:   kmp
Re:   innocent bystanders

Someone who changes code in macsyma is not an innocent bystander.

Joel Moses seems uninterested in any discussion on technical issues.

If you wish to ignore my advice, fine.  But the VAX sites running
Macsyma at this time will receive your software only if we install 
it here, first.

Date: 11 May 1981 05:12-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 05/09/81 20:44:31 Re: Yet another change to MLOAD.
   Jim and I have really been hacking this out, I think now we've
   come up with a final version that does all the right things.
   i.e. You may want to dump out a new macsyma to get the changes.
MACSYMA 297 has been redumped.

Date: 11 May 1981 03:20-EDT
From: Robert W. Kerns <RWK at MIT-MC>
Subject: An apology
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC, JM at MIT-MC, CFFK at MIT-MC, LPH at MIT-MC

I wish to apologize for the subject line in my previous message.
I am very disturbed at the strong ill feeling between you personally
and the members of this group, and such a response can only add to
it.  I hope, however, that you can understand the feelings that led
me to this excess.

Date: 11 May 1981 03:00-EDT
From: Robert W. Kerns <RWK at MIT-MC>
Subject: Flaming assholes
To: CSVAX.fateman at BERKELEY
cc: KMP at MIT-MC, MACSYMA-I at MIT-MC, JM at MIT-MC

    Date: 10 May 1981 21:47:55-PDT
    From: CSVAX.fateman at Berkeley
    To: RWK@MIT-MC
    Subject: innocent bystanders
    Cc: kmp@mit-mc
    
    Someone who changes code in macsyma is not an innocent bystander.

    Joel Moses seems uninterested in any discussion on technical issues.

I fail to see why you feel we should be a target of your anger over
political issues, when we are responsible for technical, not political
issues.  If you cannot learn to distinguish them you will simply waste
everybody's time and make no technical progress, not to mention sabotage
your own case politically.  It is hard for me to be sympathetic when you
complain that Joel is slow to answer you, when I know first hand what an
incredible pain in the ass to deal with you have become.
    
    You are perfectly right in saying that IMSL code has less than the
    best user interface.  You are also right in identifying PART
    of the problem as being the Fortran language situation.  I think that
    you guys have the potential to totally miss the boat when it comes
    to including existing scientific software in the macsyma framework.

I'm not sure I understand why you include the above remark in that
paragraph.  How do IMSL's user-interface problems relate to your perception
that we may miss the boat?  This isn't advice, this is harrasment.
    
    Are you familiar, for example, with LINPACK?   Do you realize that
    the questions of representation, sparse/dense, real/complex, single/double
    upper-triangular, tri-diagonal, .... are not just things one can
    gloss over and say "oh, we know better than that, we'll just call one
    routine, say, for Gaussian Elimination";

I am aware of LINPACK's existence, barely.  I am CERTAINLY aware that these
issues you list are not something to be glossed over.  I personally have no
interest in them, but am glad there are people who do, and do not treat the
issues lightly.  It is unfortunate that you do not take the same attitude
toward programming and user-interface issues.

    Or perhaps just say 
    that although the IMSL routine gives back several answers (say, a condition
    number, error indication if any, and an array), that the macsyma
    user does not need them all...
      Now maybe he/she does, and maybe not.  But RWK and KMP are unlikely
    to be sensitive to these issues.  If you had a numerical analyst near
    by, it might help.

This is a completely gratuitous insult.  The question of providing the
information to the user is certainly one that KMP is well equipped to
deal with.  And neither of us has ever made any claim to be dealing with
issues of what algorithm to use when, etc.  Nor have you made any specific
complaints about anything.  We are talking about something clearly in the
user-interface domain, not in the numerical algorithms domain.  The issue
of how to present the information to the user is precisely what we ARE
qualified to deal with, while from your original message I get the distinct
impression that you don't even know what the issues involved in this
question ARE.

    If you wish to ignore my advice, fine.

Since when have you been giving us advice?  Instead you've been making
nonsense suggestions and insulting us.

To summarize this whole flareup, you wanted to suggest that where
possible MACSYMA calling order be the same as they are calling the
FORTRAN IMSL routines.  The fact that you didn't stop to think (or
maybe weren't aware) of the user-interface issues, is unfortunate,
but can be written off to a lack of sleep or something.  We all spout
nonesense from time to time.  However, your response when KMP pointed
out the issues was to question his competence.

So while you may have started out with constructive INTENT, I cannot
see that you have given us any constructive advice or the benifit of
your wisdom.  For only the 1000th time, I ask you to restrict yourself
to constructive modes of interaction.

    But the VAX sites running
    Macsyma at this time will receive your software only if we install 
    it here, first.

I consider this tragic.  The future of symbolic manipulation would be
so much brighter if it were in the hands of people who could cooperate.
Perhaps JM shares blame with you here, but you cannot deny your own
responsibility for the lack of collaberation between MIT and Berkeley.

Date: 11 May 1981 01:26-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Wrong again.
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC, JM at MIT-MC, CFFK at MIT-MC, LPH at MIT-MC

    Date: 10 May 1981 21:33:39-PDT
    From: CSVAX.fateman at Berkeley
    Subject: Naming of IMSL functions

    Are you familiar, for example, with LINPACK?  Do you realize that
    the questions of representation, sparse/dense, real/complex, single/double
    upper-triangular, tri-diagonal, .... are not just things one can
    gloss over and say "oh, we know better than that, we'll just call one
    routine, say, for Gaussian Elimination";  Or perhaps just say 
    that although the IMSL routine gives back several answers (say, a condition
    number, error indication if any, and an array), that the macsyma
    user does not need them all...

What makes you think they are ``glossed over''? Certainly the precision is
documented, the actual routines called are documented so the algorithm and
storage modes are known to the user. He can, for most of the interfaced 
routines, choose to use the Fortran-like calling sequence/semantics exactly
as documented in IMSL if he wants. The interfaces do not ignore the error 
parameters, they analyze it precisely according to the documentation signalling
errors/warnings that are intelligible to Macsyma users if/when appropriate.

      Now maybe he/she does, and maybe not.  But RWK and KMP are unlikely
    to be sensitive to these issues.  If you had a numerical analyst near
    by, it might help.

This is an irresponsible claim to make. We have attempted to be sensitive
to these issues. Where things go beyond the scope of my background, I enlist
someone with the necessary qualifications to help me or I punt and leave 
things as IMSL does it. I know the bounds of my expertise and do not pretend
exceed them.

      Perhaps this is all rather pointless though, since even in the best
    of circumstances, the PDP-10 system is not going to support much of
    this type of interaction.  

The software we are generating, including the translator, is intended to
have applications beyond both the pdp10 and the Vax. Work is currently 
underway getting the translations to run on the LispM -- good luck to you
getting either Unix or C or your IMSL stuff to run there. 

      I have not read the share2;imsl usage  file recently.  Has it changed
    much?  I do not have very specific recollections of it, and can't
    get out on the arpa net easily right now.  Turmoil in IMP-land.

I think you are way over your head and should stop putting your foot in your
mouth. I am getting fed up with your insulting remarks about my competence.
If you wanted to comment with competence on what we have coded, you should
have read at least the documentation and preferrably the code (since you chose
to slight it as well). 

Date: 11 May 1981 01:23-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  Naming of IMSL functions
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC, RWK at MIT-MC

Give us a break, the real number crunchers we talk to at MIT
aren't interested in pdp-10's or even Vax's for number crunching.
What do you say to a guy like Prof. Orzag when he tells you
how the CRAY-1 cramps his style? You go on to newer and better
things, thats what you do.

If you think the KMP isn't sensitive to the difference between
different kinds of matrix representations for computational purposes then
you are full it. "POINT OUT A BUG" don't give us bull.

-gjc


Date: 10 May 1981 21:33:39-PDT
From: CSVAX.fateman at Berkeley
To: RWK@MIT-MC
Subject: Naming of IMSL functions
Cc: macsyma-i@mit-mc

You are perfectly right in saying that IMSL code has less than the
best user interface.  You are also right in identifying PART
of the problem as being the Fortran language situation.  I think that
you guys have the potential to totally miss the boat when it comes
to including existing scientific software in the macsyma framework.

Are you familiar, for example, with LINPACK?  Do you realize that
the questions of representation, sparse/dense, real/complex, single/double
upper-triangular, tri-diagonal, .... are not just things one can
gloss over and say "oh, we know better than that, we'll just call one
routine, say, for Gaussian Elimination";  Or perhaps just say 
that although the IMSL routine gives back several answers (say, a condition
number, error indication if any, and an array), that the macsyma
user does not need them all...
  Now maybe he/she does, and maybe not.  But RWK and KMP are unlikely
to be sensitive to these issues.  If you had a numerical analyst near
by, it might help.
  Perhaps this is all rather pointless though, since even in the best
of circumstances, the PDP-10 system is not going to support much of
this type of interaction.  
  I have not read the share2;imsl usage  file recently.  Has it changed
much?  I do not have very specific recollections of it, and can't
get out on the arpa net easily right now.  Turmoil in IMP-land.

Date: 10 May 1981 20:45-EDT
From: Robert W. Kerns <RWK at MIT-MC>
Subject: Naming of IMSL functions
To: CSVAX.fateman at BERKELEY
cc: JPG at MIT-MC, KMP at MIT-MC, CFFK at MIT-MC, LPH at MIT-MC,
    MACSYMA-I at MIT-MC

    Date: 10 May 1981 16:27:33-PDT
    From: CSVAX.fateman at Berkeley
    I suppose the most bothersome issue here, is that by "fixing the interface"
    with IMSL routines, you are assuming that you, as a computer hacker,
    know more than the numerical analysts at IMSL, about scientific software.
    And that somehow you will be able to provide comparably clear and detailed
    information which will be made available to the Macsyma user, as an alternative
    to IMSL stuff.
      Now I am not saying that this cannot be done, just that I doubt that
    you have the time or expertise to do so.  We already went through GJC's
    questions about what is "SIN"  (not the 7 deadly, but the period function);
    are we going to do this for IBESJ ?
      If you want to prefix IMSL code to make it more than 6 letters, OK.
    Presumably people using the Lisp machine have some experience with this,
    though I must admit, 29000 already-used names is hard to swallow.

I am sorely disappointed to see this nonsense.  Perhaps you think
"scientific programmers" have some special competence in terms of
providing user interface.  I think you are VERY VERY WRONG.  I say that
user-interface is OUR domain of expertise, not the scientific
programmer's.  IMSL's user interface is so highly warped by its
implementation in FORTRAN that it cannot be rightly termed a user
interface.  Names like "IBESJ" have no business in *ANY* package in this
day and age at the user-interface level.  The number of already-used
names is not at all relevent to this issue.

I really hope you have a better understanding of this than this note
indicates, because as a proffessor at a major university you are
responsible for the education of the next generation of "computer
hackers".  Perhaps instead this is merely symptomatic of an eagerness on
your part to critisize, to such an extent that you don't even stop to
think about whether you're about to make a fool of yourself.  If that's
the case, it is really unfortunate that your feud with Joel has
degenerated to such depths, but I wish you would learn to not direct at
innocent bystanders.  Questioning KMP's competence to deal with such
basic issues as user interface, and insulting our intellegence with such
nonsense is hardly the way to cooperate.  It is exactly as if Joel went
out of his way to insult and irritate Bill Joy and other members of the
Berkely team.

Date: 10 May 1981 20:13-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: JPG at MIT-MC, MACSYMA-I at MIT-MC, CFFK at MIT-MC, LPH at MIT-MC,
    JM at MIT-MC

If you'd ever taken the time to even look at what we do with IMSL here,
you would know that what I have done requires no competence as a numerical
expert. My interfaces do things like allow input in the form of polynomials
and then pluck the coefficients and exponents, make matrices, figure the
size of the matrix, etc. so that the user needn't be bothered with this sort
of stuff. Asking the user to supply a 10x10 scrap array of 0's which never do
him any good or asking him to pass in the dimension of an array that Macsyma
can figure out just by looking at the arraydims of the input matrix/array is
plainly silly. These sorts of things are trivially documentable and adequate
documentation of my interfaces do exist if you're interested in perusing them.
See the file SHARE2;IMSL USAGE for pointers to the relevant files.

Yes, I do assert that I as a `computer hacker' know a whole pile more than than
a bunch of numerically analyzing fortran programmers do about how Macsyma 
should best interface to these routines. 

Why are you so amazingly willing to stick your foot in your mouth and criticize
our work without even knowing what it is we are referring to? This seems to me
at least unfriendly and perhaps irresponsible. If you want to think of yourself
as cooperating with us in software development, the least you could do is take
the time to occasionally peruse the available information on what it is that
we do here; I at least try to give your people that measure of consideration
before criticizing their efforts. 

In hopes of enhanced levels of future cooperation,
 -kmp

Date: 10 May 1981 16:27:33-PDT
From: CSVAX.fateman at Berkeley
To: JPG@MIT-MC, KMP@MIT-MC
Subject: Naming of IMSL functions
Cc: CFFK@MIT-MC, LPH@MIT-MC, MACSYMA-I@MIT-MC

I suppose the most bothersome issue here, is that by "fixing the interface"
with IMSL routines, you are assuming that you, as a computer hacker,
know more than the numerical analysts at IMSL, about scientific software.
And that somehow you will be able to provide comparably clear and detailed
information which will be made available to the Macsyma user, as an alternative
to IMSL stuff.
  Now I am not saying that this cannot be done, just that I doubt that
you have the time or expertise to do so.  We already went through GJC's
questions about what is "SIN"  (not the 7 deadly, but the period function);
are we going to do this for IBESJ ?
  If you want to prefix IMSL code to make it more than 6 letters, OK.
Presumably people using the Lisp machine have some experience with this,
though I must admit, 29000 already-used names is hard to swallow.

Date: 10 May 1981 17:57-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Naming of IMSL functions
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC, CFFK at MIT-MC, LPH at MIT-MC

IMSL function names were constrained to 6 chars and almost all their
names are 100% unintelligible. However, the IMSL calling sequences, with
a few exceptions, are pretty useless. They almost always require some 
parameters which Macsyma users shouldn't have to specify (the dimension
of an array, a scratch array, etc.). Hence, several of the more useful 
IMSL routines have been given prettier interfaces and prettier names. The
functions which have no such pretty interface and which still retain their
crufty calling sequences even in Macsyma code (eg, LEQT1F) I usually
do leave with the crufty IMSL name. So, for what it's worth (not much, I
mean to imply), I think we are compatible with RJF's request for naming/-
calling compatibility with IMSL.
-kmp


Date: 10 May 1981 11:00-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC, CFFK at MIT-MC, LPH at MIT-MC

   Date: 9 May 1981 07:51:44-PDT
   From: CSVAX.fateman at Berkeley
   To: JPG@MIT-MC
   Subject: Airy, Bessel, ...
   Cc: cffk@mit-mc, lph@mit-mc, macsyma-i@mit-mc
   If additional functions are added, I suggest that the names and parameter
   types and positions correspond as much as possible to those in IMSL library.
Well, what is natural and "right" for MACSYMA may not be completely compatible 
with the design decisions the IMSLers chose to make.

Date: 9 May 1981 21:30-EDT
From: Kent M. Pitman <kmp at MIT-MC>
Sender: ___004 at MIT-MC
Subject: Your recent note to INFO-MACSYMA on ?PURE
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

If we want users to set ?PURE, why don't we alias it to something they can 
type in without a ? like we do with *NOPOINT and BASE and IBASE?
-kmp

Date: 9 May 1981 17:31-EDT
From: George J. Carrette <GJC at MIT-MC>
To: BUG-MACSYMA at MIT-MC
cc: MACSYMA-I at MIT-MC

Macsyma doesn't recognize the new PLASMA-TV's. The code in ALJABR;LOADER
which checks LINEL, etc. aught to be doing something else here.

Date: 9 May 1981 07:51:44-PDT
From: CSVAX.fateman at Berkeley
To: JPG@MIT-MC
Subject: Airy, Bessel, ...
Cc: cffk@mit-mc, lph@mit-mc, macsyma-i@mit-mc

If additional functions are added, I suggest that the names and parameter
types and positions correspond as much as possible to those in IMSL library.
There are, however, some "error" return parameters which can cause
difficulty unless one uses call-by-reference (e.g. arrays).

Vaxima uses exclusively double precision (64 bit) IMSL, and it would
be nice for the systems to maintain some consistency.

Date: 9 May 1981 10:10-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 05/03/81 15:03:46 Re: ''SIN(X)
   We have in essence
   (DEFUN $SIN (X) (LET (($NUMER T) ($FLOAT T)) (SIMPLIFY `((%SIN) ,X))))
   Does this really make sense?  Does the "VERB-FORM" of SIN really
   have anything to do with floating point evaluation?
   Do you know why it was put into macsyma?
First of all, I already pointed out what I thought about the general issue 
of trig functions being nouns:
	JPG@MIT-MC 05/03/81 03:44:12
	...
	"SIN is (sigh!  JM's scheme; I never liked it) a NOUN."
But if you are asking me if I think the losing scheme is consistent, I say 
yes.  If SIN is a NOUN and SIN(1); gives SIN(1), then it makes some sense
for ''SIN(1); to give a floating point number.  However, I think SIN should 
not be a NOUN.  However^2, the cost of SIN's being a NOUN is relatively 
quite small compared to the cost of changing this.  (However^3, boy do 
I wish JM agreed with me when I argued for dropping the scheme when I first
came across it years ago when the cost of changing it would have been much 
smaller.)

   LPH and CFFK wanted to add Bessel functions, Airy functions etc
   consistent with COS, SIN, etc, so I'm trying to find out
   in what way the existing schemes are consistent.
Well, I'd recommend for not using the noun-verb stuff here.  I'd opt for 
following the lead of ATAN2, BETA, ZETA, and others rather than the lead 
of SIN and COS.

Date: 5 May 1981 16:51-EDT
From: George J. Carrette <GJC at MIT-MC>
Sender: GJC0 at MIT-MC
Subject: Crowbar in head.
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

The form (DECLARE (FIXNUM (+TYO FIXNUM NOTYPE)))
was causing PLOT2 to break in the new lisp version.
Cause: Change to the first instruction in +TYO.
Found: By extra error checking afforded by doing (TRACE +TYO),
       the UUOLINK code enforces NCALLed EXPR's to return numbers.
Theory: The programmer used the number declaration to cause +TYO to be NCALL'd
        which causes the function +TYO to be entered at the 2n'd instruction
        instead of the first. Since at one time this caused
        the *RSET test to be bypassed, it resulted in faster code without
        the need to globally bind *RSET.
Theory: At one time the *RSET check needed to be bypassed to
        get around a bug in maclisp. Perhaps having to do with
        output to a 12-bit-tty.
Remark: Why aren't declarations checked for consistency?

-gjc

Date: 4 May 1981 13:46-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: SETUP_AUTOLOAD
To: BUG-MACSYMA at MIT-MC
cc: MACSYMA-I at MIT-MC

SETUP_AUTOLOAD("FOO\;BAR",BAR) should give an autoload property
of (FOO * DSK BAR) not (FOO > DSK BAR). I've fixed in JPG;F297.
Perhaps if the directory is not specified it should also be "*",
so that the maximum convenience of LOAD searching the SHARE directories
is gotten? Then if there is a package "FOOBAR" the same name "FOOBAR"
could be used on multix too, although if the character ";" is allowed
in multix filenames I see nothing wrong with a name like "SHARE1\;FOOBAR".
LOAD on Multix should presumably use a mergef with string concating,
trying to load "FOOBAR.LISP" "FOOBAR" "FOOBAR.MACSYMA", with the PROBEF as
used on ITS being replaced with a call to the same search routine used
by PL1 code. (Anything providing convenience and flexibility through abstraction
will do really.)


Date: 3 May 1981 15:03-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: ''SIN(X)
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

We have that
(defun $SIN (X)
   (LET (($NUMER T)($FLOAT T))
        (SIMPLIFY `((%SIN) ,X))))

does this really make sense? Does the "VERB-FORM" of SIN really
have anything to do with floating point evaluation?
I wonder if this has ever been used by anybody in a program.
Do you know why it was put into macsyma?
LPH and CFFK wanted to add Bessel functions, Airy functions etc
consistent with COS, SIN, etc, so I'm trying to find out
in what way the existing schemes are consistent.

-gjc

Date: 3 May 1981 03:44-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 05/01/81 17:35:37 
   To: MACSYMA-I at MIT-MC
   GRADEF(F(X),EXPRESSION) does STRIPDOLLAR (why?) on the symbol $X in 
   (($F) $X).
It sticks STRIPDOLLARed symbols into the GRAD template so that it won't 
get variable conflicts when using a series substituter when DIFF'ing.
   Why does $SIN have an ALIAS property and a VERB and SUBR property?
SIN is (sigh!  JM's scheme; I never liked it) a NOUN.
   The alias property implies that no symbol $SIN every makes it
   past the parser. $SIN always => %SIN. 
Not true.  ''SIN(X); parses into (($SIN) $X) .
   What functionality is provided by $INTEGRATE vs. %INTEGRATE
%INTEGRATE can be used in an integral equation.

Date: 1 May 1981 17:35-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: special functions
To: MACSYMA-I at MIT-MC

There are various special functions defined over the floating-point
regime in use in macsyma, especially amoung the plasma-physics
community. Well, LPH and CFFK have asked me about the proper
lisp-level system-programmer way of giving macsyma the simple analytic
information about these function, i.e. GRAD properties for DIFF,
special-value simplifications, and taylor series expansions. They
claim that the macsyma-level interface is a bit messy. (I'd have to
agree with them, GRADEF(F(X),EXPRESSION) does such things
as STRIPDOLLAR (why the hell?)  on the symbol $X in (($F) $X),
and I have yet to figure out how to reasonably TRANSLATE both
GRADEF and DEFTAYLOR in the macsyma->lisp translator).

Its actually fairly clear to me how to do these things, however,
there are some possibly conflicting mechanisms about which it
would be nice to have explaination from the original implementors
(if possible) or experts. 

The question is, "what is the point about this %FOO NOUN-VERB stuff?"
There is a breakdown of subquestions:

[1] Why does $SIN have an ALIAS property and a VERB and SUBR property?
    (A) The alias property implies that no symbol $SIN every makes it
        past the parser. $SIN always => %SIN. 
    (B) The symbol $SIN doesn't appear ANYWHERE in the macsyma source
        files except in JPG;MLISP and JPG;SUPRV, where the ALIAS,
        VERB and SUBR properties are defined.
    (C) Therefore it would appear that the properties of $SIN are
        never referenced by the macsyma user outside of the parser.
[1.5] Why do $SQRT, $COS, $SEC, etc have the same problem?
[2] what functionality is provided by $INTEGRATE vs. %INTEGRATE
    except via the function $EV? (Well, without %INTEGRATE you wouldn't
    have to do EV(FOO,NOUNS) you could just say MEVAL(FOO)).

If these things could be cleared up it would be a good thing
to put into KMP's MACSYMA-IMPLEMENTOR documentation. Its also
of historical interest.

-gjc

Date: 1 May 1981 16:11-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 1 May 1981 10:20-EDT
    From: George J. Carrette <GJC at MIT-MC>

    My real problem with the present multics settup is
    [1] the slow macsyma<->emacs context switch.

Why don't you try using minima and write a little file to load the extra
stuff you need.  You can also run Macsyma inside your Emacs, which would be
the fastest thing.  (Lisp I/O only, though)

    [3] the fact that multics should be beating MC realtime.

The current rumor is that the rates will be as follows:

	shift	cpu	connect
	1	180.00	   2.00
	2	135.00	   1.50
	3	 90.00	   1.00
	4	 90.00	   1.00

The average user will pay 1.5 times what is currently being paid for Multics
usage.  This is presumably necessary for the center to start making money
again.  This will also cause the number crunchers to disappear from Multics
as quickly as they appeared when the cpu charges went to zero, so the system
should be much faster during the day.  People doing very simple stuff (data
entry) will pay less.  There will again be incentive for using the absentee
queues.

Again, this is totally unofficial.

Date: 1 May 1981 10:20-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CWH at MIT-MC
cc: MACSYMA-I at MIT-MC

    From: Carl W. Hoffman <CWH>
        From: George J. Carrette <gjc at MIT-MC>
        A multics macsyma user requested the famous CTENSR package,
        written by RP ... running it on multics and mc we...
    I would like to hear how the realtimes compared.

There were 81 users at the time, including a few number-crunching-lusers,
and response wasn't bad. Perceived speed on multics was just a little slower
than I could read, whereas on MC it was (daytime) a bit faster than reading
speed to (nightime ~ singler-user) blindling fast.

My real problem with the present multics settup is
[1] the slow macsyma<->emacs context switch.
[2] the slowness of compiling/loading the overly large macsyma source files.
[3] the fact that multics should be beating MC realtime.

Date: 29 April 1981 16:21-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: CWH at MIT-MC
cc: MACSYMA-I-FILE at MIT-MC

    Date: 29 April 1981 14:52-EST
    From: Carl W. Hoffman <CWH>
    To:   KMP

    I restructured the Mathlab mailing list to forward to Macsyma-I, but now
    mail to Mathlab causes two archival copies of the message to be created.
    What's the right fix?
-----
I fixed this. The answer is to have 
   MACSYMA-IMPLEMENTORS => MACSYMA-IMPLEMENTOR-PEOPLE, MACSYMA-I-FILE
   MATHLAB => MACSYMA-IMPLEMENTOR-PEOPLE, ... etc
This gives us the advantage of being able to mail to MACSYMA-I-FILE (I gave
it no other nicknames, btw) instead of (FILE [MAXDOC;MAIL IMPLEM]) which I
have frequently used in the past.

Date: 29 April 1981 15:30-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: GJC at MIT-MC, MACSYMA-I at MIT-MC

    Date: 29 April 1981 13:50-EST
    From: George J. Carrette <gjc at MIT-MC>
    Sender: JIM at MIT-MC
    To: MACSYMA-I at MIT-MC
    
    A multics macsyma user requested the famous CTENSR package,
    written by RP. Jim and I moved it to multics, compiled it, and ran
    CTENSR DEMO2. It looks good, absolutely no problems with the
    translated lisp code, and the running time was 28 seconds (CPU) on MC,
    and 35 seconds on Multics. A ratio of 28/35 or 80%. If one subtracts
    off the gctimes of 10 and 3 second respectively we get a figure 
    cooresponding well with the basic processor speed ratio of approximately
    60%.
    
    -gjc

I would like to hear how the realtimes compared.

Date: 29 April 1981 15:13-EST
From: Carl W. Hoffman <CWH at MIT-MC>
Subject: CADRs 15 and 16
To: MATHLAB at MIT-MC, PLASMA at MIT-MC, CPL at MIT-MC, ICE at MIT-MC,
    BAK at MIT-MC, LEVITT at MIT-MC, JOHANN at MIT-MC, RIVEST at MIT-MC,
    DPC at MIT-MC, FLAVIO at MIT-MC, CEL at MIT-MC

I am trying to determine how heavy the usage of the Mathlab and CPL Lisp
Machines will be this summer.  If you plan to be using these machines,
could you please send me a message including

  * The group you are working with (i.e. Mathlab, Plasma, CPL, AI, etc.)
  * Your anticipated usage in hours per week
  * When you tend to use the machines (i.e. business hours, evenings, weekends)
  * What kind of work you plan to do (i.e. programming, supduping,
    editing text, Daedelus, Macsyma)
	
Responses will be kept in the file MC:CWH;LISPM QUERY.

Date: 29 April 1981 13:50-EST
From: George J. Carrette <gjc at MIT-MC>
Sender: JIM at MIT-MC
To: MACSYMA-I at MIT-MC

A multics macsyma user requested the famous CTENSR package,
written by RP. Jim and I moved it to multics, compiled it, and ran
CTENSR DEMO2. It looks good, absolutely no problems with the
translated lisp code, and the running time was 28 seconds (CPU) on MC,
and 35 seconds on Multics. A ratio of 28/35 or 80%. If one subtracts
off the gctimes of 10 and 3 second respectively we get a figure 
cooresponding well with the basic processor speed ratio of approximately
60%.

-gjc


Date: 29 April 1981 02:20-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [CWH: you might be intersetd in this]
To: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

Date: 17 April 1981 11:20-EST
From: Carl W. Hoffman <CWH>
To:   WGD, KMP
Re:   you might be intersetd in this

    WGD@MIT-MC (Sent by BIL@MIT-MC) 04/15/81 13:56:36 Re: you might be intersetd in this 
    Date: 15 April 1981 13:51-EST
    From: William G. Dubuque <WGD at MIT-MC>
    Sender: BIL at MIT-MC
    Subject: parsing
    To: KMP at MIT-MC
    
	    How hard would it be to extend the Macsyma parser to recognize 
    different "modes"? E.g. we might have a poly-mode such that
    
    lcm(p+q,p^2-1) => (plcm (pplus p q) (pdiff (pexpt p 2) (make-poly ...)))
    
We should probably discuss this in person.

Date: 17 April 1981 15:21-EST
From: George J. Carrette <GJC>
To:   BIL
cc:   KMP, GJC
Re:   Languages for arithmetic.

(LOAD "PRATT;CGOL") 
; right now just on MC, I haven't compiled for the LISPM yet.

and it defines a # readmacro #. <SHARP-SIGN><ALT-MODE>

#CGOL  X+Y+Z   ; reads in as (PLUS X Y Z)

#RAT X+Y+Z    ; reads in as (RAT-PLUS X Y Z)

See MC:Pratt;CGOLS > and it will be obvious what is going on.

About the CGOL syntax. All the arithmetic operators
do what they are supposed to do. ";" is a progn and ":=" is
the "SETF".  FOO(X,Y,Z) is a function call.

F[A,B] is (MAPCAR #'F A B). Don't ask me why. Well, if you
wanted such things to be (AREF F A B) then its easy to
define. But most likely you just want to stay away from
the programming constructs and just use the arithmetic.

#RAT
  X:=X+Y+Z;
  Y:=3*Z**5;
  Y/X/(X-1)*Y**2
 

I guess that doesn't look too bad really.

-gjc

Date: 27 April 1981 18:35-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: Fun facts to know and tell
To: BUG-MACSYMA at MIT-MC
cc: JM at MIT-MC, MACSYMA-I at MIT-MC

Moses reports in his Ph.D. Thesis that the program SIN took
0.30 seconds on an IBM 7094 to solve

INTEGRATE(SIN(X)*COS(X),X,0,%PI/6);

which presently takes Macsyma somewhat over 6.70 seconds on MC-ITS.

Most of the other problems in appendix C now have times approximately
equal to what they were in 1967. e.g.

INTEGRATE(EXP(X)/(1+EXP(X),X); took 0.28 seconds before, now takes 0.11 seconds

However INTEGRATE(1/X,X,1,2) went from 0.20 seconds to 3.9 seconds.

-gjc

Date: 27 April 1981 17:14-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Emacs' library KP;XLISP for transforming lisp code
To: MACSYMA-I at MIT-MC

The library KP;XLISP has been moved to EMACS;. Please update your init files.
I have a link from KP; to EMACS; for now but that will go away in the near
future. -kmp

Date: 27 Apr 1981 09:19:01-PDT
From: CSVAX.fateman at Berkeley
To: jim@mit-mc
Subject: GJC's trace package
Cc: macsyma-i@mit-mc

no specific objections.  However, change for change's sake I object to.
Trace and translation, both of which GJC has worked on, tend to be 
more system dependent than other things, as you are probably aware.
If GJC or others wish to put these
things up on the VAX, we have no objection.
We have other things to do right now.

Date: 24 April 1981 15:40-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [JIM: forwarded]
To: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

Date: 17 April 1981 10:08-EST
From: James E. O'Dell <JIM>
To:   JPG
cc:   KMP

    Date: 17 April 1981 05:08-EST
    From: Jeffrey P. Golden <JPG>
    To:   JIM, KMP
    cc:   JPG

       JIM@MIT-MC 04/17/81 02:30:06
       To: KMP at MIT-MC, JPG at MIT-MC
       Remember that problem we were working on with DB. I tracked it down to
       the difference between compiling with a FIXNUM decl for LAB or not.
       With the fixnum dcl. I win (The code loses bad it seems).
       Without the dcl. the code runs like it does interpreted i.e. correctly,
       but gives DB the wrong answer.
       I put lots of print statements in the code in jim;foo > and compiled
       NONE of them seem to get printed whereas interpreted almost all of 'em
       do. Something wrotten here!
    The bug has been fixed in MRG;DB 1133.  I simply defined 
    (DEFUN AB4 (LAB DAT) NIL)
    (DEFUN AB5 (LAB DAT) NIL) .
    These definitions were suggested by the fact that the bogus compiled code 
    (losing JONL!) did nothing!
    I wonder how much more MRG;DB we don't use in MACSYMA?  I bet lots more.
    I will begin flushing some more code there in a while.
    (The above changes to AB4 and AB5 seem to work fine.  Whatever Mike's 
    intentions here were they were never activated in MACSYMA, so obviously 
    we don't need them.)

I just had a hard time believing what I saw late last night or I would have
done the same thing, Thanks.

P.S. 
I mat try to work the code down in jim;foo > to something that JONL can easily
recognize the error in the COMPLR.

Date: 23 April 1981 17:35-EST
From: V. Ellen Golden <ELLEN at MIT-MC>
Subject: TRACE, Multics and MC (etc) file names in DESCRIBE
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

Of course I am interested in your suggestions for solutions for
this problem.  I do not think the manual has a similar problem,
however, since it is easy on paper to say "For Multics do...,
and for ITS do ..., and for VAX do...", however DESCRIBE is
a special case.  Perhaps you and I could get together and discuss
this some afternoon.

Date: 23 April 1981 06:59-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 04/23/81 02:05:55 Re: obsolete variables
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   The variables $TRANSBIND and $SPECIAL are obsolete, used to be
   used in the translator (MRG variables). They should be removed from 
   JPG;MLISP and JPG;SUPRV along with references to $COMPRGRIND and 
   $TRANSCOMPILE which are set through the DEFMVAR mechanism.
Done.

Date: 23 April 1981 02:05-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: obsolete variables
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

The variables $TRANSBIND and $SPECIAL are obsolete, used to be
used in the translator (MRG variables). They should be removed from JPG;MLISP
and JPG;SUPRV along with references to $COMPRGRIND and $TRANSCOMPILE
which are set through the DEFMVAR mechanism.

-gjc

Date: 17 April 1981 18:30-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: MACSYMA-IMPLEMENTORS at MIT-MC

    Date:  17 April 1981 13:42 est
    From:  DCStevens.HAMALG at MIT-Multics
    To:  Multics-Macsyma-Bugs at MIT-MC
    
    I invite you to try sending
    a message using the macsyma bug command and put in
    some double quotes or some semicolons or almost any
    other special character.  It does not work and tends to
    infuriate me.

At the time the BUG and SEND commands were implemented, I objected to
them, arguing that they did not belong in Macsyma and that users should
learn the native facilities of the operating system which they were
using.  I still feel they should be flushed.

Date: 17 April 1981 13:05-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: Defined variables
To: ASB at MIT-MC
cc: MACSYMA-I at MIT-MC

The steps for making a variable a macsyma defined one are:

[0] the form (DEFMVAR $FOO ...) is put in the source file.
[1] the source file is compiled with :MCL installed into the system.
    the file MAXDOC;DCL VARS then has a record of the transaction at 
    the end of the file. Mail about this new variable 
    (documentation string, etc) goes to the file MAXDOC;MDOC MAIL.
[2] The command DECLARE-FILE-MAKE must be given to the program
    MAXTUL;MAXTUL. This generates the file MAXDOC;DCL FASL,
    which is loaded by both the macsyma-system compiler and
    the macsyma->lisp translator.
[3] A new TM must be dumped out, while an MCL must be dumped out
    if the INCLUDEF of the DCL files is disabled.

Note: Since all the programs involved have fix-files and since
      the crucial step [1] triggers the mailer process it should
      be quite trivial to have incremental versions of steps
      [2] and [3] happen automatically via the comsat PRGM option.

-gjc

Date: 9 Apr 1981 07:16:15-PST
From: CSVAX.fateman at Berkeley
To: GJC@MIT-MC, RJF@MIT-MC
Subject: your objections to macsyma as a system program.
Cc: ASB@MIT-MC, JM@MIT-MC, MACSYMA-I@MIT-MC

What does this show?  Only that you can't spell "kernel".


Date: 8 April 1981 11:24-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: your objections to macsyma as a system program.
To: RJF at MIT-MC
cc: JM at MIT-MC, ASB at MIT-MC, MACSYMA-I at MIT-MC

Let us make a rough comparison between the size of
the "total" macsyma, and that of a part of macsyma
contributed by a single user, Richard Brenner, alias ASB.

The "kernal" I take as the so-called "in-core" macsyma,
the "extens" are the out-of-core files, while the "Brenner"
is the ASB feynman diagram package. The complexity measure used
is the number and size of the FASL files.
      
           Number of Files    Size of Files.
"kernal"    36    13%          159k   26%
"extens"   177    67%          314k   51%
"Brenner"   50    19%          147k   24%
  TOTAL    299   100%          779k  100%

The contribution of the "Brenner" is comparable in size to the "kernal,"
and roughly half the size of the "extens."
What does this show? Simply that there are some rather large
programs written in macsyma. I'll leave it at that; won't even talk
about "the law of large programs."

-gjc

Date: 6 April 1981 17:53-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [RWK: MERROR] -- Old mail
To: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

Date: 12 November 1980 18:34-EST
From: Robert W. Kerns <RWK>
To:   CWH
cc:   GJC, JPG, KMP
Re:   MERROR

    Date: 10 November 1980 19:49-EST
    From: Carl W. Hoffman <CWH at MIT-MC>
    To: GJC at MIT-MC, RWK at MIT-MC, KMP at MIT-MC, JPG at MIT-MC,
        CWH at MIT-MC

    I haven't been following the MERROR discussions, so I'm not up to date on
    what's happened.  What I am proposing below may have already been
    implemented.  We need:

    1) A way of signalling Lisp-level errors to Macsyma implementors.
    2) A way of signalling Macsyma-level errors to Macsyma users.
    3) A CHECK-ARG facility for Macsyma implementors.
    4) A CHECK-ARG facility for Macsyma users.

    We've been using MERROR for both (1) and (2) above, although the recent
    implementation of ~M has made it much more useful for (2).  I would like to
    see an MERROR-INTERNAL which signals an error which a Macsyma user is never
    supposed to see, e.g. something to stick at the bottom of data-type caseq's.
    ....
I think a suitable mechanism for this is to use the '$' prefix on signals that
are supposed to be user-visible.

Date: 5 April 1981 11:08-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: ASB at MIT-MC, MACSYMA-I at MIT-MC

    Date: 4 APR 1981 1728-EST
    From: JPG (Jeffrey P. Golden)
    To:   GJC
    cc:   ASB, MACSYMA-I

       GJC@MIT-MC 04/04/81 12:09:08
       Unfortunately, (optionp 'foo) does not return T iff foo is a macsyma
       system variable. It returns T iff a variable is bound but not
       on the lists $VALUES or $LABELS. What about translated code 
       with PACKAGEFILE:TRUE?
    The idea is you could use MAPATOMS on OPTIONP to create a file of SPECIALs 
    which the translator could load in just as it now loads in 
    MAXDOC;DCL VARS or whatever.  So the user's translated code would not get 
    in the way at all.


This is what I in fact have done for some time, in the more critical
compilation environment I load Maxdoc;Tdcl along with DCL FASL.

However this still does not give me the important MODE information
which would be present in a good DEFMVAR declaration.

The warning message is meaningfull, there is something wrong, there
is information missing. It does not add one iota to the functionality
of macsyma to suppress these meaningfull messages. It would be the
worst kind of sugar coating leading to further decay of the system.


Date: 5 April 1981 10:57-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  IF-FOR-LISPM
To: JONL at MIT-MC
cc: ALAN at MIT-MC, CWH at MIT-MC, GJS at MIT-MC, MACSYMA-I at MIT-MC

How about if we get somebody to write an autoload device?
(SETQ A (OPEN "AUTOLO:"))
(PRINT 'IF-FOR-LISPM A)
(SETQ F (READ A))
(IF F (LOAD F))

Seriously folks, seems we are suffering from the 6-BIT blues here,
our problems having more to do with lossages in ITS than in Maclisp.
If our filenames could be as long as our function names then we
would be home free.


Date: 4 April 1981 19:12-EST
From: Jon L White <JONL at MIT-MC>
Subject: IF-FOR-LISPM
To: GJS at MIT-MC
cc: CWH at MIT-MC, ALAN at MIT-MC, MACSYMA-I at MIT-MC

Agreed that many of the trivial LISPM macros should be available in
MacLISP -- but the address space crunch is such that they just can not
be added to the default system.  Perhaps we ought to have a standard
system file which "embellishes" a Maclisp to the degree possible
for the missing LISPM macro names, e.g. FIRST, SECOND etc. also.
   While not trying in any way to put down your usage of the
IF-FOR-LISPM etc macros, I appreciated CWH's commentary on the more
general, albeit "engineering" nature of the # conditionalizations
which have become standard within the past two years.  An even
more extended problem is addresses in the "SHARPC" package
(see .INFO.;LISP SHARPC for documentation), namely that which
occurs in a cross-compilation  effort;  one has to distinguish
between features of the machine hosting the compiler (or whatever
similar such processor) and those of the machine intended as target.
  But if the ball-pein hammer of IF-FOR-LISPM is good enough for
you, then you don't need the pile-driver of SHARPC.  Seriously,
however, who would be interested in maintaining a distributable version
of a macros compatibility package for Maclisp? say on LIBDOC/LIBLSP?  
Some of this work must have already been done, at least partially, in the 
LIBMAX directory for Macsyma.

Date: 4 April 1981 17:28-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: ASB at MIT-MC, MACSYMA-I at MIT-MC

   GJC@MIT-MC 04/04/81 12:09:08
   Unfortunately, (optionp 'foo) does not return T iff foo is a macsyma
   system variable. It returns T iff a variable is bound but not
   on the lists $VALUES or $LABELS. What about translated code 
   with PACKAGEFILE:TRUE?
The idea is you could use MAPATOMS on OPTIONP to create a file of SPECIALs 
which the translator could load in just as it now loads in 
MAXDOC;DCL VARS or whatever.  So the user's translated code would not get 
in the way at all.

Date: 4 April 1981 12:09-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: ASB at MIT-MC, MACSYMA-I at MIT-MC

Unfortunately, (optionp 'foo) does not return T iff foo is a macsyma
system variable. It returns T iff a variable is bound but not
on the lists $VALUES or $LABELS. What about translated code 
with PACKAGEFILE:TRUE? Otherwise, can you imagine the look on
a users face when he sees the HUNDREDS of functions and variables
from ASB's code on the user's infolists?

O.K. I admit there are ways to further "patch" OPTIONP,
but give me a break, there is a perfectly good mechanism in
DEFMVAR, and I don't see why we can't just convert to it
as "undefined global warning"'s trickle in from people.

The users of Translate_File don't have to be protected
from seeing messages like this, I doubt it lowers their
opinion of macsyma any.

-gjc

Date: 4 April 1981 10:19-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: ASB at MIT-MC, MACSYMA-I at MIT-MC

   GJC@MIT-MC 04/03/81 10:29:22 Re:  DEFMFUN DATABASE
   To: ASB at MIT-MC
   CC: MACSYMA-I at MIT-MC
       ASB@MIT-MC 04/02/81 23:44:05  Re: DATABASE
       SETCHECK is giving undefined global warnings.  I guess that means 
       it is not in the database.
   Can somebody DEFMFUN this variable in the correct place?
I assume you mean DEFMVAR.  Has been done in JPG;MLISP which has been 
compiled.
As you know, there is no reason for these "undefined global warnings" 
for old MACSYMA system variables which have not been DEFMVARed.  
(OPTIONP 'foo) returns T iff foo is a MACSYMA system variable.

Date: 3 April 1981 15:22-EST
From: Jon L White <JONL at MIT-MC>
Subject: Trying to flush symbols from Default MacLISP
To: GJC at MIT-MC
cc: JPG at MIT-MC, KMP at MIT-MC, MACSYM-I at MIT-MC

I may have mentioned this to you before, but many many new
symbols have been introduced to lisp over the past couple
of years at no cost in address space.  This means that your
best efforts to "put them out of core somehow" would not
in fact reclaim any space.  Part of the trick I used was to
have symbols with common pname parts actually share parts
of their pnames.  The major factor however, was merely using
the otherwise "dead space" in a pure page, which couldn't be
used anyway after the lisp gets dumped out.

Date: 3 April 1981 10:29-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  DEFMFUN DATABASE
To: ASB at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 04/02/81 23:44:05
    From: ASB
    Re:   DATABASE

    SETCHECK is giving undefined global warnings.  I guess that means it is
    not in the database.

Can somebody DEFMFUN this variable in the correct place?

Date: 31 March 1981 13:33-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 31 MAR 1981 0527-EST
    From: JPG at MIT-MC (Jeffrey P. Golden)

    The only stuff left in MAXSRC;RUNTIM > are function definitions for 
    ADD, MUL, ADD*, and MUL* which the comment there claims are needed for 
    code generated by TRANSL.

ADD and MUL are around only for the benefit of old translated files.  I
believe that JPG and I agreed a year ago to flush them after some point,
since their subr definitions are incompatible with their macro definitions.

TRANSL should be generating calls to ADD* and MUL* only.  If TRANSL can
arrange for the MOPERS package to be present during the interpretation and
compilation of translated code, then the subr definitions of ADD* and MUL*
can be flushed.  Alternately, TRANSL can generate calls to the
appropriate routines in OPERS, i.e. ADD2, ADDN.

We should check first that none of these subrs are applied anyplace.  A tags
search of Macsyma for (FUNCTION ADD) or #'ADD would probably suffice.

Date: 31 March 1981 08:18-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 31 MAR 1981 0527-EST
    From: JPG (Jeffrey P. Golden)
    To:   MACSYMA-I

    The only stuff left in MAXSRC;RUNTIM > are function definitions for 
    ADD, MUL, ADD*, and MUL* which the comment there claims are needed for 
    code generated by TRANSL.

For TRANSL they can obviously be autoloading.

Date: 31 March 1981 05:27-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC

The only stuff left in MAXSRC;RUNTIM > are function definitions for 
ADD, MUL, ADD*, and MUL* which the comment there claims are needed for 
code generated by TRANSL.

Date: 28 March 1981 16:07-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC

    Date: 27 March 1981 21:35-EST
    From: George J. Carrette <GJC at MIT-MC>

    Are you kidding, it is only needed for uncompiled fix files on MC?
    Kind of crazy to waste the address space just for that, I mean,
    gosh, with all the arguments about "you can't do X because of address
    space."

I couldn't agree with you more.  And running interpreted fix files burns up
even more space.  However, the current situation is better than it was
previously when those functions were sprinkled among the rest of the source
files.

My two bits regarding the FASLOAD issue:  I think its default value should
be set to warn you if a redefinition takes place.  It should be bound to
NIL only in specific situations when we know a redefinition is going
to happen, as in during the loading of fix files.  We might also have a
special command for loading fasl files being debugged which also binds it
to NIL.  But for normal loadfiles and autoloads, I would prefer having the
extra check around.

Date: 27 March 1981 21:51-EST
From: Richard L. Bryan <RLB at MIT-MC>
To: KMP at MIT-MC
cc: GJC at MIT-MC, MACSYMA-I at MIT-MC

    Date: 27 March 1981 16:31-EST
    From: Kent M. Pitman <KMP at MIT-MC>

        Date: 27 March 1981 09:51-EST
        From: George J. Carrette <GJC>
        To:   KMP
        cc:   MACSYMA-I

        I've got a couple programming examples from ASB where he
        could really use a "DO" which returned something more usefull than
        "DONE."

        FOR X IN L RETURNING FALSE DO IF FOOBAR(X) THEN RETURN(TRUE); ...

        ... What kind of syntax would be good for this?

        -gjc
    -----
    Well, to do just that little change would require a major format change
    to MDO. Given that there is this MDOIN frob, I guess there could be an
    MDORETURNING and MDOINRETURNING, but... You're right something should be
    done. I am just not sure what.

    Note that the syntax is the easy part. The only hard part is the internal
    representation.

    -kmp
Hell, I did all this 2 years ago.

Date: 27 March 1981 21:35-EST
From: George J. Carrette <GJC at MIT-MC>
To: CWH at MIT-MC
cc: BUG-LMMAX at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC

Are you kidding, it is only needed for uncompiled fix files on MC?
Kind of crazy to waste the address space just for that, I mean,
gosh, with all the arguments about "you can't do X because of address space."

Date: 27 March 1981 18:07-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: GJC at MIT-MC
cc: JPG at MIT-MC, BUG-LMMAX at MIT-MC, MACSYMA-I at MIT-MC

    Date: 27 March 1981 00:17-EST
    From: George J. Carrette <GJC at MIT-MC>

    It should be of interest because it turns out to be a BUG in the LISPM
    "redefining so-called check" code. (Maybe not this particular case though).
    Anyway, there are much better ways to do the function/macro hat-trick
    which result in less funny business when one tries to bring up a
    macsyma some place.

RUNTIM is ITS-only.  It should not have been added to the Macsyma system
definition.  It should not have been added to the MAXLNK dir.  It should not
have any effect on bringing up a Macsyma anyplace except on MC.

The file simply contains subr definitions of macros factored out of the
central source.  If MC fixes were always compiled, there would be no need for
the file.

Date: 27 March 1981 16:31-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 27 March 1981 09:51-EST
    From: George J. Carrette <GJC>
    To:   KMP
    cc:   MACSYMA-I

    I've got a couple programming examples from ASB where he
    could really use a "DO" which returned something more usefull than
    "DONE."

    FOR X IN L RETURNING FALSE DO IF FOOBAR(X) THEN RETURN(TRUE); ...

    ... What kind of syntax would be good for this?

    -gjc
-----
Well, to do just that little change would require a major format change
to MDO. Given that there is this MDOIN frob, I guess there could be an
MDORETURNING and MDOINRETURNING, but... You're right something should be
done. I am just not sure what.

Note that the syntax is the easy part. The only hard part is the internal
representation.

-kmp

Date: 27 March 1981 09:51-EST
From: George J. Carrette <GJC at MIT-MC>
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

I've got a couple programming examples from ASB where he
could really use a "DO" which returned something more usefull than
"DONE."

FOR X IN L RETURNING FALSE DO IF FOOBAR(X) THEN RETURN(TRUE);

All I'm looking for is some syntax to allow the user to replace
the '$DONE in

(DO ((T001 (CDR $L) (CDR T001))($X))
    ((NULL T001) '$DONE) (SETQ $X (CAR T001)) ...))

with something of his own choosing.

What kind of syntax would be good for this?

-gjc

Date: 27 March 1981 09:29-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  Setting of FASLOAD
To: JPG at MIT-MC
cc: BUG-LMMAX at MIT-MC, KMP at MIT-MC, MACSYMA-I at MIT-MC

I agree that we already know about any multiply-defined macsyma functions,
for a general enough "we" that is. However, things change, sometimes
we get new programmers who do not know about all the crocks,
and the turning off of the FASLOAD protection is just one more thing,
like the old setting of CAR and CDR, that adds to the general lack
of consistency and reliablity in the macsyma system. 

I think it makes it harder to transport a reliable macsyma.

For the macsyma user, what the lisp system prints out for redefined
messages..., well, what is the technical term, "sucks."
However, it is easy enough to add a couple lines to the maclisp source
to have it FUNCALL the value of (STATUS REDEF) or something.

With what JPG keeps in MAXDMP;MSLOCS > plus what gets into the STRING files,
we have in Maclisp a consistency checking mechanism far superior to what
the Lisp-Machine supports. [This is true, cross my heart and hope to lose!]
With (STATUS REDEF) we could really win. Why not win for a change.

-gjc

Date: 27 March 1981 02:58-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC

   KMP@MIT-MC 03/27/81 02:45:31 Re:  Setting of FASLOAD variable
   To: JIM at MIT-MC, JPG at MIT-MC
   CC: (BUG LMMAX) at MIT-MC, MACSYMA-I at MIT-MC, GJC at MIT-MC
   If two versions of a function are loaded, this information should be known
   to the user for the sake of bug reports about those functions.
I'm not sure what this is about.  We already know about any 
multiply-defined MACSYMA functions.   
   If a user is clobbering an already-defined function, he is wasting part of 
   his address space to unreachable code and is entitled to know about it.
The user is already told about := redefinitions.  I'm not sure what your 
case is. 
   It is easy enough to type ^S to flush redefining messages. Additionally,
   the handler could be sensitive to a REDEFINEPRINT variable...
I think ^S is too general for this purpose.
I still think using the FASLOAD variable for this purpose as advocated by 
GJC would do much more harm than good.  If you want to implement a new 
REDEFINEPRINT variable, go right ahead.

Date: 27 March 1981 02:45-EST
From: Kent M. Pitman <KMP at MIT-MC>
Sender: KMP0 at MIT-MC
Subject:  Setting of FASLOAD variable
To: JIM at MIT-MC, JPG at MIT-MC
cc: BUG-LMMAX at MIT-MC, MACSYMA-I at MIT-MC, GJC at MIT-MC

If two versions of a function are loaded, this information should be known
to the user for the sake of bug reports about those functions.

If a user is clobbering an already-defined function, he is wasting part of 
his address space to unreachable code and is entitled to know about it.

It is easy enough to type ^S to flush redefining messages. Additionally,
the handler could be sensitive to a REDEFINEPRINT variable...


Date: 27 March 1981 00:17-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: BUG-LMMAX at MIT-MC, MACSYMA-I at MIT-MC

    Date: 23 MAR 1981 1714-EST
    From: JPG (Jeffrey P. Golden)
    To:   GJC
    cc:   (BUG LMMAX), MACSYMA-I

       GJC@MIT-MC 03/21/81 11:15:51 Re: more conflicts
       To: (BUG LMMAX) at MIT-MC
       CC: MACSYA-I at MIT-MC
       In LESFAC and RUNTIM, {GETDIS, CONS1}.
       How come these don't show up on MC or multics?
    I do not see why this is of interest to BUG-LMMAX.  Carl has this comment, 
    top of MAXSRC;RUNTIM saying that it is an ITS-only file.
    That probably explains why it doesn't show up on Multics.
    And according to the comment, the redefining of certain macros as functions 
    for the ITS-only runtime environment is intentional.

It should be of interest because it turns out to be a BUG in the LISPM
"redefining so-called check" code. (Maybe not this particular case though).
Anyway, there are much better ways to do the function/macro hat-trick
which result in less funny business when one tries to bring up a
macsyma some place.

Date: 26 March 1981 13:33-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: JPG at MIT-MC
cc: GJC at MIT-MC, JIM at MIT-MC,
    "(FILE [DSK:MAXDOC;MAIL IMPLEM])" at MIT-MC

    Date: 25 March 1981 04:22-EST
    From: Jeffrey P. Golden <JPG>
    To:   JIM
    cc:   JPG, KMP, GJC

       JIM@MIT-MC 03/24/81 22:56:16
       To: JPG at MIT-MC, KMP at MIT-MC

       Have you noticed the #+(or pdp10 (not maxii))
       around the code the puts the autoload properties on symbols in suprv.
       This recent change seems bogus to me. Multics and Franz are not MAXII's
       and probably do not want those autoload properties. My old version 293
       of Multics Macsyma doesn't have them.

    Yeah, I can't figure out what GJC had in mind here either.
    I changed his #+(or pdp10 (not maxii)) here back to #+pdp10 .

It should probably have been #+(AND PDP10 (NOT MAXII))... Hopefully
there should be cases of just plain #+(NOT MAXII) which you have left
alone ... I will look this over later to be sure... -kmp

Date: 24 March 1981 11:31-EST
From: James E. O'Dell <JIM at MIT-MC>
To: JPG at MIT-MC
cc: BUG-LMMAX at MIT-MC, GJC at MIT-MC, MACSYMA-I at MIT-MC

    Date: 23 March 1981 17:41-EST
    From: Jeffrey P. Golden <JPG>
    To:   GJC
    cc:   BUG-LMMAX, MACSYMA-I

       GJC@MIT-MC 03/21/81 11:15:51 Re: more conflicts
       To: (BUG LMMAX) at MIT-MC
       CC: MACSYA-I at MIT-MC
       Jeff, how about keeping the default value of FASLOAD the same as
       it is in a bare lisp? Just bind it to NIL during the loading of the
       FIX file. As far as I can tell, name conflicts are now a fairly rare
       event in the macsyma system, and I don't understand the
       design decision involved in turning off one of the only protection
       features available in Maclisp.
    I think such a change would hurt much more than it would help.

    It would hurt MACSYMA users who would be inconvenienced by it whenever 
    they have cause to load in essentially the same FASL file twice.
    (I'm not even sure what your "fairly rare" means.  Consider the 
    POIS2/POIS3 aberration, for example.  We've really got to fix this up some 
    day!)

    It would hurt CSYMA system programmers who load in modified FASL files 
    to check them out.

    It is not clear who it would help.  If MACSYMA system programmers some of 
    the time, surely we can reset the switch whenever we want to.

    And if the default value should really be non-NIL, how many of us 
    actually have such a setting in our Macsyma init files and like 
    that setting?

I agree with JPG. I think it should be the responsibility of the Macsyma
programmers to set those switches and to correct any problems that they
find. Whats keeping you from doing it. My macsyma starts up defaulty with
nouuo t and Fasload set to '(subr fsubr lsubr). If I am doing something other
than debugging code I don't use my init file.

Date: 23 March 1981 17:41-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC, MACSYMA-I at MIT-MC

   GJC@MIT-MC 03/21/81 11:15:51 Re: more conflicts
   To: (BUG LMMAX) at MIT-MC
   CC: MACSYA-I at MIT-MC
   Jeff, how about keeping the default value of FASLOAD the same as
   it is in a bare lisp? Just bind it to NIL during the loading of the
   FIX file. As far as I can tell, name conflicts are now a fairly rare
   event in the macsyma system, and I don't understand the
   design decision involved in turning off one of the only protection
   features available in Maclisp.
I think such a change would hurt much more than it would help.

It would hurt MACSYMA users who would be inconvenienced by it whenever 
they have cause to load in essentially the same FASL file twice.
(I'm not even sure what your "fairly rare" means.  Consider the 
POIS2/POIS3 aberration, for example.  We've really got to fix this up some 
day!)

It would hurt CSYMA system programmers who load in modified FASL files 
to check them out.

It is not clear who it would help.  If MACSYMA system programmers some of 
the time, surely we can reset the switch whenever we want to.

And if the default value should really be non-NIL, how many of us 
actually have such a setting in our Macsyma init files and like 
that setting?

Date: 23 March 1981 17:14-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: BUG-LMMAX at MIT-MC, MACSYMA-I at MIT-MC

   GJC@MIT-MC 03/21/81 11:15:51 Re: more conflicts
   To: (BUG LMMAX) at MIT-MC
   CC: MACSYA-I at MIT-MC
   In LESFAC and RUNTIM, {GETDIS, CONS1}.
   How come these don't show up on MC or multics?
I do not see why this is of interest to BUG-LMMAX.  Carl has this comment, 
top of MAXSRC;RUNTIM saying that it is an ITS-only file.
That probably explains why it doesn't show up on Multics.
And according to the comment, the redefining of certain macros as functions 
for the ITS-only runtime environment is intentional.

Date: 21 March 1981 22:32-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Binding of FASLOAD variable
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

I agree. Macsyma should perhaps have its own handler for 
printing out the warnings in a less hostile way than Lisp
defaultly provides, but the redefinitional warnings are a
good idea. -kmp

Date: 21 March 1981 11:20-EST
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC
cc: MACSYMA-I at MIT-MC

$GCD is defined in both RAT3E and RAT3C.

GJC@MIT-MC 03/21/81 11:18:09
In LESFAC and RUNTIM, {GETDIS, CONS1}.
How come these don't show up on MC or multics?

Jeff, how about keeping the default value of FASLOAD the same as
it is in a bare lisp? Just bind it to NIL during the loading of the
FIX file. As far as I can tell, name conflicts are now a fairly rare
event in the macsyma system, and I don't understand the
design decision involved in turning off one of the only protection
features available in Maclisp.

-gjc

Date: 21 March 1981 10:43-EST
From: George J. Carrette <GJC at MIT-MC>
To: BUG-LMMAX at MIT-MC
cc: MACSYMA-I at MIT-MC

There are a bunch of macro/function conflicts in MOPERS, RUNTIM, RATMAC,
these should be resolved to use Compiler:Optimizers and Source-Trans
properties via an "integrable function" declaration.


Date: 16 March 1981 15:15-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  strings and file-names
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 16 Mar 1981 08:22:49-PST
    From: CSVAX.fateman at Berkeley
    To:   MACSYMA-I
    Re:   strings and file-names

    Macsyma users on the VAX (and Multics) have always used strings for
    filenames, and no one has ever asked for a FILENAME_MERGE command.

Presumably they have not been writing programs which manipulate
filenames which then get passed to LOAD, SETTUP_AUTOLOAD, TRANSLATE_FILE,
GENERATE_TAGS_FILE, etc. Some users, or, should we call them uber-users,
have written programs which now have to deal with filenames on
both Multics and ITS. Maybe it is crazy to do this systems programming
in macsyma, but there are users doing it, and in the language which
is most accessable to them.

The clearest examples are ELL's ODE data-base and ASB's extensions
to the environment-saving utilities.

-gjc

Date: 16 March 1981 14:19-EST
From: Jon L White <JONL at MIT-MC>
Subject: Support needed for NILCOM software
To: GJC at MIT-MC, CWH at MIT-MC, SOLEY at MIT-MC
cc: MACSYMA-I at MIT-MC, MULTICS-LISP-PEOPLE at MIT-MC

    Date: 15 March 1981 14:53-EST
    From: Carl W. Hoffman <CWH at MIT-MC>
	GJC@MIT-MC 03/13/81 15:57:49
	You know man, I'm going to bring up all the NILCOM/MACLISP
	macro stuff on multics so I can run my macsyma->lisp translator.
	Although I'm not sure what to do about Hunks, (maybe use
	Array's instead), probably hacking apply to do a SEND is easier
	in the multics pl1 than it is in maclisp midas. 
    Would you mind explaining to us exactly what of the NILCOM/MACLISP
    facilities you use?  In particular, is any runtime support necessary, or is
    .  .  .
The NILCOM software doesn't really depend upon having a SEND (message
passing protocol), but does depend upon having some kind of extensible
data type.  Thus EXTENDs could be implemented as merely  ARRAYs with
a distinguished element in the 0'th slot;  the NIL emulators ran
under maclisp for almost a year before we put all the hooks into
the system for interfacing SEND.  I may have said this before, but
certainly let me repeat it again, DONT IMPLEMENT HUNKS anywhere, ever!
Ideally, you'd just implement EXTENDs, which are more-or-less like
a VECTOR with a pointer to the CLASS, and then you can implement
things like BITS (bit-strings) as an EXTEND with two slots, one
of which points to a fixnum array.  This is how the current PDP-10 
MacLISP does it (and, cough, cough, EXTENDs were obtained via HUNKs).
Having the CLASS heirarchy is good for the extensible data types
regardless of whether or not you actually have a SEND.

Date: 16 March 1981 12:14-EST
From: Jon L White <JONL at MIT-MC>
To: CWH at MIT-MC
cc: BUG-LISP at MIT-MC, MACSYMA-I at MIT-MC,
    MULTICS-LISP-PEOPLE at MIT-MC

Carl Hoffman wants to get the functionaliy of the MacLISP/NIL 
DEFMACRO into Multics, without having to add any new switches 
(such as DEFMACRO-FOR-COMPILING etc) to the Multics MacLISP 
compiler -- as an accommodation to a style of compiler usage 
whereby the user "pretends" that the switch MACROS is to take 
over the functionality of DEFMACRO-FOR-COMPILING, I've changed 
the two occurrences of this latter switch in the DEFMACRO source
file into
    (cond ((boundp 'DEFMACRO-FOR-COMPILING)
	    DEFMACRO-FOR-COMPILING)
	  ((status FEATURE COMPLR)
	    MACROS)
	  ('T))
The normal state in the PDP10 MacLISP world is that 
DEFMACRO-FOR-COMPILING is set to 'T (even in non-COMPLR lisps), and 
MACROS is defaultly (); just the opposite case would apparently obtain 
under Multics, that is DEFMACRO-FOR-COMPILING would be unbound, and 
MACROS would be T.   So, this way, in the PDP10 MacLISP world, if a user 
has a files of code which don't actually SETQ the switch 
DEFMACRO-FOR-COMPILING, then he do (MAKUNBOUND 'DEFMACRO-FOR-COMPILING) 
[possibly in a COMPLR INIT file] and let this switch meaning operate the 
way CWH will have it do under Multics.

Date: 16 Mar 1981 08:22:49-PST
From: CSVAX.fateman at Berkeley
To: MACSYMA-I@MIT-MC
Subject: strings and file-names

Macsyma users on the VAX (and Multics) have always used strings for
filenames, and no one has ever asked for a FILENAME_MERGE command.

Date: 16 March 1981 01:18-EST
From: George J. Carrette <GJC at MIT-MC>
To: MACSYMA-I at MIT-MC

Now that macsyma users will be using "strings" for filenames,
they need a FILENAME_MERGE command.

Date: 14 March 1981 08:52-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC

   GJC@MIT-MC 03/13/81 12:20:49
   To: MACSYMA-I at MIT-MC
   CC: (BUG LMMAX) at MIT-MC
   The function VALUES in MRG;DB is commented out. Who did this and why?
   Is this permanent? This is one of the symbols which was shadowed
   in Lispm macsyma. If it is no longer part of macsyma it would be
   nice to know, so that the shadowing can be removed.
I did this and sent mail to MACSYMA-I about it (in a general way) on 
1/17/81.  VALUES was commented out because there were no calls to it.
I have just deleted all the commented-out uncalled-for functions from 
MRG;DB > (and safeguarded them if they are ever needed in 
MRG;DB DELETE.)  You may consider this removal to be permanent.

Date: 13 March 1981 14:32-EST
From: Robert W. Kerns <RWK at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC

    Date: 13 March 1981 12:20-EST
    From: George J. Carrette <GJC at MIT-MC>
    To: MACSYMA-I at MIT-MC
    cc: BUG-LMMAX at MIT-MC
    
    The function VALUES in MRG;DB is commented out. Who did this and why?
    Is this permanent? This is one of the symbols which was shadowed
    in Lispm macsyma. If it is no longer part of macsyma it would be
    nice to know, so that the shadowing can be removed.

This is also a NIL/MACLISP shadowing.

Date: 13 March 1981 12:20-EST
From: George J. Carrette <GJC at MIT-MC>
To: MACSYMA-I at MIT-MC
cc: BUG-LMMAX at MIT-MC

The function VALUES in MRG;DB is commented out. Who did this and why?
Is this permanent? This is one of the symbols which was shadowed
in Lispm macsyma. If it is no longer part of macsyma it would be
nice to know, so that the shadowing can be removed.


Date: 12 March 1981 13:29-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  LispM Macsyma
To: KMP at MIT-MC
cc: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC, BEE at MIT-MC

Yes. I will update SYSDEF to include MAXII;SYSTEM when I try to get a macsyma
this weekend.  I suppose those sections of suprv will be made
#-MAXII?

KMP@MIT-MC 03/12/81 09:41:09 Re: LispM Macsyma
To: GJC at MIT-MC
CC: (FILE [MAXDOC;MAIL IMPLEM]) at MIT-MC, BEE at MIT-MC
It is important that MAXII;SYSTEM be added to the LispM system in order to make
my parser stuff win. This redefines CONTINUE, RETRIEVE, $BATCH, and a coupla
other good things ... I decided they had no business being in NPARSE any more
now that things were approaching release. There's still a lot more work to be
done on it, but it's coming along.

Could you update the system definition and dump out a new band with this
stuff in it? If you want already-compiled QFASLs, MAXII;SYSTEM QFASL and
MAXII;NPARSE QFASL should be up-to-date. 

There is still that obnoxious problem with more-processing in BATCH. I have
a solution formulated and it worked partly in some tests, but I haven't merged
that code with the rest of the code yet. Will let you know when I do.

Thanks for the help. Am off to California for a couple weeks. I'll be logging
in so if there are any problems, just drop me net mail. -kmp

Date: 12 March 1981 04:58-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 03/11/81 3:07pm
   I'm getting screwed to the wall because I write programs instead of 
   BATCH files. I've got a problem where if I do 
   FOR J:1 THRU N DO (EXP:FOOBAR(EXP)) 
   it runs out of core, but if I set up a batch file
   FOO(X); FOO(%); FOO(%); FOO(%); it wins.
   I said, how could this possibly be? Well, the top-level macsyma eval 
   call in SUPRV has hacks in it to undo global side effects done on the 
   environment by the Rational function package and the macsyma data base.
   Does the behavior at C-line D-line level really have to be different 
   from that inside programs? Is the intent to discourage users from 
   writing programs?
You may have come across a bug here.  It is hard to say as you included 
no actual example.
I would suppose that things were done this way because either the 
programmers who did them did not have any better ideas or did not have 
the time to do things any better.  I suppose the rational function 
hackers and data base hackers can speak for themselves on this, if they 
wish.

Date: 7 March 1981 00:51-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: hooks for your displa extensions.
To: MCW at MIT-MC
cc: MACSYMA-I at MIT-MC

In DISPLA, if a symbol has a DIMENSION-LIST property
that will get called to calculate the DIMENSION.
If in the context of a function, then the DIMENSION-FUNCTION
property will get called, if in the context of an array reference,
then the DIMENSION-ARRAY property will get called.
You can test this by loading the fix file MRG;DISFIX FASL.

-gjc

Date: 5 March 1981 23:39-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: JONL at MIT-MC, KMP at MIT-MC, MACSYMA-I at MIT-MC

I have a list of built-in-lisp symbols not referenced by the
IN-CORE macsyma. It contains such things as +INTERNAL-/"-MACRO,
+INTERNAL-/#-MACRO, |defvst-xref/||, not to mention DO, PROG, PROGV, IF,
COND, UREAD, UWRITE. Jeff, if we included the out-of-core autoloading
scheme in this we have:

557 autoload symbols & assorted property lists.
 46 Lisp Fsubrs, and assorted code. (Flush EVAL too right?)
112 (at least) symbols which could be replaced with anonymous OPERATORS, 
     GRIND, DIMENSION and other properties.
 26 |&...| symbols with OPR properties, and associated OP properties,
    which could be flushed by changing the interface between the tokenizer
    and the parser. (Certain functions like GETOP then flushable too.)
741 sub-total.

Now, this doesn't even count the RLB-flushable symbols,
which number about 3000.
[1320 symbols in L^K, 4802 in A^K, 909 in A^K that also are DEFMFUN'd]

So, if anybody was into GC'ing maclisp and macsyma, they have a lot to
shoot for.

-gjc

Date: 5 March 1981 16:43-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [GJC: forwarded]
To: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

Date: 1 March 1981 20:26-EST
From: George J. Carrette <GJC>
To:   JIM
cc:   JPG, CWH, ELLEN, KMP

Maxsrc;Ntrace is fully checked out now. I have made it
the autoloading trace on MC to make sure its ok.
The only difference visible from the user level is
the indentation by recursion level. However, it does
have the break_point and user_display features, which
are documented in NTRACE USAGE. I don't want to
release that documentation yet, since we may want to change
the names of some of the indicators.

One of the options, i.e. TRACE_OPTION(FOO,LISP_PRINT)
makes this fully usuable as a lisp trace package.
In fact, it is property driven, such that I can use
it to trace TRANSLATE properties and other things.

-gjc

Date: 5 March 1981 13:23-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: ELLEN at MIT-MC
cc: JPG at MIT-MC, "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

    Date: 2 December 1980 17:23-EST
    From: V. Ellen Golden <ELLEN>
    To:   JPG
    cc:   JONL, KMP

      ELLEN@MIT-MC 12/02/80 17:09:05  From LEECH
      PRIMER();
      BACKQ FASL DSK LISP being loaded
      [DEFMAX, *, DSK, LISP]  FILE NOT FOUND
      Error in LOADFILE attempt
      Error in LOADFILE attempt
    ----------------------------------
    I have put an explicit (LOAD '|LISP;DEFMAX FASL|) in SCRIPT INTRO
    (which gets loaded by PRIMER();) so this now works, but KMP tells
    me this is a Lisp bug in the autoload defaulting.  He will explain
    it more thoroughly.
-----
This bug seems to have been fixed, probably ages ago. So I have flushed
the LOAD from SCRIPT INTRO. -kmp

Date: 5 March 1981 13:15-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: JONL at MIT-MC, KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

   KMP@MIT-MC 03/05/81 12:18:06 Re: Wasted words
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   I don't understand why we don't GC some symbols provided by the 
   default lisp if we don't plan to use them.  Particularly, CGOL and 
   friends have autoload properties and I can't imagine wanting to have 
   CGOL in a macsyma,...
Do you have a list of these symbols besides CGOL?  I.e. which are the 
"friends"?
I think the first question is to ask JONL why "CGOL" has an AUTOLOAD 
property in the default LISP.  That seems like a weird one.  Maybe the 
default LISP shouldn't have it?

Date: 5 March 1981 12:18-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Wasted words
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I don't understand why we don't GC some symbols provided by the default
lisp if we don't plan to use them. Particularly, CGOL and friends have
autoload properties and I can't imagine wanting to have CGOL in a macsyma,...

KMP@MIT-MC (Sent by VP@MIT-MC) 03/04/81 22:59:12 Re: NTRACE & Errors
To: GJC at MIT-MC
CC: (FILE [MAXDOC;MAIL IMPLEM]) at MIT-MC
I would think something like this would be a better idea:

 Error during application of F at level 1.
 Type ERROR, CORRECT_ARGS, RETRY, RETURN, or HELP.
 HELP;
 ERROR = Propagate this error outward to the next error trap or toplevel.
 CORRECT_ARGS = Correct args to this function and retry.
 RETRY = Retry this function call on its original args.
 RETURN = Evaluate an expression and return that value as the value of this
	  functon invocation.
 HELP = Type this cruft
 Type ERROR, CORRECT_ARGS, RETRY, RETURN, or HELP.
 RETURN;
 What value should this call return? Type an expression to be evaluated.
 X+Y;
 Returned 2 Z, ok?
 NO;
 Type ERROR, ...

you might also want to add something the guy could type from the options
menu that got him the breakpoint back. eg, 
 Type ERROR, CORRECT_ARGS, RETRY, RETURN, BREAK, or HELP.
might be better. 

The stuff looks good tho', basically. From what I have seen in the mail
only. I have not had a chance to run the demo yet. Mostly I was just
concerned about the verticalness on normal 24x80 displays. When debugging,
minimizing the amount of vertical motion to preserve info on screen is
an important consideration. 

-kmp

Date: 3 March 1981 19:53-EST
From: Jon L White <JONL at MIT-MC>
Subject: CHECK-ARG
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 1 March 1981 15:13-EST
    From: George J. Carrette <GJC at MIT-MC>
    Subject: macro conflict
    CHECK-ARG in LIBMAX;LMMAC now conflicts with something already
    in the maclisp COMPLR.
MacLISP now has an autoloadable CERROR, so the CHECK-ARG macro in the 
COMPLR uses that;  you may want to just flush the one from LMMAC.

Date: 3 March 1981 12:47-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [JIM: forwarded]
To: "(FILE [DSK:MAXDOC;MAIL IMPLEM])" at MIT-MC

Date: 2 March 1981 10:21-EST
From: James E. O'Dell <JIM>
To:   JPG
cc:   CWH, ELLEN, GJC, KMP

    Date: 2 March 1981 04:24-EST
    From: Jeffrey P. Golden <JPG>
    To:   GJC
    cc:   JIM, CWH, ELLEN, KMP

       GJC@MIT-MC 03/01/81 20:26:54
       To: JIM at MIT-MC
       CC: JPG at MIT-MC, CWH at MIT-MC, ELLEN at MIT-MC, KMP at MIT-MC
       Maxsrc;Ntrace is fully checked out now. I have made it
       the autoloading trace on MC to make sure its ok.
    Looks ok to me.  Good show!

Can we let this sit on MC for a while and then rename it to MTRACE, with
the old one being named OTRACE. Assuming that that GJC's code is bugfree
(I have no reason to assume its not) is there any reason for keeping
the old trace?

Thanks a lot George!

Date: 3 March 1981 06:59-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: JIM at MIT-MC
cc: MACSYMA-I at MIT-MC

   JIM@MIT-MC 03/02/81 10:21:44
   To: JPG at MIT-MC
   CC: CWH at MIT-MC, ELLEN at MIT-MC, GJC at MIT-MC, KMP at MIT-MC
   Can we let NTRACE sit on MC for a while and then rename it to MTRACE, 
   with the old one being named OTRACE.
I have renamed MTRACE as OTRACE.  GJC can have the name MTRACE for NTRACE 
any time he wants.

Date: 2 March 1981 22:09-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: new trace installed
To: INFO-MACSYMA at MIT-MC
cc: MACSYMA-I at MIT-MC

Do DEMO(TRACE,DEMO,DEMO)$ and see Maxsrc;Ntrace Usage
for more information.

Date: 2 March 1981 13:57-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  PANTID behavior (local variables in a block)
To: BNLGHC at MIT-MC
cc: ASB at MIT-MC, JPG at MIT-MC, MACSYM-I at MIT-MC, RJF at MIT-MC,
    RP at MIT-MC

    Date: 2 March 1981 13:38-EST
    From: Graham H. Campbell <BNLGHC>
    To:   GJC
    cc:   BNLGHC, ASB, JPG, MACSYM, RJF, RP
    Re:   PANTID behavior (local variables in a block)

    If we take your FORTRAN example of the "globality" of MACSYMA bindings as
    correct, what is the proper way to construct a generally useable function?
    Must I also publish the internal variable names of such a function so the
    user may avoid use of these names? (Specifically SHARE2;ANTID DEMO no longer
    works, must the variable names used in SHARE2;ANTID > now be advertised?)

Many people have been faced with this problem, if you look at code
in the SHARE directory, written by people like RWG, ASB, ELL, RP,
you will find it addressed by using "funny names" for variables
which "the user could not possibly type." It is a problem, since
macsyma depends on FUNARGS, user-created Simplification, evaluation,
and pattern-matching properties can be triggered at any time
during a calculation.

However, since you have asked about it, you are at an advantage.
There is a way in which you can have explicit control over
which variables if any, are global, and must be advertised,
and which are not global. This is to use DEFINE_VARIABLE
to set up globals, and compilation to make local variables truly local.
I will send you more information on this under separate cover.

-gjc

Date: 2 March 1981 05:27-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

   GJC@MIT-MC 03/01/81 15:13:16 Re: macro conflict
   To: MACSYMA-I at MIT-MC
   CHECK-ARG in LIBMAX;LMMAC now conflicts with something already
   in the maclisp COMPLR.
has been fixed.  

Date: 1 March 1981 19:40-EST
From: James E. O'Dell <JIM at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 1 Mar 1981 13:21:04-PST
    From: CSVAX.fateman at Berkeley
    To:   jim
    cc:   macsyma-i

    when one wishes to use a share directory file on multics macsyma,
    what does one do?  Next tape dump we hope will include all
    batch-able and lisp-readable stuff on share. (fasl you can keep).
    Note that some stuff exists on share directories only as fasl
    (e.g. tensor stuff), and this is not very nice for us, or multics
    I assume.

I'm not sure that multics well have them for a while. We do have a share 
directory in the heirarchy and I have put SOME things in it by request.
I am somewhat concerned that there is even less accountability for the
stuff in share than in the rest of Macsyma. As you know the installation
procedures for a system on Multics are very strict.

I will be glad to include other directories (SHARE and SHARE2) in a tape
to you, but will need help and support from you to get the directories
in shape for transmission. It shouldn't be hard.....just hassle.

Date: 1 Mar 1981 13:21:04-PST
From: CSVAX.fateman at Berkeley
To: jim@mit-mc
Cc: macsyma-i@mit-mc

when one wishes to use a share directory file on multics macsyma,
what does one do?  Next tape dump we hope will include all
batch-able and lisp-readable stuff on share. (fasl you can keep).
Note that some stuff exists on share directories only as fasl
(e.g. tensor stuff), and this is not very nice for us, or multics
I assume.

Date: 1 March 1981 15:13-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: macro conflict
To: MACSYMA-I at MIT-MC

CHECK-ARG in LIBMAX;LMMAC now conflicts with something already
in the maclisp COMPLR.

Date: 26 February 1981 14:42-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: FILLARRAY etc.
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

The source for those autoloading parts of the macsyma
system has been moved to Maxsrc;Array > and slightly
changed to call MERROR, etc. -gjc


GJC@MIT-MC 02/20/81 23:29:11 Re: ERROR MESSAGES.
To: KMP at MIT-MC
CC: JPG at MIT-MC, (FILE [DSK:MAXDOC;MAIL IMPLEM]) at MIT-MC

Since you forwarded JPG's note, might as well forward my clarification
of the original question (which I think was sent as a BUG-MACSYMA actually).
The problem is that errors which happen at lisp level do not
always generate error messages in the users language, i.e. macsyma.
Some do of course, e.g. the MACHINE-ERROR handler, but perhaps
that is because the default lisp setting for that handler is NIL.
[Macsyma presently sets the handlers wrng-type-arg, wrng-no-args
and UNBND-VRBL to NIL]. When the macsyma evaluator applies a
lisp function, it does its own wrong-number-of-arguments checking
in order to print an macsyma error message. However, there are
disadvantages to this:
(1) Duplicates error checking APPLY will do anyway.
(2) Makes the error printer un-available to Translated code.
(3) doesn't signal error in a recoverable way, whereas APPLY does
    (this is a symptomatic issue).

Another issue is that the way maclisp prints error messages is
non-optimal when the job does not have control of a printing TTY,
thus it is benifitial for video terminals and dissowned macsymas
for macsyma to handle as many of lisp's errors as possible,
at very least simply setting up apropriate calls to MERROR in order
to bind the informational parts of the error environment,
[which I must admit is a feature I only recently added to macsyma].

Notes: (1) Lack of error handlers for lisp level has significantly
           reduced the user acceptability of Translated code.
       (2) Well written error handlers will insulate the user from
           differences in the various Lisps systems which macsyma runs on,
           increasing user acceptability of those other systems.

-gjc

Date: 20 February 1981 21:35-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Forwarded mail...
To: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC
cc: GJC at MIT-MC, JPG at MIT-MC

Date: 19 February 1981 05:19-EST
From: Jeffrey P. Golden <JPG>
To:   GJC
cc:   KMP, JPG

   GJC@MIT-MC 02/16/81 17:39:26  ~MAIL
   FOO(TTYOFF):=MAIL(GJC,"test")$ FOO(TRUE);
   causes output to TTY even though TTYOFF:TRUE.
   This makes the MAIL command unusable in disowned macsyma's.
Has been "patched" by KMP.  (He is using (MFORMAT NIL ...) 
for now.)

Date: 20 February 1981 21:33-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  MACSYMA-I
To: JPG at MIT-MC
cc: GJC at MIT-MC, "(FILE [DSK:MAXDOC;MAIL IMPLEM])" at MIT-MC

I would like to remind you that this mail should really have gone to Macsyma-I.
Private discussions are a bad idea, I think, as they end up being duplicated
later. At the *very* least, please CC the mail to (FILE [MAXDOC;MAIL IMPLEM])
as I have done so that a record of the conversation doesn't get lost. -kmp
- - - - - Begin Forwarded Mail - - - - -
Date: 19 February 1981 06:18-EST
From: Jeffrey P. Golden <JPG>
To:   GJC
cc:   KMP

   GJC@MIT-MC 02/18/81 12:58:22
   To: JPG at MIT-MC
   CC: KMP at MIT-MC
       JPG@MIT-MC 02/18/81 05:28:12
	  GJC@MIT-MC 02/17/81 10:34:16
	  ^B
	  (defun $foo (x) x)
	  p
	  DEBUGMODE:TRUE;
	  FOO();
	  ;((LAMBDA (X) X)) (X)) TOO FEW ARGUMENTS SUPPLIED - APPLY
	  ERROR-BREAK
	  _ERROR;
	  [No error.]
	  For some reason WNA errors to SUBRS are handled by some other handler
	  which binds ERROR.
       The MARGCHK error handler works off of the ARGS property.
       So, if you do (ARGS '$FOO '(NIL . 1)) you win.

   Oh. How about if the code is translated? It would be nice to print all
   errors in a nice macsyma-oriented format. I'll look at KMP's
   handling of maclisp errors in TEACH;ULISP, and check on his new
   documentation...
Why can't code that is translated generate ARGS properties?  I believe 
it now does.  I'm not sure this is too much to ask of DEFUNs loaded into 
MACSYMA when a nice MACSYMA error message rather than a LISP error 
message is wanted.
- - - - - End Forwarded Mail - - - - -

Date: 18 February 1981 13:01-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: MACSYMA-I at MIT-MC

I have moved ALPHABETP and ASCII-NUMBERP from JPG;SUPRV to MAXSRC;UTILS.
Is there some reason why ASCII-NUMBERP is not called DIGITP? A NIL and
LispM primitive is or will be available by that name with that functionality.

Date: 17 February 1981 10:20-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  MAXSRC;OUTMIS and (MFORMAT T ...)
To: KMP at MIT-MC
cc: JPG at MIT-MC, MACSYMA-I at MIT-MC

MFORMAT T is going to cause (PRINT <> T) and (TYO <> T), perhaps
it has to do (IF (EQ STREAM T) ...) handling. 
A stickler is the case of calls to DISPLA, where I hacked up this function
(DISPLAF <object> <Stream>). It does
(IF (EQ STREAM NIL) (DISPLA OBJECT) 
    (LET ((^W T)(^R T)(OUTFILES (LIST STREAM))) (DISPLA OBJECT)))
which works for display to files, but fails to print anything to T.
Here again I should special case T.

However, may I suggest something else. There are many existing bugs
in the way macsyma does I/O. Example:
(1) Loadmessages and other MTELL's generated during TRANSLATION 
    of a file are simply lost because ^W must be T.
(2) Error messages are lost in dissowned macsyma's with TTYOFF:TRUE.
(3) Its difficult to do "evaluate into buffer" kind of display interface
    with Emacs.
(4) (C5) MAIL(GJC,0/0)$ causes an error without even printing an
     error message! When DEBUGMODE:FALSE (which is the default), the
     user is given line (C6) with hardly any indication at all that it
     went wrong. Even with DEBUGMODE:TRUE in the old error system there
     would be no function ERRORMSG() to reprint the error message.
     The user would be totally screwed. 
     This is a classic example of FSUBR,OLD-IO, and printing-terminal
     error signaling methodology working together to provide incredibly
     poor system programming. The 0/0 bug is just an example, any
     bug, in user code or system code, is obscured. This kind of thing
     simply doesn't contribute to the reliablity of macsyma.

Suggestion: Lets make the basic macsyma I/O stream oriented.
Perhaps with an ECHO-STREAM, a MESSAGE-STREAM, and a DISPLAY-STREAM.

-gjc

Date: 17 February 1981 06:26-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: MAXSRC;OUTMIS
To: GJC at MIT-MC, JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I changed OUTMIS to use MFORMAT T instead of MFORMAT TYO in the one
place where it did this, but this isn't the problem. The problem is
that (MFORMAT T ...) doesn't obey TTYOFF like it might ought to. I'll
have to think about what the right thing to do here is.
-kmp

Date: 11 Feb 1981 22:23:17-PST
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc

Is there any reason for $divide in rat3e to change the binding of $keepfloat?
Leaving it alone allows useful operations.

Date: 11 February 1981 06:38-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC
cc: JONL at MIT-MC, MACSYMA-I at MIT-MC, RWG at MIT-MC,
    LISP-FORUM at MIT-MC

MACSYMA now uses LISP's atan function's range only between 0 and pi, 
so MACSYMA should work consistently in all LISPs, assuming you are 
using the latest sources.  It only took a trivial change to the code.

Date:     11 February 1981 0421-est
From:     Carl Hoffman               <CHoffman at MIT-Multics>
To:       Macsyma-I at MIT-MC

We made page 23 of the February/March 1981 Technology Review.



Date: 9 February 1981 20:28-EST
From: Richard J. Fateman <RJF at MIT-MC>
To: JONL at MIT-MC, JPG at MIT-MC
cc: MACSYMA-I at MIT-MC, RWG at MIT-MC, LISP-FORUM at MIT-MC

the atan function on the vax returns a value in the range -pi to pi,
given the 2 arg form.  on the pdp-10 it seems to be 0 to 2*pi.  This
causes some problems.  Who is right?  Note that macsyma CHANGES the
value returned from lisp at mit to what it is on 
  when macsyma runs on the vax, it overcompensates..

Date: 9 Feb 1981 15:49:31-PST
From: CSVAX.fateman at Berkeley
To: jpg@mit-mc
Subject: error for acos(1.5) or acos(1.5b0)
Cc: macsyma-i@mit-mc

adding a switch could obviously be done for this case, but certainly
one should think through, at substantial depth and breadth, the border
where macsyma first introduces the complex plane in its responses to
questions that are phrased in "real" questions.  E.g. solve(x^2+1=0,x);

Date: 9 February 1981 16:35-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

Looks like your copy of RAT;FLOAT is somewhat old to contain that old 
bletcherous code you wrote.  Our copy no longer has that.

Date: 9 Feb 1981 13:28:59-PST
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc
Subject: acos in rat;float >

Our copy has this in it

(PUTPROP '%ACOS 'ACOSBIGFLOAT 'FLOATPROG) 

;; A CRUMMY ACOS ROUTINE DONE IN SINGLE PRECISION NO CHECKING FOR NON-NUMERIC ARG 
;; ETC.  DONE FOR LEWISR 4/28/74 IN DESPERATION.  SHOULD BE REDONE AT EARLIEST
;; CONVENIENCE.

(DEFUN ACOSBIGFLOAT (L) ($BFLOAT ($ACOS ($FLOAT (CAR L))))) 

(I got burnt by the losing precision.)


Date: 9 February 1981 16:27-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: DEFMFUN of ACOS etc.
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

I'm not sure what you mean here. The idea of having macsyma
DEFMFUN ACOS, rather than DEFUN ACOS is so that DEFMFUN could
negotiate to still keep the built-in definition of ACOS
available, if it existed on a particular system.
On the PDP10 the present situation with ACOS is a bummer.
It used to return only floating point results, causing
an error instead of returning imaginary. Then a declaration
(DECLARE (FLONUM (ACOS NIL))) was applicable, and contributed
to efficiency in compiled code. However, somebody "generalized"
ACOS without (1) removing the DECLARATION, this caused some
compiled code to return strange results. (2) providing
a flonum-enty point to ACOS. (3) providing a general entry
point, with a switch to tell if to branch complex or to
cause an error. 

This is a classic example of where somebody generalized
code while significantly reducing the effective functionality
of the code for a certain class of users.

I think we are in basic agreement here, that DEFMFUN ACOS is
strictly an oversimplification.

-gjc

Date: 9 Feb 1981 12:39:45-PST
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc
Subject: acos, other math library stuff

macsyma defmfun's stuff like acos.  This is probably not a reasonable
thing to do, since most people's lisp system's idea of acos is to give
an error in the case of, e.g. acos(1.5).  Macsyma's idea is to give
an imaginary value... Thus the presence of an acos in the host system
(Franz, for example) is not reason to use it.  The math manipulations
in acos, asin, tan, etc, are far inferior to what a good math library
has it it.  I am not proposing that someone re-write this stuff in
lisp, especially since we use the UNIX library, but it might be
of concern to someone using the pdp-10.

Date: 8 Feb 1981 16:52:01-PST
From: CSVAX.fateman at Berkeley
To: jpg@mit-mc
Subject: acos, bfloat
Cc: macsyma-i@mit-mc

look at the definition of acos in rat;float.  I recommend that it
either be removed or done right.  I just got burnt by it.

Date: 8 February 1981 04:58-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [GJC: forwarded]
To: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

Date: 24 January 1981 16:03-EST
From: George J. Carrette <GJC>
To:   JPG
cc:   KMP, GJC

    Date: 01/23/81 07:39:01
    From: JPG
    To:   GJC
    cc:   KMP

       GJC@MIT-MC 01/22/81 11:23:26
       BATCH(UNAME,FOO,DSK,GJC) does not batch the file "GJC;UNAME FOO"
    This particular one has been fixed for the next MACSYMA version by
    flushing UNAME entirely in favor of DIREC.  (I doubt that anyone resets
    either of these anyway.)  It'll be announced at that time. So, you will
    then have to choose another example...

Oh, thats a real jewel! FILESTRIP1 tries to fix one bug by screwing around
with the reverse-alias, thereby causing another bug, so you just patch it by
removing the ONE EXAMPLE of an INFINITE CLASS OF BUGS. Uncountable even. What
kind of system-programming is this? Come on, ALIAS(FOO,BAR); if you have
(($LOADFILE) $BAR) at lisp level, there is NO WAY you can tell if the user
typed LOADFILE(FOO); or LOADFILE(BAR); Give up! Hey, if the user typed
ALIAS(FOO,BAR) doesn't he want FOO to mean BAR? But you have LOADFILE(BAR)
meaning LOADFILE(FOO), which is the opposite isn't it? Am I confused here or
what?

-gjc

Date: 8 February 1981 02:32-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [JIM: forwarded]
To: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

Date: 2 February 1981 21:09-EST
From: James E. O'Dell <JIM>
To:   JPG
cc:   CWH, JONL, KMP, RWK

    Date: 2 February 1981 16:46-EST
    From: Jeffrey P. Golden <JPG>
    To:   JIM, CWH
    cc:   JPG, RWK, KMP, JONL

       JIM@MIT-MC 02/02/81 11:38:44
       To: JPG at MIT-MC
       CC: CWH at MIT-MC
       CWH claims that PROBEF is a predicate and should actually return only T 
       or NIL, and that TRUENAME is the appropriate functionality to use when 
       you want the TRUENAME of a file-system entry.
       CWH: Did I state your views correctly?
    First off, I think compatibility between Multics LISP and ITS LISP is 
    somewhat important, whatever they agree to do.  Having PROBEF return a 
    NAMELIST or NIL as it does on ITS is certainly handy.  Lastly, TRUENAME 
    is not always the desired thing as it requires an open file-object.
    PROBEF is handy when all you've got is a supposed filename.
    (P.S. aren't Multics LISP and ITS LISP incompatible wrt TRUENAME, returning 
    a NAMESTRING on Multics and a NAMELIST on ITS?  Is this incompatibility 
    desirable?)

You are correct, on Multics truename returns a namestring but it doesn't 
require an open file object as on ITS. It also rejects a namestring as an
argument.  TRUENAME on Multics chases links and if the file doesn't exist
it just returns a formatted namestring and doesn't imply existence.
I do believe that these discrepancies should be resolved.

Date: 5 February 1981 16:59-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [JPG: Old IO symbols in MACSYMA]
To: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

Date: 2 February 1981 17:07-EST
From: Jeffrey P. Golden <JPG>
To:   JIM
cc:   LISP-FORUM, RWK, GJC, JONL, KMP
Re:   Old IO symbols in MACSYMA

I believe all that's left now is one call each to UWRITE, UFILE, and 
UAPPEND in JPG;SUPRV .  MACSYMA IO is in a state of flux now, so I am 
not sure how long they will remain.  (Obviously they could be converted 
to NewIO if someone felt that was urgent.  The calls are in PDP10-only 
code.)  Anyway, I don't think this should have any bearing on whether 
the Old IO symbols remain in the default LISP environment.

Date: 2 February 1981 15:40-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: New parser
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

That stuff got tabled during January as I was hoping to make progress on the
new Maclisp manual. Much progress was made on that, lots still to do. When
something reasonable is available, you'll hear about that. Anyway, I am 
diverting my efforts to work on the LispM parser again now. I'll try to keep
you posted. The parser itself works fine on ITS, but there's a bit of work
to do (of unknown nature right now) in getting it to go on LispM. Hopefully
I can tell you something more in about a week or so. It will involve changes to
other parts of Macsyma eventually also -- introduction of new-i/o based 
primitives for doing input/output, etc. I prefer not to be any more specific
until I have something concrete to show. People should just be aware it's
being worked on again.

Date: 1 February 1981 23:21-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  macros and translation
To: CSVAX.fateman at BERKELEY
cc: GJC at MIT-MC, "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

    Date: 31 Jan 1981 16:53:11-PST
    From: CSVAX.fateman at Berkeley
    To:   gjc
    cc:   MACSYMA-I

    ... With the possible exception of tensor hackers, I am unaware of 
    any clamor for improved translation...
-----
As George's example about the 1hr -> 28sec speedup for compilation shows,
I don't think it's reasonable to expect clamor. Heck, you practically have
to hit some people over the head and spoon feed things like compilation to
them in order to make them believe in it... But, if you have a compiler which
is reliable and can save time, you have an obligation to the other users
(wrt cpu time wasted by someone fumbling along in interpreted mode), to
improve the class of cases which the compiler can reasonably handle -- and
it's ok if it doesn't handle cases as long as it tells you so rather than 
claiming it can do something it can't -- and to advertise said compiler to
the users. I suspect that users really assume that if they feed Macsyma
the problem and it takes 50 minutes to do, that it is a problem that requires
50 minutes to solve. They probably assume -- they have no reason not to --
that Macsyma is smart enough to know how to speed things up.

The point being that lack of clamor doesn't mean lack of desire or need.
Just ask ANYONE who regularly sits idle at his console for more than 11
seconds waiting for a response if he would like to know how to make Macsyma
programs work faster. I'd be surprised if he says anything even remotely akin
to ``no thank you -- i like getting back my answers so slowly...''
-kmp

Date: 31 January 1981 21:18-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  macros and translation
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 31 Jan 1981 16:53:11-PST
    From: CSVAX.fateman at Berkeley
    To:   gjc
    cc:   MACSYMA-I
    Re:   macros and translation

    It seems to me there are three assumptions causing you great commotion

    Assumption (1): It makes sense, and is desirable, for the macsyma
    translator to take anything the interpreter (meval) takes, and do
    the same thing.

Sometimes I have a very strict reasonability criteria on what of MEVAL is
to be supported. Basically EVALability must be determinable during
translation. Also, indeterminant indirection of functionality of
a name cannot be supported in the same way. Thats really it.

    Assumption (2): The macsyma interpreter makes sense and is desirable.

Good question. Take just ONE look at the code and you will get a good answer.

    Assumption (3) People need the translation facilities to accomplish
    things they would not be able to do other ways.

Correct. Just last night I took a problem which a user had been doing via
EV(FOO,NUMER) with KEEPFLOAT:TRUE, and SIMPSUM:TRUE; and which
ran for over an hour of CPU on this very nice KL-10 here.
I put in a few short formal declarations, translated it, compiled it,
ran it, and was NOT SUPRISED when it took only 28 seconds.
{Demos on request} This made it possible to run many more cases.

If you would like a simpler example, check out SHARE;SIMPSN MACRO
which is a demo of something you wouldn't have a chance of doing
in "C" or "FORTRAN". (Again it shows amazing factors of 200/1 to 300/1
for good macsyma compilation). For problems which are meta-numerical
there are fine possibilities. {For meta-symbolic too}

      With the possible exception of tensor hackers, I am unaware of
    any clamor for improved translation.  A glance at some of this code
    suggests that it should be written in Lisp, or maybe SMP, anyway.
      and the first two assumptions are difficult to defend.

Yes, I'd love to teach the tensor hackers Lisp, but what the heck,
they don't have the time right now. But hey, I never spent much
time going for SPEED in translation, I was just going for CORRECTNESS.
It is very convenient to have correctness. 

ASB for example is using translation and compilation for
Transportability. Compiled code has certain sharability advantages on Multics.
Translation-time conditionalization is also useful.

-gjc

Date: 31 Jan 1981 16:53:11-PST
From: CSVAX.fateman at Berkeley
To: gjc@mit-mc
Subject: macros and translation
Cc: MACSYMA-I@MIT-MC

It seems to me there are three assumptions causing you great commotion

Assumption (1): It makes sense, and is desirable, for the macsyma
translator to take anything the interpreter (meval) takes, and do
the same thing.

Assumption (2): The macsyma interpreter makes sense and is desirable.

Assumption (3) People need the translation facilities to accomplish
things they would not be able to do other ways.

  With the possible exception of tensor hackers, I am unaware of
any clamor for improved translation.  A glance at some of this code
suggests that it should be written in Lisp, or maybe SMP, anyway.
  and the first two assumptions are difficult to defend.



Date: 31 January 1981 19:21-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC, REH at MIT-MC
cc: MACSYMA-I at MIT-MC

I had a confusing session today with ASB about the
use of macros in the translator. He thought he could postpone
macroexpansion to the lisp interpreter, he also thought that
macros would be callable from compiled code, perhaps with some
slight loss in efficiency. I just couldn't figure how he could
get such an idea. Then it struck me, in his code he had
been APPLYing macros. He is no idiot, he said, well, if you
can APPLY macros, I don't see why they can't be called from
compiled code.

The scoop is this, either remove the misfeature, or doom
many intelligent users to hours of confusion.

-gjc

p.s. Because the translator has user-definable optimizations,
use of macros for open-codeable functions is not valid.

Date: 30 January 1981 13:19-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

During translation of files it would be very nice if the messages
normally printed on the terminal due to LOADFILES where
sent to *translation-msgs-files*. Otherwise, these messages
are lost since I must bind ^W to T before calling BATCH1.
What do you think about having MTELL tell stuff to
MSGFILES? Or, perhaps having a MESSAGE function for those kinds of
messages? 

-gjc

Date: 29 January 1981 05:43-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC

BMT;HOMOG and BMT;PADE have been moved to RAT; as per BMT's request.

Date: 28 January 1981 16:16-EST
From: Barry M. Trager <BMT at MIT-MC>
Subject: LOCATION OF HOMOG
To: JPG at MIT-MC, JIM at MIT-MC
cc: MACSYM-I at MIT-MC

 I WOULD BE QUITE HAPPY (IN FACT PREFER) TO SEE ALL MACSYMA
RELATED FILES MOVED FROM BMT TO RAT. I BELIEVE THIS INVOLVES ONLY
PADE AND HOMOG.

Date: 27 January 1981 15:08-EST
From: James E. O'Dell <JIM at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

           There is a newly installed out-of-core file BMT;HOMOG (due to BMT, 
           natch) which handles factoring homogeneous multivariate polynomials, 
           thereby fixing some longstanding FACTOR bugs.  It gets loaded in 
           via a call to HREDUCE in the function PFACTORANY of RAT;RAT3D .
       Do you expect this to move to RAT or NRAT or should I install it in its
       present place?
    Well, NRAT has nothing to do with it.  You probably want to ask this question 
    of BMT.  In the meantime, I'd say sure, install it in its present place.
       On multics leaving it where it is would make it go into the RANDOM 
       archive instead of RAT which it seems to me is less than desirable.
    I don't understand this.  Why aren't BMT; files placed on RAT on Multics?
    Isn't this a trivial change to some program?
It is a trivial change to code at both ends I suspect. It is the structure
of the Macsyma heirarchy on Multics that will be damaged. Now if I know that
a file is in the RAT archive I know where to look. If I start adding in
other directories to that archive it will be less clear where to look on
MC for the SOURCE. The structure on Mutlics consists of archives for each
of the main directories on MC, with the RANDOM archive taking what is left 
over. 

Date: 27 January 1981 14:58-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: JIM at MIT-MC
cc: MACSYMA-I at MIT-MC

   JIM@MIT-MC 01/27/81 09:48:08 Re:  TWIMC:
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
       There is a newly installed out-of-core file BMT;HOMOG (due to BMT, 
       natch) which handles factoring homogeneous multivariate polynomials, 
       thereby fixing some longstanding FACTOR bugs.  It gets loaded in 
       via a call to HREDUCE in the function PFACTORANY of RAT;RAT3D .
   Do you expect this to move to RAT or NRAT or should I install it in its
   present place?
Well, NRAT has nothing to do with it.  You probably want to ask this question 
of BMT.  In the meantime, I'd say sure, install it in its present place.
   On multics leaving it where it is would make it go into the RANDOM 
   archive instead of RAT which it seems to me is less than desirable.
I don't understand this.  Why aren't BMT; files placed on RAT on Multics?
Isn't this a trivial change to some program?

Date: 27 January 1981 09:48-EST
From: James E. O'Dell <JIM at MIT-MC>
Subject:  TWIMC:
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC


    There is a newly installed out-of-core file BMT;HOMOG (due to BMT, 
    natch) which handles factoring homogeneous multivariate polynomials, 
    thereby fixing some longstanding FACTOR bugs.  It gets loaded in 
    via a call to HREDUCE in the function PFACTORANY of RAT;RAT3D .
Do you expect this to move to RAT or NRAT or should I install it in its
present place. On multics leaving it where it is would make it go into
the RANDOM archive instead of RAT which it seems to me is less than desirable.

Date: 27 January 1981 06:55-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: TWIMC:
To: MACSYMA-I at MIT-MC

There is a newly installed out-of-core file BMT;HOMOG (due to BMT, 
natch) which handles factoring homogeneous multivariate polynomials, 
thereby fixing some longstanding FACTOR bugs.  It gets loaded in 
via a call to HREDUCE in the function PFACTORANY of RAT;RAT3D .

Date: 23 January 1981 06:14-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC

The misnamed misplaced function "NXTTOLAST" has been moved from 
MAXSRC;UTILS to RAT;LESFAC and renamed "LOWDEG" (it computes the 
lowest degree of a polynomial).  All calls to it have been renamed.
(It was only called by RAT;LESFAC and JIM;LIMIT.)

Date: 22 January 1981 14:47-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  nxttolast
To: JPG at MIT-MC
cc: "(FILE [DSK:MAXDOC;MAIL IMPLEM])" at MIT-MC

i have no objection to putting it back in its own package and removing the
defmfun as long as no one else is using the function outside that package.

Date: 20 January 1981 17:44-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [JPG: forwarded]
To: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

Date: 20 January 1981 14:57-EST
From: Jeffrey P. Golden <JPG>
To:   GJC
cc:   JPG, ELLEN, KMP, ASB, CMA

   GJC@MIT-MC 01/20/81 13:53:23
   To: JPG at MIT-MC
   CC: ELLEN at MIT-MC
   Would it be much trouble to have double-quote quote semi-colon?
   ASB and CMA mentioned that it would be easier on new users,
   since they could then type filenames the same way at DDT
   level, in Emacs, and in Macsyma, without being discouraged
   by having to type the quote-character "\".
This would not be very easy to do given the current input scanner.
DUFTY was working on this but didn't finish.  I believe KMP 
successfully handles this in his scanner, so it may just be a matter of 
time anyway until it is in MACSYMA.  Rest assured, I do realize the 
importance of this.

Date: 19 January 1981 14:24-EST
From: Richard E. Zippel <RZ at MIT-MC>
Subject:  NXTTOLAST
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

As I recall, I wrote that function years ago to compute the lowest degree
of a polynomial.  How it migrated to UTILS > I don't know but given the
name ...

Date: 18 January 1981 21:09-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: MACSYMA-I at MIT-MC

I have begun work on a database of documentation of the Macsyma internal
routines. The file MAXDOC;MDOC > is the file in question. The format is
a bit tricky and prone to change (it's still under development), so please
don't make changes to it directly. If you have data you want to add or change,
mail it to me and I'll take care of changing it.

This database can be accessed via the Emacs tags facility. The tags file
is MAXDOC;MDOC TAGS.

Draft of the associated hardcopy is available in rooms 832 and 834.

Some unusual control characters appear intermingled in the text. A short
index of their significance is at the top of the file.

Date: 18 January 1981 21:03-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Definitions moving...
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I moved MEMALIKE from JPG;COMM  to MAXSRC;MUTILS
I moved CONCAT   from JPG;SUPRV to MAXSRC;UTILS

Date: 18 January 1981 17:44-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: REH at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 8 January 1981 19:09-EST
    From: Robert E. Handsaker <REH>

    I could be wrong (haven't read any lisp for awhile) but
    it seems like the function NXTTOLAST in MAXSRC;UTILS > 
    won't return what it claims on lists of odd length greater than 1.
-----
Yes, it seems to expect even length lists.

	(NXTTOLAST '(A B C D E F))	=>	E
	(NXTTOLAST '(A B C D E))	=>	E

Implementors: Is this what is intended of this function? If not, could you
  (1) alter the definition
  (2) change the comment describing its effect
  (3) notify me of any changes you make
Thanks.

Date: 17 January 1981 09:34-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: INFO-MACSYM at MIT-MC, MACSYMA-I at MIT-MC

MACSYMA 294 has just been created.  
It has 5 blocks more address space initially available than MACSYMA 293 
(63 blocks, rather than 58 blocks) gotten mostly by deleting code that 
was no longer used, information garnered from RLB's indexer.

Date: 17 January 1981 00:26-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: MACSYMA-I at MIT-MC

I moved the definition of ASSOLIKE from PAULW;CSIMP > to MAXSRC;MUTILS >.

Date: 16 Jan 1981 11:40:15-PST
From: CSVAX.fateman at Berkeley
To: CSVAX.jkf@Berkeley
Cc: macsyma-i@mit-mc

I see apropos in vaxima now works off the symbol table rather than the
descrips  directory, making it identical to the ITS version.  We should
probably have a more complete description file though, so that every
symbol which apropos can return, is described.  I don't know if
mit has such a complete facility  (of course user-introduced symbols need
not have quite as much information...)

Date: 14 January 1981 18:32-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: speeding up work.
To: BMT at MIT-MC
cc: MACSYMA-I at MIT-MC

Since the declarations are loaded in the environment
now, there is no need to INCLUDEF the DCL files
unless you are calling newly defined functions.
I put the form:
(setq jnames-which-act-like-cl '(cl v))
(or (y-or-n-p "Include Declarations")
    (sstatus feature no-include-dcl))
in my GJC;GJC MCOMPI init file. Answering "N" makes
the compilation of small files (especialy fix-files),
many times faster.

-gjc

Date: 13 January 1981 23:24-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  array objects in MEVAL
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 13 Jan 1981 18:53:08-PST
    From: CSVAX.fateman at Berkeley
    To:   gjc
    cc:   macsyma-i
    Re:   array objects in MEVAL

    I do not understand what is being proposed.  What changes are there
    to evaluation, parsing, utility?  Since vaxima already calls fortran
    and C, perhaps no such changes are necessary?
    Is what you are proposing going to require a change in Franz, NIL,
    DEC-20 Maclisp, Multics Maclisp, LM Lisp?

Mainly I'm interested in the ability to do good lisp translations on
array references, but I also might want to clear up the following:

(C2) q:'foo;
(D2) 				     FOO
(C3) q[3];
(D3) 				     FOO
					3
(C4) q:33;
(D4) 				      33

(C5) q[3];
Q evaluates to 33
Improper name or value in functional position
ERROR-BREAK  (Type EXIT; to exit.)
(C6) q:lambda([u],u^3);
					    3
(D6) 			       LAMBDA([U], U )

(C7) q[3];
Improper array call
ERROR-BREAK  (Type EXIT; to exit.)
(C8) (q:'a,a:'b,b:'c,c:'d)$
(C9) q[3];
(D9)                           D
				3
(C10) d:'q$
(C11) q[3];
/*  you guessed it, infinite loop, and no error message */

Now, array syntax works fine if the value of Q is a list or
matrix. I just want to extend it to array objects.

-gjc

Date: 13 January 1981 22:36-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  array objects in MEVAL
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 13 Jan 1981 18:52:15-PST
    From: CSVAX.fateman at Berkeley
    To:   gjc
    cc:   macsyma-i
    Re:   array objects in MEVAL

    I do not understand what is being proposed.  What changes are there
    to evaluation, parsing, utility?  Since vaxima already calls fortran
    and C, perhaps no such changes are necessary?
    Is what you are proposing going to require a change in Franz, NIL,
    DEC-20 Maclisp, Multics Maclisp, LM Lisp?

I said the evaluator, the functions in question are ARRSTORE and
ARRFIND in the file JPG;MLISP >. The change will be to use the
functionality of "AREF" and "ASET" in the natural manner.
"AREF" and "ASET" are available in one form or another on all the
systems you mention. You seem to be "puffing up" your objections
here by mentioning DEC-20 Maclisp and Multics Maclisp. I can
assure you they are almost the same thing. In fact, the
"AREF" method of array accessing is more acceptable on all the
systems you mention.

The utility is efficiency without loosing generality.

-gjc

p.s. If you didn't know about array referencing in lisp that
didn't use the function syntax then that would explain your
concern, and I owe you an apology.

Date: 13 Jan 1981 18:53:08-PST
From: CSVAX.fateman at Berkeley
To: gjc@mit-mc
Subject: array objects in MEVAL
Cc: macsyma-i@mit-mc

I do not understand what is being proposed.  What changes are there
to evaluation, parsing, utility?  Since vaxima already calls fortran
and C, perhaps no such changes are necessary?
Is what you are proposing going to require a change in Franz, NIL,
DEC-20 Maclisp, Multics Maclisp, LM Lisp?

Date: 13 January 1981 21:45-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: JLK at MIT-MC, MACSYMA-I at MIT-MC

I'd like to put in the support for array objects in MEVAL.
The following argument:
(1) X:[3,4,5];  X[1] now evaluates to 1, i.e. X can be evaluated.
(2) maclisp now has array objects, and since they are ATOMic,
    and NOT SYMBOLP, no macsyma packages mung the heck out of
    them or die in strange ways, which is what would happen with
    hunks.
(3) Its a trivial change to make arrays DISPLAY nicely.
(4) It would be efficient, and would let users pass arrays
    as arguments to functions, as is possible to do in
    FORTRAN.
(5) Array arguments makes a lot of sense as a way to call
    FORTRAN, C, or PL/1 (go for it multics hackers!),
    functions from macsyma level. Interface routines would not
    have to be either hackish special forms or inefficient
    due to taking of MLIST or $MATRIX arguments.
(6) It takes only 30 words of code.


Date: 13 January 1981 07:06-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GJC at MIT-MC
cc: ELLEN at MIT-MC, MACSYMA-I at MIT-MC

Are you sending ELLEN mail about DEFMVAR and DEFMFUN's of non-$ 
objects?  If so, you are just bloating her mail file, as 
DEFMVAR and DEFMFUN are used also for transportable variables and 
functions which are LISP-level, not MACSYMA-user-level.
Why should she have to deal with these?

Date: 12 January 1981 19:02-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: DEFMVAR & DEFMVAR & DEFMSPEC
To: MACSYMA-I at MIT-MC

[1] DEFMSPEC is a new form for defining macsyma special
    forms. (DEFMFUN $FOO FEXPR ....) is now obsolete,
    all calls to macsyma special forms from lisp level,
    which are highly suspect anyway, should be changed
    from (APPLY '$FOOBAR (LIST X Y Z)) to
    (MCALL '$FOOBAR X Y Z) or (MAPPLY '$FOOBAR (LIST X Y Z) '$FOOBAR).
    If one is concerned about efficiency then its best
    to take a few minutes and find out what the proper
    lisp-level entry to the given macsyma special form is,
    if any.
[2] New objects defined with DEFMVAR & DEFMFUN now
    send mail to ELLEN.
[3] New special forms defined with DEFMSPEC which the
    TRANSLATOR doesn't know how to handle may cause
    your directory to be deleted and a memo sent to
    the DCA recommending that your net privileges be
    suspended. A grandfather clause is admitted.

(DEFMSPEC $FOO (FORM) ...body...)

FORM is bound to the entire expression, like a macro call,
not just a list of arguments as a FEXPR call.
Besides the obvious semantic advantages of DEFMSPEC, one
can also include &AUX variables and take advantage
of destructuring syntax.

-gjc

Date: 12 January 1981 16:25-EST
From: George J. Carrette <GJC at MIT-MC>
To: ELLEN at MIT-MC
cc: REH at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC

You know, it is possible to have the macsyma compiler automatically
send *YOU* a note everytime a new function or variable is
introduced into macsyma. The primitives are all there in
the compiler,
[1] DEFMVAR & DEFMFUN
[2] A data-base of existing functions and variables.
[3] A SEND-MAIL command.
[5] A variable giving the name of the file being compiled.
[6] A function giving the name of the person doing the compile.
[7] A function giving the position in the source file 
    where the new definition may be found.

Then you could easily read the comment in the code
explaining the new thing and/or "get on the case"
of the author to provide DESCRIBE/MANUAL/UPDATE information
to macsyma users.

-gjc

p.s. If I implement this can we be on good terms again?


Date: 12 January 1981 13:05-EST
From: George J. Carrette <GJC at MIT-MC>
To: JIM at MIT-MC, JPG at MIT-MC
cc: MACSYMA-I at MIT-MC, JM at MIT-MC

    Date: 12 January 1981 10:36-EST
    From: James E. O'Dell <JIM>
    To:   GJC
    cc:   CWH, JPG

        Date: 11 January 1981 12:13-EST
        From: George J. Carrette <GJC>
        To:   CWH, JIM

        Maxsrc;Ntrace is working just fine, you might want to
        install it on Multics.

    Have you talked with JPG about this? Why can't we install it everywhere?

I'm sure it will be installed everywere. Actually, I've been thinking
about how to clean up the "macsyma-function-cell" problem before
talking to Jeff about tracing. The following is a simplified
definition of what is spread out all over MEVAL1. I didn't include the
SYMEVALPing and NOUN/VERB/GETOP stuff, and the special checks for
%SUM, %PRODUCT, MTIMES, MPLUS, MEXPT which MEVAL1 does.
Years of hacking has really gotten this out-of-hand, and
I mean out-of-hand in the archaic (middle ages) sense. {A pun on
digital dispatching} (So CC'd to JM to see what he thinks about it).

(defun mfsymevalp (x &optional (lip nil)
		     &aux
		     (tp (mgetl x 'trace))
		     (mp (mgetl x '(mexpr mmacro)))
		     (lp (getl x '(subr lsubr expr mfexpr* mfexpr*s
					TRANSLATED-MMACRO
					MACRO FSUBR FEXPR
					;; I would flush the above 3.
					))))
       ;; CWH: the lisp-machine version would use multiple-value return
       ;; to avoid consing.
       (cond (lip lp)
	     (tp (fsymevalp (cadr tp) t))
	     ($transrun (or lp mp))
	     (t (or mp lp))))
	
As you can see, the macsyma evaluator already has a check to
see if a function is traced or not.

[Comment: Why the hell is this so complicated? My version is
 not "optimized", you should see what MEVAL1 looks like.
 Also, whatever brilliant person hacked it to run on the lisp
 machine added further crocks, prog-variables and side-effects
 inside predicates, PLUS extra-consing!]

Why did I bring this up? Well, there are still some standing-bugs
in macsyma involving anything which must call a user function.
I.E. The PLOT package, Translated code, the translator itself
(calling user macro properties!), ROMBERG, INTERPOLATE.
[Even the Matrix multiplication code calls user funargs now.]
All of these routines must either have their own hand-open-
coding of the relevant MEVAL1 parts, or be committed to
gross inefficiency and consing by calling MAPPLY (and thereby
MEVAL) in order to work "correctly". (Presently I've arranged
to have the work incorrectly with respect to the variables
"TP", "LIP" and "$TRANSRUN" with appear in the fsymevalp code).

Q: Is anyone willing to spend the time or money to fix this?


Date: 10 January 1981 17:27-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: debugging compilations.
To: MACSYMA-I at MIT-MC

If you start up an MCL with JNAME "CL" it will act just
like a regular CL, except it will have the macsyma environment
loaded. If you want another job name(s) say one of '(foo bar  baz)
then make a file <HSNAME>;<USERID> MCOMPI with the form
(setq jnames-which-act-like-cl '(foo bar baz)). You can
then win by linking <HSNAME>;TS FOO to MAXTUL;TS MCL.

-gjc

p.s. "at this instant" there is a bug such that
it it won't read jcl like a regular CL. This
will be fixed at the next dump of the lisp compiler.


Date: 8 January 1981 12:19-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: interpreted or s-exp code in maclisp.
To: MACSYMA-I at MIT-MC

When re-loading an interpreted file one should do
(flush-macromemos () ()) 
so that the old code gets garbage collected. If you
have been running out of core while debugging interpreted
code then this might be a big reason.

I'll put the Flush-Macromemos in the Prelude file.

-gjc

Date: 29 December 1980 16:41-EST
From: George J. Carrette <GJC at MIT-MC>
To: BMT at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 29 DEC 1980 1634-EST
    From: BMT (Barry M. Trager)
    To:   GJC, MACSYMA-I

    When compiling LIBMAX;MFORMA on Multics, the error that parameter-p is
    setq'ed but never referenced occurs twice.

parameter-p is unreferenced on ITS also, an unused option.
The present MFORMAT implementation needs some work regardless
however. 

Q: What happens to this in Franz?

Date: 29 December 1980 16:34-EST
From: Barry M. Trager <BMT at MIT-MC>
To: GJC at MIT-MC, MACSYMA-I at MIT-MC

When compiling LIBMAX;MFORMA on Multics, the error that parameter-p is
setq'ed but never referenced occurs twice.

Date: 29 December 1980 16:25-EST
From: CWH, BMT at MIT-MC
Sender: BMT at MIT-MC
To: MACSYMA-I at MIT-MC, BUG-MULMAX at MIT-MC, JKF at MIT-MC

The PDP10 MacLisp lsubr SYMBOLCONC has been added to the Multics
compatibility package and the definition removed from LIBMAX;MFORMA.  (The
definition in MFORMA was broken anyway since it failed to define it at
compile time.)  Could the Franz people also add this to their compatibility
package?

Date: 23 December 1980 13:59-EST
From: Barry M. Trager <BMT at MIT-MC>
Subject: COPY-TOP-LEVEL
To: JONL at MIT-MC
cc: CWH at MIT-MC, LISP-FORUM at MIT-MC, MACSYMA-I at MIT-MC,
    COPY-TOP-LEVEL at MIT-MC

I propose that copy-sequence act in an analogous way on lists
and vectors.  In JONL's notation copy-sequence should do
copy1 on a vector, and (append x nil) on a list.

Date: 23 December 1980 13:33-EST
From: Jon L White <JONL at MIT-MC>
Subject: COPY-TOP-LEVEL
To: CWH at MIT-MC, LISP-FORUM at MIT-MC
cc: MACSYMA-I at MIT-MC, COPY-TOP-LEVEL at MIT-MC

BMT notes that in my previous note, COPY-SEQUENCE is not the same
as the notion of COPY-TOP-LEVEL -- the latter would just be
   (MAPCAR #'(LAMBDA (X) X) <x>) 
on lists, and is the same as COPY1 on other sequences.

Date: 23 December 1980 13:22-EST
From: Jon L White <JONL at MIT-MC>
Subject: COPY ?
To: CWH at MIT-MC, LISP-FORUM at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 19 December 1980 23:05-EST
    From: Carl W. Hoffman <CWH at MIT-MC>
    .  .  .
    My objection to COPY is that its ambiguous.  People have used that name in
    the past for several different meanings.  For that reason, I introduced the
    names COPY-CONS, COPY-TOP-LEVEL, and COPY-ALL-LEVELS into Macsyma.  These
    operations just aren't preformed frequently enough to warrant shorter 
    names.  Of course, we'll go along with what the Lispm/NIL people choose ...
Even in system code, I'm quite certain that all three version of "copy"ing are 
needed; for example, the DEFMAX macro cache needs to call COPY-CONS (which
I presume should be an error if applied to some structured thing other
than a pair, such as an s-expression array or a vector). 
   On the otherhand, I suggest something slightly more general than COPY-CONS
so that one could get a new copy of an array/vector without having any of
its elements copied; say, COPY1.  At the very least, I'd suggest the name 
COPY-PAIR, with COPY-CONS a synonym thereof, but I believe COPY1 would be
adequate.
   If COPY-TOP-LEVEL could be called COPY-SEQUENCE, then its definition
would be quite straightforward -- just COPY1'ing all the successive tails
of a list, and just COPY1 itself on an array/vector.   I should like to
see the name COPY-TOP-LEVEL be defined as doing a COPY1 on each element
of a sequence.  Then COPY* could be a two-arg function whose optional second
arg is a "count" of maximum depth to descend while copying -- some large
integer would cause it to become effectively COPY-ALL-LEVELS, whereas
a modest integer would allow one to partially copy circular structures.

  Name             Action on PAIR "x"          Action on VECTOR "x"
-----------------|---------------------------|---------------------------------
 COPY1           | (cons (car x) (cdr x))    | (vector-fill (make-vector 
                 |                           |               (vector-length x))
                 |                           |              x)
 COPY-SEQUENCE   | (mapcar #'COPY1 x)        | (mapf VECTOR VECTOR #'COPY1 x)
 COPY*           | (subst () () x)           | (mapf VECTOR VECTOR #'COPY* x)


Date: 19 December 1980 23:05-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: MACSYMA-I at MIT-MC

    Date: 19 DEC 1980 1420-EST
    From: KMP,WGD at MIT-MC
    Sent-by: KMP at MIT-MC

    It's about time we introduced COPY and COPYLIST into Maclisp as autoloading
    macros doing (SUBST NIL NIL x) and (APPEND x NIL), respectively. Any 
    objections? If not, we should ask LISP-FORUM about the exact naming. LispM
    doesn't have a COPY function yet -- they already use COPYLIST and I think that
    is a reasonable name. I think we should push for having COPY do the full copy,
    but CWH says they may have chosen a different name, in which case we should
    adopt that name.

My objection to COPY is that its ambiguous.  People have used that name in
the past for several different meanings.  For that reason, I introduced the
names COPY-CONS, COPY-TOP-LEVEL, and COPY-ALL-LEVELS into Macsyma.  These
operations just aren't preformed frequently enough to warrant shorter names.

Of course, we'll go along with what the Lispm/NIL people choose ...

Date: 19 December 1980 20:04-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject:  [dlw: MAKE-LIST]
To: MACSYMA-I at MIT-MC

Date: 17 December 1980 17:10-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Sender: dlw at CADR7 at MIT-AI
To:   RWK, BUG-LISPM
Re:   MAKE-LIST

Yes, we are going to fix make-list (and make-array) to accept winning argument
format as well as old losing argument format.  They both use a keyword syntax;
the size of the list is the first, required argument, and everything else is
by keyword.  See AI: DLW; MAKE >; these changes will be installed in a new system
sometime (they need some microcode support), I hope in system 54.

Date: 19 December 1980 20:04-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject:  [MOON: MAKE-LIST]
To: MACSYMA-I at MIT-MC

Date: 17 December 1980 16:28-EST
From: David A. Moon <MOON at MIT-MC>
Subject: MAKE-LIST
To: RWK at MIT-MC
cc: BUG-LISPM at MIT-MC

    RWK@MIT-MC 12/17/80 04:51:40 Re: MAKE-LIST
    To: (BUG LISPM) at MIT-MC
    In System 51.17, ZMail 6.4, Macsyma 4.0, microcode 707, on Lisp Machine Fifteen:

    Are you people planning on changing MAKE-LIST to take args like
    (COUNT &OPTIONAL WHAT-TO-PUT-IN-THE-CARs)?

No, actually we're planning on changing MAKE-LIST and MAKE-ARRAY to
take keyword arguments, except for the first argument which would be
the length.  Only reason it hasn't been done already is that it requires
a coordinated system and microcode change.

Date: 19 December 1980 14:02-EST
From: James E. O'Dell <JIM at MIT-MC>
To: INFO-MULMAX at MIT-MC, MACSYMA-I at MIT-MC

I have updated the sources on Multics to reflect maxsrc;mutils >
and maxsrc;utils >.

Also I have brought up medit and installed the source in the appropriate
archive.

Date: 18 December 1980 07:21-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC, BMT at MIT-MC

An attempt at a new Macsyma exists as LOSER^K (MAXDMP;LOSER >).
BMT: RAT is broken in it as you can see by doing 
BATCH(LOSER,BUG,JPG);  (You can use RAT in place of RATSIMP if you wish.)
The faulty output is in JPG;LOSER OUT .
Obviously RAT (or RATSIMP) should return X/(X^3+1) .
With the rational function package broken, I did not bother to test the 
LOSER any further.

Date: 17 December 1980 20:27-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: New source file -- MUTILS
To: MACSYMA-I at MIT-MC

I moved A-ATOM and CPUT from GRAM into UTILS.

I have also created a file called MAXSRC;MUTILS which is to be loaded into
the in-core system and which should contain general utilities for manipulating
macsyma code. The only function in this file is ASSOL, but I know there are
others around which can be moved into that file now that it has been created.

The difference between UTILS and MUTILS is whether or not the function makes 
assumptions about the fact that it's working in Macsyma. Presumably things in
UTILS would be of use to Joe Average Lisp-Programmer while things in MUTILS 
would only be useful to Joe Not-So-Average Macsyma-Programmer. 

-kmp

ps. Don't ask me what to do about files for use by their siblings... so far
    we don't have a need...

Date: 17 December 1980 19:23-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: DOT2L
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I moved this definition from JPG;DSKFN to MAXRSC;UTILS

Date: 16 December 1980 18:07-EST
From: James E. O'Dell <JIM at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC, INFO-MULMAX at MIT-MC

    Date: 14 December 1980 02:48-EST
    From: Jeffrey P. Golden <JPG>
    To:   MACSYMA-I

    RAB;INMIS and LAPLAC and OUTMIS have all been moved to the MC:MAXSRC; 
    directory.  RAB;PSOLVE has been moved to MC:RAT; .  All relevant 
    MC programs have been updated.

These files have been moved to the appropriate archives on multics
to reflect the MC changes.

Date: 14 December 1980 22:08-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: MACSYMA-I at MIT-MC

Ok, I am installing my fixes for the OCKEN parser bug in the fix file. I have 
editted the changes into the source. 

Specific: FOR, NEXT, WHILE, THRU, UNLESS, FROM, STEP, DO now have a
	  left binding power (LBP property) of 5 instead of 30.

General: After studying the code for some time, I think it the case that any
	 operator with a NUD property and no LED property should have an LBP
	 of 5. This will allow the largest set of valid parses. Any value
	 larger restricts the possible parses and shouldn't be done without 
	 good reason and without leaving a comment explaining such good reason.

All forms which get past the parser now should continue to parse correctly. 
Only forms which failed to parse before should be affected. If anyone comes up
with counterexamples to that claim, please let me know immediately.

OCKEN's original gripe had been that F() := FOR J THRU (AA:5) DO PRINT(J);
displayed as			     F() := FOR J THRU AA : 5 DO PRINT(J)
but that the latter form wouldn't parse. It still displays the same but now
will parse just fine also.

For better or worse (I think better) complex nested forms like the following 
will now parse successfully:

	F() := FOR a FROM DO FOR b FROM c THRU DO d DO e DO f;

DISPLA is a true winner here because it puts in some nice parentheses to help
you read it even tho' they aren't truly needed. This displays (correctly) as:

	F() := FOR a FROM (DO (FOR b FROM c THRU (DO d) DO e)) DO f

-kmp

Date: 14 December 1980 12:47-EST
From: George J. Carrette <gjc at MIT-MC>
Sender: TFT at MIT-MC
Subject: in reply to a question & a summary of sundry tools.
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

All the things done by docgen are now done by MAXTUL.
The important command for "transmitting" information
from MAXDOC;FILES ==> MCL is
GEN-MCL-MCL-CHECK.
However, first you must compile FILES, this is a deficiency
in MAXTUL which could check & do this for you.
MAXTUL will then generate MAXDOC;MCLDAT FASL
(I really love RLB's FASDUMP program).
Then you either have to make sure MAXTUL;MCLFIX <present-mcl-version>
has (LOAD '((MAXDOC)MCLDAT)) in it, or you dump out a new
MCL with :MAXTUL;MCLDMP.

Maybe you want to write a function which compares MCLDAT FASL
with what is presently dumped in MCL, and generates a fix-file?

By the way, for macro packages which are dumped in MCL
merely compiling the sources on LIBMAX won't install them.
This is probably a feature, since it makes the compilation
environment more stable, makes it harder for CWH (for example, har, har)
to screw people to the wall by installing buggy macro packages.
(For this we have the fix file). But seriously folks, it
makes it easier to debug macro packages, in a ^B break
a MCL is not an unreasonable lisp environment.

While one is running MAXTUL it is good to do
DECLARE-FILE-MAKE. Which generates a FASL version of the
MAXDOC;DCL VARS & DCL FNCTNS. This is used by *translated* code
since I don't want to make macsyma users sit through the
sometimes *slow* INCLUDEF'ing of these files.

Jeff, if you find the generation of DCL's slow, get somebody
to change the implementation to the following:
All declare-info goes to the STRING files (which already contain
indexing info & documentation), DCL FASL is made from
these STRING files, & only info which is not reflected in
the present MCL ENVIRONMENT is appended to the FIX file.
Given the small rate of change of the basic entry points,
the fix file will always be small.

-gjc

p.s. MCL can be incrementaly dumped, so maybe we don't need
fix-file ways of doing things.


Date: 14 December 1980 02:48-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC

RAB;INMIS and LAPLAC and OUTMIS have all been moved to the MC:MAXSRC; 
directory.  RAB;PSOLVE has been moved to MC:RAT; .  All relevant 
MC programs have been updated.

Date: 12 December 1980 17:20-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: MCL
To: MACSYMA-I at MIT-MC

Now has #^] as a ttyinterrupt character.
(guess what it does.)


Date: 12 December 1980 02:50-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC

In order to remove the congestion from the MACSYM; directory, 
the FASL files for the in-core MACSYMA source files are now 
compiled to the MAXDMP; directory where there was much room, 
rather than to the MACSYM; directory.  So, the entire scheme is 
now as follows:
				FASL-directory		UNFASL-directory
in-core file			MAXDMP			MUNFAS
out-of-core file (unsplit)	MACSYM			MUNFAS
out-of-core split-file		MAXOUT			MAXOUT

Date: 10 December 1980 07:15-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

   KMP@MIT-MC 12/10/80 00:11:00 Re: Programming note: SUBST
   To: MACSYMA-I at MIT-MC
   The SUBST in EVMAP in EZGCD is a SUBST for a number. I question 
   its validity -- but certainly someone shoudl flush the silly prog tag 
   configuration that follows in favor of a comment. That's really shoddy.
Actually, they are not prog tags.  That whole line is just a very shoddy 
comment.  You overlooked the ";" at the beginning of the line.

Date: 10 December 1980 00:47-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: :MCL
To: MACSYMA-I at MIT-MC

When running MCL called via JCL it will stop if it
runs into any kind of error. P'ing it will not
cause the error message to be printed, (will be fixed),
however, you can find out what went wrong by
doing (DEBUG) and entering RWK's debugger,
using the D command to go down the stack to see
whats error messages are there. 

Probably at that time you want to abort, and kill the compiler.
Running MCL with a job-name of TMCL (standing for
test-macsyma-compilation), will cause UNFASL and FASL
to go to the the source directory. TMCL is then
probably what most people want to use most of the time.

Also: MCL loads a user INIT file *;UNAME MCOMPI

-gjc

Date: 10 December 1980 00:12-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [KMP: forwarded]
To: MACSYMA-I at MIT-MC

Date: 9 December 1980 16:46-EST
From: Kent M. Pitman <KMP>
To:   LISP-FORUM
cc:   GJC
Re:   Statistics on Macsyma use of SUBST

A by-hand survey says that things break down this way:

 77 substitutions for symbols
  4 substitutions of NIL for NIL (2 macros + 2 isolated occurrences)
  1 substitution for (CONS ...) 
  1 substitution of 1 for 0

Many of the substitutions for symbols do break data abstraction, as GJC
mentions, and of those that don't, many are just places where backquote
would have been used had it been available at the time of the code's
development (eg, JM's SIN has at least one such occurrence). 

This data is based on what I believe are the expectations on things. eg,
(SUBST foo var x) or (SUBST var v x) were assumed to be substitutions for
symbols.

I suspect, really, that SUBST is too powerful for most of our applications.
We have been screwed more than once by SUBST poking around in parts of
expressions that we should never have allowed it into... ('we' here meaning
the Mathlab group). We probably oughtn't be using it as much as we do...

-kmp

Date: 10 December 1980 00:11-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [GJC: forwarded]
To: MACSYMA-I at MIT-MC

Date: 9 December 1980 15:50-EST
From: George J. Carrette <GJC>
To:   LISP-FORUM

I just scanned over the uses of SUBST in macsyma, with
an interesting result. Except for uses of SUBST
as (SUBST NIL NIL X), almost all probably violate macsyma
data abstraction or are prone to subtle bugs of other kinds.
Many are due to a single programmer who hacked quite a few
years ago. 

Rational function package: 
; this uses a "special representation".
; macsyma "general representation" has its own SUBST function.

(SUBST (CAR V) 'FOO X) 
(SUBST 1 'FOO X)
(SUBST (SUB1 (CAR V))
       'FOO
       X)
(SUBST (CAR (LAST GENVAR))
       (CAR MINPOLY*)
       MINPOLY*)

(SUBST '%I '$%I P)
;; this is a violation of macsyma data abstraction, which just happens
;; to work in most cases.

GCD package:

;; an excerpt form a PROG, notice the COMMENT, which
;; is made up of PROG-TAGS. Neat eh?

 END  (GETD0 PL(SETQ VALS(SUBST 1. 0.  VALS))) WHAT WAS SUBST FOR?

TAYLOR package: ; again, it manipulates the "special representation".

(subst 'sp2var (cadr f) s)
(subst *i (caddr e) e))))
(setq x (subst i (sum-index x) x)) i)

Here is a jewel where a symbol is used which is the USERNAME of
a macsyma user that uses the package in question:

(SUBST 'ELL VAR NEWF)

Series package:

(setq sexp (subst var 'x sexp))

;; presumably this depends on the fact that a USER cannot type
;; in a symbol X, since all user symbols get a dollar-sign
;; stuck on the front. 


-gjc

Date: 10 December 1980 00:11-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Programming note: SUBST
To: MACSYMA-I at MIT-MC

It recently came to light that SUBST is not the same in any of the existing
Lisp implementations. I just scanned over the code and made a table of the
uses of SUBST to see what would be affected. My results are in the file
MAXDOC;INDEX SUBST for those interested. The statistics are rough -- I went
through everything very fast and had to do some very quick analysis, but it's
there so you'll know the trends. If you SUBST for anything other than symbols,
then you should beware because:

 * LispM lisp treats subtails of lists in odd ways.
 * Multics Maclisp uses EQ, not EQUAL in its comparisons. Other Lisps,
   (eg, Maclisp and Lispm) have been documented to use EQ until now but
   currently ITS Maclisp and LispM call EQUAL. This may change. Don't rely
   on it.

Franz has no SUBST documented in its manual, so I don't know what they're using
out there. Presumably some compatibility package. 

IN PARTICULAR -- there is a use of SUBST in NEWFAC which is 
(SUBST arg1 (CONS ...) arg3), which is sure to lose on Multics. This should
get fixed to use some other technique.

As GJC points out, such uses of subst as substing -%I for %I to get complex
conjugate and substing for limits is really a bad violation of data 
abstraction. These things will SUBST into expression headers without
restraint -- where it may or may not be desirable. Probably incidences of
SUBST that do this should be thought out carefully and some Macsyma internal
routine which bypasses headers or enters them in a constrained way should be
phased in in place of current techniques.

The SUBST in EVMAP in EZGCD should is a SUBST for a number. I question its
validity -- but certainly someone shoudl flush the silly prog tag configuration
that follows in favor of a comment. That's really shoddy.

You get the idea.

-kmp

Date: 9 December 1980 00:52-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [RLB: Saving 7,000 words]
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

I added this idea to MAXDOC;PROJEC >. I'd like to encourage this as the
canonical to buffer ideas that haven't had time to get done ...

Date: 8 December 1980 06:27-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC

If any of you are interested in this, please contact RLB:
   RLB@MIT-MC 10/31/80 16:06:55 Re: 7,000 Macsyma words
   A year or two ago, when I was doing that symbol reaping stuff, I
   wound up deciding that the only way to recover the symbol segments
   was to bind the fasl files constituting the in-core system into
   a single module with uuo links pre-smashed.  Recently I've written
   code which is capable of doing that.  It would take me perhaps another
   week or two to make this into a winning Macsyma, with automatic
   recovery of accidently reaped symbols, etc.  However, I still have NIL
   to work on, so I won't spend further time on this now.  If you feel 
   that work on this should continue and have some ideas as to who could
   do it and when, I'll be glad to help.

Date: 8 December 1980 04:51-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: JONL at MIT-MC
cc: BUG-LISP at MIT-MC, BUG-COMPLR at MIT-MC, HENRY at MIT-MC,
    MACSYMA-I at MIT-MC

   JONL@MIT-MC 12/05/80 04:50:18 Re: Fresh COMPLR (or XCOMPLR) !
   To: (BUG LISP) at MIT-MC, henry at MIT-AI
   CC: (BUG COMPLR) at MIT-MC, MACSYMA-I at MIT-MC
   Almost always when I use a "used" compiler to compile a file
   (i.e., one that has already compiled some other file), the
   result has gibberish in many of the list-structure parts
   in the FASL.
I am thankful this has never happened to me as in the course of 
compiling for MACSYMA, I have used the same loading of COMPLR 
to compile many MACSYMA source files for over 6 years now.  
Maybe the fact that I call (INITIALIZE) between source file 
compilations has saved me, I don't know.  JONL, since you maintain 
COMPLR, have you tracked down the phenomenon you describe?

Date: 7 December 1980 06:26-EST
From: Alan Bawden <ALAN at MIT-MC>
Subject: defstruct now the same everywhere
To: MEM at MIT-MC, GJC at MIT-MC, CWH at MIT-MC, MACSYMA-I at MIT-MC,
    Greenberg at MIT-MULTICS, Krupp.m at MIT-MULTICS, TFT at MIT-AI,
    NLM at MIT-AI, BATALI at MIT-AI

OK friends, the wait is over.  My defstruct has been finally been
installed on the Lisp Machine.  What this means is that you can all
count on the thing being fairly stable from here on in.  (That is the
theory at least.)

Since my last message to some of you (which I hoped was the last time
it might be necessary to suggest you recompile any defstructs in FASL
files, QFASL files or Multics object segments) I have made a few
changes that require me to issue that same warning yet again.  So
sorry, but I doubt it will ever be necessary again.

If, however, this kind of change ever becomes necessary again
(requiring recompiling defstructs) defstruct will issue a reasonable
error message advising you just what structure might need to be
recompiled.  This is in contrast to the old behavior where something
obscure would happen.  Any old defstructs out there right now will
also be caught.  Thus you no longer have to be known about by me to be
warned of when you might get shafted.

Documentation is still in the works.  Most "new" features are already
documented, so you can look at the incomplete documentation and learn
practically everything you might want to know.  ALAN;STRUCT DOC is the
place to find it on AI or MC.  On Multics see:
>udd>Mathlab>Bawden>defstruct.doc.

LISPM users:  System 51.2 contains the new defstruct.  It is now fully
understood by describe, the inspector and typep.  Structures defined
by the ancient defstruct will also continue to work %100.  The QFASLs of
defstruct on my directories are no longer usefull since the patch that
gets you 51.2 loads the "official" QFASL from the LISPM2 directory, so
they have gone away.

ITS MacLisp users: You can find defstruct on LIBLSP now as 
LIBLSP;STRUCT FASL.  Probably this is a better place than to 
be looking on my directory for it.

Bug reports to me, and many thanks for putting up with being "guinea
pigs" for this thing in its experimental days.

Date: 5 December 1980 20:06-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-LISPM at MIT-MC
cc: MACSYMA-I at MIT-MC

Can you please make defvar take the form 

	(DEFVAR sym val &OPTIONAL documentation)

It's very sad to have to do

	(DEFVAR FOO 0. #-LISPM "This variable counts FOOs")


Date: 5 December 1980 07:13-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: maxtul
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

MCL now has DEBUG loaded, and makes sure the OBARRAY is
set correctly during break loops. So it is possible now
to win somewhat when debugging compilations that bomb!

MAXTUL has LJOB-RUN-JOB loaded so that it can call
the lisp compiler and the TAGS generator as inferiors
(see the commands GEN-TAGS and LOAD-INFO, not all inferior return
conditions covered yet though). Given these and the other functions
in DOCGEN/MAXTUL (e.g. GET-INCORE-FILES), you should be able
to easily write a command which installs/compiles macsyma sources
for new dumps of macsyma which should be significantly faster then
the existing tools.

MAXTUL can be extended to parse JCL, send MAIL, (obviously its 
startable as an inferior to MC's mailer), so it should be
usable remotely by Berkely/Multics/Lispm people.
(Who would want to use the DCLMAK subcommands of course.)

-gjc

Date: 5 December 1980 06:56-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: new :MCL
To: MACSYMA-I at MIT-MC

now loads much faster than before, and the prelude file
will INCLUDEF much faster in its environment.

-gjc


Date: 5 December 1980 04:57-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  Fresh COMPLR (or XCOMPLR) !
To: JONL at MIT-MC
cc: BUG-COMPLR at MIT-MC, BUG-LISP at MIT-MC, MACSYMA-I at MIT-MC,
    henry at MIT-AI

    Date: 5 DEC 1980 0450-EST
    From: JONL (Jon L White)
    To:   (BUG LISP), henry at MIT-AI
    cc:   (BUG COMPLR), MACSYMA-I
    Re:   Fresh COMPLR (or XCOMPLR) !

    Almost always when I use a "used" compiler to compile a file
    (i.e., one that has already compiled some other file), the
    result has gibberish in many of the list-structure parts
    in the FASL.

Seems like that happens to me only when I ^G during compilation.
One side effect from too much COMPLR usage is brain damage.

Date: 5 December 1980 04:50-EST
From: Jon L White <JONL at MIT-MC>
Subject: Fresh COMPLR (or XCOMPLR) !
To: BUG-LISP at MIT-MC, henry at MIT-AI
cc: BUG-COMPLR at MIT-MC, MACSYMA-I at MIT-MC

Almost always when I use a "used" compiler to compile a file
(i.e., one that has already compiled some other file), the
result has gibberish in many of the list-structure parts
in the FASL.

Date: 4 December 1980 18:52-EST
From: John L. Kulp <JLK at MIT-MC>
To: KMP at MIT-MC
cc: CWH at MIT-MC, MACSYMA-I at MIT-MC

    Date: 4 December 1980 01:03-EST
    From: Kent M. Pitman <KMP>
    To:   CWH
    cc:   MACSYMA-I

        Date: 2 December 1980 13:49-EST
        From: Carl W. Hoffman <CWH>
        To:   MACSYMA-I

        ... LIBMAX;PRELUD and LIBMAX;MPRELU now really no longer use LOOP, for
        the sake of interpreted code in a small address space...

    Yay! (For the sake of readability. Who cares about small address space -- I
    think LOOP sucks semantically ...)
I think you don't understand the difference between syntax and semantics, and
don't understand what Loop is about (like all this nonsense about making
code look like English, which has nothing to do with it  -- FORTRAN looks
about as much like English and that has never been the reason people get
confused using it).


10003
*** EOOH ***
Date: 4 Dec 1980 11:48:15-PST
From: CSVAX.fateman at Berkeley
To:   RWK
cc:   KMP
Re:   VAX and UNIX and Western Electric and RJF flaming again

	Your two replies so far contradict each other.  How could they be charging us
	for a commercial license if we haven't contacted them?
I did not mean to imply that no one had ever contacted Western Electric,
but that the issues which remain to be resolved are probably ones which
appropriate telephone calls could resolve.

	BTW, it's not software
	that is at issue, but HARDWARE, the NU machine, etc., and the contract with
	EXXON.
Perhaps you know something I do not, about the license problem.
	And it's not clear that it's particularly different than research
	contracts with industry at other universities, including your own.  Unless you
So why is it not signed?  I do not get your point.
	have a pipeline to information that I haven't heard here...like have you been
	talking to people inside Bell?
I do know such people, but they do not have an inside track on Western Electric
lawyers, generally.

I have removed macsyma-i from cc since it is not a relevant issue to this group.
Date: 4 December 1980 14:51-EST
From: George J. Carrette <GJC at MIT-MC>
To: CSVAX.drb at BERKELEY
cc: MACSYMA-I at MIT-MC

Unfortunately, we usually don't get to discuss such things
as new control characters at macsyma meetings (actually called
MATHLAB meetings), and spend most of the time arguing about
the number of TTY channels, user load, and that sort of thing.
(Not to mention the generic Berkeley-related flamage).

We were going to have some kind of Macsyma-implementors meetings...
as yet nobody has announced useful results of any Macsyma II/1.5 meetings.

Be that as it may, I'll give a general apology for the control-character
change I recently mentioned, and one which covers most of the changes
I have made to the system in the recent past.

Most changes are simply directed at obvious bugs in the 
"user programming environment". For example, the need to reprint
error messages on video terminals is so painfully obvious it
just goes without saying. (This deserves further comment.)

The rest of the changes have to do with the problems in getting
macsyma to run on more than one system, again, obvious if and only
if one is trying do to this very thing. However, RJF attacks many
such endevours (Macsyma Format, Error message Strings, Error handlers),
as being PDP-10 specific. It is obvious (See the conditionalization
of the definition of SIMPLIFYA in JM;SIMP >), that RJF cares ONLY
about macsyma in Franz, and doesn't give a damn if macsyma runs
on any other systems. Does anybody at MIT act like this?

I can honestly say that I know of NO change in macsyma made
at mit that had the "true motivation" of making life more difficult
for the Franz end of things.

I can also honestly say that I think "Berekely" methods of dealing with a
system which is always changing in minor ways is crude, and presents
us all with false dilemma, [and presents RJF with many opportunities
to grind ye-old-Axe]. I can not honestly say that methods here are
that much better, but I think we try harder.

-gjc


Date: 3 Dec 1980 22:41:43-PST
From: CSVAX.drb at Berkeley
To: macsyma-i@mit-mc

In an attempt to channel the flaming into more productive discussions, may
I say that it is impossible for us to understand the true motivations for
the most visible changes that you people discuss, such as new control
characters, without attending the oft-referenced "MACSYMA meetings", for
instance.  It is somewhat frustrating for us (JKF) to attempt to maintain
compatibility with a system that is always changing in minor ways for reasons
we cannot see.  I suggest more understanding all around, but also why don't
we discuss issues of more obvious import, such as new representations, new
mathematical or physical applications, etc.?  I thought several of you were
meeting to discuss a MACSYMA II/I.5 or whatever.  Did it die?  What about
graphics capabilities?  I think JKF, CWH, and JLK at least have a common
interest there, and the rest of us would enjoy hearing their opinions.  Or
do you really think the current topics are more worthy of our time?

Date: 4 December 1980 01:33-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject:  VAX and UNIX and Western Electric and RJF flaming again
To: CSVAX.fateman at BERKELEY
cc: KMP at MIT-MC, MACSYMA-I at MIT-MC

    Date: 3 Dec 1980 17:12:55-PST
    From: CSVAX.fateman at Berkeley
    To:   RWK
    cc:   KMP, MACSYMA-I
    Re:   VAX and UNIX and Western Electric and RJF flaming again

	Pointing out the ease of calling WE's patent office is just your usual
	silliness.  It should be obvious even to you that this has been done!
    Not true.  Did you? Who did?
	Basically, the reason we don't have UNIX is because Western Electric
	wants to charge us for a COMMERCIAL license instead of an educational
	license.
    Bull!  The reason you should pay for a commercial license is that you seem
    to want to sell software preferentially.  If you do research like the other
    80 or more universities, you would get an educational license like them.
Your two replies so far contradict each other.  How could they be charging us
for a commercial license if we haven't contacted them?  BTW, it's not software
that is at issue, but HARDWARE, the NU machine, etc., and the contract with
EXXON.  And it's not clear that it's particularly different than research
contracts with industry at other universities, including your own.  Unless you
have a pipeline to information that I haven't heard here...like have you been
talking to people inside Bell?
	I do not choose to involve myself with the exact details of this
	dispute so I can't tell you the current progress toward it's
	resolution.
    I didn't expect you to. The last item, by the way, was not this issue, as
    told to me, but the difference between the v7 and v7 32v license.  But you
    choose not to involve yourself...
If you're refering to what I think you're refering to, I believe THAT was
settled a VERY long time ago.

Date: 4 December 1980 01:03-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: CWH at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 2 December 1980 13:49-EST
    From: Carl W. Hoffman <CWH>
    To:   MACSYMA-I

    ... LIBMAX;PRELUD and LIBMAX;MPRELU now really no longer use LOOP, for
    the sake of interpreted code in a small address space...

Yay! (For the sake of readability. Who cares about small address space -- I
think LOOP sucks semantically ...)

Date: 4 December 1980 00:27-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  defstruct versions
To: ALAN at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 3 December 1980 15:15-EST
    From: Alan Bawden <ALAN>

    Sorry about that.  I try and warn people when there is a defstruct
    change that might cause lossage like this, but I have a problem that I
    don't actually know who all my users are!

I should think that a message to BUG-LISP explaining the changes and 
ramifications thereof would have been sufficient for this case, since enough
Macsyma-I people are on Bug-Lisp that the word would have flowed through.
So if you sent such a note, it's probably our fault for not keeping up, and
if you didn't then maybe you should in the future. Anyway, glad things are
stabilizing. -kmp

Date: 4 December 1980 00:24-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 3 Dec 1980 14:55:53-PST
    From: CSVAX.fateman at Berkeley
    To:   KMP
    ... In fact, I know of no person willing to own up to being responsible for
    obtaining UNIX for the VAX in Tech Sq...

Curiosity: Must there be such a person? Are we in fact in some way obligated
to get a Vax? As it happens attempts have been made and are being made, but
even if they hadn't/weren't I'm not sure if your anger on this issue is 
warranted.

    It could be that there is some deep dark secret reason for that VAX to not
    have a UNIX license, and that people are deliberately obfuscating the issue
    when I ask about it...

Why? If we aren't in some way required to get one, why wouldn't people just 
tell you so? What possible motivation could they have for not just telling 
you that Unix sucked if they in fact believed it. Certainly from some of the
language my coworkers have used in mail to you, you can't believe they are
too polite to say such a thing. I think you're being paranoid.

Date: 3 Dec 1980 17:13:56-PST
From: CSVAX.fateman at Berkeley
To: RWK@MIT-MC
Subject: VAX and UNIX and Western Electric and RJF flaming again
Cc: KMP@MIT-MC, MACSYMA-I@MIT-MC

	Pointing out the ease of calling WE's patent office is just your
	usual silliness.  It should be obvious even to you that this has been done!
Not true.  Did you? Who did?
	Basically, the reason we don't have UNIX is because Western Electric wants to
	charge us for a COMMERCIAL license instead of an educational license.
Bull!  The reason you should pay for a commercial license is that you seem
to want to sell software preferentially.  If you do research like the other
80 or more universities, you would get an educational license like them.
	I do not
	choose to involve myself with the exact details of this dispute so I can't tell
	you the current progress toward it's resolution.
I didn't expect you to.	
The last item, by the way, was not this issue, as told to me,
but the difference between the v7 and v7 32v license.  But you choose
not to involve yourself...

	

Date: 3 December 1980 19:42-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject:  VAX and UNIX and Western Electric and RJF flaming again
To: CSVAX.fateman at BERKELEY
cc: KMP at MIT-MC, MACSYMA-I at MIT-MC

RJF, please just bug off.  You don't know what's going on, but you persist in
flaming away.  Pointing out the ease of calling WE's patent office is just your
usual silliness.  It should be obvious even to you that this has been done!
Basically, the reason we don't have UNIX is because Western Electric wants to
charge us for a COMMERCIAL license instead of an educational license.  I do not
choose to involve myself with the exact details of this dispute so I can't tell
you the current progress toward it's resolution.

Date: 3 Dec 1980 14:55:53-PST
From: CSVAX.fateman at Berkeley
To: KMP@MIT-MC
Subject: What is this? MIT vs Berkeley?
Cc: MACSYMA-I@MIT-MC

	From KMP@MIT-MC  Wed Dec  3 14:43:53 1980
	
	    From: CSVAX.fateman at Berkeley
	
	    ... Regarding UNIX, I believe the fault lies entirely with MIT ...
	
	There is no such person as `MIT.' This individual gets blamed for a ton of
	bad things in your mail and I always feel I'm being insulted.
In fact, I know of no person willing to own up to being responsible for
obtaining UNIX for the VAX in Tech Sq.  That is probably why
it has not happened. I have heard that a lot of individuals want UNIX,
and I have heard a lot of conflicting information and mis-information
from various people at MIT.  It could be that there is some deep dark
secret reason for that VAX to not have a UNIX license, and that people
are deliberately obfuscating the issue when I ask about it...
But RZ, JM, Steve Ward, JNC, MLD appear to be unable to follow up
on this.
	

Date: 3 December 1980 17:45-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  What is this? MIT vs Berkeley?
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 3 Dec 1980 10:12:08-PST
    From: CSVAX.fateman at Berkeley

    ... Regarding UNIX, I believe the fault lies entirely with MIT ...

There is no such person as `MIT.' This individual gets blamed for a ton of
bad things in your mail and I always feel I'm being insulted. Please cast 
your aspersions on well-defined groups rather than nebulous entities if you
don't want to succeed in offending all of the individuals which make up the
MIT community.                                -----------

Date: 3 December 1980 17:45-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  What is this? MIT vs Berkeley?
To: CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 3 Dec 1980 10:12:08-PST
    From: CSVAX.fateman at Berkeley

    ... Regarding UNIX, I believe the fault lies entirely with MIT ...

There is no such person as `MIT.' This individual gets blamed for a ton of
bad things in your mail and I always feel I'm being insulted. Please cast 
your aspersions on well-defined groups rather than nebulous entities if you
don't want to succeed in offending all of the individuals which make up the
MIT community.                                -----------

Date: 3 December 1980 15:15-EST
From: Alan Bawden <ALAN at MIT-MC>
Subject: defstruct versions
To: GJC at MIT-MC
cc: JPG at MIT-MC, RWK at MIT-MC, ALAN at MIT-MC, MACSYMA-I at MIT-MC

Sorry about that.  I try and warn people when there is a defstruct
change that might cause lossage like this, but I have a problem that I
don't actually know who all my users are!  I guess putting a version
number into all structure descriptions would enable me to generate a
reasonable error message here, at the expense of checking that number
with every macro expansion.

Such screws should become less frequent soon anyway.  All of the
recent changes to defstruct were made to whack it into shape for
installation on the LispMachine, and that is nearly done now.

Date: 3 December 1980 14:41-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: RWK at MIT-MC, ALAN at MIT-MC, MACSYMA-I at MIT-MC

    Date: 12/03/80 05:38:57
    From: JPG
    To:   GJC, RWK
    cc:   JPG

    How do you compile MAXDOC;FILES > to MAXDOC;FILES FASL ?
    Trying to compile it gives the error shown in MAXDOC;FILES _UNFA_ .
Recompiling MAXTUL;DEFILE fixes the world here. 
I suspect that the problem was that DEFILE was compiled under
one version of DEFSTRUCT, yet when it is loaded and run the latest
version of defstruct is what gets loaded.

ALAN: May I suggest that (defstruct foo ...) put the version number
of DEFSTRUCT in the information for FOO, and that the driver code check
this?

MACSYMA-I: There are other macsyma packages which can experience problems
of this kind. (e.g. JIM's hassles with MFORMAT on multics).
Its definitely a problem to look out for.


Date: 3 Dec 1980 10:12:08-PST
From: CSVAX.fateman at Berkeley
To: gjc@mit-mc
Subject: comments
Cc: MACSYMA-I@MIT-MC

<regarding control characters>	
	Why the *hell* do you think I sent the message about this to macsyma-I
	(and INFO-MACSYMA too, for user input)? Communication is a part
	of good groundwork.
	
	Perhaps this is just another attack on the fact that we don't have
	a VAX/UNIX running macsyma up here that would motivate anyone to hack
	it. Its not my fault, so in the mean time I think its appropriate
	for *your* group to reply to proposed features of this kind.
	
The most reasonable reply I can think of is certainly along these lines,
but would be more like "No need to add more control characters, in fact,
unless you can provide a SIGNIFICANT ADVANCE in the capabilities of
macsyma, you should just fix outright bugs, spend the rest of your time
learning mathematics. Maybe you will as a consequence of this latter
activity, be able at some future time to
provide an increment in our ability to do symbolic computation."

Regarding UNIX, I believe the fault lies entirely with MIT. You are obviously
not responsible for the delay, but it appears that no one at MIT is taking
a serious interest.  A call to the Western Electric Patent Office is not
very difficult to make.



	
	
	

Date: 3 December 1980 12:41-EST
From: George J. Carrette <GJC at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 22 NOV 1980 2257-EST
    From: RJF (Richard J. Fateman)
    To:   GJC
    cc:   MACSYMA-I

    Before you put in new control characters it would be appropriate for
    you to do the ground work to see how to implement the "feature" on
    VAX/UNIX, VAX/VMS, LISPM, Multics.  I know that the first two use
    control characters differently from ITS (and each other).  Recently
    the ^c and ^d stuff was changed because of Tops-20...

Why the *hell* do you think I sent the message about this to macsyma-I
(and INFO-MACSYMA too, for user input)? Communication is a part
of good groundwork.

Perhaps this is just another attack on the fact that we don't have
a VAX/UNIX running macsyma up here that would motivate anyone to hack
it. Its not my fault, so in the mean time I think its appropriate
for *your* group to reply to proposed features of this kind.

A resonable reply would be: "No need to add more control characters,
you can just have this be part of the re-display handling of ^L in
an error-handling context".


Date: 3 December 1980 11:49-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  MACSYMA error scheme
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

*last mail queued accidently*
-continued-
A re-implementation of DISPLA would be a great help.

Date: 3 December 1980 11:47-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  MACSYMA error scheme
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

A user-adjustable SIZE parameter with good defaults is clearly the
right direction. It would be very nice if the actual DISPLAY-SIZE could be
used as the criteria, instead of a CONSSIZE. Unfortunately, this w

Date: 2 December 1980 17:42-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BUG-LISP at MIT-MC
cc: JPG at MIT-MC, MACSYMA-I at MIT-MC, ELLEN at MIT-MC

The compiler is currently outputing ((LISP)DEFMAX) as an autoload
property for FLUSH-MACROMEMOS where ((LISP) DEFMAX FASL) should
rightfully be expected. The result of this is that it doesn't work in
Macsyma. (1) That putprop should be conditional on there not being
an autoload property already there. (2) You'd save a few CONS's if you
didn't do (PUTPROP 'FLUSH-MACROMEMOS '((LISP) ...) ...) but rather did
(PUTPROP 'FLUSH-MACROMEMOS (GET 'MACROMEMO 'AUTOLOAD) 'AUTOLOAD)
so that you got the piece of structure already existed instead of locking
down new cons's. (3) I don't think you should assume that the second filename
of an autoload is going to default to FASL. Macsyma doesn't default the 
second filename to anything and gives a [DEFMAX,*,DSK,LISP] NO SUCH FILE
type error ... I think since you KNOW you want the FASL file, you should
put it there. I think that convention should be made clear in Maclisp --
that the default autoload handler will look for FASL files, but that user
autoload handlers needn't be bound by that and that the Maclisp system
will define system autoloads to actually have the word FASL there.

This broke PRIMER in Macsyma. ELLEN has added in an explicit LOAD of 
DEFMAX at the top of SCRIPT INTRO (which uses `... interpreted and so
loads DEFMAX). When this explicit load becomes removable, please let us
know. Thanks.

Date: 2 December 1980 13:49-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: MACSYMA-I at MIT-MC

    JPG@MIT-MC 18 NOV 1980 1838-EST
    It looks like $SCANMAP is missing from MAXDOC;DCL FCTNS due to the 
    mishandling of Splitfiles.  Only DEFMFUNs from the last Splitfile 
    of a File seems to be getting in there.

DEFMFUN and DEFMVAR are now processed correctly in splitfiles, and the
commentary placed in the MAXDOC;DCL files has been improved.  The DCL
files are processed once at the end of each splitfile, so compilation may be
slow.  This was the simplest thing to do.  If somebody wants to rewrite the
code to process all the splitfiles in a single batch, they are welcome to.

LIBMAX;PRELUD and LIBMAX;MPRELU now really no longer use LOOP, for the sake
of interpreted code in a small address space.  I thought this had been taken
care of earlier.

Date: 2 December 1980 07:52-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: CWH at MIT-MC
cc: JONL at MIT-MC, MACSYMA-I at MIT-MC

   JPG@MIT-MC 11/25/80 15:54:46
      CWH@MIT-MC 11/25/80 10:45:16
          JPG@MIT-MC 18 NOV 1980 1838-EST
          It looks like $SCANMAP is missing from MAXDOC;DCL FCTNS due to the 
          mishandling of Splitfiles.  Only DEFMFUNs from the last Splitfile 
          of a File seems to be getting in there.
      Sure is.  Apparently, EOF-COMPILE-QUEUE gets run once at the end of each
      splitfile, but all writes go under the COMM2 entry of DCL FCTNS.
      I guess we need to create a separate entry for each of the splitfiles.
      Does anybody know what magic complr variable to look at to find the 
      name of the splitfile?
   I don't.  Is there some reason you didn't send this mail to JONL?  It seems 
   obvious to me to send such mail to the person who maintains COMPLR.
   JONL, can you help us here?
I spoke to JONL and he said that the magic variable is ONMLS, which 
stands for "output namelist".  So, some CAR/CDR thereof should give you 
what you want.

Date: 2 December 1980 07:42-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

   KMP@MIT-MC 12/01/80 00:13:57
   To: MACSYMA-I at MIT-MC
   By the way, I'm not sure if I'm happy with this AMPERCHK stuff. What 
   application does it serve? In particular, just saying "A"[X] once makes
   all further calls to A[X] or A(X) in that Macsyma come out as "A"[X] or
   "A"(X) respectively. Should it really set up an OP/OPR linkage or should 
   it just temporarily figure out what the linkage would have been without 
   making it permanent.
I am not happy with the AMPERCHK stuff either.  I think it should be 
"temporary" as you describe.  Hence, I have so installed it in the 
current MACSYMA.  We'll see if this causes any problems.  (I hope not.)
(By the way, the AMPERCHK function is now in JPG;SUPRV > next to 
similar functions of the same ilk.)

Date: 1 December 1980 00:13-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: MACSYMA-I at MIT-MC

By the way, I'm not sure if I'm happy with this AMPERCHK stuff. What 
application does it serve? In particular, just saying "A"[X] once makes
all further calls to A[X] or A(X) in that Macsyma come out as "A"[X] or
"A"(X) respectively. The test IS(INPART(A(X)=A)); or IS(PART(A(X)=A));
suddenly does something different than it used to because PART and INPART
both return "A" instead of A when called on A(X). Should it really set up
an OP/OPR linkage or should it just temporarily figure out what the linkage
would have been without making it permanent. I think the situation it creates
is confusing and I don't have any concept of what benefits you get in exchange
for such confusion.

Date: 30 November 1980 23:21-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  More GRAM fixes
To: JPG at MIT-MC
cc: BEE at MIT-MC, MACSYMA-I at MIT-MC

AMPERCHK was being called on non-symbols in LED-$/[ in GRAM. I have fixed this
by adding a SYMBOLP clause and by removing one needless call to it in the
MQAPPLY clause of LED-$/[.
Forms like
		(X+Y)[3]
and		(''?TYO)[3]

will no longer err out with an ;ATOMIC ARG REQUIRED diagnostic.

I also fixed another occurrence of (SETQ LEFT (CDR LEFT)) where 
(SETQ LEFT (CONVERT LEFT '$ANY)) was called for.

I have tested these fixes and recompiled GRAM.

-kmp

Date: 28 November 1980 18:58-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: MACSYMA-I at MIT-MC, CSVAX.jkf at BERKELEY

    Date: 26 Nov 1980 15:11:01-PST
    From: CSVAX.jkf at Berkeley

       Since the subject of DCL FCNS and DCL VARS was brought up, could one of
    the people responsible for designing the DCL xxxx scheme tell me why it is
    you go to all the trouble to maintain those files in human readable form as
    opposed to a form directly readable by lisp?

It is directly readable by Lisp.  And by people.  A simpler (and more
general) scheme would be to produce a central machine format file and to
generate various human and machine readable files from it, as GJC does with
the files database.  However, to keep the human readable files up to date,
they would have to be recreated each time the central file changes, which is
after every compilation of a Macsyma file.  Not wanting to slow down the
compilation process excessively, I decided make the file both human and
machinereadable and use only one pass.  I could well be wrong about the time
needed to update databases.

    By human readable, I mean that
    the file is nicely formatted and commented as if a human maintained it, and
    when you want to update the file you have to parse the comments (as a human
    would) to figure out what is declared where.

Not true.  Look at the code.

       Since the database file is in lisp form, it is easy to write other
    programs to use the database (such as extracting the defvar info).

Are we looking at the same file?  Our database file is in Lisp form.  The
only piece of information which is in human readable form but not in lisp
readable form is the compilation time and author.  This could be easily
added if anybody wanted it.

Date: 26 Nov 1980 15:11:01-PST
From: CSVAX.jkf at Berkeley
To: macsyma-i@mit-mc
Subject: decl etc


   Since  the subject of DCL FCNS and DCL VARS was brought up, could one of the
people  responsible  for designing the DCL xxxx scheme tell me why it is you go
to all the trouble to maintain those files in human readable form as opposed to
a  form  directly  readable by lisp? By human readable, I mean that the file is
nicely  formatted  and commented as if a human maintained it, and when you want
to  update the file you have to parse the comments (as a human would) to figure
out what is declared where.
   When  I  implemented  something  like  that  here, I just maintained all the
information  about all files in a big assoc list which is read in before a file
is compiled and ground out after the file is compiled.
   Since  the database file is in lisp form, it is easy to write other programs
to use the database (such as extracting the defvar info).

Here is a part of our database file to give you an idea of what I mean:

        (|mrg//compar| (date |Mon Oct 20 18:33:07 1980|)
                       (*expr rgrp
                              $featurep
                              like
                              $sign
                              $asksign
                              $compare
                              $killcontext
                              $newcontext)
                       (*fexpr $forget $assume $is $supcontext)
                       (*lexpr $min
                               $max
                               $facts
                               $deactivate
                               $activate
                               $context)
                       (var limitp)
                       (var $askexp)
                       (var $signbfloat t)
                       (var $advise nil)

Date: 26 November 1980 14:57-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  For the record..
To: JPG at MIT-MC, CWH at MIT-MC
cc: MACSYMA-I at MIT-MC

This conversation should have been going to Macsyma-I ... Please try to do
this automatically rather than selecting random cross-sections of us who 
might be interested. -kmp

- - - - - Forwarded Mail Follows - - - - -

Date: 25 November 1980 15:54-EST
From: Jeffrey P. Golden <JPG>
To:   CWH
cc:   JONL, KMP, RWK, GJC, JPG

   CWH@MIT-MC 11/25/80 10:45:16
   To: JPG at MIT-MC, KMP at MIT-MC
   CC: GJC at MIT-MC, RWK at MIT-MC
       JPG@MIT-MC 18 NOV 1980 1838-EST
       It looks like $SCANMAP is missing from MAXDOC;DCL FCTNS due to the 
       mishandling of Splitfiles.  Only DEFMFUNs from the last Splitfile 
       of a File seems to be getting in there.
   Sure is.  Apparently, EOF-COMPILE-QUEUE gets run once at the end of each
   splitfile, but all writes go under the COMM2 entry of DCL FCTNS.  I guess we
   need to create a separate entry for each of the splitfiles.  Does anybody
   know what magic complr variable to look at to find the name of the
   splitfile?
I don't.  Is there some reason you didn't send this mail to JONL?  It seems 
obvious to me to send such mail to the person who maintains COMPLR.
JONL, can you help us here?

Date: 26 November 1980 11:24-EST
From: James E. O'Dell <JIM at MIT-MC>
Subject:  Observations
To: ELLEN at MIT-MC
cc: MACSYMA-I at MIT-MC, CSVAX.drb at BERKELEY, CSVAX.rjf at BERKELEY

    Date: 26 November 1980 04:09-EST
    From: V. Ellen Golden <ELLEN>
    To:   CSVAX.rjf at BERKELEY, CSVAX.drb at BERKELEY
    cc:   MACSYMA-I
    Re:   Observations

    I think that RWK has something here.  And what are we trying to do?
    Can we all maybe stop for a moment and think about what we are all
    looking towards in the end?  Please.

I think this is a GREAT idea. We all need some idea of a long range goal
to plan for and work towards.

Date: 26 November 1980 05:26-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: MACSYMA error scheme
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

You made some proposals to MACSYMA-I wrt this on 11/20.  I agree with 
you that the ERREXP scheme should be flushed (it was intended to be 
temporary, until MACSYMA had a real error scheme such as now) and that 
the size of the error message report should depend on the speed of the 
line you are on and type of terminal.  I think a scheme which replaces 
large expressions displayed or printed in the error message by #'s or some 
other kind of pointer such as you described is wanted.  However, I think 
the replacement should only be done when the expressions involved are 
above a certain CONSSIZE threshhold which the user can set.

Date: 26 November 1980 04:09-EST
From: V. Ellen Golden <ELLEN at MIT-MC>
Subject: Observations
To: CSVAX.rjf at BERKELEY, CSVAX.drb at BERKELEY
cc: MACSYMA-I at MIT-MC

I think that RWK has something here.  And what are we trying to do?
Can we all maybe stop for a moment and think about what we are all
looking towards in the end?  Please.

Date: 25 November 1980 23:03-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject: Observations
To: CSVAX.rjf at BERKELEY, CSVAX.drb at BERKELEY
cc: MACSYMA-I at MIT-MC

Some people like to observe remarks without their contexts too.  I was
responding to the MARKED asymetry between the way you respond to the
changes we make that sometimes only make sense in the ITS world, and the
way you ask us to respond to the changes that you make that only make
sense in YOUR world.  Nowhere do you make this asymetry plainer than
in your recent note.  You're not very obvservant about RJF, RJF!

Of course, if you want to leave the realm of INTEREST and start counting
FILES TRANSFERED IN EACH DIRECTION, which seems to be RJF's mode for judging
cooperation, I don't think there's any question as to who's FTP server has
been busier.  But I hardly think that's quite the right measure for INTEREST
and COOPERATION.  Which is what I was talking about.  Certainly I wasn't
accusing you of HIDING DRB's mode stuff.

Date: 25 Nov 1980 14:59:09-PST
From: CSVAX.fateman at Berkeley
To: KMP@MIT-MC, RJF@MIT-MC
Cc: MACSYMA-I@MIT-MC

I have no objection to your writing code that runs only on PDP-10s.  It is
an excellent idea if you want to sell PDP-10 time, and cut off scientific
cooperation in the field between VAX and PDP-10 sites.
I think JM would not like this, though.

I believe we are, however, maintaining
a high degree of compatibility as a courtesy.  Many of the changes we make
to macsyma that we make because you made them do not increase our functionality.
I do not think that all of
our extensions to macsyma on the VAX are going to run on the PDP-10, simply
because they do not make sense on the pdp-10 ITS environment.
But you are certainly free to have all of our files.
	
	ps RWK passing by my console as I was writing this comment:
	   ``RJF's ... interest [seems to be] in what software he can get from us,
	   and not in ... contributions in the reverse direction...''
	   This is not the first time I have heard anyone say that, nor am I unable to
	   understand the basis for such a sentiment.
People are not as observant as they might be.
Have you tried typesetting using JKF's stuff on the PDP-10?
Or MAC-ED? or Char's ODE solving routines? Or DRB's mode stuff?
Or the working Lisp system and macsyma on your VAX?
	

Date: 25 Nov 1980 12:46:59-PST
From: CSVAX.drb at Berkeley
To: macsyma-i@mit-mc

I must point out that RJF has never told me to keep any of my mode stuff
from you guys.  In fact JKF told me how to mail it to you and has helped
RZ install an easy means for accessing my directory.

Date: 25 November 1980 15:12-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 23 November 1980 22:00-EST
    From: Richard J. Fateman <RJF>
    To:   KMP

    Speaking for myself only, and not for others running vaxima, I have
    no desire for additional control characters, including the one
    proposed recentl for reprinting error messages.
      When someone proposes an incompatible change for less than a compelling
    reason, I think it is not the obligation of every user to provide
    reactions as to WHICH control character to use.  It is the obligation of
    the proposer to make the case that this change is better than the previous
    situation, and that it affects few if any users adversely.
    And that the change can be made in all varieties of macsyma, and that
    the changer will update all appropriate documentation.
-----
In pondering over this for a while, I am struck by the number of incompatible 
packages that you seem to be running at your site which we seem to hear about
only in passing. If you install a different trace package which interacts well
with the Franz debugger, isn't it -- by this reasoning -- your obligation to
at least tell us that you are running with such a difference and perhaps also
to provide a compatibility package for us? Or when you decide you're going to 
make the IMSL routines work in Macsyma, isn't it your obligation to provide us
with compatible software? In fact, I don't think it is your obligation to do
so -- I'm merely trying to understand your objection to our introducing code
which runs only on our site when you seem to do it so freely on your own.
I'd appreciate hearing your views. -kmp

ps RWK passing by my console as I was writing this comment:
   ``RJF's ... interest [seems to be] in what software he can get from us,
   and not in ... contributions in the reverse direction...''
   This is not the first time I have heard anyone say that, nor am I unable to
   understand the basis for such a sentiment.

Date: 25 November 1980 14:44-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  [CWH: forwarded]
To: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

Date: 25 November 1980 10:45-EST
From: Carl W. Hoffman <CWH>
To:   JPG, KMP
cc:   GJC, RWK

    Date: 18 NOV 1980 1838-EST
    From: JPG at MIT-MC (Jeffrey P. Golden)

    It looks like $SCANMAP is missing from MAXDOC;DCL FCTNS due to the 
    mishandling of Splitfiles.  Only DEFMFUNs from the last Splitfile 
    of a File seems to be getting in there.

Sure is.  Apparently, EOF-COMPILE-QUEUE gets run once at the end of each
splitfile, but all writes go under the COMM2 entry of DCL FCTNS.  I guess we
need to create a separate entry for each of the splitfiles.  Does anybody
know what magic complr variable to look at to find the name of the
splitfile?

Actually, its unfortunate we need to continue to this splitfile lossage for
the benefit of the small PDP10 address space.  Is there any news on the
2080?  Any ideas on how long it would take to modify PDP10 MacLisp to take
advantage of the extended addressing?

Date: 23 November 1980 15:39-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 22 November 1980 22:57-EST
    From: Richard J. Fateman <RJF>

    Before you put in new control characters it would be appropriate for
    you to do the ground work to see how to implement the "feature" on
    VAX/UNIX, VAX/VMS, LISPM, Multics.  I know that the first two use
    control characters differently from ITS (and each other).  Recently
    the ^c and ^d stuff was changed because of Tops-20...
-----
I feel insulted.

If I had sent this note, my inclination would have been to start it with
"Wait! Before you do {stuff}, here are the things I've thought of in the
area.  Make sure you haven't ignored these factors ..."

If you would like to send along your comments on how things there work,
what control chars are good, bad or flavorful for given applications or
general use (and why), etc. -- please send them along. We'd be more than
happy to read/digest what you have to say.

Even a note saying simply "Don't do anything until I find time to mail
you my thoughts on {stuff}!" is more useful and less insulting than a
note which seems to presuppose that we do not give thought to these
issues. (To which I might add that sometimes thought is given and wrong
solutions result do to errors in judgment or conflicts of opinion, so it
seems we can't always win even when we try -- but we do indeed try.)

My point being that it is the case that we ARE working out these schemes
with all operating systems in mind and are *fully* aware that there are
screws with other operating systems and the way they handle control-char
interrupts if at all ... The way that ITS, LispM, and Multics handle 
interrupts are already extremely different; the twenex differences seem
minor by comparison ...

So please, DO send us your (anyone from Berkeley's) thoughts/ideas/warnings
about control-chars... Thanks.

-kmp

Date: 22 November 1980 22:57-EST
From: Richard J. Fateman <RJF at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

Before you put in new control characters it would be appropriate for
you to do the ground work to see how to implement the "feature" on
VAX/UNIX, VAX/VMS, LISPM, Multics.  I know that the first two use
control characters differently from ITS (and each other).  Recently
the ^c and ^d stuff was changed because of Tops-20...

Date: 22 November 1980 09:01-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC

   GJC@MIT-MC 11/21/80 17:19:20 
   Re: When is a [] not a []? When it's a [?""], of course!
   To: KMP at MIT-MC
   CC: MACSYMA-I at MIT-MC
   Sigh. Because the code for $ERRORMSG is
   (LEXPR-FUNCALL #'*MFORMAT NIL (CDR $ERROR))
   I suppose ((MLIST) |No Error.|) would be better.
Has been done.  Actually I decided on ((MLIST SIMP) |&No error.|), 
the equivalent of ERROR:["No error"] (which, of course, the user 
can't type due to an assign property on ERROR.)

Date: 21 November 1980 17:19-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  When is a [] not a []? When it's a [?""], of course!
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

Sigh. Because the code for $ERRORMSG is
(LEXPR-FUNCALL #'*MFORMAT NIL (CDR $ERROR))

I suppose ((MLIST) |No Error.|) would be better.

Date: 21 November 1980 14:51-EST
From: Lars S. Hornfeldt <LSH at MIT-MC>
Subject: TEACHM
To: ELLEN at MIT-MC
cc: BUG-MACSYMA at MIT-MC, LSH at MIT-MC, MACSYMA-I at MIT-MC

The trouble was that the SCRIPT function now takes 2 args
(btw, sorce is on the bad pack 13).  I've added NIL as extra arg to
SCRIPT throughout ELLEN;SCRIPT INTRO, and now it works reasonably.

Original is in ellen;script introO.

Date: 21 November 1980 14:24-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: When is a [] not a []? When it's a [?""], of course!
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

Why is $ERROR set to ((MLIST) ||) instead of at least ((MLIST) /&) or
better yet ((MLIST) |&No Error?|) or just ((MLIST)) ...? The form
((MLIST) ||) displays as [], which is likely to be muchly confusing. 

Date: 21 November 1980 14:03-EST
From: Lars S. Hornfeldt <LSH at MIT-MC>
To: ELLEN at MIT-MC
cc: LSH at MIT-MC, MACSYMA-I at MIT-MC

There was trouble with CRTCONSOLE when running TEACHM.
I renamed ellen;script intro  to  script introO  and
made a new script intro with the CRTCONSOLE stuff removed,
so it worked temporarily.

Date: 21 November 1980 07:15-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

   KMP@MIT-MC 11/20/80 16:37:41
   To: JPG at MIT-MC
   CC: MACSYMA-I at MIT-MC
   Why does DECLARE(thing,ALPHABETIC); still put an ALPHABET T property on
   the thing? There seems to be this variable ALPHABET which is actually used
   by ALPHABETP to find alphabetness and the ALPHABET property seems to make
   no difference. -kmp
The ALPHABET property is used by the SAVE command to indicate that the user 
has made such an extension which he may want saved.

Date: 21 November 1980 05:56-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC

The YANNIS;IRINTE files have been moved to MAXSRC;IRINTE so that the 
YANNIS; directory can be flushed.  All files that need to know about 
this that I am aware of have been updated.

Date: 20 November 1980 22:14-EST
From: George J. Carrette <GJC at MIT-MC>
To: MACSYMA-I at MIT-MC

A survey of tty types (generated by MAXTUL;TTYSUR)
of macsyma users is now being sent to the file
MAXDOC;TTY SURVEY. Every day or so this information
will be condensed. It should give us a good idea
of what the user spectrum is like.

-gjc

Date: 20 November 1980 21:19-EST
From: George J. Carrette <GJC at MIT-MC>
To: MACSYMA-I at MIT-MC

Recently some macsyma users have complained to
me about the increase in size and information
value of macsyma error messages. (No kidding).
These are users on slow and/or printing terminals
who prefer the ERREXP scheme. (Which I would like
to see phased out).

A larger problem is that some of these users
write macsyma packages and have adopted
error message printing conventions which are
suboptimal for the majority of users on video
terminals. See footnote.1.

I'd like to know if you think the following would
work:

[1] For fast video terminals (the user may say
   "treat me as fast"), MFORMAT is called as expected.
[2] For slow/printing terminals only the STRING is printed,
    and the user can get the whole message by doing
    ERRORMSG(); and/or looking at the value of the variable
    ERROR. See footnote.2.

-gjc

footnote.1.

ERRORM(MESS,[L])::=
 BUILDQ([MESS,L],
  (ERROREXP:L,
   ERROR(MESS,"ERROREXP contains the offending expression")))$

Many times the string explaining about ERROREXP is longer
than the expression!

footnote.2.

The method used to print the string could be to run
MFORMAT, but tell it to abreviate all expressions to # or
something. Although its probably better to just let
the user understand the simple FORMAT syntax.


Date: 20 November 1980 16:37-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

Why does DECLARE(thing,ALPHABETIC); still put an ALPHABET T property on
the thing? There seems to be this variable ALPHABET which is actually used
by ALPHABETP to find alphabetness and the ALPHABET property seems to make
no difference. -kmp

Date: 20 November 1980 16:50-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

In MLISP you have (MERROR "~A unbound variable" (FULLSTRIP1 FORM)).
Probably this is from before ~M was implemented, so I'de
like to take this opportunity to remind people that
when they generate error messages they should in NO WAY
alter the objects which are to be the displayed object
of the error message. In this case in point the
ERREXP would be bound to
["~M unbound variable",FOO], and the user should be
able to do
ERREXP[2]::44; and recover from the error. The lisp level
unbound variable handler can be made to do this,
and the macsyma evaluator could be fixed to allow it also.
I'm sure you can see how altering the objects before
passing them to MERROR can lead to gross problems,
especialy if something up on the stack tries to handle
the error.

-gjc

p.s. Methods to handle/catch/signal errors will soon be
announced.


Date: 20 November 1980 05:17-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: BUG-MULMAX at MIT-MC
cc: RHB at MIT-MC, MACSYMA-I at MIT-MC

Forwarded to BUG-MULMAX for RHB:
(RHB: On MC, please use :BUG MULMAX ...  ^C  to send Multics Macsyma 
bug notes.)
   RHB@MIT-MC 11/19/80 19:49:59
   To: CWH at MIT-MC, MACSYMA-I at MIT-MC
   CC: RHB at MIT-MC
   In multics-macsyma, while trying to generate a set of linear
   simultaneous equations,
   s[nu]=sum(k!/(nu!*(k-nu)!)*p[k],k,nu,n);
   gives 
   Error: out_of_bounds at lisp_gc_alm|352
   (>exl>lisp_dir>e>bound_lisp_intrprtr_)
   referencing lisp.lists.!BBBJKgnKHGzKX|77600 (in process dir)
   Attempt to access beyond end of segment.

Date: 19 November 1980 19:49-EST
From: Robert H. Berman <RHB at MIT-MC>
To: CWH at MIT-MC, MACSYMA-I at MIT-MC
cc: RHB at MIT-MC

In multics-macsyma, while trying to generate a set of linear
simultaneous equations,

s[nu]=sum(k!/(nu!*(k-nu)!)*p[k],k,nu,n);


gives 

Error: out_of_bounds at lisp_gc_alm|352
(>exl>lisp_dir>e>bound_lisp_intrprtr_)
referencing lisp.lists.!BBBJKgnKHGzKX|77600 (in process dir)
Attempt to access beyond end of segment.


Date: 18 November 1980 18:38-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: KMP at MIT-MC
cc: GJC at MIT-MC, MACSYMA-I at MIT-MC

It looks like $SCANMAP is missing from MAXDOC;DCL FCTNS due to the 
mishandling of Splitfiles.  Only DEFMFUNs from the last Splitfile 
of a File seem to be getting in there.

Date: 18 November 1980 18:20-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  DEFMFUN information propagation
To: GJC at MIT-MC
cc: JIM at MIT-MC, MACSYMA-I at MIT-MC

    Date: 17 November 1980 13:36-EST
    From: George J. Carrette <GJC>

    Theres a bug in DEFMFUN. $SCANMAP is clearly DEFMFUN'ed in JPG;COMM2, and
    compiled on 11/14/80 by JPG, but $SCANMAP is not in DCL FCTNS.

    How about if we replace this mechanism with one where the declaration info
    goes to the STRING files produced by MERROR, and have the declaration files
    produced every so often by a merging? 

    Its very important for the user's of the macsyma->lisp translator
    that these data be complete and reliable.
-----
I don't understand the nature of this bug at all. I must be missing something.
Can you elaborate on what is going on here? Thanks. -kmp

Date: 18 November 1980 14:07-EST
From: James E. O'Dell <JIM at MIT-MC>
To: GJC at MIT-MC
cc: CWH at MIT-MC, MACSYMA-I at MIT-MC, RWK at MIT-MC

    Date: 17 November 1980 13:36-EST
    From: George J. Carrette <GJC>
    To:   CWH, RWK
    cc:   MACSYMA-I

    Theres a bug in DEFMFUN. $SCANMAP is clearly DEFMFUN'ed in
    JPG;COMM2, and compiled on 11/14/80 by JPG, but $SCANMAP is
    not in DCL FCTNS.

    How about if we replace this mechanism with one where the
    declaration info goes to the STRING files produced by
    MERROR, and have the declaration files produced every so
    often by a merging? 

    Its very important for the user's of the macsyma->lisp translator
    that these data be complete and reliable.

Keep in mind the compatability issues, not every system uses out-of-core
strings.

Date: 17 November 1980 21:17-EST
From: George J. Carrette <GJC at MIT-MC>
To: INFO-MACSYMA at MIT-MC, MACSYMA-I at MIT-MC, JM at MIT-MC

From a DATSUN automobile ad. (I was watching monday night football
while working on the lisp machine in room 912):

AUTOMOBILE: "... please turn off your lights"
DRIVER:     "Thanks Maxima"
ANNOUNCER: "Maxima, thats genius talking".

-gjc


Date: 17 November 1980 19:47-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: short-sighted conditionalization of code.
To: BEE at MIT-MC
cc: MACSYMA-I at MIT-MC

I'm going over the MFORMAT code now so that it will
run on multics, and I find #-LISPM #+LISPM stuff
which I have to delete, before I can properly conditionalize
the code around the concept in question (out-of-core-strings).

I had put my name in a comment in the code in the vain hope that when
the time came to transport the code I would at least get some mail
about it. 

An explaination of why the syntax checking at compile time of
mformat strings was conditionalized out on the lisp machine is
perhaps also in order. (I know the lisp machine compiler is already
many times slower than the maclisp compiler, but does this really
gain you that much?).

-gjc


Date: 17 Nov 1980 16:04:49-PST
From: CSVAX.drb at Berkeley
To: macsyma-i@mit-mc

I believe that JKF has found places where MRG's data-base does cdr of
symbols.  It is believed around here that large portions of MRG's stuff
either never get called or the results don't matter much.  Perhaps JKF
can enlighten us.

Date: 17 November 1980 13:36-EST
From: George J. Carrette <GJC at MIT-MC>
To: CWH at MIT-MC, RWK at MIT-MC
cc: MACSYMA-I at MIT-MC

Theres a bug in DEFMFUN. $SCANMAP is clearly DEFMFUN'ed in
JPG;COMM2, and compiled on 11/14/80 by JPG, but $SCANMAP is
not in DCL FCTNS.

How about if we replace this mechanism with one where the
declaration info goes to the STRING files produced by
MERROR, and have the declaration files produced every so
often by a merging? 

Its very important for the user's of the macsyma->lisp translator
that these data be complete and reliable.


Date: 17 November 1980 11:36-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  Out-of-core strings
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC, RWK at MIT-MC

Come on Kent, just be sure to (LOAD '((MACSYM)ERMSGM FASL)).
I assume you do have a standard INIT file when creating
your MAX-II's.


Date: 17 November 1980 04:01-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Out-of-core strings
To: RWK at MIT-MC
cc: MACSYMA-I at MIT-MC

This cruft doesn't work in a bare lisp. It would be nice if it set up
autoloads for the functions it needs if they weren't already loaded...
I have to do a (DEFUN STRING-FILE-NAME (NIL) NIL) to get it to load at
all... After that I still don't know what errors I'll get when I try 
running it...

Date: 17 November 1980 03:47-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: GJC at MIT-MC, RWK at MIT-MC
cc: MACSYMA-I at MIT-MC

jpg tells me that the out-of-core stuff protects me from clobbering stuff,
so i guess you can ignore that request.

Date: 17 November 1980 03:41-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: RWK at MIT-MC, GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

Could you look into having the out-of-core string stuff die horribly if you
try to write a string-file over the top of an existing one? If you play with
a package name similar to Macsyma's package names, there's a risk of clobbering
a good err file with an unrelated one by accident since they all get dumped to
a common dirname. The particular worrisome case is rewrites of packages like
SUPRV, GRAM, etc. where I have started my version number over again since I'm
not trying to keep pace with the released versions anyway.
-kmp

Date: 16 November 1980 23:18-EST
From: James E. O'Dell <JIM at MIT-MC>
Subject:  mtrace
To: JPG at MIT-MC, KMP at MIT-MC, CSVAX.fateman at BERKELEY
cc: MACSYMA-I at MIT-MC

    Date: 16 Nov 1980 17:47:04-PST
    From: CSVAX.fateman at Berkeley
    To:   MACSYMA-I
    Re:   mtrace

    we do not use the maclisp trace or mtrace package.  It was too obscure
    and was easier to re-write than fix.  
      If you would like one that would probably be easier to multify,
    we can send you one.
    (written by jkf)
      It interacts with the Franz trace package, and constitutes about

    2 pages of code.
In fact JPG fixed the MTRACE file to run initially on Multics with a little
work, so it is not urgent.

Does your trace package have the same as or better user features than
the current MTRACE. Does it reproduce the features available to Lisp
functions for Macsyma functionsin the appropriate environment?

Date: 16 November 1980 22:35-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: MACSYM at MIT-MC
cc: MACSYMA-I at MIT-MC

Ok, the TRACE bugs should be fixed. I replaced RPLACD's with SETPLIST's
and CDR's with PLIST's in as many places as I could verify that the thing
being fiddled with was a symbol.  Lemme know if further bugs get reported
on this -- I don't read MACSYM mail as often as some of you others do...
-kmp

Date: 16 November 1980 22:34-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Vax TRACE package
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

If you want to drop off a copy of your tracer, feel free to do so. Dunno if we
can use it or any part of it but it's of course worth looking at. Put it in
MAXTUL;VTRACE and send me a note saying it's there and I'll look at it later.
Thanks. -kmp

Date: 16 Nov 1980 17:47:04-PST
From: CSVAX.fateman at Berkeley
To: MACSYMA-I@MIT-MC
Subject: mtrace

we do not use the maclisp trace or mtrace package.  It was too obscure
and was easier to re-write than fix.  
  If you would like one that would probably be easier to multify,
we can send you one.
(written by jkf)
  It interacts with the Franz trace package, and constitutes about

2 pages of code.

Date: 16 November 1980 20:43-EST
From: George J. Carrette <GJC at MIT-MC>
To: KMP at MIT-MC
cc: MACSYM at MIT-MC, MACSYMA-I at MIT-MC

RJF told me that they use a different trace package
in Vaxima. 

Maclisp trace is a pigstyle as it is with all the different
functional properties and the way the property list is hacked
with two EXPR properties sometimes. Add to that the winning
properties of macsyma and you have a real kludge fest.

There must be a way to regularize this!

The many macsyma FEXPRs make tracing less useful than it should be,
ever try to get information by tracing APPLY or MAPLIST? Anyway,
since there is now an even bigger problem in trying to trace these
common functions in translated code, (i.e. you can't since the FEXPR's
are open-translated to internal entry points), we have to do something
more thoughtfull anyway.

-gjc

Date: 16 November 1980 18:50-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: MACSYMA-I at MIT-MC
cc: MACSYM at MIT-MC

TRACE does RPLACD/CDR of symbols *ALL OVER THE PLACE*... I don't have time
to fix this right now. I might try later if no one has gotten to it...
RJF -- do you not use our MTRACE package -- if you do, why does it work for
you? -kmp

Date: 16 November 1980 03:57-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC

I can see no reason why CAR and CDR shouldn't be NIL in MC MACSYMA, 
so they are now set to NIL in the current MACSYMA.

Date: 16 November 1980 00:43-EST
From: James E. O'Dell <JIM at MIT-MC>
Subject:  compatible?
To: KMP at MIT-MC
cc: GJC at MIT-MC, MACSYMA-I at MIT-MC

    Date: 15 November 1980 17:58-EST
    From: Kent M. Pitman <KMP>
    To:   GJC
    cc:   MACSYMA-I
    Re:   compatible?

        Date: 15 November 1980 17:29-EST
        From: George J. Carrette <GJC>

        If we are trying to bring up macsyma on lisp machines and multicies,
        and experience various CAR/CDR bugs from time to time, how come
        the values of CAR/CDR are set to T on MC? Is there a good
        reason to not have this error checking in interpreted code? -gjc
    -----
    My guess is that this was for code that tried to PLIST via CDR. It strikes
    me that setting them NIL can never hurt since we *want* people to tell us
    when if they ever get a case of it CAR/CDR'ing a non-list. Having Macsyma err
    out is not bad. It's worse to have it blindly CAR/CDR off of randomness and
    maybe lose utterly. I vote for its being NIL for both.
    -kmp
Its my experience in finding these bugs that in oreder to reproduce the bug
on MC I ALWAYS have to set CAR and CDR to nil AND load some interpreted code.
Given this fact and the fact that LISPM and Multics Macsyma will become more
used as time goes on, I don't really think it matters.

Date: 15 Nov 1980 20:49:06-PST
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc
Subject: CAR/CDR and such random features

We have found many bugs related to this, where mit-mc's macsyma just
wandered off in some interminable way, and the program stopped cold
on Franz.  The use of CDR for PLIST is very unlikely to have survived
unless we somehow have avoided ever running that code.  We find
the use of GET in random ways to be more pervasive.  We give an
error message if you run off the end of an assoc list with odd length.
This too has been useful in debugging, but is more data-dependent than
(cdr <atom>).
 

Date: 15 November 1980 17:58-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  compatible?
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 15 November 1980 17:29-EST
    From: George J. Carrette <GJC>

    If we are trying to bring up macsyma on lisp machines and multicies,
    and experience various CAR/CDR bugs from time to time, how come
    the values of CAR/CDR are set to T on MC? Is there a good
    reason to not have this error checking in interpreted code? -gjc
-----
My guess is that this was for code that tried to PLIST via CDR. It strikes
me that setting them NIL can never hurt since we *want* people to tell us
when if they ever get a case of it CAR/CDR'ing a non-list. Having Macsyma err
out is not bad. It's worse to have it blindly CAR/CDR off of randomness and
maybe lose utterly. I vote for its being NIL for both.
-kmp

Date: 15 November 1980 17:29-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: compatible?
To: MACSYMA-I at MIT-MC

If we are trying to bring up macsyma on lisp machines and multicies,
and experience various CAR/CDR bugs from time to time, how come
the values of CAR/CDR are set to T on MC? Is there a good
reason to not have this error checking in interpreted code?

-gjc

Date: 15 November 1980 06:22-EST
From: Robert W. Kerns <RWK at MIT-MC>
Sender: ___021 at MIT-MC
Subject: Testing
To: RJF at MIT-MC, MACSYMA-I at MIT-MC

I think I may have fixed things so you won't get this message twice.

Date: 15 November 1980 04:14-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: RJF at MIT-MC
cc: MACSYMA-I at MIT-MC

   Date: 14 Nov 1980 12:44:27-PST
   From: CSVAX.fateman at Berkeley
   To: macsyma-i@mit-mc
   Subject: burst of activity regarding varlist and genvar

   (1) macsyma-i mail gets sent to me so there is no need to sent it to
   me explicitly, since then I get it more than once.
It is not our intention that you get mail items twice.  It is simply that 
mail to you is set up strangely, at your request, and the mailer is not 
clever enough to suppress the second sending.  It is often necessary to 
send mail as being 
 To: RJF
 CC: MACSYMA-I
so that the other people on the mailing list will understand what the 
import of the mail item is, that it is in reply to something you sent, 
e.g. this mail item I am now sending.

   (2) is there something I did to bring this up?
Yes, I believe it is in reply to this mail you sent:
   Date: 31 Oct 1980 12:01:41-PST
   From: CSVAX.fateman at Berkeley
   To: bmt@mit-mc, rz@mit-mc
   Cc: jpg@mit-mc
   is there any reason for polyinx to bind genvar to nil, and thus
   make for additional gensyms in subsequent computations?

Date: 14 Nov 1980 12:44:27-PST
From: CSVAX.fateman at Berkeley
To: macsyma-i@mit-mc
Subject: burst of activity regarding varlist and genvar

(1) macsyma-i mail gets sent to me so there is no need to sent it to
me explicitly, since then I get it more than once.
(2) is there something I did to bring this up?

Date: 14 November 1980 14:41-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  varlist and genvar
To: BMT at MIT-MC
cc: MACSYM-I at MIT-MC, RJF at MIT-MC

Maybe you should define a macro BIND-RAT which binds both
VARLIST and GENVAR.

Date: 14 November 1980 06:10-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: GCOOK at MIT-MC
cc: GJC at MIT-MC, BMT at MIT-MC, MACSYMA-I at MIT-MC

DISPFORM(A/B); returns ((MQUOTIENT SIMP) $A $B) .

Date: 13 November 1980 18:31-EST
From: Barry M. Trager <BMT at MIT-MC>
Subject: varlist and genvar
To: MACSYM-I at MIT-MC
cc: RJF at MIT-MC

 Rule for using rational function package:
ALWAYS BIND GENVAR WHEN BINDING VARLIST!

VARLIST and GENVAR are used by the rational function package
to keep track of the association between general representation
kernels and the gensym's which actually appear in poly forms.
This organization sometimes seduces one into thinking that
you could bind VARLIST to nil and reuse the gensym's appearing
on GENVAR by not binding it, thus minimizing the creation of new
gensym's.  This practice has led to many bugs as exemplified by
the following scenario:

function A calls $rat(x) yielding VARLIST = (x) and GENVAR = (G0001)
then calls function B
function B binds VARLIST = () and calls $RAT(x+y) yielding
VARLIST = (x y) and GENVAR = (G0002 G0001)
performs computation and returns restoring VARLIST but leaving 
GENVAR = (G0002 G0001)
now when VARLIST and GENVAR are paired up x matches G0002 instead of
G0001.  (This problem could be fixed by having VARLIST match the
rightmost segment of GENVAR instead of leftmost, but that would
involve many changes to the rational function package).

Another argument for pairing fresh VARLIST with a fresh GENVAR
is that currently some properties of the kernels are kept
on the property list of gensyms, and if function B is using 
function A's GENVAR list it could change those properties and
things wouldn't get restored on exit.

In any future version of macsyma the VARLIST GENVAR scheme needs much
rethinking, but for the present the safest course is to bind
VARLIST and GENVAR and let the garbage collector handle all
the gensyms consed up.

Date: 13 November 1980 15:01-EST
From: Barry M. Trager <BMT at MIT-MC>
To: GCOOK at MIT-MC, GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

 Nothing in macsyma should ever generate ((mquotient simp) $a $b)
since mquotient is an unsimplified (redundant) operator the
simplified form involves mtimes and mexpt.  You could ask for
a macro which generates ((mquotient) $a $b) (i.e. without the simp flag)
but I don't know of one.

Date: 13 November 1980 14:57-EST
From: George J. Carrette <GJC at MIT-MC>
To: GCOOK at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 11/12/80 13:17:47
    From: GCOOK at MIT-MC

    Is there a macro or function in the OPERS package or elsewhere in the
    MACSYMA environment (which will contiue to be supported in future versions
    of the system) which gives

    ((MQUOTIENT SIMP) $A $B)

    instead of

    ((MTIMES SIMP) $A ((MEXPT SIMP) $B -1))

    when passed the arguments '$A and '$B ?

MAXDOC;NOPERS > gives some info on a new opers package which should
cover all the useful cases. Its not been completed so we would be
glad to hear your suggestions/help.


Date: 6 November 1980 07:16-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: JKF at MIT-MC
cc: MACSYMA-I at MIT-MC

   JKF@MIT-MC 11/05/80 18:17:16
   solve(a,[b]) returns [] as it should but solve(a,[b,c]) gives an
   inconsistent equations error message.  Can it be made to return [] as
   well?
I announced the SOLVE_INCONSISTENT_ERROR switch to INFO-MACSYM on 9/03/80.
If you set it to FALSE, you get [].
KMP is correct, your mail should have gone to BUG-MACSYM or MACSYM not 
to MACSYMA-I.

Date: 6 November 1980 07:11-EST
From: Lars S. Hornfeldt <LSH at MIT-MC>
Subject: Trig simplification and sumsubstitution
To: MACSYMA-I at MIT-MC, ELL at MIT-MC, STOUTE at MIT-MC, ADK at MIT-MC,
    ASB at MIT-MC, MRM at MIT-MC, JPFF at MIT-MC, SWOLF at MIT-MC,
    YEKTA at MIT-MC

	From: CSVAX.fateman at Berkeley
	I wonder if you have tried ratsubst for trig simplification?

  Yes, but like through-out substitutions (cos=>1-sin or viceversa), it
  tends to leave the expr.  in COMPLETE sin- or cos- form, thus deviating
  from *the* smallest formulation which is a very particular combination
  that normally contains BOTH sin and cos.

	[MESSAGE FROM RJF at MIT-MC  11:48pm]
	I realized you were doing a better job after I sent that message.
	(thorough and fast).  Is the problem really that important?
------------
1) The program isn't confined to that trig-relation; There are plenty
of relations of sum-type in algebra: I'll set up a command utilizing
the relation between trigs of MULTIPLE and SINGLE args(trig-UN-expand)
and maybe for the sums that relate multi-logarithms, or what have you.

A user may also want to "UN-EVAL" his large result, ie group together-
and-replace those terms that (almost) form one or another of his
private higher, composed objects, thus largely compressing the answer,
and help its meaning stand out.
  [He can set up such substitutions himself for tensor formulas, but
for scalar sums I would still have to (and can) do that for him]


2) Sum-relations probabilistically reduces an expression with an
amount that grows AT LEAST LINEARLY with the expression-size, and
I would think even faster [see footnote].
   Thus, its importance might increase as even huger problems are
attacked with large_address_space -machines.

For these, the UN-EVAL would also bridge the widening gap between the
size of the output, which is growing, and the human capacity to read
this output, which is constant.
-------------------------------

[Footnote on expression sizes]			        p     q
Consider a general,uni-variate trig exp: SUM( h[p,q]*SIN * COS,p,q=0,P)
that contains all trig-combinations up to power P. Initially this
contains P^2 terms (or P^2/2 if p+q<=P. From now on, disregard from
proportionality constants).
   If each pair of h[p,q]'s are linearly dependent, then a subst
sin=>1-cos would reduce these to P terms:fine, but if all h[p,q] are
linearly IN-dependent, the same subst gives P^3 terms!
   If 2 h's are D-ependent with probability D, the result would be
P*D+P^3*(1-D) which is more terms than the original P^2 for ALL D<1 if
P is big (so sin=>cos is worse than doing nothing).

  The sumsubstitutor takes action selectively only for the dependent
h's, giving: P*D + P^2*(1-D) which is ALWAYS better than P^2
[conceivable: the initial version is very unlikely eq to the optimal].

  This shows that the reduction at least is linear in the orig. nbr of
terms (P^2). However, the h's are in general polynomials, with "lin. dep."
above actually comparing each of their terms, and then maybe the D
grows with the expr-size too. Anyway, the reduction compared to sin=>cos
grows faster than linear.
For an exp in n trig-variables, replace any P above with P^n.

-lsh

Date: 5 November 1980 23:46-EST
From: Lars S. Hornfeldt <LSH at MIT-MC>
Subject: Trig simplification (forgive late reply)
To: MACSYMA-I at MIT-MC, RJF at MIT-MC

	Date: 11 Sep 1980 13:44:23-PDT
	From: CSVAX.fateman at Berkeley

	I wonder if you have tried ratsubst for trig simplification?

Yes, but like through-out substitutions (cos=>1-sin or viceversa), it tends
to leave the expr.  in COMPLETE sin- or cos- form, thus deviating from
*the* smallest formulation which is a very particular combination that
normally contains BOTH sin and cos.


Date: 5 November 1980 18:17-EST
From: John K. Foderaro <JKF at MIT-MC>
To: MACSYMA-I at MIT-MC

 solve(a,[b]) returns [] as it should but solve(a,[b,c]) gives an
inconsistent equations error message.  Can it be made to return [] as
well?

Date: 5 November 1980 08:33-EST
From: Lars S. Hornfeldt <LSH at MIT-MC>
Subject: STENSR's humanoid trig simplifier
To: MACSYMA-I at MIT-MC, ELL at MIT-MC, STOUTE at MIT-MC
cc: INFO-TENSOR at MIT-MC, MRM at MIT-MC, JPFF at MIT-MC

TRIGSUM(exp);   is a new function that exploits the trig sum-relation:
			     2         2
                          sin (x) + cos (x) -1  => 0

simultaneously in all formulations: sin+cos->1,  1-sin->cos,  1-cos->sin.
Each direction is selectively used only where it is BENEFICIAL, and
the program returns THAT mixture of sin and cos that constitutes the
least number of terms.		For instance:

TRIGSUM of: (ONE - C     )*SIN(X)^2   Returns     (      S)*SIN(X)^2
          + (ONE      - S)*COS(X)^2     ===>    + (    C  )*COS(X)^2
          + (    + C  + S)                      + (ONE    )

This works equally well and fast if multiplied with any sin-cos power.
The workspace consumption =0, in contrast to explicit subst. sin=>cos.
See the output file  LSH;TRGSUM DEMOUT   -which is a writefile
of  the batch		 TRGSUM,DEMO

TRIGSUM calls the arbitrary-sum-substitutor (=1yr work) in STENSR (6y).
An attempt to explain it's main lines is in TRGSUM MAIL
(complementing Springer Verlag.. see lsh;STENSR INFO)

I've the last two months [besides beating RP's Sci. Am-problem on 4
machines] made long planned improvements of the sumsubstitutor as to:

1) Substitute COLLAPSABLE sums, ie sums for which the number of, and
   sequence of, the terms may change in certain malign environments.
   Eg. the cyclic sum of 3 Riemann tensors (=identically zero) can
   collapse to 2 or less terms if contracted with symmetric tensors.

2) allow a user-provided, optional ELECTION-function, that determines
   what terms to get rid of when that choice is extra tricky. A such
   one is built into TRIGSUM, doing the choice between the terms
   associated with  "sin", "cos" and "-1".

Let me know if you can repeat any demo example with trigsimp,ratsubst
,exponentialize..
			-lsh

Date: 2 November 1980 11:53-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: BMT at MIT-MC, GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

GJC's MFEXPR* hack for DOLIST has been installed.
Thanks, George!

Date: 1 November 1980 16:54-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  MAXSRC;UPDATE >
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

I like the package a lot. It is simple and clear. I think it has a couple of
failings, though, which I will sketch here. Maybe you can find the time to
add the code? The general class of problems it does not handle is what we want
to do with CATCH/THROW right now.. eg, envision the following:

	Version-0 code:

		(CATCH FOO BAR)

	Version-1 equivalent:

		(*CATCH 'BAR FOO)

	Version-2 equivalent:

		(CATCH 'BAR FOO)

We cannot recognize that (CATCH FOO BAR) is in the wrong format in your scheme
in a straightforward way. I propose instead the following:

	Have a series of files on some dir which are the translators from
	version n to n+1. Hence, MACSYM;TRANSL nnnn might be a file responsible
	for updating a file from a version nnnn-1 format to a version nnnn
	format. If it were EXPR code, it could be GC'd. If it were FASL, it
	would run faster. I am not sure which is better... 

Something like ...

	(DO ((V    LOSING-FILE-VERSION-NUMBER	(1+ V))
	     (CODE LOSING-CODE			(UPDATE-CODE CODE)))
	    ((> V CURRENT-VERSION-NUMBER) CODE)
	  (LOAD `((MACSYM) UPDATE ,V)))

Each time a LOAD happens, it updates the database that UPDATE-CODE draws
on ...

Feel like putting something like this in? This would allow you to re-run the 
exactly progression of evolution across the files... Whadya think?
-kmp

Date: 1 November 1980 13:59-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  DOLIST --> MPROGN
To: RWK at MIT-MC
cc: BMT at MIT-MC, MACSYM-I at MIT-MC

    Date: 1 November 1980 13:40-EST
    From: Robert W. Kerns <RWK at MIT-MC>
    To:   BMT
    cc:   MACSYM-I
    Re:   DOLIST --> MPROGN

    This transformation is already in effect.  Old SAVE files can still contain
    DOLIST, however, so DOLIST still exists in #+PDP10 MACSYMA as
    #+PDP10 (DEFUN DOLIST FEXPR (L) (APPLY #'MPROGN L))

BMT is right. Its pretty dumb to have interpreted lisp code broken
because of a macsyma FEXPR definition. DOLIST does not have to
be a LISP-LEVEL FEXPR, no need to have a #+PDP10 crock in there either!
(What if old saved files are moved to Multics or the lisp machine?)

No Macsyma special form need be a lisp FEXPR.

(DEFUN (DOLIST MFEXPR*) (FORM)
       (SETF (CAR FORM) '(MPROGN))
       (MEVAL FORM))

I'm not sure why such an obvious solution is passed up, and instead
somebody chooses to APPLY another FEXPR, MPROGN, and break lisp
code to boot.

Come to think of it, this whole thing could have been
avoided if the realisation was made that lisp special forms cannot be
used as macsyma special forms, since lisp forms expect EVAL
and macsyma ones expect MEVAL. The macsyma evaluator should ignore
lisp special forms.

-gjc


Date: 1 November 1980 13:40-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject:  DOLIST --> MPROGN
To: BMT at MIT-MC
cc: MACSYM-I at MIT-MC

This transformation is already in effect.  Old SAVE files can still contain
DOLIST, however, so DOLIST still exists in #+PDP10 MACSYMA as
#+PDP10 (DEFUN DOLIST FEXPR (L) (APPLY #'MPROGN L))

Date: 1 November 1980 12:56-EST
From: Barry M. Trager <BMT at MIT-MC>
To: MACSYM-I at MIT-MC

the function PRINL in jpg;suprv is defined using a dolist which I suspect
is a supposed to be a maclisp dolist since that is how it compiles,
but currently there is also a macsyma function called dolist, defined
in jpg;mlisp . This ambiguity should be resolved (the macsyma dolist
function should be changed). Otherwise we have code which runs 
compiled but not interpretively.

Date: 1 November 1980 02:04-EST
From: James E. O'Dell <JIM at MIT-MC>
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 31 October 1980 18:02-EST
    From: Kent M. Pitman <KMP at MIT-MC>
    To:   GJC
    cc:   MACSYMA-I

    I agree that %INF should be the name for infinity. We could set INF to %INF
    and alias INF to %INF to help with the change-over without breaking the code.
    Similarly for MINF (%MINF) and INFINITY (%INFINITY or %CINF). It is true that
    they are not constants in the same sense that %E, %PI, etc are, but we could
    generalize the notion of %... to mean system-reserved names. Is anyone 
    seriously opposed to such a gradual change?

I think its a great idea, except that I don't have hardly any time to devote
to it now. I think JPG and I talked about this once and he had some objections
but I don't remember waht they were now.

Date: 31 October 1980 19:34-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  %INF, et al
To: KMP at MIT-MC
cc: GJC at MIT-MC, MACSYMA-I at MIT-MC

Ditto for UND => %UND, IND => %IND, etc. 

Date: 31 October 1980 18:02-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

I agree that %INF should be the name for infinity. We could set INF to %INF
and alias INF to %INF to help with the change-over without breaking the code.
Similarly for MINF (%MINF) and INFINITY (%INFINITY or %CINF). It is true that
they are not constants in the same sense that %E, %PI, etc are, but we could
generalize the notion of %... to mean system-reserved names. Is anyone 
seriously opposed to such a gradual change?

Date: 31 October 1980 17:39-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: BEE at MIT-AI
cc: JIM at MIT-MC, JLK at MIT-MC, JM at MIT-MC, JOHAN at MIT-MC,
    JPG at MIT-MC, MACSYMA-I at MIT-MC

I agree with your comments on making Macsyma machine-independent. The 
(SSTATUS RANDOM ...) -- and in fact all STATUS/SSTATUS problems -- should
never have been complained about externally of our group. Such things
are clearly our bug unless your dialect doesn't support a way to achieve 
the same end result in any reliable way -- which I assume is not the case.

We still haven't gotten there but we do have plans for the sort of macro
base you've described. Macsyma is, of course, a large body of code and
isolating the machine dependencies is a slow and painful process, but we'll 
get there.

I also agree with your comment about having a Maclisp compatibility package.
Unless it will be maintained as an official feature of the Lispm, though,
it will do more harm than good by providing a temporary false sense of 
security. Mathlab can only make use of such if there is a commitment to
maintaining it. My personal feelings is that it is useful only for things
which need to be brought up in short order, but that for things which are
intended as permanent (eg, Macsyma) we shouldn't use it but should resort
to our own library of maintained macros. Note, however, that we could also
derive some benefit from seeing how things are defined in such a compatibility
package -- as a model of what to put initially in our own macro package... 

-kmp

Date: 31 October 1980 15:02-EST
From: George J. Carrette <GJC at MIT-MC>
To: MACSYMA-I at MIT-MC

Inside break loops entered via MERROR the variable
$ERROR will be bound to an MLIST of the arguments to MERROR.
I think the format string is readable by the user
even without documentation. Anyway, right now its the
ONLY way a user on a video terminal can get a re-display
of the error message. I would make a USER-LEVEL hook into
MFORMAT, except that I know as soon as I do, users will
ask for floating point formating and other things.
If anyone can think up a good name for FORMAT which doesn't
remind one of the Fortran function, please let me know.

-gjc

Date: 31 October 1980 14:34-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC, JLK at MIT-MC, JM at MIT-MC, BEE at MIT-MC,
    JOHAN at MIT-MC

First of all, I wish to apologize for saying that LISPM should support 
(SSTATUS RANDOM 0), since that is not what I intended to say. 
I meant to say that MACSYMA needs a way to do this on the LISPM, and 
I thought maybe the LISPM didn't yet have a way since CWH (at least his 
name is given as the author) just changed the code to do 
#+PDP10 (SSTATUS RANDOM 0) without supplying a LISPM equivalent.  I now 
note that JLK took care of that in RAT;SPGCD >, so that takes care of that.

Secondly, no one ever said that the Mathlab Group did not wish to maintain 
LISPM MACSYMA, but only that we had a manpower problem wrt this right now 
as the people who would be doing this are now working very hard on getting 
Multics MACSYMA up.  RWK attempted to list some of the problems we had with 
trying to work on LISPM MACSYMA over the summer.  As none of us are happy 
with not having LISPM MACSYMA work well, maybe ways can be found out of this 
dilemma without a lot of flaming.

Date: 31 October 1980 13:53-EST
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC


(MTELL-OPEN ".." ...)
(MFORMAT-OPEN STREAM "..." ...)

give an open-compilation of the string into CURSORPOS,
TERPRI, PRINC, MGRIND, and DISPLA, (and PRIN1).

There is a minor incompatibility with the interpreter in
that ~M always implies ~&~M~%. MTEXT forms are not used.

For the most part, the application of *-OPEN is in a few
places in SUPRV.

-gjc

Date: 31 October 1980 10:27-EST
From: George J. Carrette <GJC at MIT-MC>
To: BEE at MIT-AI
cc: JIM at MIT-MC, JLK at MIT-MC, JM at MIT-MC, JPG at MIT-MC,
    MACSYMA-I at MIT-MC, JOHAN at MIT-AI

Macsyma is moving more and more towards system independance, the
real *insidious* bugs like CAR/CDR of numbers, symbols, basic data
type violations, (ah, bashing fixnums, CAR/CDR of BIGNUMS), are
being smoked out in every new machine macsyma is put on.

I agree, I don't things like (SSTATUS RANDOM 0) are as bad. Not only
is the error correctable while running said code, its a simple
editing job to change it to (SET-RANDOM-SEED ...) or some other
macro. Its certainly nothing I would get flustered with.

When JLK and I compiled all of macsyma from scratch a couple
weeks ago I think our biggest mistake was to let a lot of
those compiler warning messages go by without notice.
It simply takes so long to compile things on the lisp machine
that you have to make every compilation COUNT.

-gjc


Date: 31 October 1980 08:18-EST
From: Bruce E. Edwards <BEE at MIT-AI>
Sender: BEE at CADR6 at MIT-AI
To: JIM at MIT-MC, JLK at MIT-MC
cc: JOHAN at MIT-AI, JM at MIT-MC, JPG at MIT-MC, MACSYMA-I at MIT-MC

Lets stop these personal attacks folks, and get on to the real issues.
1) Is the lispm going to install (status random 0). NO! there is an equivalent function,
   however, we probably wont support this crockish way of doing it. The right thing is to
   have the lisp machine compatibility package do this. Second, as this is presumably a
   file that is maintained by LISPM people (IE people who know something about the lisp
   machine, even if they work for MATHLAB group), it shouldn't be the concern of the
   random programmer for MATHLAB.

2) In spite of this: There will be problems with LISPM MACSYMA as there are with MULTICS
   MACSYMA. The base of these problems, is that there is little awareness of what the
   LISPM and MULTICS lisp environments are. Thus if people who are doing the programming
   for packages in MACSYMA knew what the environments are, then they could write the packages
   right the first time. I am sure this is why it was so hard to convert it to MULTICS and
   the LISPM the first time. Regardless of what MATHLAB is supporting now, it would be
   STUPID for MATHLAB to not attempt to write their code in a somewhat non-MACLISP dependent
   manner. What if NIL doesn't have (STATUS RANDOM 0). Things like this (extremely
   machine dependent) should be isolated in macro files, or something, so that the number
   of files that a person has to look at is small when he installs it in a new environment.
   This is simply good programming practice. Most of the code in the MACSYMA system depends
   on features in the lisp like CAR, CDR, and +, which are likely to be in all LISPs.

3) What I am really advocating is that the MATHLAB people be a little more careful about
   isolating dependencies on MACLISP, in their files that contain algorithmic things.
   (Obviously things like SUPRV, which depends on the IO system a lot, cannot be machine
   independent (or not easily)). Then when a change like this happens, it is only necessary
   for a system wizard on the destination machine to look at the macro file, and implement
   it on his machine. This obviously doesn't add any run time overhead to the MACSYMA
   on the KL.

4) I never saw a mention of business interests in the discussion. I think that was not
   what was intended. I think that MATHLAB can decide not to maintain LISPM MACSYMA,
   but I think that would be a loss for them. I think that they would find a lot of their
   obscure bugs if they ran it on the LISPM more, because of the better error checking.
   When you take car of a number or atom on the LISPM, you dont get some quantity that
   is ususally okay, but if you had just finished reading a file, was something random,
   you get an error. I think that if the MULTICS installation is done right, it will benefit
   the LISPM MACSYMA at the same time. It will force MACSYMA to become less dependent
   on a given system.


Date: 31 October 1980 08:01-EST
From: Bruce E. Edwards <BEE at MIT-AI>
Sender: BEE at CADR6 at MIT-AI
To: JIM at MIT-MC, JLK at MIT-MC
cc: JOHAN at MIT-AI, BUG-LISPM at MIT-MC, JM at MIT-MC, JPG at MIT-MC,
    MACSYMA-I at MIT-MC

Hey guys. BUG-LISPM is a good forum to discuss should the LISPM have (status random 0)
not to discuss politics. So let this be the last message to BUG-LISPM in this flame.
(IE if you are going to reply to this, please delete BUG-LISPM from the header and send
it to me)


Date: 30 October 1980 17:52-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject: Flaming
To: JLK at MIT-MC
cc: MACSYMA-I at MIT-MC, JOHAN at MIT-MC, BUG-LISPM at MIT-MC,
    JM at MIT-MC

Your remarks are mostly bullshit based on the assumption that because you
don't have these problems, have a key to the 3rd floor, know everything, etc.,
that others do not have these problems.  Note that I did *NOT* say these were
the MAIN reasons why LISPM Macsyma isn't being kept up-to-date.  But just
because YOU have the information I pointed out was not widely enough known
doesn't mean that the lack is unimportant, or a mere excuse.  Instead of
trying to discredit me for some unimaginable reason, simply me and any others
who lack the information would be the more proper thing to do.  I'm rather
annoyed that you replied in the manner you did; I had been counting on you
for answering some of the questions, not trying to discredit them.

You're beginning to sound like RJF.  Please don't mix your financial
considerations in with this issue; it's hardly proper to be complaining
that "how can we charge for maintainance on LISPMs when we don't do it",
when to my knowledge you haven't even offered to pay us for maintainance on
LISPMs yet!  Are you making an implied offer?  If so, then I'm sure we
can consider changing priorities!  But otherwise IPS has a better claim on
our time.

Date: 30 October 1980 17:19-EST
From: James E. O'Dell <JIM at MIT-MC>
To: JLK at MIT-MC
cc: BUG-LISPM at MIT-MC, JM at MIT-MC, JPG at MIT-MC,
    MACSYMA-I at MIT-MC, Johan at MIT-AI

    Date: 30 OCT 1980 1530-EST
    From: JLK at MIT-MC (John L. Kulp)
    Sender: JLK at CADR10 at MIT-MC
    To:   JPG, MACSYMA-I, (BUG LMMAX)
          JLK, JM, (BUG LISPM), Johan at MIT-AI

      JLK is incorrect to say that SPGCD once worked 
In fact I used it as the standard GCD algorithm for about a month, found a
few bug in it and then learned that RZ was releasing it for use on MC.

    I never claimed that.  I claim RATSIMP once worked on the LISP machine
    (as you should know, everything in the world depends on it, thus very little
    now works on the LISP machine, since SPGCD broke the most basic of all
    Macsyma utilities -- I think anyone hacking something so basic to Macsyma
    should be both competent and responsible to make sure it works).
        It is my understanding that LISPM MACSYMA is not being maintained now 
        due to lack of manpower.  [1] CWH doesn't have time to do it now, and 
        said that he hasn't done it since May.  [2] At the last Mathlab meeting 
        JM said that LISPM MACSYMA was not to be worked on until Multics 
        MACSYMA were made viable.  We aren't charging anyone for LISPM MACSYMA 
        maintenance, so I don't know why JLK raises that as an "issue".
    Ok, I guess Macsyma is free then to anyone who wants to use it on a Lisp
    machine, since the Mathlab group is not maintaining it.  I'll make sure
    the lawyers know about this policy.

I am real pissed at this JLK is here mixing his business interests and 
his claim to want the group to have the time and want to do this work.
As I understand it we do not have to provide maintainance until you 
negotiate a contract for use with us. What do you want from us?

Date: 30 October 1980 15:30-EST
From: John L. Kulp <JLK at MIT-MC>
Sender: JLK at CADR10 at MIT-MC
To: JPG at MIT-MC, MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC,
    JLK at MIT-MC, JM at MIT-MC, BUG-LISPM at MIT-MC, Johan at MIT-AI

I disagree with most of this:

    The (SSTATUS RANDOM 0) LISPM bug was fixed in MC:RAT;SPGCD >  by CWH 
    on 10/13.  (LISPM's should support (SSTATUS RANDOM 0) as it is essential 
    in debugging MACSYMA.)
No, Maclisp should be improved to have the more general and flexible facility
that the Lisp machine has.  I think people writing new code should use
the more modern capabilities around, not demand everyone adapt to archaic
coding styles.

  JLK is incorrect to say that SPGCD once worked 
    on LISPMs as it is a relatively new package.  
I never claimed that.  I claim RATSIMP once worked on the LISP machine
(as you should know, everything in the world depends on it, thus very little
now works on the LISP machine, since SPGCD broke the most basic of all
Macsyma utilities -- I think anyone hacking something so basic to Macsyma
should be both competent and responsible to make sure it works).
    It is my understanding that LISPM MACSYMA is not being maintained now 
    due to lack of manpower.  [1] CWH doesn't have time to do it now, and 
    said that he hasn't done it since May.  [2] At the last Mathlab meeting 
    JM said that LISPM MACSYMA was not to be worked on until Multics 
    MACSYMA were made viable.  We aren't charging anyone for LISPM MACSYMA 
    maintenance, so I don't know why JLK raises that as an "issue".
Ok, I guess Macsyma is free then to anyone who wants to use it on a Lisp
machine, since the Mathlab group is not maintaining it.  I'll make sure
the lawyers know about this policy.

Date: 30 October 1980 14:26-EST
From: George J. Carrette <GJC at MIT-MC>
To: JIM at MIT-MC
cc: MACSYMA-I at MIT-MC

I just saw GJS use %INF for infinity. He couldn't
figure out what was wrong. He used it as the upper limit
of a definite integral, so when the noun form was returned
it didn't tell him a damn thing. 

[1] Maybe %INF should be used so it is consistent
    with %E, %PI, %GAMMA.
[2] As to noun forms not returning much useful information to
    tell the user how to procede, well, thats another story.


Date: 30 October 1980 13:45-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC, JLK at MIT-MC,
    JM at MIT-MC, BUG-LISPM at MIT-MC

The (SSTATUS RANDOM 0) LISPM bug was fixed in MC:RAT;SPGCD >  by CWH 
on 10/13.  (LISPM's should support (SSTATUS RANDOM 0) as it is essential 
in debugging MACSYMA.)  JLK is incorrect to say that SPGCD once worked 
on LISPMs as it is a relatively new package.  
It is my understanding that LISPM MACSYMA is not being maintained now 
due to lack of manpower.  [1] CWH doesn't have time to do it now, and 
said that he hasn't done it since May.  [2] At the last Mathlab meeting 
JM said that LISPM MACSYMA was not to be worked on until Multics 
MACSYMA were made viable.  We aren't charging anyone for LISPM MACSYMA 
maintenance, so I don't know why JLK raises that as an "issue".

Date: 30 October 1980 09:46-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject: Tools
To: MACSYMA-I at MIT-MC

There is now a program :MAXTUL;MAXTUL, which has a number of MACSYMA support
tools in it.  Currently implemented are commands to list which out-of-core
string files are not being used by any findable FASL files, and for finding
what string file corresponds with a particular FASL file, and for merging
string files in preparation for a MACSYMA dump.  GJC's DOCGEN package is
in there as well, but I didn't know which were user-level entry points, so
I'll let him add them.  Other contributions welcome.

It uses KMP's completing reader, and has a HELP command, so it's pretty
straigtforward to use.

Date: 30 October 1980 07:37-EST
From: Lars S. Hornfeldt <LSH at MIT-MC>
To: BUG-LMMAX at MIT-MC, JLK at MIT-MC, JPG at MIT-MC
cc: MACSYMA-I at MIT-MC


	From: JPG at MIT-MC (Jeffrey P. Golden)
	The following information may be useful to some of you.
	Please note that it is 3 weeks old.
	   MOON@MIT-MC 10/09/80  Re: Installing Macsyma on Lisp machine

Directly after MOON's msg, I made 2 MACSYMAs on CADR-1 and reported them.
	[LSH@MIT-MC 10/11/80 03:24:19 Re: New Macsymas on Cadr-1]

Re: JLK's last Lispm-MACSYMA that errors "RANDOM SSTATUS":

As I reported to bug-lmmax, both cadr-1 macsymas had that err also,
INITIALLY, but the rat-functions WORKED when called the SECOND TIME,
so incremental debugging can be done here.

INTEGRATION WORKS on CADR-1.
BATCH didn't, and in the 46.1 band, also DRAW-LINE in fractions fails.

-lsh

Date: 30 October 1980 06:36-EST
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC, BUG-LMMAX at MIT-MC

The following information may be useful to some of you.  Please note 
that it is 3 weeks old.
   MOON@MIT-MC 10/09/80 01:28:02 Re: Installing Macsyma on Lisp machine
   To: JIM at MIT-MC
   CC: LSH at MIT-MC, CWH at MIT-MC, JPG at MIT-MC
   I have installed the current system (46.1) on CADR-1.  This seems like the
   best machine to build Macsyma's on since it has a T-300 (large address 
   space), doesn't belong to anyone in particular, and is in a convenient 
   location for demos.  You can put the "46.1 Macsyma" world on band 1 or 
   band 5.  We can then copy the band to any other machines that need it.
   Is there any policy about putting Macsyma on the department machines?
   Their disks may be too small to accomodate it, I'm unsure.

Date: 29 October 1980 10:03-EST
From: George J. Carrette <GJC at MIT-MC>
To: BMT at MIT-MC
cc: MACSYMA-I at MIT-MC

    Date: 10/29/80 06:44:16
    From: BMT at MIT-MC

      The only program on mc capable of indexing all of macsyma is rlb's
    fasl index.  It requires an xfile which contains a list of all
    macsyma fasl files.  Is there some way such a list could be easily
    generated from some of the macsyma documentation.

Yes. So, I'll give a bit of documentation on DOCGEN.
The function LOAD-INFO in DOCGEN simply does a 
(LOAD '((MAXDOC)FILES >)). Once that is loaded the variable
MACSYMA-SOURCE-FILES is bound to a list of named-structures.
The definition of all the slots is in MAXTUL;DEFILE >,
the main ones of interest here are
MACSYMA-SOURCE-FILE-NAME
MACSYMA-SOURCE-FILE-FASL-DIR
MACSYMA-SOURCE-FILE-IN-CORE
MACSYMA-SOURCE-FILE-SYSTEMS-FOR
MACSYMA-SOURCE-FILE-SYSTEMS-NOT-FOR
MACSYMA-SOURCE-FILE-LANGAUGE
And the function MACRO-FILE-P.

Simply write a predicate that selects the files you want to
hack. (The function DEL from the lispmachine is defined in DEFILE to
make it easy to get subsets of lists). I suppose we want here
all LISP files which have a FASL dir and which are not macros,
and are not not-for '(PDP10 ITS) and are for '(PDP10 ITS) (use the
function INTERESECTION-P to do this.) See the code in DOCGEN.

Some of these slots should be resolved at LOAD-TIME in order to
simplify predicates, I'm open to suggestions of how to take
advantage of natural class structure here.

-gjc


Date: 28 October 1980 23:46-EST
From: George J. Carrette <GJC at MIT-MC>
Subject: :MCL
To: MACSYMA-I at MIT-MC

Now uses the most recent MAXTUL;DOCGEN'ed data base
from MAXDOC;FILES >, so it knows where sources files
usually live. That means you only have to give the
first file name of a file to compile.

When called via JCL the normal mode is to :PROCEDE itself
without bothering you. e.g.

:MCL SETS

When called without JCL it goes into interactive mode,
with the compler variable TTYNOTES set to T.
You can always use a ^B break to set this variable back,
although in the future hitting ALT-MODE may put you
into a variable-menue mode.

-gjc

p.s. Right now ^B and other breakpoints are in the WRONG
OBARRAY (as is usual for the lisp compiler here), however
that may change soon so beware.


Date: 28 Oct 1980 14:56:28-PST
From: CSVAX.jkf at Berkeley
Message-ID: <5625.209.341621691.CSVAX@Berkeley>
To: JLK@MIT-MC
Subject: Re: Vax timing statistics
In-reply-to: Your message of 28 Oct 1980 1358-PST (Tuesday).
Cc: macsyma-i@mit-mc

 Yes I agree that the instruction times should be included in the table.
The reasons that the are there are 
  1) because my tracing program doesn't keep track of operand types yet.
  2) because I don't have a complete list of Vax instruction times (and I'm
     not sure if one even exists).  I calculate that there are over 400
     different operands possible for a movl instruction, then you have to 
     consider instruction alignment and memory response times.  

Date: 28 October 1980 18:55-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  MAXDOC;MAXTAG
To: MACSYMA-I at MIT-MC

If your EMACS init loads MAXDOC;MAXTAG (or if you load it manually) please
note that it has moved to MAXTUL; ... MAXDOC;MAXTAG :EJ is linked to MAXTUL;
for a short while so you can change your init files without things breaking
in the meantime, but that link will be flushed in a week or so, so please
make this change soon. Thanks. -kmp

Date: 28 October 1980 18:04-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Separate versions for separate machines
To: JLK at MIT-MC
cc: BUG-LMMAX at MIT-MC, MACSYMA-I at MIT-MC

I think this is a solvable problem. I will address it in a week or two
after midterms and after I have finished my work on the new parser...
People need to think in a more structured way about what is available
and what is not on different sites. I suspect the problem is generally
one of ignorance and I think that is curable. Anyway, let's cross our
fingers and hope ... 
-kmp

Date: 28 October 1980 18:01-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Forwarded data ...
To: "(FILE [MAXDOC;MAIL IMPLEM])" at MIT-MC

Date: 28 October 1980 14:52-EDT
From: Robert W. Kerns <RWK at MIT-MC>
To:   JPG, GJC, CWH, KMP
Re:   out-of-core strings

For just the files recompiled for LOSER >, (COMM, CSIMP, SUPRV, SIMP, RAT3A,
RAT3C, DSKFN), there are 220 words of out-of-core strings, in 100 messages.

Date: 28 October 1980 14:53-EDT
From: Robert W. Kerns <RWK at MIT-MC>
To:   JPG, GJC, CWH, KMP

Oops, sorry, that was 623 words saved.  220 was SUPRV's contribution.

Date: 28 October 1980 14:58-EDT
From: Robert W. Kerns <RWK at MIT-MC>
To:   JPG, GJC, KMP, CWH

With the additional space taken by MFORMAT's run-time system, and with
only those 6 files converted, we are breaking just about exactly even.

Date: 28 Oct 1980 14:25:01-1-T
From: CSVAX.jkf at Berkeley
Message-ID: <4690.209.341619569.CSVAX@Berkeley>
To: RWK@MIT-MC
cc: JKF at MIT-MC
Subject: Re: CALLS/RET/THROW
Cc: macsyma-i@mit-mc
In-reply-to: Your message of 28 Oct 1980 1406-PST (Tuesday).

  Each one of our compiled lisp functions saves 4 registers upon entry using
the register save mask.  C functions may save more or less.  If I do a 
throw though, say, 5 functions, then why should I restore those saved
registers (ap,fp,pc, plus the 4 `user' registers) five times  when 
only their last restored values matter.  It would seem that it is only 
necessary to remember the state at the CATCH (with one pushr instruction) 
and restore to that state should a throw occur.
  Of course VMS and NIL are probably more clever and don't always save 
the same 4 registers, but in any case there is a good chance that some
registers (besides pc, ap and fp) will be restored more than once.

Date: 28 October 1980 17:03-EDT
From: Robert W. Kerns <RWK at MIT-MC>
Subject: CALLS/RET/THROW
To: MACSYMA-I at MIT-MC
cc: JKF at MIT-MC

I'm suprised your THROW doesn't preserve CALLS/RET parity.  The easiest
way to unwind a hardware stack frame is with a RET instruction.  Just
go through and clobber the return PC's of all frames you want to flush,
except the last one, with the address of a RET instruction.  The last
one you point at whatever continuation address you want.  Then you execute
one RET instruction, and POOF!, you are at your continuation address.
This is the technique used both by NIL and by VMS's SYS$UNWIND routine.

Date: 28 Oct 1980 13:47:42-PST
From: CSVAX.jkf at Berkeley
To: macsyma-i@mit-mc
Subject: justification

In answer to KMP's mail:
  There are (at least) two reasons for such detailed analysis of program
operation.  One, I would like to know why Macsyma runs faster on the KL-10
than the Vax.  I know that the KL-10 is faster, but is it also true that
the KL-10 executes fewer instructions in a typical computation (like the
one I used)?  If it executes fewer than the Vax then is this due to a 
more clever compiler or is the 10 a better lisp machine?  We seem to spend
a lot of time stacking things (I believe that most of those movl's you
see are actually moving things onto the lisp local variable stack).
  Another reason (and in fact the reason I wrote a program to do such
analysis) is that we are designing a microprocessor which goes against the
current trend by having a small instruction set.  We want to know if real
programs use all of the instructions offered by machines such as the Vax.
We suspect that in an environment where most  of the machine
language programming is done by a compiler (such as on our system), 
there will be a small subset of instructions which are heavily used.


As for why there was one more CALLS than RET,
  I am surprised that the numbers are so close. If you do a THROW then 
for all the functions you throw through, there will be one more CALLS than
RET.   Also,  the last thing that Vaxima did was type (C2) and wait for
input.  Then I stopped it in the middle of the read and asked 
for the statistics, so it had at least one unreturned CALLS.  The reason
that there are more JSB's than RSB's is that JSB is used to store the
return address for CATCH's and  there is not subsequent RSB as that would
remove what we just put on.

Date: 28 October 1980 16:46-EDT
From: John L. Kulp <JLK at MIT-MC>
Subject:  Vax timing statistics
To: MACSYMA-I at MIT-MC

These numbers should be weighted by execution time to be really meaningful.
Such statistics can be useful to hardware designers and compiler writers,
but one must be fairly careful using them (the classic issue of average
speed vs transient response for instance).

Date: 28 October 1980 16:17-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Vax timing statistics
To: CSVAX.jkf at BERKELEY
cc: MACSYMA-I at MIT-MC

I'm not familiar with the usefulness of such statistics. I have no idea whether
anyone here has such, but I'd be interested in understanding the potential
applications of such data. My inclination is to guess that it might be useful
to know a particular routine executed a certain instruction with given 
frequency, but over so broad an area it seems worthless at first glance. 
I'd have no idea how to generalize from such vague data. Any light you can
shed on this area would be appreciated by me at least ...

Date: 28 Oct 1980 12:06:19-PST
From: CSVAX.jkf at Berkeley
To: macsyma-i@mit-mc
Subject: vax timings

 Following is a list of the instructions executed on the Vax to read,parse,
evaluate and display   diff(x^2,x);
 Do you have any statistics on the KL-10's behavior or could such statistics
be generated?

Opcode frequency (39575 instructions executed)
--------------
(d0) movl   :   10956 (27.68%) 
(d1) cmpl   :    3653 (9.23%) 
(12) bneq   :    3210 (8.11%) 
(13) beql   :    2523 (6.38%) 
(98) cvtbl  :    1587 (4.01%) 
(78) ashl   :    1570 (3.97%) 
(9e) movab  :    1526 (3.86%) 
(d5) tstl   :    1371 (3.46%) 
(fb) calls  :    1257 (3.18%) 
(04) ret    :    1256 (3.17%) 
(d4) clrl   :    1245 (3.15%)
(11) brb    :    1145 (2.89%) 
(dd) pushl  :    1106 (2.79%) 
(c2) subl2  :     953 (2.41%) 
(c3) subl3  :     690 (1.74%) 
(c6) divl2  :     525 (1.33%) 
(91) cmpb   :     461 (1.16%) 
(19) blss   :     458 (1.16%) 
(16) jsb    :     410 (1.04%) 
(05) rsb    :     403 (1.02%) 
(15) bleq   :     394 (1.00%) 
(d6) incl   :     373 (0.94%) 
(cf) casel  :     305 (0.77%) 
(31) brw    :     298 (0.75%) 
(18) bgeq   :     272 (0.69%) 
(95) tstb   :     258 (0.65%) 
(de) moval  :     165 (0.42%) 
(b3) bitw   :     164 (0.41%) 
(c0) addl2  :     148 (0.37%) 
(c1) addl3  :     114 (0.29%) 
(f6) cvtlb  :      89 (0.22%) 
(7c) clrq   :      79 (0.20%) 
(90) movb   :      68 (0.17%) 
(df) pushal :      61 (0.15%) 
(d7) decl   :      45 (0.11%) 
(ef) extzv  :      42 (0.11%) 
(94) clrb   :      41 (0.10%) 
(14) bgtr   :      39 (0.10%) 
(7d) movq   :      37 (0.09%) 
(ce) mnegl  :      32 (0.08%) 
(e0) bbs    :      23 (0.06%) 
(9a) movzbl :      18 (0.05%) 
(ca) bicl2  :      18 (0.05%) 
(e1) bbc    :      18 (0.05%) 
(17) jmp    :      17 (0.04%) 
(ee) extv   :      15 (0.04%) 
(7a) emul   :      15 (0.04%) 
(bc) chmk   :      11 (0.03%) 
(d3) bitl   :      11 (0.03%) 
(2f) movtuc :       9 (0.02%) 
(dc) movpsl :       9 (0.02%) 
(30) bsbw   :       9 (0.02%) 
(32) cvtwl  :       8 (0.02%) 
(c4) mull2  :       7 (0.02%) 
(3c) movzwl :       6 (0.02%) 
(93) bitb   :       6 (0.02%) 
(f4) sobgeq :       4 (0.01%) 
(1e) bgequ  :       4 (0.01%)
(c7) divl3  :       4 (0.01%) 
(c5) mull3  :       3 (0.01%) 
(9f) pushab :       3 (0.01%) 
(3b) skpc   :       3 (0.01%) 
(38) editpc :       3 (0.01%) 
(28) movc3  :       3 (0.01%) 
(bb) pushr  :       3 (0.01%) 
(f9) cvtlp  :       3 (0.01%) 
(8f) caseb  :       3 (0.01%) 
(1f) blssu  :       3 (0.01%)
(e8) blbs   :       2 (0.01%) 
(8e) mnegb  :       1 (0.00%) 
(c8) bisl2  :       1 (0.00%) 
(e2) bbss   :       1 (0.00%) 
(cc) xorl2  :       1 (0.00%) 
(e9) blbc   :       1 (0.00%) 

Date: 28 October 1980 14:28-EDT
From: John L. Kulp <JLK at MIT-MC>
To: BUG-LMMAX at MIT-MC
cc: MACSYMA-I at MIT-MC

ZGCD bombs in a call to SSTATUS RANDOM which does not exist on the Lispm.
Thus none of the rational simplifiers work at all.

integrate(1/(x^3+a^3),x) bombs because someone doesn't know how to
write machine independent macros.

These things used to work on the Lisp machine, so I assume people
hacking on the PDP-10 version have broken this code.

This brings up a bigger problem.  Either people are going to have
to be responsible to make sure their changes work on all machines
that Macsyma runs on, or there are going to have to be completely
separate versions for each type of machine.  I have heard people
say that it is too much trouble to test their changes on different
machines.  If this is going to be the policy, then we should
separate the sources, so that every time a new Macsyma is loaded
on the LISP machine it is not completely broken.  (Actually, being
careful not to install a qfasl file which is untested is probably
adequate  -- thus we need an extra directory for experimental
qfasl files.  This solution makes it very hard to make patches,
since the source files may be so munged that it is impossible
to make incremental changes, but hopefully that will be the
exception rather than the rule.)

Date: 27 October 1980 16:22-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: MAXDOC;FILES and MAXTUL;GENDOC
To: MACSYMA-I at MIT-MC

If you get a strange error
"unknown slot to contructor macro"
while using GENDOC and especially after making a change to FILES
then the error is probably that an unknown option to
DEFMFILE was used. Its usualy easy from the rest of
the error message to tell where the error is in the file.

-gjc

Date: 27 October 1980 15:21-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: MFORMAT
To: MACSYMA-I at MIT-MC

For special purposes there will be MFORMAT-OPEN and MTELL-OPEN,
which will attempt to open-compile into PRINC's, TERPRI's, and PRINT's.
If a call cannot open-compile then it will call the runtime
interpreter, and a warning message will be printed at compile
time.


Date: 27 October 1980 14:37-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: MERROR usage
To: MACSYMA-I at MIT-MC

The following is a subjective note having to do with MERROR usage, and 
should be treated as such, but I wanted to mention certain issues.
Let's say that you want to generate an error message for 'LIMIT(EXPR,1,A); , 
something like: "Improper second argument to 'LIMIT".  (Obviously 1 is 
not a good limit variable.)

Previously, one usually did something like:
(IF (MNUMP VAR)
    (PROG2 (DISPLA VAR) (ERLIST '|Improper second argument to 'LIMIT|))) .
A recommended way of doing this now is:
(IF (MNUMP VAR) (MERROR "Improper second argument to 'LIMIT:~%~M" VAR)) .

The printout you then get is:
Improper second argument to 'LIMIT:
1

Some issues are:
[1] One probably wants to print out the error message before the errant 
expression.  For one thing, the user can then abort if he wants to any time 
during the display of the expression, as the error message is what is really 
crucial.
[2] (MERROR "Improper second argument to 'LIMIT ~M" VAR)  looks gross:
Improper second argument to 'LIMIT 1
You at least probably want the ":", and in cases where the displayed 
expression may be large, generating a new-line with "~%" is probably a 
good idea.  The display package can generate non-optimal results when 
you don't tell it to begin displaying at a new-line, although there 
may be cases where not beginning at a new-line is desired.

Date: 27 October 1980 07:37-EDT
From: Robert W. Kerns <RWK at MIT-MC>
Subject: Out of core strings, and the use of MTELL
To: MACSYMA-I at MIT-MC

MTELL now will not create out-of-core strings.  It was used in a number of
places where you would not want to go out-of-core for a string, like the
left-paren of "(C259)".  To get out-of-core strings, use MFORMAT.
out-of-core strings should not be used for frequently printed items.

Date: 26 October 1980 12:53-EDT
From: Lars S. Hornfeldt <LSH at MIT-MC>
Subject: Implicit DO-LOOPS
To: MACSYMA-I at MIT-MC

Standard DO-LOOPS are REPEATEDLY needed when dealing with eg.  arrays.
Couldn't those be AUTOMATICALLY added in KMP's sceme always and not
only at assignments? So some symbols like *1 *2.. would be SACRED and
cause ANY C-LINE containing a *N, to parse as normal, except with a
DO-LOOP added AROUND IT.

Eg:

(C7)  DISPLAY(M[*1,*2]);		would parse into:

	FOR *1C7 FROM *1L TO *1U DO	[default bou-values=0,dimension]
	(FOR *2C7 FROM....DO
	 (DISPLAY(M[*1C7,*2C7])));	- and display all components.

In this way, one could play with operations on the WHOLE array/tensor,
with the same freedom and flexibility as now on a SINGLE component.

Or by adding restrictions, work on SUBSETs of all elements:
- a computation:

	IF *1<*2 THEN M[*1,*2]:M[*2,*1]:RAT(V[*1]*V[*2]);

- display of arrays that have SYMMETRIES:

IF *1<*2 THEN DISPLAY(M[*1,*2]);  displays only components above the diagonal.

KMP suggests this being checked by DISPLAY and assign, and that would
probably be enough.

Date: 26 October 1980 11:02-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject:  New out-of-core scheme installed
To: RWK at MIT-MC
cc: MACSYMA-I at MIT-MC, GSB at MIT-MC

(8) MFORMAT scans its string argument at compile-time too, just to make
    sure there aren't any typo's which would cause it to fail. It is
    not fun to have an error while printing out an error message.
    

Date: 26 October 1980 06:06-EDT
From: Robert W. Kerns <RWK at MIT-MC>
Subject: New out-of-core scheme installed
To: MACSYMA-I at MIT-MC

Now fully installed is the new, improved, MACSYMA out-of-core message-string
scheme.

Further documentation will be forthcoming, however, here are the highlights:
1)  When you compile a file, your MERROR and MFORMAT strings are invisibly
    replaced with a SQUID that creates a (filename . message-index) pair at
    load time.

2)  The message-index indexes into a table of FILEPOS's of strings in the
    file.  At the end of a compilation, the strings are placed in the string
    file, (placed on MAXERR; or MAXER1; with the same filenames as the source
    file).

3)  At MACSYMA-creation time, in-core files have their string files merged,
    and a load-time hack points incore-file's out-of-core strings at this
    file instead of the individual MAXERR file.  This file lives in
    MAXDMP;INCORE nnn

4)  When MERROR or MFORMAT encounter one of these out-of-core strings,
    the string is looked up from the file.

5)  The run-time code for this is 110. words.  Very little load-time work is
    done.

6)  It is possible for the MAXERR; and MAXER1; directories to get full.
    There are software tools being developed to aid in reaping these.

7)  Comments to RWK and GJC

Date: 26 October 1980 04:52-EDT
From: George J. Carrette <GJC at MIT-MC>
To: MACSYMA-I at MIT-MC

:MAXDOC;DOCGEN
can also generate MAXDOC;CODEL >

Date: 26 October 1980 03:10-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC


? is not free as Lars said.  I think * would therefore be a better choice.

Date: 26 October 1980 02:59-EDT
From: Lars S. Hornfeldt <LSH at MIT-MC>
Subject: Wildcards in array assignment
To: MACSYMA-I at MIT-MC, KMP at MIT-MC

1) It would be useful, for initializing sparse arrays of any ranks. The
   metric tensor has often a column and row empty but for a single entry,
   which can be inserted after initiating the col/row to zero.

2) Since the character "*" already means "TIMES", it would be
   difficult to have THAT as wildcard in an EXPRESSION though, say
   reversing a vector V[*]:W[4-*] (4dim).  "?" is free and has
   traditional use as matching anything: Eg in some editors and in
   TOPS, which uses it in filespec.

   That would allow eg.  V[?]:MAT[?,2*?] .  For higher ranks ?1 ?2 ...

Date: 26 October 1980 01:50-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: MACSYMA-I at MIT-MC

As LSH points out, A[*1,*2]:B[*2,*1] could work too ... Of course, all of
this gets odd problems with things like

	A[*,*]:B[*]

or with 

	A[*1,*2]:(....B[*2]:C[*1,*2]...) 

which is actually ambiguous ... should the second *2 be like (LAMBDA (*2) ..)
or not? ... I dunno. Anyway, it's something to think about ...

-kmp

Date: 26 October 1980 01:27-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: MACSYMA-I at MIT-MC

Actually, A[...] could even look specially for the "*"'s. It is already
doing special at that point so would be little extra overhead and wouldn't
really hurt the elegance of what's going on ...

Date: 26 October 1980 01:26-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: Matrix/Array columns/rows ...
To: MACSYMA-I at MIT-MC

Forget where this came up -- maybe conversation with BMT? -- but we have
not SETCOL or SETROW commands. Since there is an ADDCOL and ADDROW, maybe
that would be nice. Other languages allow "*" conventions in array specs.
eg, A[3,*]:5; etc. ... I could make that parse, but it might change how some
other parse error messages come out ... eg, X+*5 would say "5" is not an
infix operator rather than saying that "*" isn't a prefix operator. It might
also painful to handle the "*" from the point of view of interpreter and
compiler support ... but maybe not, too ... anyone have any feelings on
this? What about A[*,*]:0 to init a matrix. What might A[*]:= ... mean?
Would that be confusing and/or an error ... 

Date: 26 October 1980 01:09-EDT
From: George J. Carrette <GJC at MIT-MC>
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

The present TAGS file was generated by
:LISP MAXDOC;DOCGEN (INIT)
it lists all the files that are known in MAXDOC;FILES >
which is a more structured version of ALJABR;FILES >
(which is now obsolete). IN-CORE files are listed first.

-gjc

Date: 25 October 1980 17:19-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: suggestion for system conditionalizing code.
To: MACSYMA-I at MIT-MC

If the method of making once system look like another
through macro's doesn't cleanly apply in a certain case
then use of #P may be good.

(COND (#P(LISPM-P)
        .....)
      (#P(MACLISP-P)
        .....))

where #P(EXP) can be defined to read in as
(MACRO-EXPANSION-TIME-PARAMETER EXP) which would evaluate EXP
at macro expansion time. (N.B. not at read time).

I'm assuming all systems will have compilers which
can delete unreachable code.

-gjc

Date: 24 Oct 1980 18:09:18-PDT
From: CSVAX.drb at Berkeley
To: macsyma-i@mit-mc, CSVAX.vaxima-i@Berkeley

I should add a word of explanation about demo-ing the mode package.  First,
occasionally circular things may get printed so I would set prinlevel to 3
or so.  Next, try these:

{< 2 3}
{> 2 3}
(progn (d= Vec (Vector 3 Integer)) (decl (Vec v v1 v2)))
(_ v {empty Vec} v1 {/0 Vec} v2 {/1 Vec})
{+ v2 v2}
{* v1 v2}
{fill v 3}
{* v {+ v v}}
(progn (d= Mat (Vector 2 Vec)) (decl (Mat m m1 m2)))
(_ m {empty Mat} m1 {/0 Mat} m2 {/1 Mat})
{+ m2 m2}
{dot m2 m2}
{fill m v}
{dot m {+ m m}}

(eval fu) will count the number of cosets of Z5 in A5, namely 12.

Date: 24 Oct 1980 17:50:00-PDT
From: CSVAX.drb at Berkeley
To: macsyma-i@mit-mc, CSVAX.vaxima-i@Berkeley

Now that RWK has totally removed MCMODE, I would like to announce that my
new mode package is working.  It is based on ideas from MIT, Berkeley,
and IBM, is notably lacking in nice user features, and probably won't
get many soon, but it is about 45 pages of mode (macro) package and 15
pages of running (debugged) code, which can currently be used to count
finite groups (it discovered the index of Z5 in A5 is 12, for instance).
I hope to bring up the stuff I did at IBM this last summer, so that we
should have (univariate at least) polynomial factoring by the end of
XMAS vacation, including Hensel, various GCD's, Resultants, etc.  I will
mail copies of my files to MIT, and will keep back-ups of the most recently
mailed versions here, so that I can later mail DIFFerences between current
and old mailed versions.  The files I will mail to RZ@MIT-MC now are:

~drb/modes:  dom.l tformx.l call.l moddef.l run.l base.l
~drb/algebra:  cats.l types.l ncoset.l

I guess I would encourage you at MIT to try to bring up these files.  I
have tried to use MACLISP style, and would be willing to answer questions.
(It should only take a day or two to bring up.)

Date: 24 October 1980 15:33-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: for-macroexpansion
To: MACSYMA-I at MIT-MC

For the users of structure accessing macros there
is now help for debugging compiled code on MC!
Take your
(eval-when (compile eval)
           (defstruct foobar baz bomb)
           (defun print-foobar ...))
and change it into

(for-macroexpansion 
 (defstruct  ...) (defun ...))

When the source file in question is compiled
the forms are diverted to the file with second
file name MACROS. So you can load that file
when you debug.


-gjc

Date: 24 October 1980 15:03-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: KMP at MIT-MC
cc: MACSYMA-I at MIT-MC

REMPROPCHK is DEFMFUNed!  Things don't take effect until these files 
are compiled.

Date: 24 October 1980 14:55-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  REMPROPCHK
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

This should be DEFMFUN'd. ALJABR;DCL doesn't seem to know about it.
-kmp

Date: 24 October 1980 12:43-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  macsyma error system.
To: GJC at MIT-MC
cc: BMT at MIT-MC, MACSYMA-I at MIT-MC

Probably the error-system could be heirarchical in nature. Eg,

	(MERROR-CATCH ((ARITHMETIC-EXCEPTION ...) ...) ...)

which would catch DIVISION-BY-ZERO, ARITHMETIC-UNDERFLOW, ARITHMETIC-OVERFLOW,
etc. These could be declared in classes ... eg, 

  (DEF-MERROR-CLASSES
    (ALL				       ; All errors
       (MACSYMA-ERROR			       ;  Macsyma-signalled errors
					       ;    (user code errors)
	  (MATHEMATICAL-IMPOSSIBILITY	       ;   Invalid requests
	     (DIVERGENT-INTEGRAL)	       ;    Divergent integral
	     ...)			       ;    ...
	  (MACSYMA-EVALUATION-ERROR	       ;   Evaluator-signalled errors
	     (M-WRONG-TYPE-ARGUMENT)	       ;    Wrong type arg
	     ...)			       ;    ...
	  ...)
       (LISP-ERRORS			       ; Lisp signalled errors
					       ;   (system code errors)
	  (L-IO-LOSSAGE			       ;   IO Lossage
	     (FILE-NOT-FOUND)		       ;     File not found   
	     (READ-EOF)			       ;     Failing read on file
	     ...)			       ;
	  (L-WRONG-TYPE-ARGUMENT)	       ;   Wrong type arg
	  (L-WRONG-NUMBER-OF-ARGUMENTS)	       ;   Wrong number of args
	  ...)))
		       
[please excuse the random choices -- this would have to be a more complete set,
 I'm just pointing out the structure ...]

Note that L-WRONG-NUMBER-OF-ARGUMENTS and M-WRONG-NUMBER-OF-ARGUMENTS exists.
Maybe pathnames would make this easier so we wouldn't need to worry about
name conflicts. Eg, 

	LISP_WRONG-NUMBER-OF-ARGUMENTS

The names could be put in a single table. I would prefer to see this table
declared in a single place rather than having each call to MERROR be able
to add to some database at will ... that will reduce the problem of typos,
which will be critical if you really want to catch a whole class of errors.
It will also make it clear to someone who is debugging exactly what class
of things he may really be catching if he says he wants to catch all things
in a certain group. 

Can anyone comment on the conceptual content here -- ie, is this kind of 
layering likely to be useful? I should think it would. I can suggest some
reasonably efficient ways of handling this if it's something people want to
try ... -kmp

Date: 24 October 1980 07:31-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: MACSYMA error system
To: GJC at MIT-MC
cc: MACSYMA-I at MIT-MC

Now there is need to catch either or both of "general simplification" 
errors and "rational function package" errors as units without breaking 
them down finer to division by 0 or log(0) or 0^0 or whatever.  LIMIT 
couldn't care less which one is the error, but only in the class of 
errors.  Right now this is accomplished with (perish the names) the
ERRORSW scheme for gen. simp. errors and the ERRRJFFLAG scheme for ratfun 
errors.  Maybe some people, e.g. BMT, also has need to catch individual 
errors like "Division by 0".  So the scheme would need to be a dual one 
in the sense I mention.

Date: 23 October 1980 19:25-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: macsyma error system.
To: BMT at MIT-MC
cc: MACSYMA-I at MIT-MC

In order to signal and catch standard kinds of errors
we could introduce optional keywords before the control-string
in an error message. e.g.
(MERROR ZERO-DIV "In function FOO ~:M//0: X)

(MERROR-CATCH ((ZERO-DIV .... code ...)
               (FOO-BAR .... code...))
	...code...)

The implementation details look somewhat like
(*CATCH '(#.SQUID (MUNG)) ...) but you don't want to know
about that. 

The real problem is to come up with a useful set of condition
names to signal. Let me know what you had in mind and it will
get implemented.

-gjc

Date: 23 October 1980 15:31-EDT
From: George J. Carrette <GJC at MIT-MC>
To: BMT at MIT-MC
cc: MACSYMA-I at MIT-MC

MERROR will do a FRESH-LINE operation before 
MFORMATing the string, and a FRESH-LINE afterwards.
So for single line error messages with no arguments
there is no need to put any ~& or ~% in.

Date: 23 October 1980 15:19-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: error messages 
To: MACSYMA-I at MIT-MC

For printing out the error message "YOU HAVE RUN OUT OF CORE"
one should say (MERROR (PROGN "YOU HAVE RUN OUT OF CORE."))
So that the error message string does not have to be
read-in, (which would be impossible with no core left!).


Date: 23 October 1980 06:28-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: more format suggestions.
To: MACSYMA-I at MIT-MC

(PRINC (STRIPDOLLAR X)) can be replaced by the ~:M op.
Probably there should be no calls to STRIPDOLLAR in all
of macsyma outside of SUPRV.

Date: 23 October 1980 05:59-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: changes to macysma LOADER
To: JPG at MIT-MC
cc: MACSYMA-I at MIT-MC

Something like this may be applicable to Multics as well,
in order to share documentation strings between processes (or so
I'm told by CWH).

(setq DUMPING T)
(setq MASTER-MESFILE (OPEN `((MAXDMP) MESS ,VERSION) 'OUT))
...fasload....purcopy...munge...
(setq DUMPING NIL)
(close MASTER-MESFILE)
...hack...suspend...

-gjc

Date: 23 October 1980 05:05-EDT
From: George J. Carrette <GJC at MIT-MC>
Subject: new error message system
To: MACSYMA-I at MIT-MC

A new error message system, with features for compact,
out of core, or multi-user shared pure string files,
has been installed. This will begin taking effect as
files are compiled under the new MFORMAT and MERROR macros,
and should be transparent. 

Summary of new FORMAT.
~A and ~S are supported, however, if you want something
printed as a macsyma object (even if it is an number), it
is better (more efficient too), to use ~M.
~:M means (MAPC 'TYO (MSTRING ARG))
~M  means (DISPLA ARG)
The "@" flag is useful for printing things which are in operator
position. e.g.

(MERROR "Bad arg to ~@M" 'MTIMES)   => Bad arg to *
(MERROR "Bad arg to ~@:M" 'MTIMES)  => Bad arg to "*"

~~ is supported.
~<CR> is supported to eat the <CR-LF> and all white space.
~% is supported, although because of the way DISPLA works it
is not needed for single "line" output, e.g. "Arg ~M was a ~M".

Sumarray of out of core strings.

The only user concern is that for so-called out-of-core files there
is a choice of having the strings stored in an an in-core SFA
or in a user-file. If the variable USER_MESFILE is set to
a filename, then that file will be used. It should be a unique
file for each macsyma job. There is no ITS provision for
creating a file unique to a process and making sure it is
deleted after the process is killed, (that I know of), so
for the time being this cannot be made transparent.

Please report any bugs found. One bug now is that MFORMAT strings
are not checked for syntax error at compile-time, however
a compile-time check will be put in soon.

-gjc

p.s. MERROR is in MAXSRC;MERROR >
and is open for suggestions.

Date: 22 October 1980 13:11-EDT
From: Robert W. Kerns <RWK at MIT-MC>
Subject: New file, etc.
To: MACSYMA-I at MIT-MC

Since APROPOS used the modes package (which I had forgotten) I abstracted out
the structure-defining stuff from SOLVE and put it into LIBMAX;STRMAC >.
SOLVE and APROPOS have been updated to load this file.  ALJABR;FILES >
has been updated.  Can somebody do whatever other updating needs be done?

Is there any reason now that APROPOS won't win in FRANZ?

I believe MCMODE is now completely obsolete.

Date: 21 October 1980 21:07-EDT
From: George J. Carrette <GJC at MIT-MC>
To: MACSYMA-I at MIT-MC

For the next couple minutes macsyma compilations may
bomb out as I test the new error message system
on myself and whatever poor souls are compiling now.

Date: 21 October 1980 16:44-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Abstraction for Macsyma DO
To: MACSYMA-I at MIT-MC

I have put the following macros (similar functions used to live in GRAM)
into LIBMAX;MOPERS > ...

    MAKE-MDO [no args] Makes an empty MDO form. eg,
		       ((MDO) NIL NIL  NIL  NIL  NIL  NIL    NIL)
			 op   for from step next thru unless body

    MDO-OP, MDO-FOR, MDO-FROM, MDO-STEP, MDO-NEXT, MDO-THRU, MDO-UNLESS,
    and MDO-BODY are extractors which accept a single argument of a form
    which is known to be in MDO format (no error-checking).

The MDO-OP is not as useless as it might seem. The Macsyma MDOIN routine
(eg, "FOR X IN [A,B,C] DO PRINT(X)" will parse into an MDOIN, so MDO-OP
is used by the parser to tell if it's parsing an MDO or MDOIN.

These routines can probably be used by the translator, perhaps other
packages as well.

MOPERS is recompiled. GRAM was compiled and tested on DO-parsing and it
doesn't look like I introduced any bugs into it by this change.

-kmp

Date: 21 October 1980 04:17-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: JKF at MIT-MC
cc: MACSYMA-I at MIT-MC

   JKF@MIT-MC 10/20/80 21:18:36 Re: bug in common-symbols
   To: MACSYMA-I at MIT-MC
   Would anyone mind if common-symbols was fixed so that it only called
   markp on symbols?
I changed MARKP instead in MC:MRG;DB > .  This seems like the better 
place for the fix.

Date: 20 October 1980 21:18-EDT
From: John K. Foderaro <JKF at MIT-MC>
Subject: bug in common-symbols
To: MACSYMA-I at MIT-MC

  Would anyone mind if common-symbols was fixed so that it only called
markp on symbols?  As it is , markp can be called on a list and Franz
complains if this list does not hav an old number of elements (i.e is
not a proper disembodied property list).  There is of course the
possibility of common-symbols returning a non nil value if the second
argument passed to it is a list containing the symbol MARK.

Date: 20 October 1980 11:50-EDT
From: George J. Carrette <GJC at MIT-MC>
To: CWH at MIT-MC
cc: MACSYMA-I at MIT-MC

The definition of ASSOL should be in someplace other
than the macsyma parser. (Maybe near the definition of ALIKE ?)

Date: 20 October 1980 09:20-EDT
From: Lars S. Hornfeldt <LSH at MIT-MC>
Subject: All USAGE and DEMO's on SHARE2; combined
To: MACSYMA-I at MIT-MC, ADK at MIT-MC, ASB at MIT-MC, RP at MIT-MC,
    RJR at MIT-MC

I've combined the SHARE2;* USAGE files, and made writefiles of the
SHARE2;* DEMO 's and collected them all in lexicographical order in
LARS;SHARE2 DEMOUT.  The file starts with a listing of the dir.

   The writefiles all have SHOWTIME true, but times <100 are removed,
and further compression has been done (with a teco progr.)  in order
to get nicer hardcopies.

Keeping it a couple of days in case anyone else wants it on paper.

Date: 18 October 1980 22:35-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: MACSYMA-I at MIT-MC

    Date: 18 OCT 1980 0937-EDT
    From: JPG at MIT-MC (Jeffrey P. Golden)
    Carl, if we could move LIBMAX;OPERS to MAXSRC;OPERS, this rule about files 
    on the LIBMAX; directory could be true for all files there.

Done.  I believe all the appropriate tables have been updated.

Date: 18 October 1980 09:37-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: CWH at MIT-MC
cc: MACSYMA-I at MIT-MC

   CWH@MIT-MC 10/16/80 21:06:09
   To: MACSYMA-I at MIT-MC
   Note that macro files should be compiled with :CL, and not :MCL, as :MCL
   places them on the MACSYM directory.  :MCL should be fixed to check if the
   file is coming from the LIBMAX directory to leave the fasl file there.
Carl, if we could move LIBMAX;OPERS to MAXSRC;OPERS, this rule about files 
on the LIBMAX; directory could be true for all files there.

Date: 16 October 1980 21:06-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
To: MACSYMA-I at MIT-MC

If you make any changes to the Macsyma macro packages, please be sure to
leave a fasl file lying in the appropriate place.  Somebody recently
modified MAXMAC, deleted the existing fasl file, and didn't replace it with
a new one.  This means that the interpreted version of the macro file will
get loaded when running interpreted code.

Note that macro files should be compiled with :CL, and not :MCL, as :MCL
places them on the MACSYM directory.  :MCL should be fixed to check if the
file is coming from the LIBMAX directory to leave the fasl file there.

Date: 14 October 1980 14:30-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
Subject: MACSYMA tree-walking
To: MACSYMA-I at MIT-MC

I changed RECUR-APPLY so that it handles the SPECREPP/SPECDISREP stuff 
too.  (SPECREPP is currently MRATs and MPOISs [Poisson stuff].)
So, the following is the current def. of $LOGARC:  (I'll use it as an 
example instead of $EXPONENTIALIZE as I've compiled LOGARC.)
(defmfun $logarc (exp)
	 (cond ((atom exp) exp)
	       ((arcp (caar exp)) (logarc (caar exp) ($logarc (cadr exp))))
	       ((eq (caar exp) '$atan2)
		(logarc '%atan ($logarc (div (cadr exp) (caddr exp)))))
	       (t (recur-apply #'$logarc exp))))
We'll probably be adding a RECUR-APPLY property of some sort to handle 
other representations such as GJC's SETS "bag" (of expressions)-like 
representation where you don't want to disrep.

Date: 14 October 1980 13:27-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: MACSYMA-I at MIT-MC

For those interested in MACSYMA tree-walking, this is the current definition 
of $EXPONENTIALIZE:
(DEFMFUN $EXPONENTIALIZE (EXP)
 (LET ($DEMOIVRE)
      (COND ((ATOM EXP) EXP)
	    ((TRIGP (CAAR EXP))
	     (EXPONENTIALIZE (CAAR EXP) ($EXPONENTIALIZE (CADR EXP))))
	    ((SPECREPP EXP) ($EXPONENTIALIZE (SPECDISREP EXP)))
	    (T (RECUR-APPLY #'$EXPONENTIALIZE EXP)))))
I.e. it calls SPECREPP instead of $RATP or (EQ (CAAR EXP) 'MRAT), 
SPECDISREP instead of RATDISREP, and uses RECUR-APPLY instead of a 
cumbersome SUBST0 scheme.  GJC can probably hook something into 
RECUR-APPLY if he wishes.  This new scheme has not propagated everywhere 
yet, but it will.  You can look up the definitions of any new functions 
via the MACSYM TAGS file.

Date: 14 October 1980 03:20-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: KMP at MIT-MC
cc: MRG at MIT-MC, MACSYMA-I at MIT-MC

   KMP@MIT-MC 10/12/80 18:19:04 
      Re:  I can't believe the Macsyma parser does this...
   (DEFUN LED-$/( (OP LEFT) OP ;Ignored
     (LET ((R))
       (IF (NUMBERP (CDR LEFT)) (PARSE-ERR))
       (SETQ R (PRSMATCH '$/) '$ANY) LEFT (CDR LEFT))
       (CONS '$ANY
   	  (COND ((NOT (ATOM LEFT)) (CONS '(MQAPPLY) (CONS LEFT R)))
   		((AND (EQ '$DIFF LEFT) (CDR R) (NULL (CDDR R)))
   		 (CONS '($DIFF) R))
   		((= #/& (GETCHARN LEFT 1))
   		 (CONS (NCONS (DOLLARIFY-NAME LEFT)) R))
   		(T (CONS (LIST LEFT) R))))))
   What is this silly program doing? (AND (EQ '$DIFF LEFT) ...)??? Does someone
   really depend on the result of parsing two-argument DIFF's being EQ? ... or
   does someone really believe this sort of hair belongs in the parser to save 
   a few words of core? I don't understand why 1-arg DIFFs or 5-arg DIFFs 
   shouldn't get the same header... 
This doesn't make sense to me either, and I have flushed it from MRG;GRAM > .
It must be hysterical code, oops, I mean historical.  Actually, I think it 
dates back to the time when the parser NCONCed a 1 onto the end of 
DIFF(F(X),X); forms.  When this unfortunate practice was stopped, instead 
of deleting the faulty code, someone apparently changed the NCONC process 
into a CONS process.

Date: 14 October 1980 02:14-EDT
From: Jeffrey P. Golden <JPG at MIT-MC>
To: KMP at MIT-MC
cc: CWH at MIT-MC, WGD at MIT-MC, MRG at MIT-MC, MACSYMA-I at MIT-MC

   KMP@MIT-MC 10/13/80 22:24:25
   Does anyone know where or if PARSE-NOFIX is used or what it is for. If it's
   just there for contingencies, I suppose that's ok as it is quite small, but
   it doesn't show up in the Berkeley index as being used and I don't see it in
   any of the default NUD or LED properties in a Macsyma ... anyone know?
   I don't really know what a nofix operator means... 
PARSE-NOFIX is used to support NOFIX operators, and is called by GRAM's 
companion file which is MAXSRC;SYNEX.  DESCRIBE(NOFIX); describes what a 
NOFIX operator is.  The Berkeley index is not complete.  E.g. it does not 
include the SYNEX file and other files as well.

Date: 12 October 1980 18:19-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  I can't believe the Macsyma parser does this...
To: JPG at MIT-MC, MRG at MIT-MC
cc: MACSYMA-I at MIT-MC

(DEFUN LED-$/( (OP LEFT) OP ;Ignored
  (LET ((R))
    (IF (NUMBERP (CDR LEFT)) (PARSE-ERR))
    (SETQ R (PRSMATCH '$/) '$ANY) LEFT (CDR LEFT))
    (CONS '$ANY
	  (COND ((NOT (ATOM LEFT)) (CONS '(MQAPPLY) (CONS LEFT R)))
		((AND (EQ '$DIFF LEFT) (CDR R) (NULL (CDDR R)))
		 (CONS '($DIFF) R))
		((= #/& (GETCHARN LEFT 1))
		 (CONS (NCONS (DOLLARIFY-NAME LEFT)) R))
		(T (CONS (LIST LEFT) R))))))
--------
What is this silly program doing? (AND (EQ '$DIFF LEFT) ...)??? Does someone
really depend on the result of parsing two-argument DIFF's being EQ? ... or
does someone really believe this sort of hair belongs in the parser to save 
a few words of core? I don't understand why 1-arg DIFFs or 5-arg DIFFs 
shouldn't get the same header... 
-kmp

Date: 10 October 1980 14:01-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject: UCB's Index of Macsyma Usage
To: ELLEN at MIT-MC
cc: MACSYMA-I at MIT-MC

The file MAXDOC;UCBIDX 7 became MAXDOC;IDXUCB 7 in the MAXDOC; re-shuffling.
There is a link from INDEX UCB to that file for reading convenience.

Date: 10 October 1980 13:54-EDT
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  MAXDOC; has been hit by an interior decorator...
To: MACSYMA-I at MIT-MC

I got tired of not being able to understand what was on MAXDOC; -- people
(myself included) have thrown enough random doc onto that dir that it was
getting hard to find anything you wanted. I have sorted out the deadweight
("<" versions of files, etc) and disposed of it, and have done some major
renaming, the bulk of which is carefully documented in MAXDOC;-READ- -TOO-.
(Note that among other wierd changes I made, =READ= =ALSO= files became
-READ- -TOO-.) Roughly the changes look like this:

The file which used to be called MAXDOC;SHARPM DOC is now MAXDOC;INTRO SHARPM.
If you were looking for that file yesterday when you got my mail saying I'd
changed it, that's where it went to.

Files in MAXDOC; are clustered according to common topics. First filenames
of BUGS, CONFER, DOC, INTRO, LISP, LSPDOC, MACSYM, MAXDOC, MAIL, POLL, TAGS,
etc. should give you a good idea of the nature of the cluster. Check
the -READ- -TOO- file for specifics. Cross-links between various possible
names have been made for convenience. *Please* be sure if you edit one of
these files that you edit the actual filename and not the link filename or
we'll start to have two divergent sets of documentation when you clobber the
link writing the file back out.

Also, every Macsyma dir which has a -READ- -THIS- file should point to 
MAXDOC;-READ- -THIS-. Every Macsyma dir which wants its own personal
documentation should have a link from -READ- -TOO- to [DOC] > on the same
dir. (The reasons for this have to do with aesthetic issues of what gets
displayed in directory listings in what order, etc). The MAXDOC; dir has
pointers from _DIR <dirname> to <dirname>;-READ- -TOO- for people who want
to read directory documentation straight off of MAXDOC;. The "_DIR" forces
this stuff to the bottom of the directory display so that it's not seen
when you're looking for more useful stuff.

Please try to maintain some sense of the logical order I've tried to construct
here when you make mods to this dir. Remember that the object of a 
documentation directory is to be transparent to the people trying to use it.
So try to sort things accordingly -- and remember to update MAXDOC;[DOC] >
if you invent some new fn1 cluster to go into the dir. That way we'll all
know where it came from and what it's doing there.

-kmp

