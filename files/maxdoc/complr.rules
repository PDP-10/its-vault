

The motivation of these rules is to be able to compile
all source files of macsyma in the same compilation environment.
This means that one file should not leave the environment in
a state destructive to other files. There are two ways to do
this, [1] avoid doing anything inconsistent with the rest of
macsyma, [2] if something is inconsistent make sure that it
is local to the file by undoing it at the end of read-time.
[3] inconsistencies in effect only at compile time, undone after
compilation.

Satisfying [1] implies that the code will be easier to read, more meaningfull
under tags searches, general perusal, maintainable by other programmers
in the system.
Satifying [2] implies that the code may be run interpreted with other code,
an aid in debugging. this allows inconsistent read-time macro
expansions.

      What does this mean?

[1] don't mung the lisp reader, use standard syntax, readmacros.
don't re-define macros used in other files.
never define the same macro twice, even in your "own" files.
Do not declare special variables
that are not to be special through all of macsyma. Conform to special
variable naming conventions. e.g. do not use special variables
named "X", "Y", "VAR", or worse, "FOO". Use DEFMVAR to declare a variable
special. Try to avoid having the same variable intialized in more
than one file. Using DEFMVAR we avoid the need to put special declarations
for variables in more than one file. DEFMVAR has the effect of a global
special declaration throughout all of macsyma.

[2] by using sharp-sign-dot, << #. >>, one can set the syntax of readmacro
characters at the beggining of a file (it is best to do it there so it
is visible and obvious to anyone reading the file), and then un-do them
at the end of the file. Do not forget however that changes in the
syntax of the lisp reader must also be reflected in changes to
the TEXT-EDITOR. On the lisp machine this will go without saying, as
a full lisp read is done on the file being edited. But even then, crocks
such as syntax local within a file to a few pages, but not to others,
will most certainly fail. {read time evaluation must know if it is
being read as an edit-stream or a compilation stream or load stream.}

It should go without saying that if one finds himself desiring to
violate [1], especially to indulge in [2], then perhaps either the person does
not have sufficient command over, or even awareness of, the existing
functionalities of the language, or, he has a good idea of how to
extend the language in some way, and he should not deprive others of
the "oper"tunity of engaging in endless flaming about how to implement
these for all to use. {see democracy, and the tyrrany of the majority}.

[3] many old files have this action, variables declared special and
then unspecial.


--- Maclisp Crocks v.s. the Lisp machine package system. ---

well, what can I say, except that macsyma has to live in maclisp,
and there is no excuse for screwing ourselves to the wall, as
was done most ably in the past by certain macsyma system programmers
who shall remain nameless.

