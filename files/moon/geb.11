;  -*- Mode:Lisp; Package:User; Base:8; Lowercase:yes -*-
;More QTVHAX

;	"Nunc Pulchritas pro Saeculis"
;				--Ovid
;					and Devo

;This program assumes it is called on a full-screen window and always draws
;in the 1000x1000 box whose top-left corner is at (100,100).

;You probably want to do (si:sb-on nil) before starting this and
;(si:sb-on ':clock) afterwards, to eliminate spasticness in the
;display due to scheduling.

;Set up the screen
(defun hof ()
  (funcall standard-output ':draw-rectangle 1002 1002 77 77 tv:alu-andca)
  (funcall standard-output ':draw-lines tv:alu-ior 77 77 1101 77 1101 1101 77 1101 77 77)
  (multiple-value-bind (ignore y) (funcall terminal-io ':read-cursorpos)
    (cond ((< y 1102)
	   (funcall standard-output ':set-cursorpos 0 1102)
	   (funcall standard-output ':clear-eol)))))

;Simple linear motion of the endpoints
(defun godel (x1-rate y1-rate x2-rate y2-rate &optional (slowness 4000))
  (hof)
  (do ((x1 0 (logand 1777 (+ x1 x1-rate)))
       (y1 0 (logand 1777 (+ y1 y1-rate)))
       (x2 0 (logand 1777 (+ x2 x2-rate)))
       (y2 0 (logand 1777 (+ y2 y2-rate)))
       (first t nil))
      ((funcall standard-input ':tyi-no-hang))
    (cond ((and (not first)
		(memq x1 '(0 1000))		;Pause at repeat point
		(memq x2 '(0 1000))
		(memq y1 '(0 1000))
		(memq y2 '(0 1000)))
	   (funcall standard-input ':tyi)))
    (do i 1 (1+ i) (> i slowness))
    (funcall standard-output ':draw-line (+ 100 (abs (- x1 1000)))
					 (+ 100 (abs (- y1 1000)))
					 (+ 100 (abs (- x2 1000)))
					 (+ 100 (abs (- y2 1000)))
					 tv:alu-xor)))

;Same thing with 4-fold symmetry
(defun escher (x1-rate y1-rate x2-rate y2-rate &optional (slowness 4000))
  (hof)
  (do ((x1 0 (logand 1777 (+ x1 x1-rate)))
       (y1 0 (logand 1777 (+ y1 y1-rate)))
       (x2 0 (logand 1777 (+ x2 x2-rate)))
       (y2 0 (logand 1777 (+ y2 y2-rate)))
       (first t nil))
      ((funcall standard-input ':tyi-no-hang))
    (cond ((and (not first)
		(memq x1 '(0 1000))		;Pause at repeat point
		(memq x2 '(0 1000))
		(memq y1 '(0 1000))
		(memq y2 '(0 1000)))
	   (funcall standard-input ':tyi)))
    (do i 1 (1+ i) (> i slowness))
    (let ((x1 (abs (- x1 1000)))
	  (y1 (abs (- y1 1000)))
	  (x2 (abs (- x2 1000)))
	  (y2 (abs (- y2 1000)))
	  (s standard-output))
      (funcall s ':draw-line (+ 100 x1) (+ 100 y1) (+ 100 x2) (+ 100 y2) tv:alu-xor)
      (funcall s ':draw-line (- 1100 x1) (+ 100 y1) (- 1100 x2) (+ 100 y2) tv:alu-xor)
      (funcall s ':draw-line (+ 100 x1) (- 1100 y1) (+ 100 x2) (- 1100 y2) tv:alu-xor)
      (funcall s ':draw-line (- 1100 x1) (- 1100 y1) (- 1100 x2) (- 1100 y2) tv:alu-xor))))

;Hardly!
(defun bach (x1-rate y1-rate x2-rate y2-rate
	     &optional (tempo 60000.) (keyhigh 500.) (keylow 10.))
  (do ((x1 0 (logand 1777 (+ x1 x1-rate)))
       (y1 0 (logand 1777 (+ y1 y1-rate)))
       (x2 0 (logand 1777 (+ x2 x2-rate)))
       (y2 0 (logand 1777 (+ y2 y2-rate))))
      ((funcall standard-input ':tyi-no-hang))
    (let ((x1 (abs (- x1 1000)))
	  (y1 (abs (- y1 1000)))
	  (x2 (abs (- x2 1000)))
	  (y2 (abs (- y2 1000))))
      (sys:%beep (+ (* x1 keylow) keyhigh) tempo)
      (sys:%beep (+ (* (- 1000 x1) keylow) keyhigh) tempo)
      (sys:%beep (+ (* x2 keylow) keyhigh) tempo)
      (sys:%beep (+ (* (- 1000 x2) keylow) keyhigh) tempo)
      (sys:%beep (+ (* y1 keylow) keyhigh) tempo)
      (sys:%beep (+ (* (- 1000 y1) keylow) keyhigh) tempo)
      (sys:%beep (+ (* y2 keylow) keyhigh) tempo)
      (sys:%beep (+ (* (- 1000 y2) keylow) keyhigh) tempo))))

;This is godel but when both points are on corners, it's going to reverse
;so instead we arbitrarily increment all the coordinates by 1 to make it
;do something interestingly different.
(defun godel* (x1-rate y1-rate x2-rate y2-rate &optional (slowness 4000))
  (hof)
  (do ((x1 0 (logand 1777 (+ x1 x1-rate)))
       (y1 0 (logand 1777 (+ y1 y1-rate)))
       (x2 0 (logand 1777 (+ x2 x2-rate)))
       (y2 0 (logand 1777 (+ y2 y2-rate))))
      ((funcall standard-input ':tyi-no-hang))
    (do i 1 (1+ i) (> i slowness))
    (funcall standard-output ':draw-line (+ 100 (abs (- x1 1000)))
					 (+ 100 (abs (- y1 1000)))
					 (+ 100 (abs (- x2 1000)))
					 (+ 100 (abs (- y2 1000)))
					 tv:alu-xor)
    (cond ((and (memq x1 '(0 1000))
		(memq x2 '(0 1000))
		(memq y1 '(0 1000))
		(memq y2 '(0 1000)))
	   (setq x1 (1+ x1) x2 (1+ x2) y1 (1+ y1) y2 (1+ y2))))))

;This is the same as godel except that the rates can be flonums
(defun kupfer (x1-rate y1-rate x2-rate y2-rate &optional (slowness 4000))
  (setq x1-rate (small-float x1-rate)
	x2-rate (small-float x2-rate)
	y1-rate (small-float y1-rate)
	y2-rate (small-float y2-rate))
  (hof)
  (do ((xx1 0 (+ xx1 x1-rate))
       (yy1 0 (+ yy1 y1-rate))
       (xx2 0 (+ xx2 x2-rate))
       (yy2 0 (+ yy2 y2-rate))
       (first t nil)
       (x1)(y1)(x2)(y2))
      ((funcall standard-input ':tyi-no-hang))
    (and (>= xx1 2000) (setq xx1 (- xx1 2000)))
    (and (>= xx2 2000) (setq xx2 (- xx2 2000)))
    (and (>= yy1 2000) (setq yy1 (- yy1 2000)))
    (and (>= yy2 2000) (setq yy2 (- yy2 2000)))
    (setq x1 (fix xx1) x2 (fix xx2) y1 (fix yy1) y2 (fix yy2))
    (cond ((and (not first)
		(memq x1 '(0 1000))		;Pause at repeat point
		(memq x2 '(0 1000))
		(memq y1 '(0 1000))
		(memq y2 '(0 1000)))
	   (funcall standard-input ':tyi)))
    (do i 1 (1+ i) (> i slowness))
    (funcall standard-output ':draw-line (+ 100 (abs (- x1 1000)))
					 (+ 100 (abs (- y1 1000)))
					 (+ 100 (abs (- x2 1000)))
					 (+ 100 (abs (- y2 1000)))
					 tv:alu-xor)))

(defun kupfer-gold (x1-rate y1-rate x2-rate y2-rate &optional (key 600.) (tempo 40000.))
  (setq x1-rate (small-float x1-rate)
	x2-rate (small-float x2-rate)
	y1-rate (small-float y1-rate)
	y2-rate (small-float y2-rate))
  (hof)
  (do ((xx1 0 (+ xx1 x1-rate))
       (yy1 0 (+ yy1 y1-rate))
       (xx2 0 (+ xx2 x2-rate))
       (yy2 0 (+ yy2 y2-rate))
       (first t nil)
       (x1)(y1)(x2)(y2))
      ((funcall standard-input ':tyi-no-hang))
    (and (>= xx1 2000) (setq xx1 (- xx1 2000)))
    (and (>= xx2 2000) (setq xx2 (- xx2 2000)))
    (and (>= yy1 2000) (setq yy1 (- yy1 2000)))
    (and (>= yy2 2000) (setq yy2 (- yy2 2000)))
    (setq x1 (fix xx1) x2 (fix xx2) y1 (fix yy1) y2 (fix yy2))
    (cond ((and (not first)
		(memq x1 '(0 1000))		;Pause at repeat point
		(memq x2 '(0 1000))
		(memq y1 '(0 1000))
		(memq y2 '(0 1000)))
	   (funcall standard-input ':tyi)))
    (let ((angle (atan* (small-float (- (abs (- y2 1000)) (abs (- y1 1000))))
			(small-float (- (abs (- x2 1000)) (abs (- x1 1000)))))))
      (and (> angle 3.14) (setq angle (- 6.28 angle)))
      (sys:%beep (+ 500. (fix (* angle key))) tempo))
    (funcall standard-output ':draw-line (+ 100 (abs (- x1 1000)))
					 (+ 100 (abs (- y1 1000)))
					 (+ 100 (abs (- x2 1000)))
					 (+ 100 (abs (- y2 1000)))
					 tv:alu-xor)))

(defun atan* (y x)
  (if (and (zerop y) (zerop x)) 0 (atan y x)))

;Symmetric xoring of 2 triangles
(defun birds (x y) (hack-in-m-silent 1 1 2 2 x y y x))

(defun hack-in-m-silent (x1-rate y1-rate x2-rate y2-rate x3-rate y3-rate x4-rate y4-rate
				&optional (slowness 2000))
  (hof)
  (do ((x1 0 (logand 1777 (+ x1 x1-rate)))
       (y1 0 (logand 1777 (+ y1 y1-rate)))
       (x2 0 (logand 1777 (+ x2 x2-rate)))
       (y2 0 (logand 1777 (+ y2 y2-rate)))
       (x3 0 (logand 1777 (+ x3 x3-rate)))
       (y3 0 (logand 1777 (+ y3 y3-rate)))
       (x4 0 (logand 1777 (+ x4 x4-rate)))
       (y4 0 (logand 1777 (+ y4 y4-rate))))
      ((funcall standard-input ':tyi-no-hang))
    (do i 1 (1+ i) (> i slowness))
    (draw-tri (+ 100 (abs (- x1 1000)))
	      (+ 100 (abs (- y1 1000)))
	      (+ 100 (abs (- x2 1000)))
	      (+ 100 (abs (- y2 1000)))
	      (+ 100 (abs (- x3 1000)))
	      (+ 100 (abs (- y3 1000))))
    (draw-tri (+ 100 (abs (- x1 1000)))
	      (+ 100 (abs (- y1 1000)))
	      (+ 100 (abs (- x2 1000)))
	      (+ 100 (abs (- y2 1000)))
	      (+ 100 (abs (- x4 1000)))
	      (+ 100 (abs (- y4 1000))))))

(defun draw-tri (x1 y1 x2 y2 x3 y3)
  (funcall standard-output ':draw-triangle x1 y1 x2 y2 x3 y3 tv:alu-xor))
