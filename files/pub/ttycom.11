title TTYCOM A MONOLITH KIT
xall

;ac's, 0 used for flags

device_1
fn1_2
fn2_3
sname_4
break_5
t_break+1	;see fsixo
		;7 not used
char_10
		;11 not used
		;12 not used
		;13 not used
bc_14		;do not change, used in stktrn
		;15 not used
		;16 not used
p_17		;do not change, used in stktrn

external  trans,.ver1,.ver2,dofn2,difn2
internal indev,outdev

;assembly parameters

ttyich__0	;tty input channel
ttyoch__1	;tty output channel
in__2		;input channel
out__3		;output channel
errich__4	;error input channel
pdl__20		;push down length
cbufl__37	;command buffer length

;right half flags

devfl__1	;device seen
snfl__2		;sname seen
fn1fl__4	;file name 1 seen
fn2fl__10	;file name 2 seen
unrchf__20	;character in limbo

;impure storage

pdb:	block	pdl	;push down buffer
kill:	0		;flag to kill job after reading command files
udepth:	0		;# command files we have pushed
comcc:	0		;# characters in command buffer
comptr:	0		;current character in command buffer
cbuf:	block	cbufl	;command buffer
namptr:	440600,,t	;name bbyte pointer for command processor
limbo:	0		;temporary storage for characters
chsts:	block 10
cmddev:	'DSK'		;ascii unit input
cmdfn1:	'TTYCOM'
cmdfn2:	'CMDINP'
cmdsnm:	0		;command sname
indev:	6,,'DSK'	;image block input
infn1:	'TTYCOM'
infn2:	'INPUT '
insnm:	0
outdev:	7,,'DSK'	;image block output
outfn1:	'TTYCOM'
outfn2:	'OUTPUT'
outsnm:	0
nolit
go:	move p,[-pdl,,pdb]
	.open ttyich,[sixbit /   TTY/
		      sixbit /STKTRN/
		      sixbit /INPUT/]
	.value coptty
	.open ttyoch,[sixbit /  !TTY/
		      sixbit /STKTRN/
		      sixbit /OUTPUT/]
	.value coptty
	setzm kill
	setzm udepth
	.iopdl			;reset i/o push down list
	movei fn1,.ver1
	movei fn2,.ver2
	jumpe fn1,rego
	jumpe fn2,rego
	pushj p,title
	movei t,'DSK'
	movem t,cmddev
	move t,[6,,'DSK']
	movem t,indev
	move t,[7,,'DSK']
	movem t,outdev

rego:	setzb device,fn1
	setzb fn2,sname
	setzm			;clear flags
	skipg udepth
	pushj p,sout		;prompt
	skipg udepth
	pushj p,[	skipge kill
			jrst die
			jrst input]	;read command line from tty
	pushj p,getfil
	jrst [	cain break,14	;ignore form feeds
		jrst .-1
		cain break,12
		jrst rego	;ignore blank lines
		cain break,3
		jrst cmdeof
		caie break,""	;look for command file specification
		jrst inpcer
		jrst opncmd]
	caie break,"_"
	jrst [	movei fn2,0
		caie break,3
		cain break,12
		jrst [	pushj p,opnout
			jrst rego1]
		jrst inpcer]	;all others are illegal
	pushj p,opnout
	movei fn2,0		;zap the second file name
	pushj p,getfil
rego1:	move fn1,outdev+1	;if null input then default
	caie break,3
	cain break,12		;look for line feed
	jrst doit		;A-okay
	jrst inpcer		;something is not kosher

doit:	push p,break
	pushj p,opnin
	.suset [.rsnam,,insnm]
	movei fn2,0
	skipn outdev+1
	pushj p,opnout
	pushj p,crlf
	.open in,indev
	jrst opnerr
	move break,[xwd in,chsts]
	.rchst break,
	movei break,chsts
	pushj p,pntfnm
	pushj p,crlf
	pushj p,trans
	pop p,break
cmdeof:	.close in,
	.close out,
	caie break,3
	jrst rego
	sosge udepth
die:	.value [asciz /:KILL
/]
	.iopop ttyich,
	jrst rego
crlf:	.iot ttyoch,[15]
	.iot ttyoch,[12]
	popj p,

sout:	pushj p,crlf			;output prompt
	.iot ttyoch,["*"]
	popj p,

opnin:	skipn device			;open input file
	hrrzi device,'DSK'
	hrrm device,indev
	movem fn1,indev+1
	skipn fn2
	move fn2,difn2
	movem fn2,indev+2
	movem sname,indev+3
	jrst opnret

opnout:	skipn device			;open output file
	hrrzi device,'DSK'
	hrrm device,outdev
	movem fn1,outdev+1
	skipn fn2
	move fn2,dofn2
	movem fn2,outdev+2
	movem sname,outdev+3
opnret:	movei sname,0
	movei fn2,0
	popj p,

;here to open command file

opncmd:	pushj p,getfil
	jrst [	pushj p,nulcmd
		cain break,12
		jrst rego
		jrst cmdeof]
	caie break,3
	cain break,12
	caia
	jrst inpcer
	cain break,3
	jrst [	skipn udepth
		setom kill
		jrst .+1]
	caie device,0
	hrrm device,cmddev
	movem fn1,cmdfn1
	cain fn2,0
	move fn2,.ver1
	movem fn2,cmdfn2
	cain sname,0
	.suset [.ssnam,,sname]
	.iopush ttyich,
	aos udepth
	.open ttyich,cmddev
	skipa
	jrst rego
	.suset [.rsnam,,cmdsnm]
	skipa break,[cmddev]
opnerr:	movei break,indev
	pushj p,pntfnm
	.open errich,[	'err'
			1]
	.value
	.iot ttyoch,[40]
opncm1:	.iot errich,t
	caige t,40
	jrst [	pushj p,crlf
		jrst go]
	.iot ttyoch,t
	jrst opncm1

;here to print file name

pntfnm:	push p,break
	hrlz t,(break)
	pushj p,sixo
	.iot ttyoch,[":"]
	move t,(p)
	move t,3(t)
	pushj p,sixo
	.iot ttyoch,[";"]
	move t,(p)
	move t,1(t)
	pushj p,sixo
	.iot ttyoch,[40]
	move t,(p)
	move t,2(t)
	pushj p,sixo
	pop p,break
	popj p,

;various flavors of errors come here

	define error (a,b) <
a:	move break,[440700,,[asciz /b/]]
	jrst typer
>
	error nulcmd,<null command file spec>
	error opnin1,<file not found>
	error opnot1,<device not available>
	error inpcer,<command syntax error>

typer:	ildb t,break			;type message and try again
	cain t,0
	jrst rego
	.iot ttyoch,t
	jrst typer
;here to input a command line

input:	setzm comcc		;clear pointers
	move char,[010700,,cbuf-1]
	movem char,comptr

inp2:	.iot ttyich,char	;character
	cain char,177
	jrst rubout		;rubout
	idpb char,comptr	;to the command buffer
	cain char,12		;line feed
	jrst [	skipg comcc
		jrst rub1
		jrst inplf]
	caie char,3		;eof can end buffer too
	cain char,15		;carriage return
	jrst inpcr
	aos comcc		;bump count of characters
	jrst inp2		;more

;here on carriage return

inpcr:	skipg comcc		;test for characters on line
	jrst rub0		;nope
	aos comcc		;put in a line feed
	movei char,12
	idpb char,comptr
inplf:	aos comcc		;didn't count carriage, remember?
	move char,[010700,,cbuf-1]
	movem char,comptr	;pointer to line
	popj p,

;here for rubout

rubout:	sosge comcc		;decrement count
	jrst rub1		;no characters left on line
	ldb char,comptr		;character to rubout
	.iot ttyoch,char	;echo

;this bit of code decrements the byte pointer

	ldb char,[360600,,comptr]	;P field of byte pointer
	addi char,7			;decrement P
	cail char,44			;test for word boundary
	jrst	[movei char,1
		 sos comptr
		 jrst .+1]
	dpb char,[360600,,comptr]	;new improved P field
	jrst inp2			;get more goodies

;here if no characters on line and we find carriage or rubout

rub0:	cain char,3
	jrst die		;only ^C kills job
rub1:	pushj p,sout
	jrst input
;this routine returns the next character in the command line as sixbit
;	returns 100 for carriage return
;	returns 101 for ^Q

getcc:	skipe udepth
	jrst dskcc
	trze unrchf		;look for character in limbo
	jrst [	move char,limbo
		popj p,]
	ildb char,comptr
	cain char,15		;ignore carriage returns
	jrst getcc

;this code converts char to sixbit

cvsix:	cail char," "
	caile char,"_"
	jrst .+2		;might be lower case
	jrst getcc1
	cail char,"a"
	caile char,"z"
	jrst [	movns char	;character not sixbit
		popj p,]
	trza char,100		;lower case	
getcc1:	subi char,40		;upper case
	popj p,
î
;this reads command from disk

dskcc:	.iot ttyich,char
	jumpl char,[	movni char,3
			popj p,]
	cain char,15		;ignore carriage returns
	jrst dskcc
	jrst cvsix

;this routine returns:
;	the next name in sixbit in t
;	break character ascii in break

name:	move t,[440600,,t]	;initial name byte pointer
	movem t,namptr
	setzb break,t		;start with the world zero
	movei bc,6		;character count
	pushj p,getcc		;get command character
	jumpe char,.-1		;ignore leading spaces
	skipa
name1:	pushj p,getcc		;command character
	pushj p,letst		;skips if char is letter or number
	jrst nambrk		;break character found
name2:	sojl bc,name1		;ignore anything after 6 characters
	idpb char,namptr
	jrst name1		;get another
;here if we find a break character

nambrk:	jumpn char,namret	;no spaces to ignore
	pushj p,getcc		;ignore spaces
	jumpe char,.-1		;keep on trucking
	pushj p,letst		;is this a break
	jrst namret		;yes
	movem char,limbo	;save character for later
	tro unrchf		;mark limbo as valuable
	movei char,0		;space broke us

namret:	skipge break,char
	jrst [	movns break
		popj p,]
	addi break,40		;setup break to ascii
	popj p,

;this routine skips if char contains a letter or number

letst:	cail char,'0'
	caile char,'9'
	jrst .+2	;might be letter
	jrst popj1
	cail char,'A'
	caile char,'Z'
	jrst letst1	;check for the file breaks
popj1:	aos (p)		;letter or number
cpopj:	popj p,

letst1:	jumpl char,[	came char,[-""]
			popj p,			;break on non-sixbit
			pushj p,getcc
			jumpl char,cpopj	;can't quote non-sixbit
 			jrst popj1]
	jumpe char,cpopj
	cain char,':'
	popj p,		;carriage and : break
	caie char,';'
	cain char,'_'
	popj p,		;; and _ break us too
	jrst popj1
;this routine scans command line for file specification

getfil:	trz devfl!snfl!fn1fl!fn2fl	;clear flags
	pushj p,name
	jumpe t,cpopj
	aosa (p)			;do skip return for non-null file name
getf1:	pushj p,name			;break off first name
	cain break,":"
	jrst colon
	cain break,";"
	jrst semi

;this must be fn1 or fn2

	cain break," "		;space
	jrst [	pushj p,filnam
		jrst getf1]
	pushj p,filnam		;return on any other break character
	skipn fn1		;if first file name is zero then,
	exch fn1,fn2		;its in fn2
	popj p,

;here if we have found what pretends to be fn1 or fn2

filnam:	tron fn2fl		;assume first name seen is second file name
	jrst [	move fn2,t	;so as not to clobber fn1
		popj p,]
	tron fn1fl
	jrst [	move fn1,t	;we have seen two file names
		exch fn1,fn2	;put them in the right order
		popj p,]	;return
	pop p,(p)		;ignore return address
	jrst inpcer		;three file names seen

;here if we find device name

colon:	troe devfl
	jrst inpcer		;two devices specified
	hlrzm t,device		;0,,'DEV'
	jrst getf1

;here if we find sname

semi:	troe snfl
	jrst inpcer		;two snames specified
	movem t,sname
	jrst getf1
title:	move t,.ver1
	pushj p,sixo
	.iot ttyoch,["."]
	move t,.ver2
sixo:	jumpe t,cpopj
	movei break,0
	lshc break,6
	addi break,40
	.iot ttyoch,break
	jrst sixo
	popj p,

;random constants

coptty:	asciz /: cannot open tty
:kill
/

	xlist
	lit
	var
	list

	end go
