30LISP LOGO MEMO™65142Page 16411ß™53361November 29, 1980ß
31™6301Sectionß
32™3102˜Section  1.  Why Implement LOGO in LISPžß
33½7LISP has proved itself to be a powerful language for
34representing complex information processing tasks.  This power stems
35from:
361. The uniform representation of programs and data.
372. The ability to build arbitrarily complex data structures in the
38form of s-expressions.
393. Recursion.
40Power, however, is not necessarily good pedagogy.  LOGO is a computer
41language designed especially for the beginner.  Its purpose is to
42introduce the fundamental ideas of computation as clearly as possible.
43½7LISP LOGO is an implementation of LOGO in LISP.  It has been
44designed for several reasons.  The first is that these two languages
45share a fundamental core in common.  Both are time shared,
46interpretive languages capable of full recursion.  Variable and
47procedure names may be any string of letters and digits. Sub-procedure
48definitions are independent of super-procedures.  Both numerical and
49list-structured information can be manipulated with equal facility.
50Thus, the LOGO systems programmer is freed of the necessity of re-
51developing various facilities already available in LISP (lists,
52recursion, garbage collection, error service traps, interrupts).  He
53can concentrate on additions (better error analysis) and modifications
54(pedagogical simplifications) to LISP. LLOGO unifies language
55development across a broad spectrum ranging from PLANNER and CONNIVER
56through LISP to LOGO.
57½7A second reason for this implementation is to provide a natural
58transition to the more powerful computational world of LISP as the
59student grows more sophisticated.  When desired, the student has
60access to all of the capabilities of LISP including:
61          Arrays
62          Functions of arbitrary number of inputs
63          Functions that do not evaluate their inputs
64          MICRO-PLANNER and CONNIVER
65          Interrupts
66          LISP compiler
67          Property lists
68          Floating point numbers
69          Character display cursor manipulation
70          Infinite precision fixed point arithmetic
71LISP LOGO MEMO™65142Page 16426ß™53361November 29, 1980ß
72Why Implement LOGO in LISP™61261Section 1ß
73™2402˜Section  2.  Differences between LOGO and LISPžß
74½7The differences between LOGO and LISP can be described on the
75basis of three educational goals:
76˜Simplicityž½15of both the computational and explanatory kind.
77˜Naturalnessž½15wherein the overhead for a naive user is minimized by
78               following standard English conventions.
79˜Disparityž½15which emphasizes the distinction between various modes
80               such as defining versus running programs.
81½7It should be noted, however, that there can be no one unique
82solution to the "best" educational language: These three goals can
83conflict.  Furthermore, they cannot be so emphasized that important
84ideas of computation are completely eliminated from the language.  For
85students of different backgrounds, simplicity and naturalness may have
86very different meanings.  Hence, alternatives to the particular
87choices made in designing CLOGO and 11LOGO are also described.  This
88section may be viewed as presenting a spectrum of possibilites from
89which a teacher can build a computational world tailored to his own
90pedagogical purposes.
91˜2.1 Simplicityž
92Lists versus Sentences
93½7Lists have a simple recursive definition.  A list is either
94          1. NIL, the empty list
95          2. (word1 word2 . . .) , a sequence of words (= atoms)
96          3. A list of lists.
97This definition is confusing when the student is still having trouble
98with the concept of recursion.  CLOGO limits itself to lists built
99from only the first two of these three clauses.  Such lists are called
100"sentences".
101    Alternative view: the concept of recursion is too important to
102    be eliminated from LOGO.  Recursive programs are allowed.
103    Educationally, the more examples of recursion available, the
104    easier it is to understand.  Hence, lists should be allowed.
105½7Computational power is not always in conflict with educational
106simplicity.  In addition to the standard list operations of FIRST
107(CAR) and BUTFIRST (CDR), LOGO provides LAST and BUTLAST.
108Furthermore, all four of these operations work on words as well as
109sentences.  The fact that word manipulation is more costly than list
110manipulation for LISP, or that taking the LAST of a list is more
111expensive than computing its FIRST is not of interest to the beginner.
112The natural symmetry of having all of these operations is to be
113preferred.
114    Alternative view: LOGO introduces two data types - words and
115    sentences.  There is both an empty word and an empty sentence.
116LISP LOGO MEMO™65142Page 16449ß™53361November 29, 1980ß
117Differences between LOGO and LISP™59331Section 2.1ß
118    LISP's world is easier to understand.  There is only one type
119    of data, s-expressions.  Primitives like CAR are list
120    operations only; they do not operate on words by manipulating
121    the word's print name, as LOGO's FIRST does.
122½7Repeatedly BUTFIRSTing a sentence in LOGO always terminates in
123the empty list.  In LISP, with its more general list structure built
124from "dotted pairs" and CONSing, this is not always so.  The result is
125the possibility of "slip-through" bugs for EMPTYP endtests of
126recursive procedures.  Thus, LOGO eliminates a common source of error
127without significantly limiting computational power.
128    Alternative view: Allowing an atom to be the CDR of an s-
129    expression sometimes allows for economy of storage. Also, the
130    symmetry of CAR and CDR in LISP make the data structure easier
131    to explain, although they are symmetric as list operations
132    only for the particular representation of lists used in LISP.
133Rigid program form
134½7LISP allows programs to be lists of any form.  Editing and
135debugging consequently become awkward due to the difficulty in naming
136parts of the program.  LOGO simplifies program structure by requiring
137that a program be a series of numbered lines.  The locations of bugs
138and intended edits are then far easier to describe.
139    Criticism: LOGO violates this assumption by allowing the user
140    to create lines of unlimited complexity.  It would be
141    preferable to limit a line to a single top level call.  This
142    does not prohibit nesting, a fundamental idea in computation.
143    But it does prohibit defeating the entire point of line
144    numbers with such code as:
145          >10 FD 100 RT 90 FD 100 RT 90 . . .
146    ½7An alternative scheme might be to adopt a "DDT" like
147    convention. Lines are identified by offsets from user-defined
148    location symbols. This has the advantage of encouraging the
149    use of mnemonic names for portions of the user's program,
150    rather than line numbers, which have no mnemonic value, while
151    retaining the virtue of having a name for every part of the
152    program. The user would not have to renumber lines if he
153    wanted to insert more lines between two lines of code than the
154    difference between their line numbers.
155Integer Arithmetic
156½7The initial CLOGO world limits the user to integer arithmetic.
157The rationale behind this is to avoid the complexity of decimal
158fractions.  This is clearly a simplification whose value depends on
159the background of the students.
160    Criticism: even for elementary school children, this
161    simplification may cause confusion.  Most beginners are
162    troubled with
163                        1
164                       --- = 0
165                        2 
166    Proponents of fixed point arithmetic might reply that this is
167LISP LOGO MEMO™65142Page 16464ß™53361November 29, 1980ß
168Differences between LOGO and LISP™59331Section 2.1ß
169    no worse than
170                         1
171                        --- = .999999
172                         1
173    However, a decimal printer can be clever in performing
174    roundoff.
175    ½7 Other alternatives are to limit arithmetic to rational
176    numbers, or to use the following LISP convention: Numbers are
177    fixed point unless ending in a decimal fraction.  Operations
178    only return fixed point if both operands are fixed point.
179½7Another virtue of LISP is that fixed point numbers can be
180infinitely large. Arbitrary limitations due to the finite size of the
181computer's word do not exist to confuse the beginner.
182Conditionals
183½7LOGO allows the following type of branching:
184          >10 TEST <predicate>
185          >20 IFTRUE . . . .
186          >30 IFFALSE . . . .
187TEST sets a flag which subsequent IFTRUE's and IFFALSE's access.  This
188avoids the necessity of the entire conditional appearing on a single
189line of the procedure.  The student has explicit names in the form of
190line numbers for each branch.
191    Criticism: This prevents nesting of conditionals.  A second
192    conditional wipes out the results of the first. Also, the
193    scope of the flag set by a TEST is unclear. In LLOGO, this
194    flag is a LISP variable, local to the procedure in which the
195    TEST occurs.
196½7LOGO's lack of canned loops such as DO and MAPCAR can be
197criticized as encouraging bad programming practice, such as excessive
198use of GO. This obscures the logical structure of programs. Also, it
199may be significantly confusing to the beginner, and the source of many
200bugs. A child might understand quite well a control structure concept
201like "do this part of the program three times", or "do this part of
202the program for each element of the list", but may be unable to open-
203code that control structure in terms of jumps and conditionals.  LOGO
204programs can't be "pretty printed" to reveal their logical structure
205as can programs written in LISP or a block structured language.
206˜2.2 Naturalnessž
207Mnemonic Names
208½7An obvious virtue of any computer language is to use procedure
209names whose English meaning suggests their purpose. Consequently,
210LISP's primitives CAR and CDR are renamed FIRST and BUTFIRST.
211    Note: Everyone remembers how un-mnemonic CAR and CDR are.
212    However, most LISP primitives are named after their English
213LISP LOGO MEMO™65142Page 16486ß™53361November 29, 1980ß
214Differences between LOGO and LISP™59331Section 2.2ß
215    counterparts.
216½7CLOGO syntax allows the use of certain "noise words", words
217which appear in the user's code, but have no effect beyond making the
218code read more like English sentences. For example, in the following
219lines of LOGO code, the AND, OR, THEN, and TO are permitted but serve
220no computational purpose.  They do not designate procedures, as is the
221usual case with words not beginning with a colon.
222          BOTH <predicate 1> AND <predicate 2>
223          EITHER <predicate 1> OR <predicate 2>
224          IF <predicate 1> THEN  . . .
225          GO TO . . . . .
226½7However, as the student gains more insight into LOGO, noise
227words become a burden. They complicate the task of the parser,
228preventing the student from feeling that he really understands the
229language. Most of the noise words have been eliminated in both 11LOGO
230and LISP LOGO. [LLOGO will tolerate THEN in conditionals, and TO in
231transfers, however, because they are so commonly used.]
232½7Matching English vocabulary to computer functions can be
233difficult.  English words rarely have a single meaning. Following are
234some examples where CLOGO may have made the wrong choice.
2351. CLOGO uses IS instead of EQUAL for its equality predicate. The
236rationale is that IS will be more familiar to a non-mathematical
237beginner.  However, the omnipresent nature of this English verb
238results in such LOGO code as:
239          TEST IS :THIS.NUMBER GREATERP :THAT.NUMBER
240thus, it might be better for LOGO to use EQUAL.
2412. Another example where LOGO may have chosen the wrong word is in
242defining procedures.  This is done via:
243          TO PROCEDURE.NAME :INPUT1 :INPUT2 . . .
244The English word "to" can imply execution.  For example, "he is ˜tož run
245his program".  A better choice would be "define".
246Parsing
247½7LISP avoids the necessity of parsing through the use of
248parentheses.  This might be considered well worth emulating in LOGO
249for its explanatory simplicity.  However, simplicity must be
250contrasted with naturalness.  A beginner is used to using English
251where verbs and modifiers are connected by grammar, context and
252meaning rather than explicit parenthesizing.  This naturalness can be
253preserved for procedures that take a fixed number of inputs. This
254allows such lines of code to be understood by anyone without any
255special programming knowledge.
256          FORWARD 100 RIGHT 90
257Thus, a beginner can express himself with no extra burden of
258parenthesizing when his programs are still very simple.
259½7Parsing can be used to permit infix notation.  Again it is
260LISP LOGO MEMO™65142Page 16514ß™53361November 29, 1980ß
261Differences between LOGO and LISP™59331Section 2.2ß
262simpler to demand that all functional calls be in prefix notation.
263However, a beginner is far more familiar with FORWARD :SIDE+10 than
264with (FORWARD (SUM :SIDE 10)).
265½7Eventually, as one's code becomes more complex, parentheses
266become a simplifying tool.  One does not have to guess how the parser
267will work.  LLOGO allows this.  If desired, parentheses are permitted
268and interpreted in the standard way.
269    Criticism: LOGO complicates its parsing algorithm in several
270    ways, making it difficult to explain to a student.  For
271    example, the language does not insist that all primitives take
272    a fixed number of inputs.  In some cases such as the title
273    lines of definitions, this is reasonable.  On the other hand,
274    it is somewhat confusing to limit such primitives as SUM to
275    only 2 inputs if not parenthesized but any number of inputs if
276    parenthesized.  Equally bad is the fact that primitives like
277    11LOGO's PRINTOUT for printing definitions do not evaluate
278    their inputs.  It would be more consistent for
279          PRINTOUT "PROGRAM"
280    to be required.
281˜2.3 Disparityž
282Program Versus Data
283½7Both programs and data are information structures.  The
284difference between the two is solely a matter of use.  LISP preserves
285this elegant view by allowing programs to be passed as input and,
286indeed, to even redefine themselves.  This power, for all its
287simplicity, can confuse the beginner.  For the novice, the difference
288between defining and running a procedure is unclear. LOGO provides
289clarification by forcing a complete distinction between the processes
290of defining and of evaluation.
291    Criticism: LOGO violates this idea.  A program can be executed
292    inside a definition if not preceded by a line number.  This is
293    a mistake.  The typical case is for the user to have intended
294    to type the line number.  In its wistful desire for more
295    computational power, LOGO has forgotten its epistemological
296    foundations.
297Homonyms
298½7LISP has the ability for a word to be the name of both a
299procedure and a variable.  The position of the word in a list then
300determines how it is used.  Homonyms, however, can be confusing.  How
301should a word which is both a procedure and a variable be treated when
302it is the first element in a list?  The choice is arbitrary.
303½7LOGO prevents such homonyms.  Words evaluate as variables only
304when preceded by ":".
305          . . .  X  . .  causes X to evaluate as a procedure call.
306          . . .  :X . . returns the value of the variable X.
307thus, LOGO and LISP share the power of allowing any string of letters
308LISP LOGO MEMO™65142Page 16524ß™53361November 29, 1980ß
309Differences between LOGO and LISP™59331Section 2.3ß
310to be either a procedure or a variable name.  But LOGO insists on an
311unambiguous "local" distinction, independent of position, between
312these two uses.
313½7Another example of the clever ways LISP takes advantage of
314homonyms is NIL.  LISP uses this word to name both the empty list and
315the logical truth value FALSE.  This can result in more economical
316procedures.  The convenience, however, has no conceptual basis.
317Hence, it can confuse the user who does not yet understand either list
318manipulation or logical analysis well. This is similar to the
319situation in APL, where the logical constants are the integers 0 and
3201, and conditionals are accomplished by numerical manipulation.  It
321can lead to obscuring the purpose of a given piece of code.
322Line oriented input
323½7LISP evaluates an expression when parentheses balance. Thus it
324cannot catch errors caused by typing too many right parentheses.  LOGO
325waits for a carriage return.  Hence it is capable of recognizing this
326problem.  Furthermore, a user can write several calls on a line.
327Execution is delayed until a carriage return is typed.  This has the
328virtue of separating the tasks of forming grammatical expressions from
329executing programs.
330½7
331LISP LOGO MEMO™65142Page 16532ß™53361November 29, 1980ß
332Differences between LOGO and LISP™59331Section 2.3ß
333™2702˜Section  3.  Overview of the Implementationžß
334½7LISP LOGO is designed so that the user need never know that he
335is communicating with other than a standard LOGO.  However, if
336desired, he can insert parenthesized LISP code anywhere in his LOGO
337program.
338½7LISP LOGO is basically a compiler.  It converts LOGO input to
339LISP programs. The result is that running most procedures takes less
340time since the code need not be repeatedly interned and parsed.
341½7The following pages provide an overview of the major parts of
342the system.  These are its reader, parser, evaluator, printer, and
343error handler. More detailed explanations of these will follow in
344later sections of this memo.  For implementation details, LISP LOGO is
345available in well-commented interpretive code.
346½7Code for the LOGO display turtle is discussed in Section 613 and
347Section 937, and code for the music box in Section 687.  The "LOGO
348project" is concerned with more than the development of a computer
349language.  Of major interest is the design of various computer-driven
350devices which provide a rich problem solving environment for the
351student. However, special purpose primitives for driving these devices
352are independent of LOGO versus LISP issues and must be added
353individually.  A LISP-based implementation does have one special
354virtue.  For those devices like the music box which are driven by
355ASCII characters, the primitives can be written in LISP or LOGO and
356then compiled.  It is not necessary to create code at the machine
357level.
358˜3.1 Readerž
359½7The LOGO reader is basically a line-oriented LISP reader.  It
360returns a list of atoms read between carriage returns.  The
361fundamental tasks of interning atoms and building list structure are
362handled by LISP.  Conflicts in character syntax and identifiers
363between LISP and LOGO present the only subtleties.
364½7Certain characters such as the infix operators +, -, *, and /
365do not require spaces to be set off as atoms.  This is equivalent to
366being a "single character object" in LISP.  Other characters such as
367"." in dotted pairs are special in LISP but not in LOGO.  The solution
368to these conflicts is found in using separate "readtable"'s for LOGO
369and LISP.
370½7Conflicts in names also occur. The LOGO user has access to all
371the ordinary LISP procedures, but must be prevented from accessing
372LISP procedures which are internal to LLOGO. This is accomplished by
373using two "obarrays". When the user types in an identifier with the
374same name as an internal procedure, he accesses a different atom.
375½7MACLISP allows any number of separate "readtable"s and
376"obarray"s.  This permits multiple worlds - PLANNER, CONNIVER, LISP,
377LOGO - to co-exist with no conflict.  Switching worlds is
378computationally fast.  All that is necessary is to rebind the
379READTABLE and OBARRAY variables to the desired world.  On the other
380LISP LOGO MEMO™65142Page 16554ß™53361November 29, 1980ß
381Overview of the Implementation™59301Section 3.1ß
382hand, the naive user is protected completely from other environments
383and need not even know of their existence.
384˜3.2 Parserž
385½7The parser converts a LOGO line to list-structured form.  This
386requires that information on the number of inputs used by a procedure
387be available.  Inserting parentheses is a trivial computation for
388procedures with a fixed number of inputs.  However, complexities are
389introduced into the LOGO parser by:
3901. Having infix as well as prefix operators.
3912. Changing the number of inputs depending upon whether the user
392embedded the form in parentheses (SUM, SENTENCE, ...).
3933. Primitives like TO that do not parse their input.
3944. Homonyms: Functions which have the same name in LISP and LOGO, but
395have different meanings. These are handled by having the parser detect
396the names of LOGO primitives which conflict with LISP, and convert
397them to functions with different names that do not conflict.
398This makes the parser the most complicated part of the simulation.
399½7Parsing information is stored on the property list of a
400function.  The major sub-procedures are concerned with prefix, infix,
401and user-typed parentheses.  Special primitives are parsed by storing
402a procedure as the parsing property.
403˜3.3 Evaluationž
404½7The basic LOGO functions that do the user's computation - i.e.
405the arithmetic, list, and logical primitives - are the simplest part
406of the simulation.  These functions all occur in LISP, usually in a
407somewhat more general form.  Hence, this part of the implementation is
408little more than renaming. For many primitives, LLOGO provides more
409argument type checking and informative error messages than are
410supplied by their LISP counterparts.
411½7Parsed code is executed directly by the LISP evaluator.
412Indeed, a user-defined program in parsed form is simply a LISP PROG.
413The line numbers are tags in the PROG.
414˜3.4 Printingž
415½7LOGO procedures could be represented as lists of unparsed lines
416internally.  In this case, a line must be interned and parsed each
417time it is run.  However, the problems of printing the definition and
418editing a function are simplified.  The internal format is identical
419to the format in which the user originally typed the expression.
420½7An alternative solution is to represent LOGO programs in
421parsed, i.e. LISP form.  A LOGO program internally is a LISP program.
422This maximizes run time speed and simplifies building program
423LISP LOGO MEMO™65142Page 16575ß™53361November 29, 1980ß
424Overview of the Implementation™59301Section 3.4ß
425understanders.  It has the disadvantage of complicating the parser and
426the printer.
4271. The parser must handle functions that have not yet been defined.
428This can be accomplished, however, by reverting to the solution of
429parsing at run time those lines which contain unknown functions. This
430run-time parsing can alter the program's definition as well so it only
431need occur once.
4322. Printing definitions and editing lines requires an inverse parser
433or "unparser" which returns the LISP-ified code to its original form.
434This is possible providing there is no information lost in parsing.
435Such is the case if the parser makes special provision for
436distinguishing user-typed parentheses from parser-generated
437parentheses.  One way to accomplish this is by beginning user-lists
438with a do-nothing function USER-PAREN defined as:
439          (DEFUN USER-PAREN (X) X)
4403. Editing title lines is made more complex. If the number of inputs
441accepted by a function is altered by editing the title line, the
442editor must reparse the lines of super-procedures in which a call to
443the the edited function appears.  This can be accomplished by
444maintaining a super-procedure tree, although LLOGO does not currently
445do this.
446½7These complications can be avoided by storing both
447representations of the procedure.  This is an excellent example of a
448space versus complexity trade-off.  LISP LOGO currently does not store
449both representations.
450˜3.5 Error Analysisž
451½7Since LOGO is a language which is designed to be used by
452beginning programmers, it is important to provide informative error
453messages. Consequently, all LOGO primitives do extensive type checking
454on their inputs. LLOGO will try to print out the form which caused the
455error, and give the line number if the error occurred inside a
456procedure. After a simple mistyping error which can be detected by the
457parser, the user is given an immediate opportunity to correct the
458line.  For run time errors, he is given the option of causing
459breakpoints. Facilities for exploring the stack from inside a
460breakpoint loop are available.  Since LOGO procedures are represented
461internally as LISP procedures, the standard LISP TRACE package can be
462used.
463½7These facilities are implemented using LISP error interrupt
464handlers and EVALFRAME. The sophisticated user desiring customized
465error handlers can access the LISP facilities directly.
466LISP LOGO MEMO™65142Page 16593ß™53361November 29, 1980ß
467Overview of the Implementation™59301Section 3.5ß
468™4602˜Section  4.  Performancežß
469˜4.1 Sizež
470½7LISP½15½23½3126  Blocks (1024 36 bit words)
471½7LLOGO (compiled)½23½31 8  Binary program
472½7½15½23½31 5  List structure
473½7½15½23½31 4  Numbers, Atomic symbols, etc.
474½7Total space½23½31½3243
475½7These figures do not include space for user programs, or
476loading the display turtle, music, or GERMLAND packages.  Between 5
477and 10K beyond the amount of storage mentioned above would provide a
478reasonable amount of workspace for user programs and data; this would
479correspond roughly to programs of perhaps a few pages.  The figures
480above are for the ITS implementation; on DEC10 systems, it occupies
481slightly less space.  In the current MACLISP, storage expands as
482needed. LLOGO takes advantage of this feature -- If programs grow
483beyond a certain size the user is asked whether he wishes the
484allocation to be increased. Storage is expanded automatically on
485loading special packages such as the display turtle.  Of the 17 blocks
486which comprise the LLOGO system, all but 3 are pure, and can be shared
487among users.
488˜4.2 Computation Timež
489½7For most processing, LLOGO enjoys a speed-up over CLOGO and
49011LOGO due to the fact that parsing and interning occur only once at
491define time.  Further, LLOGO makes it possible to compile LOGO source
492programs into machine code using the MACLISP compiler for increased
493efficiency [See Section 353].  Workspaces can be stored on the disk in
494internal LISP format. [See Section 184] Consequently, re-reading
495files has no overhead.  CLOGO has an advantage, however, in
496manipulating words, as its internal data structure is string rather
497than list oriented.
498˜4.3 Usež
499½7Almost all of the primitives of CLOGO and 11LOGO, [including
500the music box and display turtle] are implemented.  Hence, LISP LOGO
501is capable of reading, parsing and running most files saved under
502CLOGO or 11LOGO [perhaps necessitating minor modification].
503½7It can also be used real-time by an individual familiar only
504with LOGO: no knowledge of LISP is required.  On the other hand, all
505of LISP's facilities are available.  Programs can be written in LISP,
506or in machine language using LAP, and made callable from LOGO.  The
507special packages for the display turtle, music box and GERMLAND can
508also be used from an ordinary LISP, without the rest of the LOGO
509environment.  Some other facilities of LLOGO, such as the breakpoint
510and stack manipulating functions, are also available for use in LISP.
511LISP users can take advantage of these facilities without interaction
512with LOGO simply by loading the appropriate files of LISP functions.
513LISP LOGO MEMO™65142Page 16608ß™53361November 29, 1980ß
514Performance™59111Section 4.3ß
515˜4.4 Availabilityž
516½7The implementation is written completely in interpretive code.
517It runs compiled under the MACLISP currently in use at the Artificial
518Intelligence Laboratory. LLOGO has also been implemented on standard
519DEC PDP-10's under the TEN50 and TENEX systems, and on MULTICS. These
520implementations are discussed in Section 494 and Section 812 of this
521memo.
522LISP LOGO MEMO™65142Page 16614ß™53361November 29, 1980ß
523Performance™59111Section 4.4ß
524™4202˜Section  5.  Getting Startedžß
525½7In the following sections, we will go into more detail
526concerning the implementation of LISP LOGO, and provide some practical
527information for using it.  We will not attempt to provide the reader
528with an introduction to the LOGO language; several excellent sources
529for this already exist, such as the LOGO Primer, and the 11LOGO User's
530manual [LOGO memo 7]. We will assume that the reader has read these,
531or is already familiar with CLOGO or 11LOGO, the other implementations
532of the LOGO language available at the AI lab. Instead, we will
533concentrate on pointing out differences between LLOGO and other
534implementations of LOGO, and describing features unique to our
535implementation. It is not necessary to know LISP to understand most of
536what follows, although some knowledge of LISP would be helpful in
537gaining insight into the implementation.  For more information on
538LISP, see the MACLISP Reference Manual by Dave Moon, and the Interim
539LISP User's Guide [AI memo 190] by Jon L. White.
540½7
541½7Notational conventions: Throughout this memo, USER TYPEIN and
542LOGO CODE will appear in a font like this.  ABBREVIATIONS for LOGO
543primitives will be noted in braces { }.  SYSTEM TYPEOUT will appear in
544a font like this.  Control characters are denoted by  followed by the
545character. You type a control character by holding down the key marked
546"control" while you are typing the character, just like you would use
547the "shift" key to type a capital letter.  $ means escape or altmode,
548not dollar-sign, except where otherwise noted. Angle brackets < > mean
549something of the appropriate type suggested within the brackets; for
550instance, if your user name is HENRY, <user name> means your user
551name, e.g. HENRY. Except for control characters, which usually take
552immediate effect, and except where otherwise noted, end all lines of
553typein with a carriage return.
554½7The following procedure is intended to help very naive users of
555ITS to get logged in, and to obtain LISP LOGO. See AI memo 215, How To
556Get On the System, for more details.
5571.  Find a free console. If it is a TV console, turn it on using the
558switch on the gray box mounted on the wall. It should show the names
559of all the users currently on the system. Other types of consoles will
560show the message,
561          AI ITS <version> CONSOLE <number> FREE. <time>.
5622.  A console which is free understands only one command, Z. [on TV
563terminals, use the key marked CALL.  The computer will respond with
564the following messages:
565          AI ITS <version>.  DDT <version>.
566          <number> USERS.
567          <news>
5683.  When it stops printing, login as follows: type
569          :LOGIN <user name>
570If there are any messages for you,
571LISP LOGO MEMO™65142Page 16630ß™53361November 29, 1980ß
572Getting Started™61151Section 5ß
573          --MAIL--
574will be printed. You can type a space to receive it or any other
575character to postpone it.  A * will be typed at the end.
5764.  Now you have completed logging in to the AI system.  To get LLOGO
577started,
5785.  Decide which version of LISP LOGO you want. Choose from:
579LLOGO - Standard version of LISP LOGO. Vocabulary is compatible with
58011LOGO. Section 749 contains a detailed comparison of this version of
581LLOGO with 11LOGO.
582CLLOGO - A version which uses a vocabulary which is compatible with
583CLOGO.
584NLLOGO -The very latest version of LISP LOGO. This is experimental, so
585we make no promises.
586When you decide which you want, type
587          :<name of program>
588for example, :LLOGO .
5896.  Then LLOGO will print out some initial messages, including its
590version number and LISP's. LLOGO has available several packages of
591special functions, and you will be asked which of these you are going
592to use. If you are at TV console, the first question will be
593          DO YOU WANT TO USE THE TV TURTLE?
594If you want to use the turtle commands to display pictures on your
595terminal, you should answer YES. You should also answer YES if you
596intend to define or edit a procedure containing such commands, even if
597you don't run the procedure. See Section 937 for details on the TV
598turtle.  If you are not logged in at a TV terminal, you can use the
599turtle on the 340 or GT40 displays instead. LLOGO will ask
600          DO YOU WANT TO USE THE DISPLAY TURTLE?
601If you answer YES, it will then ask which display you want to use.  It
602is not necessary that you have the 340 display scope, the PDP6, or the
603GT40 display, to do just defining and editing.  You can even run the
604procedure if you do not mind not being able to see what the procedure
605does. See Section 613 for more information.
606          GERMLAND?
607If you want to play with GERMLAND, the display turtle for character
608displays such as DATAPOINT terminals, answer YES.  This has a prompter
609which will run some demonstrations and provide help if you need it.
610Again, if you intend to define or edit procedures designed to run in
611LISP LOGO MEMO™65142Page 16641ß™53361November 29, 1980ß
612Getting Started™61151Section 5ß
613GERMLAND, you must answer YES. See Section 840.
614          MUSIC BOX?
615If you want to use LLOGO music box primitives, answer YES. This will
616inquire further, as to which music box, etc.  See Section 687.  In case
617you have answered YES to any of these questions you have to wait for a
618while, because it takes some time to load in the files. If you want to
619interrupt loading in type X , not G. If you change your mind about
620wanting any of the subsystems mentioned above, you can go through the
621initial questionnaire again by calling the function ALLOCATOR.  If you
622have a file named LLOGO (INIT) on your directory or there is a file
623named <user name> .LLOGO. on the (INIT) directory, LLOGO will read it
624as an initialization file, executing LOGO code contained therein.
625When all this is finished, LLOGO will indicate its readiness with
626          LLOGO LISTENING
627          ?
6287.  If you find yourself in the unfortunate situation of meeting a bug
629in LISP LOGO, you may report it by using the function BUG. The input
630to BUG should be a message describing the difficulty, enclosed in
631dollar signs. For example,
632          BUG  $
633          THE TURTLE ESCAPED FROM THE
634          DISPLAY SCREEN . . .
635          $
636          ;THANK YOU FOR YOUR PATIENCE.
637          ?
6388.  You can logout when you are finished by typing GOODBYE to LOGO.
639The terminal should then say,
640          AND A PLEASANT DAY TO YOU!
641          AI ITS <version> CONSOLE <number> FREE <time>
6429.  Have fun!
643LISP LOGO MEMO™65142Page 16651ß™53361November 29, 1980ß
644Getting Started™61151Section 5ß
645™4502˜Section  6.  Parsing LOGOžß
646½7This section will discuss a few of the more complex issues in
647parsing LOGO into LISP, and discuss how they are handled by LLOGO.
648LISP is trivial to parse, as its syntax is totally unambiguous. The
649application of a function to its inputs always happens in prefix
650notation, and the precise syntactic extent of a form is always clearly
651delineated by parentheses. LOGO syntax affords the beginning
652programmer some conveniences over LISP syntax, while retaining much of
653the expressive power of LISP. Parentheses can be omitted surrounding
654every form, and the more customary infix notation for arithmetic
655expressions can be arbitrarily intermingled with prefix notation.
656These conveniences are bought at the cost of complicating the parser,
657and introducing some cases where ambiguity results regarding the
658user's intent for some of the language's syntactic constructs.
659˜6.1 Infix Expressionsž
660½7LLOGO allows infix notation to be used as well as prefix
661functions in arithmetic expressions. Most LOGO arithmetic functions
662exists in both prefix and infix flavors, and the user is free to use
663whichever he desires.
664          PRINT 3*4+:ASUM FIRST :X DIFFERENCE :C*17 2
665is the same as
666          PRINT (TIMES 3 4)+(EXPT :A ((FIRST :X)+(TIMES :C 17)-2))
667LLOGO observes the usual precedence and associativity of arithmetic
668operators.
669½7Note that a complication of the LOGO syntax is that all
670functions, not just infix operators, are required to have precedence
671levels. Is
672          FIRST :A * 17
673the same as
674          TIMES (FIRST :A) 17   or   FIRST (TIMES :A 17)   ?
675The situation is further complicated by the user's probable
676expectation that functions which manipulate logical values have lower
677precedence than comparison operators like <, > and =. So,
678          TEST :NUMBER < :PI
679is taken to mean,
680          TEST (LESSP :NUMBER :PI)  and not LESSP (TEST :NUMBER) :PI
681½7CLOGO gives all arithmetic operators the same precedence on the
682LISP LOGO MEMO™65142Page 16666ß™53361November 29, 1980ß
683Parsing LOGO™59121Section 6.1ß
684grounds that precedence would be difficult to explain clearly to
685children. However, this has the drawback of deviating from the
686customary mathematical convention. Since the motivation for
687introducing infix notation into LOGO syntax is so that arithmetic
688expressions can be written in the infix form in common use, LLOGO has
689been designed to obey the usual precedence conventions.
690½7LLOGO tries to please everybody. If you feel that the
691precedence scheme which has been implemented does not agree with your
692intuition, you are free to redefine the precedence levels as you wish.
693LLOGO also provides the capability of defining new infix operators.
694½7The initial default precedences are identical to those of
69511LOGO and are as follows:
696          700:  [exponentiation]
697          600: + - [prefix]
698          500: * / \
699          400: + - [infix]
700          300: [default precedence for system and user functions]
701          200: < > =
702          100: IF NOT BOTH EITHER AND OR TEST
703           50:  [MAKE]
704½7Initially, operators of levels 50 and 700 are right
705associative, and the rest are left associative, which is the default.
706Logical functions should have precedence lower than comparison
707operators, so if the user defines a logical function he should set the
708precedence himself, otherwise it will receive the default precedence.
709The user can change things by using the following functions:
710PRECEDENCE <op>
711½7Returns the precedence level of <op>.
712PRECEDENCE <op> <level>
713½7Sets <op>'s precedence level to the specified <level>, which
714may either be a number, or another operator, which means that <op> is
715to be given the same precedence as that operator.
716PRECEDENCE NIL <level>
717½7Sets the default precedence for functions to <level>. All
718functions which are not in the above list of infix functions, or have
719not been assigned a precedence by the user, receive the default
720precedence.
721ASSOCIATE <number> <which-way>
722½7Declares that all functions of precedence level <number> will
723associate <which-way>, which is either 'LEFT or 'RIGHT.
724LISP LOGO MEMO™65142Page 16683ß™53361November 29, 1980ß
725Parsing LOGO™59121Section 6.1ß
726INFIX <op> <level>
727½7Defines <op> to be an infix operator of precedence <level>.
728Specifying a precedence is optional.
729NOPRECEDENCE
730½7Forces all infix operators to the same precedence level [this
731will be higher than the default precedence]. Makes LISP LOGO look like
732CLOGO [well, almost...].
733:INFIX
734½7This variable contains a list of all current infix operators.
735Look, but don't touch. Use INFIX to add new infix operators.
736˜6.2 Minus Signž
737½7There is some ambiguity in the handling of minus sign. For
738example, consider
739          (SENTENCE 3 -:A)
740If the minus sign is interpreted as an infix difference operator, this
741will result in a list of one element. If the minus sign is interpreted
742as prefix negation, it will result in a list of two elements.  CLOGO
743uses the spaces in the line to disambiguate this case. If there is a
744space between the minus sign and the :A, it is interpreted as infix,
745Otherwise, it is interpreted as prefix. In 11LOGO, spaces are not
746semantically significant except to delimit words, so this is
747interpreted as (SENTENCE (DIFFERENCE 3 :A)) regardless of the
748occurrence of spaces. LLOGO treats minus sign as does 11LOGO. One
749would obtain the result of the other interpretation by using
750          (SENTENCE 3 (-:A))
751½7The preceding discussion applies only to the parsing of infix
752expressions. So, [-4] is a list of one element, a negative number, but
753[- 4] is a list of two elements, minus sign and 4.
754˜6.3 Homonymsž
755½7LLOGO makes all the functions of LISP directly accessible to
756the LOGO user, in exactly the same way as LOGO primitives. This runs
757into difficulty when a LISP function and a LOGO function have the same
758name but different meanings. These are currently handled by the
759parser, which converts them into innocuous atoms which do not conflict
760with LISP, and are reconverted upon unparsing. Currently the following
761functions are homonyms:
762          PRINT, RANDOM, LAST, EDIT, [also SAVE in the MULTICS version
763When the user types in one of these, it is converted by the parser to
764an internal representation consisting of a different function name
765[LOGO-PRINT, LOGO-LAST LOGO-EDIT LOGO-RANDOM or LOGO-SAVE, as
766appropriate].  When the user requests that the line be printed out or
767edited the unparser converts it back to the way it was originally
768LISP LOGO MEMO™65142Page 16704ß™53361November 29, 1980ß
769Parsing LOGO™59121Section 6.3ß
770typed in.  In the CLOGO-compatible version of LLOGO, when :CAREFUL is
771not set to NIL the following primitives which conflict with CLOGO are
772also changed by the parser: LIST is changed to PRINTOUT, DISPLAY to
773STARTDISPLAY, GET and READ to READFILE, and DO to RUN.  Warning
774messages are also printed in these cases.
775½7There is one pitfall in the current method of handling
776homonyms: sometimes, as with passing functional arguments, the parser
777does not get a chance to do its thing, so the user may find an
778unexpected function called; APPLY 'PRINT . . . . calls LISP's PRINT
779function, not LOGO's.
780˜6.4 Abbreviationsž
781½7Abbreviations are accomplished in LLOGO by putting the name of
782the function which is abbreviated on the property list of the
783abbreviation as an EXPR or FEXPR property, as appropriate.
784Abbreviations are expanded into their full form on parsing, and are
785left that way. The user has the capability of creating new
786abbreviations by
787          ABBREVIATE <new name> <old name> {AB}
788and erasing them by
789          ERASE ABBREVIATION <name>
790ABBREVIATE evaluates its inputs, but ERASE doesn't.  A complete
791listing of abbreviations, and the names of procedures abbreviated by
792them, can be obtained by doing
793          PRINTOUT ABBREVIATIONS
794LISP LOGO MEMO™65142Page 16725ß™53361November 29, 1980ß
795Parsing LOGO™59121Section 6.4ß
796™2702˜Section  7.  Defining and Editing Functionsžß
797½7In LOGO, when the user defines a procedure using TO, or EDITs a
798procedure he has previously defined, LOGO enters an "edit mode", where
799lines beginning with a number are inserted into the procedure under
800modification. LOGO prompts with ">" rather than "?" to indicate this.
801The intent of having a separate mode for editing procedures is to
802stress the distinction between defining procedures and executing them.
803This distinction is not strictly maintained; if the line does not
804begin with a number, the commands are executed as they would be
805ordinarily, with a few exceptions [the user is prevented from doing
806another TO or EDIT for instance]. Occasionally, this leads to errors,
807for instance if the user forgot to type the line number at the
808beginning of a line intended for insertion.
809½7The default state of LLOGO is to retain the separation of edit
810mode from ordinary mode as in 11LOGO and CLOGO. The slightly more
811sophisticated user, however, might find himself in an unnecessary loop
812of continually typing EDIT's and END's while working on the same
813procedure. Since the lines typed by the user for insertion into a
814procedure are inserted immediately when the user finishes typing the
815line, END does not cause anything to happen other than the termination
816of edit mode.  The system always remembers the name of the last
817function mentioned by TO, EDIT, PRINTOUT, etc. as a default for these
818functions, so when working on a single function, EDIT serves only to
819enter edit mode.  The user has an option of turning off the separate
820edit mode by setting the variable :EDITMODE to NIL.  This will cause
821lines beginning with a number to be inserted into the default
822procedure at any time. In this mode, it is never necessary to use END,
823and EDIT will only change the name of the default procedure if given
824an input.  The prompter will not be changed.
825½7In LLOGO, it is not necessary to be in edit mode to use
826EDITLINE or EDITTITLE on a line of the default procedure, and the
827editing control characters are available even when not in edit mode.
828˜7.1 Control Character Editingž
829½7LLOGO has a control-character line editor similar to those in
830CLOGO and 11LOGO. This makes it particularly convenient to correct
831minor typing errors, by providing a means of recycling portions of the
832line typed previously, instead of requiring retyping of the entire
833line. The reader keeps track of two lines: an old line which you are
834editing, and a new line, which LLOGO is to use as the next line of
835input. The old line is always the last line you typed at LLOGO, except
836immediately after a parsing error, when the offending line will be
837typed out at you, and it may be edited. You can also set the old line
838yourself to be a line in the current default procedure by doing
839EDITLINE <line number>, or the title of a procedure by calling
840EDITTITLE.  Everything you type after the prompter, or cause to appear
841using the control characters, is included in the new line, until you
842type carriage return, which terminates editing for that line.  You may
843use parts of the old line in constructing the new line by using the
844following commands:
845LISP LOGO MEMO™65142Page 16742ß™53361November 29, 1980ß
846Defining and Editing Functions™59301Section 7.1ß
847E
848½7Get the next word from the front of the old line, and put it on
849the end of the new line.
850R
851½7Put the rest of the old line at the end of the new line. This
852is like doing E's until there is nothing left in the old line.
853S
854½7Delete a word from the front of the old line.
855P
856½7Delete a word from the end of the new line. Like rubout, except
857rubs out a word instead of a character.
858½7LLOGO uses different characters than 11LOGO and CLOGO do
859because LISP uses most of the control characters for interrupts and
860i/o.
861½7The LLOGO top level loop keeps a record of recent interactions
862with the user. The following functions are useful in referring back to
863a previously typed in line, or previously produced value without
864retyping it.
865LASTVALUE <n>
866½7Without an input, LASTVALUE returns the last value typed out by
867the top level loop. This is like the variable * in LISP. An input of
868<n> to LASTVALUE returns the <n>th previous value.
869LASTFORM <n>
870½7LASTFORM returns the most recently typed form, like the
871variable + in LISP. An input can specify the <n>th most recent form.
872EVAL LASTFORM executes the last form over again.
873THISFORM
874½7Like LASTFORM 0, this returns the form in which it is
875contained, like the variable - in LISP.
876LASTLINE <n> {ILINE}
877½7Returns the last [or <n>th] previous line. RUN LASTLINE
878executes the last line again. Note that a line may contain more than
879one form.
880HISTORY <n>
881½7Sets the number of interactions remembered by LLOGO to <n>.
882Inputs to LASTVALUE, LASTLINE, and LASTFORM must be less than this
883number, which can be examined as the value of the variable :HISTORY,
884and is initially set to 5.
885½7
886LISP LOGO MEMO™65142Page 16760ß™53361November 29, 1980ß
887Defining and Editing Functions™59301Section 7.1ß
888˜7.2 Printing Function Definitionsž
889½7The function PRINTOUT can be used to look at definitions of
890user procedures. In addition, it has other options for examining the
891state of your LLOGO.  PRINTOUT doesn't evaluate its inputs.
892PRINTOUT <procedure-name> {PO}
893½7Will print out the definition of the specified procedure.  If
894the name is omitted, it will assume the last function that was
895defined, edited, or printed.
896PRINTOUT LINE <number> {POL}
897½7Prints out only the specified line in the default procedure.
898PRINTOUT TITLE <procedure> {POT}
899½7Prints the just the title of the procedure given.  If the input
900is omitted, prints the title of the current default procedure. This is
901useful if you forget which procedure is the default.
902PRINTOUT TITLES {POTS}
903½7Prints the titles of all current user procedures.  Ignores
904buried procedures [see Section 184].
905PRINTOUT PROCEDURES {POPR}
906½7Prints out the definitions of all currently defined user
907procedures. Will not print the definitions of procedures that are
908buried [see Section 184].
909PRINTOUT NAMES {PON}
910½7Prints the names and values of all user variables.
911PRINTOUT ALL {POA}
912½7Does PRINTOUT PROCEDURES and PRINTOUT NAMES.  Another useful
913command is LINEPRINT, which causes a listing, similar to the output of
914PRINTOUT ALL, to appear on the line printer. It takes an optional
915input, a word to be used as a title to name the listing generated.
916PRINTOUT SNAPS
917½7Prints a list of saved display turtle scenes. See Section
9181002.
919PRINTOUT FILE
920PRINTOUT INDEX
921½7See Section 817.
922LISP LOGO MEMO™65142Page 16784ß™53361November 29, 1980ß
923Defining and Editing Functions™59301Section 7.2ß
924PRINTOUT ABBREVIATIONS
925½7Prints a list of all current abbreviations, and the names of
926the procedures which each abbreviates.
927PRINTOUT PRIMITIVES
928½7Prints a complete list of all LLOGO primitives.
929˜7.3 Erasingž
930½7The command ERASE will remove unwanted portions of your LOGO.
931The inputs to ERASE are not evaluated.  The options available are:
932ERASE <procedure, variable or snap name>
933½7Cause the definition of the specified object to vanish. Note:
934When you define a function using TO, it checks to see if there already
935exists a procedure of the same name, and if so, inquires whether you
936want the old definition ERASEd. This is to prevent you from
937accidentally overwriting definitions of functions.
938ERASE PRIMITIVE <primitive name>
939½7The LLOGO primitive given as input will be erased. You might
940use this, for example, if you wanted to use a name used by LOGO for
941one of your own functions. If you define a name using TO which
942conflicts with a LOGO primitive, it will inquire if you want the
943definition of the primitive to be erased.
944ERASE LINE <number> {ERL}
945½7Erases line <number> of the default procedure.
946ERASE NAMES {ERN}
947½7Unbinds all user variables.
948ERASE PROCEDURES {ERP}
949½7Erases all interpretive user functions.  Does not affect
950compiled or buried procedures.
951ERASE COMPILED
952½7Erases all compiled user functions.
953ERASE ALL {ERA}
954½7Like doing ERASE PROCEDURES, ERASE COMPILED and ERASE NAMES.
955ERASE ABBREVIATION <abbreviation>
956½7Erases the abbreviation given as input. Does not affect the
957procedure that it abbreviates.
958LISP LOGO MEMO™65142Page 16806ß™53361November 29, 1980ß
959Defining and Editing Functions™59301Section 7.3ß
960ERASE FILE <file spec> {ERF}
961½7See Section 817.  In 11LOGO, DELETE is a synonym of ERASE
962FILE, but in LLOGO, that name is used for the LISP function which
963deletes elements from lists.
964ERASE TRACE <function> {ERTR}
965½7Removes trace from <function>. See Section 197.
966ERASE BURY <functions> {ERB}
967½7The functions will no longer be buried. For a discussion on
968buried procedures, see Section 184.
969LISP LOGO MEMO™65142Page 16815ß™53361November 29, 1980ß
970Defining and Editing Functions™59301Section 7.3ß
971™2902˜Section  8.  Error Handling and Debuggingžß
972½7The philosophy of the LISP LOGO error handling system is to try
973to be as forgiving as possible; the system will give you an
974opportunity to recover from almost any type of error [except a bug in
975LLOGO!]. There are two types of errors which can occur:
976˜8.1 Parsing Errorsž
977½7If for some reason, LLOGO cannot parse the line you typed [for
978example, you may have typed mismatched parentheses], this causes a
979parsing error. When this happens, LLOGO will print a message telling
980you why it was unhappy, retype the offending line at you, and type the
981editor prompt character. You now have a chance to redeem yourself by
982correcting the line -- you may use any of the editing control
983characters [see Section 7.1]. When you are satisfied that the line is
984correct, type carriage return, and LLOGO will resume evaluation, using
985the corrected line in place of the one which was in error.
986˜8.2 Run Time Errorsž
987½7When a run time error occurs, a message will be printed. If the
988error occurs inside a LOGO user defined function, the message will say
989something like:
990          ;ERROR IN LINE <number> OF <procedure>
991          ;LINE <number> IS :  . . . .
992          ;<reason for error>
993If the error occured inside a LOGO primitive, the message will look
994like:
995          ;COULDN'T EVALUATE <bad form>
996          ;BECAUSE
997          ;<reason for error>
998where <bad form> is what LLOGO was trying to evaluate when the error
999occurred. Usually, this will give you enough information to figure out
1000where the error occurred, although <bad form> is sometimes
1001uninformative. Usually, LLOGO will simply return to the top level loop
1002when such an error occurs. However, if you SETQ the variable :ERRBREAK
1003to something other than NIL, [or MAKE 'ERRBREAK . . . ] a run time
1004error will cause a LOGO break loop to be entered after the message is
1005printed.  Setting the variable :LISPBREAK to non-NIL will cause a LISP
1006style breakpoint to occur when an error happens.  [For a detailed
1007discussion of breakpoints, see below, Section 455.] You can resume
1008execution of your program from the point at which the error occurred,
1009by CONTINUEing with something to be used in place of the piece of data
1010which caused the error.  If the error was an undefined function, you
1011may CONTINUE with the name of a function which has a definition. If
1012the error was an unbound variable, CONTINUE with a value for that
1013variable. If the error was a wrong type of input to a LOGO primitive,
1014CONTINUE with some appropriate value for an input to that function,
1015etc.  Usually it will be obvious from the context what sort of item is
1016required. Computation will be resumed from where the error occurred,
1017LISP LOGO MEMO™65142Page 16826ß™53361November 29, 1980ß
1018Error Handling and Debugging™59281Section 8.2ß
1019with the returned item substituted for the one which caused the error.
1020[Note: the usual LISP interrupt handler functions expect a list of the
1021new item to be returned, while LLOGO's expect simply the item]. The
1022LISP LOGO run-time error handling works by utilizing the LISP error
1023interrupt facility.  If you don't like the way LLOGO handles any of
1024the error conditions, you are free to design your own error interrupt
1025handlers, either in LISP or in LOGO.
1026˜8.3 Breakpointsž
1027½7A powerful debugging aid is the ability to cause breakpoints.
1028Stopping a program in the process of being evaluated allows the user
1029to examine and modify its state, and explore the history of evaluation
1030which led up to the breakpoint.  LISP provides excellent facilities
1031for doing this, including automatic generation of breakpoints when an
1032error occurs. Whenever LISP starts to evaluate a form, it first pushes
1033the form on a stack; from a breakpoint one can examine the stack to
1034determine what forms were in the process of being evaluated, and
1035perform evaluations relative to a particular stack frame. LISP LOGO
1036attempts to make these features easily available to the user, from
1037either LISP or LOGO.  Versions of these breakpoint functions are also
1038available which can run in an ordinary LISP, without the rest of the
1039LOGO environment.  The following facilities are available for causing
1040breakpoints:
1041LOGOBREAK <message> <condition> <return-value> {PAUSE}
1042½7The inputs are all optional, and are not evaluated.  Unless
1043<condition> is given and evaluates to NIL, LOGOBREAK causes the user
1044to enter a loop where LOGO commands can be typed and the results
1045printed. This is similar to the top level loop except that % is
1046printed as a prompter rather than ?; it is very much like repeatedly
1047evaluating PRINT RUN REQUEST. If <message> is present, it will be
1048printed out upon entry to the break point.  It also prints the form in
1049the current stack frame, which will be the call to LOGOBREAK if called
1050explicitly by the user. If the breakpoint happened because of an
1051error, the initial stack frame will be the one containing the form
1052which caused the error. LOGOBREAK tries wherever possible to print out
1053the current form as LOGO code before it enters a LOGO break point.
1054However, the current version is not always smart enough to distinguish
1055between LISP and LOGO frames on the stack, so you might occasionally
1056see what looks like internal LISP garbage there. If you go up far
1057enough, you are sure to find the LOGO code. A smarter version could
1058recognize the LISP frames and ignore them. The third input is a
1059default value for LOGOBREAK to return if it is CONTINUEd. [See
1060description of CONTINUE, below]. Caution: the breakpoint functions
1061described in this section use LISP's CATCH and THROW. Unlabelled
1062THROWs from inside a breakpoint loop are highly discouraged.
1063A
1064½7If control-A is typed at any time, even while a program is
1065running, it will cause an interrupt and a LOGO break point will be
1066entered.
1067LISP LOGO MEMO™65142Page 16837ß™53361November 29, 1980ß
1068Error Handling and Debugging™59281Section 8.3ß
1069LISPBREAK <message> <condition> <return value> {BREAK}
1070½7This is like LOGOBREAK, except that the loop is a LISP (PRINT
1071(EVAL (READ))) loop. This is especially useful when debugging a set of
1072LISP functions designed to run in LOGO. To access your LOGO variables
1073and user functions from inside a LISP break loop, prefix them with a
1074sharp sign ["#"].  LISP users note: you can interact with this break
1075loop as with the standard LISP BREAK function, except that it is set
1076up to allow use of the stack hacking functions described below. If $P
1077is typed, or (CONTINUE) invoked, the <return value> will be the value
1078of the call to LISPBREAK.
1079H
1080½7As in LISP, H typed at any time will interrupt and cause a
1081LISP breakpoint to be entered.
1082:ERRBREAK
1083½7If this variable is not NIL, when a run time error happens,
1084LOGOBREAK will be called automatically.  This gives you a chance to
1085find out what went wrong, and recover by CONTINUEing with a new piece
1086of data to replace the one that caused the error. It is initially set
1087to NIL. As in 11LOGO, the function DEBUG will also change whether
1088breakpoints occur on errors.
1089:LISPBREAK
1090½7Like :ERRBREAK, except that if set to something other than NIL,
1091when an error happens, LISPBREAK rather than LOGOBREAK will be called.
1092Initially set to NIL.
1093The following functions can be called from inside a breakpoint to
1094examine and manipulate the stack:
1095UP
1096½7Moves the breakpoint up one frame in the stack, printing out
1097the form which was about to be evaluated in that frame. This will be
1098the form which called the one which was last typed out by any of the
1099functions mentioned in this section.  Evaluation now takes place in
1100the new stack frame.  This means that all local and input variables
1101will have the values they did when that form was about to be
1102evaluated. However, side effects such as assignment of global
1103variables are not undone. Frames are numbered for the user's
1104convenience, from 0 increasing up to top level.
1105UP <number>
1106½7Goes <number> frames up the stack. Like doing UP, <number>
1107times. The <number> may be negative, in which case, the breakpoint is
1108moved down the stack rather than up.
1109UP <atom>
1110½7Goes up the stack until a call to the function whose name is
1111<atom> is found.
1112LISP LOGO MEMO™65142Page 16852ß™53361November 29, 1980ß
1113Error Handling and Debugging™59281Section 8.3ß
1114UP <atom> <number>
1115½7Goes up the stack until the <number>th call to <atom> is found.
1116Searches downward for the <number>th call to the specified function if
1117<number> is negative.
1118DOWN <atom> <number>
1119½7Like UP, except that it proceeds down the stack instead of up.
1120Both inputs are optional, and default as for UP, except that <number>
1121defaults to -1 instead of +1. If <number> is given it is equivalent to
1122UP ....  (-<number>).
1123PRINTUP <atom> <number>
1124½7Accepts inputs as does UP, but instead of moving the breakpoint
1125up the stack to the desired frame, all frames between the current one
1126and the one specified are printed out. This function is good for
1127getting a quick view of the stack in the immediate vicinity of the
1128breakpoint.  The breakpoint remains in the same frame as before. The
1129two inputs are optional, and default as for UP.
1130PRINTDOWN <atom> <number>
1131½7Like PRINTUP, except that the inputs are interpreted as for
1132DOWN rather than as for UP, that is, it prints frames going down the
1133stack.
1134EXIT <return-value>
1135½7Causes the current stack frame to return with the value
1136<return-value>. That is, the computation continues as if the form in
1137the current frame had returned with <return-value>. The input is
1138optional, and defaults to NIL.
1139CONTINUE <return-value> {CO}
1140½7Causes the frame of the originally invoked breakpoint to return
1141with the specified value. The input is optional.  Use CONTINUE to
1142return a new item of data from inside an error breakpoint; for
1143instance a new function name to use in place of one which was
1144undefined. Note that in many situations, for example from a user-
1145invoked breakpoint or from an error breakpoint which expects an item
1146to be returned as the value of the form which caused the error, if you
1147haven't moved the breakpoint around the stack, CONTINUE will be
1148identical to EXIT. If the input to CONTINUE is omitted, the default
1149return value specified by a third input to LISPBREAK or LOGOBREAK will
1150be returned as the value of the breakpoint. If no such default return
1151value was given, NIL will be returned.  $P can also be used to return
1152from the breakpoint, just as in a LISP breakpoint.  Note that this
1153works a bit differently from CONTINUE in 11LOGO as when the breakpoint
1154returns, execution continue from exactly the point at which it was
1155interrupted and not beginning with the next line of code.
1156Here's an example:
1157?MAKE 'ERRBREAK T
1158½38!Assure LOGO break happens!
1159½38!when an error occurs!
1160;CHANGING A SYSTEM NAME
1161LISP LOGO MEMO™65142Page 16864ß™53361November 29, 1980ß
1162Error Handling and Debugging™59281Section 8.3ß
1163T
1164?TO SCREWUP :N½38!Define our losing procedure.!
1165>1 IF :N=0 THEN OUTPUT :UNBOUND
1166½38!Count down to 0, then!
1167>2 OUTPUT SCREWUP :N-1
1168½38!eval variable which  has no val
1169>END
1170;SCREWUP DEFINED
1171?SCREWUP 3
1172;ERROR IN LINE 1 OF SCREWUP
1173;LINE 1 IS: IF :N=0 THEN OUTPUT :UNBOUND
1174;:UNBOUND IS AN UNBOUND VARIABLE
1175;BREAKPOINT FRAME 0: :UNBOUND
1176%:N½38!Frame 0 is the variable. Eval w
11770½38!working on this when we bombed!
1178½38!We can do any command!
1179½38!while in the breakpoint.!
1180%UP½38!Going up a frame. :UNBOUND!
1181;BREAKPOINT FRAME 1: OUTPUT :UNBOUND
1182½38!was the input to OUTPUT!
1183%DOWN½38!going down a frame.!
1184;BREAKPOINT FRAME 0: :UNBOUND
1185%UP 'SCREWUP
1186;BREAKPOINT FRAME 4: SCREWUP :N-1
1187½38!we arrive at recursive invocati
1188%:N½38!where :N had the value 1!
11891
1190%UP 'SCREWUP 2½38!If we rise past 2 calls to SCRE
1191;BREAKPOINT FRAME 10: SCREWUP :N-1
1192%:N½38!:N was 3.!
11933
1194%EXIT 'SCREWED½38!We decide for some reason!
1195SCREWED½38!that SCREWUP of 2 is !
1196?½38!to return the value 'SCREWED!
1197½38!and all the previous invocation
1198½38!of SCREWUP return with the valu
1199½38!'SCREWED and we are at top leve
1200½38!Wasn't that fun?!
1201˜8.4 Wrong Number of Inputs Errorsž
1202½7Since LOGO syntax requires that the parser know how many inputs
1203a function requires, and LLOGO parses your input as you type it in,
1204errors may be generated if you change the number of inputs a function
1205takes by redefining the function, or by calling EDITTITLE. Calls to
1206that function which you typed previously are now incorrectly parsed.
1207LLOGO will catch most occurrences of this when the function is called,
1208and print a message like:
1209          ;REPARSING LINE <number> OF <procedure> AS: <new parse>
1210and attempt to recover. LLOGO always attempts to reparse a line which
1211caused a wrong number of inputs error. It is not always possible to
1212win, however, as side effects may have occurred before the error was
1213detected.
1214LISP LOGO MEMO™65142Page 16873ß™53361November 29, 1980ß
1215Error Handling and Debugging™59281Section 8.4ß
1216˜8.5 Garbage Collector Errorsž
1217½7Versions of LLOGO running in BIBOP LISP [LISPs with the
1218capability of dynamically allocating storage] have special handlers
1219for garbage collector interrupts. If it decides you have used too much
1220storage space of a particular type, or too much stack space, it will
1221stop and politely ask if you wish more to be added. If you see these
1222questions repeated many times in a short span of time while running
1223one program you should give serious consideration to the possibility
1224that your program is doing infinite CONSing or recursing infinitely.
1225˜8.6 Other Debugging Facilitiesž
1226½7The standard LISP TRACE package may be used to trace LLOGO
1227primitives or user functions. The tracer is not normally resident, but
1228is loaded in when you first reference it. See the LISP manual for
1229details on the syntax of its use and the various options available.
1230No LOGO step by step execution interpreter comparable to the 11LOGO
1231STEP facility exists, but stepping packages written for LISP can be
1232used in conjunction with LLOGO.
1233˜8.7 Interaction with LISPž
1234½7In debugging functions written in LISP for use in LLOGO, it is
1235often useful to be able to switch back and forth between LOGO and LISP
1236top level loops.  You can leave the LOGO top level loop and enter a
1237LISP READ-EVAL-PRINT loop by using the LLOGO function LISP. From this
1238mode, executing (LOGO) [remember to type the parentheses, you're in
1239LISP!] will return to LOGO. Typing control-uparrow [] at any time
1240will cause an interrupt and switch worlds; you will enter LISP if you
1241typed  from LOGO, or enter LOGO if you typed it from LISP.  The LISP
1242loop gives you access to all internal LLOGO functions and global
1243variables, which are normally inaccessible from LOGO since they are on
1244a different obarray. LLOGO primitives and system variables are on both
1245obarrays, so they will be accessible from both LISP and LOGO, but LOGO
1246user functions and variables are on the LOGO obarray only. The
1247character sharp sign ["#"] is an obarray-switching macro; to access
1248LOGO user functions and variables from the LISP loop, prefix them with
1249a sharp sign.
1250½7
1251LISP LOGO MEMO™65142Page 16887ß™53361November 29, 1980ß
1252Error Handling and Debugging™59281Section 8.7ß
1253™2602˜Section  9.  Compiling LLOGO User Proceduresžß
1254½7LISP LOGO compiles a LOGO source program into LISP and it is
1255stored internally only as LISP code. Since this is the case, the LOGO
1256user has the capability of using the LISP compiler directly on his
1257LOGO programs, and obtain a substantial gain in efficiency, once his
1258programs are thoroughly debugged.  LISP LOGO provides an interface to
1259the LISP compiler which should make it unnecessary for the user to
1260worry about interacting with a separate program.
1261½7To compile all of the functions currently in the workspace, the
1262function COMPILE is available. [This does not include buried
1263procedures -- see Section 184.] It expects one word as input, to
1264name the file which will contain the compiled code. A second optional
1265input can specify a list of declarations to the LISP compiler. For
1266example,
1267          COMPILE FOO [DECLARE [FIXNUM :INTEGERVARIABLE]]
1268The names of the functions which are being compiled will be printed
1269out. The COMPILE function will start up the compilation and then
1270return. It will print another message when the compilation is
1271finished. A temporary output file [named .LOGO. OUTPUT] will be
1272written on the current directory and deleted after the compilation is
1273complete. The output file will have as first name the input to
1274COMPILE, and second file name FASL. [In the MULTICS implementation,
1275the temporary file will be named logo˜ žoutput and placed in the current
1276directory. The output file will appear in the working directory, with
1277one name, the input to COMPILE.] Since the LISP compiler must be
1278called up as a separate program, be careful about interrupting the
1279COMPILE function before it is finished [for instance, by G] as you
1280will not find yourself in LLOGO anymore.
1281½7The LOGO COMPILE function supplies declarations for LOGO
1282primitives. These should be sufficient to compile most LOGO programs
1283and the user need not supply any himself. Some of the declarations
1284include LISP macros which replace calls to LOGO primitives with calls
1285to their faster LISP counterparts for efficiency, and some
1286optimization is done.  For safety's sake, all variables are
1287automatically declared SPECIAL. However, the sophisticated user is
1288free to include DECLAREs to UNSPECIAL input or local variables which
1289he knows will not be referenced globally, or provide declarations
1290which will make use of the fast-arithmetic LISP compiler.
1291½7To load a compiled file into LLOGO, say READFILE <name> FASL.
1292This will load all the compiled functions which were compiled by
1293COMPILE <name>, and also restore the values of variables that were
1294defined at that time. The names of compiled functions will be kept on
1295a list called :COMPILED and not on :CONTENTS.  For debugging purposes,
1296you might want to read in both the compiled and interpreted
1297definitions of the same functions, and you can use the functions
1298FLUSHCOMPILED {FLC} and FLUSHINTERPRETED {FLI} to switch back and
1299forth between compiled and interpreted definitions.
1300½7A few warnings about compiling LOGO procedures: First, remember
1301that LOGO syntax requires that it be known how many inputs a function
1302expects, before a decision can be made as to how to parse a line of
1303LISP LOGO MEMO™65142Page 16905ß™53361November 29, 1980ß
1304Compiling LLOGO User Procedures™61311Section 9ß
1305LOGO code. If, when defining a procedure, you include a call to a
1306procedure which is not yet defined, parsing is delayed until run time
1307[see Section 6 and Section 3.2 of this memo for more details]. The
1308compiler, of course, cannot do anything reasonable with an unparsed
1309line of LOGO code, so all parsing must be completed by the time the
1310definition of any procedure is compiled. The COMPILE function attempts
1311to make sure this is the case. Therefore, it is an error to attempt to
1312compile a procedure which contains a call to a procedure which is not
1313a LOGO primitive and has not yet been defined.
1314½7Also, it must be remembered that compilation of LOGO
1315procedures, like those of LISP, is not "foolproof". It is not always
1316the case that a procedure which runs correctly when interpreted, will
1317be guaranteed to run correctly when compiled. Self-modifying
1318procedures, weird control structures, and in general procedures which
1319depend heavily on maintaining the dynamic environment of the
1320interpreter may fail to compile correctly without modification.
1321LISP LOGO MEMO™65142Page 16908ß™53361November 29, 1980ß
1322Compiling LLOGO User Procedures™61311Section 9ß
1323™3602˜Section  10.  Using Files in LLOGOžß
1324½7A file specification on ITS has four components. Each file is
1325named by two words, of up to six characters each, a device [almost
1326always DSK], and a directory name [usually the same as the user's
1327name]. You can refer to a file in LOGO by using anywhere from 0 to 4
1328words. If you leave out the name altogether, it will be assumed that
1329you are referring to the last file name mentioned. One word will be
1330taken as the first file name, and the second will default to >, which
1331means the highest numbered second file name which currently exists if
1332you are reading, or one higher if you are writing. Two words will be
1333taken as the two file names, and the directory and device will be
1334defaulted. If three names are given, the third will be assumed as the
1335directory name, and the device will be DSK. If four words are given,
1336the third is device and fourth is the directory. Here are some
1337examples:
1338[Assume that the current user name is ESG, and FOO 3 is the highest
1339numbered file with FOO as its first filename]
1340LOGO½39ITS [<fn1> <fn2> <dev>:<dir>;]
1341---------½39-------------------
1342READFILE FOO½39FOO > DSK:ESG; [FOO 3]
1343SAVE FOO½39FOO > DSK:ESG; [FOO 4]
1344READFILE FOO BAR½39FOO BAR DSK:ESG;
1345READFILE FOO BAR HENRY½39FOO BAR DSK:HENRY;
1346READFILE FOO BAR DSK HENRY½39FOO BAR DSK:HENRY;
1347½7See Section 556 and Section 812 for information about file
1348specifications on the MULTICS and TEN50 implementations. File
1349specifications are accepted by LOGO in the same format as on ITS, so
1350it may not be necessary to change any code to run on other
1351implementations.
1352˜10.1 Saving and Reading Filesž
1353½7There are two ways of storing LOGO programs on the disk for
1354later use. To store the contents of the current workspace [all user
1355functions and variables currently defined] on the disk in the form of
1356LOGO source code, use SAVE. It expects as input a file specification,
1357as discussed above. The file created will contain the contents of the
1358user's workspace, function definitions and MAKEs for variables,
1359exactly in the form that he would see if he did a PRINTOUT ALL.
1360½7Workspaces can also be saved in LISP format, as they are
1361represented internally by LOGO. This is accomplished by the function
1362WRITE which takes its inputs as does SAVE. Although the file created
1363will not be so pretty to look at if you print it, using WRITE produces
1364files which are considerably faster to reload, since the program does
1365not have to be reparsed. For long-term storage of programs, however,
1366it is recommended that you use SAVE rather than WRITE. Changes in the
1367implementation of LISP LOGO may result in changing the internal format
1368of LOGO programs, in which case, files created by WRITE would not
1369remain compatible, but files created by SAVE would remain so.
1370½7To reload a file from the disk, use the function READFILE {RF}.
1371LISP LOGO MEMO™65142Page 16922ß™53361November 29, 1980ß
1372Using Files in LLOGO™58201Section 10.1ß
1373This accepts a standard file specification, and reads it in, printing
1374the name of the file. READFILE does not care whether the file is in
1375SAVEd or WRITten form. If the file was created by SAVE, lines of code
1376will be printed out as they come in from the disk. For written files,
1377only the names of functions and values of variables will appear. If
1378you get annoyed at all this output, you can shut it up with W. LOGO
1379will return with a question mark when the loading is complete.
1380½7It is often convenient to treat a set of functions as a
1381"package" or "subsystem". For instance, you may have a set of your
1382favorite functions which you place in your initialization file, or a
1383set of functions designed for a specific purpose. When this is the
1384case, it is inconvenient to have all these functions written out when
1385you are working on additional procedures, or have to see their
1386definitions when you do a PRINTOUT ALL. That is, one would like a
1387method of having the package of functions available, but not
1388considered as part of the workspace by certain commands. You can do
1389this by using the function BURY. It takes unevaluated procedure names
1390as input, and will assure that the function is ignored by the
1391following commands: PRINTOUT PROCEDURES, PRINTOUT ALL, PRINTOUT
1392TITLES, ERASE PROCEDURES, ERASE ALL, SAVE, WRITE and COMPILE.
1393Otherwise the function is unaffected, and can be invoked, printed,
1394edited, etc. A list of the names of buried procedures is kept as the
1395value of the variable :BURIED. BURY ALL will BURY all currently
1396defined procedures, and ERASE BURY will undo the effect of a BURY.
1397˜10.2 Other File Commandsž
1398½7PRINTOUT FILE {POF} will print out the contents of a file.
1399ERASE FILE will cause the specified file to vanish [This has a safety
1400check to make sure you don't do anything you'll be sorry about]. These
1401take file names as above, except that if only one input is given to
1402ERASE it defaults to <, the least numbered second file name, again for
1403safety reasons. PRINTOUT INDEX {POI} will print out all the file names
1404in the directory specified by one word. USE will change the name of
1405the default directory.
1406LISP LOGO MEMO™65142Page 16943ß™53361November 29, 1980ß
1407Using Files in LLOGO™58201Section 10.2ß
1408™2002˜Section  11.  Differences between 11LOGO and LLOGOžß
1409½7LISP LOGO was originally written to be compatible with CLOGO, a
1410version of LOGO written in PDP10 assembler language. There now exists
1411a version of LLOGO which we believe to be "semantically compatible"
1412with the PDP11 version. By this we mean that the vocabulary is the
1413same -- any primitive in 11LOGO also exists in LLOGO and will
1414(hopefully) have the same meaning.  LLOGO in fact has many primitives
1415which do not exist in 11LOGO, as well as offering the user access to
1416the full capabilities of LISP. There are substantial differences
1417between LLOGO and 11LOGO with regard to file systems and error
1418handling, and somewhat less substantial differences in the editor,
1419turtle and music packages. These are described in detail in other
1420sections of this document. There are also are several less substantial
1421differences, not mentioned in the preceding discussions, and what
1422follows is an attempt to provide a reasonably complete list of the
1423knowledge that an experienced 11LOGO user would need to use LLOGO.
1424½7In 11LOGO, the double quote character " is used to specify that
1425the atom following it is not to be evaluated-
1426          ?PRINT "FOO
1427          FOO
1428It is like LISP's single quote, except that it also affects the LOGO
1429reader's decision about when to stop including successive characters
1430in forming the name of an atom. In
1431          ?PRINT :FOO+3
1432the plus sign is a separator character; it signals the end of the atom
1433:FOO just as if there was a space following :FOO. However, following a
1434double quote, the only separator characters recognized are space,
1435carriage return, and square brackets. Thus, in 11LOGO,
1436          ?PRINT "FOO+3
1437          FOO+3
1438½7In LLOGO, the user may use the LISP single quote to specify
1439that an atom or parenthesized list following the single quote is not
1440to be evaluated. The presence of the single quote does not change the
1441way LLOGO decides when an atom ends. In LLOGO,
1442          ?PRINT 'FOO+3
1443          ;THE INPUT 'FOO TO + IS OF THE WRONG TYPE
1444because the plus sign is still a separator character.  LLOGO uses the
1445double quotes as CLOGO does; they are always matched. If one s-
1446expression (atom or list) occurs in between double quotes, it is
1447quoted. If more than one occurs, the list containing them is quoted.
1448The correspondence between LLOGO double quoted expressions and LISP s-
1449expressions is as follows:
1450          "" ==> NIL
1451          "<atom>" ==> (QUOTE <atom>)
1452          "<s1> . . . .<sN>" ==> (QUOTE (<s1> . . . . <sN>))
1453          "(<s1> . . <sN>)"  ==> (QUOTE (<s1> . . . <sN>))
1454½7Square brackets in 11LOGO specify quoted lists.  Parentheses
1455LISP LOGO MEMO™65142Page 16950ß™53361November 29, 1980ß
1456Differences between 11LOGO and LLOGO™60361Section 11ß
1457are never used around lists as in LISP, but are only used to delimit
1458forms. LLOGO recognizes square brackets as well as LISP's parentheses
1459in denoting lists. The difference between brackets and parentheses in
1460LLOGO is that the brackets always denote list constants, and not
1461forms, and that the outer level of brackets is implicitly quoted:
1462          [[FOO BAR]] ==> (QUOTE ((FOO BAR)))
1463There is a minor pitfall in the current implementation: note that top
1464level parentheses implicitly quote the list, interior ones do not.
1465This does not always work, for instance when using RUN one may expect
1466interior lists also to remain unevaluated:
1467          ?PRINT [PRINT [FOO BAR]] ==> (PRINT '(PRINT (FOO BAR)))
1468          PRINT (FOO BAR)
1469          ?RUN [PRINT [FOO BAR]] ==> (RUN '(PRINT (FOO BAR)))
1470prints the value of the function FOO applied to input BAR.
1471½7Square brackets in 11LOGO also share with double quotes the
1472property described above of affecting the LOGO reader's decision on
1473ending the names of atoms. Within a square bracketed list in 11LOGO,
1474an atom is terminated only by a space, carriage return or bracket.
1475This property is not true of square brackets in LLOGO.  In LLOGO,
1476[FOO+3]is a list containing three elements, but in 11LOGO, it contains
1477only one element.
1478½7String quoting in LLOGO is accomplished using the dollar sign
1479character, $.  LLOGO will treat anything appearing between dollar
1480signs literally, with special characters devoid of any special
1481meaning. Within such a string, two consecutive dollar signs will be
1482interpreted as a single dollar sign.  So, $$$$ would be the word whose
1483name is a single dollar sign. $$ is the empty word. Rubout, editing
1484and interrupt characters cannot be quoted in this manner. Use the
1485ASCII function of LISP if you really need them.
1486½7The character sharp sign ["#"] in 11LOGO is used as a prefix
1487macro character which takes one input which must be a word, and
1488executes it as a procedure.  It is used where one wants to use a weird
1489name for a procedure, or a name already used by the system. Sharp sign
1490is used as an escape to call that procedure.  Thus, a procedure
1491defined in 11LOGO by TO "PRINT . . . would be called by #"PRINT, TO "3
1492. . . would be called by #"3, etc. In LLOGO, sharp sign is used as a
1493macro character which causes the next s-expression to be interned as
1494if it were read in LISP if you are in LOGO, or as if it was read by
1495LOGO if you are in LISP.  If you are in the LISP mode of LLOGO and
1496want to access your LOGO variables, you can say #:FOO, etc. The
1497conflict may be changed in the near future by altering LISP LOGO's
1498macro character to one that does not conflict with 11LOGO. Suggestions
1499welcome.
1500½7The Boolean [logical] constants in 11LOGO are TRUE and FALSE,
1501while in LLOGO, they are T and NIL, as in LISP.
1502½7The 11LOGO function LEVEL, which returns the current procedure
1503depth, is not implemented.
1504½7The character : in 11LOGO is treated as a macro "the value of
1505LISP LOGO MEMO™65142Page 16963ß™53361November 29, 1980ß
1506Differences between 11LOGO and LLOGO™60361Section 11ß
1507...". if A is bound to B and B is bound to C, then ::A is C.  In
1508LLOGO, variables set by MAKE are just LISP atoms beginning with the
1509character :, so ::A will be the value of the variable set by MAKE ":A"
1510<whatever>, etc. We are seriously considering changing this,
1511eliminating the incompatibility. The present setup requires MAKE to do
1512an expensive EXPLODE on the variable name, in order to create the word
1513which begins with a colon.
1514½7LLOGO expects to find only one form inside parentheses:
1515constructs like
1516          (FD 100 FD 50 SUM 4 5)
1517are prohibited. 11LOGO allows more than one form inside parentheses
1518under certain restrictions.
1519½7The 11LOGO procedure TEXT, which returns a list of lists which
1520are the lines of a procedure whose name is given as input, is not
1521implemented in LLOGO. However, you can access the definition of a
1522function in its parsed LISP form on the property list [CDR] of the
1523atom.
1524½7LLOGO understands two comment conventions: LISP's convention of
1525treating as a comment anything between a semicolon and the next
1526carriage return, and LOGO's of treating as a comment anything in
1527between exclamation points.  [The exclamation points must be matched,
1528and comments can be continued past the end of the line]. Anything
1529after exclamation points on a line is ignored.
1530½711LOGO forms are divided into two categories: those that output
1531[return a value] and those which do not. In LLOGO, as in LISP, every
1532form returns a value. To simulate 11LOGO and CLOGO in this respect, as
1533a special hack, forms which return a question mark do not have their
1534values printed by LLOGO's top level function. However, LLOGO cannot
1535catch the error of such a form hiding inside parentheses, as can
153611LOGO. Most of the primitives which do not return a value in 11LOGO
1537return ? in LLOGO.
1538½7The top level loop in LISP LOGO is a READ-EVAL-PRINT loop
1539whereas PDP11 LOGO is a READ-EVAL loop.  This means that 11LOGO prints
1540out only when you ask it to print unlike LLOGO which prints out values
1541after every evaluation of a LOGO form.
1542          ˜In 11LOGO:ž
1543          ?SUM 4 8
1544          YOU DONT SAY WHAT TO DO WITH 12
1545          ˜In LLOGO:ž
1546          ?SUM 4 8
1547          12
1548½7Line numbers can be any integer up to the maximum magnitude
1549allowed by 36 bits. Floating point, negative numbers and zero are
1550allowed also.  These are occasionally useful when you have to insert
1551lines before a line numbered 1 or between two consecutively numbered
1552lines.
1553½7LLOGO follows the LISP conventions for numerical input.  In
1554LISP LOGO MEMO™65142Page 16980ß™53361November 29, 1980ß
1555Differences between 11LOGO and LLOGO™60361Section 11ß
155611LOGO, a decimal point is an indicator of floating point input, even
1557if no fractional digits follow [like FORTRAN]. The LISP convention is
1558that an integer followed by a decimal point without any fractional
1559digits is considered as an integer base ten regardless of the setting
1560of the variable IBASE, which allows the numerical input radix to be
1561changed. The number is considered floating point only if some digits
1562follow the decimal point.  In 11LOGO, 1. is a floating point number,
1563but in LLOGO, it is an integer, and 1.0 is floating point one.  Also,
1564N is not used in LLOGO for negative exponent floating point input, as
1565in 11LOGO. E with a negative exponent following is the preferred form.
1566          ˜In 11LOGO:ž
1567          3.1415 N 4
1568          ˜In LLOGO:ž
1569          3.1415E-4
1570½7Percent sign (%) does not echo as a space. Carriage returns
1571within square-bracketed lists print out as such, not as spaces, as in
157211LOGO.
1573½7:EMPTY is the empty list, which is LISP's NIL. :EMPTYW is the
1574empty word, which is the LISP atom whose print name is (ASCII 0).
1575½7LISP LOGO and 11LOGO differ on the syntax for arrays.  LISP
1576LOGO uses the LISP array facility; to define an array use:
1577          ARRAY <name> T <dimension 1> . . . <dimension N>
1578Values can be stored by
1579          STORE <array name> <subscript 1> . . <subscript N> <value>
1580Values are accessed as if the array were a function, which expected
1581the same number of inputs as the number of dimensions in the array.
1582Arrays are not considered as part of your workspace in LLOGO, so you
1583can't do PRINTOUT ARRAYS, ERASE ARRAYS, etc.
1584½7The LLOGO function RANDOM, of no inputs, returns a random
1585floating point number, which is between zero and one.  If given two
1586arguments, it returns a random number between its first and second
1587argument, inclusive.  If both its inputs are fixed point, it returns a
1588fixed point number, otherwise it returns a floating point number.
1589(RANDOM 0 9) behaves as 11LOGO RANDOM.
1590½7ROUNDOFF in LLOGO takes either one or two inputs. If given one
1591input, the number is rounded to an integer, otherwise it is rounded to
1592as many places to the right of the decimal point as specified by the
1593second input.
1594½7The TIME function returns real time in seconds, not sixtieths
1595of a second, as in 11LOGO.
1596½7LOCAL variables are handled differently in LLOGO than in
159711LOGO.  Regardless of where a LOCAL statement is placed in a
1598procedure, the variables declared will be local to the entire
1599procedure. This corresponds to a PROG variable in LISP.  LOCAL accepts
1600any number of variable names as input.
1601½7Inserting lines into procedures under program control should be
1602LISP LOGO MEMO™65142Page 17000ß™53361November 29, 1980ß
1603Differences between 11LOGO and LLOGO™60361Section 11ß
1604done using the function INSERTLINE. In 11LOGO, the following will
1605insert a line into BLETCH when MUNG is executed:
1606          ?TO MUNG
1607          >10 EDIT BLETCH
1608          >20 10 PRINT [NEW LINE ADDED TO BLETCH]
1609          >END
1610This will not work in LLOGO. Instead replace line 20 with:
1611          >20 INSERTLINE 10 PRINT [NEW LINE ADDED TO BLETCH]
1612½7None of the 11LOGO special commands whose names begin with a
1613period are implemented in LLOGO, although there are occasionally LISP
1614functions with different names and semantics which can be made to do
1615the same thing.
1616½7There is a memo by Wade Williams which explains some of the
1617finer points of 11LOGO syntax, and should be consulted for further
1618information. The 11LOGO User's Manual should also be of assistance.
1619LISP LOGO MEMO™65142Page 17004ß™53361November 29, 1980ß
1620Differences between 11LOGO and LLOGO™60361Section 11ß
1621™3302˜Section  12.  Using LLOGO on MULTICS žß
1622½7LISP LOGO has now been implemented on MULTICS, and this is the
1623only version of LOGO available for that system. Below are instructions
1624for using it, and a list of differences between the MULTICS and ITS
1625versions. Except for the differences in file naming conventions, and
1626limitations imposed by the operating system, source language programs
1627should be entirely compatible. For more information on MULTICS LISP,
1628see the MACLISP Reference Manual by Dave Moon.
1629½7The LISP LOGO music package is available for use on MULTICS.
1630See Section 687 for more details. The display turtle and GERMLAND
1631packages are not available in the MULTICS implementation. MULTICS does
1632not have adequate facilities for using displays such as the 340 and
1633the GT40. It probably would be possible to implement a rudimentary
1634turtle package for the storage type displays on MULTICS such as the
1635ARDS and TEKTRONIX terminals, but we have no plans to do so at
1636present.
1637˜12.1 Where To Find Itž
1638½7To obtain LISP LOGO, you must first create a link to the
1639necessary files.  After you log in, type
1640          link >udd>ap>lib>logo
1641This needs to be done only once for each user. Subsequently, you can
1642get LLOGO simply by typing
1643          logo
1644You should then get a message indicating the version numbers of LISP
1645and LOGO, as on ITS, and the allocator will ask you if you want to use
1646the music box.  If you have a file in your directory named start˜
1647˜žup.logo it will be read in as an initialization file.
1648˜12.2 File Naming Conventionsž
1649½7An ITS file specification consists of two file names of up to
1650six characters each, a device and directory name. A file specification
1651on MULTICS is called a "pathname", and consists of arbitrarily many
1652components each naming a node in a tree structure of directories and
1653segments [files]. The components of a MULTICS pathname are separated
1654by ">" characters. Any pathname beginning with ">" is considered to be
1655a full pathname, i.e. start at the root of the tree, otherwise, it is
1656considered to be relative to the directory which is currently the
1657default. This will usually be something like ">udd>your-project-
1658name>your-user-name".  File names are assumed also to have two
1659components as on ITS and you type them into to LOGO the same way, as
1660two words, except that each word is not limited to six characters. The
1661default second file name is "logo", not ">", to be consistent with
1662MULTICS conventions. In your directory, the two file names will appear
1663separated by a ".". Files whose second names are "fasl" are assumed to
1664contain object code produced by the LISP compiler. This will
1665correspond to the file with only the first name [no second component]
1666LISP LOGO MEMO™65142Page 17020ß™53361November 29, 1980ß
1667Using LLOGO on MULTICS ™58231Section 12.2ß
1668in your directory. Here are some examples: [assume your name is
1669"person" and your project is "project"]
1670LOGO file name½34MULTICS file name
1671--------------½34-----------------
1672readfile foo½34>udd>project>person>foo.logo
1673readfile foo bar½34>udd>project>person>foo.bar
1674readfile foo fasl½34>udd>project>person>foo
1675readfile foo bar mumble½34>udd>project>person>mumble>foo.bar
1676readfile foo bar >udd>llogo½34>udd>llogo>foo.bar
1677˜12.3 Terminalogyž
1678½7On MULTICS, control characters are entered to LISP by first
1679hitting the break or attn key [if you have one] and LISP should type
1680CTRL/, then typing the ordinary non-control character, then a carriage
1681return. MULTICS has no other way of acknowledging your existence
1682before you hit a return, which is the reason for this kludge. Because
1683of this the control-character line oriented editor which exists in the
1684ITS implementation, does not exist in the MULTICS implementation.
1685MULTICS uses # to rub out the previous character, and @ to rub out the
1686entire line. To enter these characters to LLOGO, precede them with \.
1687½7If you should have to use an IBM 2741 terminal, remember that
1688certain characters must be escaped. The worst offenders are [ and ]
1689(type <cent-sign> <less-than> for [ and <cent-sign> <greater-than> for
1690]), type <not-sign> for , <cent-sign> <cent-sign> for |, and type a
1691<cent-sign> before # and @. Upper and lower cases are distinguished on
1692MULTICS, and all of the system functions, both MULTICS's and LLOGO's,
1693have lower case names.
1694½7To use LISP LOGO on MULTICS over the ARPANET from ITS, it is
1695recommended that Dave Moon's program TN6 be used rather than TELNET.
1696See DSK:.INFO.;TN6 INFO for more details.
1697LISP LOGO MEMO™65142Page 17028ß™53361November 29, 1980ß
1698Using LLOGO on MULTICS ™58231Section 12.3ß
1699™1802˜Section  13.  Using LLOGO on TEN50 and TENEX systemsžß
1700½7The version of LLOGO for TEN50 runs in a version of MACLISP
1701that is nearly compatible with that used at MIT-AI. The TEN50 version
1702can also be used on TENEX systems.  Most of the incompatibilities are
1703those necessitated by the difference in operating systems.
1704Specifically, the following commands are not implemented:
1705          PRINTOUT INDEX (alias POI, LIST FILES)
1706          LOGOUT (BYE)
1707          COMPILE
1708          LINEPRINT
1709          BUG
1710Also, the special packages for LLOGO (the turtle primitives, the music
1711primitives, and GERMLAND) are unavailable.
1712½7Another difference between TEN50 LLOGO and LLOGO on ITS is in
1713the typing of control characters (such as G, H, and all the editing
1714characters - R E etc.). on ITS these characters may be typed at any
1715time. Those specifying an interrupt action (G, H) will always take
1716effect immediately.  Unfortunately, this is not true in the TEN50
1717implementation, because TEN50 allows a running program to be
1718interrupted only by the character C.  As a result of this, if the
1719user wants to interrupt the LLOGO system while it is running (e. g.
1720executing a user defined function), he must first type C. This will
1721interrupt the program, and cause it to print ?, indicating that it is
1722waiting to read a control-character.  The user may then type the
1723desired control-character, and it will be acted upon. Note that typing
1724C is not necessary if the LLOGO system is not running, but rather
1725waiting for input. Therefore the editing characters may be used
1726without difficulty, even on the TEN50 system.
1727½7Another minor difference between the two operating systems is
1728in the notation for file names. This difference is minimized by the
1729syntax used by the LLOGO file commands. For instance, the command
1730          ?READFILE PROGRM LGO DSK USER
1731will read the file DSK:USER; PROGRM LGO on ITS, while on TEN50 the
1732file read will be DSK:PROGRM.LGO[USER].  Thus most user programs will
1733be able to run with little or no modification to their input/output
1734operations. (Note that the default second file name is > on ITS, while
1735on TEN50 it is LGO.) If you want to use a LLOGO initialization file
1736with the TEN50 implementation, the name of the file should be INIT.LGO
1737on your user directory.
1738½7A version of TEN50 LLOGO is currently available at Carnegie-
1739Mellon (CMU-10B). It may be loaded there by means of the following
1740command:
1741          .RUN DSK:LOGO[A480LG99]
1742LISP LOGO MEMO™65142Page 17053ß™53361November 29, 1980ß
1743Using LLOGO on TEN50 and TENEX systems™60381Section 13ß
1744™4802˜Section  14.  GERMLANDžß
1745½7The GERMLAND package is designed to provide the user with a
1746display environment in which interesting nontrivial questions can
1747easily be investigated, without the need for sophisticated display
1748equipment. The current implementation runs on any of the character
1749display consoles in use at the A.I. laboratory.
1750½7Conceptually, GERMLAND consists of a square grid, on which may
1751"live" as many as 10 "germs".  Each germ may have an arbitrary LOGO
1752program associated with it; this program determines the germ's
1753movements, as well as whether it eats any of the "food" present at its
1754position of the grid. For a discussion of some of the problems that
1755can be investigated in this environment, see LOGO working paper 7.
1756˜14.1 Starting Upž
1757½7The GERMLAND package may be loaded automatically at the start
1758of an LLOGO run.  When started, LLOGO will ask which of the special
1759packages you want.  Simply type YES, followed by a carriage return,
1760when it asks whether you want GERMLAND.  The GERMLAND package will
1761then be loaded, and give you instructions for further help. Note that
1762if the grid becomes garbled, because of a transmission error for
1763instance, you can at any time cause it to be redisplayed by typing the
1764character \ [control-backslash].
1765˜14.2 Toplevel Primitivesž
1766RUNGERM
1767½7Invokes prompter.  Asks questions necessary to get started and
1768offers help.
1769GERMDEMOS
1770½7Runs a series of demos, leaving the demo programs available for
1771the user to play with.
1772TOPGERM
1773½7Starts up a GERMLAND READ-EVAL-PRINT loop, using the grid set
1774up by the most recent call to RUNGERM.
1775UNGRID
1776½7Exits from TOPGERM, back to LLOGO.
1777REPEAT <program1> <program2> ...
1778½7Each program defines one creature.  A round consists of
1779executing each program in turn.  After each round, the program waits
1780for input.  If the user types a space, one round is performed; if the
1781user types a number, that many rounds are done.  This is repeated
1782indefinitely until an error occurs.  REPEAT is not subtle with respect
1783to parallel processing.  No effort is made to try each program and see
1784LISP LOGO MEMO™65142Page 17067ß™53361November 29, 1980ß
1785GERMLAND™5881Section 14.2ß
1786whether any conflicts occur.  However, eventually a more elaborate
1787version could be designed that was sensitive to synchronizing the
1788lives of the germs.  If no programs are passed to REPEAT, it attempts
1789to use the programs associated with each germ by RUNGERM.
1790˜14.3 Grid Primitivesž
1791GRID <number>
1792½7Initializes GERMLAND.  A square grid is created with <number>
1793squares in a side.
1794PRINTGRID
1795½7Clear screen and redisplay GERMLAND grid.  Typing \ also
1796causes this to happen.  If there is a germ on the square, the
1797character which represents that germ is printed in the square's
1798position.  If the square is an obstacle, an "X" is printed.  If there
1799is food on the square, the number of particles is printed.  If the
1800square is empty, a "." is printed.
1801GRIDP <position>
1802½7A predicate which outputs T iff the position is a legitimate
1803grid square.
1804WRAP
1805½7Go into "wraparound" mode, in which germs are allowed to go
1806across the boundaries of the grid.
1807NOWRAP
1808½7Leave "wraparound" mode.
1809Note that WRAP and NOWRAP affect the variable :WRAPAROUND. See Page
1810752.
1811MOVE <position>
1812½7The germ is moved to the specified grid square.  <position> is
1813a sentence of the x and y coordinates of the square.  Typical use is:
1814MOVE NORTH.  If the germ moves to a square which is already inhabited,
1815the former inhabitant is killed.  MOVE prints an error message if an
1816attempt is made to MOVE to a square with an obstacle on it, or a
1817square outside the grid.  The <position> does not have to be adjacent
1818to the current location of the germ.  Hence, MOVE allows non-local
1819movement to any grid square.
1820STEP <direction>
1821½7<direction> is interpreted as a heading.  It must be either 0,
182290, 180 or 270 (mod 360).  STEP allows more elegance in the
1823description of a germ program.  If the same structure is used for all
1824directions, then the program can call a subprocedure whose input is
1825cycled through the four directions.
1826LISP LOGO MEMO™65142Page 17079ß™53361November 29, 1980ß
1827GERMLAND™5881Section 14.3ß
1828˜14.4 Property Primitivesž
1829PUTSQUARE <position> <information> <property>
1830½7For the specified grid square, the data stored under the given
1831property is set to <information>.
1832GETSQUARE <position> <property>
1833½7The information stored under the <property> is returned.
1834Typical uses are:
1835½7(GETSQUARE <position> 'FOOD) returns food at <position>.
1836½7(GETSQUARE <position> 'INHABITANT) returns the number of the
1837germ currently living there, NIL if unoccupied.
1838½7(GETSQUARE <position> 'OBSTACLE) returns T iff the square is an
1839obstacle.
1840REMSQUARE <position> <property>
1841½7Removes information stored under <property>.
1842WHAT <position>
1843½7Outputs all of the information stored for the given position.
1844FOOD <position>
1845½7Outputs the number of food particles at the given position.
1846FOOD returns 0, not NIL, when there is no food.
1847FOODP <position>
1848½7Predicate which returns number of food particles if any at the
1849given position; NIL if none.
1850FILLFOOD <n>
1851½7Puts <n> morsels of food on each square of GERMLAND.
1852EAT <number>
1853½7Subtracts <number> of food particles from the current square.
1854Generates an error if <number> is larger than the total food
1855available.  There are two types of germs -- those that are hungry and
1856those that are not.  Each hungry germ has a food supply associated
1857with it.  The food supply is increased every time he eats by that
1858number of particles, and decreased by one for each generation.  If it
1859ever reaches zero, the germ dies.  So, if he eats only one particle of
1860food on a turn, he must eat again on the next turn; if he eats 2, he
1861can skip a turn without eating, etc.
1862LISP LOGO MEMO™65142Page 17092ß™53361November 29, 1980ß
1863GERMLAND™5881Section 14.4ß
1864˜14.5 Multiple Germ Primitivesž
1865WHERE <:germ>
1866½7Returns the coordinates of the square that :germ is currently
1867inhabiting.
1868NORTHP <:germ>
1869½7Returns true only if the x coordinate of :germ is greater than
1870the X coordinate of the germ whose program is currently being executed
1871by REPEAT.
1872SOUTHP
1873WESTP
1874EASTP
1875½7Analogous to NORTHP.
1876KILL <:germ>
1877½7Assassinates <:germ> and prints eulogy.
1878GERM <:germ> <square>
1879½7Initializes :germ to start out located at <square>.  :germ is
1880an integer between 1 and 10.
1881FOODSUPPLY <:germ>
1882½7Returns the amount of food that the germ has.
1883ACCESSIBLE <square> <:germ>
1884½7True if and only if <:germ> can get to <square> on his next
1885move.
1886˜14.6 Turtle Primitivesž
1887HEADING <:germ>
1888½7Returns the current heading of the germ.
1889FORWARD <number>
1890½7Move <number> spaces in the direction of the current heading.
1891Abbreviates to FD <number>.  <number> may be negative.
1892BACK <number>
1893½7Move <number> spaces opposite to the current heading.
1894Abbreviates to BK <number>.
1895LISP LOGO MEMO™65142Page 17109ß™53361November 29, 1980ß
1896GERMLAND™5881Section 14.6ß
1897NEXT <direction>
1898½7Returns the coordinates of the next square in the current
1899direction.
1900RIGHT <number>
1901½7Turn right <number> degrees--<number> should be a multiple of
190290.  This may be abbreviated as RT <number> .
1903LEFT <number>
1904½7Equivalent to RIGHT -<number>.  Abbreviates as LT <number>.
1905FRONT {FSIDE}
1906½7Returns coordinates of the square in front of the turtle.
1907RIGHTSIDE {RSIDE}
1908REAR {BSIDE }
1909LEFTSIDE {LSIDE}
1910½7Analogous to FRONT.
1911˜14.7 Touch Primitivesž
1912TOUCH <position>
1913½7Outputs NIL if <position> does not contain something that can
1914be touched.  Otherwise it outputs an atom describing the touchable
1915object, e.g.  BORDER or OBSTACLE.  Typical use is: TOUCH FRONT.
1916OBSTRUCT <square>
1917½7Puts an obstacle at <square>.  Germs cannot move onto squares
1918with obstacles.
1919DESTRUCT <square>
1920½7Removes obstacle at <square>.
1921˜14.8 Global Variablesž
1922:GERM
1923½7The number of the germ whose program is being executed by
1924REPEAT.
1925LISP LOGO MEMO™65142Page 17129ß™53361November 29, 1980ß
1926GERMLAND™5881Section 14.8ß
1927:GRIDSIZE
1928½7Size of the GERMLAND grid set by the GRID function.
1929:HUNGRY
1930½7T => Germs are killed if their foodsupply goes to 0.
1931½7NIL => A germ's foodsupply is ignored by REPEAT.
1932:WRAPAROUND
1933½7T => Motion across borders is permitted.
1934½7NIL => Motion across borders is an error.
1935½7The user should never change :WRAPAROUND directly.  Use WRAP
1936and NOWRAP to change modes.
1937˜14.9 Implementationž
1938½7GERMLAND uses an array to represent the grid, and additional
1939arrays for easy access to information about a particular germ. The
1940individual primitives are, for the most part, straightforwardly
1941implementable, given this data representation. Some care is taken in
1942interfacing with the standard LLOGO environment, so that all the usual
1943debugging features of LLOGO may be used in the development of germ
1944programs, without interference with the display of the grid.
1945LISP LOGO MEMO™65142Page 17136ß™53361November 29, 1980ß
1946GERMLAND™5881Section 14.9ß
1947™2102˜Section  15.  Display Turtle for the 340 and GT40žß
1948½7The display turtle package for the 340 and GT40 displays is
1949also usable from an ordinary LISP as well as from LLOGO. Do (FASLOAD
1950TURTLE FASL DSK LLOGO).
1951˜15.1 Starting The Displayž
1952STARTDISPLAY {SD}
1953½7Initializes the screen.  The turtle is displayed at its home,
1954the center of the screen. This command is also useful for restarting
1955everything when things get fouled up, the PDP6 loses, etc.
1956STARTDISPLAY 'GT40 uses the GT40 display rather than the 340 display.
1957If you are using the GT40 as a display for the LOGO turtle, it must
1958not be logged in to ITS as a console.
1959NODISPLAY {ND}
1960½7Says you want to stop using the display.  Flushes the display
1961slave.
1962If the display slave for the PDP-6 dies, check that the run light is
1963on.  If not, stop, io reset, deposit 0 in 40 and 41 and then start.
1964LISP has three control characters for the display:
1965N
1966½7Turns off display.
1967Y
1968½7Display prints like tty.
1969F
1970½7Turns on display for turtle, assuming a prior call to
1971STARTDISPLAY.
1972˜15.2 The Turtlež
1973HIDETURTLE {HT}
1974½7Makes the turtle disappear.
1975SHOWTURTLE {ST}
1976½7Brings the turtle back to life.
1977LISP LOGO MEMO™65142Page 17156ß™53361November 29, 1980ß
1978Display Turtle for the 340 and GT40™58351Section 15.2ß
1979TURTLESTATE
1980½7Returns 0 if the turtle is not displayed, else returns the
1981value of :TURTLE. :TURTLE is the number of the display item which is
1982the current turtle.
1983MAKTURTLE <code>
1984½7The current turtle is replaced by the picture drawn by <code>.
1985Provides capability to rotate pictures. Subsequent turtle commands,
1986like FORWARD, RIGHT, etc. will make the picture drawn by <code> move
1987as if it were the original turtle [triangle].
1988OLDTURTLE
1989½7Restores the original LLOGO turtle.
1990˜15.3 Moving the Turtlež
1991FORWARD <steps> {FD}
1992½7Moves the turtle <steps> in the direction it is currently
1993pointed.
1994BACK <steps> {BK}
1995½7Moves the turtle <steps> opposite to the direction in which it
1996is pointed.
1997SETX <x>
1998½7Moves the turtle to (<x>, YCOR).
1999SETY <y>
2000½7Moves the turtle to (XCOR, <y>).
2001SETXY <x> <y>
2002½7Moves the turtle to (<x>, <y>).
2003DELX <dx>
2004½7Moves turtle to (XCOR+<dx>, YCOR).
2005DELY <dy>
2006½7Moves turtle to (XCOR, YCOR+<dy>).
2007DELXY <dx> <dy>
2008½7Moves turtle to (XCOR+<dx>, YCOR+<dy>).
2009LISP LOGO MEMO™65142Page 17172ß™53361November 29, 1980ß
2010Display Turtle for the 340 and GT40™58351Section 15.3ß
2011HOME {H}
2012½7Moves turtle home to its starting state.
2013˜15.4 Erasing the Screen ž
2014WIPE
2015½7Erases the picture on the screen. Does not affect the turtle,
2016or any snaps.
2017WIPECLEAN {WC}
2018½7Like WIPE, except hides snaps also.
2019CLEARSCREEN {CS}
2020½7Equivalent to WIPE HOME.
2021˜15.5 Turning the Turtlež
2022RIGHT <angle> {RT}
2023½7Turns the turtle clockwise <angle> degrees.
2024LEFT <angle> {LT}
2025½7Turns the turtle counter-clockwise <angle> degrees.
2026SETHEAD <angle>
2027½7The turtle is turned to a heading of <angle>.
2028˜15.6 Examining the Turtle's Statež
2029Note: The turtle's home is (0, 0) and a heading of 0 corresponds to
2030pointing straight up.  The variables :XCOR, :YCOR and :HEADING
2031describe the state of the turtle in floating point.  These variables
2032should not be changed explicitly by the user.  The following functions
2033return components of the turtle's state rounded to the nearest
2034integer.
2035XCOR
2036½7Outputs the X coordinate of the turtle.
2037YCOR
2038½7Outputs the Y coordinate of the turtle.
2039HEADING
2040½7Outputs the heading of the turtle.
2041LISP LOGO MEMO™65142Page 17195ß™53361November 29, 1980ß
2042Display Turtle for the 340 and GT40™58351Section 15.6ß
2043XHOME
2044½7Outputs the X coordinate of the turtle's home in absolute scope
2045coordinates (i.e. relative to lower left-hand corner of the screen)
2046YHOME
2047½7Outputs the Y coordinate of the turtle's home in absolute scope
2048coordinates.
2049˜15.7 The Penž
2050PENDOWN {PD}
2051½7Pen lowered to paper.  Turtle leaves a track when moved.
2052PENUP {PU}
2053½7Pen raised from paper.  Turtle does not leave a track when
2054moved.
2055PENSTATE
2056½7Returns +1 = penup or -1 = pendown
2057PENSTATE <1 or -1>
2058½7Sets the penstate.  A common use for this primitive is to make
2059a sub-procedure transparent to pen state.
2060PENP
2061½7T if pen is down, else NIL.
2062HERE
2063½7Outputs (SENTENCE XCOR YCOR HEADING). Useful for remembering
2064location via MAKE "P" HERE.
2065SETTURTLE <state> {SETT}
2066½7Sets the state of the turtle to <state>. <state> is a sentence
2067of X coordinate, Y coordinate, and heading. The heading may be
2068omitted, in which case it is not affected.
2069RANGE <p>
2070½7Distance from the turtle's current location to <p>.  <p> is a
2071point specified by a sentence of X and Y coordinates.
2072BEARING <p>
2073½7Outputs absolute direction of <p> from turtle.
2074LISP LOGO MEMO™65142Page 17211ß™53361November 29, 1980ß
2075Display Turtle for the 340 and GT40™58351Section 15.7ß
2076TOWARDS <p>
2077½7Outputs relative direction of <p> from turtle.
2078˜15.8 Global Navigationž
2079Note: These primitives return floating point if either of their inputs
2080are floating point.
2081RANGE <x> <y>
2082½7Outputs distance of turtle from the point (<x>, <y>).
2083BEARING <x> <y>
2084½7Outputs absolute direction of (<x>, <y>) from turtle.  (SETHEAD
2085(BEARING <x> <y>)) points the turtle in the direction of (<x>,<y>).
2086TOWARDS <x> <y>
2087½7Outputs relative direction of (<x>, <y>) from turtle.  (RIGHT
2088(TOWARDS <x> <y>)) points the turtle in the direction of (<x>, <y>).
2089˜15.9 Trigonometryž
2090COSINE <angle>
2091½7Cosine of <angle> degrees.
2092SINE <angle>
2093½7Sine of <angle> degrees.
2094ATANGENT <x> <y>
2095½7Angle whose tangent is <x>/<y>.
2096[SIN, COS, and ATAN are the corresponding functions which input or
2097output in radians]
2098˜15.10 Textž
2099SHOWTEXT
2100½7Subsequent printing is moved on the screen.  Initially,
2101printing begins in the upper left corner.
2102HIDETEXT
2103½7Subsequent printing is no longer displayed.  Text currently on
2104the screen remains.
2105LISP LOGO MEMO™65142Page 17224ß™53361November 29, 1980ß
2106Display Turtle for the 340 and GT40™57351Section 15.10ß
2107REMTEXT
2108½7Any text on the screen is erased and subsequent printing is not
2109displayed.
2110:SHOW
2111½7A variable which is T if printing is being displayed, NIL if
2112not. Set by SHOWTEXT, HIDETEXT, and REMTEXT. Don't set it yourself.
2113:TEXT
2114½7Variable containing the number of the display item which is the
2115text displayed by SHOWTEXT, etc.
2116MARK <x>
2117½7 (TYPE <x>) is placed at the turtle's current location.  SNAP
2118"title" MARK "text" creates a snap of the word "text".  This allows
2119the word to be manipulated, i.e.  Moved to any part of the screen,
2120etc.
2121:TEXTXHOME
2122:TEXTYHOME
2123½7Variables containing coordinates of text to be displayed on the
2124screen. Changeable by user.  Initially :TEXTXHOME= 0., :TEXTYHOME=
21251000.  These are in absolute scope coordinates.
2126˜15.11 Manipulating Scenesž
2127Note: :PICTURE is the name of the turtle's track.  Does not include
2128any snaps displayed via SHOW, SHOWSNAP, etc.  :TURTLE is the name of
2129the turtle.  :TEXT is the name of any text displayed via SHOWTEXT.
2130SHOW <scene>
2131½7<scene> is moved to the current position of the turtle and
2132displayed. It is not copied.
2133HIDE <scene>
2134½7<scene> is hidden but not destroyed.
2135PHOTO <scene> {SNAP}
2136½7The current picture is copied and named <scene>.  Any old snap
2137of this name is destroyed.
2138PHOTO <scene> <line> {SNAP}
2139½7The picture drawn by <line> is named <scene>.
2140LISP LOGO MEMO™65142Page 17240ß™53361November 29, 1980ß
2141Display Turtle for the 340 and GT40™57351Section 15.11ß
2142ENTERSNAP <scene>
2143½7:PICTURE is rebound to a fresh display item.  The initial state
2144of this item hides the turtle.  Subsequent commands refer to this new
2145item.
2146ENDSNAP
2147½7The original :PICTURE is restored.
2148RESNAP <scene>
2149½7<scene> is made the current picture. The only difference
2150between this and ENTERSNAP <scene> is that a new display item is not
2151created, and the turtle is not hidden. ENDSNAP also restores the
2152original :PICTURE.
2153RESNAP <scene> <line>
2154½7The picture drawn by <line> is added to <scene>. The <line> is
2155executed, referring to the turtle residing in <scene>. Subsequent
2156commands will refer to the old turtle.
2157PICTURE <display commands>
2158½7:PICTURE is bound to a new display item while the commands are
2159executed.  The original :PICTURE is restored following execution of
2160the commands.  Similar to SNAP <scene> <commands> except that no name
2161is given to the new item.  Instead, the number of the item is
2162returned.  Thus, the same effect is achieved by:
2163          SNAP <scene> <commands> or
2164          MAKE <scene> PICTURE <commands>
2165Except that <scene> is not added to the list of snaps.
2166SHOWSNAP <scene>
2167½7A copy of <scene> is displayed at the turtle's current
2168position.
2169HIDESNAP <scene>
2170½7All copies of <scene> are hidden.
2171ERASE <scene>
2172½7All copies of <scene> are destroyed.
2173:SNAPS
2174½7A list containing all current snaps.
2175˜15.12 Plotterž
2176LISP LOGO MEMO™65142Page 17251ß™53361November 29, 1980ß
2177Display Turtle for the 340 and GT40™57351Section 15.12ß
2178PLOTTER
2179½7The picture currently on the display screen is plotted on a new
2180plotter page.  PLOTTER will ask if arrays from previous plot should be
2181erased.  The user should type YES if his preceding plot is complete.
2182PLOTTER 1
2183½7Display plotted on current plotter page.
2184NOPLOT
2185½7The plotter is released.
2186DISPAGE
2187½7Outline of 7x11 page displayed as :PAGE.
2188˜15.13 Potsž
2189DIALS <dial-number>
2190½7Outputs the value of pot <dial-number> as a decimal fraction
2191between 0 and 1. Careful: the numbers on the pots are marked in octal,
2192but LLOGO normally expects decimal numbers as input.
2193˜15.14 Pointsž
2194[Points are displayed whether or not the pen is down]
2195POINT
2196½7Displays a point at the turtle's current location.
2197POINT <p>
2198½7Displays a point at <p>.
2199POINT <snap> <p>
2200½7Displays a point in <snap> at <p>.
2201POINT <snap> <x> <y>
2202½7Displays a point in <snap> at (<x>, <y>)
2203˜15.15 Global State of the Turtle's Worldž
2204For all of these functions, the first input "<scene>" is optional.  If
2205left out, the command refers to :PICTURE by default.
2206LISP LOGO MEMO™65142Page 17264ß™53361November 29, 1980ß
2207Display Turtle for the 340 and GT40™57351Section 15.15ß
2208SETHOME <scene>
2209½7Resets turtle's home to current position.
2210SETHOME <scene> <x> <y>
2211½7Resets the turtle's home to the absolute scope coordinates of
2212(<x>, <y>).  Takes effect immediately by moving the current :PICTURE
2213to the new home. (SETHOME <scene> 512. 512.) restores the home to the
2214center of the screen.
2215MOTION <scene>
2216½7Moves <scene> under the control of space war console 1.  Button
2217terminates movement.  The new home is returned, expressed in absolute
2218scope coordinates.  If the current home is returned immediately and
2219the space war console is ignored, check that all switches on the color
2220scope data switch extension are in the middle position.
2221BLINK <scene>
2222½7Blinks <scene>.
2223UNBLINK <scene>
2224½7Terminates blinking.
2225BRIGHT <scene>
2226½7Returns current brightness of <scene> as a number from 1
2227(dimmest) to 8 (brightest). Ordinarily, :TURTLE and :PICTURE are at
2228maximum brightness.
2229BRIGHT <scene> <level>
2230½7Sets brightness of <scene> to <level>, where <level> is an
2231integer from 1 to 8.
2232SCALE <scene>
2233½7Returns current scale of <scene>.  Scale is an integer from 1
2234(standard scale) to 4 (16 times standard scale).
2235SCALE <scene> <size>
2236½7Sets scale of <scene> to <size>, where <size> is an integer
2237from 1 to 4. <size> is a multiplicative scale factor.  Hence, SCALE 2
2238doubles the size of an ordinary picture, SCALE 3 quadruples it and
2239SCALE 4 multiplies the size by 8.  SCALE 1 restores picture to
2240standard size.  This is a hardware scaling and affects the current
2241display as well as future displayage.
2242DSCALE <scale>
2243½7The length of a turtle step is reset to <scale>.  <scale> may
2244be any real number.  Resetting the scale with DSCALE rather than SCALE
2245has the advantage that the scale factor may be any real number.
2246However, DSCALE applies only to future display and not the current
2247picture.
2248LISP LOGO MEMO™65142Page 17277ß™53361November 29, 1980ß
2249Display Turtle for the 340 and GT40™57351Section 15.15ß
2250™4302˜Section  16.  The Music Boxžß
2251½7The music box is a tone generator for from one to four
2252simultaneous voices, having a range of five octaves.  Because of the
2253timesharing environment, music is compiled into a buffer, and then
2254shipped to the music box all at once, for smooth timing.  Wherever
2255possible, these primitives have been made compatible with both those
2256of 11LOGO and CLOGO.  They made be used with the "old" (Minsky) music
2257box, or the "new" (Thornton box compatible) music box.
2258˜16.1 Plugging In ž
2259½7To plug in the old music box, find an EXECUPORT terminal.  Plug
2260it into a 300 baud ITS line, using the phono type plug on the top
2261right of the EXECUPORT back, or the acoustic coupler.  Make sure the
2262terminal is turned off, and plug the music box into the left back of
2263the EXECUPORT.  (Or find this all set up in the music room on the
2264third floor.) Turn off the music box and attached percussion box, and
2265put the EXECUPORT switches into the "line" and "uppercase" positions.
2266Turn on the terminal, type Z and log into ITS. The panic procedure
2267for the old music box (symptom: keyboard dead but ITS not down) is to
2268switch to local lowercase mode, turn off the music box, and type b..
2269Then type $P.
2270½7When using the music box from MULTICS, remember that both
2271carriage return and line feed must be typed to end a line, when using
2272an EXECUPORT. The terminal should be in "half duplex" and "lower case"
2273modes.  The panic procedure described above is not recommended, since
2274putting the terminal into local mode will have the effect of logging
2275you out of MULTICS.
2276½7Plugging in the new music box is a bit more of a problem due to
2277limitations of present hardware.  The critical item is a small piece
2278of electronics known as the "terminal controller card", to be had from
2279General Turtle in the basement of 545 Tech Square.  This card is to be
2280inserted in the correct orientation in port 4 of a Thornton box.  (If
2281you have never done this, ask! Putting it in backwards will burn out
2282the card.) The music box should be plugged into port 1, 2, or 3,
2283depending upon which has the music box card.  (It should be labelled.)
2284Then, plug the interface connector of the Thornton box into a 300 baud
2285ITS line, a terminal into port 4, and log into ITS.  The panic
2286procedure for the new music box is to get your terminal to echo "Q "
2287(control-Q space).  Since the normal print routines will actually send
2288<uparrow Q> for <control-Q>, this is most easily done with the "echo"
2289gadget of the Thornton Box, a small connector which makes the Thorton
2290Box look like a full duplex computer line. (If you want to make
2291yourself one, see General Turtle or Mark Miller; you probably won't
2292need it.)
2293˜16.2 Turning Onž
2294½7Assuming you are plugged in and logged into ITS, you may now
2295run either music box in LISP or LLOGO. LLOGO will ask you if you want
2296the music box; if so, it will ask you which one; if the new one, it
2297will ask you which port it is plugged into.  After answering all
2298LISP LOGO MEMO™65142Page 17283ß™53361November 29, 1980ß
2299The Music Box™58131Section 16.2ß
2300questions, type STARTMUSIC.  It will tell you to turn on the music box
2301(the old one will make a lot of noise), and then type OK.  Then, the
2302noise (if any) will stop, and you are ready to go.
2303½7The music box can also be run from a pure LISP. Type (FASLOAD
2304MUSIC FASL DSK LLOGO), and answer the questions.  Type (STARTMUSIC)
2305and the following primitives will behave like LISP SUBRS or FSUBRS.
2306(If you do ERRLIST hacking, see Mark Miller.)
2307˜16.3 Music Primitivesž
2308½7A great deal of effort has gone into insuring upward
2309compatibility with CLOGO and 11LOGO.  If you have programs for either
2310of these which no longer work on LLOGO, please let us know.  Notice
2311that many "intermediate" level functions such as CHORUS, which had
2312been written in LOGO code, are supplied as LISP primitives for
2313efficiency.  In addition, new facilities have been added which should
2314be helpful.  In the following, all such situations have been
2315indicated.  Occasionally, a single function replaces several LOGO
2316functions; the others are still available, but may print a message
2317recommending the newer function for future code.  Since most music
2318functions are executed for effect, unless otherwise indicated, the
2319value of a function is the atom (word) ?.
2320BOOM
2321½7Returns the number which corresponds to a drum beat.  Using
2322DRUM is more efficient.  No inputs.
2323BRUSH <duration list>
2324½7Takes 1 input, a list of durations.  Plays (i.e. stores in the
2325music buffer for the current voice) a sequence of brush notes (see
2326GRITCH) and rests.  A duration of n means 1 brush followed by n-1
2327rests.
2328CHORUS <form 1> . . . . <form 4>
2329½7Takes from one to four inputs, which should be forms
2330[procedures with arguments, or constants].  CHORUS evaluates each
2331argument in turn, and then goes on to the next voice, in cyclic order,
2332and evaluates the next argument.  Example:
2333          CHORUS SING 1 10 SING 5 10 SING 8 10
2334          PM
2335½7If the number of inputs is the same as :NVOICES, sequential
2336calls to CHORUS or SING will do the expected thing; if the number of
2337voices used by the arguments is equal to :NVOICES, recursive calls
2338will also work.  For other situations, just remember that :VOICE is
2339updated after evaluating each argument.  For example, if :NVOICES = 3
2340and you CHORUS two calls to SING, the next call to CHORUS will affect
2341voice 3.
2342LISP LOGO MEMO™65142Page 17291ß™53361November 29, 1980ß
2343The Music Box™58131Section 16.3ß
2344CHORUS2 <form 1> <form 2>
2345½7Version of CHORUS which takes exactly two arguments.  For
2346upward compatibility only.
2347CHORUS3 <form 1> <form 2> <form 3>
2348½7Analogous to CHORUS2.
2349CHORUS4 <form 1> <form 2> <form 3> <form 4>
2350½7Analogous to CHORUS3.
2351DRUM <list of durations>
2352½7Analogous to BRUSH for drum notes (see BOOM).
2353GRITCH
2354½7Returns the number corresponding to the brush sound of the
2355percussion speaker.  More efficient to use BRUSH.
2356MAKETUNE <tune name>
2357½7Takes as input a name, like LOGO MAKE or LISP SET.  It
2358multiplexes the buffer and saves it as the "thing" of the name.  That
2359is, it stores the tune as data, as opposed to procedures.  This allows
2360faster playing (see PLAYTUNE) and easy storage (SAVEd with other LOGO
2361variables.) Since MAKETUNE does not clear the buffer, allows saving
2362and playing incrementally larger portions of a long piece.  Tunes made
2363on one music box can be played on the other, with the exception that
2364tunes with exactly three voices can never be played on the new music
2365box (see NVOICES).  MAKETUNE did not exist in CLOGO or 11LOGO.
2366MBUFCLEAR
2367½7No inputs.  Clears the music buffer, and starts at voice 1.
2368This should be done for example, after typing G to kill an unpleasant
2369song, or after MAKETUNEing the final version of a song, before
2370starting a new one.
2371MBUFCOUNT
2372½7Same as VLEN.
2373MBUFINIT
2374½7No-op.  Prints message to let you know you tried to use this
2375relic of the past.
2376MBUFNEXT
2377½7No-op.  (See MBUFINIT)
2378LISP LOGO MEMO™65142Page 17303ß™53361November 29, 1980ß
2379The Music Box™58131Section 16.3ß
2380MBUFPUT
2381½7No-op.  (See MBUFINIT)
2382MBUFOUT
2383½7No inputs.  Plays the music buffer.  Does not clear it.
2384MCLEAR
2385½7Same as MBUFCLEAR.
2386MLEN
2387½7Returns the duration of the longest :VOICE created so far
2388(since the last MBUFCEAR).  Useful for building procedures such as
2389percussion accompaniments for arbitrary length tunes.  (see VLEN,
2390:MAX)
2391MODMUSIC <T or NIL>
2392½7Takes one input, NIL or otherwise. If non-NIL, puts music in a
2393mode where numbering is from 0 to 59., and note 60.  is the same as
2394note 0.  (i.e., (note mod 60)), so that one need not worry about
2395exceeding the range of the music box.
2396NEWMUSIC
2397½7No inputs.  Informs system that you wish to use the new music
2398box. Asks which port music box is plugged into.  Normally user will
2399not need to call NEWMUSIC, as the questionnaire at load time suffices.
2400See: OLDMUSIC.
2401NOMUSIC
2402½7No-op.  See MBUFPUT.  This function may be reinstated as a way
2403to excise the music package, for example, when one wants to load the
2404turtle package instead.
2405NOTE <pitch> <duration>
2406½7Unfortunately, (through no fault of LLOGO), there are minor
2407variations between 11LOGO and CLOGO.  The difference between NOTE and
2408SING is one such problem.  According to the 11LOGO User's Manual NOTE
2409is the basic 11LOGO music command.  It takes two inputs, a pitch and a
2410duration.  It numbers pitches chromatically from -24. to 36. with 0
2411being middle C. There are also three special pitches, as follows:
2412          -28. is a rest
2413          -27. is a boom
2414          -26. is a gritch
2415          -25. is illegal.
241611LOGO NOTE can also take multiple inputs.  LLOGO music has
2417implemented all of this for NOTE, except the multiple inputs.  The
2418numbering is slightly different from CLOGO SING, which is also
2419implemented in LLOGO.  (see: SING).
2420LISP LOGO MEMO™65142Page 17313ß™53361November 29, 1980ß
2421The Music Box™58131Section 16.3ß
2422NVOICES <number-of-voices>
2423½7Takes one input, hopefully a number between 1 and 4.  Sets
2424:NVOICES to that number, clears the buffer, and sets :VOICE to 1.
2425Remember that 3 voices is illegal on the new music system, and will
2426generate an error.  It is generally better to use four voices, one
2427blank, so that tunes will play on either music box.  In MODMUSIC T
2428mode, (normally not the case), calling NVOICES with a number outside
2429of [1,4.] will not cause an error, but seems crazy.  The 1+ input mod
24304 will be used instead.  SETing :NVOICES or MAKEing "NVOICES" cannot
2431be prevented, but is considered a faux pas.  Accessing :NVOICES is
2432welcomed.  Calls MBUFCLEAR and resets :VOICE to 1.  See: :NVOICES,
2433:VOICE, VOICES, MODMUSIC.
2434OLDMUSIC
2435½7No inputs.  Puts system in mode for old music box.  Normally
2436not needed by user, as questionnaire at load time suffices.  Might be
2437used, for example, if you made a mistake answering the questions.
2438See: NEWMUSIC.
2439PERFORM {PM}
2440½7No inputs.  Outputs the music buffer, and then does an
2441MBUFCLEAR.  See: MBUFOUT, MBUFCLEAR, PLAYTUNE.
2442PLAYTUNE <tune>
2443½7Takes one input, which must evaluate to a tune created by
2444MAKETUNE.  It plays the tune.  Does not clear or otherwise alter the
2445current music buffer.  PLAYTUNE is transparent to the current number
2446of voices, even if the tune uses a different number.  See: MAKETUNE,
2447PM.
2448REST
2449½7No inputs.  Returns the number of the note which generates
2450silence on the music box.  (Like BOOM and GRITCH, this will win
2451independently of whether 11LOGO or CLOGO primitives are being used;
2452likewise, it will be the correct number for MODMUSIC T or normal
2453state, even for different scalebases.) Naturally this checking is less
2454efficient than just calling SING -25. or NOTE -28. for the appropriate
2455duration.  See: SING, NOTE, MODMUSIC, :SCALEBASE.
2456RESTARTMUSIC
2457½7No inputs.  Like STARTMUSIC, except re-initializes all system
2458variables, and runs questionnaire as far back as asking which music
2459box.  Useful in situations of total loss after panic procedure.
2460Usually tunes created by MAKETUNE, and user procedures will be intact.
2461Buffer will be wiped out.  In cases of peculiar behavior at login or
2462load time, guarantees that everybody thinks they have the device you
2463think they do.  If this does not work, go to "PLUGGING IN".
2464LISP LOGO MEMO™65142Page 17321ß™53361November 29, 1980ß
2465The Music Box™58131Section 16.3ß
2466SING <pitch> <duration>
2467½7Basic CLOGO and LLOGO music command.  Takes two inputs, a pitch
2468number, and a duration.  It is highly recommended that durations be
2469integers greater than 0!  Very large durations (each unit corresponds
2470to a character atom in LISP) are apt to slow down the system a lot, so
2471small integers are highly advised. Pitches are from -25. to 39., with
24720 being middle C.  (But see the remarks about 11LOGO's variant, NOTE,
2473and also :SCALEBASE and MODMUSIC.) Pitch -25. is a rest, -24. a boom,
2474-23. a gritch, -22. ignored.  (But see REST, BOOM, GRITCH) Durations
2475are normally broken down into N-1 beats of pitch and 1 beat of rest,
2476to avoid slurring the music.  However, if the SPECIAL variable
2477:INSTRUMENT is "STACCATO", 1 beat of note followed by N-1 beats of
2478rest will be sung.  (i.e., stored in the music buffer under the
2479current voice).  If other phrasing is desired, it may be added later.
2480SONG <pitches> <durations>
2481½7Takes two inputs, a list of pitches and a list of durations.
2482Calls SING, pairing pitches with durations until the shorter list is
2483exhausted.  In other LOGOs, this was not a primitive, but was written
2484as a recursive LOGO procedure.
2485STARTMUSIC
2486½7No inputs.  Should be called to turn on the music box.  Unlike
2487CLOGO, it pauses to let you turn on the box, to minimize the
2488unpleasant noise generation on the old music box. (PERFORM alone will
2489suffice).  Clears the music buffer and sets :VOICE to 1.  Probably
2490unnecessary with new music box.
2491VLEN
2492½7No inputs.  Returns duration of current buffer.  See:
2493MBUFCOUNT, :MAX, MLEN.  Useful when chorusing a tune with an
2494accompaniment.  If the accompaniment is the last argument to CHORUS
2495and contains a stop rule like,
2496          IF VLEN = MLEN THEN STOP
2497the accompaniment can be used with arbitrarily long tunes.
2498VOICE <voice>
2499½7Sets :VOICE to its one input, provided that input is a positive
2500integer less than 5.  If greater than the current number of voices,
2501NVOICES is called to increase the number.  All music from now until
2502the next call to VOICE (or a primitive like CHORUS which calls VOICE)
2503will go into this voice.  All the voices in use will be multiplexed
2504prior to PERFORMing the buffer.  In MODMUSIC T mode inputs greater
2505than 4. do not cause errors, but are simply cycled through the allowed
2506voices. MAKEing (LLOGO) or SETing (LISP) :VOICE is not nice.
2507VOICES
2508½7No-op.  See NOMUSIC.  If anyone has a use for this which is
2509reasonable, e.g., synonym for NVOICES, we will be glad to implement
2510it.
2511LISP LOGO MEMO™65142Page 17328ß™53361November 29, 1980ß
2512The Music Box™58131Section 16.3ß
2513:INSTRUMENT
2514½7Special system variable which is user settable. Its value
2515determines the behavior of NOTE and SING as above.  Current meaningful
2516modes are LEGATO and STACCATO.  Anything else is considered STACCATO
2517for now.
2518:MAX
2519½7This pseudo variable is actually a call to MLEN, above.  It
2520exists for compatibility with CLOGO.
2521:NVOICES
2522½7Special system variable, not to be changed except by calling
2523NVOICES.  It tells you the number of voices being filled or played at
2524present. Default is 2.
2525:VOICE
2526½7Special system variable, to be changed only by calling VOICE.
2527Tells you the current voice that is being filled.  MBUFCLEAR resets to
25281.  Always initialized to 1.  Can be changed by call to CHORUS.
2529:SCALEBASE
2530½7Special system variable which may be changed by user.  It tells
2531the offset from middle C to be used in renumbering notes to ones
2532taste.  Default is zero.
2533½7The 11LOGO music functions MUCRTL, MUTYO, and MUWAIT are not
2534implemented in LLOGO.
2535LISP LOGO MEMO™65142Page 17337ß™53361November 29, 1980ß
2536The Music Box™58131Section 16.3ß
2537™1402˜Section  17.  Display Turtle for the Knight TV Terminalsžß
2538½7In addition to the display turtle package for the 340 and GT40
2539displays, LLOGO also provides facilities for graphics on the Knight
2540terminals, raster scan televisions controlled by a PDP11. These
2541terminals provide a number of advantages for LOGO graphics over
2542vector-mode refreshed CRT's like the 340. Since the picture which
2543appears on a user's screen is stored in the 11's memory, one bit per
2544point, the user can put up arbitrarily complicated pictures containing
2545any number of vectors, without causing flicker. It is possible to use
2546patterns of points to create "shading" effects. Commands which deal
2547more directly with displayed images, rather than through display lists
2548can be implemented.  Programs may test individual points being
2549displayed, without necessitating computation of intersection of
2550vectors.  The turtle is supplied with an "eraser" in addition to a
2551"pen", a capability which would prove difficult to implement in a
2552vector display.  A split screen mode is provided to facilitate
2553interaction between graphic output and character output from program
2554typeout and error messages.
2555½7As is the case with the other LLOGO special packages, the TV
2556turtle is available as a set of LISP functions which can be used in an
2557ordinary LISP, without the remainder of the LOGO environment. The TV
2558turtle can be obtained in a standard LISP by doing (FASLOAD TVRTLE
2559FASL DSK LLOGO).
2560½7The primitives available are designed to be as compatible as
2561possible with LLOGO's turtle commands for the 340, and 11LOGO's. Some
2562deviance from prior implementations of the LOGO turtle was necessary,
2563however, to take advantage of the unique features and respect the
2564limitations of the device. Most of the incompatibilities are noted in
2565the descriptions of the primitives below.
2566STARTDISPLAY {SD}
2567½7Initializes the screen. The user is supplied with a single
2568turtle, located at the center of the screen, with its pen down and an
2569initial heading of zero.  STARTDISPLAY puts the user in split screen
2570mode. Program output appears at the bottom of the screen, and pictures
2571drawn by the turtle commands appear within a displayed box in the
2572upper portion of the screen. The sizes of both the program and display
2573area are changeable by the user. This command is also useful as a
2574means of reinitializing and restarting everything when things get
2575hopelessly fouled up. STARTDISPLAY should restore the entire state of
2576the turtle's world to what it was initially.
2577NODISPLAY {ND}
2578½7Announces the user's intention to stop using turtle primitives.
2579NODISPLAY terminates split screen mode, so that printed output may
2580occur in any part of the screen. Turtle commands executed after a
2581NODISPLAY will cause graphic output to appear, but no assurance is
2582given that graphic output and printed output will not interfere with
2583each other. NODISPLAY also clears the screen. Use CLEARSCREEN if you
2584want to return to split screen mode after executing a NODISPLAY.
2585LISP LOGO MEMO™65142Page 17351ß™53361November 29, 1980ß
2586Display Turtle for the Knight TV Terminals™60421Section 17ß
2587SAVEDISPLAY {SVD}
2588½7If you exit from your LLOGO or LISP by Z while drawing
2589pictures with the TV turtle, you will lose the picture drawn on the
2590screen, as well as possibly leave the program in an inconsistent
2591state. To prevent lossages of this type, the primitive SAVEDISPLAY can
2592be used to exit gracefully from the program without losing a picture
2593drawn. SAVEDISPLAY will leave you in DDT, and when the LLOGO or LISP
2594is continued, the display area will be redrawn and execution continued
2595from the point at which it was interrupted.
2596˜17.1 The Turtlež
2597½7The turtle marker is displayed as an isoceles triangle, with a
2598line from the center to the vertex between the equal sides; this line
2599points in the direction of the heading. The triangle turtle is XOR'ed
2600in with the displayed picture to show or hide the turtle: points which
2601are displayed when the turtle is not over them are turned off, and
2602points where nothing is displayed are turned on when the turtle is
2603over them. This allows the turtle to be more visible against a
2604background consisting of a complex picture, or shaded area. LLOGO's TV
2605turtle provides an extra bit of information to the user about the
2606turtle's state: The center of the triangle indicates what will happen
2607if the turtle is moved.  If the pen is down, a filled-in box is
2608displayed at the center of the triangle. If the eraser is down, an
2609outlined box appears. If XOR mode is in effect, an "X" is displayed at
2610the center of the turtle.  If XOR mode is not in effect and both the
2611pen and the eraser are up, only the triangle will be displayed. This
2612state indicates that the turtle will not draw or erase lines when
2613moved.
2614HIDETURTLE {HT}
2615½7Makes the turtle disappear. Only lines drawn by the turtle will
2616be seen, and no marker will be drawn to indicate the turtle's position
2617and heading.
2618SHOWTURTLE {ST}
2619½7Brings the turtle back to life. A turtle marker will be drawn
2620to indicate the state of the turtle.
2621:SEETURTLE
2622½7A global variable which is T if the turtle is being displayed,
2623else NIL. Don't modify this variable yourself using MAKE or SETQ. The
2624value should only be changed by calls to HIDETURTLE and SHOWTURTLE.
2625Unless explicitly stated otherwise, the global variables mentioned in
2626this section, such as :XCOR, :HEADING, and :PENSTATE, should not be
2627directly modified by assignment. Use instead the functions which are
2628provided for that purpose. Note that MAKE will not let you modify a
2629variable that is used by the LLOGO system.
2630LISP LOGO MEMO™65142Page 17375ß™53361November 29, 1980ß
2631Display Turtle for the Knight TV Terminals™58421Section 17.1ß
2632MAKETURTLE <draw-turtle-procedure> <erase-turtle-procedure>
2633½7This allows the user to substitute procedures for drawing the
2634turtle marker, to be used instead of the system's default triangle
2635turtle. This feature could be used to substitute a more lifelike
2636picture to represent the turtle, to print state information on the
2637screen instead of drawing a picture, or to record the turtle's
2638wanderings. MAKETURTLE takes as input the names of two procedures, the
2639first to be called whenever the system wants the turtle to appear, the
2640second to be called when the system wants the turtle marker to vanish.
2641These procedures will be called in :SEETURTLE mode when the turtle's
2642state changes, i.e. by FORWARD, RIGHT, PENDOWN, etc. The procedures
2643should examine the turtle state variables, such as :XCOR, :YCOR,
2644:HEADING, :PENSTATE, etc. to decide how and where the turtle marker is
2645to be displayed. The procedures will be executed with :SEETURTLE bound
2646to NIL, to prevent infinite recursion.  All turtle state variables are
2647rebound during the execution of user supplied turtle marker
2648procedures, so that you can change them in the course of drawing a
2649turtle.
2650½7If there is more than one turtle, each turtle can be given a
2651separate set of procedures for drawing and erasing itself.
2652:DRAWTURTLE
2653½7Global variable containing the name of the procedure being used
2654to draw the current turtle. NIL means the standard system triangle
2655turtle is in use. Set by MAKETURTLE.
2656:ERASETURTLE
2657½7Like :DRAWTURTLE, but contains procedure used to erase the
2658turtle.
2659TRIANGLETURTLE
2660½7The procedure used to draw the standard system triangle turtle.
2661If you want to do something just slightly different than the standard
2662turtle, you might have a procedure which calls TRIANGLETURTLE.  Since
2663TRIANGLETURTLE draws the turtle in XOR mode, the same procedure is
2664used both to draw and to erase the turtle.
2665˜17.2 Moving the Turtlež
2666FORWARD <steps> {FD}
2667½7Moves the turtle <steps> in the direction it is currently
2668pointed.
2669BACK <steps> {BK}
2670½7Moves the turtle <steps> opposite to the direction in which it
2671is pointed.
2672LISP LOGO MEMO™65142Page 17386ß™53361November 29, 1980ß
2673Display Turtle for the Knight TV Terminals™58421Section 17.2ß
2674SETX <x>
2675½7Moves the turtle to (<x>, YCOR).
2676SETY <y>
2677½7Moves the turtle to (XCOR, <y>).
2678SETXY <x> <y>
2679½7Moves the turtle to (<x>, <y>).
2680DELX <dx>
2681½7Moves turtle to (XCOR+<dx>, YCOR).
2682DELY <dy>
2683½7Moves turtle to (XCOR, YCOR+<dy>).
2684DELXY <dx> <dy>
2685½7Moves turtle to (XCOR+<dx>, YCOR+<dy>).
2686HOME {H}
2687½7Moves turtle home to its starting state, at (0, 0) with a
2688heading of 0.
2689WRAP
2690½7Movement of the turtle past the boundaries of the screen by
2691FORWARD, SETXY, etc. is an error, unless WRAP is done. This causes
2692movement off one edge to result in the turtle's reappearance at the
2693opposite edge, as if the screen was a torus.
2694NOWRAP
2695½7Turns off wraparound mode.  NOWRAP makes sure that the turtle's
2696coordinates are within the boundaries of the screen.  Any subsequent
2697attempt to move beyond the boundaries of the screen will cause an
2698error.
2699:WRAP
2700½7A global variable containing T iff wraparound mode is in
2701effect, NIL otherwise.
2702½7Currently, the turtle always draws vectors in a preferred
2703direction; it draws a line between two endpoints the same way
2704regardless of where the turtle is. This is just an efficiency hack;
2705it's not even noticeable when drawing short vectors or on those rare
2706occasions when system load is light and the turtle is drawing rapidly.
2707If this peculiarity proves annoying to many people, it will be changed
2708to draw always in the direction of the turtle's movement.
2709LISP LOGO MEMO™65142Page 17406ß™53361November 29, 1980ß
2710Display Turtle for the Knight TV Terminals™58421Section 17.2ß
2711˜17.3 Erasing the Screen ž
2712WIPE
2713½7Erases the picture on the screen, except that it does not
2714affect any turtles which are being displayed.
2715CLEARSCREEN {CS}
2716½7Equivalent to HOME WIPE, but faster.
2717˜17.4 Turning the Turtlež
2718RIGHT <angle> {RT}
2719½7Turns the turtle clockwise <angle> degrees.
2720LEFT <angle> {LT}
2721½7Turns the turtle counter-clockwise <angle> degrees.
2722SETHEAD <angle>
2723½7The turtle is turned to a heading of <angle>.
2724˜17.5 The Penž
2725PENDOWN {PD}
2726½7The turtle's pen is lowered. This means that if the turtle is
2727moved, a line will be drawn between the turtle's old and new
2728positions.  A filled in box is displayed at the center of the turtle
2729if in SHOWTURTLE mode, to show the user that the pen is down.
2730PENUP {PU}
2731½7The pen is raised. The turtle will not draw a line when moved.
2732If SHOWTURTLE mode is on, the filled in box displayed at the center of
2733the turtle to indicate PENDOWN will disappear.
2734:PENSTATE
2735½7A global variable which is T iff the pen is down, else NIL.
2736˜17.6 The Eraserž
2737½7A unique feature of the TV turtle is that as well as having a
2738"pen" which can be raised or lowered to control drawing of lines when
2739the turtle is moved, it also has an "eraser".  When the eraser is
2740down, if the turtle retraces a line which has been previously drawn
2741with the pen down, the line disappears.  This can also be thought of
2742as "drawing in the same color ink as the background".  Note that this
2743means that if a line is drawn with the eraser down, any point lying on
2744that line will be turned off, even though another line might have
2745passed through the same point.
2746LISP LOGO MEMO™65142Page 17429ß™53361November 29, 1980ß
2747Display Turtle for the Knight TV Terminals™58421Section 17.6ß
2748ERASERDOWN {ERD}
2749½7The eraser is lowered. When the turtle moves, lines are erased
2750which were drawn with the pen down. Note that the pen and the eraser
2751can't be down at the same time. ERASERDOWN therefore will
2752automatically do a PENUP, and PENDOWN will do an ERASERUP. An outlined
2753box is displayed at the center of the turtle when in SHOWTURTLE mode
2754as long as the eraser is down.
2755ERASERUP {ERU}
2756½7The eraser is raised.
2757:ERASERSTATE
2758½7Global variable which is T iff the eraser is down, NIL
2759otherwise.
2760˜17.7 Drawing in XOR Modež
2761½7In addition to drawing with the pen down, which turns on points
2762along the line being drawn, and drawing with the eraser down, which
2763turns off points along the line being drawn, there exists another
2764option, useful in certain circumstances. The turtle can be used to
2765draw in XOR mode -- points along the line being drawn are turned on if
2766they were previously off, and off if they were formerly on. This mode
2767of operation is used to display the triangle turtle in SHOWTURTLE
2768mode.  It allows the same procedure to draw a line and erase it,
2769leaving what was there before it undisturbed.
2770XORDOWN {XD}
2771XORUP {XU}
2772:XORSTATE
2773½7Analogous to the corresponding primitives for the pen and the
2774eraser.
2775½7
2776˜17.8 Examining and Modifying the Turtle's Statež
2777:XCOR
2778½7A global variable containing the turtle's current X location. X
2779coordinates increase rightward, and the origin is in the center of the
2780screen [but can be changed via SETHOME].  This variable is always a
2781floating point number. If wraparound mode is in effect, this variable
2782indicates distance from the origin as if on an infinite plane. If the
2783right edge of the screen is 500, and SETX 600 is done, :XCOR will be
2784600.0, but the turtle will appear 400 units to the left of the origin.
2785LISP LOGO MEMO™65142Page 17449ß™53361November 29, 1980ß
2786Display Turtle for the Knight TV Terminals™58421Section 17.8ß
2787:YCOR
2788½7Like :XCOR, but holds the value of the Y coordinate.  Y
2789coordinates increase upward.
2790:HEADING
2791½7Holds the value of the turtle's heading, in floating point. A
2792heading of zero corresponds to pointing straight upward, and heading
2793increases clockwise. This variable always gives the absolute heading,
2794not reduced modulo 360. After SETHEAD 400, :HEADING is 400.0, not
279540.0, although the turtle is pointing in the same direction as SETHEAD
279640.
2797XCOR
2798½7Outputs the X coordinate of the turtle as an integer.  If
2799wrapaound mode is in effect, this function will output the position of
2800the turtle as it appears on the screen. After SETX 600, XCOR would
2801return -400.
2802YCOR
2803½7Like XCOR, but outputs the Y coordinate of the turtle.
2804HEADING
2805½7Outputs the heading of the turtle as an integer, modulo 360.
2806After SETHEAD 400, HEADING would return 40.
2807HERE
2808½7Outputs (SENTENCE XCOR YCOR HEADING). Useful for remembering
2809the turtle's state via MAKE 'TURTLESTATE HERE.  A turtle state saved
2810in this manner can be restored using SETTURTLE.
2811SETTURTLE <state> {SETT}
2812½7Sets the state of the turtle to <state>. <state> is a sentence
2813of X coordinate, Y coordinate, and heading. The heading may be
2814omitted, in which case it is not affected. SETTURTLE is the inverse of
2815HERE.
2816˜17.9 Multiple Turtles ž
2817½7Initially, the user is supplied by LOGO with one unique turtle,
2818which remembers its position and heading, and is capable of drawing or
2819erasing lines when moved. The ability to create any number of these
2820creatures and to switch the attention of the system between them makes
2821possible such things as assigning a turtle locally to each one of
2822several programs.
2823HATCH <turtle-name>
2824½7Creates a new turtle, christened <turtle-name>.  The turtle
2825created by HATCH starts out in a state identical to that of the
2826original turtle present after a STARTDISPLAY; It is located at its
2827home, at the center of the display area, its heading points straight
2828LISP LOGO MEMO™65142Page 17462ß™53361November 29, 1980ß
2829Display Turtle for the Knight TV Terminals™58421Section 17.9ß
2830up, and its pen is down. The newly created turtle becomes the current
2831turtle, and will respond to all turtle commands.  The state of any
2832previously created turtle, including the one originally supplied by
2833STARTDISPLAY, remains unaffected by HATCH, or any turtle command
2834referring to the new turtle.
2835USETURTLE <turtle-name> {UT}
2836½7Selects the named turtle to be the current turtle; this means
2837that all subsequent turtle commands [FORWARD, RIGHT, . . . .], and
2838turtle state variables [:HEADING, :XCOR, :YCOR, . . . .] now will
2839refer to the selected turtle until changed again by another call to
2840USETURTLE or a call to HATCH. The state of the previously selected
2841turtle is preserved so that if it is ever selected again, its state
2842will be restored.  The turtle which is provided initially by
2843STARTDISPLAY is named LOGOTURTLE.
2844:TURTLE
2845½7Global variable which contains the name of the currently
2846selected turtle.
2847:TURTLES
2848½7Global variable which contains a list of the names of all the
2849turtles in existence.
2850½7
2851˜17.10 Global Navigationž
2852½7BEARING, RANGE, and TOWARDS return integers if all inputs are
2853integers, otherwise they return floating point numbers. The numbers
2854returned are always positive, and BEARING and TOWARDS return headings
2855modulo 360.
2856RANGE <x> <y>
2857RANGE <sentence-of-x-and-y>
2858½7Outputs the distance from the turtle to a point specified
2859either by two inputs which are x and y coordinates respectively, or by
2860a sentence of x and y coordinates.
2861BEARING <x> <y>
2862BEARING <sentence-of-x-and-y>
2863½7Outputs the absolute direction from the turtle to a point
2864specified in a format acceptable to RANGE.  (SETHEAD (BEARING <x>
2865<y>)) points the turtle in the direction of (<x>,<y>).
2866LISP LOGO MEMO™65142Page 17483ß™53361November 29, 1980ß
2867Display Turtle for the Knight TV Terminals™57421Section 17.10ß
2868TOWARDS <x> <y>
2869TOWARDS <sentence-of-x-and-y>
2870½7Outputs the relative direction from the turtle to the point
2871specified.  (RIGHT (TOWARDS <x> <y>)) points the turtle in the
2872direction of (<x>, <y>).
2873˜17.11 Trigonometryž
2874COSINE <angle>
2875½7Cosine of <angle> degrees.
2876SINE <angle>
2877½7Sine of <angle> degrees.
2878ARCTAN <x> <y> {ATANGENT}
2879½7Angle whose tangent is <x>/<y>, in degrees.
2880[SIN, COS, and ATAN are the corresponding functions which input or
2881output in radians]
2882˜17.12 Textž
2883MARK <text>
2884½7Similar to the LLOGO command TYPE, except that the text is
2885printed in the display area, beginning at the turtle's current
2886location. When running the TV turtle from LISP, PRINC is used to print
2887the text instead of TYPE.
2888˜17.13 Points and Circlesž
2889[These are displayed whether or not the pen or the eraser is down]
2890POINT
2891½7Displays a point at the turtle's current location.
2892POINT <T or NIL>
2893½7Turns the point at HERE on if its input is not NIL, off if it
2894is NIL.
2895POINT <x> <y> <T or NIL>
2896½7Turns the point at (<x>, <y>) on or off as specified by its
2897input. The third input is optional, and defaults to T [e.g., turn the
2898point on] if omitted.
2899½7Note: These conventions for POINT differ slightly from those
2900used in the LLOGO 340 turtle, to accommodate the capability of turning
2901a point off as well as on.
2902LISP LOGO MEMO™65142Page 17509ß™53361November 29, 1980ß
2903Display Turtle for the Knight TV Terminals™57421Section 17.13ß
2904POINTSTATE
2905½7Returns T or NIL, depending on whether the point at the
2906turtle's current location is on or off. The turtle marker is hidden
2907temporarily during the execution of POINTSTATE, so that display of the
2908turtle will not interfere with the point being tested. POINTSTATE will
2909return whether the point being tested is on, regardless of how it was
2910caused to appear -- by a line drawn by the turtle, text printed,
2911shading, etc.
2912POINTSTATE <x> <y>
2913½7Tests the point at the specified coordinates.
2914ARC <radius> <degrees>
2915½7Draws an arc of a circle of the given radius, and extending for
2916the given number of degrees around the circle centered on the turtle's
2917current location. The arc drawn begins at the point on the circle
2918where the turtle's heading is pointing, and is drawn in a clockwise
2919direction [in the direction of increasing heading].
2920CIRCLE <radius>
2921½7Equivalent to ARC <radius> 360.
2922˜17.14 Scalingž
2923½7Two functions are provided for changing the size of the graphic
2924display area at the top of the screen and the area for typein and
2925typeout at the bottom of the screen, and the dimensions of the display
2926area in turtle coordinates. TVSIZE controls the actual size of the
2927display area, and operates in terms of raster display points.
2928TURTLESIZE is used to establish the mapping from the specified TVSIZE
2929into turtle coordinates -- the numbers given to and returned by the
2930turtle primitives. It does not have any effect on the visual size of
2931the area used for graphic display output.
2932TVSIZE
2933½7Returns a list containing the horizontal and vertical sizes of
2934the display area in raster points. The default size is 300 x 300.  The
2935dimensions of the entire TV screen are 455 [vertical] x 576
2936[horizontal].
2937TVSIZE <new-size>
2938½7Sets both the horizontal and vertical sizes of the display area
2939to <new-size>. Modifying the TVSIZE causes a CLEARSCREEN to be
2940performed. The size of the area at the bottom of the screen for typein
2941and typeout is adjusted to take up as much space as possible on the
2942screen not being used for graphic output. Changing the TVSIZE will not
2943have any effect on pictures previously saved by MAKEWINDOW [see
2944Section 635].
2945TVSIZE <new-x-size> <new-y-size>
2946½7Sets the horizontal and vertical sizes independently.  If
2947LISP LOGO MEMO™65142Page 17523ß™53361November 29, 1980ß
2948Display Turtle for the Knight TV Terminals™57421Section 17.14ß
2949either of the two inputs is NIL, the corresponding size remains
2950unchanged.
2951TURTLESIZE
2952½7Returns a list containing the horizontal and vertical sizes of
2953the display area in turtle coordinates. These are in floating point.
2954The initial default is 1000 x 1000, and the origin is always at the
2955center of the screen -- so turtle coordinates initially range from
2956-500 to +500. If wraparound mode is in effect, turtle coordinates are
2957allowed above and below the range set by TURTLESIZE, and will be
2958mapped to appropriate points on the screen.
2959TURTLESIZE <new-size>
2960½7Sets the dimensions of the screen in turtle coordinates to
2961<new-size> turtle steps. If the display area is not square [that is,
2962if the horizontal and vertical TV size parameters are not equal], then
2963<new-size> is taken to be the number of turtle steps for the minimum
2964dimension of the screen, and the other dimension is adjusted
2965accordingly. In particular, you can't specify TURTLESIZE independently
2966in each direction, so that a turtle step always corresponds to the
2967same number of TV points.  Changing TURTLESIZE has no effect on the
2968picture currently being displayed, or on any pictures saved by
2969MAKEWINDOW.
2970SETHOME {TURTLEHOME}
2971SETHOME <new-x-home> <new-y-home> {TH}
2972½7Changes the origin of turtle coordinates to the specified
2973location, defaulting to the turtle's present position. That position
2974on the screen will then correspond to an XCOR and YCOR of zero for all
2975subsequent turtle commands. The home location is local to each turtle,
2976so that each of several turtles may be assigned different homes on the
2977screen.
2978˜17.15 Screen Colorž
2979½7The Knight terminals have a facility for easily changing
2980whether bits which are on in the TV memory will be displayed as dark
2981or light on the user's screen.  By analogy with a photograph, in
2982"negative" mode, points which are on [graphics and text] will be
2983displayed as light on a dark background. In "positive" mode, they are
2984displayed as dark on a light background. The current state of a user's
2985terminal can be complemented by typing <ESC> C. The following
2986functions allow it to be examined and controlled by a user program.
2987COLORSTATE {CLST}
2988½7T iff the user is in "positive" mode, NIL if in "negative"
2989mode.
2990LISP LOGO MEMO™65142Page 17541ß™53361November 29, 1980ß
2991Display Turtle for the Knight TV Terminals™57421Section 17.15ß
2992COLORNEGATIVE {CLN}
2993½7Puts the user in negative mode, i.e. light text and lines on a
2994dark background. This is the mode in effect initially at login time.
2995COLORPOSITIVE {CLP}
2996½7Puts the user in positive mode; dark text and pictures on a
2997light background.
2998COLORSWITCH {CLSW}
2999½7Complements the COLORSTATE; if the current mode is negative,
3000switches to positive mode, or vice versa. This has the same effect as
3001typing <ESC> C on the terminal.
3002˜17.16 Saving Picturesž
3003½7In creating pictures which consist of repeating patterns of
3004smaller pictures, and creating animated cartoons, it is often useful
3005to be able to save displayed pictures drawn by a series of turtle
3006commands, and operate upon them as a unit, displaying and erasing
3007them, moving them to other parts of the screen, etc.  The LLOGO TV
3008turtle provides such a facility, allowing the user to save rectangular
3009portions of the screen as arrays of points. These arrays can be
3010displayed and erased at any location on the screen, although they
3011cannot be automatically rotated.
3012½7This facility is somewhat different from the SNAP command in
3013the LLOGO 340 turtle and 11LOGO. The SNAP operation saves the picture
3014as display lists, essentially a vector representation, while the TV
3015turtle window saves an array of points. For large, sparse pictures,
3016the vector representation consumes less space, while the point array
3017representation favors small, complex pictures. Saving point arrays
3018makes it possible to redisplay pictures much more rapidly than
3019redrawing them with the commands used to originally generate the
3020picture, since recomputation of points lying along vectors is
3021unnecessary. It is therefore ideal for programs which want to make
3022only few, spatially localized changes to a picture, but need the
3023maximum possible speed for dynamic updating of the screen. It also has
3024the advantage that the amount of space and time used for creating and
3025redisplaying pictures is insensitive to the complexity of a picture
3026within an area. These characteristics make an array representation
3027more suitable than a vector representation for, say, a space war
3028program, where the space ship must be redisplayed rapidly, and
3029consists of perhaps a large number of vectors confined to a small area
3030of the screen. It also provides a "clipping" facility.
3031½7Saving point arrays has a property not shared by LLOGO's SNAP
3032for the 340 -- "What you see is what you get". Everything within the
3033designated area is included, regardless of how it was caused to appear
3034-- vectors, text, points, other WINDOWs, etc. This means that you can
3035always tell what will be included in a saved picture simply by looking
3036at the screen.
3037LISP LOGO MEMO™65142Page 17561ß™53361November 29, 1980ß
3038Display Turtle for the Knight TV Terminals™57421Section 17.16ß
3039MAKEWINDOW <window-name> <size> {MW}
3040½7Creates a "window", i.e., an array of points, and names it
3041<window-name>.  The <window-name> should be a word, and should be
3042chosen so as not to conflict with existing functions or arrays.  The
3043window is centered on the turtle's current location, and extends for
3044<size> turtle steps horizontally and vertically from the center. The
3045location of the center of the window and its size are remembered.
3046MAKEWINDOW <window-name> <horizonal-size> <vertical-size>
3047½7Creates a window centered on the turtle's current location, but
3048sets the horizontal and vertical sizes of the window independently, so
3049the area saved can be rectangular instead of square, as in the one
3050input mode.
3051MAKEWINDOW <window-name> <center-x> <center-y> <horizontal-size>
3052<vertical-size>
3053½7Creates a window centered on the specified location, of the
3054specified size. If the <vertical-size> is omitted it is assumed
3055identical to the <horizontal-size>.
3056ERASEWINDOW <window-name> {EW}
3057½7Destroys the window specified by <window-name>. If the window
3058is no longer needed, this permits the space that it occupied to be
3059reclaimed.
3060ERASEWINDOWS {EWS}
3061½7Erases all currently defined windows.
3062:WINDOWS
3063½7Global variable which contains a list of all currently defined
3064windows.
3065WINDOWFRAME . . . . {WF}
3066½7Takes inputs like MAKEWINDOW, except for the window name. That
3067is, it takes from one to four inputs specifying a size and optionally
3068a center location. WINDOWFRAME displays a box on the screen which
3069indicates the extent of the picture which would be saved by a
3070MAKEWINDOW of the corresponding size and location. This is useful in
3071deciding how large a window is necessary before using MAKEWINDOW.  The
3072box is XORed into the screen, so that giving the WINDOWFRAME command
3073again will cause the box to disappear. If no inputs are given to
3074WINDOWFRAME the size and location default to the last ones specified.
3075SHOWWINDOW <window-name> {SW}
3076½7Causes the specified window to be displayed at the location at
3077which it was originally created. Currently, wraparound is not allowed;
3078display of the picture is not allowed to cross the edge of the display
3079area. Changing TVSIZE and TURTLESIZE have no effect on the size of
3080saved pictures.
3081LISP LOGO MEMO™65142Page 17578ß™53361November 29, 1980ß
3082Display Turtle for the Knight TV Terminals™57421Section 17.16ß
3083SHOWWINDOW <window-name> <new-center-x> <new-center-y>
3084½7Causes the window to be displayed at the new location
3085specified.
3086HIDEWINDOW . . . . {HW}
3087½7Accepts arguments like SHOWWINDOW, but displays the window
3088turning off any point which was on in the window when it was created.
3089The effect of this is as if the picture were redrawn in eraser mode.
3090If a call to SHOWWINDOW displayed the window on a blank area, a
3091similar call to HIDEWINDOW will erase it. If SHOWWINDOW superimposed
3092the window on something already displayed, the old picture is not
3093guaranteed to remain intact after the window is hidden.
3094XORWINDOW . . . . {XW}
3095½7Like SHOWWINDOW and HIDEWINDOW, but XOR's the picture into the
3096screen.
3097WINDOWHOME <window-name> {WH}
3098WINDOWHOME <window-name> <new-x-home> <new-y-home>
3099½7Changes the home location associated with a window to the
3100specified location, defaulting to HERE. This is the location where the
3101center of the window will be displayed if only the name of the window
3102is given as input to SHOWWINDOW, HIDEWINDOW, etc.
3103SAVEWINDOWS <filespec> {SWS}
3104½7Creates a file on the disk which saves all currently defined
3105windows in binary. They can be reloaded at a later time with
3106GETWINDOWS. The file specification follows the same format as other
3107LLOGO file commands such as READFILE, and LISP's UREAD. The filenames
3108are not evaluated.
3109GETWINDOWS <filespec> {GW}
3110½7Reloads windows from a disk file created by SAVEWINDOWS.
3111˜17.17 Printing Pictures on the XGPž
3112½7Pictures drawn with the LLOGO TV turtle may be printed on the
3113AI Lab's Xerox Graphics Printer to obtain hard copy.  The following
3114primitive creates a file which can be printed by the XGP control
3115program SCRIMP.
3116XGP <file> <area>
3117½7Creates a file saving the picture in the designated area of the
3118screen. The file can then be printed on the XGP. The file
3119specification follows the same format as other LLOGO file commands --
3120from one to four words. A rectangular area limiting the picture saved
3121is specified in the same format accepted by the window commands --
3122from one to four numbers. If omitted, the area defaults to the entire
3123screen. Example:
3124          XGP PICTURE > 200 300 100
3125LISP LOGO MEMO™65142Page 17601ß™53361November 29, 1980ß
3126Display Turtle for the Knight TV Terminals™57421Section 17.17ß
3127saves the picture extending for 100 turtle steps horizontally and
3128vertically from the point (200, 300) in the file PICTURE > on the
3129current directory.  Captions can be printed on the screen using the
3130MARK command and will appear on the printed picture. The pictures will
3131be approximately the same size as they appear on the TV screen.
3132Currently pictures saved are limited to 300 by 300 TV points.
3133½7Two warnings concerning XGP pictures: First, the XGP has a
3134problem common to all Xerox machines -- an inability to reproduce
3135large black regions. An attempt to print a picture with areas filled
3136in black will cause the black regions to "white out".  Pictures
3137created by using the SHADE command to shade regions with dense
3138patterns will not be printed correctly on the XGP.  Also, it is best
3139to try to limit the area of the screen saved to as small an area as
3140possible. Since picture files must be output to the XGP fast enough to
3141insure that one line is printed before the next one is read, large
3142files may lose when the system is crowded. The symptom of this sort of
3143lossage is blank horizontal bands in the middle of the picture. More
3144efficient XGP commands to be implemented soon will reduce the
3145likelihood of this sort of lossage.  Images on the TV screen drawn by
3146the TV turtle can also be printed using the Tektronix hard copy
3147machine.
3148˜17.18 Shadingž
3149½7A unique advantage of the TV displays over vector oriented
3150displays is that in addition to the display of line drawings, they
3151make feasible the creation of pictures using shaded areas.  Patterns
3152of points of varying densities can be used to fill regions, creating
3153the effect of a "gray scale".  The TV turtle's shading facility is
3154aimed toward creating a convenient and efficient means of specifying
3155areas to be shaded, and patterns to be used in shading.  The basic
3156idea is that regions to be shaded are indicated by drawing a closed
3157curve around them in PENDOWN mode, and placing the turtle inside the
3158region before issuing the SHADE command, with an argument determining
3159the pattern to be used. Several simple patterns are supplied by the
3160system, but the user has the opportunity of defining new ones.
3161SHADE <pattern name>
3162½7Shades the area enclosing the turtle's current location.  The
3163input is a pattern to be used in shading the area, and defaults to the
3164SOLID pattern if omitted. The turtle must be sitting in an empty area
3165[not on a line or in a filled in region], or an error results. The
3166effect of this primitive is to fill in the region surrounding the
3167turtle's location with the shading pattern given [by inclusive OR'ing
3168it in with the existing picture]. The region to be shaded must be
3169bounded by a closed curve; SHADE works by filling in the pattern
3170starting from the turtle's location, and stopping when a boundary is
3171reached. If the region is not closed, the entire screen will be
3172shaded!
3173LISP LOGO MEMO™65142Page 17608ß™53361November 29, 1980ß
3174Display Turtle for the Knight TV Terminals™57421Section 17.18ß
3175˜17.19 Shading Patternsž
3176½7Shading patterns are represented as functions which tell the
3177SHADE primitive how to shade an area.  The system provides a group of
3178predefined shading patterns, described below. These will probably be
3179sufficient for most simple uses of shading, i.e. distinguishing a few
3180neighboring regions with different shading patterns, etc. Those
3181needing more sophisticated capabilities can define their own patterns.
3182The predefined shading patterns currently available are:
3183SOLID
3184½7A shading pattern which fills in every point.  This pattern is
3185the default used if no argument is given to SHADE.
3186CHECKER
3187½7A pattern which fills in every other point, in checkerboard
3188fashion.
3189HORIZLINES
3190½7A pattern consisting of horizontal lines, alternating light and
3191dark.
3192VERTLINES
3193½7Like HORIZLINES, except lines are vertical.
3194GRID
3195½7Both horizontal and vertical lines, superimposed.
3196TEXTURE
3197½7A pattern which turns on points randomly, creating a texture
3198like effect. An average of half the points will be turned on.
3199DARKTEXTURE
3200LIGHTTEXTURE
3201½7Like TEXTURE, but shade using different densities of points.
3202DARKTEXTURE turns on an average of 3/4 of the points, created by ORing
3203two random numbers, LIGHTTEXTURE averages 1/4 of the points, obtained
3204by ANDing two random numbers.
3205½7New shading patterns consisting of arbitrary pictures can be
3206defined by using the following primitive:
3207MAKEPATTERN <pattern-name> <window-name> {MP}
3208½7The first argument is a name for the new pattern. The second is
3209the name of a window, constructed by the MAKEWINDOW command. This
3210creates a new pattern, which consists of the picture saved in the
3211window. The pattern name may then be given as input to SHADE.  The
3212effect will be to fill the closed curve to be shaded with the picture
3213specified by the window.  If area beyond the extent of the original
3214LISP LOGO MEMO™65142Page 17623ß™53361November 29, 1980ß
3215Display Turtle for the Knight TV Terminals™57421Section 17.19ß
3216picture is to be shaded, the picture will be repeated horizontally and
3217vertically as many times as is necessary to fill the area.
3218½7Alternatively, a shading pattern may be constructed by the user
3219directly as a function. [This can result in faster shading than by
3220using a pattern constructed by MAKEPATTERN, although it's more
3221difficult to write, especially for complex patterns.] A pattern is a
3222function of two integer arguments, X and Y coordinates of a word in
3223the TV memory [as for the inputs to TV, See Section 815]. It returns
3224an integer, which indicates the state of 32 bits of the screen, left
3225justified.
3226˜17.20 Invisible Modež
3227½7When a program does both a considerable amount of graphics as
3228well as non-graphic computation, it often becomes convenient to be
3229able to debug these components separately. An "invisible" mode makes
3230it possible to debug the non-graphic parts of a program containing
3231turtle commands, without incurring the overhead of drawing on the
3232screen. When the system is heavily loaded, code run in "invisible"
3233mode will run much faster, allowing the user to run a procedure if he
3234is not interested in the picture drawn, then return to "visible" mode
3235to debug the pictures drawn by the program. Pictures drawn in
3236invisible mode are not saved and returning to visible mode requires
3237that programs be re-executed to observe the picture drawn.
3238INVISIBLE
3239½7Enters "invisible" mode. Any primitive that would cause changes
3240to pictures on the screen: movement of the turtle, display of saved
3241pictures, points, etc. will not cause anything on the screen to change
3242while running in invisible mode.  Execution of procedures containing
3243turtle primitives will proceed much faster; this permits running of
3244procedures containing turtle primitives for the purpose of debugging
3245their non-graphic behavior.
3246VISIBLE
3247½7Returns to "visible" mode. Turtle functions have their usual
3248effect, as well as their usual slowness. VISIBLE causes a CLEARSCREEN.
3249½7
3250˜17.21 Extensionsž
3251½7One possible source of extensions to the TV turtle package
3252would be the inclusion of picture-saving capabilities similar to the
3253SNAP command of the LLOGO turtle for the 340, or to 11LOGO's SNAP.
3254This would differ from the "windows" described above in that it would
3255be a lower-level representation of the picture in terms of vectors to
3256be displayed, rather than an array of points. Because the TV terminals
3257do not have hardware for display of vectors, necessitating the
3258computation of points lying along a vector to draw it, redisplay of a
3259snap would be very nearly as time-consuming as re-executing the LOGO
3260procedure which drew the picture. In contrast, redisplay of a window
3261bypasses that recomputation, and requires much less time to redisplay
3262LISP LOGO MEMO™65142Page 17637ß™53361November 29, 1980ß
3263Display Turtle for the Knight TV Terminals™57421Section 17.21ß
3264than the original drawing procedure required. However, a vector
3265representation does provide several advantages. It is less space-
3266consuming for pictures which occupy large portions of the screen, but
3267contain few vectors. It can be used more easily with pictures for
3268which a description in terms of rectangular portions of the screen
3269would be inconvenient; for example, an irregularly shaped picture
3270surrounded by drawings not to be included in the saved picture. The
3271window representation makes it difficult to assign independent names
3272to the saved graphic output of each of several programs if the
3273pictures overlap.  Certain transformations such as rotations and
3274scaling might be more easily performed on a vector representation than
3275on point arrays.
3276½7An additional difficulty in providing a snap facility in the TV
3277turtle similar to that possible with vector oriented displays would
3278arise in implementing the ERASE SNAP command. If several lines all
3279pass through a single point on the screen, the point must not be
3280turned off until all lines are erased. If one line is erased via an
3281ERASE SNAP, and other lines still pass through the point, the point
3282must not be turned off. This requires keeping track of how many lines
3283pass through each point. Such information could be obtained from
3284computing the intersection and overlap of vectors displayed whenever a
3285vector is drawn or erased, or by keeping a "reference count" for each
3286point, incremented whenever a line passing through the point is drawn,
3287decremented when such a line is erased. The "eraser mode" of the TV
3288turtle turns off points along lines drawn regardless of their previous
3289state. This makes it somewhat less convenient than ERASE SNAP for
3290erasure of one of several overlapping pictures, although the same
3291effect can be achieved by saving the previous contents of an area in a
3292window before drawing over it. In some cases, XOR mode can be used
3293instead, so that the same procedure can be used both to draw a
3294picture, and to erase it.
3295½7Another alternative representation for picture elements would
3296be run length encoding. This would record the contents of an area of
3297the screen, as does the TV turtle "window". Each line of the area is
3298represented as a sequence of numbers.  The numbers in the sequence
3299alternately specify how many consecutive points are on, and how many
3300consecutive points are off.  Like the window operation, this technique
3301is capable of being used with pictures containing shaded areas, which
3302would not be possible with a representation consisting solely of
3303vectors. Although it would require somewhat more computation time to
3304redisplay than would a window, it would not prove quite as space
3305consuming for large and sparse pictures. It is not clear whether the
3306time and space tradeoffs involved would justify the use of this
3307representation.
3308½7Each alternative representation for picture elements carries
3309with it unique advantages and disadvantages, in terms of time and
3310space efficiency, ease of modification, etc. Rather than becoming
3311committed to a single representation, a better goal is to provide
3312flexibility by making available many options and allowing a user or an
3313intelligent system to choose the representation according to the
3314requirements of the application.
3315½7An alternative to the TV turtle's approach to pictures
3316involving shading is to extend the LOGO concept of the turtle's "pen"
3317and "eraser" to a "paintbrush". A "paint" consisting of a particular
3318LISP LOGO MEMO™65142Page 17646ß™53361November 29, 1980ß
3319Display Turtle for the Knight TV Terminals™57421Section 17.21ß
3320shading pattern and a width for the paintbrush would be chosen by the
3321user. When the turtle is moved after the execution of a BRUSHDOWN
3322command, the shading pattern is drawn in an area extending for the
3323specified width on either side of the path of the turtle's movement.
3324However, this method has the disadvantage that programs to shade even
3325very simple geometric figures can become quite complicated. This mode
3326might be useful however, if it were possible to move the brush under
3327control of some analog input such as a light pen or mouse.  Another
3328possibility is to supply the system with specific knowledge about
3329shading common shapes, such as circles.
3330½7Other extensions to the TV turtle could center on providing
3331facilities oriented towards animation. LOGO as a graphics language is
3332primarily oriented toward the display of static pictures; it is weak
3333in some of the capabilities needed for convenient generation of
3334movies. A more extensive vocabulary of transformations which can be
3335applied to pictures would be helpful. This could include rotation and
3336scaling of saved pictures, three dimensional coordinate
3337transformations, as well as a convenient way of incorporating user
3338defined transformations. Some means of explicitly controlling the time
3339in which changes happen to the displayed picture should be provided.
3340Extension of the control structure to allow parallel execution of
3341procedures would facilitate programming independently changes to the
3342picture which should occur simultaneously.
3343½7Another capability which the system should have is some
3344provision for analog input, such as from a light pen, joystick,
3345tablet, or mouse. This would allow the system to obtain and manipulate
3346freehand sketches. Convincing drawings of people or objects that would
3347be difficult to construct from turtle programs could be readily input
3348and then manipulated by programs. Objects on the screen could be
3349selected by a user interactively using a rubber band vector, which is
3350often more convenient than typing, especially for children.
3351˜17.22 Implementationž
3352½7The PDP11 which controls the TV terminals maintains the user's
3353screen in its memory, one bit per point. An ITS system call allows the
335411's memory to be mapped into the address space of a program running
3355on the PDP10. An initialization routine written in LAP assembly
3356language performs this system call, and sets up an array header which
3357convinces LISP that this area of memory is really the data for a LISP
3358two-dimensional integer array. This array is accessible directly by
3359the user who finds the supplied turtle primitives not suited to his
3360needs.  All changes to the display screen are performed directly by
3361LISP STOREs, and the remainder of the display package is written
3362entirely in LISP.
3363½7The following primitives are probably not of general interest,
3364but are internal to the TV turtle package, and might conceivably be of
3365use to a user desiring nonstandard applications.
3366LISP LOGO MEMO™65142Page 17657ß™53361November 29, 1980ß
3367Display Turtle for the Knight TV Terminals™57421Section 17.22ß
3368TV <line> <column-word>
3369½7This is the array which holds the user's TV buffer.  A call to
3370TV returns a 36 bit fixed point number, which contains two 16 bit
3371PDP11 words, left justified.  STORE's into the array will cause the
3372array and the user's screen to be modified as described in the
3373discussion of DRAWMODE, below.  Any such STORE's should keep the low
3374order four bits of each word zero.  The first input counts number of
3375lines from the top, from 0 to 454. The second selects a word on the
3376line, left to right, from 0 to 17 [for a total of 18 * 32 = 576 bits
3377per line].
3378DRAWMODE <mode>
3379½7The PDP11 has a feature which enables any attempt to write a
3380word in the 11's memory from the PDP10 to result in a specified
3381boolean function of the word being written and the word previously
3382there. DRAWMODE changes that specification according to <mode>, which
3383should be an integer representing the mode chosen from the values of
3384one of the following atoms: IOR, XOR, ANDC, SAME, COMP, EQV, SETO,
3385SETZ, SET. For example, STORE TV 0 0 16 will turn the low order bit of
3386the second 16 bit word of the TV buffer on if IOR mode is in effect,
3387off if ANDC mode is in effect, and complement whatever is there if in
3388XOR mode. DRAWMODE returns the number describing the mode previously
3389in effect.
3390:DRAWMODE
3391½7A global variable containing the current mode number as set by
3392the last call to DRAWMODE.
3393LISP LOGO MEMO™65142Page 17662ß™53361November 29, 1980ß
3394Display Turtle for the Knight TV Terminals™57421Section 17.22ß
