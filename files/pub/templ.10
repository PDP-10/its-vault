BEGOF("TEMPL")

COMMENT

MACROs, PROCEDUREs, REPEATs, counter and response templates. If you
don't find here what you are looking for, try file RESPS for
responses, SORCE for source switching, CNTRS for counters.

;

PROCEDURES
PUBLIC SIMPLE PROCEDURE TEMPL! ;$"#
BEGIN "TEMPL!"
MAXTEMPLATE _ 5000 ; TES 8/19/74 ;
END "TEMPL!" ;
PUBLIC RECURSIVE PROCEDURE APPLYTOARGUMENTS(BOOLEAN DO!IT, PROCALL) ;$"#
BEGIN TES 8/19/74 EXTRACTED FROM PASS TO HANDLE PROCEDURES AS WELL AS MACROS ;
BOOLEAN WASLPAR, DUMSEMI ;
INTEGER MACIX, MACSYM, ARGS, ARG, ARGSYM, NAMES, K ;
MACIX _ IX ; MACSYM _ SYMB ; ARGS _ NUMARGS(MACIX) ; DUMSEMI _ FALSE ;
IF ARGS THEN
	BEGIN "SCAN ARGS"
	STRING ARRAY ACTUAL[1:ARGS] ;
	IF  NOT (WASLPAR _ NEXTSCH(<(>)) THEN INPUTSTR _ LIT!ENTITY&LIT!TRAIL&INPUTSTR ;
	comment , Back up. Pretend just passed comma. ; THISWD _ "," ; EMPTYTHAT ;
	NAMES _ NAMEPAR(MACIX) ; comment bit table for name parameters ;
	FOR ARG _ 1 THRU ARGS DO
		BEGIN "EACH ACTUAL"
		IF  NOT ITSCH(<,>) THEN ACTUAL[ARG] _ NULL comment , omitted argument;
		ELSE	BEGIN	RD(TO!VISIBLE) ;
			IF NAMES LAND TWO(ARGS-ARG) = 0 THEN
				BEGIN PASS ; ACTUAL[ARG] _ E(NULL, NULL&'0) ; END
			ELSE	BEGIN "CALL BY NAME"
				IF BRC NEQ """" THEN
				 BEGIN comment , Unquoted Call-By-Name ;
				 IF (K_BRC)="|" THEN RD(ONE!CHAR) ;
				 ACTUAL[ARG]_RD(IF K="|" THEN TO!VBAR!SKIP
					ELSE IF WASLPAR THEN TO!COMMA!RPAR ELSE TO!TERQ!CR) ;
				 IF BRC=CR AND  NOT WASLPAR THEN
					BEGIN comment force a semicolon ;
					INPUTSTR _ ";" & INPUTSTR ;
					DUMSEMI _ TRUE ;
					END ;
				 PASS ;
				 END
				ELSE	BEGIN PASS ; ACTUAL[ARG]_E(NULL,0) END ;
				END "CALL BY NAME"
			END
		END "EACH ACTUAL" ;
	WHILE ITSCH(<,>) DO
		BEGIN
		WARN("=",<"Too Many Arguments to "&SYM[MACSYM]>) ;
		PASS ; E(NULL, 0) ;
		END ;
	IF ITSCH(<)>) AND WASLPAR THEN BEGIN comment  Easy case; END
	ELSE	BEGIN
		IF WASLPAR THEN WARN("=",<"Missed ) After Macro Call">) ;
		comment Back Up -- SWICH only saves THATWD ;
		IF THATISFULL THEN comment Unlikely; INPUTSTR _ LIT!ENTITY&LIT!TRAIL&INPUTSTR ;
		IF THISISFULL AND  NOT DUMSEMI THEN BEGIN THATWD _ LIT!ENTITY _ THISWD ;
			LIT!TRAIL _ IF THISTYPE<-1 THEN NULL ELSE SP ;
			THATTYPE _ THISTYPE MIN 0 END ELSE EMPTYTHAT ;
		END ;
	IF PROCALL THEN SWICH("RETURN(NULL);;",-2-BLNMS,0) ; TES 8/20/74 ;
	IF DO!IT THEN
		BEGIN "STACK ARGUMENTS"
		IF LAST + ARGS > SIZE THEN GROWNESTS ;
		FOR ARG _ 1 THRU ARGS DO
			SNEST[LAST + ARG] _ ACTUAL[ARG] ;
		LAST _ LAST + ARGS ; 
		END "STACK ARGUMENTS" ;
	END "SCAN ARGS" ;
IF PROCALL AND NOT ARGS THEN SWICH("RETURN(NULL);;",-2-BLNMS,0) ; TES 8/20/74 ;
IF DO!IT THEN SWICH(SSTK[BODY(MACIX)], -1, ARGS)
ELSE BEGIN THISWD _ "7" ; THISTYPE _ -1 END ; COMMENT, Replace by NULL ("") ;
END "APPLYTOARGUMENTS" ;
PUBLIC SIMPLE PROCEDURE DDONE(BOOLEAN RETURNS) ;$"#
BEGIN TES 8/14/74 (DONE) 8/19/74 (RETURN);
INTEGER B ; STRING VAL ; BOOLEAN GOT ;
PASS ;
IF ON THEN
IF NOT RETURNS AND DEEPREPEATS=0 THEN WARN(NULL,"Ignored a DONE without a repeat")
ELSE IF RETURNS AND DEEPPROCEDURES=0 THEN WARN(NULL, "Ignored a RETURN not in a PROCEDURE")
ELSE
BEGIN
IF RETURNS THEN
	BEGIN
	DEEPPROCEDURES _ DEEPPROCEDURES - 1 ;
	IF ITSCH(<(>) THEN
		BEGIN COMMENT VALUE TO RETURN ;
		PASS ;
		VAL _ E(NULL, NULL) ;
		IF NOT ITSCH(<)>) THEN WARN(NULL, <"Missed ) after RETURN">) ;
		END
	ELSE VAL _ NULL ;
	END
ELSE DEEPREPEATS _ DEEPREPEATS - 1 ;
EMPTYTHIS ; EMPTYTHAT ; INPUTSTR _ NULL ;
DO	BEGIN
	WHILE LAST AND CHANSCAN(LAST) > -2 DO
		INPUTSTR _ SWICHBACK ;
	GOT _ RETURNS EQV EQU("RETURN(", STRSCAN(LAST)[1 TO 7]) ;
	STRSCAN(LAST) _ NULL ;
	IF NOT GOT THEN CHANSCAN(LAST)_-1 ;
	END UNTIL GOT ;
B _ -2 - CHANSCAN(LAST) ;
WHILE B<BLNMS DO
	CASE IF STARTS THEN 0 ELSE ENDCASE OF
		BEGIN
		BEGIN BLNMS_BLNMS-1 ; STARTS_STARTS-1 ; END ;
		BEGIN BLNMS_BLNMS-1 ; IF ENDBLOCK THEN WARN("=","Missed END")  END ;
		IF ENDBLOCK THEN WARN("=", "Missed END") ELSE
			BEGIN BLNMS_BLNMS-1 ; IF ENDBLOCK THEN WARN("=","Missed END")  END ;
		BEGIN BLNMS_BLNMS-1 ; IF ENDBLOCK THEN MYEND _ TRUE ELSE WARN("=","Extra END") END ;
		END ;
CHANSCAN(LAST) _ -1 ;
INPUTSTR _ SWICHBACK ;
PASS ;
IF RETURNS THEN PROCVALUE _ VAL ;
END ;
END "DDONE" ;
PUBLIC STRING SIMPLE PROCEDURE DEFN(BOOLEAN SUBSTVARIABLES,FORFILE; INTEGER ARGS, IBASE) ;$"#
BEGIN
STRING SEGMENT, IDENT, PSPCS, SPCS, FML, TXID, TX2 ;
INTEGER SINDX, I, DEEP, PGMKS, REQRS ;
LABEL FORMAL ;
IF ITSCH(;) THEN PASS ; DEFINING _ NOT FORFILE ; comment, makes RD include line nos in result ;
IF  NOT ITSCH() AND NOT(ITSCH($) AND NEXTSCH(<(>))
	THEN BEGIN WARN("=",<"Missed Horseshoe, ^P,  OR $( in definition">) ; RETURN(NULL) END ;
DEEP _ 1 ; SINDX _ SHIGH ;
IF SHIGH+20>STSIZE THEN
	BEGIN
	SGROW(STBL,STBLIDA,STSIZE,100,"Definition") ;
	SMAKEBE(STBLIDA, STBL) ; ZEROSTRINGS(100, STBL[STSIZE-99]) ;
	END ;
EMPTYTHIS ; comment For page label switch in LABELREF ;
IF FORFILE THEN STBL[SINDX_SINDX+1] _ SRCLINE & "/" & SRCPAGE & TB & ALTMODE ;
IF EQU(INPUTSTR[1:2], RCBRAK&VT) THEN
	BEGIN
	STBL[SINDX _ SINDX + 1] _ CRLF & SRCLINE & "/" & SRCPAGE & TB ;
	INPUTSTR _ INPUTSTR[3:] ;
	END ;
PGMKS _ PAGEMARKS ; REQRS _ LAST ; TES 8/19/74 ;
WHILE DEEP DO
	BEGIN "DEF BODY"
	SEGMENT _ RD(DEFN!TABLE) ;
	IF BRC = "" OR BRC="$" AND INPUTSTR="(" AND LOP(INPUTSTR)="(" THEN
		BEGIN DEEP _ DEEP + 1 ; SEGMENT _ SEGMENT & "" ; END
	ELSE IF BRC = "" OR BRC=")" AND INPUTSTR="$" AND LOP(INPUTSTR)="$" THEN
		BEGIN DEEP _ DEEP - 1 ;
		SEGMENT _ SEGMENT & (IF DEEP THEN "" ELSE SP) ;
		END
	ELSE IF BRC = "" THEN SEGMENT _ SEGMENT & (IF DEEP>1 THEN BRC ELSE NULL) & RD(ONE!CHAR)
	ELSE IF LENGTH(TXID_BRC)  AND 
		(LDB(SPCODE(BRC))=LCURLY  OR 
		 LDB(SPCODE(BRC))=DOLLAR AND LDB(SPCODE(INPUTSTR))=LBRACK  AND 
			LENGTH(TXID_TXID&LOP(INPUTSTR))) THEN
		IF SUBSTVARIABLES THEN
		BEGIN "{..."
		SPCS _ TXID & RD(TO!VISIBLE) ;
		IDENT _ SCAN(INPUTSTR,ALPHA,DUMMY) ; PSPCS _ RD(TO!VISIBLE) ;
		IF BRC = RCBRAK OR BRC="]" AND INPUTSTR[2 FOR 1]="$"THEN
			BEGIN
			LOPP(INPUTSTR) ;
			IF BRC="]" THEN BEGIN TX2_"]$" ; LOPP(INPUTSTR) END ELSE TX2_RCBRAK ;
			SEGMENT _ SEGMENT &
			(IF FULSTR(IDENT) AND SIMLOOK(CAPITALIZE(IDENT))
			 AND SYMTYPE<MACROTYPE THEN  TES 11/29/73 ;
				IF SYMIX=IXPAGE THEN ALTMODE&"[@]"&
				 LABELREF(0,
					IF SYMBOL=SYMPAGE THEN CTR!CHRS(IXPAGE)
					ELSE PATT!CHRS(IXPAGE))
				ELSE EVALV(IDENT, SYMIX, SYMTYPE)
			ELSE SPCS & IDENT & PSPCS & TX2)
			END
		ELSE SEGMENT _ SEGMENT & SPCS & IDENT & PSPCS ;
		END "{..."
		ELSE SEGMENT _ SEGMENT & TXID
	ELSE IF BRC = RCBRAK THEN
		IF EQU(INPUTSTR[1:2], RCBRAK&VT) THEN ELSE SEGMENT _ SEGMENT & BRC
	ELSE IF LDB(FAMILY(BRC)) = LETTQ THEN
		BEGIN "LETTER"
		IDENT _ (BRC+0) & SCAN(INPUTSTR, ALPHA, BRC) ;
		FOR I _ 1 THRU ARGS DO IF EQU(FML_SYM[ITBL[IBASE+I]], TXID_CAPITALIZE(IDENT)) THEN
				FORMAL: BEGIN IDENT _ VT & I ; DONE END
			ELSE IF 1 LEQ LENGTH(TXID)-LENGTH(FML) LEQ 2 THEN
				BEGIN "MAYBE UNDERLINED"
				INTEGER L, R ;
				L _ IF IDENT="" THEN 1 ELSE 0 ; R _ IF IDENT[ FOR 1]="" THEN 1 ELSE 0 ;
				IF EQU(FML, TXID[1+L TO -R]) THEN
					BEGIN
					IF L THEN SEGMENT _ SEGMENT & "" ;
					IF R THEN INPUTSTR _ "" & INPUTSTR ;
					GO TO FORMAL ;
					END ;
				END "MAYBE UNDERLINED" ;
		SEGMENT _ SEGMENT & IDENT ;
		END "LETTER"
	ELSE SEGMENT _ SEGMENT & BRC ;
	STBL[SINDX _ SINDX+1] _ SEGMENT ; 
	IF SINDX = SHIGH+20 THEN
		BEGIN
		SEGMENT _ STBL[SHIGH + 1] ;
		FOR I _ SHIGH + 2 THRU SINDX DO BEGIN SEGMENT _ SEGMENT & STBL[I] ; STBL[I]_NULL; END;
		SINDX _ SHIGH + 1 ; STBL[SINDX] _ SEGMENT ;
		IF DEEP THEN TES 8/19/74 CHECK FOR INFINITE TEMPLATE ;
			IF LENGTH(SEGMENT) > MAXTEMPLATE THEN
				BEGIN
				WARNLONG(SEGMENT, "A template is longer than " &
    				CVS(MAXTEMPLATE) & " characters" & CRLF &
    				"If you really have such a long one, increase the value of maxtemplate") ;
				STBL[SINDX] _ NULL ; DONE ;
				END
			ELSE IF PAGEMARKS > PGMKS THEN
				BEGIN
				WARNLONG(SEGMENT,
					"A template crosses a manuscript page mark (form feed)") ;
				STBL[SINDX] _ NULL ; DONE ;
				END
			ELSE IF LAST NEQ REQRS THEN
				BEGIN
				WARNLONG(SEGMENT, "A template crosses a file boundary (eof)") ;
				STBL[SINDX] _ NULL ; DONE ;
				END ;
		END ;
	END "DEF BODY" ;
SEGMENT _ STBL[SHIGH+1] ; FOR I _ SHIGH+2 THRU SINDX DO SEGMENT _ SEGMENT & STBL[I] ;
IF FORFILE THEN SEGMENT _ SEGMENT & LF ;
 DEFINING _ FALSE ; INPUTSTR _ ";" & INPUTSTR ; PASS ;
RETURN(SEGMENT) ;
END "DEFN" ;
PUBLIC SIMPLE PROCEDURE DMACRO(INTEGER ODDONE) ;$"#
TES 8/19/74 ODDONE= 0:RECURSIVE MACRO 1:MACRO 2:PROCEDURE;
BEGIN COMMENT, OLD VERSION NOT GARBAGED BUT COULD BE ;
INTEGER SIHIGH, MIX, ARGS, J, NAMES, NAME ; BOOLEAN ROTTEN ;
SIHIGH _ IHIGH ; DPASS ; IF  NOT THISISID THEN BEGIN WARN("=","Macro name not identifier") ; RETURN END ;
IF THATISID THEN BEGIN "TWO WORD" THISWD _ THISWD & SP & THATWD ; RDENTITY ; END "TWO WORD" ;
PUTI(1, SYMNUM(THISWD)) ; PASS ;
IF ITSCH(<(>) THEN
BEGIN "FORMALS"
ROTTEN _ FALSE ; THISWD _ "," ; NAMES _ 0 ;
DO	BEGIN
	IF ITSCH(<,>) THEN DPASS
	ELSE BEGIN WARN("=","Missed comma in macro formal list") ; ROTTEN_TRUE END ;
	IF ITSCH() THEN BEGIN DPASS ; NAME _ 0 ; END ELSE NAME _ 1 ;
	IF  NOT THISISID THEN BEGIN WARN("=","Formal parameters must be identifiers") ; ROTTEN_TRUE END
	ELSE BEGIN PUTI(1, SYMB) ; NAMES _ 2*NAMES + NAME ; DPASS END ;
	END
UNTIL ITSCH(<)>) OR ROTTEN ;
IF ITSCH(<)>) THEN PASS ;
END "FORMALS" ;
IF ROTTEN OR  NOT ON THEN BEGIN IHIGH _ SIHIGH ; DEFN(FALSE, FALSE,0,0) ; RETURN END ;
ARGS _ IHIGH - SIHIGH - 1 ; BIND(DECLARE(ITBL[SIHIGH+1], MACROTYPE), MIX_PUSHI(MACROWDS,MACROTYPE)) ;
NUMARGS(MIX) _ ARGS ; ODDMAC(MIX) _ ODDONE ; BODY(MIX) _ PUSHS(1,DEFN(FALSE, FALSE,ARGS,SIHIGH+1)) ;
IHIGH _ SIHIGH ; NAMEPAR(MIX) _ NAMES ;
END "DMACRO" ;
PUBLIC SIMPLE PROCEDURE DREPEAT ;$"#
BEGIN TES 8/14/74 ;
STRING BOD ;
PASS ;
BOD _ DEFN(FALSE, FALSE, 0, 0) ;
IF ON THEN
	BEGIN
	DEEPREPEATS _ DEEPREPEATS + 1 ;
	SWICH(BOD, -2-BLNMS, 0) ;
	SWICH(BOD, -1, 0) ;
	PASS ;
	END ;
END "DREPEAT" ;
PUBLIC RECURSIVE STRING PROCEDURE PROCSTATEMENT ;$"#
    IF THISTYPE = MACROTYPE THEN
	IF ODDMAC(IX)<2 THEN WARN(NULL,<"Unexpanded MACRO "&THISWD&" (PUB Bug)">)
	ELSE IF ON THEN
		BEGIN
		INTEGER PR ;
		PR_DEEPPROCEDURES_DEEPPROCEDURES+1;
		APPLYTOARGUMENTS(TRUE, TRUE);
		DO STATEMENT UNTIL DEEPPROCEDURES<PR;
		RETURN(TRUE) ;
		END
	ELSE	BEGIN
		APPLYTOARGUMENTS(FALSE, FALSE) ;
		RETURN(TRUE) ;
		END
    ELSE RETURN(FALSE) ;
PUBLIC SIMPLE PROCEDURE WARNLONG(STRING SEGM, MESG) ;$"#
	WARN(NULL, <MESG & CRLF &
		"[You probably omitted a template closer: )$ or ^P or Horseshoe]"
		& CRLF & "The template began with:" & CRLF & SEGM[1 TO 70]>) ;
FINISHED

ENDOF("TEMPL")
