
;This file contains the de-macrofied versions of the function definitions
;in the file SCA;SET 26.  To see the definitions of MAKE-FUNARG, TFCN-DEBUG0,
;TFCN-DEBUG1, TFCN-DEBUG2, TFCN-DEBUG3, and TFCN-DEBUG4, see SCA;FCNS >.

(DEFUN BOOLEAN$MODE-CREATE NIL 
       (BIND ((ANS <- (MAKHUNK 7)))
	     (_ (CXR 1 ANS)
		(MAKE-FUNARG 'BOOLEAN$=$1 ANS 'TFCN-DEBUG2))
	     (_ (CXR 2 ANS)
		(MAKE-FUNARG 'BOOLEAN$TRUE$2 ANS 'TFCN-DEBUG0))
	     (_ (CXR 3 ANS)
		(MAKE-FUNARG 'BOOLEAN$FALSE$3 ANS 'TFCN-DEBUG0))
	     (_ (CXR 4 ANS)
		(MAKE-FUNARG 'BOOLEAN$NOT$4 ANS 'TFCN-DEBUG1))
	     (_ (CXR 5 ANS)
		(MAKE-FUNARG 'BOOLEAN$AND$5 ANS 'TFCN-DEBUG2))
	     (_ (CXR 6 ANS)
		(MAKE-FUNARG 'BOOLEAN$OR$6 ANS 'TFCN-DEBUG2))
	     ANS))

(DEFUN BOOLEAN$=$1 (X Y **TFCN-TREE**) (EQ X Y))

(DEFUN BOOLEAN$TRUE$2 (**TFCN-TREE**) T)

(DEFUN BOOLEAN$FALSE$3 (**TFCN-TREE**) NIL)

(DEFUN BOOLEAN$NOT$4 (X **TFCN-TREE**) (NOT X))

(DEFUN BOOLEAN$AND$5 (X Y **TFCN-TREE**) (AND X Y))

(DEFUN BOOLEAN$OR$6 (X Y **TFCN-TREE**) (OR X Y))

(DEFUN SET$MODE-CREATE (VAR1 VAR2 VAR3) 
       (BIND ((ANS <- (MAKHUNK 28)))
	     (_ (CXR 1 ANS) VAR1)
	     (_ (CXR 2 ANS) VAR2)
	     (_ (CXR 3 ANS) VAR3)
	     (_ (CXR 4 ANS)
		(MAKE-FUNARG 'SET$EMPTY-RSET$1
			     ANS
			     'TFCN-DEBUG0))
	     (_ (CXR 5 ANS)
		(MAKE-FUNARG 'SET$EMPTY?$2 ANS 'TFCN-DEBUG1))
	     (_ (CXR 6 ANS)
		(MAKE-FUNARG 'SET$NREVERSE$3 ANS 'TFCN-DEBUG1))
	     (_ (CXR 7 ANS)
		(MAKE-FUNARG 'SET$FIRST$4 ANS 'TFCN-DEBUG1))
	     (_ (CXR 8 ANS)
		(MAKE-FUNARG 'SET$FIRST$16 ANS 'TFCN-DEBUG1))
	     (_ (CXR 9 ANS)
		(MAKE-FUNARG 'SET$REST$5 ANS 'TFCN-DEBUG1))
	     (_ (CXR 10 ANS)
		(MAKE-FUNARG 'SET$REST$17 ANS 'TFCN-DEBUG1))
	     (_ (CXR 11 ANS)
		(MAKE-FUNARG 'SET$NRECONC$8 ANS 'TFCN-DEBUG2))
	     (_ (CXR 12 ANS)
		(MAKE-FUNARG 'SET$EMPTY?$18 ANS 'TFCN-DEBUG1))
	     (_ (CXR 13 ANS)
		(MAKE-FUNARG 'SET$EMPTY-SET$19
			     ANS
			     'TFCN-DEBUG0))
	     (_ (CXR 14 ANS)
		(MAKE-FUNARG 'SET$SORTED-RSET$20
			     ANS
			     'TFCN-DEBUG1))
	     (_ (CXR 15 ANS)
		(MAKE-FUNARG 'SET$COPY1$21 ANS 'TFCN-DEBUG1))
	     (_ (CXR 16 ANS)
		(MAKE-FUNARG 'SET$SINGLETON-SET$22
			     ANS
			     'TFCN-DEBUG1))
	     (_ (CXR 17 ANS)
		(MAKE-FUNARG 'SET$TTF$23 ANS 'TFCN-DEBUG2))
	     (_ (CXR 18 ANS)
		(MAKE-FUNARG 'SET$TTF$6 ANS 'TFCN-DEBUG2))
	     (_ (CXR 19 ANS)
		(MAKE-FUNARG 'SET$=$13 ANS 'TFCN-DEBUG2))
	     (_ (CXR 20 ANS)
		(MAKE-FUNARG 'SET$SETIFY$24 ANS 'TFCN-DEBUG1))
	     (_ (CXR 21 ANS)
		(MAKE-FUNARG 'SET$SUBSET?$14 ANS 'TFCN-DEBUG2))
	     (_ (CXR 22 ANS)
		(MAKE-FUNARG 'SET$DISJOINT?$15
			     ANS
			     'TFCN-DEBUG2))
	     (_ (CXR 23 ANS)
		(MAKE-FUNARG 'SET$INTERSECT$7 ANS 'TFCN-DEBUG2))
	     (_ (CXR 24 ANS)
		(MAKE-FUNARG 'SET$UNION$9 ANS 'TFCN-DEBUG2))
	     (_ (CXR 25 ANS)
		(MAKE-FUNARG 'SET$COMPLEMENT$10
			     ANS
			     'TFCN-DEBUG2))
	     (_ (CXR 26 ANS)
		(MAKE-FUNARG 'SET$DIFFERENCE$11
			     ANS
			     'TFCN-DEBUG2))
	     (_ (CXR 27 ANS)
		(MAKE-FUNARG 'SET$SYMMDIFFERENCE$12
			     ANS
			     'TFCN-DEBUG2))
	     ANS))

(DEFUN SET$EMPTY-RSET$1 (**TFCN-TREE**) NIL)

(DEFUN SET$EMPTY?$2 (S **TFCN-TREE**) (NULL S))

(DEFUN SET$NREVERSE$3 (ROUT **TFCN-TREE**) (NREVERSE ROUT))

(DEFUN SET$FIRST$4 (S **TFCN-TREE**) (CAR S))

(DEFUN SET$FIRST$16 (ROUT **TFCN-TREE**) (CAR ROUT))

(DEFUN SET$REST$5 (S **TFCN-TREE**) (CDR S))

(DEFUN SET$REST$17 (ROUT **TFCN-TREE**) (CDR ROUT))

(DEFUN SET$NRECONC$8 (ROUT S **TFCN-TREE**) (NRECONC ROUT S))

(DEFUN SET$EMPTY?$18 (L **TFCN-TREE**) (NULL L))

(DEFUN SET$EMPTY-SET$19 (**TFCN-TREE**) NIL)

(DEFUN SET$SORTED-RSET$20 (L **TFCN-TREE**) 
       (SORT L
	     (FUNCTION (LAMBDA (ELT1 ELT2) 
			       (TFCN-CALL (ARG (2 2) . 3) ELT2 ELT1))))) 

(DEFUN SET$COPY1$21 (L **TFCN-TREE**) (APPEND L NIL))

(DEFUN SET$SINGLETON-SET$22 (ELT **TFCN-TREE**) (LIST ELT))

(DEFUN SET$TTF$23 (ELT S **TFCN-TREE**) (CONS ELT S))

(DEFUN SET$TTF$6 (ELT ROUT **TFCN-TREE**) (CONS ELT ROUT))

(DEFUN SET$=$13 (S1 S2 **TFCN-TREE**) 
       (DO ((S1 S1 (CDR S1)) (S2 S2 (CDR S2)))
	   ((NULL S1) (NULL S2))
	   (COND ((OR (NULL S2)
		      (NOT (TFCN-CALL (ARG (2 2) . 2) (CAR S1) (CAR S2))))
		  (RETURN NIL)))))

(DEFUN SET$SETIFY$24 (L **TFCN-TREE**) 
       (COND
	((NULL L) NIL)
	(T (DO ((ROUT (TFCN-CALL (TFCN (3)
				       SET$SORTED-RSET$20)
				 (APPEND L NIL)))
		(S))
	       NIL
	       (SETQ S (LIST (PROG2 NIL (CAR ROUT) (SETQ ROUT (CDR ROUT)))))
	       (MAPC (FUNCTION (LAMBDA (ELT) 
				       (COND ((NOT (TFCN-CALL (ARG (2 2) . 2)
							      ELT
							      (CAR S)))
					      (SETQ S (CONS ELT S))))))
		     ROUT)
	       (RETURN S)))))

(DEFUN SET$SUBSET?$14 (S1 S2 **TFCN-TREE**) 
       (DO NIL
	   ((NULL S1) T)
	   (COND ((NULL S2) (RETURN NIL))
		 ((TFCN-CALL (ARG (2 2) . 3) (CAR S1) (CAR S2))
		  (RETURN NIL))
		 ((TFCN-CALL (ARG (2 2) . 3) (CAR S2) (CAR S1))
		  (SETQ S2 (CDR S2)))
		 (T (PROGN (SETQ S1 (CDR S1)) (SETQ S2 (CDR S2)))))))

(DEFUN SET$DISJOINT?$15 (S1 S2 **TFCN-TREE**) 
       (DO NIL
	   ((OR (NULL S1) (NULL S2)) T)
	   (COND ((TFCN-CALL (ARG (2 2) . 3) (CAR S1) (CAR S2))
		  (SETQ S1 (CDR S1)))
		 ((TFCN-CALL (ARG (2 2) . 3) (CAR S2) (CAR S1))
		  (SETQ S2 (CDR S2)))
		 (T (RETURN NIL)))))

(DEFUN SET$INTERSECT$7 (S1 S2 **TFCN-TREE**) 
       (DO ((ROUT NIL))
	   ((OR (NULL S1) (NULL S2)) (NREVERSE ROUT))
	   (COND ((TFCN-CALL (ARG (2 2) . 2) (CAR S1) (CAR S2))
		  (SETQ ROUT
			(CONS (PROG2 NIL (CAR S1) (SETQ S1 (CDR S1))) ROUT))
		  (SETQ S2 (CDR S2)))
		 ((TFCN-CALL (ARG (2 2) . 3) (CAR S1) (CAR S2))
		  (SETQ S1 (CDR S1)))
		 (T (SETQ S2 (CDR S2))))))

(DEFUN SET$UNION$9 (S1 S2 **TFCN-TREE**) 
       (DO ((ROUT NIL))
	   ((NULL S1) (NRECONC ROUT S2))
	   (COND ((NULL S2) (RETURN (NRECONC ROUT S1)))
		 ((TFCN-CALL (ARG (2 2) . 3) (CAR S1) (CAR S2))
		  (SETQ ROUT
			(CONS (PROG2 NIL (CAR S1) (SETQ S1 (CDR S1))) ROUT)))
		 ((TFCN-CALL (ARG (2 2) . 3) (CAR S2) (CAR S1))
		  (SETQ ROUT
			(CONS (PROG2 NIL (CAR S2) (SETQ S2 (CDR S2))) ROUT)))
		 (T (SETQ ROUT
			  (CONS (PROG2 NIL (CAR S1) (SETQ S1 (CDR S1))) ROUT))
		    (SETQ S2 (CDR S2))))))

(DEFUN SET$COMPLEMENT$10 (S1 S2 **TFCN-TREE**) 
       (DO ((ROUT NIL))
	   ((NULL S1) (NRECONC ROUT S2))
	   (COND ((NULL S2) (RETURN (NREVERSE ROUT)))
		 ((TFCN-CALL (ARG (2 2) . 3) (CAR S1) (CAR S2))
		  (SETQ S1 (CDR S1)))
		 ((TFCN-CALL (ARG (2 2) . 3) (CAR S2) (CAR S1))
		  (SETQ ROUT
			(CONS (PROG2 NIL (CAR S2) (SETQ S2 (CDR S2))) ROUT)))
		 (T (PROGN (SETQ S1 (CDR S1)) (SETQ S2 (CDR S2)))))))

(DEFUN SET$DIFFERENCE$11 (S1 S2 **TFCN-TREE**) 
       (TFCN-CALL (TFCN (5 5) SET$COMPLEMENT$10) S2 S1))

(DEFUN SET$SYMMDIFFERENCE$12 (S1 S2 **TFCN-TREE**) 
       (DO ((ROUT NIL))
	   ((NULL S1) (NRECONC ROUT S2))
	   (COND ((NULL S2) (RETURN (NRECONC ROUT S1)))
		 ((TFCN-CALL (ARG (2 2) . 3) (CAR S1) (CAR S2))
		  (SETQ ROUT
			(CONS (PROG2 NIL (CAR S1) (SETQ S1 (CDR S1))) ROUT)))
		 ((TFCN-CALL (ARG (2 2) . 3) (CAR S2) (CAR S1))
		  (SETQ ROUT
			(CONS (PROG2 NIL (CAR S2) (SETQ S2 (CDR S2))) ROUT)))
		 (T (PROGN (SETQ S1 (CDR S1)) (SETQ S2 (CDR S2)))))))
