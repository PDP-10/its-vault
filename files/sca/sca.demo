;-*-stl-*-
;This UREAD-able file is a demo of the SCA package, using STL.


(setq ^w t)

(defmode *poly*
	 (mode fixnum (fixnum var) (fixnum var prin1 nil))
	 (tdeclare (var i))
	 (constant base var [0])
	 (defun base? (i) *boolean* [0? i])
	 (defun prin1 (i) any (princ 'V) (princ i))
	 (mode mpoly (coef *integer* qrc *qri*))
	 (ret-check (ordered-ringc1 poly)))

(mode *poly* *poly*)


(defmode *diff-form*
	 (mode set (elt var set ext-monom rset rext-monom))
	 (constant lbasis-elts ext-monom
		   [ttf [var 1] [var 2] [var 3] [var 4] [empty]])
	 (mode diff-form (fcn-coef poly basis-elt var)))

(mode *diff-form* *diff-form*)

(progn (setq ^w nil) (stl-init) (terpri) '*)

(tdeclare (poly p p1 p2 p3) (diff-form w w1 w2 w3 w4 w5))

;Polynomial hacking [P = 0, P1 = 1, P2 = Y, P3 = Z]:
(_ p [0] p1 [1] p2 [poly [var 2]] p3 [poly [var 3]])

[+ p p1] 

[* p p2] 

(_ p [^ [+ p1 p2 p3 [* p2 p2]] 5]) 

;Add GCD stuff:
;[subres-gcd [deriv p] p] 
;[reduced-gcd [+ p1 [* 2 p2] [^ p2 2]] [+ [* 2 p1] [* 3 p2] [^ p2 2]]] 

[// [^ [+ p1 p2] 20] [^ [+ p1 p2] 19]] 

'|Enough poly hacking, now for differential forms:|

(_ w [0] w1 [1])

[+ w w1] 

[* 5 w1] 

(_ w1 [single [term [1] [single [monom [single [var 1]] [1]]]]]
   w2 [single [term [1] [single [monom [single [var 2]] [1]]]]]
   w3 [single [term [1] [single [monom [single [var 3]] [1]]]]]
   w4 [single [term [1] [single [monom [single [var 4]] [1]]]]])

;W1, W2, and W3 now form a dual basis to the dual basis of the tangent space,
;or something like that.  The idea is that W1 = dX, W2 = dY, and W3 = dZ.

[* -3 w2] 

[wedge w1 w2] 

[wedge w2 w1] 

(_ w5 [wedge [+ w1 w2] [+ w2 w3]])

[wedge w5 w1] 

[ext-deriv [* [+ p2 p3] [+ w2 w4]]] 

'|End of Init|
