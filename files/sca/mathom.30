;-*-stl-*-
;***********************************************************************
;********************** Miscellaneous Unused Code **********************
;****** (c) copyright 1977 Massachusetts Institute of Technology *******
;***********************************************************************
;********************* Do not modify this file !!! *********************
;***********************************************************************


;This file contains miscellaneous code which may be of interest but is not
;currently used.  Please do not delete anything as these functions may be put
;into the SCA system at any time.  Thank you.

            (comment Polynomial Multiplication)


(mdefun ptimesa (x y)
	(mdeclare (poly x y))
	(bind ((tot <- nil)
	       (pvar <- :x:var)
	       sum e)
	      (do x x :x:red (null x)
		  (do y y :y:red (null y)
		      (setq tot (cons (cons (g+ :x:e :y:e) (g* :x:c :y:c)) tot))))
	      (setq tot (sortcar tot (function g>))
		    x (c-poly nil nil nil)
		    y x
		    sum (cdar tot)
		    e (caar tot))
	      (mapc (fn (pair)
			(cond ((g= (car pair) e)
			       (setq sum (g+ sum (cdr pair))))
			      ((g0? sum)
			       (setq e (car pair))
			       (setq sum (cdr pair)))
			      (t
			       (setq y (_ :y:red (c-poly pvar e sum)))
			       (setq e (car pair))
			       (setq sum (cdr pair)))))
		    (cdr tot))
	      (psimp :x:red pvar)))

;OBASE stuff:


;; KERNELS present another problem.  Using old
;; rational function package notions, kernels are atomic variables or
;; transcendental expressions, i.e. things which must be accepted as given and
;; cannot be decomposed by the particular alg-struct in question.  Conceivably
;; each alg-struct could handle its own kernels, but since there should be
;; some communication between alg-structs, this problem almost always arises
;; from traditional rational function package usage, and hash tables seem the
;; answer, it has been decided to use just one hash table which everyone can
;; access.  Its size is controlled by the special variable *CASHASHSIZE*
;; [100.].  Elements of this hash-table are in the mode KHASH-ELT, which are
;; lists of KERNEL's.  KERNEL's are lists of VAR's, which point to varnums
;; (fixnums >= 2^18), var-list numbers (positive fixnums, except 0 for general
;; representation), possible auxiliary info (such as algebraic relations), and
;; the associated KERNEL.  Conversion is accomplished by GCONVERT, with
;; repping and disrepping as special cases (from and to MACSYMA general
;; representation).  The two-tier numbering method is used***?
;; Generic functions such as + and * for rings may be
;; referenced by G+, G*, etc., which will dispatch on the type of alg-struct
;; containing the elts (which is an argument to the function).  In case the
;; elts are alg-elts, then M+, M*, etc. may be used, which find the alg-struct
;; type in the CAR of one of the elts.  MACSYMA General Representation is
;; considered as one particular type of alg-struct:  its type code number is
;; always 0 (no value judgement implied).


(defmode khash-elt
	 !@(struct <k kernel> <lk khash-elt nil>))

(defmode kernel
	 !@(struct <v var> <lv kernel nil>))

(defmode var
	 !@(struct <varnum> <varlist-num> <misc> <k kernel>))
