.c This file is part of the Lisp Machine Manual.  -*-Text-*-
.c Debugging: The Error Handler

.chapter "The Error Handler"

	The Lisp Machine Error Handler is an interactive subsystem which
can be used to examine and alter the state of the Lisp environment, and
to aid in debugging.  This chapter explains how to enter the error handler,
and how to use it.

.section "Entering the Error Handler"

	When an error is detected, the error handler is entered.
There are two kinds of errors:
those detected by the Lisp Machine's microcode, and those caused by Lisp
functions which have called a function such as 3ferror* or 3error*.  When there
is a microcode error, the error handler prints out a message such as the following:
.lisp
>>TRAP 5543 (TRANS-TRAP)
The symbol FOOBAR is unbound.
While in the function *EVAL  SI:LISP-TOP-LEVEL1
.end_lisp
	The first line of this error message simply indicates entry to
the error handler; the mysterious numbers and so on are internal
information which may be useful for the maintainers of the error system
in case there are bugs in it.  The second line contains a description
of the error in English.  The third line indicates where the error
happened by printing a very abbreviated "backtrace" of the stack (see
below); in the example, it is saying that the error was taken by the
function 3*eval*, which was called by 3si:lisp-top-level1*.

	Here is an example of a macrocode error.

.lisp
>>ERROR: The argument X was 1, which is not a symbol,
While in the function { FERROR  } FOO  *EVAL
.end_lisp
	Here the first line contains the English description of the
error message, and the second line contains the abbreviated backtrace.
The backtrace here indicates that the function which actually entered
the error handler was 3ferror*, but that function is indicated in
braces because it is not very important; the useful information here is
that the function 3foo* is what called 3ferror* and thus generated
the error.

There is not any good way to manually get into the error handler;
I think when we have interrupts
and so on we will need something to let you interrupt the machine and
examine the stack and so on.


	If you are writing a program which has detected an erroneous condition,
and wish to signal the error, one of the following two functions can be used.

.defun ferror code format-control-string &rest args
	3ferror* signals an error, causing the error handler to be
entered.  The error message printed is based on the arguments:
2format-control-string* should be a control string to be
given to the function 3format* (q.v.), and 2args* are the 
rest of the arguments for 3format*.

	2code* is used to give the error system some idea of how to
treat the error in various ways.  For example, it can tell the error
system how to continue from the error.  Currently it is not
implemented, and all callers of 3ferror* should pass 3nil* as the
2code* argument. 

Example:
.lisp
(ferror nil "The symbol ~S is not EQ to ~S" 'x 'y)
.end_lisp
from inside the function FOO which was called by
the function BAR would produce the error message
.lisp
>>ERROR: The symbol X is not EQ to Y,
While in the function { FERROR  } FOO  BAR
.end_lisp
.end_defun

Note: the following function is provided primarily for Maclisp compatibility.
New programs should use the 3ferror* function as it is capable of producing
better formatted and more readable messages.

.defun error message object &optional code
	3error* signals an error, causing the error handler to be
entered.  The error message printed is 2object* followed by 2message*,
as in Maclisp.  The 2code* argument is interpreted the same way as
in 3ferror*.

Example:
.lisp
(error "The symbols are not EQ" (list 'x 'y))
.end_lisp
from inside the function FOO which was called by the function BAR
would produce the error message
.lisp
>>ERROR: (X Y) The symbols are not EQ
While in the function { ERROR  } FOO  BAR
.end_lisp
.end_defun

.defmac check-args
3check-args* is a macro designed to make it convenient to check
the arguments of a function to see if they are reasonable.  A 3check-args*
form looks like this:
.lisp
(check-args 2var* 2predicate* 2message*)
.end_lisp
2var* is the name of the variable you want to check.  2predicate* is
used to determine whether the value of 2var* is O.K. or not.  2predicate*
may either be the name of a predicate (.e.g 3symbolp*) of one argument, which
will be applied to the value of 2var*, or if non-atomic it is an arbitrary form
which will be evaluated.  If 2predicate* returns 3t*, then 2var* is
O.K.; otherwise, an error is signalled.  2message* should be a string which
describes what the value of 2var* should be.  For example, if some argument
3a* of a function must be an array, and some other argument 3b* must
be a fixnum between 1 and 6 inclusive, one could write:
.lisp
(check-arg a arrayp "an array")
(check-arg b (and (fixp b) (>= b 1) (<= b 6)) 
           "a fixnum between 1 and 6 inclusive")
.end_lisp
.c Need an example of the error message generated.
.c Right now the ^C command does not know how to continue.  This should be fixed.
.end_defmac

.section "How to use the Error Handler."

	Once inside the error hander, the user may give a wide variety
of commands.  This section describes how to give the commands, and then
explains them in approximate order of usefulness.  A summary is provided
at the end of the listing.

	When the error hander is waiting for a command, it prompts
with an arrow:

.lisp

.end_lisp

	At this point, you may either type in a Lisp expression, or
type a command.  If you type a Lisp expression, it will be interpreted
as a Lisp form, and will be evaluated in the context of the function
which got the error.  (That is, all bindings which were in effect at
the time of the error will be in effect when your form is evaluated.)
The result of the evaluation will be printed, and the error handler
will prompt again with an arrow.  If, during the typeing of the form,
you change your mind and want to get back to the error handler's
command level,  type a Control-G; the error handler will respond with
an arrow prompt.  In fact, at any time that typein is expected from
you, you may type a Control-G to flush what you are doing and get back
to command level.  This 3read-eval-print* loop maintains the values
of 3+*, 3**, and 3-* just as the top-level one does.

	Various error handler commands ask for Lisp objects, such as an
object to return, or the name of a catch-tag.  Whenever it tries to get
a Lisp object from you, it expects you to type in a 2form*; it will
evaluate what you type in.  This provides greater generality, since
there are objects to which you might want to refer which cannot by
typed in (such as arrays).  If the form you type is non-trivial (not
just a constant form), the error handler will show you the result of
the evaluation, and ask you if it is what you intended.  It expects a Y
or N answer (see the function 3y-or-n-p*), and if you answer negatively
it will ask you for another form.  To quit out of the command, just type
Control-G.

.section "Error Handler Commands"

	All error handler commands are single characters, usually with the
Control or Meta bits.  The single most useful command is Control-Z, which
exits from the error handler and throws back to the Lisp top level loop.
ITS users should note that Control-Z is not Call.
Often you are not interested in using the error handler at all and just
want to get back to Lisp top level; so you can do this in one character.
This is similar to Control-G in Maclisp.

	Self-documentation is provided by the Help or "?" command,
which types out some documentation on the error handler commands.

	Often you want to try to continue from the error.  To do this,
use the Control-C command.  The exact way Control-C works depends on
the kind of error that happened.  For some errors, there is no standard
way to continue at all, and Control-C will just tell you this and
return to command level.  For the very common "unbound symbol" error,
it will get a Lisp object from you, which it will store back into the
symbol.  Then it will continue as if the symbol had been bound to
that object in the first place.  For unbound-variable or undefined-function
errors, you can just type Lisp forms to set the variable or define
the function, and then type Control-C; it will proceed without asking
anything.

	Several command are provided to allow you to examine the
Lisp control stack (regular pdl), which keeps a record of all functions which are currently
active.  If you call 3foo* at Lisp's top level, and it calls 3bar*,
which in turn calls 3baz*, and 3baz* gets an error, then a
backtrace (a backwards trace of the stack) would show all of this
information.  The error handler has two backtrace commands.  Control-B
simply prints out the names of the functions on the stack; in the above
example it would print
.lisp
BAZ  BAR  FOO  *EVAL  LISP-TOP-LEVEL1  LISP-TOP-LEVEL
.end_lisp
The arrows indicate the direction of calling.  The Meta-B command prints
a more extensive backtrace, indicating the names of the arguments to the functions
and their current values, and also the saved address at which the function was
executing (in case you want to look at the code generated by the compiler);
for the example above it might look like:
.lisp
FOO: (P.C. = 23)
   Arg 0 (X): 13
   Arg 1 (Y): 1

BAR: (P.C. = 120)
   Arg 0 (ADDEND): 13
.end_lisp
and so on.  This means that FOO was executing at instruction 23, and was called
with two arguments, whose names (in the Lisp source code) are X and Y.
The current values of X and Y are 13 and 1 respectively.

	The error handler knows about a "current stack frame", and there
are several commands which use it.  The initially "current" stack frame
is the one which signalled the error; either the one which got the microcode
error, or the one which called 3ferror* or 3error*.

	The command Control-L (or Form) clears the screen, retypes the
error message that was initially printed when the error handler was
entered, and then prints out a description of the current frame, in the
format used by Meta-B.  The Control-N command moves to the "next" frame
(that is, it changes the current frame to be the frame which is the one
following the current frame, moving towards the base of the stack), and prints
out the frame in this same format.  Control-P moves to the "previous" frame,
and prints out the frame in the same format.  Meta-< moves to the
top of the stack, and Meta-> to the bottom; both print out the new current
frame.

	Meta-L prints out the current frame in "full screen" format, which
shows the arguments and their values, the local variables and their values,
and the machine code with an arrow pointing to the next instruction
to be executed.
Meta-N moves to the next frame and prints
it out in full-screen format, and Meta-P moves to the previous frame and
prints it out in full-screen format.

	Control-A prints out the argument list for the function of the
current frame, as would be returned by the function 3arglist* (q.v.).
Control-R is used to return a value from the current frame; the frame
that called that frame continues running as if the function of the current frame
had returned.  This command prompts you for a form, which it will evaluate;
it returns the resulting value, possibly after confirming it with you.
Meta-R is used to return multiple values from the current frame, but
it is not currently implemented.  The Control-T command does a 2throw*
to a given tag with a given value; you are prompted for the tag and the value.

	Control-Meta-A takes a numeric argument 2n*, and prints out
the value of the 2n*th argument of the current frame.  It leaves 3**
set to the value of the argument, so that you can use the Lisp 3read-eval-print*
loop to examine it.  It also leaves 3+* bound to a locative pointing to the
2n*th argument on the stack, so that you can change that argument (by calling
3rplaca* or 3rplacd* on the locative).  Control-Meta-L is similar,
but refers to the 2n*th local variable of the frame.

.section "Summary of Commands:"

.table
.item Control-A
Print argument list of function in current frame.
.item Control-Meta-A
Examine or change the 2n*th argument of the current frame.
.item Control-B
Print brief backtrace.
.item Meta-B
Print longer backtrace.
.item Control-C
Attempt to continue.
.item Control-G
Quit to command level.
.item Control-L
Redisplay error message and current frame.
.item Meta-L
Full-screen typeout of current frame.
.item Control-N
Move to next frame.  With argument, move down 2n* frames.
.item Meta-N
Move to next frame with full-screen typeout.  With argument, move down 2n* frames.
.item Control-P
Move to previous frame.  With argument, move up 2n* frames.
.item Meta-P
Move to previous frame with full-screen typeout.  With argument, move up 2n* frames.
.item Control-R
Return a value from the current frame.
.item Meta-R
Return several values from the current frame.
.item Control-T
Throw a value to a tag.
.item Control-Z
Throw back to Lisp top level.
.item ? or Help
Print a help message.
.item Meta-<
Go to top of stack.
.item Meta->
Go to bottom of stack.
.end_table

.section "Miscellany"

	Sometimes, e.g. when the error handler is running,
microcode trapping is "disabled": any attempt by the
microcode to trap will cause the machine to halt.

.defun trapping-enabled-p
This predicate returns 3t* if trapping is enabled; otherwise
it returns 3nil*.
.end_defun

.defun enable-trapping &optional (arg 1)
If 2arg* is 21*, trapping is enabled.  If it is 20*,
trapping is disabled.
.end_defun
.eof
