 TITLE SCROLL SAVER
	.INSRT DSK:IMSRC;IMDEFS >
	.ADDR.=1
	REPT=2000
	CTRL=1000
	SHIFT=400
	LEFT=600
	TOP=6400

	LOC 1
	DAC ASAVE
	RAR 1
	DAC LSAVE		; SAVE ON INTERRUPT
	LAC [DORIG]
	DLA
	DON
	JMP 24			; RESTART DISPLAY (ONLY ENABLED INTERRUPT)

	LOC 24
	SCF
	ISZ TICKER		; TICK BOMB
	JMP GLV
	CLA			; IT EXPLODED HERE
	KRB			; GET CURRENT KEYBOARD
	SAM KCHAR		; SEE IF KEY HELD DOWN LONG ENOUGH
	JMP GLV			; NO
	LWC 3
	DAC TICKER		; YES SET 10 PER SECOND REPEAT ONCE IT BLOWS UP
	LAC [JMP CONTIN]
	DAC LOOPY		; IMPURE DISPATCH, THE ONLY WAY !!
GLV:	JMP RESTRZ

	LOC 100
	JMP LOOPY-1		; NON ERASING STARTUP
	JMP INIT		; ERASING STARTUP

DUD:	ISZ TWITCH		; TICK THE TWITCHY
	JMP RESTRZ		; NORMAL RESTORE
	LWC 10
	DAC TWITCH		; RESET THE TWITCH TICKER
	LAC DCURT		; TWITCH THE TWTICHY
	XOR [DJMP DFORM#DNOP
	DAC DCURT
RESTRZ:	JMS NUMZIT		; DISPLAY LENGTH OF BUFFER LEFT
	LAC LSAVE		; RESTORE PROGRAM CONTROL
	RAL 1
	LAC ASAVE
	ION
	I JMP 0
ASAVE:	0
LSAVE:	0
TICKER:	0
TWITCH:	-10
INITA:	0			; SUBROUTINE INIT CALL POINT
INIT:	LAW 2			; INITIALIZE EVERYTHING HERE
	ARM			; ARM DISPLAY
	JMS ZTTY		; GET IN TTY MODE
	JMS LCASE		; GET IN LOWER CASE MODE
	JMS CLRS		; CLEARS THE SCREEN
	ION			; START THE DISPLAY

LOOPY:	KSN			; SKIP NO KEYBOARD
	JMS KEYIN
	RSN			; SKIP NO TTY
	JMS TTYIN
	JMP LOOPY

CLRS:	0			; CLEAR THE SCREEN SUBROUTINE
	CLA
	DAC CURRY-1		; SET THE LIST BOUNDARY
	I DAC [CRIKY]		; SET THE DHLT
	DAC LNCNT'		; SET ZERO LINES ON SCREEN
	DAC LNPOS'		; POINTING AT THE FIRST LINE
	LAC [DJMS DCURT
	DAC CURRY		; SET THE INLINE CURSOR
	LAC [DJMP CRIKY
	DAC CURRY+1		; SET BUFFER DJMP
	LAC [DLYA TOP
	DAC DARROW		; SET THE LINE POSITION CURSOR
	LAC [DJMP CURRY
	DAC TWANG		; SET THE VARIABLE START POINTER
	LAC [CRIKY]
	DAC TWONG'		; SET THE VARIABLE END POINTER
	DAC CHRPNT'		; CURRENT CHARACTER POINTER
	LAW CURRY
	DAC CURPNT'		; CURSOR SHOVE POINTER
	LAW CURRY-1
	DAC TWONK'		; SET THE VARIBLE START-1 POINTER
	I JMP CLRS
HOME:	0			; FIND END OF LIST
	JMS RTAR
	JMP .-1			; RIGHT ARROW FOREVER
	I JMP HOME

HOMEUP:	0			; FIND BEGINNING OF LIST
	JMS LFAR
	JMP .-1			; LEFT ARROW FOREVER
	I JMP HOMEUP

UPAR:	0			; MOVES CURSOR UP ONE LINE
	JMS LBEG		; TO BEGINNING OF CURRENT LINE
	JMS LFAR		; END OF PREVIOUS LINE
	JMS LBEG		; TO ITS BEGINNING
	I JMP UPAR

LBEG:	0			; MOVES CURSOR TO BEGINNING OF CURRENT LINE
	LWC 1
	DAC ARFLG
	JMS LFAR		; CONTINUE UNTIL BUMPED
	JMP .-1
	CLA
	DAC ARFLG		; MAKE SURE FLAG ISN'T SET FOR OTHER ROUTINES
	I JMP LBEG

DNAR:	0			; MOVES CURSOR DOWN ONE LINE
	LWC 1
	DAC ARFLG
	JMS RTAR
	JMP .-1			; CONTINUE
	CLA
	DAC ARFLG		; MAKE SURE FLAG ISN'T SET AFTER THIS ROUTINE
	JMS RTAR
	I JMP DNAR
	I JMP DNAR		; ALLOW FOR IDIOCY OF TYPIST

DOWN:	0			; SAME AS DNAR EXCEPT WILL INSERT CR-LF TO MOVE DOWN
	LWC 1
	DAC ARFLG		; SET FLAG
	JMS RTAR
	JMP .-1			; RTAR SKIP RETURNS ONE BEFORE LINE FEED
	CLA
	DAC ARFLG		; NULL FLAG
	JMS RTAR		; JUMP OVER LAST LINE FEED
	I JMP DOWN		; EXIT HERE IF NO CR-LF PAIR IS NEEDED TO MOVE DOWN
	LAC [DJMS D015
	JMS INSERT		; ADD CARRIGE RETURN
	LAC [DJMS D012
	JMS INSERT		; ADD LINE FEED
	I JMP DOWN
RTAR:	0			; MOVES CURSOR ONE RIGHT
	LAW 1
	ADD CURPNT
	DAC TEMPNT'
	IAC
	DAC TEM2'
	LAW 1
	ADD CHRPNT
	DAC TEMP2'
	I LAC CHRPNT
	ASN			; END OF DLIST?
	JMP RFAIL		; YES
	SAM [DJMS D012
	JMP RTDO
	ISZ ARFLG		; SKIP ON END OF LINE?
	JMP RTEST		; NO
RFAIL:	ISZ RTAR
	I JMP RTAR		; ERROR SKIP RETURNS
RTEST:	JMS ILNPOS
	SUB [30.]		; GETTING HIGH?
	ASP
	JMP RTDO		; NO
	JMS BOTUP		; YES, DO A ROLLUP OF THE SCREEN BY 10 LINES
	JMS TOPUP
RTDO:	LAC TEMP2
	JMS ADRJMP
	I DAC TEM2		; NEW DJMP
	I LAC CHRPNT
	I DAC CURPNT		; MOVE CHAR UP
	LAC [DJMS DCURT
	I DAC TEMPNT		; NEW DJMS
	ISZ CHRPNT
	ISZ CURPNT		; UPDATE POINTERS
	I JMP RTAR
LFAR:	0			; MOVES CURSOR ONE LEFT
	LWC 1
	ADD CURPNT
	DAC TEMPNT
	LWC 1
	ADD CHRPNT
	DAC TEMP2
	I LAC TEMPNT
	ASN			; START OF DLIST?
	JMP LFAIL
	SAM [DJMS D012
	JMP LFDO+1
	ISZ ARFLG		; FAIL ON BEGINNING OF LINE?
	JMP LTEST		; NO
LFAIL:	ISZ LFAR
	I JMP LFAR		; SKIP RETURN
LTEST:	JMS DLNPOS
	SUB [11.]
	ASM			; GETTING LOW ?
	JMP LFDO		; NO
	JMS TOPDN
	JMS BOTDN		; YES, ROLL DOWN THE SCREEN BY 10 LINES
LFDO:	I LAC TEMPNT
	I DAC TEMP2		; MOVE CHAR DOWN
	LAC TEMP2
	DAC CHRPNT		; UPDATE CHRPNT
	JMS ADRJMP
	I DAC CURPNT		; NEW DJMP
	LAC [DJMS DCURT
	I DAC TEMPNT		; NEW DJMS
	LAC TEMPNT
	DAC CURPNT		; UPDATE CURPNT
	I JMP LFAR

ARFLG:	0
INSERT:	0			; INSERT CHARACTER ROUTINE
	XAM CHRPNT
	SUB [1]
	XAM CHRPNT
	I DAC CHRPNT		; PUT CHAR IN THE LIST
	LAC CURPNT
	DAC 10
	LAC CHRPNT
	JMS ADRJMP
	I DAC 10		; NEW DJMP
	JMS BUFCK		; CHECK IF BUFFER FULL
	JMS RTAR
	I JMP INSERT

DELETE:	0			; DELETE CHARACTER ROUTINE
	I LAC CHRPNT
	ASN
	I JMP DELETE		; EXIT FOR DELETING END OF LIST
	SAM [DJMS D012
	JMP DELI
	JMS DLNCNT		; DELETING A LINE FEED
	SAM [29.]		; GETTING LOW?
	JMP DELI
	JMS BOTUP		; BRING BOTTOM UP
	JMP DELI
	JMS TOPDN		; ELSE PULL TOP DOWN
	NOP
DELI:	ISZ CHRPNT		; MOVE POINTER DOWN
	LAC CURPNT
	DAC 10
	LAC CHRPNT
	JMS ADRJMP
	I DAC 10		; NEW DJMP
	I JMP DELETE

BUFCK:	0			; BUFFER SIZE CHECKER
	LWC 4
	ADD CHRPNT
	SUB CURPNT
	DAC TBUF'		; FIND FREE SPACE IN BUFFER
	SAM [1000]		; READY TO WARN ?
	JMP ZROCK
	LAC MODEF
	ASN
	BEL			; WARN EDIT MODE USERS
ZROCK:	ISZ TBUF		; BUFFER CHOCKING?
	I JMP BUFCK

	LAC MODEF		; TIME FOR THE BIG CEASE! DELETES THE FIRST TEN LINES
	ASN
	BEL
	LWC 10.
	DAC LOOP		; SET LOOP FOR 10 LINE SEARCH
	LAW CURRY-1
	DAC 10			; SET GET POINTER
	DAC 11			; SET PUT POINTER
SMULCH:	I LAC 10		; MOVES REGISTER 10 THROUGH THE CHARACTER LIST
	SAM [DJMS D012
	JMP SMULCH		; LOOP GOES UNTIL LINE FEED FOUND
	ISZ LOOP
	JMP SMULCH		; GOES UNTIL 10 LINE FEEDS FOUND

	I LAC 10		; GETS
	I DAC 11		; PUTS
	SAM [DJMS DCURT		; DONE?
	JMP .-3			; CHARACTER MOVING UP LOOP
	I LAC 10
	I DAC 11		; MOVES THE LAST CHAR, WHICH IS THE DJMP TO SECOND BLOCK

	LAC TWANG		; LOAD STARTING DJMP
	SAM [DJMP CURRY
	JMP .+2

	JMP CURCUR		; IF DELETED SEGMENT IS ON SCREEN, DON'T CHANGE TWANG OR TWONK
	JMS JMPADR		; GET ADDRESS
	SUB 10
	ADD 11
	JMS ADRJMP		; NEW DJMP
	DAC TWANG		; NEW TWANG POINTER
	LAC TWONK
	SUB 10
	ADD 11
	DAC TWONK		; RESET TWONK POINTER

CURCUR:	LAC CURPNT
	SUB 10
	ADD 11
	DAC CURPNT		; RESET CURPNT POINTER
	I JMP BUFCK
NUMZIT:	0			; ROUTINE DISPLAYS AMOUNT OF BUFFER SPACE LEFT ON THE SCREEN
	CLA
	DAC DFLAG'		; ZERO TO KILL LEADING ZEROS
	LAC [DNUM1-1]
	DAC 12			; OUTPUT POINTER IN 12
	LWC 5
	DAC LOOPIN'
	LWC 4
	ADD CHRPNT
	SUB CURPNT
	DAC TNUM'

GOZAP:	LAC TNUM
	RAL 3
	DAC TNUM
	RAL 2
	AND [7]
	ASZ			; IS CURRENT DIGIT ZERO ?
	JMP NONA		; NO
	SAM DFLAG		; SUPPRESS LEADING ZEROS ?
	JMP NONA+1		; NO
	LAC [DNOP
	I DAC 12		; KILLS THAT LEADING ZERO
	JMP WHAMZ

NONA:	ISZ DFLAG
	ADD [LZERO]		; GET ADDRESS OF PROPER DJMP
	DAC GRAB'
	I LAC GRAB
	I DAC 12		; PUT IT OUT IN THE DISPLAY LIST
WHAMZ:	ISZ LOOPIN		; CHECK FOR ALL FIVE DIGITS
	JMP GOZAP		; CONTINUE TO CONTINUE
	I JMP NUMZIT		; EXIT
ABPOS:	0			; ABSOLUTE POSITIONING ROUTINE
	JMS TGET
	DAC HPOS'		; HORIZONTAL POSITION
	JMS TGET
	DAC VPOS'		; VERTICAL POSITION
	LAW 1
	SUB VPOS
	ADD LNPOS		; FIND DELTA HRIZONTAL + = UP, - = DOWN
	ASN
	JMP GOAL2		; GOOD ALREADY
	ASP			; MOVE UP?
	JMP DOWNY		; NO
	CIA
	DAC LOOPR'		; SET LOOP FOR MOVE UP
UPM:	JMS UPAR
	ISZ LOOPR
	JMP UPM
	JMP GOAL3		; DONE MOVING UP
DOWNY:	DAC LOOPR
DNM:	JMS DOWN		; MOVES DOWN
	ISZ LOOPR
	JMP DNM
	JMP GOAL3		; DONE MOVING DOWN

GOAL2:	JMS LBEG		; GET TO BEGINNING OF THE LINE
GOAL3:	LAW 1
	SUB HPOS
	ASN
	I JMP ABPOS		; THERE ALREADY !, NORMAL EXIT
	DAC LOOPR		; ST LOOP FOR POSITIONING
FCHEK:	I LAC CHRPNT
	SAM [DJMS D015
	JMP .+2			; HIT CARRIGE RETURN?
	JMP SPACED		; YES!
	ASN			; HIT THE END?
	JMP SPACED		; YES!
	JMS RTAR		; DO IT!
	ISZ LOOPR
	JMP FCHEK		; CONTINUE TO MOVE RIGHT
	I JMP ABPOS
SPACED:	LAC [DJMS D040
	JMS INSERT		; INSERT SPACES IF NO CHARS THERE ALREADY
	ISZ LOOPR
	JMP SPACED
	I JMP ABPOS		; DONE!
LDELT:	0			; DELETES THE CURRENT LINE 
	JMS LBEG
	JMS DELRT
	I JMP LDELT

LDELO:	0			; DELETES LINE PLUS CR - LF
	JMS LDELT
	JMS DELETE
	JMS DELETE		; KILLS THE CR-LF AT THE END OF IT ALL
	I JMP LDELO

DELUP:	0			; DELETE TO TOP OF BUFFER
	JMS LFAR		; DELETES UNTIL LEFT ARROW SKIP FAILS
	JMP .+2
	I JMP DELUP
	JMS DELETE
	JMP DELUP+1

DELDN:	0			; DELETE TO END OF BUFFER
	I LAC CHRPNT
	ASN			; DELETES UNTIL 0 AT END REACHED
	I JMP DELDN
	JMS DELETE
	JMP DELDN+1

DELLF:	0			; DELETE LEFT TO BEGINNING OF LINE
	JMS LFAR
	JMP .+2
	I JMP DELLF
	I LAC CHRPNT
	SAM [DJMS D012
	JMP .+3
	JMS RTAR
	I JMP DELLF
	JMS DELETE
	JMP DELLF+1

DELRT:	0			; DELETE RIGHT TO END OF LINE
	LAC CHRPNT
	DAC 10
	I LAC 10		; LOADS CONTENTS OF CHRPNT+1
	ASN
	JMP FOBY		; SPECIAL EXIT IF AT THE END OF THE LIST
	SAM [DJMS D012
	JMP .+2
	I JMP DELRT		; IF A LINE FEED IS 2 CHARS AWAY, EXIT!
	JMS DELETE
	JMP DELRT+1
FOBY:	JMS DELETE		; GET THE LAST BUGGER!!
	I JMP DELRT

BDELT:	0			; BACKSPACE (REVERSE) DELETE
	JMS LFAR
	JMS DELETE
	I JMP BDELT
TXMIT:	0			; KEYBOARD TRANSMITTER WITH LOCAL MODE
	XAM MODEF'
	ASM			; SKIPS ONLY IN TTY MODE
	JMP FEEDME		; ELSE DO LOCAL MODE KLUDGE
	XAM MODEF
	JMS XMIT		; SEND IT TO THE PDP-10
	I JMP TXMIT
FEEDME:	XAM MODEF		; IN LOCAL MODE
	ISZ DNOPF'		; PDP-10 LAST TYPIST ?
	JMP UHNUHN		; NO
	DAC TEM1'		; YES, ADD A DNOP TO MARK THE DIVIDING LINE
	LAC [DNOP
	JMS INSERT
	LAC TEM1
UHNUHN:	SAM [015]		; PASSING A CARRIGE RETURN IN LOCAL MODE ?
	JMP FOOBOO		; NO, CONVERT JUST THIS CHAR
	JMS CVDISP		; YES, ADD A LINE FEED TO IT !
	JMS LNFD
	I JMP TXMIT
FOOBOO:	JMS CVDISP
	I JMP TXMIT

XMIT:	0			; TRANSMIT ROUTIINE
	TSF
	JMP .-1
	TPC
	I JMP XMIT
ADRJPL:	0			; TURNS A POINTER INTO THE RIGHT
	LAC TWONK		; GET POINTER TO ADDRESS-1
	IAC
	JMS ADRJMP		; MAKE IT A DJMP
	DAC TWANG
	I JMP ADRJPL

ADRJMP:	0			; MAKES AN ADDRESS INTO A DJMP
	SUB [010000]
	ASM			; SKIPS IF < 10000
	ADD [070000]
	ADD [070000]
	I JMP ADRJMP

JMPADR:	0			; MAKES A DJMP INTO AN ADDRESS
	AND [107777]		; GET RID OF NO.6 BIT
	ASP
	XOR [110000]		; TRANSFER THE 10000 BIT
	I JMP JMPADR

ILNPOS:	0			; INCREMENT LINE POSITION CURSOR
	LWC 100
	ADD DARROW
	DAC DARROW		; FIX DLIST DOWNWARD
	ISZ LNPOS		; FIX COUNTER
	LAC LNPOS		; LOAD FOR RETURNING IT
	I JMP ILNPOS

DLNPOS:	0			; DECREMENT LINE POSITION CURSOR
	LAW 100
	ADD DARROW
	DAC DARROW		; FIX DLIST UPWARD
	LWC 1
	ADD LNPOS
	DAC LNPOS		; FIX COUNTER
	I JMP DLNPOS

DLNCNT:	0			; DECREMENT LINE COUNTER
	LWC 1
	ADD LNCNT
	DAC LNCNT
	I JMP DLNCNT

TTGLE:	0			; CURSOR TWITCH TOGGLE
	LAC GLV
	XOR [DUD#RESTRZ
	DAC GLV
	LAC [DNOP
	DAC DCURT		; FORCES NORMAL CURSOR ON SWITCHOFF
	I JMP TTGLE
PXMIT:	0			; PAGE TRANSMIT ROUTINE
	JMS HOMEUP		; GET TO THE TOP OF THE WORLD
SMOOCH:	JMS CASCII		; GET ASCII VALUE OF NEXT THING IN DLIST
	ASZ
	JMP TOAD
	I JMP PXMIT		; NORMAL EXIT HERE
TOAD:	SAM [012]
	JMS XMIT		; LINE FEEDS DON'T GET TRANSMITTED
	SAM [015]
	JMP RTO
	JMS TGET		; GET NEXT CHARACTER HERE
	SAM [006]		; WAIT FOR TEN'S REPLY, SHOULD BE A 006
	JMP .-2			; CONTROL F EXITS THIS LOOP
RTO:	JMS RTAR		; KEEP USER INFORMED OF PROGRESS
	JMP SMOOCH

PXERS:	0			; PAGE TRANSMIT WITH SCREEN CLEAR
	JMS PXMIT
	JMS CLRS
	I JMP PXERS

LXMIT:	0			; LINE TRANSMIT ROUTINE
	LAC MODEF
	ASP
	I JMP LXMIT		; PREVENTS TTY MODE HANGUP
	LAW 15
	JMS TXMIT		; ADDS A CR TO THE LINE
LLOOP:	JMS LFAR		; SEARCH BACK FOR THE START OF IMLAC'S TYPINGS
	I LAC CHRPNT		; GET CHAR
	SAM [DNOP
	JMP LLOOP
RLOOP:	JMS RTAR
	JMS CASCII
	JMS XMIT
	SAM [015]
	JMP RLOOP
	JMS RTAR
	I JMP LXMIT

SPXMIT:	0			; SLOW PAGE XMIT WITH ECHO SUPRESSION
	JMS HOMEUP		; GO TO TOP OF SCREEN
MOOCH:	JMS CASCII		; GET ASCII VALUE OF CURRENT CHARACTER
	ASZ			; 0 = END OF THE JOB
	JMP TOADY
	I JMP SPXMIT
TOADY:	SAM [012]		; DON'T TRANSMIT LINE FEEDS
	JMS SXMIT		; SLOW XMIT SUBROUTINE
	JMS RTAR
	JMP MOOCH

SXMIT:	0			; SLOW TRANSMIT
	DAC TEM1
	LWC 7777
	DAC LOOP
GOZ:	RCF			; INPPUT CLEARING HERE
	ISZ LOOP
	JMP .-2			; DELAY LOOP IS HERE
	LAC TEM1
	JMS XMIT		; DO IT!
	I JMP SXMIT
TABR:	0			; SMART TAB ROUTINE
	CLA
	DAC TABDIS'		; CLEAR DISPLACEMENT
	LAC CURPNT
	DAC TEMPNT
SBACK:	LWC 1			; BACK UP THE POINTER ONE
	ADD TEMPNT
	DAC TEMPNT
	I LAC TEMPNT		; LOAD CHARCATEER IN BACKWARD SEARCH
	ASN			; FOUND A ZERO - DONE!
	JMP COOLY
	SAM [DJMS D015
	JMP .+2
	JMP COOLY		; FOUND A CR - DONE!
	SAM [DJMS D012
	JMP .+2
	JMP SBACK		; FOUND A LF - CONTINUE
	SAM [DNOP
	JMP .+2
	JMP SBACK		; FOUND A DNOP - CONTINUE
	JMS TABCK
	JMP RFOOF
	LAC TABDIS		; FOUND A TAB - CHARACTER COUNT TO NEXT MODULO 8 VALUE
	AND [170]
	ADD [10]
	DAC TABDIS
	JMP SBACK
RFOOF:	ISZ TABDIS		; ALL ELSE - ADD ONE TO CHARACTER COUNT
	JMP SBACK
COOLY:	LAC TABDIS		; LOAD DISPLACEMENT
	AND [170]
	SUB [140]
	ASM
	I JMP TABR		; DO NOTHING IF ALL THE WAY OVER
	SAR 2
	ADD [DJMS D011+30	; GET ADDRESS OF CORRECT TAB (ONE OF 12 POSSIBLE ONES)
	JMS INSERT
	I JMP TABR
TABCK:	0			; ROUTINE TO CHECK FOR ARGUMENT BEING A TAB OR NOT
	DAC TEM1'		; SAVE ARGUMENT
	AND [7777]
	SUB [D011]
	ASP			; SKIPS IF >= MINIMUM POSSIBLE TAB
	JMP NOSKIP
	SUB [SWAIT-D011]
	ASP			; SKIPS IF > MAXIMUM POSSIBLE TAB
	ISZ TABCK		; SKIP RETURN ON FINDING A TAB
NOSKIP:	LAC TEM1		; RELOAD THE ORIGINAL ARGUMENT
	I JMP TABCK		; RETURN

COMCOM:	0			; COMMENT KLUDGE PROGRAM (RYANPROG)
	I LAC CHRPNT		; LOAD CURRENT CHARACTER
	SAM [DJMS D015		; FOUND THE END OF THE LINE
	JMP MORLOK
PLOF:	JMS TABR		; INSERT A TAB
	LAC TABDIS
	SUB [30]
	ASP			; SKIPS IF TABBED OVER FAR ENOUGH BY NOW
	JMP PLOF		; ELSE CONTINUE TO RIGHT ARROW
	LAC [DJMS D073		; AUTOMATIC SEMICOLON
	JMS INSERT
	LAC [DJMS D040		; AUTOMATIC SPACE, TOO (CLASS?)
	JMS INSERT
	I JMP COMCOM
MORLOK:	JMS RTAR		; GO FURTHER RIGHT IN CURRENT LINE
	JMP COMCOM+1
	JMP PLOF		; RTAR FAIL = END OF THE MAIN PROGRAM, TREAT LIKE A CR
ASETR:	0			; HANDLES CONTROL "A" SHEISS
	JMS TGET
	ADD [AXTAB]
	DAC TEMPNT
	SUB [AXEND]		; CHECK TABLE LIMIT
	ASM			; SKIPS IF O.K.
	I JMP ASETR
	I LAC TEMPNT		; LOAD ADDRESS OF SELECTED ROUTINE
	ASN			; IS A ROUTINE ASSIGNED ?
	I JMP ASETR		; FORGET IT IF A ZERO ENTRY
	DAC TEMPNT		; STORE IT
	I JMS TEMPNT		; I JMS TO IT
	I JMP ASETR

AXTAB:	0
	RLOADM+NOP
	0
	0
	0
	0
	0
	ZEDIT+NOP
	ZTTY+NOP
AXEND:
TGET:	0			; TTY GET ROUTINE
	RSF
	JMP .-1
	CLA
	RRC
	AND [177]		; PROTECTION !!
	I JMP TGET
TOPUP:	0			; SCROLLS TOP UP TEN LINES
	LWC 10.
	DAC LOOP
INHALE:	ISZ TWONK		; LOOP SEARCHES FOR LINE FEEDS
	I LAC TWONK
	SAM [DJMS D012
	JMP INHALE
	JMS DLNCNT
	JMS DLNPOS
	ISZ LOOP		; 10TH LINE FEED YET?
	JMP INHALE
	JMS ADRJPL		; YES, CHANGE THE TWANG POINTER TO MOVE THE VIEWPORT
	I JMP TOPUP

TOPDN:	0			; UNDOES WHAT TOPUP DOES
	LWC 10.
	DAC LOOP		; SEARCHES BACKWARD FOR 10 LINES
	I LAC TWONK
	ASZ			; CHECK LIMITING CASE FIRST
	JMP .+3
	ISZ TOPDN
	I JMP TOPDN		; SKIP RETURNS IF NO MORE TO PEEL DOWN
PEEL:	LWC 1
	ADD TWONK
	DAC TWONK		; BACK UP THE TWONK POINTER FOR SEARCHING
	I LAC TWONK
	ASN
	JMP PRONK
	SAM [DJMS D012		; FINDS LINE FEEDS
	JMP PEEL
	ISZ LOOP		; 10 OF THEM SKIPS
	JMP PEEL
PRONK:	JMS ADRJPL		; CHANGE DISPATCHER
	LAW 10.			; CHANGE POINTERS & COUNTERS FOR 10 LINE SHIFT
	ADD LNCNT
	DAC LNCNT
	LAW 10.			; BORING, ISN'T IT!
	ADD LNPOS
	DAC LNPOS
	LWC 1200
	ADD DARROW
	DAC DARROW
	I JMP TOPDN
BOTDN:	0			; SCROLLS BOTTOM DOWN 10 LINES BY INSERTING A 01 IN DISPLAY LIST
	LWC 10.
	DAC LOOP
PULL:	LWC 1			; BACKWARD SEARCH FOR 3 LINE FEEDS
	ADD TWONG
	DAC TWONG
	I LAC TWONG
	SAM [DJMS D012		; FINDS THE LINE FEEDS
	JMP PULL
	JMS DLNCNT
	ISZ LOOP		; FINDS THE 3RD ONE AND SKIPS
	JMP PULL
	LAW 1
	I DAC TWONG		; PUT 000001 IN LIST AND KILL DISPLAY WITHOUT CREATING A 
	I JMP BOTDN		; FALSE ENDING OF THE LIST (MARKED BY 000000)

BOTUP:	0			; UNDOES THE BOTTOM DOWN ROUTINE
	I LAC TWONG
	ASZ
	JMP .+3
	ISZ BOTUP		; SKIP RETURNS IF NO MORE TO ROLL UP INTO VIEW
	I JMP BOTUP
	LAC [DJMS D012		; UNBLOCKS THE LIST AT TWONG POINTER
	I DAC TWONG
	LAW 10.
	ADD LNCNT
	DAC LNCNT
PUSH:	ISZ TWONG
	I LAC TWONG
	AND [177776]
	ASZ			; SEARCHES DOWN FOR THE NEXT 000001 OR 000000
	JMP PUSH		; CONTINUE LOOKING
	I JMP BOTUP		; NORMAL EXIT
LNFD:	0			; LINE FEED ROUTINE
	LAC [DJMS D012
	JMS INSERT		; PUT IN DLIST
	ISZ LNCNT		; INCREMENT LINE COUNT
	LAC LNCNT
	SAM [40.]		; TOO MUCH ON SCREEN YET?
	I JMP LNFD		; NO, GO AWAY!
	LAC LNPOS		; LOAD LINE POSITION
	SUB [20.]
	ASP
	JMP DOWNR
	JMS TOPUP		; LNCNT >= 20, ROLL UP TOP ON LNFD INSERTIONS
	I JMP LNFD
DOWNR:	JMS BOTDN		; LNCNT < 20, ROLL DOWN BOTTOM ON LNFD INSERTIONS
	I JMP LNFD

DONG:	0
	BEL
	I JMP DONG

RLOADM:	0			; JUMPS TO 40
	IOF			; SAVE WEIRD BUGS
	JMP 40

DBUG:	0			; JUMPS TO DEBUGGER (HOPEFULLY ITS THERE)
	IOF
	I JMP [16000]
ZTTY:	0			; SETS TTY MODE
	LWC 1
	DAC MODEF
	LAC [DNOP
	DAC DTTY
	I JMP ZTTY

ZEDIT:	0			; SETS EDIT MODE
	CLA
	DAC MODEF
	LAC [DJMP DEDIT
	DAC DTTY
	I JMP ZEDIT

ZCASE:	0			; COMPLEMENTS CHARACTER CASE
	LAC CASEF
	ASN			; SKIPS ON UPPER CASE
	JMP .+3
	JMS LCASE		; SET LOWER CASE
	I JMP ZCASE

	LAW 40			; SETS UPPER CASE HERE
	DAC CASEF'
	LAC [DNOP]
	DAC DUCF
	I JMP ZCASE

LCASE:	0			; SETS LOWER CASE
	CLA
	DAC CASEF
	LAC [DJMP DTTP
	DAC DUCF
	I JMP LCASE
KEYIN:	0			; KEYBOARD INPUT SUBROUTINE
	CAL
	KRC
	DAC KCHAR'
	LWC 20
	DAC TICKER		; SET 1/2 SECOND AUTO REPEAT BOMB
CONTIN:	LAC [KSN]
	DAC LOOPY		; CURE THE IMPURE !
	LAW KEYDIS-1
	DAC 10			; LOAD INDEX
	LWC KEYGO-KEYDIS
	DAC LOOP'
	LAC KCHAR
COMPR:	I SAM 10
	JMP .+2
	JMP MATCH
	ISZ LOOP		; ALL OF IT?
	JMP COMPR
	AND [CTRL		; CONTROL BIT ON?
	ASN
	JMP .+5
	LAC KCHAR
	AND [37]
	JMS XMIT
	I JMP KEYIN
	LAC KCHAR		; ELSE CHECK NORMAL RANGES
	AND [377]
	SUB [240]		; IN RANGE 240 TO 277?
	ASP
	I JMP KEYIN		; <240, IGNORE IT
	SUB [40]
	ASM
	JMP MISS		; >277
	AND [77]
	JMP XTR			; YES, CONVERT & XMIT
MISS:	SUB [001]		; IN RANGE 301 TO 372?
	ASP
	I JMP KEYIN
	SUB [72]
	ASM
	I JMP KEYIN
	ADD [373]
	AND [177]		; YES, CONVERT & XMIT
	XOR CASEF		; SET THE CASE PROPERLY
	JMP XTR
MATCH:	LAW KEYGO-KEYDIS-1
	ADD 10
	DAC 10
	I LAC 10		; LOAD DISPATCH POINTER
	ASP
	JMP .+3
XTR:	JMS TXMIT		; POITIVE=CHAR CONVERSION
	I JMP KEYIN
	JMS IMPER	
	I JMP KEYIN

IMPER:	0			; SUBROUTINE DISPATCH SUBROUTINE
	DAC IMP
	I JMS IMP
	I JMP IMPER
	I JMP IMPER		; SOME CAN SKIP RETURN
IMP:	0			; IMPURE LOCATION
KEYDIS:	CTRL+SHIFT+320		; C-S-P GIVES CONTROL ATSIGN
	SHIFT+260		; SHIFT ZERO, BACKSPACE
	237			; TAB
	212			; LF
	214			; FORM, GIVES A CONTROL L
	215			; CR
	233			; ALTMODE
	CTRL+SHIFT+314		; C-S-L GIVES CONTROL BACKSLASH
	CTRL+SHIFT+315		; C-S-M GIVES CONTROL RIGHT BRACKET
	CTRL+SHIFT+316		; C-S-N GIVES CONTROL UP ARROW
	CTRL+SHIFT+317		; SET TTY CODE CHAR
	CTRL+273		; @
	CTRL+254		; [
	CTRL+257		; \
	CTRL+256		; ]
	CTRL+272		; HAT
	CTRL+255		; UNDERBAR
	CTRL+267		; ACCENT GRAVE, CONTROL 7
	CTRL+270		; LEFT BRACKET, CONTROL 8
	CTRL+271		; RIGHT BRACKET, CONTROL 9
	CTRL+260		; VERTICAL BAR, CONTROL 0
	CTRL+266		; TILDE, CONTROL 6
	377			; DEL
	SHIFT+377		; BDEL
	CTRL+237		; CONTROL TAB BACK DELETE
	232			; "2" KEY IS A BACK DELETE ALSO
	SHIFT+230		; LDEL
	CTRL+377		; LINE DELETE COMPLETE
	SHIFT+211		; SHIFT TAB KEY, SET TTY MODE
	CTRL+211		; CONTROL TAB, INITIALIZE
	CTRL+230		; CLEAR SCREEN
	206			; UP ARROW
	204			; DOWN ARROW
	SHIFT+206		; SHIFT UP ARROW
	SHIFT+204		; SHIFT DOWN ARROW
	210			; LEFT ARROW
	205			; RIGHT ARROW
	CTRL+206		; CONTROL UP ARROW
	CTRL+204		; CONTROL DOWN ARROW
	CTRL+210		; CONTROL LEFT ARROW
	CTRL+205		; CONTROL RIGHT ARROW
	217			; HOME
	SHIFT+217		; UP HOME
	CTRL+SHIFT+211		; JMP 40
	231			; BREAK KEY, TOGGLES CASE
	CTRL+SHIFT+233		; JUMPS TO DEBUGGER
	SHIFT+214		; SHIFT FORM KEY, SETS EDIT MODE
	202			; XMIT KEY
	216			; P-XMIT KEY
	CTRL+216		; CONTROL P-XMIT (DELETES THE PAGE)
	SHIFT+216		; SHIFT PXMIT (SLOW)
	235			; COMMENT KLUDGERY
	CTRL+235		; CONTROL COMMENT, DELETES IT ALL
	230			; TWITCH CONTROL
KEYGO:	000
	010
	011
	012
	014
	015
	033
	034
	035
	036
	037
	100
	133
	134
	135
	136
	137
	140
	173
	175
	174
	176
	177
	BDELT+NOP
	BDELT+NOP
	BDELT+NOP
	LDELT+NOP
	LDELO+NOP
	ZTTY+NOP
	INITA+NOP
	CLRS+NOP
	UPAR+NOP
	DNAR+NOP
	BLKUP+NOP
	BLKDN+NOP
	LFAR+NOP
	RTAR+NOP
	DELUP+NOP
	DELDN+NOP
	DELLF+NOP
	DELRT+NOP
	HOME+NOP
	HOMEUP+NOP
	RLOADM+NOP
	ZCASE+NOP
	DBUG+NOP
	ZEDIT+NOP
	LXMIT+NOP
	PXMIT+NOP
	PXERS+NOP
	SPXMIT+NOP
	COMCOM+NOP
	COMDEL+NOP
	TTGLE+NOP
TTYIN:	0			; TELETYPE SUBROUTINE
	LWC 1
	DAC DNOPF		; SET FLAG THAT PDP-10 WAS THE LAST TYPIST
	CAL
	RRC
	JMS CVDISP
	I JMP TTYIN

CVDISP:	0			; CONVERTS ASCII TO DISPLAY LIST
	AND [177]		; PROTECTION
	DAC TCHAR'
	LAW TTYDIS-1
	DAC 10			; SET INDEX
	LWC TTYGO-TTYDIS
	DAC LOOP
	LAC TCHAR
BLOOP:	I SAM 10
	JMP .+2
	JMP TMATCH
	ISZ LOOP
	JMP BLOOP		; SEARCH DISPATCH TABLE
	SUB [40]		; IN RANGE 40 TO 135?
	ASP
	I JMP TTYIN		; < 40, IGNORE IT
	SUB [137]
	ASM
	I JMP TTYIN		; >176, IGNORE IT
	ADD [137+LISTR]
	DAC TEMPNT
	I LAC TEMPNT
GOOLIN:	JMS INSERT
	I JMP CVDISP
TMATCH:	LAW TTYGO-TTYDIS-1	; DISPATCHES A MATCH IN TTYDIS TABLES
	ADD 10
	DAC 10
	I LAC 10
	ASM
	JMP GOOLIN		; CONVERSION UNNATURAL ASCII TO DJMS'
	JMS IMPER
	I JMP CVDISP
TTYDIS:	001
	007
	010
	011
	012
	013
	015
	016
	017
	022
	023
	024
	030
	031
	032
	033
	177

TTYGO:	ASETR+NOP
	DONG+NOP
	DJMS D010
	TABR+NOP
	LNFD+NOP
	DOWN+NOP
	DJMS D015
	ABPOS+NOP
	LFAR+NOP
	CLRS+NOP
	LDELT+NOP
	HOMEUP+NOP
	DELETE+NOP
	RTAR+NOP
	UPAR+NOP
	DJMS D033
	DELETE+NOP
LISTR:	DJMS D040
	DJMS D041
	DJMS D042
	DJMS D043
	DJMS D044
	DJMS D045
	DJMS D046
	DJMS D047
	DJMS D050
	DJMS D051
	DJMS D052
	DJMS D053
	DJMS D054
	DJMS D055
	DJMS D056
	DJMS D057
LZERO:	DJMS D060
	DJMS D061
	DJMS D062
	DJMS D063
	DJMS D064
	DJMS D065
	DJMS D066
	DJMS D067
	DJMS D070
	DJMS D071
	DJMS D072
	DJMS D073
	DJMS D074
	DJMS D075
	DJMS D076
	DJMS D077
	DJMS D100
	DJMS D101
	DJMS D102
	DJMS D103
	DJMS D104
	DJMS D105
	DJMS D106
	DJMS D107
	DJMS D110
	DJMS D111
	DJMS D112
	DJMS D113
	DJMS D114
	DJMS D115
	DJMS D116
	DJMS D117
	DJMS D120
	DJMS D121
	DJMS D122
	DJMS D123
	DJMS D124
	DJMS D125
	DJMS D126
	DJMS D127
	DJMS D130
	DJMS D131
	DJMS D132
	DJMS D133
	DJMS D134
	DJMS D135
	DJMS D136
	DJMS D137
	DJMS D140
	DJMS D141
	DJMS D142
	DJMS D143
	DJMS D144
	DJMS D145
	DJMS D146
	DJMS D147
	DJMS D150
	DJMS D151
	DJMS D152
	DJMS D153
	DJMS D154
	DJMS D155
	DJMS D156
	DJMS D157
	DJMS D160
	DJMS D161
	DJMS D162
	DJMS D163
	DJMS D164
	DJMS D165
	DJMS D166
	DJMS D167
	DJMS D170
	DJMS D171
	DJMS D172
	DJMS D173
	DJMS D174
	DJMS D175
LISTN:	DJMS D176
CASCII:	0			; CONVERTS DISPLAY LIST TO ASCII
	I LAC CHRPNT		; LOAD FROM INDEX
	SAM [DNOP
	JMP .+3
	JMS RTAR
	JMP CASCII+1
	JMS TABCK		; CHECKS FOR A TAB
	JMP .+3
	LAW 11
	JMP BLAPO
	SAM [DJMS D010
	JMP .+3			; CHECKS FOR A BACKSPACE
	LAW 10
	JMP BLAPO
	SAM [DJMS D012
	JMP .+3			; CHECKS FOR A LINE FEED
	LAW 12
	JMP BLAPO
	SAM [DJMS D015
	JMP .+3			; CHECKS FOR A CARRIGE RETURN
	LAW 15
	JMP BLAPO
	SAM [DJMS D033
	JMP .+3			; CHECKS FOR AN ALTMODE
	LAW 33
	JMP BLAPO
	DAC TCHAR
	LAW LISTR-1
	DAC 10			; POINTER TO TABLE
	LWC LISTN-LISTR+1
	DAC LOOP		; LIMIT SEARCH
	LAC TCHAR
WHOPIE:	I SAM 10		; COMPARE
	JMP .+2
	JMP CMATCH
	ISZ LOOP		; CHECK FOR LIMIT!
	JMP WHOPIE
	CLA			; NOT IN TABLE, RETURNS A ZERO
	JMP BLAPO
CMATCH:	LWC LISTR-40
	ADD 10			; GET ASCII
BLAPO:	DAC TCHAR'		; SAVE THE CHARACTER FOR HIGH LEVEL MISUSE
	I JMP CASCII
	VARIABLES
	CONSTANTS		; CONSTANTS FOR THE EDITOR

	.INSRT DSK:IMSRC;SSV CHARS
DORIG:	DHVC\DSTS 1
	DADR			; USUAL CRAPSIES
	DLXA 5000
	DLYA 6540
	DJMS DWAIT
DUCF:	DJMP DTTP
	DJMS D055
	DJMS D125
	DJMS D103
	DJMS D055
DTTP:	DLXA 3400
	DJMS DWAIT
DTTY:	0
	DJMS D124
	DJMS D124
	DJMS D131
	DJMP DMODE
DEDIT:	DJMS D105
	DJMS D104
	DJMS D111
	DJMS D124
DMODE:	DJMS D040
	DJMS D115
	DJMS D117
	DJMS D104
	DJMS D105
	DLXA 2000
	DJMS DWAIT
	DJMS D103
	DJMS D102
	DJMS D125
	DJMS D106
	DJMS D075
DNUM1:	DNOP
	DNOP
	DNOP
	DNOP
	DNOP
	DLXA LEFT-100
DARROW:	0
	DJMS DWAIT
	DJMS D075
	DJMS D076
	DLYA TOP
	DJMS DWAIT
TWANG:	0			; DISPLAY DISPATCH POINT NO. 1
	0			; BUFFER ZERO TO MARK THE BEGINNING OF IT ALL
CURRY:	0			; START OF ACTIVE DLIST
	0
	LOC 17676
CRIKY:	0
	LOC 17713
	I JMP .+1
	INIT
	END
RRY:	0			; START OF ACTIVE DLIST
	0
	LOC 17676
CRI