	.TITLE	SCROLL -- GT40/DELPHI SCROLLING INTERFACE

;WRITTEN BY J. BULLARD 10/24/73

	.ENABLE	ABS

	.MCALL	.PARAM
	.PARAM

	.SBTTL	ASSEMBLY PARAMETERS

UPCHAR	= 32	;^Z MOVES SCROLL UP ONE LINE
DNCHAR	= 13	;^K MOVES SCROLL DOWN ONE LINE
STAKSZ	= 200	;STACK SIZE
MINVIS	= 25.	;MINIMUM # OF LINES TO SHOW IN THE WINDOW

DPC	= 172000		;DISPLAY PC

LKRS	= 177560		;LK40 RECEIVE STATUS
LKRB	= 177562		;LK40 RECEIVE BUFFER

DLRS	= 175610		;DL11 RECEIVE STATUS
DLRB	= 175612		;DL11 RECEIVE BUFFER

DLXS	= 175614		;DL11 TRANSMIT STATUS
DLXB	= 175616		;DL11 TRANSMIT BUFFER

PSW	= 177776		;11/05 PROCESSOR STATUS
	.SBTTL	LOW CORE INITIALIZATION

.= 0				;SET UP CATCHERS FOR UNEXPECTED TRAPS
	.REPT	100

	.WORD	.+2
	.WORD	0

	.ENDR


.= 24				;SET UP POWER-FAIL HANDLER
	.WORD	PWRDN,340	;AT PRTY 7

.= 60				;SET UP LK40 INTERRUPT VECTOR
	.WORD	LKRINT,200	;AT PRTY 4

.= 300				;SET UP DL11 INTERRUPT VECTOR
	.WORD	DLRINT,240	;AT PRTY 5

.= 320				;SET UP DISPLAY-STOP INTERRUPT VECTOR
	.WORD	DISSTP,200	;AT PRTY 4

.= 324				;SET UP LIGHT-PEN-HIT INTERRUPT VECTOR
	.WORD	LPHIT,200	;AT PRTY 4

.= 400 + STAKSZ			;RESERVE SPACE FOR A STACK


	.SBTTL	ENTRY POINT AND MAIN LOOP

START:	RESET			;RESET ALL DEVICES
	MOV	#START,SP	;SET UP STACK POINTER
	MOV	#BUFTOP,R0	;AND DO INITIALIZATION OF VARIABLES	MOV	R0,DISTOP	MOV	R0,LISTOP	MOV	R0,DISBOT	MOV	R0,LISBOT	MOV	#30.,HITIGN	CLR	DLCHAR	CLR	DLCHAR+2	MOV	#2,VLINES	CLR	ALINES	CLR	BLINES	MOV	#173400,SAVWRD	MOV	#173400,BUFTOP	MOV	#340,PSW	;SET PRIORITY TO 7
	BIS	#106,DLRS	;SET UP DL11
	BIS	#100,LKRS	;AND LK40
	MOV	#DLISTX,DPC	;AND START DISPLAY
	CLR	PSW		;THEN SET PRIORITY TO 0

   1$:	MOVB	DLCHAR,R0	;ANY CHARACTERS YET?
	BNE	2$		;(YES - PROCESS IT)
	WAIT			;(NO -WAIT FOR A WHILE)
	BR	1$		;(AND TRY AGAIN)

   2$:	MOV	#DLCHAR,R1	;FIDDLE THE BUFFER	MOV	R1,R2	INC	R2	MOVB	(R2)+,(R1)+	MOVB	(R2)+,(R1)+	MOVB	(R2)+,(R1)+	CLRB	(R1)	JSR	PC,TYPEIT	;TYPE THE CHAR
	BR	1$		;AND GET ANOTHER
	.SBTTL	LIGHT-PEN-HIT INTERRUPT HANDLER

LPHIT:	MOV	DPC,-(SP)	;SAVE DPC
	MOV	#1,DPC		;RESTART DISPLAY

	DEC	HITIGN		;IGNORE HIT?
	BEQ	1$		;(NO - PROCESS IT)
	TST	(SP)+		;(YES - POP STACK AND RETURN)
	RTI

   1$:	MOV	#30.,HITIGN	;IGNORE NEXT 30 LIGHT PEN HITS
	CMP	(SP)+,#HITUP	;WAS DISPLAY AT "UP" CHARACTER?
	BEQ	2$		;(YES - MOVE SCROLL UP)
	JSR	PC,DNLINE	;(NO - MOVE SCROLL DOWN)
	RTI			;AND RETURN

   2$:	JSR	PC,UPLINE
	RTI


	.SBTTL	DISPLAY-STOP INTERRUPT HANDLER

DISSTP:	MOV	#DLIST,DPC	;JUST RESTART THE DISPLAY
	RTI


	.SBTTL	DL11 RECEIVE INTERRUPT HANDLER

DLRINT:
   1$:	HALT			;DL11 ERROR (BUFFER OVERRUN)
	JMP	START

   2$:	HALT			;DL11 ERROR (DLRB IN DLCHAR)
	JMP	START


PWRDIE:	HALT			;POWER FAILURE DURING POWER UP SEQUENCE
	JMP	START		;OR POWER UP DURING POWER DOWN SEQUENCE
	.SBTTL	LK40 RECEIVE INTERRUPT HANDLER

LKRINT:	MOV	R0,-(SP)	;SAVE R0
	MOV	LKRB,R0		;GET CHAR IN R0
	CMP	R0,#UPCHAR	;MOVE SCROLL UP?
	BNE	1$
	JSR	PC,UPLINE	;YES - DO IT
	BR	3$		;THEN RESTORE R0 & RETURN

   1$:	CMP	R0,#DNCHAR	;MOVE SCROLL DOWN?
	BNE	2$
	JSR	PC,DNLINE	;YES - DO IT
	BR	3$		;THEN RESTORE R0 & RETURN

   2$:	TSTB	DLXS		;IF DL11 NOT READY
	BPL	4$		;THEN SOMETHING'S WRONG
	MOVB	R0,DLXB		;ELSE SHOOT IT OVER TO DELPHI

   3$:	MOV	(SP)+,R0	;RESTORE R0
	RTI			;AND RETURN

   4$:	HALT			;DL11 SLOWER THAN LK40!!??!!
	JMP	START


	.SBTTL	POWER-DOWN HANDLER

PWRDN:	MOV	#PWRDIE,24	;IF POWER COMES UP BEFORE WE'RE READY THEN DIE
	MOV	R0,PWRDAT+14	;SAVE R0
	MOV	#PWRDAT,R0
	MOV	R6,(R0)+	;AND R6 THRU R1
	MOV	R5,(R0)+
	MOV	R4,(R0)+
	MOV	R3,(R0)+
	MOV	R2,(R0)+
	MOV	R1,(R0)
	MOV	#PWRUP,24	;SET POWER-UP HANDLER
	HALT			;AND STOP MACHINE


	.SBTTL	POWER-UP HANDLER

PWRUP:	MOV	#PWRDIE,24	;IF POWER COMES DOWN BEFORE WE'RE READY THEN DIE
	MOV	#PWRDAT,R0	;RESTORE REGISTERS
	MOV	(R0)+,R6
	MOV	(R0)+,R5
	MOV	(R0)+,R4
	MOV	(R0)+,R3
	MOV	(R0)+,R2
	MOV	(R0)+,R1
	MOV	(R0),R0
	MOV	#PWRDN,24	;ALLOW POWER-DOWN NOW
	BIS	#106,DLRS	;SET UP DL11
	BIS	#100,LKRS	;AND LK40
	MOV	#DLISTX,DPC	;AND START DISPLAY
	RTI			;THEN RETURN AS IF NOTHING HAPPENED
	.SBTTL	TYPEIT ROUTINE

TYPEIT:	BIC	#177600,R0	;USE LOW-ORDER 7 BITS
	CMP	R0,#12		;NL?
	BEQ	2$		;YES - SPECIAL CASE IT
	CMP	R0,#15		;CR?
	BEQ	1$		;YES - TYPE IT
	CMP	R0,#10		;BS?
	BEQ	1$		;YES - TYPE IT
	CMP	R0,#40		;PRINTABLE?
	BLO	4$		;NO - IGNORE IT
	CMP	R0,#177
	BEQ	4$
	CMP	R0,ATSIGN	;IF A LEADING AT SIGN
	BEQ	4$		;THEN IGNORE IT
	CLR	ATSIGN		;STOP IGNORING AT SIGNS
   1$:	JMP	ADDCH		;ADD THE CHAR TO THE DISPLAY

   2$:	JSR	PC,ADDCH	;ADD NL TO DISPLAY
	BIT	#1,LISBOT	;THEN TYPE A NULL IF
	BEQ	3$		;NEEDED TO MAKE END EVEN
	CLR	R0
	JSR	PC,ADDCH

   3$:	INC	VLINES		;COUNT THIS LINE
	JMP	UPLINE		;AND MOVE SCROLL UP A LINE

   4$:	RTS	PC


	.SBTTL	UPLINE - MOVES THE SCROLL UP ONE LINE

UPLINE:	CMP	VLINES,#MINVIS	;IF TOO FEW LINES VISABLE THEN FORGET IT
	BLOS	3$
	MOV	PSW,-(SP)	;SAVE PRTY
	MOV	R0,-(SP)	;AND R0
	MOV	#340,PSW	;AND SET PRTY TO 7
	MOV	DISTOP,R0	;GET PTR TO 1ST LINE OF VISABLE DISPLAY

	INC	ALINES
	JSR	PC,NXTLIN	;GET PTR TO START OF NEXT LINE
	MOV	R0,DISTOP	;AND START DISPLAY-LIST THERE
	CMP	DISBOT,LISBOT	;IF ALREADY DISPLAYING BOTTOM LINE
	BEQ	1$		;THEN DON'T EXTEND DISPLAY
	MOV	DISBOT,R0	;OTHERWISE DISPLAY ANOTHER LINE
	JSR	PC,NXTLIN
	MOV	@R0,-(SP)	;SAVE WORD,
	MOV	#173400,@R0	;PUT IN A 173400
	MOV	SAVWRD,@DISBOT	;EXTEND DISPLAY DOWN 1 LINE
	MOV	(SP)+,SAVWRD
	MOV	R0,DISBOT
	DEC	BLINES
	BR	2$
   1$:	DEC	VLINES		;REMEMBER WE AREN'T SHOWING IT
   2$:	MOV	(SP)+,R0	;RESTORE R0, PRTY
	MOV	(SP)+,PSW
   3$:	RTS	PC		;AND RETURN
NXTLIN:	CMP	R0,#BUFBOT	;(HANDLE WRAPAROUND)
	BNE	1$
	MOV	#BUFTOP,R0

   1$:	CMPB	(R0)+,#12	;IGNORE ALL CHARS UP TO NEXT NL
	BNE	NXTLIN
	INC	R0		;MAKE IT EVEN
	BIC	#1,R0
	RTS	PC


DNLINE:	HALT			;DNLINE NOT IMPLEMENTED
	JMP	START
	.SBTTL	ADDCH - ADD A CHARACTER TO THE DISPLAY-LIST

ADDCH:	MOV	PSW,-(SP)	;SAVE PRTY
	MOV	#340,PSW	;AND SET TO PRTY 7
	BIT	#1,LISBOT	;IF PTR IS EVEN
	BEQ	1$		;THEN ALLOCATE 2 CHARS
	MOVB	R0,@LISBOT	;OTHERWISE STUFF INTO DISPLAY-LIST
	INC	LISBOT		;AND UPDATE PTR
	MOV	(SP)+,PSW	;RESTORE OLD PRTY
	RTS	PC		;AND RETURN

   1$:	MOV	R5,-(SP)	;SAVE R5,R4
	MOV	R4,-(SP)
	MOV	LISBOT,R5	;R5 := PTR TO DSTOP AT END OF DISPLAY-LIST
	MOV	R5,R4		;R4 := PTR TO NEXT WORD OF DISPLAY-LIST
	INC	LISBOT		;UPDATE PTR TO NEXT CHAR
	TST	(R4)+
	CMP	R4,#BUFBOT	;(HANDLE WRAPAROUND)
	BLO	2$
	MOV	#BUFTOP,R4
	MOV	R4,LISBOT

   2$:	CMP	R4,LISTOP	;ROOM IN BUFFER?
	BNE	4$		;YES - DO IT

	MOV	R0,-(SP)	;SAVE R0
	MOV	LISTOP,R0	;DELETE TOP LINE FROM THE DLIST
	JSR	PC,NXTLIN
	CMP	LISTOP,DISTOP	;AND FROM THE VISABLE LIST
	BNE	3$		;IF NECESSARY
	MOV	R0,DISTOP
   3$:	MOV	R0,LISTOP
	MOV	(SP)+,R0

   4$:	MOV	(R5),(R4)	;MOVE DSTOP DOWN 1 WORD
	MOV	R0,(R5)		;PUT NEW CHAR (AND A NULL) IN THE DISPLAY-LIST
	INC	LISBOT		;INCREMENT PTR TO END-OF-LIST
	CMP	R5,DISBOT	;CHANGE DISBOT IF NECESSARY
	BNE	5$
	MOV	R4,DISBOT
   5$:	MOV	(SP)+,R4	;RESTORE R4,R5
	MOV	(SP)+,R5
	MOV	(SP)+,PSW	;RESTORE OLD PRTY
	RTS	PC		;AND RETURN
	.SBTTL	DISPLAY-LIST HEADER, VARIABLES, AND DISPLAY-LIST

DLIST:	100030			;CHAR MODE, BLINK ON
	.BYTE	'_,0		;CURSOR IS AN UNDERSCORE

DLISTX:	117120			;POINT MODE, INTENSITY 4, LIGHT PEN HIT OFF, BLINK OFF
	170044			;ITALICS OFF, SYNC
	.WORD	0,1377		;UNINTENSIFIED POINT IN UPPER-LEFT CORNER
	100000			;CHAR MODE

	.ASCII	"ROLL UP:  "
	100140			;CHAR MODE, LIGHT PEN HIT ON
	.BYTE	177,177
HITUP:	100100			;CHAR MODE, LIGHT PEN HIT OFF
	.ASCII	"    ROLL DOWN:  "
	100140			;CHAR MODE, LIGHT PEN HIT ON
	.BYTE 177,177
	100100			;CHAR MODE, LIGHT PEN HIT OFF
	.BYTE	15,12		;CARRIAGE-RETURN/LINE-FEED
	160000			;DJUMP
DISTOP:	BUFTOP			;PTR TO 1ST CHAR OF VISABLE DLIST
DISBOT:	BUFTOP			;PTR TO DSTOP AT END OF VISABLE DLIST
HITIGN:	30.			;# OF LIGHT PEN INTERRUPTS TO IGNORE
LISTOP:	BUFTOP			;PTR TO 1ST CHAR OF DLIST
LISBOT:	BUFTOP			;PTR TO 1ST CHAR AFTER DLIST
VLINES:	2			;# OF LINES BELOW THE TOP OF THE VISABLE DLIST
BLINES:	0			;# OF LINES BELOW THE VISABLE DISPLAY-LIST
ALINES:	0			;# OF LINES ABOVE THE VISABLE DISPLAY-LIST
SAVWRD:	173400			;"TRUE" VALUE OF WORD IN WHICH DSTOP AT END
DLCHAR:	.WORD	0		;CHARACTER BUFFER FOR DL11
				;DISPLAY-LIST IS.
ATSIGN:	.WORD	'@		;IGNORES LEADING AT SIGNS
PWRDAT:	.BLKW	7		;SAVE AREA FOR REGISTERS UPON POWER FAIL


BUFTOP:	173400			;DSTOP

.= 37774			;ALL OF THIS IS USED FOR THE DLIST

BUFBOT:	160000			;DJUMP
	BUFTOP

	.END	START
                                                                                                                            